
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3f f6 00 00       	call   c000f65f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 83 83 02 00       	call   c00283a8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb fc 8f 02 c0       	mov    ebx,0xc0028ffc
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 08 90 02 c0    	cmp    ebx,0xc0029008
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 ce 02 c0       	mov    eax,0xc002ce98
c0000049:	3d 98 ce 02 c0       	cmp    eax,0xc002ce98
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 ce 02 c0       	push   0xc002ce98
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 ce 02 c0       	mov    eax,0xc002ce98
c0000075:	2d 98 ce 02 c0       	sub    eax,0xc002ce98
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 ce 02 c0       	push   0xc002ce98
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c8 d4 02 c0 00 	cmp    BYTE PTR ds:0xc002d4c8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 10 90 02 c0       	mov    ebx,0xc0029010
c00000bb:	81 eb 0c 90 02 c0    	sub    ebx,0xc002900c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 0c 90 02 c0       	mov    esi,0xc002900c
c00000ca:	a1 cc d4 02 c0       	mov    eax,ds:0xc002d4cc
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 cc d4 02 c0       	mov    ds:0xc002d4cc,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 cc d4 02 c0       	mov    eax,ds:0xc002d4cc
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 ce 02 c0       	push   0xc002ce98
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c8 d4 02 c0 01 	mov    BYTE PTR ds:0xc002d4c8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d0 d4 02 c0       	push   0xc002d4d0
c000012c:	68 98 ce 02 c0       	push   0xc002ce98
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 e5 ce 01 00       	call   c001d288 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 82 20 01 00       	call   c001243d <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 c3 ce 01 00       	call   c001d288 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 6b d3 01 00       	call   c001d74f <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 81 d9 01 00       	call   c001dd6e <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 10 d9 02 c0 	lgdtd  ds:0xc002d910
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 eb 3d 01 00       	call   c00143cd <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 e8 d4 02 c0       	mov    ds:0xc002d4e8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 e8 d4 02 c0    	mov    DWORD PTR ds:0xc002d4e8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d e8 d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d4e8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 20 90 02 c0 02 	test   BYTE PTR [edx-0x3ffd6fe0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 20 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6fe0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 20 90 02 c0 08 	test   BYTE PTR [edx-0x3ffd6fe0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 20 90 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6fe0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 20 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6fe0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 00 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d500
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 00 d5 02 c0    	mov    DWORD PTR ds:0xc002d500,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 04 d5 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2afc]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 04 d5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2afc],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 00 d5 02 c0    	mov    DWORD PTR ds:0xc002d500,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 2c d5 02 c0    	cmp    DWORD PTR ds:0xc002d52c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 3c d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d53c
c0000e38:	c7 42 0c 34 d5 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d534
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 3c d5 02 c0    	mov    DWORD PTR ds:0xc002d53c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 2c d5 02 c0    	mov    DWORD PTR ds:0xc002d52c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 00 d5 02 c0 02 	test   BYTE PTR ds:0xc002d500,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 00 d5 02 c0       	mov    eax,0xc002d500
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 00 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d500
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 00 d5 02 c0       	mov    eax,0xc002d500
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 04 d5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2afc]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 04 d5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2afc],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 34 d5 02 c0 	lea    edx,[eax*8-0x3ffd2acc]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 00 d5 02 c0       	mov    eax,0xc002d500
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 40 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d540
c00011ba:	81 fb 34 d5 02 c0    	cmp    ebx,0xc002d534
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 34 d5 02 c0       	cmp    eax,0xc002d534
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 30 d5 02 c0    	cmp    DWORD PTR ds:0xc002d530,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 3c d5 02 c0       	mov    ds:0xc002d53c,eax
c00011f6:	a3 40 d5 02 c0       	mov    ds:0xc002d540,eax
c00011fb:	a3 30 d5 02 c0       	mov    ds:0xc002d530,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 34 d5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d534
c0001209:	c7 40 0c 34 d5 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d534
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 40 d5 02 c0       	mov    ds:0xc002d540,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 34 d5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d534
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 f8 d4 02 c0 	lea    ebp,[edx*4-0x3ffd2b08]
c000125a:	8b 14 95 00 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2b00]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 00 d5 02 c0 	lea    ecx,[edx*4-0x3ffd2b00]
c0001275:	8b 14 95 00 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2b00]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 34 d8 02 c0 	or     DWORD PTR [edi*4-0x3ffd27cc],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 34 d5 02 c0 	lea    eax,[eax*8-0x3ffd2acc]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 3c d5 02 c0    	mov    DWORD PTR ds:0xc002d53c,ecx
c000132f:	89 0d 40 d5 02 c0    	mov    DWORD PTR ds:0xc002d540,ecx
c0001335:	c7 41 08 34 d5 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d534
c000133c:	c7 41 0c 34 d5 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d534
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 2c d5 02 c0 	lea    edx,[ecx*8-0x3ffd2ad4]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 34 d8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd27cc]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 34 d8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd27cc]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 2c d5 02 c0 	lea    edx,[eax*4-0x3ffd2ad4]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 34 d8 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd27cc],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 3c d5 02 c0    	mov    DWORD PTR ds:0xc002d53c,edi
c0001402:	89 3d 40 d5 02 c0    	mov    DWORD PTR ds:0xc002d540,edi
c0001408:	c7 47 08 34 d5 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d534
c000140f:	c7 47 0c 34 d5 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d534
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 30 d5 02 c0    	mov    DWORD PTR ds:0xc002d530,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 2c d5 02 c0       	mov    eax,ds:0xc002d52c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 2c d5 02 c0    	mov    DWORD PTR ds:0xc002d52c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 00 d5 02 c0       	mov    edx,0xc002d500
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 00 d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d500,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 00 d5 02 c0       	mov    eax,0xc002d500
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 54 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d854
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 54 d8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d854,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 54 d8 02 c0    	mov    DWORD PTR ds:0xc002d854,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 2c d5 02 c0    	cmp    DWORD PTR ds:0xc002d52c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 2c d5 02 c0    	mov    DWORD PTR ds:0xc002d52c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 00 d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d500,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 00 d5 02 c0       	mov    eax,0xc002d500
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 5c d8 02 c0    	push   DWORD PTR ds:0xc002d85c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 00 d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d500,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 00 d5 02 c0       	mov    eax,0xc002d500
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 5c d8 02 c0       	mov    eax,ds:0xc002d85c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 00 d5 02 c0       	mov    eax,0xc002d500
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 2c d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d52c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 00 d5 02 c0       	mov    eax,0xc002d500
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 2c d5 02 c0       	mov    eax,ds:0xc002d52c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 04 d5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2afc]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 34 d5 02 c0       	mov    eax,0xc002d534
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 2c d8 02 c0       	cmp    eax,0xc002d82c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 68 d8 02 c0       	mov    eax,ds:0xc002d868
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 50 d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d850
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 64 d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d864
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 74 d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d874
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 00 d5 02 c0       	mov    eax,0xc002d500
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 24 91 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6edc]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 00 d5 02 c0       	mov    eax,ds:0xc002d500
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 00 d5 02 c0       	mov    ds:0xc002d500,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 44 d8 02 c0    	mov    DWORD PTR ds:0xc002d844,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 48 d8 02 c0    	mov    DWORD PTR ds:0xc002d848,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 4c d8 02 c0    	mov    DWORD PTR ds:0xc002d84c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 54 d8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d854,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 c0 0f 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf040]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 ac eb 01 00       	jmp    c002079e <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 c0 0f 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf040]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 dd eb 01 00       	jmp    c00207e5 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 c0 0f 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf040]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 05 ec 01 00       	jmp    c002082c <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 fa 47 02 00       	call   c0026704 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 40 92 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6dc0]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 40 92 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6dc0]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 40 91 02 c0       	mov    edx,0xc0029140
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 60 92 02 c0       	mov    edx,0xc0029260
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba d4 bd 02 c0       	mov    edx,0xc002bdd4
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 6c 92 02 c0       	mov    edx,0xc002926c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 50 92 02 c0       	mov    edx,0xc0029250
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 a0 d8 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2760]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 80 d8 02 c0    	mov    ax,ds:0xc002d880
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 80 d8 02 c0    	mov    ds:0xc002d880,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 f7 35 02 00       	call   c0026704 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 72 92 02 c0       	mov    eax,0xc0029272
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad c0 91 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6e40]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 7b 92 02 c0       	mov    eax,0xc002927b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 40 92 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6dc0]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 c2 1f 02 00       	call   c0026704 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 50 92 02 c0       	mov    edx,0xc0029250
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 40 91 02 c0       	mov    edx,0xc0029140
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 50 91 02 c0       	mov    edx,0xc0029150
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 a0 d8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2760]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 a0 d8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2760],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 89 09 02 00       	call   c0026704 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 6f 09 02 00       	call   c0026704 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 97 91 02 c0       	mov    eax,0xc0029197
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 90 91 02 c0       	mov    eax,0xc0029190
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 a0 d8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2760]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be 80 91 02 c0       	mov    esi,0xc0029180
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 b2 f0 01 00       	call   c0026704 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 60 92 02 c0       	mov    edx,0xc0029260
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 60 91 02 c0       	mov    edx,0xc0029160
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 70 91 02 c0       	mov    edx,0xc0029170
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba 82 92 02 c0       	mov    edx,0xc0029282
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba 8e 92 02 c0       	mov    edx,0xc002928e
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba a2 92 02 c0       	mov    edx,0xc00292a2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 30 71 00 00       	call   c000f599 <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2a 71 00 00       	call   c000f5a9 <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c c0 95 02 c0 	mov    DWORD PTR [esp+0xc],0xc00295c0
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 c0 95 02 c0 	mov    DWORD PTR [esp+0x10],0xc00295c0
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 c0 93 02 c0       	mov    eax,0xc00293c0
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 00 93 02 c0       	mov    eax,0xc0029300
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 c0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d40]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 6f 6e 00 00       	call   c000f5a9 <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 59 6e 00 00       	call   c000f5a9 <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 06 fa 01 00       	call   c00281d7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 c9 f9 01 00       	call   c00281b9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 9d f9 01 00       	call   c00281d7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 50 f0 01 00       	call   c00278dc <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 d2 fa 01 00       	call   c0028370 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 17 f9 01 00       	call   c00281d7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 59 f8 01 00       	call   c00281d7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 26 f8 01 00       	call   c00281b9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 13 f7 01 00       	call   c00281d7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 db f6 01 00       	call   c00281b9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 38 6a 00 00       	call   c000f5c9 <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d3 69 00 00       	call   c000f5a9 <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 c0 96 02 c0       	mov    eax,0xc00296c0
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 e7 f4 01 00       	call   c00281d7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 ac f4 01 00       	call   c00281b9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 20 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd64e0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 bc f1 01 00       	call   c0027f6b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 3a eb 01 00       	call   c0027908 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 f6 f3 01 00       	call   c00281db <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 e4 f4 01 00       	call   c00282ff <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 ce ea 01 00       	call   c0027908 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 79 f3 01 00       	call   c00281d5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 5a f3 01 00       	call   c00281d9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 f0 f4 01 00       	call   c0028390 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 9a f0 01 00       	call   c0027f6b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 18 ea 01 00       	call   c0027908 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 d4 f2 01 00       	call   c00281db <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 c2 f3 01 00       	call   c00282ff <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 ac e9 01 00       	call   c0027908 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 57 f2 01 00       	call   c00281d5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 37 f2 01 00       	call   c00281d9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 cc f3 01 00       	call   c0028390 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 72 f1 01 00       	call   c00281d7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 30 f1 01 00       	call   c00281b9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 18 f1 01 00       	call   c00281d7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 8a ee 01 00       	call   c0027f6b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 8c e1 01 00       	call   c002728b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 ef e7 01 00       	call   c0027908 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 41 ee 01 00       	call   c0027f6b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 47 e1 01 00       	call   c002728b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 16 ee 01 00       	call   c0027f6b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 66 f0 01 00       	call   c00281d5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 43 e7 01 00       	call   c00278dc <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 c5 f1 01 00       	call   c0028370 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 ec ef 01 00       	call   c00281b9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 e7 e6 01 00       	call   c00278dc <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 65 ed 01 00       	call   c0027f6b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 e8 e6 01 00       	call   c0027908 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 3a ed 01 00       	call   c0027f6b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 a1 e9 01 00       	call   c0027bec <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 20 e0 01 00       	call   c002728b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 80 d9 01 00       	call   c0026c20 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 57 f0 01 00       	call   c00282ff <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 40 e6 01 00       	call   c0027908 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 27 f0 01 00       	call   c00282ff <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 99 df 01 00       	call   c002728b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 d2 ee 01 00       	call   c00281db <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 ba e8 01 00       	call   c0027bec <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 40 df 01 00       	call   c002728b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 2e f0 01 00       	call   c0028390 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 00 ec 01 00       	call   c0027f6b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 57 e5 01 00       	call   c00278dc <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 36 ee 01 00       	call   c00281d7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 cf de 01 00       	call   c002728b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 fb e4 01 00       	call   c00278dc <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 9d ef 01 00       	call   c0028390 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 4e eb 01 00       	call   c0027f6b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 cb e4 01 00       	call   c0027908 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 1e eb 01 00       	call   c0027f6b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 24 de 01 00       	call   c002728b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 f4 ea 01 00       	call   c0027f6b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 46 ed 01 00       	call   c00281d7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 1d e4 01 00       	call   c00278dc <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 9f ee 01 00       	call   c0028370 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 c6 ec 01 00       	call   c00281b9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 c0 e3 01 00       	call   c00278dc <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 3e ea 01 00       	call   c0027f6b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 c1 e3 01 00       	call   c0027908 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 13 ea 01 00       	call   c0027f6b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 7a e6 01 00       	call   c0027bec <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 f9 dc 01 00       	call   c002728b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 49 d6 01 00       	call   c0026c20 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 20 ed 01 00       	call   c00282ff <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 09 e3 01 00       	call   c0027908 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 f0 ec 01 00       	call   c00282ff <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 62 dc 01 00       	call   c002728b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 9b eb 01 00       	call   c00281db <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 82 e5 01 00       	call   c0027bec <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 01 dc 01 00       	call   c002728b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 ef ec 01 00       	call   c0028390 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 c1 e8 01 00       	call   c0027f6b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 18 e2 01 00       	call   c00278dc <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 f7 ea 01 00       	call   c00281d7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 90 db 01 00       	call   c002728b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 bc e1 01 00       	call   c00278dc <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 31 e8 01 00       	call   c0027f6b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 37 db 01 00       	call   c002728b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 80 9b 02 c0       	mov    eax,0xc0029b80
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 94 9b 02 c0       	mov    eax,0xc0029b94
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6c 5d 00 00       	call   c000f5a9 <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 6e 5d 00 00       	call   c000f5c9 <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 ac e6 01 00       	call   c0027f6b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 2a e0 01 00       	call   c0027908 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 bc d2 01 00       	call   c0026c20 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 93 e9 01 00       	call   c00282ff <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 7c df 01 00       	call   c0027908 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 5f e9 01 00       	call   c00282ff <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 d1 d8 01 00       	call   c002728b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 31 e9 01 00       	call   c00282ff <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 20 df 01 00       	call   c0027908 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 89 d8 01 00       	call   c002728b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 aa d1 01 00       	call   c0026c20 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 81 e8 01 00       	call   c00282ff <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 6a de 01 00       	call   c0027908 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 4d e8 01 00       	call   c00282ff <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 bf d7 01 00       	call   c002728b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 1f e8 01 00       	call   c00282ff <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 0e de 01 00       	call   c0027908 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 77 d7 01 00       	call   c002728b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 55 d7 01 00       	call   c002728b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 31 d0 01 00       	call   c0026c20 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 08 e7 01 00       	call   c00282ff <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 f1 dc 01 00       	call   c0027908 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 d4 e6 01 00       	call   c00282ff <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 46 d6 01 00       	call   c002728b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 a6 e6 01 00       	call   c00282ff <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 8f dc 01 00       	call   c0027908 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 f8 d5 01 00       	call   c002728b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 58 e6 01 00       	call   c00282ff <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 41 dc 01 00       	call   c0027908 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 aa d5 01 00       	call   c002728b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 bf ce 01 00       	call   c0026c20 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 96 e5 01 00       	call   c00282ff <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 7f db 01 00       	call   c0027908 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 66 e5 01 00       	call   c00282ff <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 d8 d4 01 00       	call   c002728b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 38 e5 01 00       	call   c00282ff <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 21 db 01 00       	call   c0027908 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 8a d4 01 00       	call   c002728b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 ea e4 01 00       	call   c00282ff <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 d3 da 01 00       	call   c0027908 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 3c d4 01 00       	call   c002728b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 10 d4 01 00       	call   c002728b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 6d da 01 00       	call   c0027908 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 29 e3 01 00       	call   c00281db <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 b8 d3 01 00       	call   c002728b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 15 da 01 00       	call   c0027908 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 d1 e2 01 00       	call   c00281db <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 4b cc 01 00       	call   c0026c20 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 22 e3 01 00       	call   c00282ff <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 0b d9 01 00       	call   c0027908 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 ee e2 01 00       	call   c00282ff <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 60 d2 01 00       	call   c002728b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 c0 e2 01 00       	call   c00282ff <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 a9 d8 01 00       	call   c0027908 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 12 d2 01 00       	call   c002728b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 72 e2 01 00       	call   c00282ff <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 5b d8 01 00       	call   c0027908 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 c4 d1 01 00       	call   c002728b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 24 e2 01 00       	call   c00282ff <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 0d d8 01 00       	call   c0027908 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 76 d1 01 00       	call   c002728b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 d6 e1 01 00       	call   c00282ff <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 bf d7 01 00       	call   c0027908 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 28 d1 01 00       	call   c002728b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 2a ca 01 00       	call   c0026c20 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 01 e1 01 00       	call   c00282ff <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 ea d6 01 00       	call   c0027908 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 d1 e0 01 00       	call   c00282ff <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 43 d0 01 00       	call   c002728b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 a3 e0 01 00       	call   c00282ff <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 8c d6 01 00       	call   c0027908 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 f5 cf 01 00       	call   c002728b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 55 e0 01 00       	call   c00282ff <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 3e d6 01 00       	call   c0027908 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 a7 cf 01 00       	call   c002728b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 07 e0 01 00       	call   c00282ff <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 f0 d5 01 00       	call   c0027908 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 59 cf 01 00       	call   c002728b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 b9 df 01 00       	call   c00282ff <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 a2 d5 01 00       	call   c0027908 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 0b cf 01 00       	call   c002728b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 df ce 01 00       	call   c002728b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 3c d5 01 00       	call   c0027908 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 f8 dd 01 00       	call   c00281db <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 87 ce 01 00       	call   c002728b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 e4 d4 01 00       	call   c0027908 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 a0 dd 01 00       	call   c00281db <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 2e ce 01 00       	call   c002728b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 8b d4 01 00       	call   c0027908 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 47 dd 01 00       	call   c00281db <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 d5 cd 01 00       	call   c002728b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 32 d4 01 00       	call   c0027908 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 ee dc 01 00       	call   c00281db <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 4c c6 01 00       	call   c0026c20 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 23 dd 01 00       	call   c00282ff <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 0c d3 01 00       	call   c0027908 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 ef dc 01 00       	call   c00282ff <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 61 cc 01 00       	call   c002728b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 c1 dc 01 00       	call   c00282ff <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 aa d2 01 00       	call   c0027908 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 13 cc 01 00       	call   c002728b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 73 dc 01 00       	call   c00282ff <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 5c d2 01 00       	call   c0027908 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 c5 cb 01 00       	call   c002728b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 25 dc 01 00       	call   c00282ff <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 0e d2 01 00       	call   c0027908 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 77 cb 01 00       	call   c002728b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 d7 db 01 00       	call   c00282ff <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 c0 d1 01 00       	call   c0027908 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 29 cb 01 00       	call   c002728b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 89 db 01 00       	call   c00282ff <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 72 d1 01 00       	call   c0027908 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 d8 ca 01 00       	call   c002728b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 38 db 01 00       	call   c00282ff <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 21 d1 01 00       	call   c0027908 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 8a ca 01 00       	call   c002728b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 84 c3 01 00       	call   c0026c20 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 5b da 01 00       	call   c00282ff <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 44 d0 01 00       	call   c0027908 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 24 da 01 00       	call   c00282ff <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 96 c9 01 00       	call   c002728b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 f6 d9 01 00       	call   c00282ff <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 df cf 01 00       	call   c0027908 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 48 c9 01 00       	call   c002728b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 a8 d9 01 00       	call   c00282ff <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 91 cf 01 00       	call   c0027908 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 fa c8 01 00       	call   c002728b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 5a d9 01 00       	call   c00282ff <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 43 cf 01 00       	call   c0027908 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 ac c8 01 00       	call   c002728b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 0c d9 01 00       	call   c00282ff <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 f5 ce 01 00       	call   c0027908 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 5e c8 01 00       	call   c002728b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 be d8 01 00       	call   c00282ff <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 a7 ce 01 00       	call   c0027908 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 0d c8 01 00       	call   c002728b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 6d d8 01 00       	call   c00282ff <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 56 ce 01 00       	call   c0027908 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 c5 c7 01 00       	call   c002728b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 9e c7 01 00       	call   c002728b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 fc cd 01 00       	call   c0027908 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 b8 d6 01 00       	call   c00281db <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 47 c7 01 00       	call   c002728b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 a5 cd 01 00       	call   c0027908 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 61 d6 01 00       	call   c00281db <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 ef c6 01 00       	call   c002728b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 4d cd 01 00       	call   c0027908 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 09 d6 01 00       	call   c00281db <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 97 c6 01 00       	call   c002728b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 f5 cc 01 00       	call   c0027908 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 b1 d5 01 00       	call   c00281db <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 3f c6 01 00       	call   c002728b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 9d cc 01 00       	call   c0027908 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 59 d5 01 00       	call   c00281db <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 ed c5 01 00       	call   c002728b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 4b cc 01 00       	call   c0027908 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 07 d5 01 00       	call   c00281db <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 1b be 01 00       	call   c0026c20 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 f2 d4 01 00       	call   c00282ff <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 db ca 01 00       	call   c0027908 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 c2 d4 01 00       	call   c00282ff <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 34 c4 01 00       	call   c002728b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 c4 9b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd643c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 68 d4 01 00       	call   c00282ff <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 51 ca 01 00       	call   c0027908 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 bc c3 01 00       	call   c002728b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 09 d4 01 00       	call   c00282ff <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 f2 c9 01 00       	call   c0027908 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 5d c3 01 00       	call   c002728b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 aa d3 01 00       	call   c00282ff <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 93 c9 01 00       	call   c0027908 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 fe c2 01 00       	call   c002728b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 4b d3 01 00       	call   c00282ff <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 34 c9 01 00       	call   c0027908 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 9f c2 01 00       	call   c002728b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 ec d2 01 00       	call   c00282ff <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 d5 c8 01 00       	call   c0027908 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 40 c2 01 00       	call   c002728b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 8d d2 01 00       	call   c00282ff <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 76 c8 01 00       	call   c0027908 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 e1 c1 01 00       	call   c002728b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 2e d2 01 00       	call   c00282ff <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 17 c8 01 00       	call   c0027908 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 82 c1 01 00       	call   c002728b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 cf d1 01 00       	call   c00282ff <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 b8 c7 01 00       	call   c0027908 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 23 c1 01 00       	call   c002728b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 2d ba 01 00       	call   c0026c20 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 04 d1 01 00       	call   c00282ff <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 ed c6 01 00       	call   c0027908 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 d4 d0 01 00       	call   c00282ff <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 46 c0 01 00       	call   c002728b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 e0 9b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6420]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 79 d0 01 00       	call   c00282ff <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 62 c6 01 00       	call   c0027908 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 cd bf 01 00       	call   c002728b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 19 d0 01 00       	call   c00282ff <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 02 c6 01 00       	call   c0027908 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 6d bf 01 00       	call   c002728b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 b9 cf 01 00       	call   c00282ff <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 a2 c5 01 00       	call   c0027908 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 0d bf 01 00       	call   c002728b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 59 cf 01 00       	call   c00282ff <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 42 c5 01 00       	call   c0027908 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 ad be 01 00       	call   c002728b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 f9 ce 01 00       	call   c00282ff <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 e2 c4 01 00       	call   c0027908 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 4d be 01 00       	call   c002728b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 99 ce 01 00       	call   c00282ff <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 82 c4 01 00       	call   c0027908 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 ed bd 01 00       	call   c002728b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 39 ce 01 00       	call   c00282ff <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 22 c4 01 00       	call   c0027908 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 8d bd 01 00       	call   c002728b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 d9 cd 01 00       	call   c00282ff <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 c2 c3 01 00       	call   c0027908 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 2d bd 01 00       	call   c002728b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 fc 9b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6404]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 d2 bc 01 00       	call   c002728b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 2f c3 01 00       	call   c0027908 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 eb cb 01 00       	call   c00281db <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 75 bc 01 00       	call   c002728b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 d2 c2 01 00       	call   c0027908 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 8e cb 01 00       	call   c00281db <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 18 bc 01 00       	call   c002728b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 75 c2 01 00       	call   c0027908 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 31 cb 01 00       	call   c00281db <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 bb bb 01 00       	call   c002728b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 18 c2 01 00       	call   c0027908 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 d4 ca 01 00       	call   c00281db <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 5e bb 01 00       	call   c002728b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 bb c1 01 00       	call   c0027908 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 77 ca 01 00       	call   c00281db <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 01 bb 01 00       	call   c002728b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 5e c1 01 00       	call   c0027908 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 1a ca 01 00       	call   c00281db <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 a4 ba 01 00       	call   c002728b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 01 c1 01 00       	call   c0027908 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 bd c9 01 00       	call   c00281db <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 47 ba 01 00       	call   c002728b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 a4 c0 01 00       	call   c0027908 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 60 c9 01 00       	call   c00281db <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 5c c0 01 00       	call   c0027908 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 d4 ca 01 00       	jmp    c0028390 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 3e c7 01 00       	call   c00281d7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 fc c6 01 00       	call   c00281b9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 93 c4 01 00       	call   c0027f6b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 94 b7 01 00       	call   c002728b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 63 c4 01 00       	call   c0027f6b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 ca c0 01 00       	call   c0027bec <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 69 c6 01 00       	call   c00281b9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 6c c6 01 00       	call   c00281d7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 3f c6 01 00       	call   c00281d7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 38 c0 01 00       	call   c0027bec <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 c2 c7 01 00       	call   c0028390 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 9d c7 01 00       	call   c0028390 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 6f c3 01 00       	call   c0027f6b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 c6 bc 01 00       	call   c00278dc <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 a5 c5 01 00       	call   c00281d7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 3e b6 01 00       	call   c002728b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 62 bc 01 00       	call   c00278dc <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 04 c7 01 00       	call   c0028390 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 3c bf 01 00       	call   c0027bec <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 b9 b5 01 00       	call   c002728b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 e5 c1 01 00       	call   c0027f6b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 e5 b4 01 00       	call   c002728b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 c5 b4 01 00       	call   c002728b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 95 c1 01 00       	call   c0027f6b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 e5 c3 01 00       	call   c00281d5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 c4 ba 01 00       	call   c00278dc <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 46 c5 01 00       	call   c0028370 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 6d c3 01 00       	call   c00281b9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 6b ba 01 00       	call   c00278dc <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 e9 c0 01 00       	call   c0027f6b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 6c ba 01 00       	call   c0027908 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 be c0 01 00       	call   c0027f6b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 25 bd 01 00       	call   c0027bec <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 a4 b3 01 00       	call   c002728b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 6e c0 01 00       	call   c0027f6b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 ba c2 01 00       	call   c00281d7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 af b9 01 00       	call   c0027908 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 81 b9 01 00       	call   c0027908 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 ba bf 01 00       	call   c0027f6b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 1e bc 01 00       	call   c0027bec <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 e6 bb 01 00       	call   c0027bec <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 65 b2 01 00       	call   c002728b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 52 c3 01 00       	call   c0028390 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 24 bf 01 00       	call   c0027f6b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 7b b8 01 00       	call   c00278dc <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 5a c1 01 00       	call   c00281d7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 f2 b1 01 00       	call   c002728b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 16 b8 01 00       	call   c00278dc <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 b8 c2 01 00       	call   c0028390 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 79 c0 01 00       	call   c00281d7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 37 c0 01 00       	call   c00281b9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 ce bd 01 00       	call   c0027f6b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 cf b0 01 00       	call   c002728b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 9e bd 01 00       	call   c0027f6b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 05 ba 01 00       	call   c0027bec <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 a4 bf 01 00       	call   c00281b9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 a7 bf 01 00       	call   c00281d7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 7a bf 01 00       	call   c00281d7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 73 b9 01 00       	call   c0027bec <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 fd c0 01 00       	call   c0028390 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 d8 c0 01 00       	call   c0028390 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 aa bc 01 00       	call   c0027f6b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 01 b6 01 00       	call   c00278dc <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 e0 be 01 00       	call   c00281d7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 79 af 01 00       	call   c002728b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 9d b5 01 00       	call   c00278dc <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 3f c0 01 00       	call   c0028390 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 77 b8 01 00       	call   c0027bec <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 f4 ae 01 00       	call   c002728b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 1f bb 01 00       	call   c0027f6b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 1f ae 01 00       	call   c002728b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 ff ad 01 00       	call   c002728b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 cf ba 01 00       	call   c0027f6b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 1f bd 01 00       	call   c00281d5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 fd b3 01 00       	call   c00278dc <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 7f be 01 00       	call   c0028370 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 a6 bc 01 00       	call   c00281b9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 a3 b3 01 00       	call   c00278dc <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 21 ba 01 00       	call   c0027f6b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 a4 b3 01 00       	call   c0027908 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 f6 b9 01 00       	call   c0027f6b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 5d b6 01 00       	call   c0027bec <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 dc ac 01 00       	call   c002728b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 a6 b9 01 00       	call   c0027f6b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 f2 bb 01 00       	call   c00281d7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 e7 b2 01 00       	call   c0027908 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 b9 b2 01 00       	call   c0027908 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 f0 b8 01 00       	call   c0027f6b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 54 b5 01 00       	call   c0027bec <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 21 b5 01 00       	call   c0027bec <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 a0 ab 01 00       	call   c002728b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 8d bc 01 00       	call   c0028390 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 5f b8 01 00       	call   c0027f6b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 b6 b1 01 00       	call   c00278dc <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 95 ba 01 00       	call   c00281d7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 2d ab 01 00       	call   c002728b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 51 b1 01 00       	call   c00278dc <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 f3 bb 01 00       	call   c0028390 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 b4 b9 01 00       	call   c00281d7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 72 b9 01 00       	call   c00281b9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 09 b7 01 00       	call   c0027f6b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 0a aa 01 00       	call   c002728b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 d9 b6 01 00       	call   c0027f6b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 40 b3 01 00       	call   c0027bec <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 df b8 01 00       	call   c00281b9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 e2 b8 01 00       	call   c00281d7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 b5 b8 01 00       	call   c00281d7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 ae b2 01 00       	call   c0027bec <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 38 ba 01 00       	call   c0028390 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 13 ba 01 00       	call   c0028390 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 e5 b5 01 00       	call   c0027f6b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 3c af 01 00       	call   c00278dc <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 1b b8 01 00       	call   c00281d7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 b4 a8 01 00       	call   c002728b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 d8 ae 01 00       	call   c00278dc <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 7a b9 01 00       	call   c0028390 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 b2 b1 01 00       	call   c0027bec <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 2f a8 01 00       	call   c002728b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 5a b4 01 00       	call   c0027f6b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 5a a7 01 00       	call   c002728b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 3a a7 01 00       	call   c002728b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 0a b4 01 00       	call   c0027f6b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 5a b6 01 00       	call   c00281d5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 38 ad 01 00       	call   c00278dc <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 ba b7 01 00       	call   c0028370 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 e1 b5 01 00       	call   c00281b9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 de ac 01 00       	call   c00278dc <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 5c b3 01 00       	call   c0027f6b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 df ac 01 00       	call   c0027908 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 31 b3 01 00       	call   c0027f6b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 98 af 01 00       	call   c0027bec <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 17 a6 01 00       	call   c002728b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 e1 b2 01 00       	call   c0027f6b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 2d b5 01 00       	call   c00281d7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 22 ac 01 00       	call   c0027908 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 f4 ab 01 00       	call   c0027908 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 2b b2 01 00       	call   c0027f6b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 8f ae 01 00       	call   c0027bec <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 5c ae 01 00       	call   c0027bec <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 db a4 01 00       	call   c002728b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 c8 b5 01 00       	call   c0028390 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 9a b1 01 00       	call   c0027f6b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 f1 aa 01 00       	call   c00278dc <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 d0 b3 01 00       	call   c00281d7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 68 a4 01 00       	call   c002728b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 8c aa 01 00       	call   c00278dc <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 2e b5 01 00       	call   c0028390 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 ef b2 01 00       	call   c00281d7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 ad b2 01 00       	call   c00281b9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 44 b0 01 00       	call   c0027f6b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 45 a3 01 00       	call   c002728b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 14 b0 01 00       	call   c0027f6b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 7b ac 01 00       	call   c0027bec <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 1a b2 01 00       	call   c00281b9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 1d b2 01 00       	call   c00281d7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 f0 b1 01 00       	call   c00281d7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 e9 ab 01 00       	call   c0027bec <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 73 b3 01 00       	call   c0028390 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 4e b3 01 00       	call   c0028390 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 20 af 01 00       	call   c0027f6b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 77 a8 01 00       	call   c00278dc <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 56 b1 01 00       	call   c00281d7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 ef a1 01 00       	call   c002728b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 13 a8 01 00       	call   c00278dc <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 b5 b2 01 00       	call   c0028390 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 ed aa 01 00       	call   c0027bec <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 6a a1 01 00       	call   c002728b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 95 ad 01 00       	call   c0027f6b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 95 a0 01 00       	call   c002728b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 75 a0 01 00       	call   c002728b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 45 ad 01 00       	call   c0027f6b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 95 af 01 00       	call   c00281d5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 73 a6 01 00       	call   c00278dc <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 f5 b0 01 00       	call   c0028370 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 1c af 01 00       	call   c00281b9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 19 a6 01 00       	call   c00278dc <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 97 ac 01 00       	call   c0027f6b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 1a a6 01 00       	call   c0027908 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 6c ac 01 00       	call   c0027f6b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 d3 a8 01 00       	call   c0027bec <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 52 9f 01 00       	call   c002728b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 1c ac 01 00       	call   c0027f6b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 68 ae 01 00       	call   c00281d7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 5d a5 01 00       	call   c0027908 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 2f a5 01 00       	call   c0027908 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 66 ab 01 00       	call   c0027f6b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 ca a7 01 00       	call   c0027bec <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 97 a7 01 00       	call   c0027bec <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 16 9e 01 00       	call   c002728b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 03 af 01 00       	call   c0028390 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 d5 aa 01 00       	call   c0027f6b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 2c a4 01 00       	call   c00278dc <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 0b ad 01 00       	call   c00281d7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 a3 9d 01 00       	call   c002728b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 c7 a3 01 00       	call   c00278dc <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 69 ae 01 00       	call   c0028390 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 27 ac 01 00       	call   c00281d7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 e5 ab 01 00       	call   c00281b9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 7c a9 01 00       	call   c0027f6b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 7d 9c 01 00       	call   c002728b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 4c a9 01 00       	call   c0027f6b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 b3 a5 01 00       	call   c0027bec <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 52 ab 01 00       	call   c00281b9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 55 ab 01 00       	call   c00281d7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 28 ab 01 00       	call   c00281d7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 21 a5 01 00       	call   c0027bec <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 ab ac 01 00       	call   c0028390 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 82 ac 01 00       	call   c0028390 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 54 a8 01 00       	call   c0027f6b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 ab a1 01 00       	call   c00278dc <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 8a aa 01 00       	call   c00281d7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 23 9b 01 00       	call   c002728b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 4b a1 01 00       	call   c00278dc <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 ed ab 01 00       	call   c0028390 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 26 a4 01 00       	call   c0027bec <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 a3 9a 01 00       	call   c002728b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 cf a6 01 00       	call   c0027f6b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 cf 99 01 00       	call   c002728b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 af 99 01 00       	call   c002728b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 7f a6 01 00       	call   c0027f6b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 b3 a8 01 00       	call   c00281b9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 aa 9f 01 00       	call   c00278dc <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 2c aa 01 00       	call   c0028370 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 53 a8 01 00       	call   c00281b9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 4d 9f 01 00       	call   c00278dc <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 cb a5 01 00       	call   c0027f6b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 4e 9f 01 00       	call   c0027908 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 a0 a5 01 00       	call   c0027f6b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 07 a2 01 00       	call   c0027bec <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 86 98 01 00       	call   c002728b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 50 a5 01 00       	call   c0027f6b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 9c a7 01 00       	call   c00281d7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 91 9e 01 00       	call   c0027908 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 63 9e 01 00       	call   c0027908 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 a7 a4 01 00       	call   c0027f6b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 0e a1 01 00       	call   c0027bec <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 f7 9d 01 00       	call   c0027908 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 b3 a6 01 00       	call   c00281db <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 a6 a0 01 00       	call   c0027bec <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 25 97 01 00       	call   c002728b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 12 a8 01 00       	call   c0028390 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 e4 a3 01 00       	call   c0027f6b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 3b 9d 01 00       	call   c00278dc <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 1a a6 01 00       	call   c00281d7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 b2 96 01 00       	call   c002728b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 da 9c 01 00       	call   c00278dc <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 7c a7 01 00       	call   c0028390 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 24 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd63dc]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 18 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd63e8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 32 19 00 00       	call   c000f5a9 <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 2f a4 01 00       	call   c00281d7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 ed a3 01 00       	call   c00281b9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 d9 a3 01 00       	call   c00281d7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 4b a1 01 00       	call   c0027f6b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 c9 9a 01 00       	call   c0027908 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 1b a1 01 00       	call   c0027f6b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 21 94 01 00       	call   c002728b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 f0 a0 01 00       	call   c0027f6b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 40 a3 01 00       	call   c00281d5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 21 9a 01 00       	call   c00278dc <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 a3 a4 01 00       	call   c0028370 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 ca a2 01 00       	call   c00281b9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 c9 99 01 00       	call   c00278dc <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 47 a0 01 00       	call   c0027f6b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 ca 99 01 00       	call   c0027908 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 1c a0 01 00       	call   c0027f6b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 83 9c 01 00       	call   c0027bec <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 02 93 01 00       	call   c002728b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 2a 9c 01 00       	call   c0027bec <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 b0 92 01 00       	call   c002728b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 9e a3 01 00       	call   c0028390 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 70 9f 01 00       	call   c0027f6b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 c7 98 01 00       	call   c00278dc <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 a6 a1 01 00       	call   c00281d7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 3f 92 01 00       	call   c002728b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 6b 98 01 00       	call   c00278dc <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 0d a3 01 00       	call   c0028390 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 ba 9e 01 00       	call   c0027f6b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 37 98 01 00       	call   c0027908 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 88 9e 01 00       	call   c0027f6b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 8e 91 01 00       	call   c002728b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 5e 9e 01 00       	call   c0027f6b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 b2 a0 01 00       	call   c00281d9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 8b 97 01 00       	call   c00278dc <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 0d a2 01 00       	call   c0028370 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 34 a0 01 00       	call   c00281b9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 32 97 01 00       	call   c00278dc <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 b0 9d 01 00       	call   c0027f6b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 33 97 01 00       	call   c0027908 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 85 9d 01 00       	call   c0027f6b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 ec 99 01 00       	call   c0027bec <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 6b 90 01 00       	call   c002728b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 87 99 01 00       	call   c0027bec <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 06 90 01 00       	call   c002728b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 f4 a0 01 00       	call   c0028390 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 c6 9c 01 00       	call   c0027f6b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 1d 96 01 00       	call   c00278dc <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 fc 9e 01 00       	call   c00281d7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 95 8f 01 00       	call   c002728b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 c1 95 01 00       	call   c00278dc <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 32 9c 01 00       	call   c0027f6b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 38 8f 01 00       	call   c002728b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 3e 9d 02 c0       	mov    eax,0xc0029d3e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 4f 9d 02 c0       	mov    eax,0xc0029d4f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 74 11 00 00       	call   c000f5a9 <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 76 11 00 00       	call   c000f5c9 <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f0 10 00 00       	jmp    c000f599 <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0b 11 00 00       	jmp    c000f5b9 <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c000e4e3:	ff 05 24 0e 03 c0    	inc    DWORD PTR ds:0xc0030e24
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 24 0e 03 c0       	mov    eax,ds:0xc0030e24
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 24 0e 03 c0       	mov    ds:0xc0030e24,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 20 0e 03 c0 00 	cmp    DWORD PTR ds:0xc0030e20,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 20 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e20,0x0
c000e50d:	e8 ab f4 00 00       	call   c001d9bd <schedule()>
c000e512:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c000e517:	48                   	dec    eax
c000e518:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 86 9d 02 c0       	push   0xc0029d86
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 08 d9 02 c0       	mov    eax,0xc002d908
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 8f 9d 02 c0       	push   0xc0029d8f
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 04 67 02 c0       	mov    eax,0xc0026704
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 99 9d 02 c0       	push   0xc0029d99
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 38 64 02 c0       	mov    eax,0xc0026438
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 a2 9d 02 c0       	push   0xc0029da2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 04 68 02 c0       	mov    eax,0xc0026804
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 ac 9d 02 c0       	push   0xc0029dac
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 84 65 02 c0       	mov    eax,0xc0026584
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 b5 9d 02 c0       	push   0xc0029db5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 0c d9 02 c0       	mov    eax,0xc002d90c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 c2 9d 02 c0       	push   0xc0029dc2
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 0d d9 02 c0       	mov    eax,0xc002d90d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 1d 56 00 00       	call   c0013c8a <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 cf 9d 02 c0       	push   0xc0029dcf
c000e69e:	e8 50 0f 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ea 0e 00 00       	call   c000f599 <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 50 0e 03 c0    	push   DWORD PTR ds:0xc0030e50
c000e6be:	68 e8 9d 02 c0       	push   0xc0029de8
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 d5 ee 00 00       	call   c001d5a0 <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 b8 f0 00 00       	call   c001d798 <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 7c e1 01 c0       	push   0xc001e17c
c000e6e9:	ff 35 50 0e 03 c0    	push   DWORD PTR ds:0xc0030e50
c000e6ef:	e8 a4 f0 00 00       	call   c001d798 <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c000e6fc:	68 cc 9e 02 c0       	push   0xc0029ecc
c000e701:	c6 05 0d d9 02 c0 01 	mov    BYTE PTR ds:0xc002d90d,0x1
c000e708:	e8 e6 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 15 fe 00 00       	call   c001e527 <Vm::initialise8086()>
c000e712:	e8 3b 43 00 00       	call   c0012a52 <Fs::initVFS()>
c000e717:	c7 04 24 f5 9d 02 c0 	mov    DWORD PTR [esp],0xc0029df5
c000e71e:	e8 d0 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e723:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 cc 9e 02 c0       	push   0xc0029ecc
c000e742:	e8 ac 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e747:	e8 e1 d6 00 00       	call   c001be2d <Sys::loadSyscalls()>
c000e74c:	e8 d9 b5 00 00       	call   c0019d2a <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 0f 9e 02 c0       	push   0xc0029e0f
c000e75b:	68 18 9e 02 c0       	push   0xc0029e18
c000e760:	e8 8a c4 00 00       	call   c001abef <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 d5 4d 00 00       	call   c0013542 <User::loadClockSettings(int)>
c000e76d:	c7 04 24 f0 9e 02 c0 	mov    DWORD PTR [esp],0xc0029ef0
c000e774:	e8 7a 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 c0 54 00 00       	call   c0013c4a <Device::loadDriversForAll()>
c000e78a:	c7 04 24 20 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e20
c000e791:	e8 5d 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e796:	e8 f7 b0 00 00       	call   c0019892 <Krnl::startCPUs()>
c000e79b:	c7 04 24 3a 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e3a
c000e7a2:	e8 4c 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d 08 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d908
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 4b 9e 02 c0       	push   0xc0029e4b
c000e7b6:	e8 42 e8 00 00       	call   c001cffd <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 64 ea 00 00       	call   c001d228 <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 c2 f3 00 00       	call   c001db93 <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 67 9e 02 c0       	push   0xc0029e67
c000e7e5:	50                   	push   eax
c000e7e6:	e8 19 55 00 00       	call   c0013d04 <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 3c 9f 02 c0       	mov    edx,0xc0029f3c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 21 d9 02 c0 04 	test   BYTE PTR ds:0xc002d921,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 47 7a 01 00       	call   c00263c6 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 6a 9e 00 00       	call   c0018824 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 43 9e 00 00       	call   c0018824 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 21 9e 00 00       	call   c0018824 <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 ff 9d 00 00       	call   c0018824 <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 20 d9 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002d920,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 0d 9d 00 00       	call   c00187a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 e8 9c 00 00       	call   c00187a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 b1 78 01 00       	call   c0026380 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 6e 78 01 00       	call   c0026360 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 04 9d 00 00       	call   c0018824 <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 70 9e 02 c0       	push   0xc0029e70
c000eb62:	e8 cc b2 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 76 9e 02 c0       	push   0xc0029e76
c000eb9a:	e8 94 b2 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 10 9f 02 c0       	push   0xc0029f10
c000ebf0:	e8 fe 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 20 d9 02 c0 04 	test   BYTE PTR ds:0xc002d920,0x4
c000ec03:	0f 94 05 40 c8 02 c0 	sete   BYTE PTR ds:0xc002c840
c000ec0a:	e8 8a 09 00 00       	call   c000f599 <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 7f 8e 00 00       	call   c0017a98 <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 d8 4e 00 00       	call   c0013b00 <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 20 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e20
c000ec41:	e8 ad 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 47 09 00 00       	call   c000f599 <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 80 9c 00 00       	call   c00188dc <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 95 4e 00 00       	call   c0013b00 <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 11 54 00 00       	call   c0014098 <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 65 4e 00 00       	call   c0013b00 <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 7c 9e 02 c0       	push   0xc0029e7c
c000ecb8:	e8 36 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 f1 eb 00 00       	call   c001d8ba <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 97 9e 02 c0       	push   0xc0029e97
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 b0 39 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 a8 9e 02 c0       	push   0xc0029ea8
c000ed34:	e8 fa b0 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 b5 9e 02 c0       	push   0xc0029eb5
c000ed49:	e8 e5 b0 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 bf 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029ebf
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 ce b0 00 00       	jmp    c0019e33 <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 12 d9 02 c0       	mov    ds:0xc002d912,eax
c000ee21:	66 89 15 10 d9 02 c0 	mov    WORD PTR ds:0xc002d910,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c000ef38:	48                   	dec    eax
c000ef39:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 08 d9 02 c0    	push   DWORD PTR ds:0xc002d908
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 81 94 01 00       	call   c0028410 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 78 94 01 00       	call   c0028410 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 18 d9 02 c0 ff 07 	mov    WORD PTR ds:0xc002d918,0x7ff
c000f085:	a3 1a d9 02 c0       	mov    ds:0xc002d91a,eax
c000f08a:	0f 01 1d 18 d9 02 c0 	lidtd  ds:0xc002d918
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 70 da 02 c0    	push   DWORD PTR ds:0xc002da70
c000f37c:	e8 59 27 00 00       	call   c0011ada <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0a 02 00 00       	call   c000f599 <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 c3 17 00 00       	call   c0010b62 <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 f4 17 00 00       	call   c0010ba2 <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 08 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d908
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d dc c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6dc
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 dc c6 02 c0       	mov    eax,ds:0xc002c6dc
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 60 9f 02 c0       	push   0xc0029f60
c000f455:	e8 6d 32 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 dc c6 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c6dc,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d 70 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da70
c000f481:	8b 2d dc c6 02 c0    	mov    ebp,DWORD PTR ds:0xc002c6dc
c000f487:	e8 e5 04 00 00       	call   c000f971 <Phys::allocatePage()>
c000f48c:	68 01 0c 00 00       	push   0xc01
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 3f 25 00 00       	call   c00119d8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d dc c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6dc
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 90 9f 02 c0       	push   0xc0029f90
c000f50d:	e8 21 a9 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 95 9f 02 c0       	push   0xc0029f95
c000f523:	e8 0b a9 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c000f543:	48                   	dec    eax
c000f544:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	6a 01                	push   0x1
c000f557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55b:	ff 35 70 da 02 c0    	push   DWORD PTR ds:0xc002da70
c000f561:	e8 74 25 00 00       	call   c0011ada <VAS::allocatePages(int, int)>
c000f566:	83 c4 1c             	add    esp,0x1c
c000f569:	c3                   	ret    

c000f56a <liballoc_free(void*, int)>:
c000f56a:	83 ec 14             	sub    esp,0x14
c000f56d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f571:	ff 35 70 da 02 c0    	push   DWORD PTR ds:0xc002da70
c000f577:	e8 08 22 00 00       	call   c0011784 <VAS::freeAllocatedPages(unsigned long)>
c000f57c:	b8 00 00 00 00       	mov    eax,0x0
c000f581:	83 c4 1c             	add    esp,0x1c
c000f584:	c3                   	ret    

c000f585 <realloc>:
c000f585:	83 ec 14             	sub    esp,0x14
c000f588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f590:	e8 97 20 ff ff       	call   c000162c <dlrealloc>
c000f595:	83 c4 1c             	add    esp,0x1c
c000f598:	c3                   	ret    

c000f599 <malloc>:
c000f599:	83 ec 18             	sub    esp,0x18
c000f59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a0:	e8 4a 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a5:	83 c4 1c             	add    esp,0x1c
c000f5a8:	c3                   	ret    

c000f5a9 <free>:
c000f5a9:	83 ec 18             	sub    esp,0x18
c000f5ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b0:	e8 df 17 ff ff       	call   c0000d94 <dlfree>
c000f5b5:	83 c4 1c             	add    esp,0x1c
c000f5b8:	c3                   	ret    

c000f5b9 <rfree>:
c000f5b9:	83 ec 18             	sub    esp,0x18
c000f5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c0:	e8 cf 17 ff ff       	call   c0000d94 <dlfree>
c000f5c5:	83 c4 1c             	add    esp,0x1c
c000f5c8:	c3                   	ret    

c000f5c9 <calloc>:
c000f5c9:	56                   	push   esi
c000f5ca:	53                   	push   ebx
c000f5cb:	83 ec 10             	sub    esp,0x10
c000f5ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 bc ff ff ff       	call   c000f599 <malloc>
c000f5dd:	89 c6                	mov    esi,eax
c000f5df:	83 c4 0c             	add    esp,0xc
c000f5e2:	53                   	push   ebx
c000f5e3:	6a 00                	push   0x0
c000f5e5:	50                   	push   eax
c000f5e6:	e8 65 11 ff ff       	call   c0000750 <memset>
c000f5eb:	89 f0                	mov    eax,esi
c000f5ed:	83 c4 14             	add    esp,0x14
c000f5f0:	5b                   	pop    ebx
c000f5f1:	5e                   	pop    esi
c000f5f2:	c3                   	ret    

c000f5f3 <Krnl::setBootMessage(char const*)>:
c000f5f3:	57                   	push   edi
c000f5f4:	56                   	push   esi
c000f5f5:	53                   	push   ebx
c000f5f6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5fc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f603:	68 9e 00 00 00       	push   0x9e
c000f608:	6a 00                	push   0x0
c000f60a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f60e:	56                   	push   esi
c000f60f:	e8 3c 11 ff ff       	call   c0000750 <memset>
c000f614:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f617:	e8 50 11 ff ff       	call   c000076c <strlen>
c000f61c:	ba 50 00 00 00       	mov    edx,0x50
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	29 c2                	sub    edx,eax
c000f626:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62a:	d1 ea                	shr    edx,1
c000f62c:	84 c0                	test   al,al
c000f62e:	74 19                	je     c000f649 <Krnl::setBootMessage(char const*)+0x56>
c000f630:	01 d2                	add    edx,edx
c000f632:	43                   	inc    ebx
c000f633:	01 f2                	add    edx,esi
c000f635:	80 cc 0f             	or     ah,0xf
c000f638:	83 c2 02             	add    edx,0x2
c000f63b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f63f:	43                   	inc    ebx
c000f640:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f645:	84 c0                	test   al,al
c000f647:	75 ec                	jne    c000f635 <Krnl::setBootMessage(char const*)+0x42>
c000f649:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f64e:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f653:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f655:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65b:	5b                   	pop    ebx
c000f65c:	5e                   	pop    esi
c000f65d:	5f                   	pop    edi
c000f65e:	c3                   	ret    

c000f65f <kernel_main>:
c000f65f:	57                   	push   edi
c000f660:	bf f9 03 00 00       	mov    edi,0x3f9
c000f665:	56                   	push   esi
c000f666:	89 fa                	mov    edx,edi
c000f668:	53                   	push   ebx
c000f669:	31 f6                	xor    esi,esi
c000f66b:	83 ec 2c             	sub    esp,0x2c
c000f66e:	89 f0                	mov    eax,esi
c000f670:	ee                   	out    dx,al
c000f671:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f676:	b0 80                	mov    al,0x80
c000f678:	89 da                	mov    edx,ebx
c000f67a:	ee                   	out    dx,al
c000f67b:	b1 03                	mov    cl,0x3
c000f67d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f682:	88 c8                	mov    al,cl
c000f684:	ee                   	out    dx,al
c000f685:	89 f0                	mov    eax,esi
c000f687:	89 fa                	mov    edx,edi
c000f689:	ee                   	out    dx,al
c000f68a:	88 c8                	mov    al,cl
c000f68c:	89 da                	mov    edx,ebx
c000f68e:	ee                   	out    dx,al
c000f68f:	b0 c7                	mov    al,0xc7
c000f691:	ba fa 03 00 00       	mov    edx,0x3fa
c000f696:	ee                   	out    dx,al
c000f697:	b0 0b                	mov    al,0xb
c000f699:	ba fc 03 00 00       	mov    edx,0x3fc
c000f69e:	ee                   	out    dx,al
c000f69f:	68 9c 9f 02 c0       	push   0xc0029f9c
c000f6a4:	e8 1e 30 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c000f6a9:	e8 b6 09 00 00       	call   c0010064 <installVgaTextImplementation()>
c000f6ae:	0f b6 05 e0 c6 02 c0 	movzx  eax,BYTE PTR ds:0xc002c6e0
c000f6b5:	83 c4 10             	add    esp,0x10
c000f6b8:	84 c0                	test   al,al
c000f6ba:	74 6c                	je     c000f728 <kernel_main+0xc9>
c000f6bc:	31 db                	xor    ebx,ebx
c000f6be:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c3:	be 05 00 00 00       	mov    esi,0x5
c000f6c8:	31 c9                	xor    ecx,ecx
c000f6ca:	eb 2a                	jmp    c000f6f6 <kernel_main+0x97>
c000f6cc:	3c 0d                	cmp    al,0xd
c000f6ce:	74 1a                	je     c000f6ea <kernel_main+0x8b>
c000f6d0:	3c 0a                	cmp    al,0xa
c000f6d2:	74 40                	je     c000f714 <kernel_main+0xb5>
c000f6d4:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6d7:	80 cc 0e             	or     ah,0xe
c000f6da:	c1 e2 04             	shl    edx,0x4
c000f6dd:	01 ca                	add    edx,ecx
c000f6df:	41                   	inc    ecx
c000f6e0:	01 fa                	add    edx,edi
c000f6e2:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ea:	43                   	inc    ebx
c000f6eb:	0f b6 83 e0 c6 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3920]
c000f6f2:	84 c0                	test   al,al
c000f6f4:	74 32                	je     c000f728 <kernel_main+0xc9>
c000f6f6:	80 b9 16 c7 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd38ea],0xdb
c000f6fd:	75 cd                	jne    c000f6cc <kernel_main+0x6d>
c000f6ff:	0f b6 91 15 c7 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd38eb]
c000f706:	83 e2 fe             	and    edx,0xfffffffe
c000f709:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f70f:	75 bb                	jne    c000f6cc <kernel_main+0x6d>
c000f711:	47                   	inc    edi
c000f712:	eb b8                	jmp    c000f6cc <kernel_main+0x6d>
c000f714:	43                   	inc    ebx
c000f715:	46                   	inc    esi
c000f716:	31 c9                	xor    ecx,ecx
c000f718:	0f b6 83 e0 c6 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3920]
c000f71f:	bf 0a 00 00 00       	mov    edi,0xa
c000f724:	84 c0                	test   al,al
c000f726:	75 ce                	jne    c000f6f6 <kernel_main+0x97>
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	68 b4 9f 02 c0       	push   0xc0029fb4
c000f730:	e8 be fe ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000f735:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73a:	a3 20 d9 02 c0       	mov    ds:0xc002d920,eax
c000f73f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f744:	05 ff 0f 00 00       	add    eax,0xfff
c000f749:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f74e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f751:	e8 a2 03 00 00       	call   c000faf8 <Phys::physicalMemorySetup(unsigned int)>
c000f756:	e8 7f 1c 00 00       	call   c00113da <Virt::virtualMemorySetup()>
c000f75b:	58                   	pop    eax
c000f75c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f760:	53                   	push   ebx
c000f761:	e8 46 1e 00 00       	call   c00115ac <VAS::VAS()>
c000f766:	89 1d 70 da 02 c0    	mov    DWORD PTR ds:0xc002da70,ebx
c000f76c:	e8 af 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f771:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f778:	e8 1c fe ff ff       	call   c000f599 <malloc>
c000f77d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f780:	89 c6                	mov    esi,eax
c000f782:	e8 4f f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f787:	6a 00                	push   0x0
c000f789:	89 35 08 d9 02 c0    	mov    DWORD PTR ds:0xc002d908,esi
c000f78f:	6a 00                	push   0x0
c000f791:	6a 00                	push   0x0
c000f793:	56                   	push   esi
c000f794:	e8 49 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f799:	83 c4 14             	add    esp,0x14
c000f79c:	53                   	push   ebx
c000f79d:	e8 ba 20 00 00       	call   c001185c <VAS::~VAS()>
c000f7a2:	83 c4 30             	add    esp,0x30
c000f7a5:	5b                   	pop    ebx
c000f7a6:	5e                   	pop    esi
c000f7a7:	5f                   	pop    edi
c000f7a8:	c3                   	ret    

c000f7a9 <Phys::allocateDMA(unsigned long)>:
c000f7a9:	55                   	push   ebp
c000f7aa:	31 d2                	xor    edx,edx
c000f7ac:	57                   	push   edi
c000f7ad:	31 ed                	xor    ebp,ebp
c000f7af:	56                   	push   esi
c000f7b0:	31 c9                	xor    ecx,ecx
c000f7b2:	53                   	push   ebx
c000f7b3:	31 db                	xor    ebx,ebx
c000f7b5:	83 ec 0c             	sub    esp,0xc
c000f7b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7bc:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7c2:	c1 ee 0c             	shr    esi,0xc
c000f7c5:	eb 17                	jmp    c000f7de <Phys::allocateDMA(unsigned long)+0x35>
c000f7c7:	85 c9                	test   ecx,ecx
c000f7c9:	75 04                	jne    c000f7cf <Phys::allocateDMA(unsigned long)+0x26>
c000f7cb:	89 d5                	mov    ebp,edx
c000f7cd:	89 d3                	mov    ebx,edx
c000f7cf:	8d 41 01             	lea    eax,[ecx+0x1]
c000f7d2:	39 c6                	cmp    esi,eax
c000f7d4:	74 23                	je     c000f7f9 <Phys::allocateDMA(unsigned long)+0x50>
c000f7d6:	42                   	inc    edx
c000f7d7:	89 c1                	mov    ecx,eax
c000f7d9:	83 fa 2f             	cmp    edx,0x2f
c000f7dc:	7f 11                	jg     c000f7ef <Phys::allocateDMA(unsigned long)+0x46>
c000f7de:	80 ba 60 d9 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd26a0],0x0
c000f7e5:	74 e0                	je     c000f7c7 <Phys::allocateDMA(unsigned long)+0x1e>
c000f7e7:	31 c9                	xor    ecx,ecx
c000f7e9:	42                   	inc    edx
c000f7ea:	83 fa 2f             	cmp    edx,0x2f
c000f7ed:	7e ef                	jle    c000f7de <Phys::allocateDMA(unsigned long)+0x35>
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	31 c0                	xor    eax,eax
c000f7f4:	5b                   	pop    ebx
c000f7f5:	5e                   	pop    esi
c000f7f6:	5f                   	pop    edi
c000f7f7:	5d                   	pop    ebp
c000f7f8:	c3                   	ret    
c000f7f9:	8d 14 33             	lea    edx,[ebx+esi*1]
c000f7fc:	89 d7                	mov    edi,edx
c000f7fe:	4f                   	dec    edi
c000f7ff:	79 03                	jns    c000f804 <Phys::allocateDMA(unsigned long)+0x5b>
c000f801:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f804:	c1 ff 04             	sar    edi,0x4
c000f807:	89 da                	mov    edx,ebx
c000f809:	c1 fa 04             	sar    edx,0x4
c000f80c:	39 fa                	cmp    edx,edi
c000f80e:	75 43                	jne    c000f853 <Phys::allocateDMA(unsigned long)+0xaa>
c000f810:	85 c0                	test   eax,eax
c000f812:	74 1a                	je     c000f82e <Phys::allocateDMA(unsigned long)+0x85>
c000f814:	be 60 d9 02 c0       	mov    esi,0xc002d960
c000f819:	8d 93 60 d9 02 c0    	lea    edx,[ebx-0x3ffd26a0]
c000f81f:	f7 d6                	not    esi
c000f821:	29 de                	sub    esi,ebx
c000f823:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f826:	42                   	inc    edx
c000f827:	8d 04 16             	lea    eax,[esi+edx*1]
c000f82a:	39 c1                	cmp    ecx,eax
c000f82c:	7f f5                	jg     c000f823 <Phys::allocateDMA(unsigned long)+0x7a>
c000f82e:	83 ec 0c             	sub    esp,0xc
c000f831:	68 d3 9f 02 c0       	push   0xc0029fd3
c000f836:	e8 8c 2e 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c000f83b:	83 c4 10             	add    esp,0x10
c000f83e:	85 ff                	test   edi,edi
c000f840:	74 17                	je     c000f859 <Phys::allocateDMA(unsigned long)+0xb0>
c000f842:	83 c4 0c             	add    esp,0xc
c000f845:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000f84b:	5b                   	pop    ebx
c000f84c:	c1 e0 0c             	shl    eax,0xc
c000f84f:	5e                   	pop    esi
c000f850:	5f                   	pop    edi
c000f851:	5d                   	pop    ebp
c000f852:	c3                   	ret    
c000f853:	89 ea                	mov    edx,ebp
c000f855:	31 c9                	xor    ecx,ecx
c000f857:	eb 90                	jmp    c000f7e9 <Phys::allocateDMA(unsigned long)+0x40>
c000f859:	83 c4 0c             	add    esp,0xc
c000f85c:	c1 e3 0c             	shl    ebx,0xc
c000f85f:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000f865:	5b                   	pop    ebx
c000f866:	5e                   	pop    esi
c000f867:	5f                   	pop    edi
c000f868:	5d                   	pop    ebp
c000f869:	c3                   	ret    

c000f86a <Phys::freeDMA(unsigned long, unsigned long)>:
c000f86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f86e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f872:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f878:	c1 e9 0c             	shr    ecx,0xc
c000f87b:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f880:	76 25                	jbe    c000f8a7 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f882:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f887:	c1 e8 0c             	shr    eax,0xc
c000f88a:	8d 50 10             	lea    edx,[eax+0x10]
c000f88d:	85 c9                	test   ecx,ecx
c000f88f:	74 15                	je     c000f8a6 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f891:	8d 82 60 d9 02 c0    	lea    eax,[edx-0x3ffd26a0]
c000f897:	8d 94 11 60 d9 02 c0 	lea    edx,[ecx+edx*1-0x3ffd26a0]
c000f89e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f8a1:	40                   	inc    eax
c000f8a2:	39 d0                	cmp    eax,edx
c000f8a4:	75 f8                	jne    c000f89e <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f8a6:	c3                   	ret    
c000f8a7:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f8ad:	c1 ea 0c             	shr    edx,0xc
c000f8b0:	eb db                	jmp    c000f88d <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f8b2 <Phys::setPageState(unsigned long, bool)>:
c000f8b2:	56                   	push   esi
c000f8b3:	ba 01 00 00 00       	mov    edx,0x1
c000f8b8:	53                   	push   ebx
c000f8b9:	8b 35 24 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c824
c000f8bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8c7:	89 c8                	mov    eax,ecx
c000f8c9:	83 e1 07             	and    ecx,0x7
c000f8cc:	c1 e8 03             	shr    eax,0x3
c000f8cf:	d3 e3                	shl    ebx,cl
c000f8d1:	01 c6                	add    esi,eax
c000f8d3:	d3 e2                	shl    edx,cl
c000f8d5:	f7 d2                	not    edx
c000f8d7:	20 16                	and    BYTE PTR [esi],dl
c000f8d9:	03 05 24 c8 02 c0    	add    eax,DWORD PTR ds:0xc002c824
c000f8df:	08 18                	or     BYTE PTR [eax],bl
c000f8e1:	5b                   	pop    ebx
c000f8e2:	5e                   	pop    esi
c000f8e3:	c3                   	ret    

c000f8e4 <Phys::getPageState(unsigned long)>:
c000f8e4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f8e8:	8b 15 24 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c824
c000f8ee:	89 c8                	mov    eax,ecx
c000f8f0:	83 e1 07             	and    ecx,0x7
c000f8f3:	c1 e8 03             	shr    eax,0x3
c000f8f6:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f8fa:	d3 f8                	sar    eax,cl
c000f8fc:	83 e0 01             	and    eax,0x1
c000f8ff:	c3                   	ret    

c000f900 <Phys::freePage(unsigned long)>:
c000f900:	53                   	push   ebx
c000f901:	83 ec 10             	sub    esp,0x10
c000f904:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f908:	53                   	push   ebx
c000f909:	68 ea 9f 02 c0       	push   0xc0029fea
c000f90e:	e8 b4 2d 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c000f913:	83 c4 10             	add    esp,0x10
c000f916:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f91c:	76 3d                	jbe    c000f95b <Phys::freePage(unsigned long)+0x5b>
c000f91e:	83 ec 0c             	sub    esp,0xc
c000f921:	c1 eb 0c             	shr    ebx,0xc
c000f924:	53                   	push   ebx
c000f925:	e8 ba ff ff ff       	call   c000f8e4 <Phys::getPageState(unsigned long)>
c000f92a:	83 c4 10             	add    esp,0x10
c000f92d:	84 c0                	test   al,al
c000f92f:	74 19                	je     c000f94a <Phys::freePage(unsigned long)+0x4a>
c000f931:	83 ec 08             	sub    esp,0x8
c000f934:	ff 0d 50 d9 02 c0    	dec    DWORD PTR ds:0xc002d950
c000f93a:	6a 00                	push   0x0
c000f93c:	53                   	push   ebx
c000f93d:	e8 70 ff ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000f942:	83 c4 10             	add    esp,0x10
c000f945:	83 c4 08             	add    esp,0x8
c000f948:	5b                   	pop    ebx
c000f949:	c3                   	ret    
c000f94a:	c7 44 24 10 fd 9f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029ffd
c000f952:	83 c4 08             	add    esp,0x8
c000f955:	5b                   	pop    ebx
c000f956:	e9 d8 a4 00 00       	jmp    c0019e33 <Krnl::panic(char const*)>
c000f95b:	83 ec 08             	sub    esp,0x8
c000f95e:	68 00 10 00 00       	push   0x1000
c000f963:	53                   	push   ebx
c000f964:	e8 01 ff ff ff       	call   c000f86a <Phys::freeDMA(unsigned long, unsigned long)>
c000f969:	83 c4 10             	add    esp,0x10
c000f96c:	83 c4 08             	add    esp,0x8
c000f96f:	5b                   	pop    ebx
c000f970:	c3                   	ret    

c000f971 <Phys::allocatePage()>:
c000f971:	56                   	push   esi
c000f972:	53                   	push   ebx
c000f973:	83 ec 14             	sub    esp,0x14
c000f976:	8b 35 44 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d944
c000f97c:	89 f3                	mov    ebx,esi
c000f97e:	eb 0a                	jmp    c000f98a <Phys::allocatePage()+0x19>
c000f980:	89 1d 44 d9 02 c0    	mov    DWORD PTR ds:0xc002d944,ebx
c000f986:	39 de                	cmp    esi,ebx
c000f988:	74 24                	je     c000f9ae <Phys::allocatePage()+0x3d>
c000f98a:	53                   	push   ebx
c000f98b:	e8 54 ff ff ff       	call   c000f8e4 <Phys::getPageState(unsigned long)>
c000f990:	5a                   	pop    edx
c000f991:	84 c0                	test   al,al
c000f993:	74 76                	je     c000fa0b <Phys::allocatePage()+0x9a>
c000f995:	43                   	inc    ebx
c000f996:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f99c:	75 e2                	jne    c000f980 <Phys::allocatePage()+0xf>
c000f99e:	31 db                	xor    ebx,ebx
c000f9a0:	c7 05 44 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d944,0x0
c000f9aa:	39 de                	cmp    esi,ebx
c000f9ac:	75 dc                	jne    c000f98a <Phys::allocatePage()+0x19>
c000f9ae:	83 ec 0c             	sub    esp,0xc
c000f9b1:	68 31 a0 02 c0       	push   0xc002a031
c000f9b6:	e8 0c 2d 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c000f9bb:	58                   	pop    eax
c000f9bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9c1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9c4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f9ca:	e8 bd 29 00 00       	call   c001238c <VAS::scanForEviction()>
c000f9cf:	83 c4 10             	add    esp,0x10
c000f9d2:	85 c0                	test   eax,eax
c000f9d4:	75 76                	jne    c000fa4c <Phys::allocatePage()+0xdb>
c000f9d6:	83 ec 0c             	sub    esp,0xc
c000f9d9:	68 00 10 00 00       	push   0x1000
c000f9de:	e8 c6 fd ff ff       	call   c000f7a9 <Phys::allocateDMA(unsigned long)>
c000f9e3:	83 c4 10             	add    esp,0x10
c000f9e6:	85 c0                	test   eax,eax
c000f9e8:	75 5c                	jne    c000fa46 <Phys::allocatePage()+0xd5>
c000f9ea:	83 ec 0c             	sub    esp,0xc
c000f9ed:	68 49 a0 02 c0       	push   0xc002a049
c000f9f2:	e8 3c a4 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c000f9f7:	83 c4 10             	add    esp,0x10
c000f9fa:	8b 1d 44 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d944
c000fa00:	53                   	push   ebx
c000fa01:	e8 de fe ff ff       	call   c000f8e4 <Phys::getPageState(unsigned long)>
c000fa06:	5a                   	pop    edx
c000fa07:	84 c0                	test   al,al
c000fa09:	75 8a                	jne    c000f995 <Phys::allocatePage()+0x24>
c000fa0b:	6a 01                	push   0x1
c000fa0d:	53                   	push   ebx
c000fa0e:	e8 9f fe ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000fa13:	5a                   	pop    edx
c000fa14:	a1 50 d9 02 c0       	mov    eax,ds:0xc002d950
c000fa19:	59                   	pop    ecx
c000fa1a:	40                   	inc    eax
c000fa1b:	8b 15 44 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d944
c000fa21:	a3 50 d9 02 c0       	mov    ds:0xc002d950,eax
c000fa26:	c1 e2 0c             	shl    edx,0xc
c000fa29:	52                   	push   edx
c000fa2a:	ff 35 54 d9 02 c0    	push   DWORD PTR ds:0xc002d954
c000fa30:	50                   	push   eax
c000fa31:	68 13 a0 02 c0       	push   0xc002a013
c000fa36:	e8 8c 2c 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c000fa3b:	a1 44 d9 02 c0       	mov    eax,ds:0xc002d944
c000fa40:	83 c4 10             	add    esp,0x10
c000fa43:	c1 e0 0c             	shl    eax,0xc
c000fa46:	83 c4 14             	add    esp,0x14
c000fa49:	5b                   	pop    ebx
c000fa4a:	5e                   	pop    esi
c000fa4b:	c3                   	ret    
c000fa4c:	83 ec 08             	sub    esp,0x8
c000fa4f:	6a 01                	push   0x1
c000fa51:	50                   	push   eax
c000fa52:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fa56:	e8 57 fe ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000fa5b:	83 c4 10             	add    esp,0x10
c000fa5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa62:	eb e2                	jmp    c000fa46 <Phys::allocatePage()+0xd5>

c000fa64 <Phys::allocateContiguousPages(int)>:
c000fa64:	57                   	push   edi
c000fa65:	56                   	push   esi
c000fa66:	53                   	push   ebx
c000fa67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa6b:	fa                   	cli    
c000fa6c:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c000fa72:	31 db                	xor    ebx,ebx
c000fa74:	85 db                	test   ebx,ebx
c000fa76:	75 11                	jne    c000fa89 <Phys::allocateContiguousPages(int)+0x25>
c000fa78:	e8 f4 fe ff ff       	call   c000f971 <Phys::allocatePage()>
c000fa7d:	83 fe 01             	cmp    esi,0x1
c000fa80:	89 c7                	mov    edi,eax
c000fa82:	74 21                	je     c000faa5 <Phys::allocateContiguousPages(int)+0x41>
c000fa84:	bb 01 00 00 00       	mov    ebx,0x1
c000fa89:	e8 e3 fe ff ff       	call   c000f971 <Phys::allocatePage()>
c000fa8e:	89 da                	mov    edx,ebx
c000fa90:	c1 e2 0c             	shl    edx,0xc
c000fa93:	01 fa                	add    edx,edi
c000fa95:	39 c2                	cmp    edx,eax
c000fa97:	74 20                	je     c000fab9 <Phys::allocateContiguousPages(int)+0x55>
c000fa99:	bb 01 00 00 00       	mov    ebx,0x1
c000fa9e:	89 c7                	mov    edi,eax
c000faa0:	83 fe 01             	cmp    esi,0x1
c000faa3:	75 e4                	jne    c000fa89 <Phys::allocateContiguousPages(int)+0x25>
c000faa5:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c000faaa:	48                   	dec    eax
c000faab:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c000fab0:	75 01                	jne    c000fab3 <Phys::allocateContiguousPages(int)+0x4f>
c000fab2:	fb                   	sti    
c000fab3:	89 f8                	mov    eax,edi
c000fab5:	5b                   	pop    ebx
c000fab6:	5e                   	pop    esi
c000fab7:	5f                   	pop    edi
c000fab8:	c3                   	ret    
c000fab9:	43                   	inc    ebx
c000faba:	39 f3                	cmp    ebx,esi
c000fabc:	75 b6                	jne    c000fa74 <Phys::allocateContiguousPages(int)+0x10>
c000fabe:	eb e5                	jmp    c000faa5 <Phys::allocateContiguousPages(int)+0x41>

c000fac0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fac0:	56                   	push   esi
c000fac1:	53                   	push   ebx
c000fac2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fac6:	39 1d 48 d9 02 c0    	cmp    DWORD PTR ds:0xc002d948,ebx
c000facc:	73 06                	jae    c000fad4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000face:	89 1d 48 d9 02 c0    	mov    DWORD PTR ds:0xc002d948,ebx
c000fad4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fad8:	c1 eb 0c             	shr    ebx,0xc
c000fadb:	c1 e8 0c             	shr    eax,0xc
c000fade:	39 d8                	cmp    eax,ebx
c000fae0:	73 13                	jae    c000faf5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fae2:	6a 00                	push   0x0
c000fae4:	8d 70 01             	lea    esi,[eax+0x1]
c000fae7:	50                   	push   eax
c000fae8:	e8 c5 fd ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000faed:	5a                   	pop    edx
c000faee:	89 f0                	mov    eax,esi
c000faf0:	59                   	pop    ecx
c000faf1:	39 f3                	cmp    ebx,esi
c000faf3:	75 ed                	jne    c000fae2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000faf5:	5b                   	pop    ebx
c000faf6:	5e                   	pop    esi
c000faf7:	c3                   	ret    

c000faf8 <Phys::physicalMemorySetup(unsigned int)>:
c000faf8:	55                   	push   ebp
c000faf9:	57                   	push   edi
c000fafa:	56                   	push   esi
c000fafb:	53                   	push   ebx
c000fafc:	31 db                	xor    ebx,ebx
c000fafe:	83 ec 40             	sub    esp,0x40
c000fb01:	6a 30                	push   0x30
c000fb03:	6a 00                	push   0x0
c000fb05:	68 60 d9 02 c0       	push   0xc002d960
c000fb0a:	e8 41 0c ff ff       	call   c0000750 <memset>
c000fb0f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fb13:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb18:	05 00 10 00 00       	add    eax,0x1000
c000fb1d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fb21:	5a                   	pop    edx
c000fb22:	59                   	pop    ecx
c000fb23:	50                   	push   eax
c000fb24:	68 57 a0 02 c0       	push   0xc002a057
c000fb29:	e8 99 2b 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c000fb2e:	83 c4 10             	add    esp,0x10
c000fb31:	83 ec 08             	sub    esp,0x8
c000fb34:	6a 01                	push   0x1
c000fb36:	53                   	push   ebx
c000fb37:	43                   	inc    ebx
c000fb38:	e8 75 fd ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb46:	75 e9                	jne    c000fb31 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fb48:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fb4f:	66 85 c0             	test   ax,ax
c000fb52:	0f 84 b5 01 00 00    	je     c000fd0d <Phys::physicalMemorySetup(unsigned int)+0x215>
c000fb58:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb5c:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000fb62:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000fb67:	8b 0d 08 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000608
c000fb6d:	8b 1d 0c 06 00 c2    	mov    ebx,DWORD PTR ds:0xc200060c
c000fb73:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000fb77:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c000fb7b:	01 c1                	add    ecx,eax
c000fb7d:	11 d3                	adc    ebx,edx
c000fb7f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000fb83:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fb87:	31 ff                	xor    edi,edi
c000fb89:	89 d3                	mov    ebx,edx
c000fb8b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fb8f:	8b 35 10 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000610
c000fb95:	09 cb                	or     ebx,ecx
c000fb97:	0f 85 80 01 00 00    	jne    c000fd1d <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb9d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fba1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fba9:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fbae:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000fbb2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fbba:	eb 49                	jmp    c000fc05 <Phys::physicalMemorySetup(unsigned int)+0x10d>
c000fbbc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000fbc0:	83 c3 18             	add    ebx,0x18
c000fbc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbc7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fbcb:	39 d0                	cmp    eax,edx
c000fbcd:	0f 84 4a 01 00 00    	je     c000fd1d <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fbd3:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000fbd6:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c000fbd9:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000fbdc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fbde:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fbe2:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fbe6:	01 c6                	add    esi,eax
c000fbe8:	89 d5                	mov    ebp,edx
c000fbea:	11 d7                	adc    edi,edx
c000fbec:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fbf0:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c000fbf4:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fbf7:	31 ff                	xor    edi,edi
c000fbf9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fbfd:	09 cd                	or     ebp,ecx
c000fbff:	0f 85 18 01 00 00    	jne    c000fd1d <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fc05:	89 f1                	mov    ecx,esi
c000fc07:	83 f1 01             	xor    ecx,0x1
c000fc0a:	09 f9                	or     ecx,edi
c000fc0c:	75 ae                	jne    c000fbbc <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc0e:	be 00 00 08 00       	mov    esi,0x80000
c000fc13:	89 cf                	mov    edi,ecx
c000fc15:	39 c6                	cmp    esi,eax
c000fc17:	19 d7                	sbb    edi,edx
c000fc19:	0f 82 98 00 00 00    	jb     c000fcb7 <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fc1f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000fc23:	89 cd                	mov    ebp,ecx
c000fc25:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fc29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc2d:	19 fd                	sbb    ebp,edi
c000fc2f:	0f 83 82 00 00 00    	jae    c000fcb7 <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fc35:	b8 00 00 0a 00       	mov    eax,0xa0000
c000fc3a:	39 f0                	cmp    eax,esi
c000fc3c:	19 f9                	sbb    ecx,edi
c000fc3e:	0f 82 03 01 00 00    	jb     c000fd47 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000fc44:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fc51:	81 c6 00 00 f8 ff    	add    esi,0xfff80000
c000fc57:	83 d7 ff             	adc    edi,0xffffffff
c000fc5a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fc5e:	31 c0                	xor    eax,eax
c000fc60:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fc64:	39 f2                	cmp    edx,esi
c000fc66:	89 c2                	mov    edx,eax
c000fc68:	19 fa                	sbb    edx,edi
c000fc6a:	0f 83 4c ff ff ff    	jae    c000fbbc <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc70:	b8 00 00 08 00       	mov    eax,0x80000
c000fc75:	83 ec 08             	sub    esp,0x8
c000fc78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc7c:	50                   	push   eax
c000fc7d:	e8 3e fe ff ff       	call   c000fac0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc82:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc86:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc8a:	83 c4 0c             	add    esp,0xc
c000fc8d:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc91:	03 05 54 d9 02 c0    	add    eax,DWORD PTR ds:0xc002d954
c000fc97:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc9e:	a3 54 d9 02 c0       	mov    ds:0xc002d954,eax
c000fca3:	52                   	push   edx
c000fca4:	50                   	push   eax
c000fca5:	68 7d a0 02 c0       	push   0xc002a07d
c000fcaa:	e8 18 2a 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c000fcaf:	83 c4 10             	add    esp,0x10
c000fcb2:	e9 05 ff ff ff       	jmp    c000fbbc <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fcb7:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fcbb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fcbf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fcc3:	39 ee                	cmp    esi,ebp
c000fcc5:	1b 7c 24 2c          	sbb    edi,DWORD PTR [esp+0x2c]
c000fcc9:	0f 82 ed fe ff ff    	jb     c000fbbc <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fccf:	be ff 1f 00 00       	mov    esi,0x1fff
c000fcd4:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c000fcd8:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000fcdc:	0f 83 da fe ff ff    	jae    c000fbbc <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fce2:	39 e8                	cmp    eax,ebp
c000fce4:	89 d1                	mov    ecx,edx
c000fce6:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fcea:	73 89                	jae    c000fc75 <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fcec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcf0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fcf4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fcf8:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fcfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd00:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd08:	e9 68 ff ff ff       	jmp    c000fc75 <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fd0d:	83 ec 0c             	sub    esp,0xc
c000fd10:	68 6f a0 02 c0       	push   0xc002a06f
c000fd15:	e8 19 a1 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c000fd1a:	83 c4 10             	add    esp,0x10
c000fd1d:	bb 40 01 00 00       	mov    ebx,0x140
c000fd22:	83 ec 08             	sub    esp,0x8
c000fd25:	6a 00                	push   0x0
c000fd27:	53                   	push   ebx
c000fd28:	43                   	inc    ebx
c000fd29:	e8 84 fb ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000fd2e:	ff 05 54 d9 02 c0    	inc    DWORD PTR ds:0xc002d954
c000fd34:	83 c4 10             	add    esp,0x10
c000fd37:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fd3d:	75 e3                	jne    c000fd22 <Phys::physicalMemorySetup(unsigned int)+0x22a>
c000fd3f:	83 c4 3c             	add    esp,0x3c
c000fd42:	5b                   	pop    ebx
c000fd43:	5e                   	pop    esi
c000fd44:	5f                   	pop    edi
c000fd45:	5d                   	pop    ebp
c000fd46:	c3                   	ret    
c000fd47:	c7 44 24 10 00 00 0a 00 	mov    DWORD PTR [esp+0x10],0xa0000
c000fd4f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fd57:	e9 e8 fe ff ff       	jmp    c000fc44 <Phys::physicalMemorySetup(unsigned int)+0x14c>

c000fd5c <Pipe::isAtty()>:
c000fd5c:	31 c0                	xor    eax,eax
c000fd5e:	c3                   	ret    
c000fd5f:	90                   	nop

c000fd60 <Pipe::~Pipe()>:
c000fd60:	83 ec 0c             	sub    esp,0xc
c000fd63:	ba dc a0 02 c0       	mov    edx,0xc002a0dc
c000fd68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd6c:	89 10                	mov    DWORD PTR [eax],edx
c000fd6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd72:	83 ec 0c             	sub    esp,0xc
c000fd75:	50                   	push   eax
c000fd76:	e8 3f 12 00 00       	call   c0010fba <UnixFile::~UnixFile()>
c000fd7b:	83 c4 10             	add    esp,0x10
c000fd7e:	90                   	nop
c000fd7f:	83 c4 0c             	add    esp,0xc
c000fd82:	c3                   	ret    
c000fd83:	90                   	nop

c000fd84 <Pipe::~Pipe()>:
c000fd84:	83 ec 0c             	sub    esp,0xc
c000fd87:	83 ec 0c             	sub    esp,0xc
c000fd8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd8e:	e8 cd ff ff ff       	call   c000fd60 <Pipe::~Pipe()>
c000fd93:	83 c4 10             	add    esp,0x10
c000fd96:	83 ec 08             	sub    esp,0x8
c000fd99:	6a 20                	push   0x20
c000fd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd9f:	e8 4b 28 00 00       	call   c00125ef <operator delete(void*, unsigned long)>
c000fda4:	83 c4 10             	add    esp,0x10
c000fda7:	83 c4 0c             	add    esp,0xc
c000fdaa:	c3                   	ret    
c000fdab:	90                   	nop

c000fdac <Pipe::read(unsigned long long, void*, int*)>:
c000fdac:	55                   	push   ebp
c000fdad:	57                   	push   edi
c000fdae:	56                   	push   esi
c000fdaf:	53                   	push   ebx
c000fdb0:	83 ec 1c             	sub    esp,0x1c
c000fdb3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fdb7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fdbb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fdbf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fdc2:	89 c8                	mov    eax,ecx
c000fdc4:	99                   	cdq    
c000fdc5:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fdc9:	74 24                	je     c000fdef <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdcb:	39 f9                	cmp    ecx,edi
c000fdcd:	89 d1                	mov    ecx,edx
c000fdcf:	19 f1                	sbb    ecx,esi
c000fdd1:	73 1c                	jae    c000fdef <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdd3:	fa                   	cli    
c000fdd4:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c000fdda:	e8 de db 00 00       	call   c001d9bd <schedule()>
c000fddf:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c000fde4:	48                   	dec    eax
c000fde5:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c000fdea:	75 d3                	jne    c000fdbf <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdec:	fb                   	sti    
c000fded:	eb d0                	jmp    c000fdbf <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdef:	39 f8                	cmp    eax,edi
c000fdf1:	89 d1                	mov    ecx,edx
c000fdf3:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fdf6:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fdfa:	19 f1                	sbb    ecx,esi
c000fdfc:	73 07                	jae    c000fe05 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fdfe:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe01:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe05:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fe08:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fe0b:	29 f7                	sub    edi,esi
c000fe0d:	89 f8                	mov    eax,edi
c000fe0f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fe13:	99                   	cdq    
c000fe14:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fe17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe1b:	19 d0                	sbb    eax,edx
c000fe1d:	73 07                	jae    c000fe26 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fe1f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fe22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe26:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fe29:	89 ea                	mov    edx,ebp
c000fe2b:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fe2f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fe34:	74 0d                	je     c000fe43 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fe36:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fe39:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fe3d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe41:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe43:	85 d2                	test   edx,edx
c000fe45:	74 11                	je     c000fe58 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fe47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe4b:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fe4e:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fe52:	89 d1                	mov    ecx,edx
c000fe54:	89 c7                	mov    edi,eax
c000fe56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe5b:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fe5e:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe61:	99                   	cdq    
c000fe62:	89 f7                	mov    edi,esi
c000fe64:	03 04 24             	add    eax,DWORD PTR [esp]
c000fe67:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fe6b:	c1 ff 1f             	sar    edi,0x1f
c000fe6e:	57                   	push   edi
c000fe6f:	56                   	push   esi
c000fe70:	52                   	push   edx
c000fe71:	50                   	push   eax
c000fe72:	e8 8d 69 01 00       	call   c0026804 <__umoddi3>
c000fe77:	83 c4 10             	add    esp,0x10
c000fe7a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe7d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe82:	75 10                	jne    c000fe94 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe84:	83 ec 0c             	sub    esp,0xc
c000fe87:	68 99 a0 02 c0       	push   0xc002a099
c000fe8c:	e8 a2 9f 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c000fe91:	83 c4 10             	add    esp,0x10
c000fe94:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe98:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe9b:	89 10                	mov    DWORD PTR [eax],edx
c000fe9d:	83 c4 1c             	add    esp,0x1c
c000fea0:	31 c0                	xor    eax,eax
c000fea2:	5b                   	pop    ebx
c000fea3:	5e                   	pop    esi
c000fea4:	5f                   	pop    edi
c000fea5:	5d                   	pop    ebp
c000fea6:	c3                   	ret    
c000fea7:	90                   	nop

c000fea8 <Pipe::write(unsigned long long, void*, int*)>:
c000fea8:	55                   	push   ebp
c000fea9:	57                   	push   edi
c000feaa:	56                   	push   esi
c000feab:	53                   	push   ebx
c000feac:	83 ec 1c             	sub    esp,0x1c
c000feaf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000feb3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000feb7:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000feba:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000febe:	89 04 24             	mov    DWORD PTR [esp],eax
c000fec1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fec5:	89 d8                	mov    eax,ebx
c000fec7:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000feca:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fece:	89 d6                	mov    esi,edx
c000fed0:	89 d7                	mov    edi,edx
c000fed2:	c1 ff 1f             	sar    edi,0x1f
c000fed5:	03 34 24             	add    esi,DWORD PTR [esp]
c000fed8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fedc:	c1 f8 1f             	sar    eax,0x1f
c000fedf:	39 f3                	cmp    ebx,esi
c000fee1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fee5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fee9:	19 f8                	sbb    eax,edi
c000feeb:	b8 01 00 00 00       	mov    eax,0x1
c000fef0:	72 6e                	jb     c000ff60 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fef2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fef5:	01 d0                	add    eax,edx
c000fef7:	99                   	cdq    
c000fef8:	f7 fb                	idiv   ebx
c000fefa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fefe:	29 d3                	sub    ebx,edx
c000ff00:	89 d7                	mov    edi,edx
c000ff02:	89 de                	mov    esi,ebx
c000ff04:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000ff07:	c1 fb 1f             	sar    ebx,0x1f
c000ff0a:	39 f2                	cmp    edx,esi
c000ff0c:	19 d8                	sbb    eax,ebx
c000ff0e:	b8 00 00 00 00       	mov    eax,0x0
c000ff13:	72 04                	jb     c000ff19 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000ff15:	89 d0                	mov    eax,edx
c000ff17:	29 f0                	sub    eax,esi
c000ff19:	89 d3                	mov    ebx,edx
c000ff1b:	29 c3                	sub    ebx,eax
c000ff1d:	74 0b                	je     c000ff2a <Pipe::write(unsigned long long, void*, int*)+0x82>
c000ff1f:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ff22:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ff26:	89 d9                	mov    ecx,ebx
c000ff28:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff2a:	85 c0                	test   eax,eax
c000ff2c:	74 0d                	je     c000ff3b <Pipe::write(unsigned long long, void*, int*)+0x93>
c000ff2e:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ff32:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000ff35:	89 de                	mov    esi,ebx
c000ff37:	89 c1                	mov    ecx,eax
c000ff39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff3b:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000ff3e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff43:	75 10                	jne    c000ff55 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000ff45:	83 ec 0c             	sub    esp,0xc
c000ff48:	68 b5 a0 02 c0       	push   0xc002a0b5
c000ff4d:	e8 e1 9e 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c000ff52:	83 c4 10             	add    esp,0x10
c000ff55:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff59:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000ff5c:	89 08                	mov    DWORD PTR [eax],ecx
c000ff5e:	31 c0                	xor    eax,eax
c000ff60:	83 c4 1c             	add    esp,0x1c
c000ff63:	5b                   	pop    ebx
c000ff64:	5e                   	pop    esi
c000ff65:	5f                   	pop    edi
c000ff66:	5d                   	pop    ebp
c000ff67:	c3                   	ret    

c000ff68 <Pipe::Pipe(int)>:
c000ff68:	83 ec 0c             	sub    esp,0xc
c000ff6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff6f:	83 ec 08             	sub    esp,0x8
c000ff72:	6a 00                	push   0x0
c000ff74:	50                   	push   eax
c000ff75:	e8 5e 0e 00 00       	call   c0010dd8 <UnixFile::UnixFile(int)>
c000ff7a:	83 c4 10             	add    esp,0x10
c000ff7d:	ba dc a0 02 c0       	mov    edx,0xc002a0dc
c000ff82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff86:	89 10                	mov    DWORD PTR [eax],edx
c000ff88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff8c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff90:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff97:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ff9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa2:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ffa9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffad:	83 ec 0c             	sub    esp,0xc
c000ffb0:	50                   	push   eax
c000ffb1:	e8 e3 f5 ff ff       	call   c000f599 <malloc>
c000ffb6:	83 c4 10             	add    esp,0x10
c000ffb9:	89 c2                	mov    edx,eax
c000ffbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffbf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ffc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ffca:	90                   	nop
c000ffcb:	83 c4 0c             	add    esp,0xc
c000ffce:	c3                   	ret    
c000ffcf:	90                   	nop

c000ffd0 <VgaText::isAtty()>:
c000ffd0:	b0 01                	mov    al,0x1
c000ffd2:	c3                   	ret    
c000ffd3:	90                   	nop

c000ffd4 <VgaText::~VgaText()>:
c000ffd4:	83 ec 0c             	sub    esp,0xc
c000ffd7:	ba 64 a1 02 c0       	mov    edx,0xc002a164
c000ffdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe0:	89 10                	mov    DWORD PTR [eax],edx
c000ffe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe6:	83 ec 0c             	sub    esp,0xc
c000ffe9:	50                   	push   eax
c000ffea:	e8 cb 0f 00 00       	call   c0010fba <UnixFile::~UnixFile()>
c000ffef:	83 c4 10             	add    esp,0x10
c000fff2:	90                   	nop
c000fff3:	83 c4 0c             	add    esp,0xc
c000fff6:	c3                   	ret    
c000fff7:	90                   	nop

c000fff8 <VgaText::~VgaText()>:
c000fff8:	83 ec 0c             	sub    esp,0xc
c000fffb:	83 ec 0c             	sub    esp,0xc
c000fffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010002:	e8 cd ff ff ff       	call   c000ffd4 <VgaText::~VgaText()>
c0010007:	83 c4 10             	add    esp,0x10
c001000a:	83 ec 08             	sub    esp,0x8
c001000d:	68 c4 02 00 00       	push   0x2c4
c0010012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010016:	e8 d4 25 00 00       	call   c00125ef <operator delete(void*, unsigned long)>
c001001b:	83 c4 10             	add    esp,0x10
c001001e:	83 c4 0c             	add    esp,0xc
c0010021:	c3                   	ret    

c0010022 <VgaText::read(unsigned long long, void*, int*)>:
c0010022:	83 ec 10             	sub    esp,0x10
c0010025:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010029:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001002d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010031:	e8 58 5b 00 00       	call   c0015b8e <readKeyboard(VgaText*, char*, unsigned long)>
c0010036:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001003a:	89 02                	mov    DWORD PTR [edx],eax
c001003c:	31 c0                	xor    eax,eax
c001003e:	83 c4 1c             	add    esp,0x1c
c0010041:	c3                   	ret    

c0010042 <setTerminalScrollLock(bool)>:
c0010042:	c3                   	ret    

c0010043 <addToTerminalCycle(VgaText*)>:
c0010043:	8b 15 c0 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9c0
c0010049:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001004d:	85 d2                	test   edx,edx
c001004f:	75 09                	jne    c001005a <addToTerminalCycle(VgaText*)+0x17>
c0010051:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010054:	a3 c0 d9 02 c0       	mov    ds:0xc002d9c0,eax
c0010059:	c3                   	ret    
c001005a:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c001005d:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010060:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010063:	c3                   	ret    

c0010064 <installVgaTextImplementation()>:
c0010064:	83 ec 10             	sub    esp,0x10
c0010067:	6a 20                	push   0x20
c0010069:	6a 00                	push   0x0
c001006b:	68 a0 d9 02 c0       	push   0xc002d9a0
c0010070:	e8 db 06 ff ff       	call   c0000750 <memset>
c0010075:	83 c4 1c             	add    esp,0x1c
c0010078:	c3                   	ret    

c0010079 <scrollTerminalScrollLock(int)>:
c0010079:	c3                   	ret    

c001007a <VgaText::updateTitle()>:
c001007a:	53                   	push   ebx
c001007b:	31 c0                	xor    eax,eax
c001007d:	83 ec 58             	sub    esp,0x58
c0010080:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010084:	89 e1                	mov    ecx,esp
c0010086:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001008a:	40                   	inc    eax
c001008b:	83 f8 50             	cmp    eax,0x50
c001008e:	75 f6                	jne    c0010086 <VgaText::updateTitle()+0xc>
c0010090:	31 c0                	xor    eax,eax
c0010092:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010099:	84 db                	test   bl,bl
c001009b:	74 06                	je     c00100a3 <VgaText::updateTitle()+0x29>
c001009d:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00100a0:	40                   	inc    eax
c00100a1:	eb ef                	jmp    c0010092 <VgaText::updateTitle()+0x18>
c00100a3:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c00100a6:	85 c0                	test   eax,eax
c00100a8:	74 09                	je     c00100b3 <VgaText::updateTitle()+0x39>
c00100aa:	53                   	push   ebx
c00100ab:	53                   	push   ebx
c00100ac:	51                   	push   ecx
c00100ad:	52                   	push   edx
c00100ae:	ff d0                	call   eax
c00100b0:	83 c4 10             	add    esp,0x10
c00100b3:	83 c4 58             	add    esp,0x58
c00100b6:	5b                   	pop    ebx
c00100b7:	c3                   	ret    

c00100b8 <VgaText::load()>:
c00100b8:	53                   	push   ebx
c00100b9:	31 c0                	xor    eax,eax
c00100bb:	83 ec 58             	sub    esp,0x58
c00100be:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00100c2:	89 e2                	mov    edx,esp
c00100c4:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00100c8:	40                   	inc    eax
c00100c9:	83 f8 50             	cmp    eax,0x50
c00100cc:	75 f6                	jne    c00100c4 <VgaText::load()+0xc>
c00100ce:	31 c0                	xor    eax,eax
c00100d0:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00100d7:	84 c9                	test   cl,cl
c00100d9:	74 06                	je     c00100e1 <VgaText::load()+0x29>
c00100db:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00100de:	40                   	inc    eax
c00100df:	eb ef                	jmp    c00100d0 <VgaText::load()+0x18>
c00100e1:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00100e4:	85 c0                	test   eax,eax
c00100e6:	74 09                	je     c00100f1 <VgaText::load()+0x39>
c00100e8:	51                   	push   ecx
c00100e9:	51                   	push   ecx
c00100ea:	52                   	push   edx
c00100eb:	53                   	push   ebx
c00100ec:	ff d0                	call   eax
c00100ee:	83 c4 10             	add    esp,0x10
c00100f1:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00100f4:	85 c0                	test   eax,eax
c00100f6:	74 09                	je     c0010101 <VgaText::load()+0x49>
c00100f8:	83 ec 0c             	sub    esp,0xc
c00100fb:	53                   	push   ebx
c00100fc:	ff d0                	call   eax
c00100fe:	83 c4 10             	add    esp,0x10
c0010101:	83 c4 58             	add    esp,0x58
c0010104:	5b                   	pop    ebx
c0010105:	c3                   	ret    

c0010106 <VgaText::updateCursor()>:
c0010106:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001010a:	39 05 c4 d9 02 c0    	cmp    DWORD PTR ds:0xc002d9c4,eax
c0010110:	75 09                	jne    c001011b <VgaText::updateCursor()+0x15>
c0010112:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010115:	85 c0                	test   eax,eax
c0010117:	74 02                	je     c001011b <VgaText::updateCursor()+0x15>
c0010119:	ff e0                	jmp    eax
c001011b:	c3                   	ret    

c001011c <VgaText::doANSI_SGR(int)>:
c001011c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010120:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010124:	85 d2                	test   edx,edx
c0010126:	75 0b                	jne    c0010133 <VgaText::doANSI_SGR(int)+0x17>
c0010128:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001012b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001012e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010131:	eb 59                	jmp    c001018c <VgaText::doANSI_SGR(int)+0x70>
c0010133:	83 fa 07             	cmp    edx,0x7
c0010136:	75 0b                	jne    c0010143 <VgaText::doANSI_SGR(int)+0x27>
c0010138:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001013b:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c001013e:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010141:	eb 49                	jmp    c001018c <VgaText::doANSI_SGR(int)+0x70>
c0010143:	83 fa 1b             	cmp    edx,0x1b
c0010146:	74 e0                	je     c0010128 <VgaText::doANSI_SGR(int)+0xc>
c0010148:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001014b:	83 f9 07             	cmp    ecx,0x7
c001014e:	77 09                	ja     c0010159 <VgaText::doANSI_SGR(int)+0x3d>
c0010150:	8b 14 8d 60 c8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd37a0]
c0010157:	eb 20                	jmp    c0010179 <VgaText::doANSI_SGR(int)+0x5d>
c0010159:	8d 4a d8             	lea    ecx,[edx-0x28]
c001015c:	83 f9 07             	cmp    ecx,0x7
c001015f:	77 09                	ja     c001016a <VgaText::doANSI_SGR(int)+0x4e>
c0010161:	8b 14 8d 60 c8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd37a0]
c0010168:	eb 22                	jmp    c001018c <VgaText::doANSI_SGR(int)+0x70>
c001016a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001016d:	83 f9 07             	cmp    ecx,0x7
c0010170:	77 0b                	ja     c001017d <VgaText::doANSI_SGR(int)+0x61>
c0010172:	8b 14 95 18 c7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd38e8]
c0010179:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001017c:	c3                   	ret    
c001017d:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010180:	83 f9 07             	cmp    ecx,0x7
c0010183:	77 0a                	ja     c001018f <VgaText::doANSI_SGR(int)+0x73>
c0010185:	8b 14 95 f0 c6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3910]
c001018c:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001018f:	c3                   	ret    

c0010190 <VgaText::setDefaultBgColour(VgaColour)>:
c0010190:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010194:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010198:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001019b:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001019e:	c3                   	ret    
c001019f:	90                   	nop

c00101a0 <VgaText::setDefaultFgColour(VgaColour)>:
c00101a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101a8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00101ab:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00101ae:	c3                   	ret    
c00101af:	90                   	nop

c00101b0 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00101b0:	53                   	push   ebx
c00101b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101b5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00101b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00101bd:	51                   	push   ecx
c00101be:	e8 cd ff ff ff       	call   c0010190 <VgaText::setDefaultBgColour(VgaColour)>
c00101c3:	58                   	pop    eax
c00101c4:	5a                   	pop    edx
c00101c5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00101c9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101cd:	5b                   	pop    ebx
c00101ce:	eb d0                	jmp    c00101a0 <VgaText::setDefaultFgColour(VgaColour)>

c00101d0 <VgaText::setTitleTextColour(VgaColour)>:
c00101d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101d8:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00101db:	e9 9a fe ff ff       	jmp    c001007a <VgaText::updateTitle()>

c00101e0 <VgaText::setTitleColour(VgaColour)>:
c00101e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00101eb:	e9 8a fe ff ff       	jmp    c001007a <VgaText::updateTitle()>

c00101f0 <VgaText::setTitle(char*)>:
c00101f0:	53                   	push   ebx
c00101f1:	83 ec 10             	sub    esp,0x10
c00101f4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101fc:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010202:	50                   	push   eax
c0010203:	e8 04 06 ff ff       	call   c000080c <strcpy>
c0010208:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001020c:	83 c4 18             	add    esp,0x18
c001020f:	5b                   	pop    ebx
c0010210:	e9 65 fe ff ff       	jmp    c001007a <VgaText::updateTitle()>
c0010215:	90                   	nop

c0010216 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010216:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001021a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001021f:	83 e0 0f             	and    eax,0xf
c0010222:	c1 e2 04             	shl    edx,0x4
c0010225:	09 d0                	or     eax,edx
c0010227:	c3                   	ret    

c0010228 <VgaText::scrollScreen()>:
c0010228:	55                   	push   ebp
c0010229:	b9 01 00 00 00       	mov    ecx,0x1
c001022e:	57                   	push   edi
c001022f:	56                   	push   esi
c0010230:	53                   	push   ebx
c0010231:	83 ec 0c             	sub    esp,0xc
c0010234:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010238:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c001023e:	31 ff                	xor    edi,edi
c0010240:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010243:	83 f9 17             	cmp    ecx,0x17
c0010246:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0010249:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010250:	75 27                	jne    c0010279 <VgaText::scrollScreen()+0x51>
c0010252:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010255:	01 f5                	add    ebp,esi
c0010257:	f7 c7 01 00 00 00    	test   edi,0x1
c001025d:	74 16                	je     c0010275 <VgaText::scrollScreen()+0x4d>
c001025f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010263:	50                   	push   eax
c0010264:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010268:	50                   	push   eax
c0010269:	e8 a8 ff ff ff       	call   c0010216 <VgaText::combineColours(unsigned char, unsigned char)>
c001026e:	5a                   	pop    edx
c001026f:	5a                   	pop    edx
c0010270:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010273:	eb 04                	jmp    c0010279 <VgaText::scrollScreen()+0x51>
c0010275:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010279:	47                   	inc    edi
c001027a:	46                   	inc    esi
c001027b:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010281:	75 bd                	jne    c0010240 <VgaText::scrollScreen()+0x18>
c0010283:	41                   	inc    ecx
c0010284:	83 f9 18             	cmp    ecx,0x18
c0010287:	75 af                	jne    c0010238 <VgaText::scrollScreen()+0x10>
c0010289:	39 1d c4 d9 02 c0    	cmp    DWORD PTR ds:0xc002d9c4,ebx
c001028f:	75 1b                	jne    c00102ac <VgaText::scrollScreen()+0x84>
c0010291:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010295:	74 05                	je     c001029c <VgaText::scrollScreen()+0x74>
c0010297:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001029a:	eb 10                	jmp    c00102ac <VgaText::scrollScreen()+0x84>
c001029c:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c001029f:	85 c0                	test   eax,eax
c00102a1:	74 09                	je     c00102ac <VgaText::scrollScreen()+0x84>
c00102a3:	83 ec 0c             	sub    esp,0xc
c00102a6:	53                   	push   ebx
c00102a7:	ff d0                	call   eax
c00102a9:	83 c4 10             	add    esp,0x10
c00102ac:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00102b0:	83 c4 0c             	add    esp,0xc
c00102b3:	5b                   	pop    ebx
c00102b4:	5e                   	pop    esi
c00102b5:	5f                   	pop    edi
c00102b6:	5d                   	pop    ebp
c00102b7:	e9 4a fe ff ff       	jmp    c0010106 <VgaText::updateCursor()>

c00102bc <VgaText::combineCharAndColour(char, unsigned char)>:
c00102bc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00102c1:	c1 e0 08             	shl    eax,0x8
c00102c4:	89 c2                	mov    edx,eax
c00102c6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00102cb:	09 d0                	or     eax,edx
c00102cd:	c3                   	ret    

c00102ce <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00102ce:	56                   	push   esi
c00102cf:	53                   	push   ebx
c00102d0:	51                   	push   ecx
c00102d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00102d5:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102da:	50                   	push   eax
c00102db:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102e0:	50                   	push   eax
c00102e1:	e8 30 ff ff ff       	call   c0010216 <VgaText::combineColours(unsigned char, unsigned char)>
c00102e6:	5b                   	pop    ebx
c00102e7:	0f b6 c0             	movzx  eax,al
c00102ea:	5e                   	pop    esi
c00102eb:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00102f0:	50                   	push   eax
c00102f1:	53                   	push   ebx
c00102f2:	e8 c5 ff ff ff       	call   c00102bc <VgaText::combineCharAndColour(char, unsigned char)>
c00102f7:	5a                   	pop    edx
c00102f8:	5e                   	pop    esi
c00102f9:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00102fc:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010302:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010306:	0f b7 d2             	movzx  edx,dx
c0010309:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001030d:	39 0d c4 d9 02 c0    	cmp    DWORD PTR ds:0xc002d9c4,ecx
c0010313:	75 10                	jne    c0010325 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010315:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c0010318:	85 c0                	test   eax,eax
c001031a:	74 09                	je     c0010325 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001031c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010320:	5a                   	pop    edx
c0010321:	5b                   	pop    ebx
c0010322:	5e                   	pop    esi
c0010323:	ff e0                	jmp    eax
c0010325:	58                   	pop    eax
c0010326:	5b                   	pop    ebx
c0010327:	5e                   	pop    esi
c0010328:	c3                   	ret    
c0010329:	90                   	nop

c001032a <VgaText::getCursorX()>:
c001032a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001032e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010331:	c3                   	ret    

c0010332 <VgaText::getCursorY()>:
c0010332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010336:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0010339:	c3                   	ret    

c001033a <VgaText::setCursor(int, int)>:
c001033a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001033e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010342:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010345:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010349:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001034c:	e9 b5 fd ff ff       	jmp    c0010106 <VgaText::updateCursor()>

c0010351 <setActiveTerminal(VgaText*)>:
c0010351:	53                   	push   ebx
c0010352:	83 ec 08             	sub    esp,0x8
c0010355:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010359:	85 db                	test   ebx,ebx
c001035b:	75 11                	jne    c001036e <setActiveTerminal(VgaText*)+0x1d>
c001035d:	c7 44 24 10 f0 a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a0f0
c0010365:	83 c4 08             	add    esp,0x8
c0010368:	5b                   	pop    ebx
c0010369:	e9 c5 9a 00 00       	jmp    c0019e33 <Krnl::panic(char const*)>
c001036e:	a1 c4 d9 02 c0       	mov    eax,ds:0xc002d9c4
c0010373:	85 c0                	test   eax,eax
c0010375:	74 0c                	je     c0010383 <setActiveTerminal(VgaText*)+0x32>
c0010377:	83 ec 0c             	sub    esp,0xc
c001037a:	50                   	push   eax
c001037b:	e8 86 fd ff ff       	call   c0010106 <VgaText::updateCursor()>
c0010380:	83 c4 10             	add    esp,0x10
c0010383:	89 1d c4 d9 02 c0    	mov    DWORD PTR ds:0xc002d9c4,ebx
c0010389:	51                   	push   ecx
c001038a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001038d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010390:	53                   	push   ebx
c0010391:	e8 a4 ff ff ff       	call   c001033a <VgaText::setCursor(int, int)>
c0010396:	83 c4 10             	add    esp,0x10
c0010399:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001039d:	75 07                	jne    c00103a6 <setActiveTerminal(VgaText*)+0x55>
c001039f:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c00103a6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103aa:	83 c4 08             	add    esp,0x8
c00103ad:	5b                   	pop    ebx
c00103ae:	e9 05 fd ff ff       	jmp    c00100b8 <VgaText::load()>

c00103b3 <doTerminalCycle()>:
c00103b3:	83 ec 18             	sub    esp,0x18
c00103b6:	a1 c0 d9 02 c0       	mov    eax,ds:0xc002d9c0
c00103bb:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00103be:	50                   	push   eax
c00103bf:	a3 c0 d9 02 c0       	mov    ds:0xc002d9c0,eax
c00103c4:	e8 88 ff ff ff       	call   c0010351 <setActiveTerminal(VgaText*)>
c00103c9:	83 c4 1c             	add    esp,0x1c
c00103cc:	c3                   	ret    
c00103cd:	90                   	nop

c00103ce <VgaText::setCursorX(int)>:
c00103ce:	83 ec 10             	sub    esp,0x10
c00103d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103d5:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00103d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103dc:	50                   	push   eax
c00103dd:	e8 58 ff ff ff       	call   c001033a <VgaText::setCursor(int, int)>
c00103e2:	83 c4 1c             	add    esp,0x1c
c00103e5:	c3                   	ret    

c00103e6 <VgaText::setCursorY(int)>:
c00103e6:	83 ec 10             	sub    esp,0x10
c00103e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103f1:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00103f4:	50                   	push   eax
c00103f5:	e8 40 ff ff ff       	call   c001033a <VgaText::setCursor(int, int)>
c00103fa:	83 c4 1c             	add    esp,0x1c
c00103fd:	c3                   	ret    

c00103fe <VgaText::incrementCursor(bool)>:
c00103fe:	56                   	push   esi
c00103ff:	53                   	push   ebx
c0010400:	51                   	push   ecx
c0010401:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010405:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010409:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001040c:	40                   	inc    eax
c001040d:	83 f8 50             	cmp    eax,0x50
c0010410:	74 05                	je     c0010417 <VgaText::incrementCursor(bool)+0x19>
c0010412:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010415:	eb 24                	jmp    c001043b <VgaText::incrementCursor(bool)+0x3d>
c0010417:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001041a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010421:	8d 50 01             	lea    edx,[eax+0x1]
c0010424:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010427:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001042a:	75 0f                	jne    c001043b <VgaText::incrementCursor(bool)+0x3d>
c001042c:	83 ec 0c             	sub    esp,0xc
c001042f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010432:	53                   	push   ebx
c0010433:	e8 f0 fd ff ff       	call   c0010228 <VgaText::scrollScreen()>
c0010438:	83 c4 10             	add    esp,0x10
c001043b:	89 f0                	mov    eax,esi
c001043d:	84 c0                	test   al,al
c001043f:	74 0c                	je     c001044d <VgaText::incrementCursor(bool)+0x4f>
c0010441:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010445:	5a                   	pop    edx
c0010446:	5b                   	pop    ebx
c0010447:	5e                   	pop    esi
c0010448:	e9 b9 fc ff ff       	jmp    c0010106 <VgaText::updateCursor()>
c001044d:	58                   	pop    eax
c001044e:	5b                   	pop    ebx
c001044f:	5e                   	pop    esi
c0010450:	c3                   	ret    
c0010451:	90                   	nop

c0010452 <VgaText::decrementCursor(bool)>:
c0010452:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010456:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001045a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001045d:	85 c0                	test   eax,eax
c001045f:	74 04                	je     c0010465 <VgaText::decrementCursor(bool)+0x13>
c0010461:	48                   	dec    eax
c0010462:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010465:	84 c9                	test   cl,cl
c0010467:	74 09                	je     c0010472 <VgaText::decrementCursor(bool)+0x20>
c0010469:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001046d:	e9 94 fc ff ff       	jmp    c0010106 <VgaText::updateCursor()>
c0010472:	c3                   	ret    
c0010473:	90                   	nop

c0010474 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010474:	53                   	push   ebx
c0010475:	83 ec 08             	sub    esp,0x8
c0010478:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001047c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010480:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010484:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010488:	3c 07                	cmp    al,0x7
c001048a:	75 2a                	jne    c00104b6 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001048c:	a1 78 da 02 c0       	mov    eax,ds:0xc002da78
c0010491:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010499:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00104a1:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00104a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104ad:	83 c4 08             	add    esp,0x8
c00104b0:	5b                   	pop    ebx
c00104b1:	e9 1e 30 00 00       	jmp    c00134d4 <Buzzer::beep(int, int, bool)>
c00104b6:	3c 0d                	cmp    al,0xd
c00104b8:	75 09                	jne    c00104c3 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c00104ba:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104c1:	eb 2c                	jmp    c00104ef <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00104c3:	3c 0a                	cmp    al,0xa
c00104c5:	75 31                	jne    c00104f8 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c00104c7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00104ca:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104d1:	8d 50 01             	lea    edx,[eax+0x1]
c00104d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00104d7:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00104da:	75 0f                	jne    c00104eb <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00104dc:	83 ec 0c             	sub    esp,0xc
c00104df:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00104e2:	53                   	push   ebx
c00104e3:	e8 40 fd ff ff       	call   c0010228 <VgaText::scrollScreen()>
c00104e8:	83 c4 10             	add    esp,0x10
c00104eb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104ef:	83 c4 08             	add    esp,0x8
c00104f2:	5b                   	pop    ebx
c00104f3:	e9 0e fc ff ff       	jmp    c0010106 <VgaText::updateCursor()>
c00104f8:	3c 08                	cmp    al,0x8
c00104fa:	75 25                	jne    c0010521 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00104fc:	50                   	push   eax
c00104fd:	50                   	push   eax
c00104fe:	6a 01                	push   0x1
c0010500:	53                   	push   ebx
c0010501:	e8 4c ff ff ff       	call   c0010452 <VgaText::decrementCursor(bool)>
c0010506:	5a                   	pop    edx
c0010507:	59                   	pop    ecx
c0010508:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001050b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001050e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010511:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010514:	6a 20                	push   0x20
c0010516:	53                   	push   ebx
c0010517:	e8 b2 fd ff ff       	call   c00102ce <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001051c:	83 c4 28             	add    esp,0x28
c001051f:	5b                   	pop    ebx
c0010520:	c3                   	ret    
c0010521:	83 ec 08             	sub    esp,0x8
c0010524:	0f be c0             	movsx  eax,al
c0010527:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001052a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001052d:	51                   	push   ecx
c001052e:	52                   	push   edx
c001052f:	50                   	push   eax
c0010530:	53                   	push   ebx
c0010531:	e8 98 fd ff ff       	call   c00102ce <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010536:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001053a:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010542:	83 c4 28             	add    esp,0x28
c0010545:	5b                   	pop    ebx
c0010546:	e9 b3 fe ff ff       	jmp    c00103fe <VgaText::incrementCursor(bool)>
c001054b:	90                   	nop

c001054c <VgaText::doUpdate()>:
c001054c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010550:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010553:	85 c0                	test   eax,eax
c0010555:	74 02                	je     c0010559 <VgaText::doUpdate()+0xd>
c0010557:	ff e0                	jmp    eax
c0010559:	c3                   	ret    

c001055a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001055a:	55                   	push   ebp
c001055b:	31 ed                	xor    ebp,ebp
c001055d:	57                   	push   edi
c001055e:	56                   	push   esi
c001055f:	53                   	push   ebx
c0010560:	83 ec 1c             	sub    esp,0x1c
c0010563:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010567:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001056c:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010573:	50                   	push   eax
c0010574:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010579:	50                   	push   eax
c001057a:	e8 97 fc ff ff       	call   c0010216 <VgaText::combineColours(unsigned char, unsigned char)>
c001057f:	59                   	pop    ecx
c0010580:	0f b6 c0             	movzx  eax,al
c0010583:	5e                   	pop    esi
c0010584:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010589:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001058d:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010590:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010594:	0f b7 f6             	movzx  esi,si
c0010597:	01 f6                	add    esi,esi
c0010599:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001059c:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001059f:	84 c0                	test   al,al
c00105a1:	0f 84 fd 00 00 00    	je     c00106a4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c00105a7:	3c 0d                	cmp    al,0xd
c00105a9:	75 0c                	jne    c00105b7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c00105ab:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105b2:	e9 e7 00 00 00       	jmp    c001069e <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105b7:	3c 0a                	cmp    al,0xa
c00105b9:	75 47                	jne    c0010602 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c00105bb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00105be:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105c5:	8d 48 01             	lea    ecx,[eax+0x1]
c00105c8:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00105cb:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00105ce:	75 0f                	jne    c00105df <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c00105d0:	83 ec 0c             	sub    esp,0xc
c00105d3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00105d6:	53                   	push   ebx
c00105d7:	e8 4c fc ff ff       	call   c0010228 <VgaText::scrollScreen()>
c00105dc:	83 c4 10             	add    esp,0x10
c00105df:	83 ec 0c             	sub    esp,0xc
c00105e2:	31 ed                	xor    ebp,ebp
c00105e4:	53                   	push   ebx
c00105e5:	e8 1c fb ff ff       	call   c0010106 <VgaText::updateCursor()>
c00105ea:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105ef:	83 c4 10             	add    esp,0x10
c00105f2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105f5:	0f b7 f6             	movzx  esi,si
c00105f8:	01 f6                	add    esi,esi
c00105fa:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105fd:	e9 9c 00 00 00       	jmp    c001069e <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010602:	3c 08                	cmp    al,0x8
c0010604:	75 35                	jne    c001063b <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010606:	56                   	push   esi
c0010607:	56                   	push   esi
c0010608:	6a 01                	push   0x1
c001060a:	53                   	push   ebx
c001060b:	e8 42 fe ff ff       	call   c0010452 <VgaText::decrementCursor(bool)>
c0010610:	58                   	pop    eax
c0010611:	5a                   	pop    edx
c0010612:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010615:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010618:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001061b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001061e:	6a 20                	push   0x20
c0010620:	53                   	push   ebx
c0010621:	e8 a8 fc ff ff       	call   c00102ce <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010626:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001062b:	83 c4 20             	add    esp,0x20
c001062e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010631:	0f b7 f6             	movzx  esi,si
c0010634:	01 f6                	add    esi,esi
c0010636:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010639:	eb 63                	jmp    c001069e <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001063b:	51                   	push   ecx
c001063c:	51                   	push   ecx
c001063d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010641:	50                   	push   eax
c0010642:	e8 75 fc ff ff       	call   c00102bc <VgaText::combineCharAndColour(char, unsigned char)>
c0010647:	83 c4 10             	add    esp,0x10
c001064a:	66 89 06             	mov    WORD PTR [esi],ax
c001064d:	39 1d c4 d9 02 c0    	cmp    DWORD PTR ds:0xc002d9c4,ebx
c0010653:	75 21                	jne    c0010676 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010655:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010658:	85 c0                	test   eax,eax
c001065a:	74 1a                	je     c0010676 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c001065c:	52                   	push   edx
c001065d:	52                   	push   edx
c001065e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010661:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010664:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010668:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001066c:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c001066f:	51                   	push   ecx
c0010670:	53                   	push   ebx
c0010671:	ff d0                	call   eax
c0010673:	83 c4 20             	add    esp,0x20
c0010676:	83 c6 02             	add    esi,0x2
c0010679:	50                   	push   eax
c001067a:	50                   	push   eax
c001067b:	6a 00                	push   0x0
c001067d:	53                   	push   ebx
c001067e:	e8 7b fd ff ff       	call   c00103fe <VgaText::incrementCursor(bool)>
c0010683:	83 c4 10             	add    esp,0x10
c0010686:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001068a:	75 0d                	jne    c0010699 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c001068c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010691:	0f b7 f6             	movzx  esi,si
c0010694:	01 f6                	add    esi,esi
c0010696:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010699:	bd 01 00 00 00       	mov    ebp,0x1
c001069e:	47                   	inc    edi
c001069f:	e9 f8 fe ff ff       	jmp    c001059c <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c00106a4:	83 ec 0c             	sub    esp,0xc
c00106a7:	53                   	push   ebx
c00106a8:	e8 59 fa ff ff       	call   c0010106 <VgaText::updateCursor()>
c00106ad:	83 c4 10             	add    esp,0x10
c00106b0:	89 e8                	mov    eax,ebp
c00106b2:	84 c0                	test   al,al
c00106b4:	74 0c                	je     c00106c2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c00106b6:	83 ec 0c             	sub    esp,0xc
c00106b9:	53                   	push   ebx
c00106ba:	e8 8d fe ff ff       	call   c001054c <VgaText::doUpdate()>
c00106bf:	83 c4 10             	add    esp,0x10
c00106c2:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106c9:	83 c4 1c             	add    esp,0x1c
c00106cc:	5b                   	pop    ebx
c00106cd:	5e                   	pop    esi
c00106ce:	5f                   	pop    edi
c00106cf:	5d                   	pop    ebp
c00106d0:	c3                   	ret    
c00106d1:	90                   	nop

c00106d2 <VgaText::clearScreen()>:
c00106d2:	57                   	push   edi
c00106d3:	56                   	push   esi
c00106d4:	31 f6                	xor    esi,esi
c00106d6:	53                   	push   ebx
c00106d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106db:	52                   	push   edx
c00106dc:	6a 00                	push   0x0
c00106de:	6a 00                	push   0x0
c00106e0:	53                   	push   ebx
c00106e1:	e8 54 fc ff ff       	call   c001033a <VgaText::setCursor(int, int)>
c00106e6:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00106ed:	83 c4 10             	add    esp,0x10
c00106f0:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00106f3:	7e 20                	jle    c0010715 <VgaText::clearScreen()+0x43>
c00106f5:	31 ff                	xor    edi,edi
c00106f7:	50                   	push   eax
c00106f8:	50                   	push   eax
c00106f9:	56                   	push   esi
c00106fa:	57                   	push   edi
c00106fb:	47                   	inc    edi
c00106fc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00106ff:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010702:	6a 20                	push   0x20
c0010704:	53                   	push   ebx
c0010705:	e8 c4 fb ff ff       	call   c00102ce <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001070a:	83 c4 20             	add    esp,0x20
c001070d:	83 ff 50             	cmp    edi,0x50
c0010710:	75 e5                	jne    c00106f7 <VgaText::clearScreen()+0x25>
c0010712:	46                   	inc    esi
c0010713:	eb db                	jmp    c00106f0 <VgaText::clearScreen()+0x1e>
c0010715:	83 ec 0c             	sub    esp,0xc
c0010718:	53                   	push   ebx
c0010719:	e8 2e fe ff ff       	call   c001054c <VgaText::doUpdate()>
c001071e:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010725:	83 c4 10             	add    esp,0x10
c0010728:	5b                   	pop    ebx
c0010729:	5e                   	pop    esi
c001072a:	5f                   	pop    edi
c001072b:	c3                   	ret    

c001072c <VgaText::putchar(char)>:
c001072c:	56                   	push   esi
c001072d:	53                   	push   ebx
c001072e:	83 ec 14             	sub    esp,0x14
c0010731:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010735:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010739:	3c 5b                	cmp    al,0x5b
c001073b:	75 18                	jne    c0010755 <VgaText::putchar(char)+0x29>
c001073d:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010741:	74 1f                	je     c0010762 <VgaText::putchar(char)+0x36>
c0010743:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010749:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010750:	e9 bd 00 00 00       	jmp    c0010812 <VgaText::putchar(char)+0xe6>
c0010755:	3c 1b                	cmp    al,0x1b
c0010757:	75 09                	jne    c0010762 <VgaText::putchar(char)+0x36>
c0010759:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001075d:	e9 b0 00 00 00       	jmp    c0010812 <VgaText::putchar(char)+0xe6>
c0010762:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010765:	84 c9                	test   cl,cl
c0010767:	0f 84 92 00 00 00    	je     c00107ff <VgaText::putchar(char)+0xd3>
c001076d:	8d 50 c0             	lea    edx,[eax-0x40]
c0010770:	80 fa 3e             	cmp    dl,0x3e
c0010773:	77 76                	ja     c00107eb <VgaText::putchar(char)+0xbf>
c0010775:	3c 6d                	cmp    al,0x6d
c0010777:	75 47                	jne    c00107c0 <VgaText::putchar(char)+0x94>
c0010779:	31 f6                	xor    esi,esi
c001077b:	31 d2                	xor    edx,edx
c001077d:	31 c0                	xor    eax,eax
c001077f:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010782:	7e 2d                	jle    c00107b1 <VgaText::putchar(char)+0x85>
c0010784:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010789:	80 fa 3b             	cmp    dl,0x3b
c001078c:	75 17                	jne    c00107a5 <VgaText::putchar(char)+0x79>
c001078e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010792:	50                   	push   eax
c0010793:	53                   	push   ebx
c0010794:	e8 83 f9 ff ff       	call   c001011c <VgaText::doANSI_SGR(int)>
c0010799:	59                   	pop    ecx
c001079a:	31 d2                	xor    edx,edx
c001079c:	58                   	pop    eax
c001079d:	31 c0                	xor    eax,eax
c001079f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00107a3:	eb 09                	jmp    c00107ae <VgaText::putchar(char)+0x82>
c00107a5:	6b c0 0a             	imul   eax,eax,0xa
c00107a8:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00107ac:	88 ca                	mov    dl,cl
c00107ae:	46                   	inc    esi
c00107af:	eb ce                	jmp    c001077f <VgaText::putchar(char)+0x53>
c00107b1:	84 d2                	test   dl,dl
c00107b3:	74 2e                	je     c00107e3 <VgaText::putchar(char)+0xb7>
c00107b5:	50                   	push   eax
c00107b6:	53                   	push   ebx
c00107b7:	e8 60 f9 ff ff       	call   c001011c <VgaText::doANSI_SGR(int)>
c00107bc:	58                   	pop    eax
c00107bd:	5a                   	pop    edx
c00107be:	eb 23                	jmp    c00107e3 <VgaText::putchar(char)+0xb7>
c00107c0:	3c 4a                	cmp    al,0x4a
c00107c2:	75 1f                	jne    c00107e3 <VgaText::putchar(char)+0xb7>
c00107c4:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00107c8:	75 19                	jne    c00107e3 <VgaText::putchar(char)+0xb7>
c00107ca:	83 ec 0c             	sub    esp,0xc
c00107cd:	53                   	push   ebx
c00107ce:	e8 ff fe ff ff       	call   c00106d2 <VgaText::clearScreen()>
c00107d3:	83 c4 0c             	add    esp,0xc
c00107d6:	6a 00                	push   0x0
c00107d8:	6a 00                	push   0x0
c00107da:	53                   	push   ebx
c00107db:	e8 5a fb ff ff       	call   c001033a <VgaText::setCursor(int, int)>
c00107e0:	83 c4 10             	add    esp,0x10
c00107e3:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00107e9:	eb 27                	jmp    c0010812 <VgaText::putchar(char)+0xe6>
c00107eb:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00107ee:	83 fa 0e             	cmp    edx,0xe
c00107f1:	7f 1f                	jg     c0010812 <VgaText::putchar(char)+0xe6>
c00107f3:	8d 4a 01             	lea    ecx,[edx+0x1]
c00107f6:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00107f9:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00107fd:	eb 13                	jmp    c0010812 <VgaText::putchar(char)+0xe6>
c00107ff:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010802:	0f be c0             	movsx  eax,al
c0010805:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010808:	50                   	push   eax
c0010809:	53                   	push   ebx
c001080a:	e8 65 fc ff ff       	call   c0010474 <VgaText::putchar(char, VgaColour, VgaColour)>
c001080f:	83 c4 10             	add    esp,0x10
c0010812:	83 c4 14             	add    esp,0x14
c0010815:	5b                   	pop    ebx
c0010816:	5e                   	pop    esi
c0010817:	c3                   	ret    

c0010818 <VgaText::putx(unsigned int)>:
c0010818:	57                   	push   edi
c0010819:	b9 11 00 00 00       	mov    ecx,0x11
c001081e:	56                   	push   esi
c001081f:	be fe a0 02 c0       	mov    esi,0xc002a0fe
c0010824:	53                   	push   ebx
c0010825:	83 ec 20             	sub    esp,0x20
c0010828:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001082c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010830:	fc                   	cld    
c0010831:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010833:	be 08 00 00 00       	mov    esi,0x8
c0010838:	50                   	push   eax
c0010839:	50                   	push   eax
c001083a:	89 d8                	mov    eax,ebx
c001083c:	c1 e3 04             	shl    ebx,0x4
c001083f:	c1 e8 1c             	shr    eax,0x1c
c0010842:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010847:	50                   	push   eax
c0010848:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001084c:	e8 db fe ff ff       	call   c001072c <VgaText::putchar(char)>
c0010851:	83 c4 10             	add    esp,0x10
c0010854:	4e                   	dec    esi
c0010855:	75 e1                	jne    c0010838 <VgaText::putx(unsigned int)+0x20>
c0010857:	83 c4 20             	add    esp,0x20
c001085a:	5b                   	pop    ebx
c001085b:	5e                   	pop    esi
c001085c:	5f                   	pop    edi
c001085d:	c3                   	ret    

c001085e <VgaText::puts(char const*)>:
c001085e:	53                   	push   ebx
c001085f:	83 ec 08             	sub    esp,0x8
c0010862:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010866:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010869:	84 c0                	test   al,al
c001086b:	74 12                	je     c001087f <VgaText::puts(char const*)+0x21>
c001086d:	43                   	inc    ebx
c001086e:	51                   	push   ecx
c001086f:	51                   	push   ecx
c0010870:	50                   	push   eax
c0010871:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010875:	e8 b2 fe ff ff       	call   c001072c <VgaText::putchar(char)>
c001087a:	83 c4 10             	add    esp,0x10
c001087d:	eb e7                	jmp    c0010866 <VgaText::puts(char const*)+0x8>
c001087f:	83 c4 08             	add    esp,0x8
c0010882:	5b                   	pop    ebx
c0010883:	c3                   	ret    

c0010884 <VgaText::VgaText(char const*)>:
c0010884:	57                   	push   edi
c0010885:	56                   	push   esi
c0010886:	53                   	push   ebx
c0010887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088b:	83 ec 08             	sub    esp,0x8
c001088e:	6a 00                	push   0x0
c0010890:	50                   	push   eax
c0010891:	e8 42 05 00 00       	call   c0010dd8 <UnixFile::UnixFile(int)>
c0010896:	83 c4 10             	add    esp,0x10
c0010899:	ba 64 a1 02 c0       	mov    edx,0xc002a164
c001089e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a2:	89 10                	mov    DWORD PTR [eax],edx
c00108a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a8:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00108af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b3:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00108ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108be:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00108c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c6:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00108ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ce:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00108d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d9:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00108e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e4:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00108eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ef:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00108f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fa:	8d 50 60             	lea    edx,[eax+0x60]
c00108fd:	bb a0 d9 02 c0       	mov    ebx,0xc002d9a0
c0010902:	b8 08 00 00 00       	mov    eax,0x8
c0010907:	fc                   	cld    
c0010908:	89 d7                	mov    edi,edx
c001090a:	89 de                	mov    esi,ebx
c001090c:	89 c1                	mov    ecx,eax
c001090e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010914:	05 82 00 00 00       	add    eax,0x82
c0010919:	83 ec 08             	sub    esp,0x8
c001091c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010920:	50                   	push   eax
c0010921:	e8 e6 fe fe ff       	call   c000080c <strcpy>
c0010926:	83 c4 10             	add    esp,0x10
c0010929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092d:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010934:	83 ec 0c             	sub    esp,0xc
c0010937:	6a 01                	push   0x1
c0010939:	e8 dd 08 00 00       	call   c001121b <Virt::allocateKernelVirtualPages(int)>
c001093e:	83 c4 10             	add    esp,0x10
c0010941:	89 c2                	mov    edx,eax
c0010943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010947:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001094a:	8b 1d 70 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da70
c0010950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010954:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010957:	89 c6                	mov    esi,eax
c0010959:	e8 13 f0 ff ff       	call   c000f971 <Phys::allocatePage()>
c001095e:	6a 05                	push   0x5
c0010960:	56                   	push   esi
c0010961:	50                   	push   eax
c0010962:	53                   	push   ebx
c0010963:	e8 70 10 00 00       	call   c00119d8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0010968:	83 c4 10             	add    esp,0x10
c001096b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001096f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010972:	83 ec 04             	sub    esp,0x4
c0010975:	68 00 0f 00 00       	push   0xf00
c001097a:	6a 00                	push   0x0
c001097c:	50                   	push   eax
c001097d:	e8 ce fd fe ff       	call   c0000750 <memset>
c0010982:	83 c4 10             	add    esp,0x10
c0010985:	83 ec 04             	sub    esp,0x4
c0010988:	6a 00                	push   0x0
c001098a:	6a 07                	push   0x7
c001098c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010990:	e8 1b f8 ff ff       	call   c00101b0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010995:	83 c4 10             	add    esp,0x10
c0010998:	83 ec 04             	sub    esp,0x4
c001099b:	6a 00                	push   0x0
c001099d:	6a 00                	push   0x0
c001099f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109a3:	e8 92 f9 ff ff       	call   c001033a <VgaText::setCursor(int, int)>
c00109a8:	83 c4 10             	add    esp,0x10
c00109ab:	83 ec 0c             	sub    esp,0xc
c00109ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109b2:	e8 1b fd ff ff       	call   c00106d2 <VgaText::clearScreen()>
c00109b7:	83 c4 10             	add    esp,0x10
c00109ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109be:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00109c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c6:	05 02 01 00 00       	add    eax,0x102
c00109cb:	83 ec 04             	sub    esp,0x4
c00109ce:	68 96 00 00 00       	push   0x96
c00109d3:	6a 00                	push   0x0
c00109d5:	50                   	push   eax
c00109d6:	e8 75 fd fe ff       	call   c0000750 <memset>
c00109db:	83 c4 10             	add    esp,0x10
c00109de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e2:	05 98 01 00 00       	add    eax,0x198
c00109e7:	83 ec 04             	sub    esp,0x4
c00109ea:	68 2c 01 00 00       	push   0x12c
c00109ef:	6a 00                	push   0x0
c00109f1:	50                   	push   eax
c00109f2:	e8 59 fd fe ff       	call   c0000750 <memset>
c00109f7:	83 c4 10             	add    esp,0x10
c00109fa:	90                   	nop
c00109fb:	5b                   	pop    ebx
c00109fc:	5e                   	pop    esi
c00109fd:	5f                   	pop    edi
c00109fe:	c3                   	ret    
c00109ff:	90                   	nop

c0010a00 <VgaText::receiveKey(unsigned char)>:
c0010a00:	55                   	push   ebp
c0010a01:	57                   	push   edi
c0010a02:	56                   	push   esi
c0010a03:	53                   	push   ebx
c0010a04:	83 ec 1c             	sub    esp,0x1c
c0010a07:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010a0f:	84 db                	test   bl,bl
c0010a11:	0f 84 c9 00 00 00    	je     c0010ae0 <VgaText::receiveKey(unsigned char)+0xe0>
c0010a17:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010a1d:	80 fb 08             	cmp    bl,0x8
c0010a20:	75 2c                	jne    c0010a4e <VgaText::receiveKey(unsigned char)+0x4e>
c0010a22:	83 ec 0c             	sub    esp,0xc
c0010a25:	57                   	push   edi
c0010a26:	e8 41 fd fe ff       	call   c000076c <strlen>
c0010a2b:	83 c4 10             	add    esp,0x10
c0010a2e:	85 c0                	test   eax,eax
c0010a30:	74 41                	je     c0010a73 <VgaText::receiveKey(unsigned char)+0x73>
c0010a32:	50                   	push   eax
c0010a33:	50                   	push   eax
c0010a34:	6a 08                	push   0x8
c0010a36:	56                   	push   esi
c0010a37:	e8 f0 fc ff ff       	call   c001072c <VgaText::putchar(char)>
c0010a3c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a3f:	e8 28 fd fe ff       	call   c000076c <strlen>
c0010a44:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010a4c:	eb 22                	jmp    c0010a70 <VgaText::receiveKey(unsigned char)+0x70>
c0010a4e:	0f be c3             	movsx  eax,bl
c0010a51:	52                   	push   edx
c0010a52:	52                   	push   edx
c0010a53:	50                   	push   eax
c0010a54:	56                   	push   esi
c0010a55:	e8 d2 fc ff ff       	call   c001072c <VgaText::putchar(char)>
c0010a5a:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010a5e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a63:	59                   	pop    ecx
c0010a64:	5d                   	pop    ebp
c0010a65:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010a69:	50                   	push   eax
c0010a6a:	57                   	push   edi
c0010a6b:	e8 dc fe fe ff       	call   c000094c <strcat>
c0010a70:	83 c4 10             	add    esp,0x10
c0010a73:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010a7a:	75 05                	jne    c0010a81 <VgaText::receiveKey(unsigned char)+0x81>
c0010a7c:	80 fb 0a             	cmp    bl,0xa
c0010a7f:	75 53                	jne    c0010ad4 <VgaText::receiveKey(unsigned char)+0xd4>
c0010a81:	83 ec 0c             	sub    esp,0xc
c0010a84:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a8a:	53                   	push   ebx
c0010a8b:	e8 dc fc fe ff       	call   c000076c <strlen>
c0010a90:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a93:	89 c5                	mov    ebp,eax
c0010a95:	e8 d2 fc fe ff       	call   c000076c <strlen>
c0010a9a:	83 c4 10             	add    esp,0x10
c0010a9d:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010aa1:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010aa6:	76 10                	jbe    c0010ab8 <VgaText::receiveKey(unsigned char)+0xb8>
c0010aa8:	83 ec 0c             	sub    esp,0xc
c0010aab:	68 0f a1 02 c0       	push   0xc002a10f
c0010ab0:	e8 7e 93 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c0010ab5:	83 c4 10             	add    esp,0x10
c0010ab8:	50                   	push   eax
c0010ab9:	50                   	push   eax
c0010aba:	57                   	push   edi
c0010abb:	53                   	push   ebx
c0010abc:	e8 8b fe fe ff       	call   c000094c <strcat>
c0010ac1:	83 c4 0c             	add    esp,0xc
c0010ac4:	68 96 00 00 00       	push   0x96
c0010ac9:	6a 00                	push   0x0
c0010acb:	57                   	push   edi
c0010acc:	e8 7f fc fe ff       	call   c0000750 <memset>
c0010ad1:	83 c4 10             	add    esp,0x10
c0010ad4:	83 ec 0c             	sub    esp,0xc
c0010ad7:	56                   	push   esi
c0010ad8:	e8 6f fa ff ff       	call   c001054c <VgaText::doUpdate()>
c0010add:	83 c4 10             	add    esp,0x10
c0010ae0:	83 c4 1c             	add    esp,0x1c
c0010ae3:	5b                   	pop    ebx
c0010ae4:	5e                   	pop    esi
c0010ae5:	5f                   	pop    edi
c0010ae6:	5d                   	pop    ebp
c0010ae7:	c3                   	ret    

c0010ae8 <VgaText::write(unsigned long long, void*, int*)>:
c0010ae8:	55                   	push   ebp
c0010ae9:	57                   	push   edi
c0010aea:	56                   	push   esi
c0010aeb:	53                   	push   ebx
c0010aec:	83 ec 0c             	sub    esp,0xc
c0010aef:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010af3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010af7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010afb:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010b02:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010b05:	39 eb                	cmp    ebx,ebp
c0010b07:	74 13                	je     c0010b1c <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010b09:	43                   	inc    ebx
c0010b0a:	50                   	push   eax
c0010b0b:	50                   	push   eax
c0010b0c:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010b10:	50                   	push   eax
c0010b11:	56                   	push   esi
c0010b12:	e8 15 fc ff ff       	call   c001072c <VgaText::putchar(char)>
c0010b17:	83 c4 10             	add    esp,0x10
c0010b1a:	eb e9                	jmp    c0010b05 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010b1c:	83 ec 0c             	sub    esp,0xc
c0010b1f:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010b26:	56                   	push   esi
c0010b27:	e8 20 fa ff ff       	call   c001054c <VgaText::doUpdate()>
c0010b2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010b30:	89 38                	mov    DWORD PTR [eax],edi
c0010b32:	83 c4 1c             	add    esp,0x1c
c0010b35:	31 c0                	xor    eax,eax
c0010b37:	5b                   	pop    ebx
c0010b38:	5e                   	pop    esi
c0010b39:	5f                   	pop    edi
c0010b3a:	5d                   	pop    ebp
c0010b3b:	c3                   	ret    

c0010b3c <newTerminal(char*)>:
c0010b3c:	83 ec 28             	sub    esp,0x28
c0010b3f:	68 c4 02 00 00       	push   0x2c4
c0010b44:	e8 50 ea ff ff       	call   c000f599 <malloc>
c0010b49:	5a                   	pop    edx
c0010b4a:	59                   	pop    ecx
c0010b4b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010b4f:	50                   	push   eax
c0010b50:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010b54:	e8 2b fd ff ff       	call   c0010884 <VgaText::VgaText(char const*)>
c0010b59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b5d:	83 c4 2c             	add    esp,0x2c
c0010b60:	c3                   	ret    
c0010b61:	90                   	nop

c0010b62 <TSS::TSS()>:
c0010b62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b66:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b6d:	90                   	nop
c0010b6e:	c3                   	ret    
c0010b6f:	90                   	nop

c0010b70 <TSS::setESP(unsigned long)>:
c0010b70:	55                   	push   ebp
c0010b71:	89 e5                	mov    ebp,esp
c0010b73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b79:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b7c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b7f:	90                   	nop
c0010b80:	5d                   	pop    ebp
c0010b81:	c3                   	ret    

c0010b82 <TSS::flush()>:
c0010b82:	55                   	push   ebp
c0010b83:	89 e5                	mov    ebp,esp
c0010b85:	83 ec 10             	sub    esp,0x10
c0010b88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b8d:	83 c8 03             	or     eax,0x3
c0010b90:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b94:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b98:	66 89 d0             	mov    ax,dx
c0010b9b:	0f 00 d8             	ltr    ax
c0010b9e:	90                   	nop
c0010b9f:	c9                   	leave  
c0010ba0:	c3                   	ret    
c0010ba1:	90                   	nop

c0010ba2 <TSS::setup(unsigned long, unsigned long)>:
c0010ba2:	55                   	push   ebp
c0010ba3:	89 e5                	mov    ebp,esp
c0010ba5:	83 ec 18             	sub    esp,0x18
c0010ba8:	83 ec 0c             	sub    esp,0xc
c0010bab:	6a 68                	push   0x68
c0010bad:	e8 e7 e9 ff ff       	call   c000f599 <malloc>
c0010bb2:	83 c4 10             	add    esp,0x10
c0010bb5:	89 c2                	mov    edx,eax
c0010bb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bba:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bc3:	83 ec 04             	sub    esp,0x4
c0010bc6:	6a 68                	push   0x68
c0010bc8:	6a 00                	push   0x0
c0010bca:	50                   	push   eax
c0010bcb:	e8 80 fb fe ff       	call   c0000750 <memset>
c0010bd0:	83 c4 10             	add    esp,0x10
c0010bd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bd9:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010bdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010be2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be5:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010beb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bf4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bfd:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010c03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c09:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010c0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c15:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010c1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c21:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c2d:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010c33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c39:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010c3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c45:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010c48:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010c4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c51:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c54:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010c57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c5d:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010c64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c6a:	0f 20 da             	mov    edx,cr3
c0010c6d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010c70:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010c73:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c7c:	83 ec 08             	sub    esp,0x8
c0010c7f:	50                   	push   eax
c0010c80:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c83:	50                   	push   eax
c0010c84:	e8 09 e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c89:	83 c4 10             	add    esp,0x10
c0010c8c:	83 ec 08             	sub    esp,0x8
c0010c8f:	6a 68                	push   0x68
c0010c91:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c94:	50                   	push   eax
c0010c95:	e8 14 e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c9a:	83 c4 10             	add    esp,0x10
c0010c9d:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010ca1:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010ca4:	83 e0 0f             	and    eax,0xf
c0010ca7:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010caa:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010cad:	83 c8 40             	or     eax,0x40
c0010cb0:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cb3:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0010cb8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010cbe:	05 78 01 00 00       	add    eax,0x178
c0010cc3:	83 ec 04             	sub    esp,0x4
c0010cc6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010cc9:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010ccc:	50                   	push   eax
c0010ccd:	e8 10 e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010cd2:	83 c4 10             	add    esp,0x10
c0010cd5:	89 c2                	mov    edx,eax
c0010cd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cda:	89 10                	mov    DWORD PTR [eax],edx
c0010cdc:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0010ce1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ce7:	05 78 01 00 00       	add    eax,0x178
c0010cec:	83 ec 0c             	sub    esp,0xc
c0010cef:	50                   	push   eax
c0010cf0:	e8 17 e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010cf5:	83 c4 10             	add    esp,0x10
c0010cf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cfd:	c9                   	leave  
c0010cfe:	c3                   	ret    
c0010cff:	90                   	nop

c0010d00 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010d00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d04:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d0b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d10:	75 08                	jne    c0010d1a <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010d12:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d18:	eb 38                	jmp    c0010d52 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010d1a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d1f:	75 17                	jne    c0010d38 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010d21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d26:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d29:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d31:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d35:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010d38:	89 c1                	mov    ecx,eax
c0010d3a:	83 e1 fd             	and    ecx,0xfffffffd
c0010d3d:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010d43:	74 cd                	je     c0010d12 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d45:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d4a:	83 e0 ef             	and    eax,0xffffffef
c0010d4d:	83 f8 08             	cmp    eax,0x8
c0010d50:	76 c0                	jbe    c0010d12 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d52:	31 c0                	xor    eax,eax
c0010d54:	c3                   	ret    
c0010d55:	90                   	nop

c0010d56 <ReservedFilename::isAtty()>:
c0010d56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d5a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d5d:	31 c0                	xor    eax,eax
c0010d5f:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010d65:	74 09                	je     c0010d70 <ReservedFilename::isAtty()+0x1a>
c0010d67:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010d6d:	0f 94 c0             	sete   al
c0010d70:	c3                   	ret    
c0010d71:	90                   	nop

c0010d72 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010d72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d76:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d7d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d81:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d86:	75 08                	jne    c0010d90 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d88:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d8e:	eb 3d                	jmp    c0010dcd <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d90:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d95:	75 17                	jne    c0010dae <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d9c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d9f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010da5:	8b 10                	mov    edx,DWORD PTR [eax]
c0010da7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010dab:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010dae:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010db3:	75 04                	jne    c0010db9 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010db5:	89 0a                	mov    DWORD PTR [edx],ecx
c0010db7:	eb 14                	jmp    c0010dcd <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010db9:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010dbe:	74 c8                	je     c0010d88 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dc0:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010dc5:	83 e0 ef             	and    eax,0xffffffef
c0010dc8:	83 f8 08             	cmp    eax,0x8
c0010dcb:	76 bb                	jbe    c0010d88 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dcd:	31 c0                	xor    eax,eax
c0010dcf:	c3                   	ret    

c0010dd0 <UnixFile::getFileDescriptor()>:
c0010dd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dd7:	c3                   	ret    

c0010dd8 <UnixFile::UnixFile(int)>:
c0010dd8:	53                   	push   ebx
c0010dd9:	83 ec 28             	sub    esp,0x28
c0010ddc:	ba 2c a2 02 c0       	mov    edx,0xc002a22c
c0010de1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010de5:	89 10                	mov    DWORD PTR [eax],edx
c0010de7:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010def:	0f 8f 8c 01 00 00    	jg     c0010f81 <UnixFile::UnixFile(int)+0x1a9>
c0010df5:	a1 a0 c8 02 c0       	mov    eax,ds:0xc002c8a0
c0010dfa:	8d 50 01             	lea    edx,[eax+0x1]
c0010dfd:	89 15 a0 c8 02 c0    	mov    DWORD PTR ds:0xc002c8a0,edx
c0010e03:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010e07:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e0a:	83 ec 08             	sub    esp,0x8
c0010e0d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010e11:	68 58 da 02 c0       	push   0xc002da58
c0010e16:	e8 5b 76 01 00       	call   c0028476 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010e1b:	83 c4 10             	add    esp,0x10
c0010e1e:	a0 54 da 02 c0       	mov    al,ds:0xc002da54
c0010e23:	83 f0 01             	xor    eax,0x1
c0010e26:	84 c0                	test   al,al
c0010e28:	0f 84 54 01 00 00    	je     c0010f82 <UnixFile::UnixFile(int)+0x1aa>
c0010e2e:	c6 05 54 da 02 c0 01 	mov    BYTE PTR ds:0xc002da54,0x1
c0010e35:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010e3d:	83 ec 0c             	sub    esp,0xc
c0010e40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e44:	e8 50 e7 ff ff       	call   c000f599 <malloc>
c0010e49:	83 c4 10             	add    esp,0x10
c0010e4c:	89 c3                	mov    ebx,eax
c0010e4e:	83 ec 08             	sub    esp,0x8
c0010e51:	68 03 ff ff 0f       	push   0xfffff03
c0010e56:	53                   	push   ebx
c0010e57:	e8 2c 01 00 00       	call   c0010f88 <ReservedFilename::ReservedFilename(int)>
c0010e5c:	83 c4 10             	add    esp,0x10
c0010e5f:	89 1d 4c da 02 c0    	mov    DWORD PTR ds:0xc002da4c,ebx
c0010e65:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010e6d:	83 ec 0c             	sub    esp,0xc
c0010e70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e74:	e8 20 e7 ff ff       	call   c000f599 <malloc>
c0010e79:	83 c4 10             	add    esp,0x10
c0010e7c:	89 c3                	mov    ebx,eax
c0010e7e:	83 ec 08             	sub    esp,0x8
c0010e81:	68 01 ff ff 0f       	push   0xfffff01
c0010e86:	53                   	push   ebx
c0010e87:	e8 fc 00 00 00       	call   c0010f88 <ReservedFilename::ReservedFilename(int)>
c0010e8c:	83 c4 10             	add    esp,0x10
c0010e8f:	89 1d 50 da 02 c0    	mov    DWORD PTR ds:0xc002da50,ebx
c0010e95:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010e9d:	83 ec 0c             	sub    esp,0xc
c0010ea0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ea4:	e8 f0 e6 ff ff       	call   c000f599 <malloc>
c0010ea9:	83 c4 10             	add    esp,0x10
c0010eac:	89 c3                	mov    ebx,eax
c0010eae:	83 ec 08             	sub    esp,0x8
c0010eb1:	68 00 ff ff 0f       	push   0xfffff00
c0010eb6:	53                   	push   ebx
c0010eb7:	e8 cc 00 00 00       	call   c0010f88 <ReservedFilename::ReservedFilename(int)>
c0010ebc:	83 c4 10             	add    esp,0x10
c0010ebf:	89 1d 44 da 02 c0    	mov    DWORD PTR ds:0xc002da44,ebx
c0010ec5:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010ecd:	83 ec 0c             	sub    esp,0xc
c0010ed0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010ed4:	e8 c0 e6 ff ff       	call   c000f599 <malloc>
c0010ed9:	83 c4 10             	add    esp,0x10
c0010edc:	89 c3                	mov    ebx,eax
c0010ede:	83 ec 08             	sub    esp,0x8
c0010ee1:	68 02 ff ff 0f       	push   0xfffff02
c0010ee6:	53                   	push   ebx
c0010ee7:	e8 9c 00 00 00       	call   c0010f88 <ReservedFilename::ReservedFilename(int)>
c0010eec:	83 c4 10             	add    esp,0x10
c0010eef:	89 1d 48 da 02 c0    	mov    DWORD PTR ds:0xc002da48,ebx
c0010ef5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010efd:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010f02:	7f 7e                	jg     c0010f82 <UnixFile::UnixFile(int)+0x1aa>
c0010f04:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010f0c:	83 ec 0c             	sub    esp,0xc
c0010f0f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f13:	e8 81 e6 ff ff       	call   c000f599 <malloc>
c0010f18:	83 c4 10             	add    esp,0x10
c0010f1b:	89 c3                	mov    ebx,eax
c0010f1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f21:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f26:	83 ec 08             	sub    esp,0x8
c0010f29:	50                   	push   eax
c0010f2a:	53                   	push   ebx
c0010f2b:	e8 58 00 00 00       	call   c0010f88 <ReservedFilename::ReservedFilename(int)>
c0010f30:	83 c4 10             	add    esp,0x10
c0010f33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f37:	89 1c 85 20 da 02 c0 	mov    DWORD PTR [eax*4-0x3ffd25e0],ebx
c0010f3e:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010f46:	83 ec 0c             	sub    esp,0xc
c0010f49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f4d:	e8 47 e6 ff ff       	call   c000f599 <malloc>
c0010f52:	83 c4 10             	add    esp,0x10
c0010f55:	89 c3                	mov    ebx,eax
c0010f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f5b:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010f60:	83 ec 08             	sub    esp,0x8
c0010f63:	50                   	push   eax
c0010f64:	53                   	push   ebx
c0010f65:	e8 1e 00 00 00       	call   c0010f88 <ReservedFilename::ReservedFilename(int)>
c0010f6a:	83 c4 10             	add    esp,0x10
c0010f6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f71:	89 1c 85 e0 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2620],ebx
c0010f78:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f7c:	e9 7c ff ff ff       	jmp    c0010efd <UnixFile::UnixFile(int)+0x125>
c0010f81:	90                   	nop
c0010f82:	83 c4 28             	add    esp,0x28
c0010f85:	5b                   	pop    ebx
c0010f86:	c3                   	ret    
c0010f87:	90                   	nop

c0010f88 <ReservedFilename::ReservedFilename(int)>:
c0010f88:	83 ec 0c             	sub    esp,0xc
c0010f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f8f:	83 ec 08             	sub    esp,0x8
c0010f92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f96:	50                   	push   eax
c0010f97:	e8 3c fe ff ff       	call   c0010dd8 <UnixFile::UnixFile(int)>
c0010f9c:	83 c4 10             	add    esp,0x10
c0010f9f:	ba 48 a2 02 c0       	mov    edx,0xc002a248
c0010fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fa8:	89 10                	mov    DWORD PTR [eax],edx
c0010faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010fb2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fb5:	90                   	nop
c0010fb6:	83 c4 0c             	add    esp,0xc
c0010fb9:	c3                   	ret    

c0010fba <UnixFile::~UnixFile()>:
c0010fba:	83 ec 1c             	sub    esp,0x1c
c0010fbd:	ba 2c a2 02 c0       	mov    edx,0xc002a22c
c0010fc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fc6:	89 10                	mov    DWORD PTR [eax],edx
c0010fc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fcf:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010fd4:	7f 73                	jg     c0011049 <UnixFile::~UnixFile()+0x8f>
c0010fd6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010fde:	83 ec 0c             	sub    esp,0xc
c0010fe1:	68 58 da 02 c0       	push   0xc002da58
c0010fe6:	e8 5f 75 01 00       	call   c002854a <LinkedList<UnixFile>::getFirstElement()>
c0010feb:	83 c4 10             	add    esp,0x10
c0010fee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ff2:	83 ec 0c             	sub    esp,0xc
c0010ff5:	68 58 da 02 c0       	push   0xc002da58
c0010ffa:	e8 53 75 01 00       	call   c0028552 <LinkedList<UnixFile>::removeFirst()>
c0010fff:	83 c4 10             	add    esp,0x10
c0011002:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011006:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001100a:	74 40                	je     c001104c <UnixFile::~UnixFile()+0x92>
c001100c:	83 ec 08             	sub    esp,0x8
c001100f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011013:	68 58 da 02 c0       	push   0xc002da58
c0011018:	e8 59 74 01 00       	call   c0028476 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001101d:	83 c4 10             	add    esp,0x10
c0011020:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011024:	8d 50 01             	lea    edx,[eax+0x1]
c0011027:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001102b:	3d 88 13 00 00       	cmp    eax,0x1388
c0011030:	0f 94 c0             	sete   al
c0011033:	84 c0                	test   al,al
c0011035:	74 a7                	je     c0010fde <UnixFile::~UnixFile()+0x24>
c0011037:	83 ec 0c             	sub    esp,0xc
c001103a:	68 04 a2 02 c0       	push   0xc002a204
c001103f:	e8 ef 8d 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c0011044:	83 c4 10             	add    esp,0x10
c0011047:	eb 95                	jmp    c0010fde <UnixFile::~UnixFile()+0x24>
c0011049:	90                   	nop
c001104a:	eb 01                	jmp    c001104d <UnixFile::~UnixFile()+0x93>
c001104c:	90                   	nop
c001104d:	90                   	nop
c001104e:	83 c4 1c             	add    esp,0x1c
c0011051:	c3                   	ret    

c0011052 <UnixFile::~UnixFile()>:
c0011052:	83 ec 0c             	sub    esp,0xc
c0011055:	83 ec 0c             	sub    esp,0xc
c0011058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001105c:	e8 59 ff ff ff       	call   c0010fba <UnixFile::~UnixFile()>
c0011061:	83 c4 10             	add    esp,0x10
c0011064:	83 ec 08             	sub    esp,0x8
c0011067:	6a 0c                	push   0xc
c0011069:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001106d:	e8 7d 15 00 00       	call   c00125ef <operator delete(void*, unsigned long)>
c0011072:	83 c4 10             	add    esp,0x10
c0011075:	83 c4 0c             	add    esp,0xc
c0011078:	c3                   	ret    
c0011079:	90                   	nop

c001107a <ReservedFilename::~ReservedFilename()>:
c001107a:	83 ec 0c             	sub    esp,0xc
c001107d:	ba 48 a2 02 c0       	mov    edx,0xc002a248
c0011082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011086:	89 10                	mov    DWORD PTR [eax],edx
c0011088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108c:	83 ec 0c             	sub    esp,0xc
c001108f:	50                   	push   eax
c0011090:	e8 25 ff ff ff       	call   c0010fba <UnixFile::~UnixFile()>
c0011095:	83 c4 10             	add    esp,0x10
c0011098:	90                   	nop
c0011099:	83 c4 0c             	add    esp,0xc
c001109c:	c3                   	ret    
c001109d:	90                   	nop

c001109e <ReservedFilename::~ReservedFilename()>:
c001109e:	83 ec 0c             	sub    esp,0xc
c00110a1:	83 ec 0c             	sub    esp,0xc
c00110a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110a8:	e8 cd ff ff ff       	call   c001107a <ReservedFilename::~ReservedFilename()>
c00110ad:	83 c4 10             	add    esp,0x10
c00110b0:	83 ec 08             	sub    esp,0x8
c00110b3:	6a 0c                	push   0xc
c00110b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110b9:	e8 31 15 00 00       	call   c00125ef <operator delete(void*, unsigned long)>
c00110be:	83 c4 10             	add    esp,0x10
c00110c1:	83 c4 0c             	add    esp,0xc
c00110c4:	c3                   	ret    

c00110c5 <getFromFileDescriptor(int)>:
c00110c5:	53                   	push   ebx
c00110c6:	83 ec 08             	sub    esp,0x8
c00110c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110cd:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00110d3:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00110d9:	7f 2c                	jg     c0011107 <getFromFileDescriptor(int)+0x42>
c00110db:	83 ec 0c             	sub    esp,0xc
c00110de:	68 58 da 02 c0       	push   0xc002da58
c00110e3:	e8 62 74 01 00       	call   c002854a <LinkedList<UnixFile>::getFirstElement()>
c00110e8:	83 c4 10             	add    esp,0x10
c00110eb:	85 c0                	test   eax,eax
c00110ed:	75 04                	jne    c00110f3 <getFromFileDescriptor(int)+0x2e>
c00110ef:	31 c0                	xor    eax,eax
c00110f1:	eb 6e                	jmp    c0011161 <getFromFileDescriptor(int)+0x9c>
c00110f3:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00110f6:	74 69                	je     c0011161 <getFromFileDescriptor(int)+0x9c>
c00110f8:	52                   	push   edx
c00110f9:	52                   	push   edx
c00110fa:	50                   	push   eax
c00110fb:	68 58 da 02 c0       	push   0xc002da58
c0011100:	e8 ef 74 01 00       	call   c00285f4 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011105:	eb e1                	jmp    c00110e8 <getFromFileDescriptor(int)+0x23>
c0011107:	a1 4c da 02 c0       	mov    eax,ds:0xc002da4c
c001110c:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011112:	74 4d                	je     c0011161 <getFromFileDescriptor(int)+0x9c>
c0011114:	a1 50 da 02 c0       	mov    eax,ds:0xc002da50
c0011119:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001111f:	74 40                	je     c0011161 <getFromFileDescriptor(int)+0x9c>
c0011121:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0011126:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001112c:	74 33                	je     c0011161 <getFromFileDescriptor(int)+0x9c>
c001112e:	a1 44 da 02 c0       	mov    eax,ds:0xc002da44
c0011133:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011139:	74 26                	je     c0011161 <getFromFileDescriptor(int)+0x9c>
c001113b:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011141:	83 f8 08             	cmp    eax,0x8
c0011144:	77 09                	ja     c001114f <getFromFileDescriptor(int)+0x8a>
c0011146:	8b 04 85 20 da 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd25e0]
c001114d:	eb 12                	jmp    c0011161 <getFromFileDescriptor(int)+0x9c>
c001114f:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011155:	83 fb 08             	cmp    ebx,0x8
c0011158:	77 95                	ja     c00110ef <getFromFileDescriptor(int)+0x2a>
c001115a:	8b 04 9d e0 d9 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2620]
c0011161:	83 c4 08             	add    esp,0x8
c0011164:	5b                   	pop    ebx
c0011165:	c3                   	ret    

c0011166 <__static_initialization_and_destruction_0(int, int)>:
c0011166:	83 ec 0c             	sub    esp,0xc
c0011169:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001116e:	75 34                	jne    c00111a4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011170:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011178:	75 2a                	jne    c00111a4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001117a:	83 ec 0c             	sub    esp,0xc
c001117d:	68 58 da 02 c0       	push   0xc002da58
c0011182:	e8 ad 72 01 00       	call   c0028434 <LinkedList<UnixFile>::LinkedList()>
c0011187:	83 c4 10             	add    esp,0x10
c001118a:	83 ec 04             	sub    esp,0x4
c001118d:	68 d8 c6 02 c0       	push   0xc002c6d8
c0011192:	68 58 da 02 c0       	push   0xc002da58
c0011197:	68 32 84 02 c0       	push   0xc0028432
c001119c:	e8 c8 13 00 00       	call   c0012569 <__cxa_atexit>
c00111a1:	83 c4 10             	add    esp,0x10
c00111a4:	90                   	nop
c00111a5:	83 c4 0c             	add    esp,0xc
c00111a8:	c3                   	ret    

c00111a9 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00111a9:	83 ec 0c             	sub    esp,0xc
c00111ac:	83 ec 08             	sub    esp,0x8
c00111af:	68 ff ff 00 00       	push   0xffff
c00111b4:	6a 01                	push   0x1
c00111b6:	e8 ab ff ff ff       	call   c0011166 <__static_initialization_and_destruction_0(int, int)>
c00111bb:	83 c4 10             	add    esp,0x10
c00111be:	83 c4 0c             	add    esp,0xc
c00111c1:	c3                   	ret    

c00111c2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00111c2:	53                   	push   ebx
c00111c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111c7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00111cb:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00111d1:	89 c8                	mov    eax,ecx
c00111d3:	d1 e8                	shr    eax,1
c00111d5:	03 05 a8 c8 02 c0    	add    eax,DWORD PTR ds:0xc002c8a8
c00111db:	83 e1 01             	and    ecx,0x1
c00111de:	8a 10                	mov    dl,BYTE PTR [eax]
c00111e0:	75 09                	jne    c00111eb <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00111e2:	83 e2 f0             	and    edx,0xfffffff0
c00111e5:	09 da                	or     edx,ebx
c00111e7:	88 10                	mov    BYTE PTR [eax],dl
c00111e9:	5b                   	pop    ebx
c00111ea:	c3                   	ret    
c00111eb:	c1 e3 04             	shl    ebx,0x4
c00111ee:	83 e2 0f             	and    edx,0xf
c00111f1:	09 da                	or     edx,ebx
c00111f3:	88 10                	mov    BYTE PTR [eax],dl
c00111f5:	5b                   	pop    ebx
c00111f6:	c3                   	ret    

c00111f7 <Virt::getPageState(unsigned long)>:
c00111f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111fb:	8b 0d a8 c8 02 c0    	mov    ecx,DWORD PTR ds:0xc002c8a8
c0011201:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011207:	89 d0                	mov    eax,edx
c0011209:	d1 e8                	shr    eax,1
c001120b:	83 e2 01             	and    edx,0x1
c001120e:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011211:	75 04                	jne    c0011217 <Virt::getPageState(unsigned long)+0x20>
c0011213:	83 e0 0f             	and    eax,0xf
c0011216:	c3                   	ret    
c0011217:	c0 e8 04             	shr    al,0x4
c001121a:	c3                   	ret    

c001121b <Virt::allocateKernelVirtualPages(int)>:
c001121b:	55                   	push   ebp
c001121c:	31 ed                	xor    ebp,ebp
c001121e:	57                   	push   edi
c001121f:	56                   	push   esi
c0011220:	53                   	push   ebx
c0011221:	31 db                	xor    ebx,ebx
c0011223:	83 ec 1c             	sub    esp,0x1c
c0011226:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001122a:	8b 3d a4 c8 02 c0    	mov    edi,DWORD PTR ds:0xc002c8a4
c0011230:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011235:	57                   	push   edi
c0011236:	e8 bc ff ff ff       	call   c00111f7 <Virt::getPageState(unsigned long)>
c001123b:	5a                   	pop    edx
c001123c:	84 c0                	test   al,al
c001123e:	75 3a                	jne    c001127a <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011240:	85 db                	test   ebx,ebx
c0011242:	75 02                	jne    c0011246 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011244:	89 fd                	mov    ebp,edi
c0011246:	43                   	inc    ebx
c0011247:	39 f3                	cmp    ebx,esi
c0011249:	74 5a                	je     c00112a5 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001124b:	47                   	inc    edi
c001124c:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011252:	76 31                	jbe    c0011285 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011254:	c7 05 a4 c8 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c8a4,0xc8000
c001125e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011263:	75 28                	jne    c001128d <Virt::allocateKernelVirtualPages(int)+0x72>
c0011265:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001126a:	bf 00 80 0c 00       	mov    edi,0xc8000
c001126f:	57                   	push   edi
c0011270:	e8 82 ff ff ff       	call   c00111f7 <Virt::getPageState(unsigned long)>
c0011275:	5a                   	pop    edx
c0011276:	84 c0                	test   al,al
c0011278:	74 c6                	je     c0011240 <Virt::allocateKernelVirtualPages(int)+0x25>
c001127a:	31 db                	xor    ebx,ebx
c001127c:	47                   	inc    edi
c001127d:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011283:	77 cf                	ja     c0011254 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011285:	89 3d a4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8a4,edi
c001128b:	eb a8                	jmp    c0011235 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001128d:	83 ec 0c             	sub    esp,0xc
c0011290:	68 5c a2 02 c0       	push   0xc002a25c
c0011295:	e8 99 8b 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c001129a:	8b 3d a4 c8 02 c0    	mov    edi,DWORD PTR ds:0xc002c8a4
c00112a0:	83 c4 10             	add    esp,0x10
c00112a3:	eb 90                	jmp    c0011235 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112a5:	89 2d a4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8a4,ebp
c00112ab:	4b                   	dec    ebx
c00112ac:	74 5f                	je     c001130d <Virt::allocateKernelVirtualPages(int)+0xf2>
c00112ae:	85 f6                	test   esi,esi
c00112b0:	74 3d                	je     c00112ef <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112b2:	89 e8                	mov    eax,ebp
c00112b4:	31 db                	xor    ebx,ebx
c00112b6:	8d 7e ff             	lea    edi,[esi-0x1]
c00112b9:	eb 14                	jmp    c00112cf <Virt::allocateKernelVirtualPages(int)+0xb4>
c00112bb:	6a 01                	push   0x1
c00112bd:	43                   	inc    ebx
c00112be:	50                   	push   eax
c00112bf:	e8 fe fe ff ff       	call   c00111c2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112c4:	58                   	pop    eax
c00112c5:	39 f3                	cmp    ebx,esi
c00112c7:	5a                   	pop    edx
c00112c8:	74 25                	je     c00112ef <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112ca:	a1 a4 c8 02 c0       	mov    eax,ds:0xc002c8a4
c00112cf:	8d 50 01             	lea    edx,[eax+0x1]
c00112d2:	85 db                	test   ebx,ebx
c00112d4:	89 15 a4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8a4,edx
c00112da:	74 20                	je     c00112fc <Virt::allocateKernelVirtualPages(int)+0xe1>
c00112dc:	39 df                	cmp    edi,ebx
c00112de:	75 db                	jne    c00112bb <Virt::allocateKernelVirtualPages(int)+0xa0>
c00112e0:	6a 03                	push   0x3
c00112e2:	43                   	inc    ebx
c00112e3:	50                   	push   eax
c00112e4:	e8 d9 fe ff ff       	call   c00111c2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112e9:	59                   	pop    ecx
c00112ea:	39 f3                	cmp    ebx,esi
c00112ec:	58                   	pop    eax
c00112ed:	75 db                	jne    c00112ca <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112ef:	83 c4 1c             	add    esp,0x1c
c00112f2:	89 e8                	mov    eax,ebp
c00112f4:	5b                   	pop    ebx
c00112f5:	c1 e0 0c             	shl    eax,0xc
c00112f8:	5e                   	pop    esi
c00112f9:	5f                   	pop    edi
c00112fa:	5d                   	pop    ebp
c00112fb:	c3                   	ret    
c00112fc:	6a 02                	push   0x2
c00112fe:	bb 01 00 00 00       	mov    ebx,0x1
c0011303:	50                   	push   eax
c0011304:	e8 b9 fe ff ff       	call   c00111c2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011309:	58                   	pop    eax
c001130a:	5a                   	pop    edx
c001130b:	eb bd                	jmp    c00112ca <Virt::allocateKernelVirtualPages(int)+0xaf>
c001130d:	6a 04                	push   0x4
c001130f:	8d 45 01             	lea    eax,[ebp+0x1]
c0011312:	55                   	push   ebp
c0011313:	a3 a4 c8 02 c0       	mov    ds:0xc002c8a4,eax
c0011318:	e8 a5 fe ff ff       	call   c00111c2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001131d:	59                   	pop    ecx
c001131e:	89 e8                	mov    eax,ebp
c0011320:	5b                   	pop    ebx
c0011321:	c1 e0 0c             	shl    eax,0xc
c0011324:	83 c4 1c             	add    esp,0x1c
c0011327:	5b                   	pop    ebx
c0011328:	5e                   	pop    esi
c0011329:	5f                   	pop    edi
c001132a:	5d                   	pop    ebp
c001132b:	c3                   	ret    

c001132c <Virt::freeSwapfilePage(unsigned long)>:
c001132c:	53                   	push   ebx
c001132d:	8b 15 6c da 02 c0    	mov    edx,DWORD PTR ds:0xc002da6c
c0011333:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011337:	b8 01 00 00 00       	mov    eax,0x1
c001133c:	89 cb                	mov    ebx,ecx
c001133e:	d3 e0                	shl    eax,cl
c0011340:	c1 eb 05             	shr    ebx,0x5
c0011343:	f7 d0                	not    eax
c0011345:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011348:	5b                   	pop    ebx
c0011349:	c3                   	ret    

c001134a <Virt::swapIDToSector(unsigned long)>:
c001134a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001134e:	0f af 05 ac c8 02 c0 	imul   eax,DWORD PTR ds:0xc002c8ac
c0011355:	03 05 b4 c8 02 c0    	add    eax,DWORD PTR ds:0xc002c8b4
c001135b:	c3                   	ret    

c001135c <Virt::allocateSwapfilePage()>:
c001135c:	55                   	push   ebp
c001135d:	31 d2                	xor    edx,edx
c001135f:	57                   	push   edi
c0011360:	56                   	push   esi
c0011361:	53                   	push   ebx
c0011362:	83 ec 0c             	sub    esp,0xc
c0011365:	8b 0d ac c8 02 c0    	mov    ecx,DWORD PTR ds:0xc002c8ac
c001136b:	a1 b0 c8 02 c0       	mov    eax,ds:0xc002c8b0
c0011370:	f7 f1                	div    ecx
c0011372:	39 0d b0 c8 02 c0    	cmp    DWORD PTR ds:0xc002c8b0,ecx
c0011378:	72 2d                	jb     c00113a7 <Virt::allocateSwapfilePage()+0x4b>
c001137a:	8b 35 6c da 02 c0    	mov    esi,DWORD PTR ds:0xc002da6c
c0011380:	8b 16                	mov    edx,DWORD PTR [esi]
c0011382:	f6 c2 01             	test   dl,0x1
c0011385:	74 3c                	je     c00113c3 <Virt::allocateSwapfilePage()+0x67>
c0011387:	31 c9                	xor    ecx,ecx
c0011389:	bf 01 00 00 00       	mov    edi,0x1
c001138e:	eb 12                	jmp    c00113a2 <Virt::allocateSwapfilePage()+0x46>
c0011390:	89 fd                	mov    ebp,edi
c0011392:	89 ca                	mov    edx,ecx
c0011394:	d3 e5                	shl    ebp,cl
c0011396:	c1 ea 05             	shr    edx,0x5
c0011399:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001139c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001139e:	85 ea                	test   edx,ebp
c00113a0:	74 2a                	je     c00113cc <Virt::allocateSwapfilePage()+0x70>
c00113a2:	41                   	inc    ecx
c00113a3:	39 c8                	cmp    eax,ecx
c00113a5:	77 e9                	ja     c0011390 <Virt::allocateSwapfilePage()+0x34>
c00113a7:	83 ec 0c             	sub    esp,0xc
c00113aa:	68 14 a4 02 c0       	push   0xc002a414
c00113af:	e8 7f 8a 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c00113b4:	83 c4 10             	add    esp,0x10
c00113b7:	31 c9                	xor    ecx,ecx
c00113b9:	83 c4 0c             	add    esp,0xc
c00113bc:	89 c8                	mov    eax,ecx
c00113be:	5b                   	pop    ebx
c00113bf:	5e                   	pop    esi
c00113c0:	5f                   	pop    edi
c00113c1:	5d                   	pop    ebp
c00113c2:	c3                   	ret    
c00113c3:	89 f3                	mov    ebx,esi
c00113c5:	bd 01 00 00 00       	mov    ebp,0x1
c00113ca:	31 c9                	xor    ecx,ecx
c00113cc:	09 ea                	or     edx,ebp
c00113ce:	89 c8                	mov    eax,ecx
c00113d0:	89 13                	mov    DWORD PTR [ebx],edx
c00113d2:	83 c4 0c             	add    esp,0xc
c00113d5:	5b                   	pop    ebx
c00113d6:	5e                   	pop    esi
c00113d7:	5f                   	pop    edi
c00113d8:	5d                   	pop    ebp
c00113d9:	c3                   	ret    

c00113da <Virt::virtualMemorySetup()>:
c00113da:	53                   	push   ebx
c00113db:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113e0:	6a 0f                	push   0xf
c00113e2:	53                   	push   ebx
c00113e3:	43                   	inc    ebx
c00113e4:	e8 d9 fd ff ff       	call   c00111c2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113e9:	58                   	pop    eax
c00113ea:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113f0:	5a                   	pop    edx
c00113f1:	75 ed                	jne    c00113e0 <Virt::virtualMemorySetup()+0x6>
c00113f3:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113f8:	6a 00                	push   0x0
c00113fa:	53                   	push   ebx
c00113fb:	43                   	inc    ebx
c00113fc:	e8 c1 fd ff ff       	call   c00111c2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011401:	59                   	pop    ecx
c0011402:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011408:	58                   	pop    eax
c0011409:	75 ed                	jne    c00113f8 <Virt::virtualMemorySetup()+0x1e>
c001140b:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011410:	6a 0f                	push   0xf
c0011412:	53                   	push   ebx
c0011413:	43                   	inc    ebx
c0011414:	e8 a9 fd ff ff       	call   c00111c2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011419:	58                   	pop    eax
c001141a:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011420:	5a                   	pop    edx
c0011421:	75 ed                	jne    c0011410 <Virt::virtualMemorySetup()+0x36>
c0011423:	5b                   	pop    ebx
c0011424:	c3                   	ret    

c0011425 <Virt::setupPageSwapping(int)>:
c0011425:	57                   	push   edi
c0011426:	56                   	push   esi
c0011427:	53                   	push   ebx
c0011428:	83 ec 1c             	sub    esp,0x1c
c001142b:	68 14 01 00 00       	push   0x114
c0011430:	e8 64 e1 ff ff       	call   c000f599 <malloc>
c0011435:	83 c4 0c             	add    esp,0xc
c0011438:	89 c6                	mov    esi,eax
c001143a:	ff 35 50 0e 03 c0    	push   DWORD PTR ds:0xc0030e50
c0011440:	68 2b a4 02 c0       	push   0xc002a42b
c0011445:	50                   	push   eax
c0011446:	e8 db 17 00 00       	call   c0012c26 <File::File(char const*, Process*)>
c001144b:	89 34 24             	mov    DWORD PTR [esp],esi
c001144e:	e8 af 19 00 00       	call   c0012e02 <File::unlink()>
c0011453:	58                   	pop    eax
c0011454:	5a                   	pop    edx
c0011455:	6a 12                	push   0x12
c0011457:	56                   	push   esi
c0011458:	e8 2d 18 00 00       	call   c0012c8a <File::open(FileOpenMode)>
c001145d:	83 c4 10             	add    esp,0x10
c0011460:	85 c0                	test   eax,eax
c0011462:	0f 85 2f 01 00 00    	jne    c0011597 <Virt::setupPageSwapping(int)+0x172>
c0011468:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001146c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011474:	c1 e3 08             	shl    ebx,0x8
c0011477:	83 ec 0c             	sub    esp,0xc
c001147a:	68 00 00 01 00       	push   0x10000
c001147f:	e8 15 e1 ff ff       	call   c000f599 <malloc>
c0011484:	83 c4 0c             	add    esp,0xc
c0011487:	89 c7                	mov    edi,eax
c0011489:	68 00 00 01 00       	push   0x10000
c001148e:	68 ee 00 00 00       	push   0xee
c0011493:	50                   	push   eax
c0011494:	e8 b7 f2 fe ff       	call   c0000750 <memset>
c0011499:	83 c4 10             	add    esp,0x10
c001149c:	85 db                	test   ebx,ebx
c001149e:	79 03                	jns    c00114a3 <Virt::setupPageSwapping(int)+0x7e>
c00114a0:	83 c3 0f             	add    ebx,0xf
c00114a3:	c1 fb 04             	sar    ebx,0x4
c00114a6:	4b                   	dec    ebx
c00114a7:	83 fb ff             	cmp    ebx,0xffffffff
c00114aa:	74 41                	je     c00114ed <Virt::setupPageSwapping(int)+0xc8>
c00114ac:	83 ec 0c             	sub    esp,0xc
c00114af:	8b 06                	mov    eax,DWORD PTR [esi]
c00114b1:	8d 54 24 18          	lea    edx,[esp+0x18]
c00114b5:	52                   	push   edx
c00114b6:	57                   	push   edi
c00114b7:	6a 00                	push   0x0
c00114b9:	68 00 00 01 00       	push   0x10000
c00114be:	56                   	push   esi
c00114bf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00114c2:	83 c4 20             	add    esp,0x20
c00114c5:	85 c0                	test   eax,eax
c00114c7:	0f 85 b5 00 00 00    	jne    c0011582 <Virt::setupPageSwapping(int)+0x15d>
c00114cd:	81 7c 24 0c 00 00 01 00 	cmp    DWORD PTR [esp+0xc],0x10000
c00114d5:	74 cf                	je     c00114a6 <Virt::setupPageSwapping(int)+0x81>
c00114d7:	83 ec 0c             	sub    esp,0xc
c00114da:	4b                   	dec    ebx
c00114db:	68 5d a4 02 c0       	push   0xc002a45d
c00114e0:	e8 4e 89 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c00114e5:	83 c4 10             	add    esp,0x10
c00114e8:	83 fb ff             	cmp    ebx,0xffffffff
c00114eb:	75 bf                	jne    c00114ac <Virt::setupPageSwapping(int)+0x87>
c00114ed:	83 ec 0c             	sub    esp,0xc
c00114f0:	56                   	push   esi
c00114f1:	e8 f2 17 00 00       	call   c0012ce8 <File::close()>
c00114f6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114f9:	e8 bb e0 ff ff       	call   c000f5b9 <rfree>
c00114fe:	83 c4 10             	add    esp,0x10
c0011501:	85 f6                	test   esi,esi
c0011503:	74 0c                	je     c0011511 <Virt::setupPageSwapping(int)+0xec>
c0011505:	83 ec 0c             	sub    esp,0xc
c0011508:	8b 06                	mov    eax,DWORD PTR [esi]
c001150a:	56                   	push   esi
c001150b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001150e:	83 c4 10             	add    esp,0x10
c0011511:	83 ec 08             	sub    esp,0x8
c0011514:	a1 08 df 02 c0       	mov    eax,ds:0xc002df08
c0011519:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001151f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011521:	68 2b a4 02 c0       	push   0xc002a42b
c0011526:	50                   	push   eax
c0011527:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c001152a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001152e:	c6 05 b8 c8 02 c0 43 	mov    BYTE PTR ds:0xc002c8b8,0x43
c0011535:	c1 e2 0b             	shl    edx,0xb
c0011538:	a3 b4 c8 02 c0       	mov    ds:0xc002c8b4,eax
c001153d:	89 15 b0 c8 02 c0    	mov    DWORD PTR ds:0xc002c8b0,edx
c0011543:	c7 05 ac c8 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c8ac,0x8
c001154d:	c1 ea 08             	shr    edx,0x8
c0011550:	89 14 24             	mov    DWORD PTR [esp],edx
c0011553:	e8 41 e0 ff ff       	call   c000f599 <malloc>
c0011558:	83 c4 0c             	add    esp,0xc
c001155b:	89 c1                	mov    ecx,eax
c001155d:	a3 6c da 02 c0       	mov    ds:0xc002da6c,eax
c0011562:	31 d2                	xor    edx,edx
c0011564:	a1 b0 c8 02 c0       	mov    eax,ds:0xc002c8b0
c0011569:	f7 35 ac c8 02 c0    	div    DWORD PTR ds:0xc002c8ac
c001156f:	c1 e8 05             	shr    eax,0x5
c0011572:	50                   	push   eax
c0011573:	6a 00                	push   0x0
c0011575:	51                   	push   ecx
c0011576:	e8 d5 f1 fe ff       	call   c0000750 <memset>
c001157b:	83 c4 20             	add    esp,0x20
c001157e:	5b                   	pop    ebx
c001157f:	5e                   	pop    esi
c0011580:	5f                   	pop    edi
c0011581:	c3                   	ret    
c0011582:	83 ec 0c             	sub    esp,0xc
c0011585:	68 5d a4 02 c0       	push   0xc002a45d
c001158a:	e8 a4 88 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c001158f:	83 c4 10             	add    esp,0x10
c0011592:	e9 36 ff ff ff       	jmp    c00114cd <Virt::setupPageSwapping(int)+0xa8>
c0011597:	83 ec 0c             	sub    esp,0xc
c001159a:	68 42 a4 02 c0       	push   0xc002a442
c001159f:	e8 8f 88 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c00115a4:	83 c4 10             	add    esp,0x10
c00115a7:	e9 bc fe ff ff       	jmp    c0011468 <Virt::setupPageSwapping(int)+0x43>

c00115ac <VAS::VAS()>:
c00115ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115bb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00115c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115c6:	a3 70 da 02 c0       	mov    ds:0xc002da70,eax
c00115cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115cf:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00115d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115d7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00115da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115de:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00115e5:	90                   	nop
c00115e6:	c3                   	ret    
c00115e7:	90                   	nop

c00115e8 <VAS::VAS(VAS*)>:
c00115e8:	83 ec 0c             	sub    esp,0xc
c00115eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115ef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115fa:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011601:	83 ec 0c             	sub    esp,0xc
c0011604:	68 7c a2 02 c0       	push   0xc002a27c
c0011609:	e8 25 88 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c001160e:	83 c4 10             	add    esp,0x10
c0011611:	90                   	nop
c0011612:	83 c4 0c             	add    esp,0xc
c0011615:	c3                   	ret    

c0011616 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001161a:	89 c2                	mov    edx,eax
c001161c:	c1 e8 0a             	shr    eax,0xa
c001161f:	c1 ea 16             	shr    edx,0x16
c0011622:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011627:	19 c9                	sbb    ecx,ecx
c0011629:	c1 e2 0c             	shl    edx,0xc
c001162c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011632:	25 fc 0f 00 00       	and    eax,0xffc
c0011637:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c001163e:	01 d0                	add    eax,edx
c0011640:	c3                   	ret    
c0011641:	90                   	nop

c0011642 <VAS::getPageTableEntry(unsigned long)>:
c0011642:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011646:	89 ca                	mov    edx,ecx
c0011648:	c1 e9 0a             	shr    ecx,0xa
c001164b:	c1 ea 16             	shr    edx,0x16
c001164e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011654:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001165a:	c1 e0 0c             	shl    eax,0xc
c001165d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011660:	c3                   	ret    

c0011661 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011661:	57                   	push   edi
c0011662:	56                   	push   esi
c0011663:	be 01 00 00 00       	mov    esi,0x1
c0011668:	53                   	push   ebx
c0011669:	83 ec 10             	sub    esp,0x10
c001166c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011670:	c1 eb 0c             	shr    ebx,0xc
c0011673:	eb 3f                	jmp    c00116b4 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011675:	83 ec 08             	sub    esp,0x8
c0011678:	57                   	push   edi
c0011679:	ff 35 70 da 02 c0    	push   DWORD PTR ds:0xc002da70
c001167f:	e8 be ff ff ff       	call   c0011642 <VAS::getPageTableEntry(unsigned long)>
c0011684:	83 c4 10             	add    esp,0x10
c0011687:	8b 00                	mov    eax,DWORD PTR [eax]
c0011689:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001168d:	f6 c4 04             	test   ah,0x4
c0011690:	75 5f                	jne    c00116f1 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011692:	80 fa 04             	cmp    dl,0x4
c0011695:	74 78                	je     c001170f <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011697:	80 fa 02             	cmp    dl,0x2
c001169a:	0f 84 88 00 00 00    	je     c0011728 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00116a0:	80 fa 03             	cmp    dl,0x3
c00116a3:	0f 84 ad 00 00 00    	je     c0011756 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00116a9:	fe ca                	dec    dl
c00116ab:	0f 84 92 00 00 00    	je     c0011743 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116b1:	43                   	inc    ebx
c00116b2:	31 f6                	xor    esi,esi
c00116b4:	53                   	push   ebx
c00116b5:	89 df                	mov    edi,ebx
c00116b7:	e8 3b fb ff ff       	call   c00111f7 <Virt::getPageState(unsigned long)>
c00116bc:	c1 e7 0c             	shl    edi,0xc
c00116bf:	59                   	pop    ecx
c00116c0:	84 c0                	test   al,al
c00116c2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00116c6:	75 ad                	jne    c0011675 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00116c8:	83 ec 0c             	sub    esp,0xc
c00116cb:	68 63 a4 02 c0       	push   0xc002a463
c00116d0:	e8 5e 87 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c00116d5:	58                   	pop    eax
c00116d6:	5a                   	pop    edx
c00116d7:	57                   	push   edi
c00116d8:	ff 35 70 da 02 c0    	push   DWORD PTR ds:0xc002da70
c00116de:	e8 5f ff ff ff       	call   c0011642 <VAS::getPageTableEntry(unsigned long)>
c00116e3:	83 c4 10             	add    esp,0x10
c00116e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00116e8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116ec:	f6 c4 04             	test   ah,0x4
c00116ef:	74 c0                	je     c00116b1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116f1:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00116f5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00116fa:	83 ec 0c             	sub    esp,0xc
c00116fd:	50                   	push   eax
c00116fe:	e8 fd e1 ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c0011703:	83 c4 10             	add    esp,0x10
c0011706:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001170a:	80 fa 04             	cmp    dl,0x4
c001170d:	75 88                	jne    c0011697 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c001170f:	89 f0                	mov    eax,esi
c0011711:	84 c0                	test   al,al
c0011713:	75 47                	jne    c001175c <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011715:	c7 44 24 20 a0 a2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a2a0
c001171d:	83 c4 10             	add    esp,0x10
c0011720:	5b                   	pop    ebx
c0011721:	5e                   	pop    esi
c0011722:	5f                   	pop    edi
c0011723:	e9 0b 87 00 00       	jmp    c0019e33 <Krnl::panic(char const*)>
c0011728:	89 f0                	mov    eax,esi
c001172a:	84 c0                	test   al,al
c001172c:	75 15                	jne    c0011743 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001172e:	83 ec 0c             	sub    esp,0xc
c0011731:	68 7f a4 02 c0       	push   0xc002a47f
c0011736:	e8 f8 86 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c001173b:	83 c4 10             	add    esp,0x10
c001173e:	e9 6e ff ff ff       	jmp    c00116b1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011743:	83 ec 08             	sub    esp,0x8
c0011746:	6a 00                	push   0x0
c0011748:	53                   	push   ebx
c0011749:	e8 74 fa ff ff       	call   c00111c2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001174e:	83 c4 10             	add    esp,0x10
c0011751:	e9 5b ff ff ff       	jmp    c00116b1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011756:	89 f0                	mov    eax,esi
c0011758:	84 c0                	test   al,al
c001175a:	75 15                	jne    c0011771 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c001175c:	83 ec 08             	sub    esp,0x8
c001175f:	6a 00                	push   0x0
c0011761:	53                   	push   ebx
c0011762:	e8 5b fa ff ff       	call   c00111c2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011767:	83 c4 10             	add    esp,0x10
c001176a:	83 c4 10             	add    esp,0x10
c001176d:	5b                   	pop    ebx
c001176e:	5e                   	pop    esi
c001176f:	5f                   	pop    edi
c0011770:	c3                   	ret    
c0011771:	c7 44 24 20 9b a4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a49b
c0011779:	83 c4 10             	add    esp,0x10
c001177c:	5b                   	pop    ebx
c001177d:	5e                   	pop    esi
c001177e:	5f                   	pop    edi
c001177f:	e9 af 86 00 00       	jmp    c0019e33 <Krnl::panic(char const*)>

c0011784 <VAS::freeAllocatedPages(unsigned long)>:
c0011784:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011788:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001178c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011790:	74 09                	je     c001179b <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011792:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011796:	e9 c6 fe ff ff       	jmp    c0011661 <Virt::freeKernelVirtualPages(unsigned long)>
c001179b:	c7 44 24 04 c4 a2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a2c4
c00117a3:	e9 1f 0f 00 00       	jmp    c00126c7 <Dbg::kprintf(char const*, ...)>

c00117a8 <VAS::virtualToPhysical(unsigned long)>:
c00117a8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00117ac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00117b0:	e8 8d fe ff ff       	call   c0011642 <VAS::getPageTableEntry(unsigned long)>
c00117b5:	5a                   	pop    edx
c00117b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00117b8:	59                   	pop    ecx
c00117b9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00117be:	c3                   	ret    
c00117bf:	90                   	nop

c00117c0 <VAS::reflagRange(unsigned long, int, int, int)>:
c00117c0:	55                   	push   ebp
c00117c1:	57                   	push   edi
c00117c2:	56                   	push   esi
c00117c3:	53                   	push   ebx
c00117c4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00117c8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00117cc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00117d0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00117d4:	85 db                	test   ebx,ebx
c00117d6:	7e 22                	jle    c00117fa <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00117d8:	c1 e3 0c             	shl    ebx,0xc
c00117db:	01 f3                	add    ebx,esi
c00117dd:	56                   	push   esi
c00117de:	81 c6 00 10 00 00    	add    esi,0x1000
c00117e4:	55                   	push   ebp
c00117e5:	e8 58 fe ff ff       	call   c0011642 <VAS::getPageTableEntry(unsigned long)>
c00117ea:	5a                   	pop    edx
c00117eb:	59                   	pop    ecx
c00117ec:	8b 08                	mov    ecx,DWORD PTR [eax]
c00117ee:	21 f9                	and    ecx,edi
c00117f0:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00117f4:	39 f3                	cmp    ebx,esi
c00117f6:	89 08                	mov    DWORD PTR [eax],ecx
c00117f8:	75 e3                	jne    c00117dd <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00117fa:	5b                   	pop    ebx
c00117fb:	5e                   	pop    esi
c00117fc:	5f                   	pop    edi
c00117fd:	5d                   	pop    ebp
c00117fe:	c3                   	ret    
c00117ff:	90                   	nop

c0011800 <VAS::setToWriteCombining(unsigned long, int)>:
c0011800:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0011805:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001180b:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011812:	75 01                	jne    c0011815 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011814:	c3                   	ret    
c0011815:	68 80 00 00 00       	push   0x80
c001181a:	6a ff                	push   0xffffffff
c001181c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011820:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011824:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011828:	e8 93 ff ff ff       	call   c00117c0 <VAS::reflagRange(unsigned long, int, int, int)>
c001182d:	83 c4 14             	add    esp,0x14
c0011830:	c3                   	ret    
c0011831:	90                   	nop

c0011832 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011832:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011837:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001183b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001183e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011842:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011845:	19 c0                	sbb    eax,eax
c0011847:	83 ca 03             	or     edx,0x3
c001184a:	83 e0 fc             	and    eax,0xfffffffc
c001184d:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011854:	0f 20 d8             	mov    eax,cr3
c0011857:	0f 22 d8             	mov    cr3,eax
c001185a:	c3                   	ret    
c001185b:	90                   	nop

c001185c <VAS::~VAS()>:
c001185c:	83 ec 2c             	sub    esp,0x2c
c001185f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011867:	fa                   	cli    
c0011868:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001186d:	40                   	inc    eax
c001186e:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c0011873:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011878:	8b 00                	mov    eax,DWORD PTR [eax]
c001187a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001187d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011883:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011887:	6a 01                	push   0x1
c0011889:	50                   	push   eax
c001188a:	e8 a3 ff ff ff       	call   c0011832 <VAS::mapOtherVASIn(bool, VAS*)>
c001188f:	83 c4 0c             	add    esp,0xc
c0011892:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001189a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00118a2:	0f 8f d4 00 00 00    	jg     c001197c <VAS::~VAS()+0x120>
c00118a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118af:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00118b3:	c1 e2 02             	shl    edx,0x2
c00118b6:	01 d0                	add    eax,edx
c00118b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00118ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00118be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118c2:	83 e0 01             	and    eax,0x1
c00118c5:	0f 84 a8 00 00 00    	je     c0011973 <VAS::~VAS()+0x117>
c00118cb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00118d3:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00118db:	7f 72                	jg     c001194f <VAS::~VAS()+0xf3>
c00118dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00118e1:	c1 e0 0a             	shl    eax,0xa
c00118e4:	89 c2                	mov    edx,eax
c00118e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00118ea:	01 d0                	add    eax,edx
c00118ec:	c1 e0 0c             	shl    eax,0xc
c00118ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00118f3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00118f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00118fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118fd:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011903:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011907:	6a 01                	push   0x1
c0011909:	50                   	push   eax
c001190a:	e8 07 fd ff ff       	call   c0011616 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001190f:	83 c4 0c             	add    esp,0xc
c0011912:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011916:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001191a:	8b 00                	mov    eax,DWORD PTR [eax]
c001191c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011924:	25 01 04 00 00       	and    eax,0x401
c0011929:	3d 01 04 00 00       	cmp    eax,0x401
c001192e:	75 19                	jne    c0011949 <VAS::~VAS()+0xed>
c0011930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011934:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011939:	83 ec 0c             	sub    esp,0xc
c001193c:	50                   	push   eax
c001193d:	e8 be df ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c0011942:	83 c4 10             	add    esp,0x10
c0011945:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011949:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001194d:	eb 84                	jmp    c00118d3 <VAS::~VAS()+0x77>
c001194f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011953:	25 00 04 00 00       	and    eax,0x400
c0011958:	74 19                	je     c0011973 <VAS::~VAS()+0x117>
c001195a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001195e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011963:	83 ec 0c             	sub    esp,0xc
c0011966:	50                   	push   eax
c0011967:	e8 94 df ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c001196c:	83 c4 10             	add    esp,0x10
c001196f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011973:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011977:	e9 1e ff ff ff       	jmp    c001189a <VAS::~VAS()+0x3e>
c001197c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011980:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011983:	83 ec 0c             	sub    esp,0xc
c0011986:	50                   	push   eax
c0011987:	e8 d5 fc ff ff       	call   c0011661 <Virt::freeKernelVirtualPages(unsigned long)>
c001198c:	83 c4 10             	add    esp,0x10
c001198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011993:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011996:	83 ec 0c             	sub    esp,0xc
c0011999:	50                   	push   eax
c001199a:	e8 61 df ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c001199f:	83 c4 10             	add    esp,0x10
c00119a2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00119a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119aa:	c1 e0 02             	shl    eax,0x2
c00119ad:	83 ec 08             	sub    esp,0x8
c00119b0:	50                   	push   eax
c00119b1:	68 e8 a2 02 c0       	push   0xc002a2e8
c00119b6:	e8 0c 0d 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c00119bb:	83 c4 10             	add    esp,0x10
c00119be:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c00119c3:	48                   	dec    eax
c00119c4:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c00119c9:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c00119ce:	85 c0                	test   eax,eax
c00119d0:	75 01                	jne    c00119d3 <VAS::~VAS()+0x177>
c00119d2:	fb                   	sti    
c00119d3:	90                   	nop
c00119d4:	83 c4 2c             	add    esp,0x2c
c00119d7:	c3                   	ret    

c00119d8 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00119d8:	55                   	push   ebp
c00119d9:	57                   	push   edi
c00119da:	56                   	push   esi
c00119db:	53                   	push   ebx
c00119dc:	83 ec 1c             	sub    esp,0x1c
c00119df:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00119e3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00119e7:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00119ed:	77 08                	ja     c00119f7 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00119ef:	0f 20 d8             	mov    eax,cr3
c00119f2:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00119f5:	75 47                	jne    c0011a3e <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00119f7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119fb:	09 d8                	or     eax,ebx
c00119fd:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a02:	75 57                	jne    c0011a5b <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011a04:	89 de                	mov    esi,ebx
c0011a06:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011a09:	c1 ee 16             	shr    esi,0x16
c0011a0c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011a13:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011a17:	74 54                	je     c0011a6d <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011a19:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011a1d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011a23:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011a27:	c1 e6 0c             	shl    esi,0xc
c0011a2a:	c1 eb 0a             	shr    ebx,0xa
c0011a2d:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011a33:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011a36:	83 c4 1c             	add    esp,0x1c
c0011a39:	5b                   	pop    ebx
c0011a3a:	5e                   	pop    esi
c0011a3b:	5f                   	pop    edi
c0011a3c:	5d                   	pop    ebp
c0011a3d:	c3                   	ret    
c0011a3e:	83 ec 0c             	sub    esp,0xc
c0011a41:	68 08 a3 02 c0       	push   0xc002a308
c0011a46:	e8 7c 0c 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0011a4b:	83 c4 10             	add    esp,0x10
c0011a4e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a52:	09 d8                	or     eax,ebx
c0011a54:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a59:	74 a9                	je     c0011a04 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a5b:	83 ec 0c             	sub    esp,0xc
c0011a5e:	68 70 a3 02 c0       	push   0xc002a370
c0011a63:	e8 cb 83 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c0011a68:	83 c4 10             	add    esp,0x10
c0011a6b:	eb 97                	jmp    c0011a04 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011a71:	e8 fb de ff ff       	call   c000f971 <Phys::allocatePage()>
c0011a76:	83 ec 0c             	sub    esp,0xc
c0011a79:	89 c5                	mov    ebp,eax
c0011a7b:	8b 0d 70 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da70
c0011a81:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011a85:	6a 01                	push   0x1
c0011a87:	e8 8f f7 ff ff       	call   c001121b <Virt::allocateKernelVirtualPages(int)>
c0011a8c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a93:	6a 01                	push   0x1
c0011a95:	50                   	push   eax
c0011a96:	55                   	push   ebp
c0011a97:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a9d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011aa1:	51                   	push   ecx
c0011aa2:	e8 27 02 00 00       	call   c0011cce <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011aa7:	83 c4 1c             	add    esp,0x1c
c0011aaa:	68 00 10 00 00       	push   0x1000
c0011aaf:	6a 00                	push   0x0
c0011ab1:	50                   	push   eax
c0011ab2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011ab6:	e8 95 ec fe ff       	call   c0000750 <memset>
c0011abb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011abf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011ac2:	e8 9a fb ff ff       	call   c0011661 <Virt::freeKernelVirtualPages(unsigned long)>
c0011ac7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011acb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011ace:	83 c4 10             	add    esp,0x10
c0011ad1:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011ad4:	e9 40 ff ff ff       	jmp    c0011a19 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011ad9:	90                   	nop

c0011ada <VAS::allocatePages(int, int)>:
c0011ada:	55                   	push   ebp
c0011adb:	57                   	push   edi
c0011adc:	56                   	push   esi
c0011add:	53                   	push   ebx
c0011ade:	83 ec 1c             	sub    esp,0x1c
c0011ae1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011ae5:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0011aea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011af0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011af6:	83 e0 01             	and    eax,0x1
c0011af9:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011afd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011b01:	0f 85 cc 00 00 00    	jne    c0011bd3 <VAS::allocatePages(int, int)+0xf9>
c0011b07:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011b0e:	85 c0                	test   eax,eax
c0011b10:	0f 84 a1 00 00 00    	je     c0011bb7 <VAS::allocatePages(int, int)+0xdd>
c0011b16:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011b1a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b1e:	c1 e6 0c             	shl    esi,0xc
c0011b21:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011b25:	85 c0                	test   eax,eax
c0011b27:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011b2a:	7e 33                	jle    c0011b5f <VAS::allocatePages(int, int)+0x85>
c0011b2c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011b30:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b34:	81 cd 00 04 00 00    	or     ebp,0x400
c0011b3a:	e8 32 de ff ff       	call   c000f971 <Phys::allocatePage()>
c0011b3f:	55                   	push   ebp
c0011b40:	53                   	push   ebx
c0011b41:	50                   	push   eax
c0011b42:	57                   	push   edi
c0011b43:	e8 90 fe ff ff       	call   c00119d8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b48:	83 c4 10             	add    esp,0x10
c0011b4b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b50:	74 03                	je     c0011b55 <VAS::allocatePages(int, int)+0x7b>
c0011b52:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b55:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b5b:	39 de                	cmp    esi,ebx
c0011b5d:	75 db                	jne    c0011b3a <VAS::allocatePages(int, int)+0x60>
c0011b5f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b64:	75 12                	jne    c0011b78 <VAS::allocatePages(int, int)+0x9e>
c0011b66:	0f 20 d8             	mov    eax,cr3
c0011b69:	0f 22 d8             	mov    cr3,eax
c0011b6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b70:	83 c4 1c             	add    esp,0x1c
c0011b73:	5b                   	pop    ebx
c0011b74:	5e                   	pop    esi
c0011b75:	5f                   	pop    edi
c0011b76:	5d                   	pop    ebp
c0011b77:	c3                   	ret    
c0011b78:	c1 ee 0a             	shr    esi,0xa
c0011b7b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b7f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011b85:	c1 eb 0a             	shr    ebx,0xa
c0011b88:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011b8e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b94:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b9a:	39 c3                	cmp    ebx,eax
c0011b9c:	77 ce                	ja     c0011b6c <VAS::allocatePages(int, int)+0x92>
c0011b9e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ba1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ba7:	39 d8                	cmp    eax,ebx
c0011ba9:	73 f3                	jae    c0011b9e <VAS::allocatePages(int, int)+0xc4>
c0011bab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011baf:	83 c4 1c             	add    esp,0x1c
c0011bb2:	5b                   	pop    ebx
c0011bb3:	5e                   	pop    esi
c0011bb4:	5f                   	pop    edi
c0011bb5:	5d                   	pop    ebp
c0011bb6:	c3                   	ret    
c0011bb7:	83 ec 0c             	sub    esp,0xc
c0011bba:	68 94 a3 02 c0       	push   0xc002a394
c0011bbf:	e8 6f 82 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c0011bc4:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011bc7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011bcb:	83 c4 10             	add    esp,0x10
c0011bce:	e9 43 ff ff ff       	jmp    c0011b16 <VAS::allocatePages(int, int)+0x3c>
c0011bd3:	83 ec 0c             	sub    esp,0xc
c0011bd6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011bda:	e8 3c f6 ff ff       	call   c001121b <Virt::allocateKernelVirtualPages(int)>
c0011bdf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011be3:	83 c4 10             	add    esp,0x10
c0011be6:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011beb:	0f 87 9b 00 00 00    	ja     c0011c8c <VAS::allocatePages(int, int)+0x1b2>
c0011bf1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011bf5:	85 d2                	test   edx,edx
c0011bf7:	7e 3c                	jle    c0011c35 <VAS::allocatePages(int, int)+0x15b>
c0011bf9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011bfd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011c01:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011c05:	c1 e5 0c             	shl    ebp,0xc
c0011c08:	81 ce 00 04 00 00    	or     esi,0x400
c0011c0e:	01 dd                	add    ebp,ebx
c0011c10:	e8 5c dd ff ff       	call   c000f971 <Phys::allocatePage()>
c0011c15:	56                   	push   esi
c0011c16:	53                   	push   ebx
c0011c17:	50                   	push   eax
c0011c18:	57                   	push   edi
c0011c19:	e8 ba fd ff ff       	call   c00119d8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c1e:	83 c4 10             	add    esp,0x10
c0011c21:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c26:	74 03                	je     c0011c2b <VAS::allocatePages(int, int)+0x151>
c0011c28:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c2b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c31:	39 dd                	cmp    ebp,ebx
c0011c33:	75 db                	jne    c0011c10 <VAS::allocatePages(int, int)+0x136>
c0011c35:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c3a:	0f 84 26 ff ff ff    	je     c0011b66 <VAS::allocatePages(int, int)+0x8c>
c0011c40:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c44:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c48:	89 d3                	mov    ebx,edx
c0011c4a:	c1 e0 0c             	shl    eax,0xc
c0011c4d:	c1 eb 0a             	shr    ebx,0xa
c0011c50:	01 d0                	add    eax,edx
c0011c52:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c58:	c1 e8 0a             	shr    eax,0xa
c0011c5b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c61:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c66:	2d 00 00 40 00       	sub    eax,0x400000
c0011c6b:	39 c3                	cmp    ebx,eax
c0011c6d:	0f 87 f9 fe ff ff    	ja     c0011b6c <VAS::allocatePages(int, int)+0x92>
c0011c73:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c76:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c7c:	39 d8                	cmp    eax,ebx
c0011c7e:	73 f3                	jae    c0011c73 <VAS::allocatePages(int, int)+0x199>
c0011c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c84:	83 c4 1c             	add    esp,0x1c
c0011c87:	5b                   	pop    ebx
c0011c88:	5e                   	pop    esi
c0011c89:	5f                   	pop    edi
c0011c8a:	5d                   	pop    ebp
c0011c8b:	c3                   	ret    
c0011c8c:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0011c91:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c97:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011c9e:	0f 84 4d ff ff ff    	je     c0011bf1 <VAS::allocatePages(int, int)+0x117>
c0011ca4:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011cac:	e9 40 ff ff ff       	jmp    c0011bf1 <VAS::allocatePages(int, int)+0x117>
c0011cb1:	90                   	nop

c0011cb2 <VAS::setCPUSpecific(unsigned long)>:
c0011cb2:	83 ec 0c             	sub    esp,0xc
c0011cb5:	6a 05                	push   0x5
c0011cb7:	68 00 00 40 c2       	push   0xc2400000
c0011cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cc4:	e8 0f fd ff ff       	call   c00119d8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011cc9:	83 c4 1c             	add    esp,0x1c
c0011ccc:	c3                   	ret    
c0011ccd:	90                   	nop

c0011cce <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011cce:	55                   	push   ebp
c0011ccf:	57                   	push   edi
c0011cd0:	56                   	push   esi
c0011cd1:	53                   	push   ebx
c0011cd2:	83 ec 1c             	sub    esp,0x1c
c0011cd5:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0011cda:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011cde:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ce4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011ce8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011cee:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011cf2:	83 e0 01             	and    eax,0x1
c0011cf5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011cf9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cfd:	85 c0                	test   eax,eax
c0011cff:	7e 39                	jle    c0011d3a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011d01:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d05:	89 f3                	mov    ebx,esi
c0011d07:	c1 e0 0c             	shl    eax,0xc
c0011d0a:	01 f0                	add    eax,esi
c0011d0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d10:	55                   	push   ebp
c0011d11:	53                   	push   ebx
c0011d12:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d16:	29 f0                	sub    eax,esi
c0011d18:	01 d8                	add    eax,ebx
c0011d1a:	50                   	push   eax
c0011d1b:	57                   	push   edi
c0011d1c:	e8 b7 fc ff ff       	call   c00119d8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d21:	83 c4 10             	add    esp,0x10
c0011d24:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d29:	74 03                	je     c0011d2e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011d2b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d2e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d34:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011d38:	75 d6                	jne    c0011d10 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011d3a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d3f:	75 10                	jne    c0011d51 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011d41:	0f 20 d8             	mov    eax,cr3
c0011d44:	0f 22 d8             	mov    cr3,eax
c0011d47:	83 c4 1c             	add    esp,0x1c
c0011d4a:	89 f0                	mov    eax,esi
c0011d4c:	5b                   	pop    ebx
c0011d4d:	5e                   	pop    esi
c0011d4e:	5f                   	pop    edi
c0011d4f:	5d                   	pop    ebp
c0011d50:	c3                   	ret    
c0011d51:	89 f3                	mov    ebx,esi
c0011d53:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d57:	c1 eb 0a             	shr    ebx,0xa
c0011d5a:	c1 e0 0c             	shl    eax,0xc
c0011d5d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011d63:	01 f0                	add    eax,esi
c0011d65:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011d6b:	c1 e8 0a             	shr    eax,0xa
c0011d6e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d73:	2d 00 00 40 00       	sub    eax,0x400000
c0011d78:	39 c3                	cmp    ebx,eax
c0011d7a:	77 cb                	ja     c0011d47 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011d7c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d7f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d85:	39 d8                	cmp    eax,ebx
c0011d87:	73 f3                	jae    c0011d7c <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011d89:	83 c4 1c             	add    esp,0x1c
c0011d8c:	89 f0                	mov    eax,esi
c0011d8e:	5b                   	pop    ebx
c0011d8f:	5e                   	pop    esi
c0011d90:	5f                   	pop    edi
c0011d91:	5d                   	pop    ebp
c0011d92:	c3                   	ret    
c0011d93:	90                   	nop

c0011d94 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d94:	55                   	push   ebp
c0011d95:	57                   	push   edi
c0011d96:	56                   	push   esi
c0011d97:	53                   	push   ebx
c0011d98:	83 ec 1c             	sub    esp,0x1c
c0011d9b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d9f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011da3:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011da7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011dab:	a9 ff 0f 00 00       	test   eax,0xfff
c0011db0:	75 4a                	jne    c0011dfc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011db2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011db6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011db9:	c1 eb 16             	shr    ebx,0x16
c0011dbc:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011dc3:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011dc7:	74 4d                	je     c0011e16 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011dc9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011dcd:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011dd1:	c1 e8 0a             	shr    eax,0xa
c0011dd4:	80 fa 01             	cmp    dl,0x1
c0011dd7:	19 d2                	sbb    edx,edx
c0011dd9:	c1 e3 0c             	shl    ebx,0xc
c0011ddc:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011de0:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011de6:	25 fc 0f 00 00       	and    eax,0xffc
c0011deb:	01 d8                	add    eax,ebx
c0011ded:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011df4:	83 c4 1c             	add    esp,0x1c
c0011df7:	5b                   	pop    ebx
c0011df8:	5e                   	pop    esi
c0011df9:	5f                   	pop    edi
c0011dfa:	5d                   	pop    ebp
c0011dfb:	c3                   	ret    
c0011dfc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011e00:	83 ec 0c             	sub    esp,0xc
c0011e03:	68 c0 a3 02 c0       	push   0xc002a3c0
c0011e08:	e8 26 80 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c0011e0d:	83 c4 10             	add    esp,0x10
c0011e10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011e14:	eb 9c                	jmp    c0011db2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011e16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011e1a:	e8 52 db ff ff       	call   c000f971 <Phys::allocatePage()>
c0011e1f:	83 ec 0c             	sub    esp,0xc
c0011e22:	89 c5                	mov    ebp,eax
c0011e24:	8b 0d 70 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da70
c0011e2a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011e2e:	6a 01                	push   0x1
c0011e30:	e8 e6 f3 ff ff       	call   c001121b <Virt::allocateKernelVirtualPages(int)>
c0011e35:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011e3c:	6a 01                	push   0x1
c0011e3e:	50                   	push   eax
c0011e3f:	55                   	push   ebp
c0011e40:	81 cd 07 04 00 00    	or     ebp,0x407
c0011e46:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011e4a:	51                   	push   ecx
c0011e4b:	e8 7e fe ff ff       	call   c0011cce <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e50:	83 c4 1c             	add    esp,0x1c
c0011e53:	68 00 10 00 00       	push   0x1000
c0011e58:	6a 00                	push   0x0
c0011e5a:	50                   	push   eax
c0011e5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e5f:	e8 ec e8 fe ff       	call   c0000750 <memset>
c0011e64:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e68:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e6b:	e8 f1 f7 ff ff       	call   c0011661 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e70:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e73:	83 c4 10             	add    esp,0x10
c0011e76:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011e79:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e7d:	e9 47 ff ff ff       	jmp    c0011dc9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011e82 <VAS::VAS(bool)>:
c0011e82:	53                   	push   ebx
c0011e83:	83 ec 28             	sub    esp,0x28
c0011e86:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e8a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e92:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e9d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011ea4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ea8:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011eac:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011eaf:	e8 bd da ff ff       	call   c000f971 <Phys::allocatePage()>
c0011eb4:	89 c2                	mov    edx,eax
c0011eb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eba:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011ebd:	8b 1d 70 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da70
c0011ec3:	83 ec 0c             	sub    esp,0xc
c0011ec6:	6a 01                	push   0x1
c0011ec8:	e8 4e f3 ff ff       	call   c001121b <Virt::allocateKernelVirtualPages(int)>
c0011ecd:	83 c4 10             	add    esp,0x10
c0011ed0:	89 c2                	mov    edx,eax
c0011ed2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ed6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011ed9:	83 ec 0c             	sub    esp,0xc
c0011edc:	6a 03                	push   0x3
c0011ede:	6a 01                	push   0x1
c0011ee0:	52                   	push   edx
c0011ee1:	50                   	push   eax
c0011ee2:	53                   	push   ebx
c0011ee3:	e8 e6 fd ff ff       	call   c0011cce <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011ee8:	83 c4 20             	add    esp,0x20
c0011eeb:	89 c2                	mov    edx,eax
c0011eed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011ef4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011efc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011f04:	7f 1c                	jg     c0011f22 <VAS::VAS(bool)+0xa0>
c0011f06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f0a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f0d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f11:	c1 e2 02             	shl    edx,0x2
c0011f14:	01 d0                	add    eax,edx
c0011f16:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f1c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f20:	eb da                	jmp    c0011efc <VAS::VAS(bool)+0x7a>
c0011f22:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011f2a:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011f32:	7f 7a                	jg     c0011fae <VAS::VAS(bool)+0x12c>
c0011f34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f38:	2d 00 02 00 00       	sub    eax,0x200
c0011f3d:	c1 e0 0c             	shl    eax,0xc
c0011f40:	83 c8 03             	or     eax,0x3
c0011f43:	89 c2                	mov    edx,eax
c0011f45:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0011f4a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f50:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f56:	83 e0 10             	and    eax,0x10
c0011f59:	84 c0                	test   al,al
c0011f5b:	74 07                	je     c0011f64 <VAS::VAS(bool)+0xe2>
c0011f5d:	b8 00 01 00 00       	mov    eax,0x100
c0011f62:	eb 05                	jmp    c0011f69 <VAS::VAS(bool)+0xe7>
c0011f64:	b8 00 00 00 00       	mov    eax,0x0
c0011f69:	09 d0                	or     eax,edx
c0011f6b:	89 c1                	mov    ecx,eax
c0011f6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f71:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f74:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f78:	c1 e2 02             	shl    edx,0x2
c0011f7b:	01 d0                	add    eax,edx
c0011f7d:	89 ca                	mov    edx,ecx
c0011f7f:	89 10                	mov    DWORD PTR [eax],edx
c0011f81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f85:	2d 40 03 00 00       	sub    eax,0x340
c0011f8a:	83 f8 7f             	cmp    eax,0x7f
c0011f8d:	77 16                	ja     c0011fa5 <VAS::VAS(bool)+0x123>
c0011f8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f93:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f96:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f9a:	c1 e2 02             	shl    edx,0x2
c0011f9d:	01 d0                	add    eax,edx
c0011f9f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011fa5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011fa9:	e9 7c ff ff ff       	jmp    c0011f2a <VAS::VAS(bool)+0xa8>
c0011fae:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0011fb3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fb9:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011fbf:	83 e0 10             	and    eax,0x10
c0011fc2:	84 c0                	test   al,al
c0011fc4:	74 07                	je     c0011fcd <VAS::VAS(bool)+0x14b>
c0011fc6:	b8 03 41 00 00       	mov    eax,0x4103
c0011fcb:	eb 05                	jmp    c0011fd2 <VAS::VAS(bool)+0x150>
c0011fcd:	b8 03 40 00 00       	mov    eax,0x4003
c0011fd2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011fd6:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0011fd9:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011fdf:	89 02                	mov    DWORD PTR [edx],eax
c0011fe1:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0011fe6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fec:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011ff2:	83 ec 08             	sub    esp,0x8
c0011ff5:	50                   	push   eax
c0011ff6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011ffa:	e8 b3 fc ff ff       	call   c0011cb2 <VAS::setCPUSpecific(unsigned long)>
c0011fff:	83 c4 10             	add    esp,0x10
c0012002:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012006:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012009:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c001200e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012014:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001201a:	83 e0 10             	and    eax,0x10
c001201d:	84 c0                	test   al,al
c001201f:	74 07                	je     c0012028 <VAS::VAS(bool)+0x1a6>
c0012021:	b8 00 01 00 00       	mov    eax,0x100
c0012026:	eb 05                	jmp    c001202d <VAS::VAS(bool)+0x1ab>
c0012028:	b8 00 00 00 00       	mov    eax,0x0
c001202d:	09 c2                	or     edx,eax
c001202f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012033:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012036:	05 fc 0f 00 00       	add    eax,0xffc
c001203b:	83 ca 03             	or     edx,0x3
c001203e:	89 10                	mov    DWORD PTR [eax],edx
c0012040:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0012045:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001204b:	83 ec 0c             	sub    esp,0xc
c001204e:	50                   	push   eax
c001204f:	e8 ac 1d 00 00       	call   c0013e00 <Device::getName()>
c0012054:	83 c4 10             	add    esp,0x10
c0012057:	83 ec 08             	sub    esp,0x8
c001205a:	68 b5 a4 02 c0       	push   0xc002a4b5
c001205f:	50                   	push   eax
c0012060:	e8 33 e8 fe ff       	call   c0000898 <strcmp>
c0012065:	83 c4 10             	add    esp,0x10
c0012068:	85 c0                	test   eax,eax
c001206a:	0f 94 c0             	sete   al
c001206d:	84 c0                	test   al,al
c001206f:	0f 84 87 00 00 00    	je     c00120fc <VAS::VAS(bool)+0x27a>
c0012075:	fa                   	cli    
c0012076:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001207b:	40                   	inc    eax
c001207c:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c0012081:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0012086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001208c:	05 7c 09 00 00       	add    eax,0x97c
c0012091:	83 ec 0c             	sub    esp,0xc
c0012094:	50                   	push   eax
c0012095:	e8 84 cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001209a:	83 c4 10             	add    esp,0x10
c001209d:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120a2:	89 c3                	mov    ebx,eax
c00120a4:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c00120a9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120af:	05 7c 09 00 00       	add    eax,0x97c
c00120b4:	83 ec 0c             	sub    esp,0xc
c00120b7:	50                   	push   eax
c00120b8:	e8 61 cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00120bd:	83 c4 10             	add    esp,0x10
c00120c0:	83 ec 08             	sub    esp,0x8
c00120c3:	50                   	push   eax
c00120c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120c8:	e8 75 f5 ff ff       	call   c0011642 <VAS::getPageTableEntry(unsigned long)>
c00120cd:	83 c4 10             	add    esp,0x10
c00120d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00120d2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120d7:	6a 11                	push   0x11
c00120d9:	53                   	push   ebx
c00120da:	50                   	push   eax
c00120db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120df:	e8 f4 f8 ff ff       	call   c00119d8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00120e4:	83 c4 10             	add    esp,0x10
c00120e7:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c00120ec:	48                   	dec    eax
c00120ed:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c00120f2:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c00120f7:	85 c0                	test   eax,eax
c00120f9:	75 01                	jne    c00120fc <VAS::VAS(bool)+0x27a>
c00120fb:	fb                   	sti    
c00120fc:	90                   	nop
c00120fd:	83 c4 28             	add    esp,0x28
c0012100:	5b                   	pop    ebx
c0012101:	c3                   	ret    

c0012102 <VAS::evict(unsigned long)>:
c0012102:	55                   	push   ebp
c0012103:	57                   	push   edi
c0012104:	56                   	push   esi
c0012105:	53                   	push   ebx
c0012106:	83 ec 1c             	sub    esp,0x1c
c0012109:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001210d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012111:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012115:	e8 42 f2 ff ff       	call   c001135c <Virt::allocateSwapfilePage()>
c001211a:	89 c7                	mov    edi,eax
c001211c:	a1 ac c8 02 c0       	mov    eax,ds:0xc002c8ac
c0012121:	85 c0                	test   eax,eax
c0012123:	7e 3d                	jle    c0012162 <VAS::evict(unsigned long)+0x60>
c0012125:	89 ee                	mov    esi,ebp
c0012127:	31 db                	xor    ebx,ebx
c0012129:	83 ec 0c             	sub    esp,0xc
c001212c:	57                   	push   edi
c001212d:	e8 18 f2 ff ff       	call   c001134a <Virt::swapIDToSector(unsigned long)>
c0012132:	89 34 24             	mov    DWORD PTR [esp],esi
c0012135:	01 d8                	add    eax,ebx
c0012137:	6a 01                	push   0x1
c0012139:	31 d2                	xor    edx,edx
c001213b:	43                   	inc    ebx
c001213c:	52                   	push   edx
c001213d:	81 c6 00 02 00 00    	add    esi,0x200
c0012143:	50                   	push   eax
c0012144:	0f be 05 b8 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8b8
c001214b:	ff 34 85 fc dd 02 c0 	push   DWORD PTR [eax*4-0x3ffd2204]
c0012152:	e8 31 3f 00 00       	call   c0016088 <LogicalDisk::write(unsigned long long, int, void*)>
c0012157:	83 c4 20             	add    esp,0x20
c001215a:	39 1d ac c8 02 c0    	cmp    DWORD PTR ds:0xc002c8ac,ebx
c0012160:	7f c7                	jg     c0012129 <VAS::evict(unsigned long)+0x27>
c0012162:	83 ec 08             	sub    esp,0x8
c0012165:	c1 e7 0b             	shl    edi,0xb
c0012168:	55                   	push   ebp
c0012169:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001216d:	e8 d0 f4 ff ff       	call   c0011642 <VAS::getPageTableEntry(unsigned long)>
c0012172:	5a                   	pop    edx
c0012173:	89 c6                	mov    esi,eax
c0012175:	59                   	pop    ecx
c0012176:	ff 30                	push   DWORD PTR [eax]
c0012178:	68 c3 a4 02 c0       	push   0xc002a4c3
c001217d:	e8 45 05 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0012182:	8b 16                	mov    edx,DWORD PTR [esi]
c0012184:	89 d3                	mov    ebx,edx
c0012186:	81 e2 fe 07 00 00    	and    edx,0x7fe
c001218c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012192:	09 d7                	or     edi,edx
c0012194:	89 3e                	mov    DWORD PTR [esi],edi
c0012196:	5e                   	pop    esi
c0012197:	58                   	pop    eax
c0012198:	57                   	push   edi
c0012199:	68 dc a4 02 c0       	push   0xc002a4dc
c001219e:	e8 24 05 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c00121a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121a6:	ff 05 68 da 02 c0    	inc    DWORD PTR ds:0xc002da68
c00121ac:	e8 4f d7 ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c00121b1:	0f 20 d8             	mov    eax,cr3
c00121b4:	0f 22 d8             	mov    cr3,eax
c00121b7:	ff 35 68 da 02 c0    	push   DWORD PTR ds:0xc002da68
c00121bd:	55                   	push   ebp
c00121be:	53                   	push   ebx
c00121bf:	68 e4 a3 02 c0       	push   0xc002a3e4
c00121c4:	e8 fe 04 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c00121c9:	a1 64 da 02 c0       	mov    eax,ds:0xc002da64
c00121ce:	c7 44 24 50 f5 a4 02 c0 	mov    DWORD PTR [esp+0x50],0xc002a4f5
c00121d6:	8d 50 01             	lea    edx,[eax+0x1]
c00121d9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00121dd:	89 15 64 da 02 c0    	mov    DWORD PTR ds:0xc002da64,edx
c00121e3:	83 c4 3c             	add    esp,0x3c
c00121e6:	5b                   	pop    ebx
c00121e7:	5e                   	pop    esi
c00121e8:	5f                   	pop    edi
c00121e9:	5d                   	pop    ebp
c00121ea:	e9 d8 04 00 00       	jmp    c00126c7 <Dbg::kprintf(char const*, ...)>
c00121ef:	90                   	nop

c00121f0 <VAS::tryLoadBackOffDisk(unsigned long)>:
c00121f0:	55                   	push   ebp
c00121f1:	57                   	push   edi
c00121f2:	56                   	push   esi
c00121f3:	53                   	push   ebx
c00121f4:	83 ec 24             	sub    esp,0x24
c00121f7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00121fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00121ff:	68 06 a5 02 c0       	push   0xc002a506
c0012204:	e8 be 04 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0012209:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001220d:	58                   	pop    eax
c001220e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012214:	5a                   	pop    edx
c0012215:	53                   	push   ebx
c0012216:	56                   	push   esi
c0012217:	e8 26 f4 ff ff       	call   c0011642 <VAS::getPageTableEntry(unsigned long)>
c001221c:	59                   	pop    ecx
c001221d:	89 c5                	mov    ebp,eax
c001221f:	5f                   	pop    edi
c0012220:	ff 30                	push   DWORD PTR [eax]
c0012222:	68 19 a5 02 c0       	push   0xc002a519
c0012227:	e8 9b 04 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001222c:	83 c4 10             	add    esp,0x10
c001222f:	85 db                	test   ebx,ebx
c0012231:	74 1d                	je     c0012250 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c0012233:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
c0012236:	31 c0                	xor    eax,eax
c0012238:	89 fa                	mov    edx,edi
c001223a:	81 e2 01 04 00 00    	and    edx,0x401
c0012240:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012246:	74 12                	je     c001225a <VAS::tryLoadBackOffDisk(unsigned long)+0x6a>
c0012248:	83 c4 1c             	add    esp,0x1c
c001224b:	5b                   	pop    ebx
c001224c:	5e                   	pop    esi
c001224d:	5f                   	pop    edi
c001224e:	5d                   	pop    ebp
c001224f:	c3                   	ret    
c0012250:	83 c4 1c             	add    esp,0x1c
c0012253:	31 c0                	xor    eax,eax
c0012255:	5b                   	pop    ebx
c0012256:	5e                   	pop    esi
c0012257:	5f                   	pop    edi
c0012258:	5d                   	pop    ebp
c0012259:	c3                   	ret    
c001225a:	83 ec 08             	sub    esp,0x8
c001225d:	c1 ef 0b             	shr    edi,0xb
c0012260:	57                   	push   edi
c0012261:	68 27 a5 02 c0       	push   0xc002a527
c0012266:	e8 5c 04 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001226b:	e8 01 d7 ff ff       	call   c000f971 <Phys::allocatePage()>
c0012270:	59                   	pop    ecx
c0012271:	5a                   	pop    edx
c0012272:	50                   	push   eax
c0012273:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012277:	68 32 a5 02 c0       	push   0xc002a532
c001227c:	e8 46 04 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0012281:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012285:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012288:	81 e2 ff 0f 00 00    	and    edx,0xfff
c001228e:	09 d0                	or     eax,edx
c0012290:	0d 01 08 00 00       	or     eax,0x801
c0012295:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012298:	59                   	pop    ecx
c0012299:	5d                   	pop    ebp
c001229a:	50                   	push   eax
c001229b:	68 47 a5 02 c0       	push   0xc002a547
c00122a0:	e8 22 04 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c00122a5:	0f 20 d8             	mov    eax,cr3
c00122a8:	83 c4 0c             	add    esp,0xc
c00122ab:	56                   	push   esi
c00122ac:	50                   	push   eax
c00122ad:	68 5f a5 02 c0       	push   0xc002a55f
c00122b2:	e8 10 04 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c00122b7:	c7 04 24 77 a5 02 c0 	mov    DWORD PTR [esp],0xc002a577
c00122be:	e8 04 04 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c00122c3:	83 c4 10             	add    esp,0x10
c00122c6:	a1 ac c8 02 c0       	mov    eax,ds:0xc002c8ac
c00122cb:	85 c0                	test   eax,eax
c00122cd:	7e 3d                	jle    c001230c <VAS::tryLoadBackOffDisk(unsigned long)+0x11c>
c00122cf:	89 dd                	mov    ebp,ebx
c00122d1:	31 f6                	xor    esi,esi
c00122d3:	83 ec 0c             	sub    esp,0xc
c00122d6:	57                   	push   edi
c00122d7:	e8 6e f0 ff ff       	call   c001134a <Virt::swapIDToSector(unsigned long)>
c00122dc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00122df:	01 f0                	add    eax,esi
c00122e1:	6a 01                	push   0x1
c00122e3:	31 d2                	xor    edx,edx
c00122e5:	46                   	inc    esi
c00122e6:	52                   	push   edx
c00122e7:	81 c5 00 02 00 00    	add    ebp,0x200
c00122ed:	50                   	push   eax
c00122ee:	0f be 05 b8 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8b8
c00122f5:	ff 34 85 fc dd 02 c0 	push   DWORD PTR [eax*4-0x3ffd2204]
c00122fc:	e8 1b 3d 00 00       	call   c001601c <LogicalDisk::read(unsigned long long, int, void*)>
c0012301:	83 c4 20             	add    esp,0x20
c0012304:	39 35 ac c8 02 c0    	cmp    DWORD PTR ds:0xc002c8ac,esi
c001230a:	7f c7                	jg     c00122d3 <VAS::tryLoadBackOffDisk(unsigned long)+0xe3>
c001230c:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0012311:	48                   	dec    eax
c0012312:	52                   	push   edx
c0012313:	a3 68 da 02 c0       	mov    ds:0xc002da68,eax
c0012318:	50                   	push   eax
c0012319:	53                   	push   ebx
c001231a:	68 87 a5 02 c0       	push   0xc002a587
c001231f:	e8 a3 03 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0012324:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012327:	e8 00 f0 ff ff       	call   c001132c <Virt::freeSwapfilePage(unsigned long)>
c001232c:	c7 04 24 9c a5 02 c0 	mov    DWORD PTR [esp],0xc002a59c
c0012333:	e8 8f 03 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0012338:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001233d:	83 c4 10             	add    esp,0x10
c0012340:	48                   	dec    eax
c0012341:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c0012346:	85 c0                	test   eax,eax
c0012348:	74 2d                	je     c0012377 <VAS::tryLoadBackOffDisk(unsigned long)+0x187>
c001234a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001234e:	25 ff 0f 00 00       	and    eax,0xfff
c0012353:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012358:	77 20                	ja     c001237a <VAS::tryLoadBackOffDisk(unsigned long)+0x18a>
c001235a:	0f 20 d8             	mov    eax,cr3
c001235d:	0f 22 d8             	mov    cr3,eax
c0012360:	83 ec 0c             	sub    esp,0xc
c0012363:	68 c2 a5 02 c0       	push   0xc002a5c2
c0012368:	e8 5a 03 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001236d:	83 c4 10             	add    esp,0x10
c0012370:	b0 01                	mov    al,0x1
c0012372:	e9 d1 fe ff ff       	jmp    c0012248 <VAS::tryLoadBackOffDisk(unsigned long)+0x58>
c0012377:	fb                   	sti    
c0012378:	eb d0                	jmp    c001234a <VAS::tryLoadBackOffDisk(unsigned long)+0x15a>
c001237a:	83 ec 0c             	sub    esp,0xc
c001237d:	68 b2 a5 02 c0       	push   0xc002a5b2
c0012382:	e8 40 03 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0012387:	83 c4 10             	add    esp,0x10
c001238a:	eb ce                	jmp    c001235a <VAS::tryLoadBackOffDisk(unsigned long)+0x16a>

c001238c <VAS::scanForEviction()>:
c001238c:	57                   	push   edi
c001238d:	56                   	push   esi
c001238e:	53                   	push   ebx
c001238f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012393:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012396:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001239c:	75 0e                	jne    c00123ac <VAS::scanForEviction()+0x20>
c001239e:	89 da                	mov    edx,ebx
c00123a0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00123a3:	c1 ea 16             	shr    edx,0x16
c00123a6:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00123aa:	74 48                	je     c00123f4 <VAS::scanForEviction()+0x68>
c00123ac:	53                   	push   ebx
c00123ad:	56                   	push   esi
c00123ae:	e8 8f f2 ff ff       	call   c0011642 <VAS::getPageTableEntry(unsigned long)>
c00123b3:	5a                   	pop    edx
c00123b4:	8b 38                	mov    edi,DWORD PTR [eax]
c00123b6:	59                   	pop    ecx
c00123b7:	89 fa                	mov    edx,edi
c00123b9:	81 e2 00 0c 00 00    	and    edx,0xc00
c00123bf:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c00123c5:	74 3d                	je     c0012404 <VAS::scanForEviction()+0x78>
c00123c7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123cd:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c00123d3:	76 2a                	jbe    c00123ff <VAS::scanForEviction()+0x73>
c00123d5:	31 db                	xor    ebx,ebx
c00123d7:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00123de:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00123e4:	75 c6                	jne    c00123ac <VAS::scanForEviction()+0x20>
c00123e6:	89 da                	mov    edx,ebx
c00123e8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00123eb:	c1 ea 16             	shr    edx,0x16
c00123ee:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00123f2:	75 b8                	jne    c00123ac <VAS::scanForEviction()+0x20>
c00123f4:	81 c3 00 00 40 00    	add    ebx,0x400000
c00123fa:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00123fd:	eb 97                	jmp    c0012396 <VAS::scanForEviction()+0xa>
c00123ff:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012402:	eb 92                	jmp    c0012396 <VAS::scanForEviction()+0xa>
c0012404:	f7 c7 01 00 00 00    	test   edi,0x1
c001240a:	74 bb                	je     c00123c7 <VAS::scanForEviction()+0x3b>
c001240c:	f7 c7 20 00 00 00    	test   edi,0x20
c0012412:	74 0a                	je     c001241e <VAS::scanForEviction()+0x92>
c0012414:	83 e7 df             	and    edi,0xffffffdf
c0012417:	89 38                	mov    DWORD PTR [eax],edi
c0012419:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001241c:	eb a9                	jmp    c00123c7 <VAS::scanForEviction()+0x3b>
c001241e:	83 ec 08             	sub    esp,0x8
c0012421:	53                   	push   ebx
c0012422:	56                   	push   esi
c0012423:	e8 da fc ff ff       	call   c0012102 <VAS::evict(unsigned long)>
c0012428:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c001242f:	83 c4 10             	add    esp,0x10
c0012432:	89 f8                	mov    eax,edi
c0012434:	5b                   	pop    ebx
c0012435:	25 00 f0 ff ff       	and    eax,0xfffff000
c001243a:	5e                   	pop    esi
c001243b:	5f                   	pop    edi
c001243c:	c3                   	ret    

c001243d <mapVASFirstTime>:
c001243d:	55                   	push   ebp
c001243e:	57                   	push   edi
c001243f:	56                   	push   esi
c0012440:	53                   	push   ebx
c0012441:	83 ec 0c             	sub    esp,0xc
c0012444:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012449:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001244c:	4a                   	dec    edx
c001244d:	0f 84 fe 00 00 00    	je     c0012551 <mapVASFirstTime+0x114>
c0012453:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012456:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012459:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001245e:	c1 e5 15             	shl    ebp,0x15
c0012461:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0012466:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c001246c:	29 eb                	sub    ebx,ebp
c001246e:	29 ef                	sub    edi,ebp
c0012470:	83 ec 08             	sub    esp,0x8
c0012473:	53                   	push   ebx
c0012474:	68 e9 a5 02 c0       	push   0xc002a5e9
c0012479:	e8 49 02 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001247e:	e8 ee d4 ff ff       	call   c000f971 <Phys::allocatePage()>
c0012483:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c001248a:	6a 01                	push   0x1
c001248c:	53                   	push   ebx
c001248d:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012493:	50                   	push   eax
c0012494:	56                   	push   esi
c0012495:	e8 34 f8 ff ff       	call   c0011cce <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001249a:	83 c4 20             	add    esp,0x20
c001249d:	39 fb                	cmp    ebx,edi
c001249f:	75 cf                	jne    c0012470 <mapVASFirstTime+0x33>
c00124a1:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c00124a6:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c00124ab:	29 eb                	sub    ebx,ebp
c00124ad:	29 ef                	sub    edi,ebp
c00124af:	83 ec 08             	sub    esp,0x8
c00124b2:	53                   	push   ebx
c00124b3:	68 05 a6 02 c0       	push   0xc002a605
c00124b8:	e8 0a 02 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c00124bd:	58                   	pop    eax
c00124be:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00124c2:	5a                   	pop    edx
c00124c3:	19 c0                	sbb    eax,eax
c00124c5:	83 e0 04             	and    eax,0x4
c00124c8:	05 03 04 00 00       	add    eax,0x403
c00124cd:	50                   	push   eax
c00124ce:	68 51 a5 02 c0       	push   0xc002a551
c00124d3:	e8 ef 01 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c00124d8:	e8 94 d4 ff ff       	call   c000f971 <Phys::allocatePage()>
c00124dd:	59                   	pop    ecx
c00124de:	89 c5                	mov    ebp,eax
c00124e0:	58                   	pop    eax
c00124e1:	55                   	push   ebp
c00124e2:	68 19 a6 02 c0       	push   0xc002a619
c00124e7:	e8 db 01 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c00124ec:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00124f0:	19 d2                	sbb    edx,edx
c00124f2:	83 e2 04             	and    edx,0x4
c00124f5:	81 c2 03 0c 00 00    	add    edx,0xc03
c00124fb:	89 14 24             	mov    DWORD PTR [esp],edx
c00124fe:	6a 01                	push   0x1
c0012500:	53                   	push   ebx
c0012501:	55                   	push   ebp
c0012502:	56                   	push   esi
c0012503:	e8 c6 f7 ff ff       	call   c0011cce <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012508:	83 c4 18             	add    esp,0x18
c001250b:	53                   	push   ebx
c001250c:	56                   	push   esi
c001250d:	e8 30 f1 ff ff       	call   c0011642 <VAS::getPageTableEntry(unsigned long)>
c0012512:	5a                   	pop    edx
c0012513:	59                   	pop    ecx
c0012514:	ff 30                	push   DWORD PTR [eax]
c0012516:	68 35 a6 02 c0       	push   0xc002a635
c001251b:	e8 a7 01 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0012520:	0f 20 d8             	mov    eax,cr3
c0012523:	83 c4 0c             	add    esp,0xc
c0012526:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001252c:	56                   	push   esi
c001252d:	50                   	push   eax
c001252e:	68 5f a5 02 c0       	push   0xc002a55f
c0012533:	e8 8f 01 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0012538:	83 c4 10             	add    esp,0x10
c001253b:	39 df                	cmp    edi,ebx
c001253d:	0f 85 6c ff ff ff    	jne    c00124af <mapVASFirstTime+0x72>
c0012543:	0f 20 d8             	mov    eax,cr3
c0012546:	0f 22 d8             	mov    cr3,eax
c0012549:	83 c4 0c             	add    esp,0xc
c001254c:	5b                   	pop    ebx
c001254d:	5e                   	pop    esi
c001254e:	5f                   	pop    edi
c001254f:	5d                   	pop    ebp
c0012550:	c3                   	ret    
c0012551:	83 ec 0c             	sub    esp,0xc
c0012554:	68 d0 a5 02 c0       	push   0xc002a5d0
c0012559:	e8 69 01 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001255e:	83 c4 10             	add    esp,0x10
c0012561:	83 c4 0c             	add    esp,0xc
c0012564:	5b                   	pop    ebx
c0012565:	5e                   	pop    esi
c0012566:	5f                   	pop    edi
c0012567:	5d                   	pop    ebp
c0012568:	c3                   	ret    

c0012569 <__cxa_atexit>:
c0012569:	31 c0                	xor    eax,eax
c001256b:	c3                   	ret    

c001256c <__cxa_finalize>:
c001256c:	c3                   	ret    

c001256d <__stack_chk_fail>:
c001256d:	55                   	push   ebp
c001256e:	89 e5                	mov    ebp,esp
c0012570:	83 ec 14             	sub    esp,0x14
c0012573:	68 40 a6 02 c0       	push   0xc002a640
c0012578:	e8 4a 01 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001257d:	58                   	pop    eax
c001257e:	5a                   	pop    edx
c001257f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012582:	68 90 a6 02 c0       	push   0xc002a690
c0012587:	e8 3b 01 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001258c:	59                   	pop    ecx
c001258d:	58                   	pop    eax
c001258e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012591:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012594:	68 90 a6 02 c0       	push   0xc002a690
c0012599:	e8 29 01 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001259e:	5a                   	pop    edx
c001259f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125a2:	59                   	pop    ecx
c00125a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00125a5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00125a8:	68 90 a6 02 c0       	push   0xc002a690
c00125ad:	e8 15 01 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c00125b2:	5a                   	pop    edx
c00125b3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125b6:	59                   	pop    ecx
c00125b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00125b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00125bb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00125be:	68 90 a6 02 c0       	push   0xc002a690
c00125c3:	e8 ff 00 00 00       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c00125c8:	c7 04 24 98 a6 02 c0 	mov    DWORD PTR [esp],0xc002a698
c00125cf:	e8 5f 78 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c00125d4:	83 c4 10             	add    esp,0x10
c00125d7:	c9                   	leave  
c00125d8:	c3                   	ret    

c00125d9 <__cxa_pure_virtual>:
c00125d9:	83 ec 18             	sub    esp,0x18
c00125dc:	68 b0 a6 02 c0       	push   0xc002a6b0
c00125e1:	e8 4d 78 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c00125e6:	83 c4 1c             	add    esp,0x1c
c00125e9:	c3                   	ret    

c00125ea <operator new[](unsigned long)>:
c00125ea:	e9 aa cf ff ff       	jmp    c000f599 <malloc>

c00125ef <operator delete(void*, unsigned long)>:
c00125ef:	e9 c5 cf ff ff       	jmp    c000f5b9 <rfree>

c00125f4 <operator delete[](void*)>:
c00125f4:	e9 c0 cf ff ff       	jmp    c000f5b9 <rfree>

c00125f9 <operator delete[](void*, unsigned long)>:
c00125f9:	e9 bb cf ff ff       	jmp    c000f5b9 <rfree>

c00125fe <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00125fe:	55                   	push   ebp
c00125ff:	b9 11 00 00 00       	mov    ecx,0x11
c0012604:	57                   	push   edi
c0012605:	56                   	push   esi
c0012606:	be fe a0 02 c0       	mov    esi,0xc002a0fe
c001260b:	53                   	push   ebx
c001260c:	83 ec 20             	sub    esp,0x20
c001260f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012613:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012617:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001261b:	fc                   	cld    
c001261c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001261e:	89 ee                	mov    esi,ebp
c0012620:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012624:	eb 02                	jmp    c0012628 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c0012626:	89 c6                	mov    esi,eax
c0012628:	31 d2                	xor    edx,edx
c001262a:	41                   	inc    ecx
c001262b:	89 f0                	mov    eax,esi
c001262d:	f7 f3                	div    ebx
c001262f:	39 de                	cmp    esi,ebx
c0012631:	73 f3                	jae    c0012626 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c0012633:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012636:	eb 02                	jmp    c001263a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c0012638:	89 c5                	mov    ebp,eax
c001263a:	31 d2                	xor    edx,edx
c001263c:	49                   	dec    ecx
c001263d:	89 e8                	mov    eax,ebp
c001263f:	f7 f3                	div    ebx
c0012641:	39 dd                	cmp    ebp,ebx
c0012643:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0012647:	88 11                	mov    BYTE PTR [ecx],dl
c0012649:	73 ed                	jae    c0012638 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c001264b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001264f:	83 c4 20             	add    esp,0x20
c0012652:	5b                   	pop    ebx
c0012653:	5e                   	pop    esi
c0012654:	5f                   	pop    edi
c0012655:	5d                   	pop    ebp
c0012656:	c3                   	ret    

c0012657 <Dbg::logc(char)>:
c0012657:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001265b:	ba fd 03 00 00       	mov    edx,0x3fd
c0012660:	ec                   	in     al,dx
c0012661:	a8 20                	test   al,0x20
c0012663:	74 fb                	je     c0012660 <Dbg::logc(char)+0x9>
c0012665:	ba f8 03 00 00       	mov    edx,0x3f8
c001266a:	88 c8                	mov    al,cl
c001266c:	ee                   	out    dx,al
c001266d:	c3                   	ret    

c001266e <Dbg::logs(char*)>:
c001266e:	53                   	push   ebx
c001266f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012673:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012676:	84 c0                	test   al,al
c0012678:	74 0f                	je     c0012689 <Dbg::logs(char*)+0x1b>
c001267a:	50                   	push   eax
c001267b:	43                   	inc    ebx
c001267c:	e8 d6 ff ff ff       	call   c0012657 <Dbg::logc(char)>
c0012681:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012684:	5a                   	pop    edx
c0012685:	84 c0                	test   al,al
c0012687:	75 f1                	jne    c001267a <Dbg::logs(char*)+0xc>
c0012689:	5b                   	pop    ebx
c001268a:	c3                   	ret    

c001268b <Dbg::logWriteInt(unsigned int)>:
c001268b:	83 ec 10             	sub    esp,0x10
c001268e:	6a 0a                	push   0xa
c0012690:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012694:	50                   	push   eax
c0012695:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012699:	e8 60 ff ff ff       	call   c00125fe <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001269e:	50                   	push   eax
c001269f:	e8 ca ff ff ff       	call   c001266e <Dbg::logs(char*)>
c00126a4:	83 c4 20             	add    esp,0x20
c00126a7:	c3                   	ret    

c00126a8 <Dbg::logWriteIntBase(unsigned int, int)>:
c00126a8:	83 ec 10             	sub    esp,0x10
c00126ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126af:	8d 44 24 08          	lea    eax,[esp+0x8]
c00126b3:	50                   	push   eax
c00126b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126b8:	e8 41 ff ff ff       	call   c00125fe <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00126bd:	50                   	push   eax
c00126be:	e8 ab ff ff ff       	call   c001266e <Dbg::logs(char*)>
c00126c3:	83 c4 20             	add    esp,0x20
c00126c6:	c3                   	ret    

c00126c7 <Dbg::kprintf(char const*, ...)>:
c00126c7:	55                   	push   ebp
c00126c8:	57                   	push   edi
c00126c9:	56                   	push   esi
c00126ca:	53                   	push   ebx
c00126cb:	83 ec 0c             	sub    esp,0xc
c00126ce:	8d 44 24 24          	lea    eax,[esp+0x24]
c00126d2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00126d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00126da:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00126dd:	84 c0                	test   al,al
c00126df:	74 4a                	je     c001272b <Dbg::kprintf(char const*, ...)+0x64>
c00126e1:	31 db                	xor    ebx,ebx
c00126e3:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00126e6:	3c 25                	cmp    al,0x25
c00126e8:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00126eb:	0f 85 e4 00 00 00    	jne    c00127d5 <Dbg::kprintf(char const*, ...)+0x10e>
c00126f1:	83 c3 02             	add    ebx,0x2
c00126f4:	8a 07                	mov    al,BYTE PTR [edi]
c00126f6:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00126f9:	83 e8 25             	sub    eax,0x25
c00126fc:	3c 53                	cmp    al,0x53
c00126fe:	0f 87 ba 00 00 00    	ja     c00127be <Dbg::kprintf(char const*, ...)+0xf7>
c0012704:	0f b6 c0             	movzx  eax,al
c0012707:	ff 24 85 c4 a6 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd593c]
c001270e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012712:	89 c8                	mov    eax,ecx
c0012714:	83 c1 04             	add    ecx,0x4
c0012717:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001271b:	ff 30                	push   DWORD PTR [eax]
c001271d:	e8 69 ff ff ff       	call   c001268b <Dbg::logWriteInt(unsigned int)>
c0012722:	5f                   	pop    edi
c0012723:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012727:	84 c0                	test   al,al
c0012729:	75 b8                	jne    c00126e3 <Dbg::kprintf(char const*, ...)+0x1c>
c001272b:	83 c4 0c             	add    esp,0xc
c001272e:	5b                   	pop    ebx
c001272f:	5e                   	pop    esi
c0012730:	5f                   	pop    edi
c0012731:	5d                   	pop    ebp
c0012732:	c3                   	ret    
c0012733:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012737:	89 c8                	mov    eax,ecx
c0012739:	83 c1 04             	add    ecx,0x4
c001273c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012740:	ff 30                	push   DWORD PTR [eax]
c0012742:	e8 27 ff ff ff       	call   c001266e <Dbg::logs(char*)>
c0012747:	58                   	pop    eax
c0012748:	eb d9                	jmp    c0012723 <Dbg::kprintf(char const*, ...)+0x5c>
c001274a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001274e:	89 d0                	mov    eax,edx
c0012750:	83 c2 04             	add    edx,0x4
c0012753:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012757:	ff 30                	push   DWORD PTR [eax]
c0012759:	e8 2d ff ff ff       	call   c001268b <Dbg::logWriteInt(unsigned int)>
c001275e:	58                   	pop    eax
c001275f:	eb c2                	jmp    c0012723 <Dbg::kprintf(char const*, ...)+0x5c>
c0012761:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012765:	89 d0                	mov    eax,edx
c0012767:	83 c2 04             	add    edx,0x4
c001276a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001276d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012771:	50                   	push   eax
c0012772:	e8 e0 fe ff ff       	call   c0012657 <Dbg::logc(char)>
c0012777:	58                   	pop    eax
c0012778:	eb a9                	jmp    c0012723 <Dbg::kprintf(char const*, ...)+0x5c>
c001277a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001277e:	89 c8                	mov    eax,ecx
c0012780:	83 c1 04             	add    ecx,0x4
c0012783:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012787:	6a 10                	push   0x10
c0012789:	ff 30                	push   DWORD PTR [eax]
c001278b:	e8 18 ff ff ff       	call   c00126a8 <Dbg::logWriteIntBase(unsigned int, int)>
c0012790:	59                   	pop    ecx
c0012791:	5f                   	pop    edi
c0012792:	eb 8f                	jmp    c0012723 <Dbg::kprintf(char const*, ...)+0x5c>
c0012794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012798:	89 d0                	mov    eax,edx
c001279a:	83 c2 08             	add    edx,0x8
c001279d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00127a1:	6a 10                	push   0x10
c00127a3:	ff 30                	push   DWORD PTR [eax]
c00127a5:	e8 fe fe ff ff       	call   c00126a8 <Dbg::logWriteIntBase(unsigned int, int)>
c00127aa:	58                   	pop    eax
c00127ab:	5a                   	pop    edx
c00127ac:	e9 72 ff ff ff       	jmp    c0012723 <Dbg::kprintf(char const*, ...)+0x5c>
c00127b1:	6a 25                	push   0x25
c00127b3:	e8 9f fe ff ff       	call   c0012657 <Dbg::logc(char)>
c00127b8:	58                   	pop    eax
c00127b9:	e9 65 ff ff ff       	jmp    c0012723 <Dbg::kprintf(char const*, ...)+0x5c>
c00127be:	6a 25                	push   0x25
c00127c0:	e8 92 fe ff ff       	call   c0012657 <Dbg::logc(char)>
c00127c5:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00127c8:	50                   	push   eax
c00127c9:	e8 89 fe ff ff       	call   c0012657 <Dbg::logc(char)>
c00127ce:	5a                   	pop    edx
c00127cf:	59                   	pop    ecx
c00127d0:	e9 4e ff ff ff       	jmp    c0012723 <Dbg::kprintf(char const*, ...)+0x5c>
c00127d5:	50                   	push   eax
c00127d6:	89 eb                	mov    ebx,ebp
c00127d8:	e8 7a fe ff ff       	call   c0012657 <Dbg::logc(char)>
c00127dd:	89 fd                	mov    ebp,edi
c00127df:	58                   	pop    eax
c00127e0:	e9 3e ff ff ff       	jmp    c0012723 <Dbg::kprintf(char const*, ...)+0x5c>
c00127e5:	90                   	nop

c00127e6 <File::read(unsigned long long, void*, int*)>:
c00127e6:	53                   	push   ebx
c00127e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127eb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127ef:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00127f6:	3c 19                	cmp    al,0x19
c00127f8:	77 35                	ja     c001282f <File::read(unsigned long long, void*, int*)+0x49>
c00127fa:	8b 04 85 00 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2100]
c0012801:	85 c0                	test   eax,eax
c0012803:	74 2a                	je     c001282f <File::read(unsigned long long, void*, int*)+0x49>
c0012805:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001280b:	85 c0                	test   eax,eax
c001280d:	74 20                	je     c001282f <File::read(unsigned long long, void*, int*)+0x49>
c001280f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012813:	74 21                	je     c0012836 <File::read(unsigned long long, void*, int*)+0x50>
c0012815:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012817:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001281b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012821:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012825:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012829:	5b                   	pop    ebx
c001282a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001282d:	ff e0                	jmp    eax
c001282f:	b8 0b 00 00 00       	mov    eax,0xb
c0012834:	eb 05                	jmp    c001283b <File::read(unsigned long long, void*, int*)+0x55>
c0012836:	b8 05 00 00 00       	mov    eax,0x5
c001283b:	5b                   	pop    ebx
c001283c:	c3                   	ret    
c001283d:	90                   	nop

c001283e <File::write(unsigned long long, void*, int*)>:
c001283e:	53                   	push   ebx
c001283f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012843:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012847:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001284e:	3c 19                	cmp    al,0x19
c0012850:	77 35                	ja     c0012887 <File::write(unsigned long long, void*, int*)+0x49>
c0012852:	8b 04 85 00 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2100]
c0012859:	85 c0                	test   eax,eax
c001285b:	74 2a                	je     c0012887 <File::write(unsigned long long, void*, int*)+0x49>
c001285d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012863:	85 c0                	test   eax,eax
c0012865:	74 20                	je     c0012887 <File::write(unsigned long long, void*, int*)+0x49>
c0012867:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001286b:	74 21                	je     c001288e <File::write(unsigned long long, void*, int*)+0x50>
c001286d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001286f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012873:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012879:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001287d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012881:	5b                   	pop    ebx
c0012882:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012885:	ff e0                	jmp    eax
c0012887:	b8 0b 00 00 00       	mov    eax,0xb
c001288c:	eb 05                	jmp    c0012893 <File::write(unsigned long long, void*, int*)+0x55>
c001288e:	b8 05 00 00 00       	mov    eax,0x5
c0012893:	5b                   	pop    ebx
c0012894:	c3                   	ret    
c0012895:	90                   	nop

c0012896 <Directory::read(unsigned long long, void*, int*)>:
c0012896:	53                   	push   ebx
c0012897:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001289b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001289f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00128a6:	3c 19                	cmp    al,0x19
c00128a8:	77 35                	ja     c00128df <Directory::read(unsigned long long, void*, int*)+0x49>
c00128aa:	8b 04 85 00 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2100]
c00128b1:	85 c0                	test   eax,eax
c00128b3:	74 2a                	je     c00128df <Directory::read(unsigned long long, void*, int*)+0x49>
c00128b5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128bb:	85 c0                	test   eax,eax
c00128bd:	74 20                	je     c00128df <Directory::read(unsigned long long, void*, int*)+0x49>
c00128bf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128c3:	74 21                	je     c00128e6 <Directory::read(unsigned long long, void*, int*)+0x50>
c00128c5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128cb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128d9:	5b                   	pop    ebx
c00128da:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00128dd:	ff e0                	jmp    eax
c00128df:	b8 0b 00 00 00       	mov    eax,0xb
c00128e4:	eb 05                	jmp    c00128eb <Directory::read(unsigned long long, void*, int*)+0x55>
c00128e6:	b8 05 00 00 00       	mov    eax,0x5
c00128eb:	5b                   	pop    ebx
c00128ec:	c3                   	ret    
c00128ed:	90                   	nop

c00128ee <Directory::write(unsigned long long, void*, int*)>:
c00128ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128f2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00128f9:	b8 0b 00 00 00       	mov    eax,0xb
c00128fe:	80 fa 19             	cmp    dl,0x19
c0012901:	77 18                	ja     c001291b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012903:	8b 14 95 00 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2100]
c001290a:	85 d2                	test   edx,edx
c001290c:	74 0d                	je     c001291b <Directory::write(unsigned long long, void*, int*)+0x2d>
c001290e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012915:	19 c0                	sbb    eax,eax
c0012917:	83 e0 0a             	and    eax,0xa
c001291a:	40                   	inc    eax
c001291b:	c3                   	ret    

c001291c <File::isAtty()>:
c001291c:	31 c0                	xor    eax,eax
c001291e:	c3                   	ret    
c001291f:	90                   	nop

c0012920 <Directory::isAtty()>:
c0012920:	31 c0                	xor    eax,eax
c0012922:	c3                   	ret    
c0012923:	90                   	nop

c0012924 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012924:	b8 0a 00 00 00       	mov    eax,0xa
c0012929:	c3                   	ret    

c001292a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001292a:	b8 0a 00 00 00       	mov    eax,0xa
c001292f:	c3                   	ret    

c0012930 <Filesystem::getFileFirstSector(char const*)>:
c0012930:	31 c0                	xor    eax,eax
c0012932:	31 d2                	xor    edx,edx
c0012934:	c3                   	ret    
c0012935:	90                   	nop

c0012936 <File::~File()>:
c0012936:	83 ec 0c             	sub    esp,0xc
c0012939:	ba 84 a8 02 c0       	mov    edx,0xc002a884
c001293e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012942:	89 10                	mov    DWORD PTR [eax],edx
c0012944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012948:	83 ec 0c             	sub    esp,0xc
c001294b:	50                   	push   eax
c001294c:	e8 69 e6 ff ff       	call   c0010fba <UnixFile::~UnixFile()>
c0012951:	83 c4 10             	add    esp,0x10
c0012954:	90                   	nop
c0012955:	83 c4 0c             	add    esp,0xc
c0012958:	c3                   	ret    
c0012959:	90                   	nop

c001295a <File::~File()>:
c001295a:	83 ec 0c             	sub    esp,0xc
c001295d:	83 ec 0c             	sub    esp,0xc
c0012960:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012964:	e8 cd ff ff ff       	call   c0012936 <File::~File()>
c0012969:	83 c4 10             	add    esp,0x10
c001296c:	83 ec 08             	sub    esp,0x8
c001296f:	68 14 01 00 00       	push   0x114
c0012974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012978:	e8 72 fc ff ff       	call   c00125ef <operator delete(void*, unsigned long)>
c001297d:	83 c4 10             	add    esp,0x10
c0012980:	83 c4 0c             	add    esp,0xc
c0012983:	c3                   	ret    

c0012984 <Directory::~Directory()>:
c0012984:	83 ec 0c             	sub    esp,0xc
c0012987:	ba a0 a8 02 c0       	mov    edx,0xc002a8a0
c001298c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012990:	89 10                	mov    DWORD PTR [eax],edx
c0012992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012996:	83 ec 0c             	sub    esp,0xc
c0012999:	50                   	push   eax
c001299a:	e8 1b e6 ff ff       	call   c0010fba <UnixFile::~UnixFile()>
c001299f:	83 c4 10             	add    esp,0x10
c00129a2:	90                   	nop
c00129a3:	83 c4 0c             	add    esp,0xc
c00129a6:	c3                   	ret    
c00129a7:	90                   	nop

c00129a8 <Directory::~Directory()>:
c00129a8:	83 ec 0c             	sub    esp,0xc
c00129ab:	83 ec 0c             	sub    esp,0xc
c00129ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129b2:	e8 cd ff ff ff       	call   c0012984 <Directory::~Directory()>
c00129b7:	83 c4 10             	add    esp,0x10
c00129ba:	83 ec 08             	sub    esp,0x8
c00129bd:	68 14 01 00 00       	push   0x114
c00129c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129c6:	e8 24 fc ff ff       	call   c00125ef <operator delete(void*, unsigned long)>
c00129cb:	83 c4 10             	add    esp,0x10
c00129ce:	83 c4 0c             	add    esp,0xc
c00129d1:	c3                   	ret    

c00129d2 <Filesystem::Filesystem()>:
c00129d2:	ba 1c a8 02 c0       	mov    edx,0xc002a81c
c00129d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129db:	89 10                	mov    DWORD PTR [eax],edx
c00129dd:	8b 15 74 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da74
c00129e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129e7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00129ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129ee:	a3 74 da 02 c0       	mov    ds:0xc002da74,eax
c00129f3:	90                   	nop
c00129f4:	c3                   	ret    
c00129f5:	90                   	nop

c00129f6 <Filesystem::~Filesystem()>:
c00129f6:	ba 1c a8 02 c0       	mov    edx,0xc002a81c
c00129fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129ff:	89 10                	mov    DWORD PTR [eax],edx
c0012a01:	90                   	nop
c0012a02:	c3                   	ret    
c0012a03:	90                   	nop

c0012a04 <Filesystem::~Filesystem()>:
c0012a04:	83 ec 0c             	sub    esp,0xc
c0012a07:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012a0b:	e8 e6 ff ff ff       	call   c00129f6 <Filesystem::~Filesystem()>
c0012a10:	83 c4 04             	add    esp,0x4
c0012a13:	83 ec 08             	sub    esp,0x8
c0012a16:	6a 08                	push   0x8
c0012a18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a1c:	e8 ce fb ff ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0012a21:	83 c4 10             	add    esp,0x10
c0012a24:	83 c4 0c             	add    esp,0xc
c0012a27:	c3                   	ret    

c0012a28 <Fs::getcwd(Process*, char*, int)>:
c0012a28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a2c:	31 c0                	xor    eax,eax
c0012a2e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012a31:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012a35:	7d 15                	jge    c0012a4c <Fs::getcwd(Process*, char*, int)+0x24>
c0012a37:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a3b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012a42:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012a45:	84 c9                	test   cl,cl
c0012a47:	74 06                	je     c0012a4f <Fs::getcwd(Process*, char*, int)+0x27>
c0012a49:	40                   	inc    eax
c0012a4a:	eb e2                	jmp    c0012a2e <Fs::getcwd(Process*, char*, int)+0x6>
c0012a4c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012a4f:	31 c0                	xor    eax,eax
c0012a51:	c3                   	ret    

c0012a52 <Fs::initVFS()>:
c0012a52:	83 ec 18             	sub    esp,0x18
c0012a55:	6a 08                	push   0x8
c0012a57:	e8 3d cb ff ff       	call   c000f599 <malloc>
c0012a5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a5f:	e8 cc de 00 00       	call   c0020930 <FAT::FAT()>
c0012a64:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012a6b:	e8 29 cb ff ff       	call   c000f599 <malloc>
c0012a70:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a73:	e8 c4 f0 00 00       	call   c0021b3c <ISO9660::ISO9660()>
c0012a78:	83 c4 1c             	add    esp,0x1c
c0012a7b:	c3                   	ret    

c0012a7c <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012a7c:	55                   	push   ebp
c0012a7d:	57                   	push   edi
c0012a7e:	56                   	push   esi
c0012a7f:	53                   	push   ebx
c0012a80:	81 ec 10 04 00 00    	sub    esp,0x410
c0012a86:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012a8d:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012a94:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012a9b:	68 00 04 00 00       	push   0x400
c0012aa0:	6a 00                	push   0x0
c0012aa2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012aa6:	56                   	push   esi
c0012aa7:	e8 a4 dc fe ff       	call   c0000750 <memset>
c0012aac:	83 c4 10             	add    esp,0x10
c0012aaf:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012ab3:	75 0b                	jne    c0012ac0 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012ab5:	50                   	push   eax
c0012ab6:	50                   	push   eax
c0012ab7:	57                   	push   edi
c0012ab8:	56                   	push   esi
c0012ab9:	e8 4e dd fe ff       	call   c000080c <strcpy>
c0012abe:	eb 41                	jmp    c0012b01 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012ac0:	8a 07                	mov    al,BYTE PTR [edi]
c0012ac2:	3c 5c                	cmp    al,0x5c
c0012ac4:	74 04                	je     c0012aca <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012ac6:	3c 2f                	cmp    al,0x2f
c0012ac8:	75 18                	jne    c0012ae2 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012aca:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012acd:	3c 60                	cmp    al,0x60
c0012acf:	7e 03                	jle    c0012ad4 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012ad1:	83 e8 20             	sub    eax,0x20
c0012ad4:	88 04 24             	mov    BYTE PTR [esp],al
c0012ad7:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012ade:	50                   	push   eax
c0012adf:	50                   	push   eax
c0012ae0:	eb 18                	jmp    c0012afa <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012ae2:	50                   	push   eax
c0012ae3:	50                   	push   eax
c0012ae4:	55                   	push   ebp
c0012ae5:	56                   	push   esi
c0012ae6:	e8 21 dd fe ff       	call   c000080c <strcpy>
c0012aeb:	5a                   	pop    edx
c0012aec:	59                   	pop    ecx
c0012aed:	68 0a bb 02 c0       	push   0xc002bb0a
c0012af2:	56                   	push   esi
c0012af3:	e8 54 de fe ff       	call   c000094c <strcat>
c0012af8:	5d                   	pop    ebp
c0012af9:	58                   	pop    eax
c0012afa:	57                   	push   edi
c0012afb:	56                   	push   esi
c0012afc:	e8 4b de fe ff       	call   c000094c <strcat>
c0012b01:	83 c4 10             	add    esp,0x10
c0012b04:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012b07:	3c 60                	cmp    al,0x60
c0012b09:	7e 03                	jle    c0012b0e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012b0b:	83 e8 20             	sub    eax,0x20
c0012b0e:	88 04 24             	mov    BYTE PTR [esp],al
c0012b11:	88 03                	mov    BYTE PTR [ebx],al
c0012b13:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012b1a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012b20:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012b24:	bf 03 00 00 00       	mov    edi,0x3
c0012b29:	b8 03 00 00 00       	mov    eax,0x3
c0012b2e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012b31:	84 d2                	test   dl,dl
c0012b33:	0f 84 91 00 00 00    	je     c0012bca <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012b39:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012b3c:	80 fa 5c             	cmp    dl,0x5c
c0012b3f:	74 05                	je     c0012b46 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012b41:	80 fa 2f             	cmp    dl,0x2f
c0012b44:	75 12                	jne    c0012b58 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012b46:	89 c5                	mov    ebp,eax
c0012b48:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012b4d:	74 09                	je     c0012b58 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012b4f:	40                   	inc    eax
c0012b50:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012b54:	89 cf                	mov    edi,ecx
c0012b56:	eb d6                	jmp    c0012b2e <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012b58:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012b5d:	75 5b                	jne    c0012bba <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b5f:	80 fa 2e             	cmp    dl,0x2e
c0012b62:	75 56                	jne    c0012bba <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b64:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012b68:	74 19                	je     c0012b83 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012b6a:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b6f:	74 53                	je     c0012bc4 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012b71:	89 f9                	mov    ecx,edi
c0012b73:	41                   	inc    ecx
c0012b74:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b77:	80 fa 2f             	cmp    dl,0x2f
c0012b7a:	74 f7                	je     c0012b73 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b7c:	80 fa 5c             	cmp    dl,0x5c
c0012b7f:	74 f2                	je     c0012b73 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b81:	eb d1                	jmp    c0012b54 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b83:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b88:	74 3a                	je     c0012bc4 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012b8a:	83 f8 03             	cmp    eax,0x3
c0012b8d:	74 c5                	je     c0012b54 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b8f:	41                   	inc    ecx
c0012b90:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b93:	80 fa 2f             	cmp    dl,0x2f
c0012b96:	74 f7                	je     c0012b8f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012b98:	80 fa 5c             	cmp    dl,0x5c
c0012b9b:	74 f2                	je     c0012b8f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012b9d:	48                   	dec    eax
c0012b9e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ba2:	75 06                	jne    c0012baa <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012ba4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ba8:	eb f3                	jmp    c0012b9d <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012baa:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012bae:	74 07                	je     c0012bb7 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012bb0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012bb4:	48                   	dec    eax
c0012bb5:	eb f3                	jmp    c0012baa <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012bb7:	40                   	inc    eax
c0012bb8:	eb 9a                	jmp    c0012b54 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bba:	80 fa 2f             	cmp    dl,0x2f
c0012bbd:	74 95                	je     c0012b54 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bbf:	80 fa 5c             	cmp    dl,0x5c
c0012bc2:	74 90                	je     c0012b54 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bc4:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012bc7:	40                   	inc    eax
c0012bc8:	eb 8a                	jmp    c0012b54 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bca:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012bce:	83 ec 0c             	sub    esp,0xc
c0012bd1:	53                   	push   ebx
c0012bd2:	e8 95 db fe ff       	call   c000076c <strlen>
c0012bd7:	83 c4 10             	add    esp,0x10
c0012bda:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012bdf:	75 26                	jne    c0012c07 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012be1:	83 ec 0c             	sub    esp,0xc
c0012be4:	53                   	push   ebx
c0012be5:	e8 82 db fe ff       	call   c000076c <strlen>
c0012bea:	83 c4 10             	add    esp,0x10
c0012bed:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012bf2:	74 26                	je     c0012c1a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012bf4:	83 ec 0c             	sub    esp,0xc
c0012bf7:	53                   	push   ebx
c0012bf8:	e8 6f db fe ff       	call   c000076c <strlen>
c0012bfd:	83 c4 10             	add    esp,0x10
c0012c00:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012c05:	eb c7                	jmp    c0012bce <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012c07:	83 ec 0c             	sub    esp,0xc
c0012c0a:	53                   	push   ebx
c0012c0b:	e8 5c db fe ff       	call   c000076c <strlen>
c0012c10:	83 c4 10             	add    esp,0x10
c0012c13:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012c18:	74 c7                	je     c0012be1 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012c1a:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012c20:	5b                   	pop    ebx
c0012c21:	5e                   	pop    esi
c0012c22:	5f                   	pop    edi
c0012c23:	5d                   	pop    ebp
c0012c24:	c3                   	ret    
c0012c25:	90                   	nop

c0012c26 <File::File(char const*, Process*)>:
c0012c26:	83 ec 0c             	sub    esp,0xc
c0012c29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c2d:	83 ec 08             	sub    esp,0x8
c0012c30:	6a 00                	push   0x0
c0012c32:	50                   	push   eax
c0012c33:	e8 a0 e1 ff ff       	call   c0010dd8 <UnixFile::UnixFile(int)>
c0012c38:	83 c4 10             	add    esp,0x10
c0012c3b:	ba 84 a8 02 c0       	mov    edx,0xc002a884
c0012c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c44:	89 10                	mov    DWORD PTR [eax],edx
c0012c46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c4a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c54:	83 c0 0d             	add    eax,0xd
c0012c57:	83 ec 04             	sub    esp,0x4
c0012c5a:	52                   	push   edx
c0012c5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c5f:	50                   	push   eax
c0012c60:	e8 17 fe ff ff       	call   c0012a7c <Fs::standardiseFiles(char*, char const*, char const*)>
c0012c65:	83 c4 10             	add    esp,0x10
c0012c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c6c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c6f:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c76:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c80:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012c84:	90                   	nop
c0012c85:	83 c4 0c             	add    esp,0xc
c0012c88:	c3                   	ret    
c0012c89:	90                   	nop

c0012c8a <File::open(FileOpenMode)>:
c0012c8a:	53                   	push   ebx
c0012c8b:	b8 0b 00 00 00       	mov    eax,0xb
c0012c90:	83 ec 08             	sub    esp,0x8
c0012c93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c97:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012c9e:	80 fa 19             	cmp    dl,0x19
c0012ca1:	77 40                	ja     c0012ce3 <File::open(FileOpenMode)+0x59>
c0012ca3:	8b 14 95 00 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2100]
c0012caa:	85 d2                	test   edx,edx
c0012cac:	74 35                	je     c0012ce3 <File::open(FileOpenMode)+0x59>
c0012cae:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cb4:	85 d2                	test   edx,edx
c0012cb6:	74 2b                	je     c0012ce3 <File::open(FileOpenMode)+0x59>
c0012cb8:	b8 06 00 00 00       	mov    eax,0x6
c0012cbd:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012cc1:	75 20                	jne    c0012ce3 <File::open(FileOpenMode)+0x59>
c0012cc3:	8b 02                	mov    eax,DWORD PTR [edx]
c0012cc5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012ccb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ccf:	51                   	push   ecx
c0012cd0:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012cd3:	51                   	push   ecx
c0012cd4:	52                   	push   edx
c0012cd5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012cd8:	83 c4 10             	add    esp,0x10
c0012cdb:	85 c0                	test   eax,eax
c0012cdd:	75 04                	jne    c0012ce3 <File::open(FileOpenMode)+0x59>
c0012cdf:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012ce3:	83 c4 08             	add    esp,0x8
c0012ce6:	5b                   	pop    ebx
c0012ce7:	c3                   	ret    

c0012ce8 <File::close()>:
c0012ce8:	53                   	push   ebx
c0012ce9:	b8 0b 00 00 00       	mov    eax,0xb
c0012cee:	83 ec 08             	sub    esp,0x8
c0012cf1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012cf5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012cfc:	80 fa 19             	cmp    dl,0x19
c0012cff:	77 41                	ja     c0012d42 <File::close()+0x5a>
c0012d01:	8b 1c 95 00 df 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2100]
c0012d08:	85 db                	test   ebx,ebx
c0012d0a:	74 36                	je     c0012d42 <File::close()+0x5a>
c0012d0c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d13:	74 2d                	je     c0012d42 <File::close()+0x5a>
c0012d15:	b8 05 00 00 00       	mov    eax,0x5
c0012d1a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d1e:	74 22                	je     c0012d42 <File::close()+0x5a>
c0012d20:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d24:	8b 04 95 00 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2100]
c0012d2b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d31:	53                   	push   ebx
c0012d32:	53                   	push   ebx
c0012d33:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d35:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d3b:	50                   	push   eax
c0012d3c:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012d3f:	83 c4 10             	add    esp,0x10
c0012d42:	83 c4 08             	add    esp,0x8
c0012d45:	5b                   	pop    ebx
c0012d46:	c3                   	ret    
c0012d47:	90                   	nop

c0012d48 <File::seek(unsigned long long)>:
c0012d48:	56                   	push   esi
c0012d49:	53                   	push   ebx
c0012d4a:	b8 0b 00 00 00       	mov    eax,0xb
c0012d4f:	51                   	push   ecx
c0012d50:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012d54:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012d58:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012d5f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d63:	80 fa 19             	cmp    dl,0x19
c0012d66:	77 31                	ja     c0012d99 <File::seek(unsigned long long)+0x51>
c0012d68:	8b 14 95 00 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2100]
c0012d6f:	85 d2                	test   edx,edx
c0012d71:	74 26                	je     c0012d99 <File::seek(unsigned long long)+0x51>
c0012d73:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d79:	85 d2                	test   edx,edx
c0012d7b:	74 1c                	je     c0012d99 <File::seek(unsigned long long)+0x51>
c0012d7d:	b8 05 00 00 00       	mov    eax,0x5
c0012d82:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012d86:	74 11                	je     c0012d99 <File::seek(unsigned long long)+0x51>
c0012d88:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d8a:	53                   	push   ebx
c0012d8b:	51                   	push   ecx
c0012d8c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012d92:	52                   	push   edx
c0012d93:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012d96:	83 c4 10             	add    esp,0x10
c0012d99:	5a                   	pop    edx
c0012d9a:	5b                   	pop    ebx
c0012d9b:	5e                   	pop    esi
c0012d9c:	c3                   	ret    
c0012d9d:	90                   	nop

c0012d9e <File::tell(unsigned long long*)>:
c0012d9e:	83 ec 0c             	sub    esp,0xc
c0012da1:	b8 0b 00 00 00       	mov    eax,0xb
c0012da6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012daa:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012db1:	80 fa 19             	cmp    dl,0x19
c0012db4:	77 34                	ja     c0012dea <File::tell(unsigned long long*)+0x4c>
c0012db6:	8b 14 95 00 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2100]
c0012dbd:	85 d2                	test   edx,edx
c0012dbf:	74 29                	je     c0012dea <File::tell(unsigned long long*)+0x4c>
c0012dc1:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012dc7:	85 d2                	test   edx,edx
c0012dc9:	74 1f                	je     c0012dea <File::tell(unsigned long long*)+0x4c>
c0012dcb:	b8 05 00 00 00       	mov    eax,0x5
c0012dd0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012dd4:	74 14                	je     c0012dea <File::tell(unsigned long long*)+0x4c>
c0012dd6:	50                   	push   eax
c0012dd7:	8b 02                	mov    eax,DWORD PTR [edx]
c0012dd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ddd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012de3:	52                   	push   edx
c0012de4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012de7:	83 c4 10             	add    esp,0x10
c0012dea:	83 c4 0c             	add    esp,0xc
c0012ded:	c3                   	ret    

c0012dee <File::rewind()>:
c0012dee:	83 ec 10             	sub    esp,0x10
c0012df1:	6a 00                	push   0x0
c0012df3:	6a 00                	push   0x0
c0012df5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012df9:	e8 4a ff ff ff       	call   c0012d48 <File::seek(unsigned long long)>
c0012dfe:	83 c4 1c             	add    esp,0x1c
c0012e01:	c3                   	ret    

c0012e02 <File::unlink()>:
c0012e02:	83 ec 0c             	sub    esp,0xc
c0012e05:	b8 0b 00 00 00       	mov    eax,0xb
c0012e0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e0e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e15:	80 f9 19             	cmp    cl,0x19
c0012e18:	77 2f                	ja     c0012e49 <File::unlink()+0x47>
c0012e1a:	8b 0c 8d 00 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2100]
c0012e21:	85 c9                	test   ecx,ecx
c0012e23:	74 24                	je     c0012e49 <File::unlink()+0x47>
c0012e25:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e2b:	85 c9                	test   ecx,ecx
c0012e2d:	74 1a                	je     c0012e49 <File::unlink()+0x47>
c0012e2f:	b8 06 00 00 00       	mov    eax,0x6
c0012e34:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e38:	75 0f                	jne    c0012e49 <File::unlink()+0x47>
c0012e3a:	83 c2 0d             	add    edx,0xd
c0012e3d:	50                   	push   eax
c0012e3e:	50                   	push   eax
c0012e3f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e41:	52                   	push   edx
c0012e42:	51                   	push   ecx
c0012e43:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012e46:	83 c4 10             	add    esp,0x10
c0012e49:	83 c4 0c             	add    esp,0xc
c0012e4c:	c3                   	ret    
c0012e4d:	90                   	nop

c0012e4e <File::rename(char const*)>:
c0012e4e:	83 ec 0c             	sub    esp,0xc
c0012e51:	b8 0b 00 00 00       	mov    eax,0xb
c0012e56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e5a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e61:	80 f9 19             	cmp    cl,0x19
c0012e64:	77 32                	ja     c0012e98 <File::rename(char const*)+0x4a>
c0012e66:	8b 0c 8d 00 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2100]
c0012e6d:	85 c9                	test   ecx,ecx
c0012e6f:	74 27                	je     c0012e98 <File::rename(char const*)+0x4a>
c0012e71:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e77:	85 c9                	test   ecx,ecx
c0012e79:	74 1d                	je     c0012e98 <File::rename(char const*)+0x4a>
c0012e7b:	b8 06 00 00 00       	mov    eax,0x6
c0012e80:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e84:	75 12                	jne    c0012e98 <File::rename(char const*)+0x4a>
c0012e86:	83 c2 0d             	add    edx,0xd
c0012e89:	50                   	push   eax
c0012e8a:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e90:	52                   	push   edx
c0012e91:	51                   	push   ecx
c0012e92:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012e95:	83 c4 10             	add    esp,0x10
c0012e98:	83 c4 0c             	add    esp,0xc
c0012e9b:	c3                   	ret    

c0012e9c <File::chfatattr(unsigned char, unsigned char)>:
c0012e9c:	57                   	push   edi
c0012e9d:	b8 0b 00 00 00       	mov    eax,0xb
c0012ea2:	56                   	push   esi
c0012ea3:	53                   	push   ebx
c0012ea4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ea8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012eac:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012eb3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012eb7:	80 f9 19             	cmp    cl,0x19
c0012eba:	77 37                	ja     c0012ef3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ebc:	8b 0c 8d 00 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2100]
c0012ec3:	85 c9                	test   ecx,ecx
c0012ec5:	74 2c                	je     c0012ef3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ec7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ecd:	85 c9                	test   ecx,ecx
c0012ecf:	74 22                	je     c0012ef3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ed1:	b8 06 00 00 00       	mov    eax,0x6
c0012ed6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012eda:	75 17                	jne    c0012ef3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012edc:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012ede:	89 f0                	mov    eax,esi
c0012ee0:	83 c2 0d             	add    edx,0xd
c0012ee3:	0f b6 f0             	movzx  esi,al
c0012ee6:	0f b6 db             	movzx  ebx,bl
c0012ee9:	56                   	push   esi
c0012eea:	53                   	push   ebx
c0012eeb:	52                   	push   edx
c0012eec:	51                   	push   ecx
c0012eed:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012ef0:	83 c4 10             	add    esp,0x10
c0012ef3:	5b                   	pop    ebx
c0012ef4:	5e                   	pop    esi
c0012ef5:	5f                   	pop    edi
c0012ef6:	c3                   	ret    
c0012ef7:	90                   	nop

c0012ef8 <File::exists()>:
c0012ef8:	83 ec 0c             	sub    esp,0xc
c0012efb:	31 c0                	xor    eax,eax
c0012efd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f01:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f08:	80 f9 19             	cmp    cl,0x19
c0012f0b:	77 24                	ja     c0012f31 <File::exists()+0x39>
c0012f0d:	8b 0c 8d 00 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2100]
c0012f14:	85 c9                	test   ecx,ecx
c0012f16:	74 19                	je     c0012f31 <File::exists()+0x39>
c0012f18:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f1e:	85 c9                	test   ecx,ecx
c0012f20:	74 0f                	je     c0012f31 <File::exists()+0x39>
c0012f22:	83 c2 0d             	add    edx,0xd
c0012f25:	50                   	push   eax
c0012f26:	50                   	push   eax
c0012f27:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f29:	52                   	push   edx
c0012f2a:	51                   	push   ecx
c0012f2b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012f2e:	83 c4 10             	add    esp,0x10
c0012f31:	83 c4 0c             	add    esp,0xc
c0012f34:	c3                   	ret    
c0012f35:	90                   	nop

c0012f36 <File::stat(unsigned long long*, bool*)>:
c0012f36:	56                   	push   esi
c0012f37:	53                   	push   ebx
c0012f38:	50                   	push   eax
c0012f39:	b8 0b 00 00 00       	mov    eax,0xb
c0012f3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f42:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012f46:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f4d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f51:	80 f9 19             	cmp    cl,0x19
c0012f54:	77 3d                	ja     c0012f93 <File::stat(unsigned long long*, bool*)+0x5d>
c0012f56:	8b 0c 8d 00 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2100]
c0012f5d:	85 c9                	test   ecx,ecx
c0012f5f:	74 32                	je     c0012f93 <File::stat(unsigned long long*, bool*)+0x5d>
c0012f61:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f67:	85 c9                	test   ecx,ecx
c0012f69:	74 28                	je     c0012f93 <File::stat(unsigned long long*, bool*)+0x5d>
c0012f6b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f6d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f71:	74 13                	je     c0012f86 <File::stat(unsigned long long*, bool*)+0x50>
c0012f73:	83 ec 04             	sub    esp,0x4
c0012f76:	56                   	push   esi
c0012f77:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012f7d:	51                   	push   ecx
c0012f7e:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012f81:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012f84:	eb 0a                	jmp    c0012f90 <File::stat(unsigned long long*, bool*)+0x5a>
c0012f86:	53                   	push   ebx
c0012f87:	83 c2 0d             	add    edx,0xd
c0012f8a:	56                   	push   esi
c0012f8b:	52                   	push   edx
c0012f8c:	51                   	push   ecx
c0012f8d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012f90:	83 c4 10             	add    esp,0x10
c0012f93:	5a                   	pop    edx
c0012f94:	5b                   	pop    ebx
c0012f95:	5e                   	pop    esi
c0012f96:	c3                   	ret    

c0012f97 <Fs::setcwd(Process*, char*)>:
c0012f97:	55                   	push   ebp
c0012f98:	57                   	push   edi
c0012f99:	56                   	push   esi
c0012f9a:	53                   	push   ebx
c0012f9b:	81 ec 20 02 00 00    	sub    esp,0x220
c0012fa1:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012fa8:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012fae:	57                   	push   edi
c0012faf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012fb6:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012fba:	56                   	push   esi
c0012fbb:	e8 bc fa ff ff       	call   c0012a7c <Fs::standardiseFiles(char*, char const*, char const*)>
c0012fc0:	89 34 24             	mov    DWORD PTR [esp],esi
c0012fc3:	e8 a4 d7 fe ff       	call   c000076c <strlen>
c0012fc8:	83 c4 10             	add    esp,0x10
c0012fcb:	83 f8 02             	cmp    eax,0x2
c0012fce:	77 17                	ja     c0012fe7 <Fs::setcwd(Process*, char*)+0x50>
c0012fd0:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012fd5:	83 e8 41             	sub    eax,0x41
c0012fd8:	83 f8 19             	cmp    eax,0x19
c0012fdb:	76 24                	jbe    c0013001 <Fs::setcwd(Process*, char*)+0x6a>
c0012fdd:	b8 03 00 00 00       	mov    eax,0x3
c0012fe2:	e9 e0 00 00 00       	jmp    c00130c7 <Fs::setcwd(Process*, char*)+0x130>
c0012fe7:	83 ec 0c             	sub    esp,0xc
c0012fea:	56                   	push   esi
c0012feb:	e8 7c d7 fe ff       	call   c000076c <strlen>
c0012ff0:	83 c4 10             	add    esp,0x10
c0012ff3:	83 f8 03             	cmp    eax,0x3
c0012ff6:	75 34                	jne    c001302c <Fs::setcwd(Process*, char*)+0x95>
c0012ff8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012ffd:	75 2d                	jne    c001302c <Fs::setcwd(Process*, char*)+0x95>
c0012fff:	eb cf                	jmp    c0012fd0 <Fs::setcwd(Process*, char*)+0x39>
c0013001:	8b 14 85 00 df 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2100]
c0013008:	b8 05 00 00 00       	mov    eax,0x5
c001300d:	85 d2                	test   edx,edx
c001300f:	0f 84 b2 00 00 00    	je     c00130c7 <Fs::setcwd(Process*, char*)+0x130>
c0013015:	b8 06 00 00 00       	mov    eax,0x6
c001301a:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013021:	0f 85 92 00 00 00    	jne    c00130b9 <Fs::setcwd(Process*, char*)+0x122>
c0013027:	e9 9b 00 00 00       	jmp    c00130c7 <Fs::setcwd(Process*, char*)+0x130>
c001302c:	83 ec 0c             	sub    esp,0xc
c001302f:	68 14 01 00 00       	push   0x114
c0013034:	e8 60 c5 ff ff       	call   c000f599 <malloc>
c0013039:	83 c4 0c             	add    esp,0xc
c001303c:	89 c3                	mov    ebx,eax
c001303e:	55                   	push   ebp
c001303f:	56                   	push   esi
c0013040:	50                   	push   eax
c0013041:	e8 e0 fb ff ff       	call   c0012c26 <File::File(char const*, Process*)>
c0013046:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001304b:	83 c4 0c             	add    esp,0xc
c001304e:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013052:	50                   	push   eax
c0013053:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013057:	50                   	push   eax
c0013058:	53                   	push   ebx
c0013059:	e8 d8 fe ff ff       	call   c0012f36 <File::stat(unsigned long long*, bool*)>
c001305e:	83 c4 10             	add    esp,0x10
c0013061:	83 f8 02             	cmp    eax,0x2
c0013064:	74 04                	je     c001306a <Fs::setcwd(Process*, char*)+0xd3>
c0013066:	85 c0                	test   eax,eax
c0013068:	74 1c                	je     c0013086 <Fs::setcwd(Process*, char*)+0xef>
c001306a:	b8 01 00 00 00       	mov    eax,0x1
c001306f:	85 db                	test   ebx,ebx
c0013071:	74 54                	je     c00130c7 <Fs::setcwd(Process*, char*)+0x130>
c0013073:	83 ec 0c             	sub    esp,0xc
c0013076:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013078:	53                   	push   ebx
c0013079:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001307c:	83 c4 10             	add    esp,0x10
c001307f:	b8 01 00 00 00       	mov    eax,0x1
c0013084:	eb 41                	jmp    c00130c7 <Fs::setcwd(Process*, char*)+0x130>
c0013086:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001308b:	75 1c                	jne    c00130a9 <Fs::setcwd(Process*, char*)+0x112>
c001308d:	b8 02 00 00 00       	mov    eax,0x2
c0013092:	85 db                	test   ebx,ebx
c0013094:	74 31                	je     c00130c7 <Fs::setcwd(Process*, char*)+0x130>
c0013096:	83 ec 0c             	sub    esp,0xc
c0013099:	8b 03                	mov    eax,DWORD PTR [ebx]
c001309b:	53                   	push   ebx
c001309c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001309f:	83 c4 10             	add    esp,0x10
c00130a2:	b8 02 00 00 00       	mov    eax,0x2
c00130a7:	eb 1e                	jmp    c00130c7 <Fs::setcwd(Process*, char*)+0x130>
c00130a9:	85 db                	test   ebx,ebx
c00130ab:	74 0c                	je     c00130b9 <Fs::setcwd(Process*, char*)+0x122>
c00130ad:	83 ec 0c             	sub    esp,0xc
c00130b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130b2:	53                   	push   ebx
c00130b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130b6:	83 c4 10             	add    esp,0x10
c00130b9:	50                   	push   eax
c00130ba:	50                   	push   eax
c00130bb:	56                   	push   esi
c00130bc:	57                   	push   edi
c00130bd:	e8 4a d7 fe ff       	call   c000080c <strcpy>
c00130c2:	83 c4 10             	add    esp,0x10
c00130c5:	31 c0                	xor    eax,eax
c00130c7:	81 c4 1c 02 00 00    	add    esp,0x21c
c00130cd:	5b                   	pop    ebx
c00130ce:	5e                   	pop    esi
c00130cf:	5f                   	pop    edi
c00130d0:	5d                   	pop    ebp
c00130d1:	c3                   	ret    

c00130d2 <Directory::Directory(char const*, Process*)>:
c00130d2:	83 ec 0c             	sub    esp,0xc
c00130d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130d9:	83 ec 08             	sub    esp,0x8
c00130dc:	6a 00                	push   0x0
c00130de:	50                   	push   eax
c00130df:	e8 f4 dc ff ff       	call   c0010dd8 <UnixFile::UnixFile(int)>
c00130e4:	83 c4 10             	add    esp,0x10
c00130e7:	ba a0 a8 02 c0       	mov    edx,0xc002a8a0
c00130ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130f0:	89 10                	mov    DWORD PTR [eax],edx
c00130f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130f6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00130fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013100:	83 c0 0d             	add    eax,0xd
c0013103:	83 ec 04             	sub    esp,0x4
c0013106:	52                   	push   edx
c0013107:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001310b:	50                   	push   eax
c001310c:	e8 6b f9 ff ff       	call   c0012a7c <Fs::standardiseFiles(char*, char const*, char const*)>
c0013111:	83 c4 10             	add    esp,0x10
c0013114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013118:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001311b:	8d 50 bf             	lea    edx,[eax-0x41]
c001311e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013122:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001312c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013130:	90                   	nop
c0013131:	83 c4 0c             	add    esp,0xc
c0013134:	c3                   	ret    
c0013135:	90                   	nop

c0013136 <Directory::open()>:
c0013136:	53                   	push   ebx
c0013137:	b8 0b 00 00 00       	mov    eax,0xb
c001313c:	83 ec 08             	sub    esp,0x8
c001313f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013143:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001314a:	80 fa 19             	cmp    dl,0x19
c001314d:	77 3d                	ja     c001318c <Directory::open()+0x56>
c001314f:	8b 14 95 00 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2100]
c0013156:	85 d2                	test   edx,edx
c0013158:	74 32                	je     c001318c <Directory::open()+0x56>
c001315a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013160:	85 d2                	test   edx,edx
c0013162:	74 28                	je     c001318c <Directory::open()+0x56>
c0013164:	b8 06 00 00 00       	mov    eax,0x6
c0013169:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001316d:	75 1d                	jne    c001318c <Directory::open()+0x56>
c001316f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013175:	50                   	push   eax
c0013176:	8b 02                	mov    eax,DWORD PTR [edx]
c0013178:	51                   	push   ecx
c0013179:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001317c:	51                   	push   ecx
c001317d:	52                   	push   edx
c001317e:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013181:	83 c4 10             	add    esp,0x10
c0013184:	85 c0                	test   eax,eax
c0013186:	75 04                	jne    c001318c <Directory::open()+0x56>
c0013188:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001318c:	83 c4 08             	add    esp,0x8
c001318f:	5b                   	pop    ebx
c0013190:	c3                   	ret    
c0013191:	90                   	nop

c0013192 <Directory::close()>:
c0013192:	53                   	push   ebx
c0013193:	b8 0b 00 00 00       	mov    eax,0xb
c0013198:	83 ec 08             	sub    esp,0x8
c001319b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001319f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00131a6:	80 fa 19             	cmp    dl,0x19
c00131a9:	77 41                	ja     c00131ec <Directory::close()+0x5a>
c00131ab:	8b 1c 95 00 df 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2100]
c00131b2:	85 db                	test   ebx,ebx
c00131b4:	74 36                	je     c00131ec <Directory::close()+0x5a>
c00131b6:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00131bd:	74 2d                	je     c00131ec <Directory::close()+0x5a>
c00131bf:	b8 05 00 00 00       	mov    eax,0x5
c00131c4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00131c8:	74 22                	je     c00131ec <Directory::close()+0x5a>
c00131ca:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00131ce:	8b 04 95 00 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2100]
c00131d5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00131db:	53                   	push   ebx
c00131dc:	53                   	push   ebx
c00131dd:	8b 10                	mov    edx,DWORD PTR [eax]
c00131df:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00131e5:	50                   	push   eax
c00131e6:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00131e9:	83 c4 10             	add    esp,0x10
c00131ec:	83 c4 08             	add    esp,0x8
c00131ef:	5b                   	pop    ebx
c00131f0:	c3                   	ret    
c00131f1:	90                   	nop

c00131f2 <Directory::unlink()>:
c00131f2:	83 ec 0c             	sub    esp,0xc
c00131f5:	b8 0b 00 00 00       	mov    eax,0xb
c00131fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131fe:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013205:	80 f9 19             	cmp    cl,0x19
c0013208:	77 2f                	ja     c0013239 <Directory::unlink()+0x47>
c001320a:	8b 0c 8d 00 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2100]
c0013211:	85 c9                	test   ecx,ecx
c0013213:	74 24                	je     c0013239 <Directory::unlink()+0x47>
c0013215:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001321b:	85 c9                	test   ecx,ecx
c001321d:	74 1a                	je     c0013239 <Directory::unlink()+0x47>
c001321f:	b8 06 00 00 00       	mov    eax,0x6
c0013224:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013228:	75 0f                	jne    c0013239 <Directory::unlink()+0x47>
c001322a:	83 c2 0d             	add    edx,0xd
c001322d:	50                   	push   eax
c001322e:	50                   	push   eax
c001322f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013231:	52                   	push   edx
c0013232:	51                   	push   ecx
c0013233:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013236:	83 c4 10             	add    esp,0x10
c0013239:	83 c4 0c             	add    esp,0xc
c001323c:	c3                   	ret    
c001323d:	90                   	nop

c001323e <Directory::rename(char const*)>:
c001323e:	83 ec 0c             	sub    esp,0xc
c0013241:	b8 0b 00 00 00       	mov    eax,0xb
c0013246:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001324a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013251:	80 f9 19             	cmp    cl,0x19
c0013254:	77 32                	ja     c0013288 <Directory::rename(char const*)+0x4a>
c0013256:	8b 0c 8d 00 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2100]
c001325d:	85 c9                	test   ecx,ecx
c001325f:	74 27                	je     c0013288 <Directory::rename(char const*)+0x4a>
c0013261:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013267:	85 c9                	test   ecx,ecx
c0013269:	74 1d                	je     c0013288 <Directory::rename(char const*)+0x4a>
c001326b:	b8 06 00 00 00       	mov    eax,0x6
c0013270:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013274:	75 12                	jne    c0013288 <Directory::rename(char const*)+0x4a>
c0013276:	83 c2 0d             	add    edx,0xd
c0013279:	50                   	push   eax
c001327a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001327c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013280:	52                   	push   edx
c0013281:	51                   	push   ecx
c0013282:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013285:	83 c4 10             	add    esp,0x10
c0013288:	83 c4 0c             	add    esp,0xc
c001328b:	c3                   	ret    

c001328c <Directory::exists()>:
c001328c:	83 ec 0c             	sub    esp,0xc
c001328f:	31 c0                	xor    eax,eax
c0013291:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013295:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001329c:	80 f9 19             	cmp    cl,0x19
c001329f:	77 24                	ja     c00132c5 <Directory::exists()+0x39>
c00132a1:	8b 0c 8d 00 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2100]
c00132a8:	85 c9                	test   ecx,ecx
c00132aa:	74 19                	je     c00132c5 <Directory::exists()+0x39>
c00132ac:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132b2:	85 c9                	test   ecx,ecx
c00132b4:	74 0f                	je     c00132c5 <Directory::exists()+0x39>
c00132b6:	83 c2 0d             	add    edx,0xd
c00132b9:	50                   	push   eax
c00132ba:	50                   	push   eax
c00132bb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132bd:	52                   	push   edx
c00132be:	51                   	push   ecx
c00132bf:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00132c2:	83 c4 10             	add    esp,0x10
c00132c5:	83 c4 0c             	add    esp,0xc
c00132c8:	c3                   	ret    
c00132c9:	90                   	nop

c00132ca <Directory::read(dirent*)>:
c00132ca:	83 ec 1c             	sub    esp,0x1c
c00132cd:	b8 0b 00 00 00       	mov    eax,0xb
c00132d2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00132d6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00132dd:	80 fa 19             	cmp    dl,0x19
c00132e0:	77 30                	ja     c0013312 <Directory::read(dirent*)+0x48>
c00132e2:	8b 14 95 00 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2100]
c00132e9:	85 d2                	test   edx,edx
c00132eb:	74 25                	je     c0013312 <Directory::read(dirent*)+0x48>
c00132ed:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00132f4:	74 1c                	je     c0013312 <Directory::read(dirent*)+0x48>
c00132f6:	83 ec 0c             	sub    esp,0xc
c00132f9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132fb:	8d 54 24 18          	lea    edx,[esp+0x18]
c00132ff:	52                   	push   edx
c0013300:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013304:	6a 00                	push   0x0
c0013306:	68 10 01 00 00       	push   0x110
c001330b:	51                   	push   ecx
c001330c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001330f:	83 c4 20             	add    esp,0x20
c0013312:	83 c4 1c             	add    esp,0x1c
c0013315:	c3                   	ret    

c0013316 <Directory::create()>:
c0013316:	83 ec 0c             	sub    esp,0xc
c0013319:	b8 0b 00 00 00       	mov    eax,0xb
c001331e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013322:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013329:	80 f9 19             	cmp    cl,0x19
c001332c:	77 2f                	ja     c001335d <Directory::create()+0x47>
c001332e:	8b 0c 8d 00 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2100]
c0013335:	85 c9                	test   ecx,ecx
c0013337:	74 24                	je     c001335d <Directory::create()+0x47>
c0013339:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001333f:	85 c9                	test   ecx,ecx
c0013341:	74 1a                	je     c001335d <Directory::create()+0x47>
c0013343:	b8 06 00 00 00       	mov    eax,0x6
c0013348:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001334c:	75 0f                	jne    c001335d <Directory::create()+0x47>
c001334e:	83 c2 0d             	add    edx,0xd
c0013351:	50                   	push   eax
c0013352:	50                   	push   eax
c0013353:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013355:	52                   	push   edx
c0013356:	51                   	push   ecx
c0013357:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001335a:	83 c4 10             	add    esp,0x10
c001335d:	83 c4 0c             	add    esp,0xc
c0013360:	c3                   	ret    
c0013361:	90                   	nop

c0013362 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013362:	b8 0a 00 00 00       	mov    eax,0xa
c0013367:	c3                   	ret    

c0013368 <Bus::Bus(char const*)>:
c0013368:	83 ec 0c             	sub    esp,0xc
c001336b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001336f:	83 ec 08             	sub    esp,0x8
c0013372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013376:	50                   	push   eax
c0013377:	e8 88 09 00 00       	call   c0013d04 <Device::Device(char const*)>
c001337c:	83 c4 10             	add    esp,0x10
c001337f:	ba bc a8 02 c0       	mov    edx,0xc002a8bc
c0013384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013388:	89 10                	mov    DWORD PTR [eax],edx
c001338a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001338e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013398:	90                   	nop
c0013399:	83 c4 0c             	add    esp,0xc
c001339c:	c3                   	ret    
c001339d:	90                   	nop

c001339e <Bus::~Bus()>:
c001339e:	83 ec 0c             	sub    esp,0xc
c00133a1:	ba bc a8 02 c0       	mov    edx,0xc002a8bc
c00133a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133aa:	89 10                	mov    DWORD PTR [eax],edx
c00133ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133b0:	83 ec 0c             	sub    esp,0xc
c00133b3:	50                   	push   eax
c00133b4:	e8 15 06 00 00       	call   c00139ce <Device::~Device()>
c00133b9:	83 c4 10             	add    esp,0x10
c00133bc:	90                   	nop
c00133bd:	83 c4 0c             	add    esp,0xc
c00133c0:	c3                   	ret    
c00133c1:	90                   	nop

c00133c2 <Bus::~Bus()>:
c00133c2:	83 ec 0c             	sub    esp,0xc
c00133c5:	83 ec 0c             	sub    esp,0xc
c00133c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133cc:	e8 cd ff ff ff       	call   c001339e <Bus::~Bus()>
c00133d1:	83 c4 10             	add    esp,0x10
c00133d4:	83 ec 08             	sub    esp,0x8
c00133d7:	68 58 01 00 00       	push   0x158
c00133dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133e0:	e8 0a f2 ff ff       	call   c00125ef <operator delete(void*, unsigned long)>
c00133e5:	83 c4 10             	add    esp,0x10
c00133e8:	83 c4 0c             	add    esp,0xc
c00133eb:	c3                   	ret    

c00133ec <Buzzer::Buzzer(char const*)>:
c00133ec:	83 ec 0c             	sub    esp,0xc
c00133ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f3:	83 ec 08             	sub    esp,0x8
c00133f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133fa:	50                   	push   eax
c00133fb:	e8 04 09 00 00       	call   c0013d04 <Device::Device(char const*)>
c0013400:	83 c4 10             	add    esp,0x10
c0013403:	ba e8 a8 02 c0       	mov    edx,0xc002a8e8
c0013408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001340c:	89 10                	mov    DWORD PTR [eax],edx
c001340e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013412:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001341c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013420:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001342a:	90                   	nop
c001342b:	83 c4 0c             	add    esp,0xc
c001342e:	c3                   	ret    
c001342f:	90                   	nop

c0013430 <Buzzer::~Buzzer()>:
c0013430:	83 ec 0c             	sub    esp,0xc
c0013433:	ba e8 a8 02 c0       	mov    edx,0xc002a8e8
c0013438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001343c:	89 10                	mov    DWORD PTR [eax],edx
c001343e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013442:	83 ec 0c             	sub    esp,0xc
c0013445:	50                   	push   eax
c0013446:	e8 83 05 00 00       	call   c00139ce <Device::~Device()>
c001344b:	83 c4 10             	add    esp,0x10
c001344e:	90                   	nop
c001344f:	83 c4 0c             	add    esp,0xc
c0013452:	c3                   	ret    
c0013453:	90                   	nop

c0013454 <Buzzer::~Buzzer()>:
c0013454:	83 ec 0c             	sub    esp,0xc
c0013457:	83 ec 0c             	sub    esp,0xc
c001345a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001345e:	e8 cd ff ff ff       	call   c0013430 <Buzzer::~Buzzer()>
c0013463:	83 c4 10             	add    esp,0x10
c0013466:	83 ec 08             	sub    esp,0x8
c0013469:	68 5c 01 00 00       	push   0x15c
c001346e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013472:	e8 78 f1 ff ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0013477:	83 c4 10             	add    esp,0x10
c001347a:	83 c4 0c             	add    esp,0xc
c001347d:	c3                   	ret    

c001347e <Buzzer::stop()>:
c001347e:	83 ec 14             	sub    esp,0x14
c0013481:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013485:	8b 10                	mov    edx,DWORD PTR [eax]
c0013487:	6a 00                	push   0x0
c0013489:	50                   	push   eax
c001348a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001348d:	83 c4 1c             	add    esp,0x1c
c0013490:	c3                   	ret    

c0013491 <beepThread(void*)>:
c0013491:	53                   	push   ebx
c0013492:	83 ec 08             	sub    esp,0x8
c0013495:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001349a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001349e:	48                   	dec    eax
c001349f:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c00134a4:	75 01                	jne    c00134a7 <beepThread(void*)+0x16>
c00134a6:	fb                   	sti    
c00134a7:	50                   	push   eax
c00134a8:	50                   	push   eax
c00134a9:	b8 40 42 0f 00       	mov    eax,0xf4240
c00134ae:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00134b4:	52                   	push   edx
c00134b5:	50                   	push   eax
c00134b6:	e8 dc a7 00 00       	call   c001dc97 <nanoSleep(unsigned long long)>
c00134bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00134be:	e8 bb ff ff ff       	call   c001347e <Buzzer::stop()>
c00134c3:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00134cb:	83 c4 18             	add    esp,0x18
c00134ce:	5b                   	pop    ebx
c00134cf:	e9 bf a6 00 00       	jmp    c001db93 <blockTask(TaskState)>

c00134d4 <Buzzer::beep(int, int, bool)>:
c00134d4:	57                   	push   edi
c00134d5:	56                   	push   esi
c00134d6:	53                   	push   ebx
c00134d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134db:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00134df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00134e3:	52                   	push   edx
c00134e4:	52                   	push   edx
c00134e5:	8b 06                	mov    eax,DWORD PTR [esi]
c00134e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134eb:	56                   	push   esi
c00134ec:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00134ef:	83 c4 10             	add    esp,0x10
c00134f2:	89 f8                	mov    eax,edi
c00134f4:	84 c0                	test   al,al
c00134f6:	74 1f                	je     c0013517 <Buzzer::beep(int, int, bool)+0x43>
c00134f8:	50                   	push   eax
c00134f9:	50                   	push   eax
c00134fa:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013500:	99                   	cdq    
c0013501:	52                   	push   edx
c0013502:	50                   	push   eax
c0013503:	e8 8f a7 00 00       	call   c001dc97 <nanoSleep(unsigned long long)>
c0013508:	83 c4 10             	add    esp,0x10
c001350b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001350f:	5b                   	pop    ebx
c0013510:	5e                   	pop    esi
c0013511:	5f                   	pop    edi
c0013512:	e9 67 ff ff ff       	jmp    c001347e <Buzzer::stop()>
c0013517:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001351d:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0013522:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001352a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001352e:	c7 44 24 14 91 34 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013491
c0013536:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001353a:	5b                   	pop    ebx
c001353b:	5e                   	pop    esi
c001353c:	5f                   	pop    edi
c001353d:	e9 56 a2 00 00       	jmp    c001d798 <Process::createThread(void (*)(void*), void*, int)>

c0013542 <User::loadClockSettings(int)>:
c0013542:	53                   	push   ebx
c0013543:	83 ec 14             	sub    esp,0x14
c0013546:	68 14 01 00 00       	push   0x114
c001354b:	e8 49 c0 ff ff       	call   c000f599 <malloc>
c0013550:	83 c4 0c             	add    esp,0xc
c0013553:	89 c3                	mov    ebx,eax
c0013555:	ff 35 50 0e 03 c0    	push   DWORD PTR ds:0xc0030e50
c001355b:	68 10 a9 02 c0       	push   0xc002a910
c0013560:	50                   	push   eax
c0013561:	e8 c0 f6 ff ff       	call   c0012c26 <File::File(char const*, Process*)>
c0013566:	58                   	pop    eax
c0013567:	5a                   	pop    edx
c0013568:	6a 01                	push   0x1
c001356a:	53                   	push   ebx
c001356b:	e8 1a f7 ff ff       	call   c0012c8a <File::open(FileOpenMode)>
c0013570:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013573:	e8 70 f7 ff ff       	call   c0012ce8 <File::close()>
c0013578:	83 c4 10             	add    esp,0x10
c001357b:	85 db                	test   ebx,ebx
c001357d:	74 0f                	je     c001358e <User::loadClockSettings(int)+0x4c>
c001357f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013581:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013585:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013588:	83 c4 08             	add    esp,0x8
c001358b:	5b                   	pop    ebx
c001358c:	ff e0                	jmp    eax
c001358e:	83 c4 08             	add    esp,0x8
c0013591:	5b                   	pop    ebx
c0013592:	c3                   	ret    
c0013593:	90                   	nop

c0013594 <Clock::Clock(char const*)>:
c0013594:	83 ec 0c             	sub    esp,0xc
c0013597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001359b:	83 ec 08             	sub    esp,0x8
c001359e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135a2:	50                   	push   eax
c00135a3:	e8 5c 07 00 00       	call   c0013d04 <Device::Device(char const*)>
c00135a8:	83 c4 10             	add    esp,0x10
c00135ab:	ba 38 a9 02 c0       	mov    edx,0xc002a938
c00135b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b4:	89 10                	mov    DWORD PTR [eax],edx
c00135b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ba:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00135c4:	90                   	nop
c00135c5:	83 c4 0c             	add    esp,0xc
c00135c8:	c3                   	ret    
c00135c9:	90                   	nop

c00135ca <Clock::~Clock()>:
c00135ca:	83 ec 0c             	sub    esp,0xc
c00135cd:	ba 38 a9 02 c0       	mov    edx,0xc002a938
c00135d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135d6:	89 10                	mov    DWORD PTR [eax],edx
c00135d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135dc:	83 ec 0c             	sub    esp,0xc
c00135df:	50                   	push   eax
c00135e0:	e8 e9 03 00 00       	call   c00139ce <Device::~Device()>
c00135e5:	83 c4 10             	add    esp,0x10
c00135e8:	90                   	nop
c00135e9:	83 c4 0c             	add    esp,0xc
c00135ec:	c3                   	ret    
c00135ed:	90                   	nop

c00135ee <Clock::~Clock()>:
c00135ee:	83 ec 0c             	sub    esp,0xc
c00135f1:	83 ec 0c             	sub    esp,0xc
c00135f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135f8:	e8 cd ff ff ff       	call   c00135ca <Clock::~Clock()>
c00135fd:	83 c4 10             	add    esp,0x10
c0013600:	83 ec 08             	sub    esp,0x8
c0013603:	68 58 01 00 00       	push   0x158
c0013608:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001360c:	e8 de ef ff ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0013611:	83 c4 10             	add    esp,0x10
c0013614:	83 c4 0c             	add    esp,0xc
c0013617:	c3                   	ret    

c0013618 <Clock::timeInSecondsLocal()>:
c0013618:	53                   	push   ebx
c0013619:	83 ec 14             	sub    esp,0x14
c001361c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013620:	8b 10                	mov    edx,DWORD PTR [eax]
c0013622:	50                   	push   eax
c0013623:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013626:	0f b6 0d 7c da 02 c0 	movzx  ecx,BYTE PTR ds:0xc002da7c
c001362d:	03 0d 80 da 02 c0    	add    ecx,DWORD PTR ds:0xc002da80
c0013633:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013639:	89 cb                	mov    ebx,ecx
c001363b:	c1 fb 1f             	sar    ebx,0x1f
c001363e:	01 c8                	add    eax,ecx
c0013640:	11 da                	adc    edx,ebx
c0013642:	83 c4 10             	add    esp,0x10
c0013645:	31 c9                	xor    ecx,ecx
c0013647:	80 3d 7d da 02 c0 00 	cmp    BYTE PTR ds:0xc002da7d,0x0
c001364e:	74 05                	je     c0013655 <Clock::timeInSecondsLocal()+0x3d>
c0013650:	b9 08 07 00 00       	mov    ecx,0x708
c0013655:	31 db                	xor    ebx,ebx
c0013657:	01 c8                	add    eax,ecx
c0013659:	11 da                	adc    edx,ebx
c001365b:	83 c4 08             	add    esp,0x8
c001365e:	5b                   	pop    ebx
c001365f:	c3                   	ret    

c0013660 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013660:	57                   	push   edi
c0013661:	56                   	push   esi
c0013662:	53                   	push   ebx
c0013663:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013667:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001366b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001366d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013671:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013674:	0f b6 05 7c da 02 c0 	movzx  eax,BYTE PTR ds:0xc002da7c
c001367b:	03 05 80 da 02 c0    	add    eax,DWORD PTR ds:0xc002da80
c0013681:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013687:	99                   	cdq    
c0013688:	29 c6                	sub    esi,eax
c001368a:	19 d7                	sbb    edi,edx
c001368c:	89 f0                	mov    eax,esi
c001368e:	89 fa                	mov    edx,edi
c0013690:	31 f6                	xor    esi,esi
c0013692:	80 3d 7d da 02 c0 00 	cmp    BYTE PTR ds:0xc002da7d,0x0
c0013699:	74 05                	je     c00136a0 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001369b:	be 08 07 00 00       	mov    esi,0x708
c00136a0:	31 ff                	xor    edi,edi
c00136a2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00136a6:	29 f0                	sub    eax,esi
c00136a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00136ac:	19 fa                	sbb    edx,edi
c00136ae:	89 d8                	mov    eax,ebx
c00136b0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00136b4:	5b                   	pop    ebx
c00136b5:	5e                   	pop    esi
c00136b6:	5f                   	pop    edi
c00136b7:	ff e0                	jmp    eax

c00136b9 <datetimeToSeconds(datetime_t)>:
c00136b9:	55                   	push   ebp
c00136ba:	57                   	push   edi
c00136bb:	56                   	push   esi
c00136bc:	53                   	push   ebx
c00136bd:	83 ec 14             	sub    esp,0x14
c00136c0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00136c4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00136c8:	89 d3                	mov    ebx,edx
c00136ca:	0f b6 c6             	movzx  eax,dh
c00136cd:	c1 eb 10             	shr    ebx,0x10
c00136d0:	48                   	dec    eax
c00136d1:	66 81 eb 6c 07       	sub    bx,0x76c
c00136d6:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00136da:	0f b6 f5             	movzx  esi,ch
c00136dd:	89 cf                	mov    edi,ecx
c00136df:	6b f6 3c             	imul   esi,esi,0x3c
c00136e2:	c1 ef 10             	shr    edi,0x10
c00136e5:	0f b6 c9             	movzx  ecx,cl
c00136e8:	89 f8                	mov    eax,edi
c00136ea:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00136f0:	0f b6 f8             	movzx  edi,al
c00136f3:	0f b6 d2             	movzx  edx,dl
c00136f6:	01 fe                	add    esi,edi
c00136f8:	01 f1                	add    ecx,esi
c00136fa:	0f b7 f3             	movzx  esi,bx
c00136fd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013701:	c1 f9 1f             	sar    ecx,0x1f
c0013704:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013709:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001370d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013712:	8b 0c 8d 80 a9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5680]
c0013719:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001371d:	76 29                	jbe    c0013748 <datetimeToSeconds(datetime_t)+0x8f>
c001371f:	f6 c3 03             	test   bl,0x3
c0013722:	75 24                	jne    c0013748 <datetimeToSeconds(datetime_t)+0x8f>
c0013724:	31 d2                	xor    edx,edx
c0013726:	bf 64 00 00 00       	mov    edi,0x64
c001372b:	89 d8                	mov    eax,ebx
c001372d:	66 f7 f7             	div    di
c0013730:	66 85 d2             	test   dx,dx
c0013733:	75 12                	jne    c0013747 <datetimeToSeconds(datetime_t)+0x8e>
c0013735:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001373b:	bf 90 01 00 00       	mov    edi,0x190
c0013740:	99                   	cdq    
c0013741:	f7 ff                	idiv   edi
c0013743:	85 d2                	test   edx,edx
c0013745:	75 01                	jne    c0013748 <datetimeToSeconds(datetime_t)+0x8f>
c0013747:	41                   	inc    ecx
c0013748:	66 83 fb 46          	cmp    bx,0x46
c001374c:	76 45                	jbe    c0013793 <datetimeToSeconds(datetime_t)+0xda>
c001374e:	bb 46 00 00 00       	mov    ebx,0x46
c0013753:	bf 64 00 00 00       	mov    edi,0x64
c0013758:	bd 90 01 00 00       	mov    ebp,0x190
c001375d:	b8 6d 01 00 00       	mov    eax,0x16d
c0013762:	f6 c3 03             	test   bl,0x3
c0013765:	75 23                	jne    c001378a <datetimeToSeconds(datetime_t)+0xd1>
c0013767:	89 d8                	mov    eax,ebx
c0013769:	99                   	cdq    
c001376a:	f7 ff                	idiv   edi
c001376c:	b8 6e 01 00 00       	mov    eax,0x16e
c0013771:	85 d2                	test   edx,edx
c0013773:	75 15                	jne    c001378a <datetimeToSeconds(datetime_t)+0xd1>
c0013775:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001377b:	99                   	cdq    
c001377c:	f7 fd                	idiv   ebp
c001377e:	83 fa 01             	cmp    edx,0x1
c0013781:	19 c0                	sbb    eax,eax
c0013783:	f7 d0                	not    eax
c0013785:	05 6e 01 00 00       	add    eax,0x16e
c001378a:	01 c1                	add    ecx,eax
c001378c:	43                   	inc    ebx
c001378d:	39 f3                	cmp    ebx,esi
c001378f:	7c cc                	jl     c001375d <datetimeToSeconds(datetime_t)+0xa4>
c0013791:	eb 35                	jmp    c00137c8 <datetimeToSeconds(datetime_t)+0x10f>
c0013793:	74 33                	je     c00137c8 <datetimeToSeconds(datetime_t)+0x10f>
c0013795:	b8 45 00 00 00       	mov    eax,0x45
c001379a:	89 c2                	mov    edx,eax
c001379c:	83 e2 03             	and    edx,0x3
c001379f:	39 f0                	cmp    eax,esi
c00137a1:	7e 0f                	jle    c00137b2 <datetimeToSeconds(datetime_t)+0xf9>
c00137a3:	83 fa 01             	cmp    edx,0x1
c00137a6:	19 d2                	sbb    edx,edx
c00137a8:	48                   	dec    eax
c00137a9:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00137b0:	eb e8                	jmp    c001379a <datetimeToSeconds(datetime_t)+0xe1>
c00137b2:	b8 6d 01 00 00       	mov    eax,0x16d
c00137b7:	85 d2                	test   edx,edx
c00137b9:	75 0b                	jne    c00137c6 <datetimeToSeconds(datetime_t)+0x10d>
c00137bb:	66 83 fb 01          	cmp    bx,0x1
c00137bf:	19 c0                	sbb    eax,eax
c00137c1:	05 6e 01 00 00       	add    eax,0x16e
c00137c6:	29 c1                	sub    ecx,eax
c00137c8:	b8 80 51 01 00       	mov    eax,0x15180
c00137cd:	f7 e9                	imul   ecx
c00137cf:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00137d3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00137d7:	83 c4 14             	add    esp,0x14
c00137da:	5b                   	pop    ebx
c00137db:	5e                   	pop    esi
c00137dc:	5f                   	pop    edi
c00137dd:	5d                   	pop    ebp
c00137de:	c3                   	ret    
c00137df:	90                   	nop

c00137e0 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00137e0:	57                   	push   edi
c00137e1:	56                   	push   esi
c00137e2:	53                   	push   ebx
c00137e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00137e7:	8b 06                	mov    eax,DWORD PTR [esi]
c00137e9:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00137ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137f4:	e8 c0 fe ff ff       	call   c00136b9 <datetimeToSeconds(datetime_t)>
c00137f9:	59                   	pop    ecx
c00137fa:	0f b6 0d 7c da 02 c0 	movzx  ecx,BYTE PTR ds:0xc002da7c
c0013801:	5b                   	pop    ebx
c0013802:	03 0d 80 da 02 c0    	add    ecx,DWORD PTR ds:0xc002da80
c0013808:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001380e:	89 cb                	mov    ebx,ecx
c0013810:	c1 fb 1f             	sar    ebx,0x1f
c0013813:	29 c8                	sub    eax,ecx
c0013815:	19 da                	sbb    edx,ebx
c0013817:	31 c9                	xor    ecx,ecx
c0013819:	80 3d 7d da 02 c0 00 	cmp    BYTE PTR ds:0xc002da7d,0x0
c0013820:	74 05                	je     c0013827 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013822:	b9 08 07 00 00       	mov    ecx,0x708
c0013827:	31 db                	xor    ebx,ebx
c0013829:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001382d:	29 c8                	sub    eax,ecx
c001382f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013833:	19 da                	sbb    edx,ebx
c0013835:	89 f8                	mov    eax,edi
c0013837:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001383b:	5b                   	pop    ebx
c001383c:	5e                   	pop    esi
c001383d:	5f                   	pop    edi
c001383e:	ff e0                	jmp    eax

c0013840 <secondsToDatetime(unsigned long long)>:
c0013840:	55                   	push   ebp
c0013841:	57                   	push   edi
c0013842:	56                   	push   esi
c0013843:	53                   	push   ebx
c0013844:	83 ec 1c             	sub    esp,0x1c
c0013847:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001384b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001384f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013853:	6a 00                	push   0x0
c0013855:	68 80 51 01 00       	push   0x15180
c001385a:	55                   	push   ebp
c001385b:	57                   	push   edi
c001385c:	e8 a3 2e 01 00       	call   c0026704 <__udivdi3>
c0013861:	83 c4 10             	add    esp,0x10
c0013864:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001386a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001386e:	6a 00                	push   0x0
c0013870:	68 80 51 01 00       	push   0x15180
c0013875:	55                   	push   ebp
c0013876:	57                   	push   edi
c0013877:	bf 10 0e 00 00       	mov    edi,0xe10
c001387c:	e8 83 2f 01 00       	call   c0026804 <__umoddi3>
c0013881:	83 c4 10             	add    esp,0x10
c0013884:	99                   	cdq    
c0013885:	f7 ff                	idiv   edi
c0013887:	bf 3c 00 00 00       	mov    edi,0x3c
c001388c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001388f:	89 d0                	mov    eax,edx
c0013891:	99                   	cdq    
c0013892:	f7 ff                	idiv   edi
c0013894:	85 db                	test   ebx,ebx
c0013896:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013899:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001389c:	79 11                	jns    c00138af <secondsToDatetime(unsigned long long)+0x6f>
c001389e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00138a2:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00138a8:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00138ad:	eb 07                	jmp    c00138b6 <secondsToDatetime(unsigned long long)+0x76>
c00138af:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00138b4:	89 d8                	mov    eax,ebx
c00138b6:	bf b4 05 00 00       	mov    edi,0x5b4
c00138bb:	99                   	cdq    
c00138bc:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00138c1:	f7 f9                	idiv   ecx
c00138c3:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00138c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138cc:	31 d2                	xor    edx,edx
c00138ce:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00138d6:	01 c3                	add    ebx,eax
c00138d8:	89 d8                	mov    eax,ebx
c00138da:	f7 f1                	div    ecx
c00138dc:	31 d2                	xor    edx,edx
c00138de:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00138e1:	89 d8                	mov    eax,ebx
c00138e3:	f7 f7                	div    edi
c00138e5:	31 d2                	xor    edx,edx
c00138e7:	29 c1                	sub    ecx,eax
c00138e9:	89 d8                	mov    eax,ebx
c00138eb:	f7 f5                	div    ebp
c00138ed:	bd 6d 01 00 00       	mov    ebp,0x16d
c00138f2:	29 c1                	sub    ecx,eax
c00138f4:	31 d2                	xor    edx,edx
c00138f6:	89 c8                	mov    eax,ecx
c00138f8:	f7 f5                	div    ebp
c00138fa:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00138ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013903:	31 d2                	xor    edx,edx
c0013905:	89 c8                	mov    eax,ecx
c0013907:	f7 f5                	div    ebp
c0013909:	31 d2                	xor    edx,edx
c001390b:	01 c3                	add    ebx,eax
c001390d:	89 c8                	mov    eax,ecx
c001390f:	f7 f7                	div    edi
c0013911:	bf 99 00 00 00       	mov    edi,0x99
c0013916:	29 c3                	sub    ebx,eax
c0013918:	31 d2                	xor    edx,edx
c001391a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013922:	29 c3                	sub    ebx,eax
c0013924:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013927:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001392a:	bb 05 00 00 00       	mov    ebx,0x5
c001392f:	83 c1 02             	add    ecx,0x2
c0013932:	89 c8                	mov    eax,ecx
c0013934:	f7 f7                	div    edi
c0013936:	31 d2                	xor    edx,edx
c0013938:	89 c7                	mov    edi,eax
c001393a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013940:	83 c0 02             	add    eax,0x2
c0013943:	f7 f3                	div    ebx
c0013945:	89 eb                	mov    ebx,ebp
c0013947:	29 c3                	sub    ebx,eax
c0013949:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001394f:	88 1e                	mov    BYTE PTR [esi],bl
c0013951:	19 c0                	sbb    eax,eax
c0013953:	31 d2                	xor    edx,edx
c0013955:	83 e0 0c             	and    eax,0xc
c0013958:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001395c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013964:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013968:	83 f9 01             	cmp    ecx,0x1
c001396b:	0f 96 c2             	setbe  dl
c001396e:	41                   	inc    ecx
c001396f:	01 d0                	add    eax,edx
c0013971:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013974:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013978:	83 c4 1c             	add    esp,0x1c
c001397b:	89 f0                	mov    eax,esi
c001397d:	5b                   	pop    ebx
c001397e:	5e                   	pop    esi
c001397f:	5f                   	pop    edi
c0013980:	5d                   	pop    ebp
c0013981:	c2 04 00             	ret    0x4

c0013984 <Clock::timeInDatetimeLocal()>:
c0013984:	53                   	push   ebx
c0013985:	83 ec 14             	sub    esp,0x14
c0013988:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001398c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013990:	e8 83 fc ff ff       	call   c0013618 <Clock::timeInSecondsLocal()>
c0013995:	83 c4 0c             	add    esp,0xc
c0013998:	52                   	push   edx
c0013999:	50                   	push   eax
c001399a:	53                   	push   ebx
c001399b:	e8 a0 fe ff ff       	call   c0013840 <secondsToDatetime(unsigned long long)>
c00139a0:	89 d8                	mov    eax,ebx
c00139a2:	83 c4 14             	add    esp,0x14
c00139a5:	5b                   	pop    ebx
c00139a6:	c2 04 00             	ret    0x4
c00139a9:	90                   	nop

c00139aa <Device::hibernate()>:
c00139aa:	c3                   	ret    
c00139ab:	90                   	nop

c00139ac <Device::wake()>:
c00139ac:	c3                   	ret    
c00139ad:	90                   	nop

c00139ae <Device::detect()>:
c00139ae:	c3                   	ret    
c00139af:	90                   	nop

c00139b0 <Device::disableLegacy()>:
c00139b0:	c3                   	ret    
c00139b1:	90                   	nop

c00139b2 <Device::powerSaving(PowerSavingLevel)>:
c00139b2:	c3                   	ret    
c00139b3:	90                   	nop

c00139b4 <DriverlessDevice::close(int, int, void*)>:
c00139b4:	31 c0                	xor    eax,eax
c00139b6:	c3                   	ret    
c00139b7:	90                   	nop

c00139b8 <DriverlessDevice::detect()>:
c00139b8:	c3                   	ret    
c00139b9:	90                   	nop

c00139ba <DriverlessDevice::open(int, int, void*)>:
c00139ba:	83 ec 18             	sub    esp,0x18
c00139bd:	68 b0 a9 02 c0       	push   0xc002a9b0
c00139c2:	e8 6c 64 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c00139c7:	83 c8 ff             	or     eax,0xffffffff
c00139ca:	83 c4 1c             	add    esp,0x1c
c00139cd:	c3                   	ret    

c00139ce <Device::~Device()>:
c00139ce:	ba 10 aa 02 c0       	mov    edx,0xc002aa10
c00139d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139d7:	89 10                	mov    DWORD PTR [eax],edx
c00139d9:	90                   	nop
c00139da:	c3                   	ret    
c00139db:	90                   	nop

c00139dc <Device::~Device()>:
c00139dc:	83 ec 0c             	sub    esp,0xc
c00139df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00139e3:	e8 e6 ff ff ff       	call   c00139ce <Device::~Device()>
c00139e8:	83 c4 04             	add    esp,0x4
c00139eb:	83 ec 08             	sub    esp,0x8
c00139ee:	68 58 01 00 00       	push   0x158
c00139f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139f7:	e8 f3 eb ff ff       	call   c00125ef <operator delete(void*, unsigned long)>
c00139fc:	83 c4 10             	add    esp,0x10
c00139ff:	83 c4 0c             	add    esp,0xc
c0013a02:	c3                   	ret    
c0013a03:	90                   	nop

c0013a04 <Device::findAndLoadDriver()>:
c0013a04:	c7 44 24 04 ce a9 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a9ce
c0013a0c:	e9 b6 ec ff ff       	jmp    c00126c7 <Dbg::kprintf(char const*, ...)>
c0013a11:	90                   	nop

c0013a12 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013a12:	57                   	push   edi
c0013a13:	b9 09 00 00 00       	mov    ecx,0x9
c0013a18:	56                   	push   esi
c0013a19:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013a1d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013a21:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013a2b:	81 c7 18 01 00 00    	add    edi,0x118
c0013a31:	fc                   	cld    
c0013a32:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013a34:	5e                   	pop    esi
c0013a35:	5f                   	pop    edi
c0013a36:	c3                   	ret    
c0013a37:	90                   	nop

c0013a38 <Device::preOpenACPI(void*, char*, char*)>:
c0013a38:	57                   	push   edi
c0013a39:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013a3e:	56                   	push   esi
c0013a3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a43:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a47:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013a51:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013a57:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013a5d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a61:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a63:	b9 0e 00 00 00       	mov    ecx,0xe
c0013a68:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013a6e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013a72:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a74:	5e                   	pop    esi
c0013a75:	5f                   	pop    edi
c0013a76:	c3                   	ret    
c0013a77:	90                   	nop

c0013a78 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013a78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a7c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a81:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a88:	75 0b                	jne    c0013a95 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013a8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a8c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a90:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013a93:	eb 1e                	jmp    c0013ab3 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013a95:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0013a9a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013aa0:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013aa6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013aa8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013aac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ab0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013ab3:	ff e0                	jmp    eax
c0013ab5:	90                   	nop

c0013ab6 <Device::getParent()>:
c0013ab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013aba:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013ac0:	c3                   	ret    
c0013ac1:	90                   	nop

c0013ac2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013ac2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ac6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013acb:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013ad2:	75 0b                	jne    c0013adf <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013ad4:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ad6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ada:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013add:	eb 1e                	jmp    c0013afd <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013adf:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0013ae4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013aea:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013af0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013af2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013af6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013afa:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013afd:	ff e0                	jmp    eax
c0013aff:	90                   	nop

c0013b00 <Device::addChild(Device*)>:
c0013b00:	53                   	push   ebx
c0013b01:	83 ec 08             	sub    esp,0x8
c0013b04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b0c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013b12:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013b18:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013b1a:	85 d2                	test   edx,edx
c0013b1c:	74 04                	je     c0013b22 <Device::addChild(Device*)+0x22>
c0013b1e:	89 d3                	mov    ebx,edx
c0013b20:	eb f6                	jmp    c0013b18 <Device::addChild(Device*)+0x18>
c0013b22:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013b25:	83 ec 0c             	sub    esp,0xc
c0013b28:	6a 08                	push   0x8
c0013b2a:	e8 6a ba ff ff       	call   c000f599 <malloc>
c0013b2f:	89 03                	mov    DWORD PTR [ebx],eax
c0013b31:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b37:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b3e:	83 c4 18             	add    esp,0x18
c0013b41:	5b                   	pop    ebx
c0013b42:	c3                   	ret    
c0013b43:	90                   	nop

c0013b44 <Device::removeAllChildren()>:
c0013b44:	56                   	push   esi
c0013b45:	53                   	push   ebx
c0013b46:	52                   	push   edx
c0013b47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b4b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013b51:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b54:	74 17                	je     c0013b6d <Device::removeAllChildren()+0x29>
c0013b56:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013b59:	85 c0                	test   eax,eax
c0013b5b:	74 0c                	je     c0013b69 <Device::removeAllChildren()+0x25>
c0013b5d:	83 ec 0c             	sub    esp,0xc
c0013b60:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b62:	50                   	push   eax
c0013b63:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013b66:	83 c4 10             	add    esp,0x10
c0013b69:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b6b:	eb e4                	jmp    c0013b51 <Device::removeAllChildren()+0xd>
c0013b6d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013b73:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b79:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013b7f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b86:	58                   	pop    eax
c0013b87:	5b                   	pop    ebx
c0013b88:	5e                   	pop    esi
c0013b89:	c3                   	ret    

c0013b8a <Device::hibernateAll()>:
c0013b8a:	53                   	push   ebx
c0013b8b:	83 ec 14             	sub    esp,0x14
c0013b8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b92:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b94:	53                   	push   ebx
c0013b95:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013b98:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b9e:	83 c4 10             	add    esp,0x10
c0013ba1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ba4:	74 0f                	je     c0013bb5 <Device::hibernateAll()+0x2b>
c0013ba6:	83 ec 0c             	sub    esp,0xc
c0013ba9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bac:	e8 d9 ff ff ff       	call   c0013b8a <Device::hibernateAll()>
c0013bb1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bb3:	eb e9                	jmp    c0013b9e <Device::hibernateAll()+0x14>
c0013bb5:	83 c4 08             	add    esp,0x8
c0013bb8:	5b                   	pop    ebx
c0013bb9:	c3                   	ret    

c0013bba <Device::wakeAll()>:
c0013bba:	53                   	push   ebx
c0013bbb:	83 ec 14             	sub    esp,0x14
c0013bbe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bc2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bc4:	53                   	push   ebx
c0013bc5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013bc8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bce:	83 c4 10             	add    esp,0x10
c0013bd1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bd4:	74 0f                	je     c0013be5 <Device::wakeAll()+0x2b>
c0013bd6:	83 ec 0c             	sub    esp,0xc
c0013bd9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bdc:	e8 d9 ff ff ff       	call   c0013bba <Device::wakeAll()>
c0013be1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013be3:	eb e9                	jmp    c0013bce <Device::wakeAll()+0x14>
c0013be5:	83 c4 08             	add    esp,0x8
c0013be8:	5b                   	pop    ebx
c0013be9:	c3                   	ret    

c0013bea <Device::detectAll()>:
c0013bea:	53                   	push   ebx
c0013beb:	83 ec 14             	sub    esp,0x14
c0013bee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bf2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bf4:	53                   	push   ebx
c0013bf5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013bf8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bfe:	83 c4 10             	add    esp,0x10
c0013c01:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c04:	74 0f                	je     c0013c15 <Device::detectAll()+0x2b>
c0013c06:	83 ec 0c             	sub    esp,0xc
c0013c09:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c0c:	e8 d9 ff ff ff       	call   c0013bea <Device::detectAll()>
c0013c11:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c13:	eb e9                	jmp    c0013bfe <Device::detectAll()+0x14>
c0013c15:	83 c4 08             	add    esp,0x8
c0013c18:	5b                   	pop    ebx
c0013c19:	c3                   	ret    

c0013c1a <Device::disableLegacyAll()>:
c0013c1a:	53                   	push   ebx
c0013c1b:	83 ec 14             	sub    esp,0x14
c0013c1e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c24:	53                   	push   ebx
c0013c25:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013c28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c2e:	83 c4 10             	add    esp,0x10
c0013c31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c34:	74 0f                	je     c0013c45 <Device::disableLegacyAll()+0x2b>
c0013c36:	83 ec 0c             	sub    esp,0xc
c0013c39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c3c:	e8 d9 ff ff ff       	call   c0013c1a <Device::disableLegacyAll()>
c0013c41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c43:	eb e9                	jmp    c0013c2e <Device::disableLegacyAll()+0x14>
c0013c45:	83 c4 08             	add    esp,0x8
c0013c48:	5b                   	pop    ebx
c0013c49:	c3                   	ret    

c0013c4a <Device::loadDriversForAll()>:
c0013c4a:	53                   	push   ebx
c0013c4b:	83 ec 08             	sub    esp,0x8
c0013c4e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c52:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013c59:	75 0c                	jne    c0013c67 <Device::loadDriversForAll()+0x1d>
c0013c5b:	83 ec 0c             	sub    esp,0xc
c0013c5e:	53                   	push   ebx
c0013c5f:	e8 a0 fd ff ff       	call   c0013a04 <Device::findAndLoadDriver()>
c0013c64:	83 c4 10             	add    esp,0x10
c0013c67:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c6d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c70:	74 12                	je     c0013c84 <Device::loadDriversForAll()+0x3a>
c0013c72:	83 ec 0c             	sub    esp,0xc
c0013c75:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c78:	e8 cd ff ff ff       	call   c0013c4a <Device::loadDriversForAll()>
c0013c7d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c7f:	83 c4 10             	add    esp,0x10
c0013c82:	eb e9                	jmp    c0013c6d <Device::loadDriversForAll()+0x23>
c0013c84:	83 c4 08             	add    esp,0x8
c0013c87:	5b                   	pop    ebx
c0013c88:	c3                   	ret    
c0013c89:	90                   	nop

c0013c8a <Device::closeAll()>:
c0013c8a:	53                   	push   ebx
c0013c8b:	83 ec 08             	sub    esp,0x8
c0013c8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c92:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c94:	6a 00                	push   0x0
c0013c96:	6a 00                	push   0x0
c0013c98:	6a 00                	push   0x0
c0013c9a:	53                   	push   ebx
c0013c9b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c9e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ca4:	83 c4 10             	add    esp,0x10
c0013ca7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013caa:	74 0f                	je     c0013cbb <Device::closeAll()+0x31>
c0013cac:	83 ec 0c             	sub    esp,0xc
c0013caf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cb2:	e8 d3 ff ff ff       	call   c0013c8a <Device::closeAll()>
c0013cb7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cb9:	eb e9                	jmp    c0013ca4 <Device::closeAll()+0x1a>
c0013cbb:	83 c4 08             	add    esp,0x8
c0013cbe:	5b                   	pop    ebx
c0013cbf:	c3                   	ret    

c0013cc0 <Device::powerSavingAll(PowerSavingLevel)>:
c0013cc0:	56                   	push   esi
c0013cc1:	53                   	push   ebx
c0013cc2:	83 ec 0c             	sub    esp,0xc
c0013cc5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013cc9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013ccd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ccf:	56                   	push   esi
c0013cd0:	53                   	push   ebx
c0013cd1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013cd4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cda:	83 c4 10             	add    esp,0x10
c0013cdd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ce0:	74 0f                	je     c0013cf1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013ce2:	52                   	push   edx
c0013ce3:	52                   	push   edx
c0013ce4:	56                   	push   esi
c0013ce5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ce8:	e8 d3 ff ff ff       	call   c0013cc0 <Device::powerSavingAll(PowerSavingLevel)>
c0013ced:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cef:	eb e9                	jmp    c0013cda <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013cf1:	58                   	pop    eax
c0013cf2:	5b                   	pop    ebx
c0013cf3:	5e                   	pop    esi
c0013cf4:	c3                   	ret    
c0013cf5:	90                   	nop

c0013cf6 <Device::setName(char const*)>:
c0013cf6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013cfe:	e9 09 cb fe ff       	jmp    c000080c <strcpy>
c0013d03:	90                   	nop

c0013d04 <Device::Device(char const*)>:
c0013d04:	83 ec 1c             	sub    esp,0x1c
c0013d07:	ba 10 aa 02 c0       	mov    edx,0xc002aa10
c0013d0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d10:	89 10                	mov    DWORD PTR [eax],edx
c0013d12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d16:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013d20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d24:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d32:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013d3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d40:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013d4a:	83 ec 08             	sub    esp,0x8
c0013d4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d55:	e8 9c ff ff ff       	call   c0013cf6 <Device::setName(char const*)>
c0013d5a:	83 c4 10             	add    esp,0x10
c0013d5d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013d65:	83 ec 0c             	sub    esp,0xc
c0013d68:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013d6c:	e8 28 b8 ff ff       	call   c000f599 <malloc>
c0013d71:	83 c4 10             	add    esp,0x10
c0013d74:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d7a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d81:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013d85:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013d8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d8f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013d95:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d9f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013da5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013dac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013db0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013db7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dbb:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013dc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dc6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013dd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dd4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013dde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013de2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013dec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013df0:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013dfa:	90                   	nop
c0013dfb:	83 c4 1c             	add    esp,0x1c
c0013dfe:	c3                   	ret    
c0013dff:	90                   	nop

c0013e00 <Device::getName()>:
c0013e00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e04:	05 d0 00 00 00       	add    eax,0xd0
c0013e09:	c3                   	ret    

c0013e0a <DriverlessDevice::DriverlessDevice(char const*)>:
c0013e0a:	83 ec 0c             	sub    esp,0xc
c0013e0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e11:	83 ec 08             	sub    esp,0x8
c0013e14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e18:	50                   	push   eax
c0013e19:	e8 e6 fe ff ff       	call   c0013d04 <Device::Device(char const*)>
c0013e1e:	83 c4 10             	add    esp,0x10
c0013e21:	ba 3c aa 02 c0       	mov    edx,0xc002aa3c
c0013e26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e2a:	89 10                	mov    DWORD PTR [eax],edx
c0013e2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e30:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013e3a:	90                   	nop
c0013e3b:	83 c4 0c             	add    esp,0xc
c0013e3e:	c3                   	ret    
c0013e3f:	90                   	nop

c0013e40 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013e40:	57                   	push   edi
c0013e41:	56                   	push   esi
c0013e42:	53                   	push   ebx
c0013e43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e47:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e4b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e4f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013e55:	75 0c                	jne    c0013e63 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013e57:	52                   	push   edx
c0013e58:	52                   	push   edx
c0013e59:	53                   	push   ebx
c0013e5a:	56                   	push   esi
c0013e5b:	e8 e0 47 01 00       	call   c0028640 <LinkedList<Device>::addElement(Device*)>
c0013e60:	83 c4 10             	add    esp,0x10
c0013e63:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e69:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e6c:	74 12                	je     c0013e80 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013e6e:	50                   	push   eax
c0013e6f:	57                   	push   edi
c0013e70:	56                   	push   esi
c0013e71:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e74:	e8 c7 ff ff ff       	call   c0013e40 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013e79:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e7b:	83 c4 10             	add    esp,0x10
c0013e7e:	eb e9                	jmp    c0013e69 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013e80:	5b                   	pop    ebx
c0013e81:	5e                   	pop    esi
c0013e82:	5f                   	pop    edi
c0013e83:	c3                   	ret    

c0013e84 <getDevicesOfType(DeviceType)>:
c0013e84:	53                   	push   ebx
c0013e85:	83 ec 14             	sub    esp,0x14
c0013e88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e8c:	53                   	push   ebx
c0013e8d:	e8 8a 48 01 00       	call   c002871c <LinkedList<Device>::LinkedList()>
c0013e92:	83 c4 0c             	add    esp,0xc
c0013e95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e99:	53                   	push   ebx
c0013e9a:	ff 35 08 d9 02 c0    	push   DWORD PTR ds:0xc002d908
c0013ea0:	e8 9b ff ff ff       	call   c0013e40 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013ea5:	89 d8                	mov    eax,ebx
c0013ea7:	83 c4 18             	add    esp,0x18
c0013eaa:	5b                   	pop    ebx
c0013eab:	c2 04 00             	ret    0x4

c0013eae <HardDiskController::HardDiskController(char const*)>:
c0013eae:	83 ec 0c             	sub    esp,0xc
c0013eb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eb5:	83 ec 08             	sub    esp,0x8
c0013eb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ebc:	50                   	push   eax
c0013ebd:	e8 42 fe ff ff       	call   c0013d04 <Device::Device(char const*)>
c0013ec2:	83 c4 10             	add    esp,0x10
c0013ec5:	ba 68 aa 02 c0       	mov    edx,0xc002aa68
c0013eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ece:	89 10                	mov    DWORD PTR [eax],edx
c0013ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed4:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013ede:	90                   	nop
c0013edf:	83 c4 0c             	add    esp,0xc
c0013ee2:	c3                   	ret    
c0013ee3:	90                   	nop

c0013ee4 <HardDiskController::~HardDiskController()>:
c0013ee4:	83 ec 0c             	sub    esp,0xc
c0013ee7:	ba 68 aa 02 c0       	mov    edx,0xc002aa68
c0013eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef0:	89 10                	mov    DWORD PTR [eax],edx
c0013ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef6:	83 ec 0c             	sub    esp,0xc
c0013ef9:	50                   	push   eax
c0013efa:	e8 cf fa ff ff       	call   c00139ce <Device::~Device()>
c0013eff:	83 c4 10             	add    esp,0x10
c0013f02:	90                   	nop
c0013f03:	83 c4 0c             	add    esp,0xc
c0013f06:	c3                   	ret    
c0013f07:	90                   	nop

c0013f08 <HardDiskController::~HardDiskController()>:
c0013f08:	83 ec 0c             	sub    esp,0xc
c0013f0b:	83 ec 0c             	sub    esp,0xc
c0013f0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f12:	e8 cd ff ff ff       	call   c0013ee4 <HardDiskController::~HardDiskController()>
c0013f17:	83 c4 10             	add    esp,0x10
c0013f1a:	83 ec 08             	sub    esp,0x8
c0013f1d:	68 58 01 00 00       	push   0x158
c0013f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f26:	e8 c4 e6 ff ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0013f2b:	83 c4 10             	add    esp,0x10
c0013f2e:	83 c4 0c             	add    esp,0xc
c0013f31:	c3                   	ret    

c0013f32 <PhysicalDisk::eject()>:
c0013f32:	83 c8 ff             	or     eax,0xffffffff
c0013f35:	c3                   	ret    

c0013f36 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013f36:	83 ec 0c             	sub    esp,0xc
c0013f39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f3d:	83 ec 08             	sub    esp,0x8
c0013f40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f44:	50                   	push   eax
c0013f45:	e8 ba fd ff ff       	call   c0013d04 <Device::Device(char const*)>
c0013f4a:	83 c4 10             	add    esp,0x10
c0013f4d:	ba 94 aa 02 c0       	mov    edx,0xc002aa94
c0013f52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f56:	89 10                	mov    DWORD PTR [eax],edx
c0013f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f5c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f67:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f72:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f80:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f84:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f8e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013f98:	90                   	nop
c0013f99:	83 c4 0c             	add    esp,0xc
c0013f9c:	c3                   	ret    
c0013f9d:	90                   	nop

c0013f9e <PhysicalDisk::startCache()>:
c0013f9e:	56                   	push   esi
c0013f9f:	53                   	push   ebx
c0013fa0:	83 ec 10             	sub    esp,0x10
c0013fa3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013fa7:	6a 44                	push   0x44
c0013fa9:	e8 eb b5 ff ff       	call   c000f599 <malloc>
c0013fae:	89 c6                	mov    esi,eax
c0013fb0:	58                   	pop    eax
c0013fb1:	5a                   	pop    edx
c0013fb2:	53                   	push   ebx
c0013fb3:	56                   	push   esi
c0013fb4:	e8 71 28 00 00       	call   c001682a <VCache::VCache(PhysicalDisk*)>
c0013fb9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013fbf:	83 c4 14             	add    esp,0x14
c0013fc2:	5b                   	pop    ebx
c0013fc3:	5e                   	pop    esi
c0013fc4:	c3                   	ret    
c0013fc5:	90                   	nop

c0013fc6 <PhysicalDisk::~PhysicalDisk()>:
c0013fc6:	83 ec 0c             	sub    esp,0xc
c0013fc9:	ba 94 aa 02 c0       	mov    edx,0xc002aa94
c0013fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fd2:	89 10                	mov    DWORD PTR [eax],edx
c0013fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fd8:	83 ec 0c             	sub    esp,0xc
c0013fdb:	50                   	push   eax
c0013fdc:	e8 ed f9 ff ff       	call   c00139ce <Device::~Device()>
c0013fe1:	83 c4 10             	add    esp,0x10
c0013fe4:	90                   	nop
c0013fe5:	83 c4 0c             	add    esp,0xc
c0013fe8:	c3                   	ret    
c0013fe9:	90                   	nop

c0013fea <PhysicalDisk::~PhysicalDisk()>:
c0013fea:	83 ec 0c             	sub    esp,0xc
c0013fed:	83 ec 0c             	sub    esp,0xc
c0013ff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ff4:	e8 cd ff ff ff       	call   c0013fc6 <PhysicalDisk::~PhysicalDisk()>
c0013ff9:	83 c4 10             	add    esp,0x10
c0013ffc:	83 ec 08             	sub    esp,0x8
c0013fff:	68 6c 01 00 00       	push   0x16c
c0014004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014008:	e8 e2 e5 ff ff       	call   c00125ef <operator delete(void*, unsigned long)>
c001400d:	83 c4 10             	add    esp,0x10
c0014010:	83 c4 0c             	add    esp,0xc
c0014013:	c3                   	ret    

c0014014 <FPU::FPU(char const*)>:
c0014014:	83 ec 0c             	sub    esp,0xc
c0014017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001401b:	83 ec 08             	sub    esp,0x8
c001401e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014022:	50                   	push   eax
c0014023:	e8 dc fc ff ff       	call   c0013d04 <Device::Device(char const*)>
c0014028:	83 c4 10             	add    esp,0x10
c001402b:	ba d8 aa 02 c0       	mov    edx,0xc002aad8
c0014030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014034:	89 10                	mov    DWORD PTR [eax],edx
c0014036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001403a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014044:	90                   	nop
c0014045:	83 c4 0c             	add    esp,0xc
c0014048:	c3                   	ret    
c0014049:	90                   	nop

c001404a <FPU::~FPU()>:
c001404a:	83 ec 0c             	sub    esp,0xc
c001404d:	ba d8 aa 02 c0       	mov    edx,0xc002aad8
c0014052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014056:	89 10                	mov    DWORD PTR [eax],edx
c0014058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001405c:	83 ec 0c             	sub    esp,0xc
c001405f:	50                   	push   eax
c0014060:	e8 69 f9 ff ff       	call   c00139ce <Device::~Device()>
c0014065:	83 c4 10             	add    esp,0x10
c0014068:	90                   	nop
c0014069:	83 c4 0c             	add    esp,0xc
c001406c:	c3                   	ret    
c001406d:	90                   	nop

c001406e <FPU::~FPU()>:
c001406e:	83 ec 0c             	sub    esp,0xc
c0014071:	83 ec 0c             	sub    esp,0xc
c0014074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014078:	e8 cd ff ff ff       	call   c001404a <FPU::~FPU()>
c001407d:	83 c4 10             	add    esp,0x10
c0014080:	83 ec 08             	sub    esp,0x8
c0014083:	68 58 01 00 00       	push   0x158
c0014088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001408c:	e8 5e e5 ff ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0014091:	83 c4 10             	add    esp,0x10
c0014094:	83 c4 0c             	add    esp,0xc
c0014097:	c3                   	ret    

c0014098 <setupFPU()>:
c0014098:	53                   	push   ebx
c0014099:	83 ec 08             	sub    esp,0x8
c001409c:	8b 15 08 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d908
c00140a2:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00140a9:	74 19                	je     c00140c4 <setupFPU()+0x2c>
c00140ab:	83 ec 0c             	sub    esp,0xc
c00140ae:	68 58 01 00 00       	push   0x158
c00140b3:	e8 e1 b4 ff ff       	call   c000f599 <malloc>
c00140b8:	89 c3                	mov    ebx,eax
c00140ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00140bd:	e8 c6 11 01 00       	call   c0025288 <AVX::AVX()>
c00140c2:	eb 5b                	jmp    c001411f <setupFPU()+0x87>
c00140c4:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00140ca:	84 c0                	test   al,al
c00140cc:	79 19                	jns    c00140e7 <setupFPU()+0x4f>
c00140ce:	83 ec 0c             	sub    esp,0xc
c00140d1:	68 58 01 00 00       	push   0x158
c00140d6:	e8 be b4 ff ff       	call   c000f599 <malloc>
c00140db:	89 c3                	mov    ebx,eax
c00140dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00140e0:	e8 c9 12 01 00       	call   c00253ae <SSE::SSE()>
c00140e5:	eb 38                	jmp    c001411f <setupFPU()+0x87>
c00140e7:	a8 20                	test   al,0x20
c00140e9:	74 19                	je     c0014104 <setupFPU()+0x6c>
c00140eb:	83 ec 0c             	sub    esp,0xc
c00140ee:	68 58 01 00 00       	push   0x158
c00140f3:	e8 a1 b4 ff ff       	call   c000f599 <malloc>
c00140f8:	89 c3                	mov    ebx,eax
c00140fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00140fd:	e8 16 12 01 00       	call   c0025318 <MMX::MMX()>
c0014102:	eb 1b                	jmp    c001411f <setupFPU()+0x87>
c0014104:	a8 10                	test   al,0x10
c0014106:	74 1c                	je     c0014124 <setupFPU()+0x8c>
c0014108:	83 ec 0c             	sub    esp,0xc
c001410b:	68 58 01 00 00       	push   0x158
c0014110:	e8 84 b4 ff ff       	call   c000f599 <malloc>
c0014115:	89 c3                	mov    ebx,eax
c0014117:	89 04 24             	mov    DWORD PTR [esp],eax
c001411a:	e8 1d 13 01 00       	call   c002543c <x87::x87()>
c001411f:	83 c4 10             	add    esp,0x10
c0014122:	eb 24                	jmp    c0014148 <setupFPU()+0xb0>
c0014124:	83 e0 ef             	and    eax,0xffffffef
c0014127:	83 ec 0c             	sub    esp,0xc
c001412a:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014130:	68 c4 aa 02 c0       	push   0xc002aac4
c0014135:	e8 8d e5 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001413a:	0f 20 c0             	mov    eax,cr0
c001413d:	83 c8 04             	or     eax,0x4
c0014140:	0f 22 c0             	mov    cr0,eax
c0014143:	31 db                	xor    ebx,ebx
c0014145:	83 c4 10             	add    esp,0x10
c0014148:	89 d8                	mov    eax,ebx
c001414a:	83 c4 08             	add    esp,0x8
c001414d:	5b                   	pop    ebx
c001414e:	c3                   	ret    
c001414f:	90                   	nop

c0014150 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014150:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014154:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014158:	c1 e0 04             	shl    eax,0x4
c001415b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001415f:	8d 50 10             	lea    edx,[eax+0x10]
c0014162:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014168:	74 08                	je     c0014172 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001416a:	83 c0 04             	add    eax,0x4
c001416d:	39 d0                	cmp    eax,edx
c001416f:	75 f1                	jne    c0014162 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014171:	c3                   	ret    
c0014172:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001417c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014186:	eb e2                	jmp    c001416a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014188 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014188:	57                   	push   edi
c0014189:	31 c0                	xor    eax,eax
c001418b:	56                   	push   esi
c001418c:	53                   	push   ebx
c001418d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014191:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014195:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014199:	89 da                	mov    edx,ebx
c001419b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001419f:	c1 e2 04             	shl    edx,0x4
c00141a2:	01 ca                	add    edx,ecx
c00141a4:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00141ac:	74 16                	je     c00141c4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00141ae:	40                   	inc    eax
c00141af:	83 f8 04             	cmp    eax,0x4
c00141b2:	75 f0                	jne    c00141a4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00141b4:	c7 44 24 10 08 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ab08
c00141bc:	5b                   	pop    ebx
c00141bd:	5e                   	pop    esi
c00141be:	5f                   	pop    edi
c00141bf:	e9 6f 5c 00 00       	jmp    c0019e33 <Krnl::panic(char const*)>
c00141c4:	8d 04 98             	lea    eax,[eax+ebx*4]
c00141c7:	8d 04 81             	lea    eax,[ecx+eax*4]
c00141ca:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00141d0:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00141d6:	5b                   	pop    ebx
c00141d7:	5e                   	pop    esi
c00141d8:	5f                   	pop    edi
c00141d9:	c3                   	ret    

c00141da <doubleFault(regs*, void*)>:
c00141da:	55                   	push   ebp
c00141db:	89 e5                	mov    ebp,esp
c00141dd:	83 ec 08             	sub    esp,0x8
c00141e0:	83 ec 0c             	sub    esp,0xc
c00141e3:	68 15 ab 02 c0       	push   0xc002ab15
c00141e8:	e8 46 5c 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c00141ed:	83 c4 10             	add    esp,0x10
c00141f0:	90                   	nop
c00141f1:	c9                   	leave  
c00141f2:	c3                   	ret    
c00141f3:	90                   	nop

c00141f4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00141f4:	56                   	push   esi
c00141f5:	53                   	push   ebx
c00141f6:	50                   	push   eax
c00141f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00141fb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141ff:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014204:	75 35                	jne    c001423b <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014206:	8d 43 20             	lea    eax,[ebx+0x20]
c0014209:	31 d2                	xor    edx,edx
c001420b:	89 c1                	mov    ecx,eax
c001420d:	c1 e1 04             	shl    ecx,0x4
c0014210:	01 f1                	add    ecx,esi
c0014212:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001421a:	74 3e                	je     c001425a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001421c:	42                   	inc    edx
c001421d:	83 fa 04             	cmp    edx,0x4
c0014220:	75 f0                	jne    c0014212 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014222:	83 ec 0c             	sub    esp,0xc
c0014225:	68 2f ab 02 c0       	push   0xc002ab2f
c001422a:	e8 04 5c 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c001422f:	83 c4 10             	add    esp,0x10
c0014232:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014237:	5a                   	pop    edx
c0014238:	5b                   	pop    ebx
c0014239:	5e                   	pop    esi
c001423a:	c3                   	ret    
c001423b:	83 ec 0c             	sub    esp,0xc
c001423e:	56                   	push   esi
c001423f:	e8 bc fb ff ff       	call   c0013e00 <Device::getName()>
c0014244:	83 c4 10             	add    esp,0x10
c0014247:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001424a:	75 ba                	jne    c0014206 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001424c:	83 fb 0f             	cmp    ebx,0xf
c001424f:	7f 29                	jg     c001427a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014251:	0f b6 9b 60 cb 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd34a0]
c0014258:	eb ac                	jmp    c0014206 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001425a:	8d 04 82             	lea    eax,[edx+eax*4]
c001425d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014261:	8d 04 86             	lea    eax,[esi+eax*4]
c0014264:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001426a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001426e:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014274:	89 d8                	mov    eax,ebx
c0014276:	5a                   	pop    edx
c0014277:	5b                   	pop    ebx
c0014278:	5e                   	pop    esi
c0014279:	c3                   	ret    
c001427a:	83 ec 0c             	sub    esp,0xc
c001427d:	68 22 ab 02 c0       	push   0xc002ab22
c0014282:	e8 ac 5b 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c0014287:	83 c4 10             	add    esp,0x10
c001428a:	e9 77 ff ff ff       	jmp    c0014206 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001428f:	90                   	nop

c0014290 <InterruptController::clearAllHandlers(int, bool)>:
c0014290:	56                   	push   esi
c0014291:	53                   	push   ebx
c0014292:	52                   	push   edx
c0014293:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014297:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001429b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00142a0:	75 61                	jne    c0014303 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00142a2:	8d 46 20             	lea    eax,[esi+0x20]
c00142a5:	c1 e6 04             	shl    esi,0x4
c00142a8:	c1 e0 04             	shl    eax,0x4
c00142ab:	01 de                	add    esi,ebx
c00142ad:	01 d8                	add    eax,ebx
c00142af:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00142b9:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00142c3:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00142cd:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00142d7:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00142e1:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00142eb:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00142f5:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00142ff:	58                   	pop    eax
c0014300:	5b                   	pop    ebx
c0014301:	5e                   	pop    esi
c0014302:	c3                   	ret    
c0014303:	83 ec 0c             	sub    esp,0xc
c0014306:	53                   	push   ebx
c0014307:	e8 f4 fa ff ff       	call   c0013e00 <Device::getName()>
c001430c:	83 c4 10             	add    esp,0x10
c001430f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014312:	75 8e                	jne    c00142a2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014314:	83 fe 0f             	cmp    esi,0xf
c0014317:	7f 09                	jg     c0014322 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014319:	0f b6 b6 60 cb 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd34a0]
c0014320:	eb 80                	jmp    c00142a2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014322:	83 ec 0c             	sub    esp,0xc
c0014325:	68 3c ab 02 c0       	push   0xc002ab3c
c001432a:	e8 04 5b 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c001432f:	83 c4 10             	add    esp,0x10
c0014332:	e9 6b ff ff ff       	jmp    c00142a2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014337:	90                   	nop

c0014338 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014338:	56                   	push   esi
c0014339:	53                   	push   ebx
c001433a:	52                   	push   edx
c001433b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001433f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014343:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014348:	75 3a                	jne    c0014384 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001434a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001434e:	8d 50 20             	lea    edx,[eax+0x20]
c0014351:	c1 e2 04             	shl    edx,0x4
c0014354:	8d 04 16             	lea    eax,[esi+edx*1]
c0014357:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c001435b:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014361:	74 0b                	je     c001436e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014363:	83 c0 04             	add    eax,0x4
c0014366:	39 d0                	cmp    eax,edx
c0014368:	75 f1                	jne    c001435b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c001436a:	58                   	pop    eax
c001436b:	5b                   	pop    ebx
c001436c:	5e                   	pop    esi
c001436d:	c3                   	ret    
c001436e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014378:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014382:	eb df                	jmp    c0014363 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014384:	83 ec 0c             	sub    esp,0xc
c0014387:	56                   	push   esi
c0014388:	e8 73 fa ff ff       	call   c0013e00 <Device::getName()>
c001438d:	83 c4 10             	add    esp,0x10
c0014390:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014393:	75 b5                	jne    c001434a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014395:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001439a:	7f 11                	jg     c00143ad <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c001439c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143a0:	0f b6 80 60 cb 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd34a0]
c00143a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00143ab:	eb 9d                	jmp    c001434a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00143ad:	83 ec 0c             	sub    esp,0xc
c00143b0:	68 49 ab 02 c0       	push   0xc002ab49
c00143b5:	e8 79 5a 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c00143ba:	83 c4 10             	add    esp,0x10
c00143bd:	eb 8b                	jmp    c001434a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00143bf <nmiHandler(regs*, void*)>:
c00143bf:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c00143c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143c8:	e9 33 a9 ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c00143cd <int_handler>:
c00143cd:	55                   	push   ebp
c00143ce:	57                   	push   edi
c00143cf:	56                   	push   esi
c00143d0:	53                   	push   ebx
c00143d1:	83 ec 0c             	sub    esp,0xc
c00143d4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00143d8:	80 3d 44 04 03 c0 00 	cmp    BYTE PTR ds:0xc0030444,0x0
c00143df:	74 0b                	je     c00143ec <int_handler+0x1f>
c00143e1:	fa                   	cli    
c00143e2:	f4                   	hlt    
c00143e3:	80 3d 44 04 03 c0 00 	cmp    BYTE PTR ds:0xc0030444,0x0
c00143ea:	75 f5                	jne    c00143e1 <int_handler+0x14>
c00143ec:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c00143f1:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00143f4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00143fa:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014400:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014403:	83 f8 17             	cmp    eax,0x17
c0014406:	77 13                	ja     c001441b <int_handler+0x4e>
c0014408:	83 ec 08             	sub    esp,0x8
c001440b:	8b 17                	mov    edx,DWORD PTR [edi]
c001440d:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014410:	0f b6 c0             	movzx  eax,al
c0014413:	50                   	push   eax
c0014414:	57                   	push   edi
c0014415:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014418:	83 c4 10             	add    esp,0x10
c001441b:	83 c3 15             	add    ebx,0x15
c001441e:	c1 e3 04             	shl    ebx,0x4
c0014421:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014425:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001442c:	31 db                	xor    ebx,ebx
c001442e:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014432:	85 c0                	test   eax,eax
c0014434:	74 13                	je     c0014449 <int_handler+0x7c>
c0014436:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014439:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c001443d:	74 1c                	je     c001445b <int_handler+0x8e>
c001443f:	83 ec 08             	sub    esp,0x8
c0014442:	52                   	push   edx
c0014443:	56                   	push   esi
c0014444:	ff d0                	call   eax
c0014446:	83 c4 10             	add    esp,0x10
c0014449:	43                   	inc    ebx
c001444a:	83 fb 04             	cmp    ebx,0x4
c001444d:	75 df                	jne    c001442e <int_handler+0x61>
c001444f:	83 c4 0c             	add    esp,0xc
c0014452:	31 c0                	xor    eax,eax
c0014454:	5b                   	pop    ebx
c0014455:	31 d2                	xor    edx,edx
c0014457:	5e                   	pop    esi
c0014458:	5f                   	pop    edi
c0014459:	5d                   	pop    ebp
c001445a:	c3                   	ret    
c001445b:	83 ec 08             	sub    esp,0x8
c001445e:	52                   	push   edx
c001445f:	56                   	push   esi
c0014460:	ff d0                	call   eax
c0014462:	83 c4 10             	add    esp,0x10
c0014465:	83 c4 0c             	add    esp,0xc
c0014468:	5b                   	pop    ebx
c0014469:	5e                   	pop    esi
c001446a:	5f                   	pop    edi
c001446b:	5d                   	pop    ebp
c001446c:	c3                   	ret    
c001446d:	90                   	nop

c001446e <InterruptController::InterruptController(char const*)>:
c001446e:	83 ec 1c             	sub    esp,0x1c
c0014471:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014475:	83 ec 08             	sub    esp,0x8
c0014478:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001447c:	50                   	push   eax
c001447d:	e8 82 f8 ff ff       	call   c0013d04 <Device::Device(char const*)>
c0014482:	83 c4 10             	add    esp,0x10
c0014485:	ba 04 ae 02 c0       	mov    edx,0xc002ae04
c001448a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001448e:	89 10                	mov    DWORD PTR [eax],edx
c0014490:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014494:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001449e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00144a6:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00144ae:	7f 5e                	jg     c001450e <InterruptController::InterruptController(char const*)+0xa0>
c00144b0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00144b8:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00144bd:	7f 49                	jg     c0014508 <InterruptController::InterruptController(char const*)+0x9a>
c00144bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00144c7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00144ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00144d2:	01 ca                	add    edx,ecx
c00144d4:	83 c2 54             	add    edx,0x54
c00144d7:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00144df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00144e7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00144ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00144f2:	01 ca                	add    edx,ecx
c00144f4:	81 c2 54 04 00 00    	add    edx,0x454
c00144fa:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014502:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014506:	eb b0                	jmp    c00144b8 <InterruptController::InterruptController(char const*)+0x4a>
c0014508:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001450c:	eb 98                	jmp    c00144a6 <InterruptController::InterruptController(char const*)+0x38>
c001450e:	90                   	nop
c001450f:	83 c4 1c             	add    esp,0x1c
c0014512:	c3                   	ret    
c0014513:	90                   	nop

c0014514 <InterruptController::~InterruptController()>:
c0014514:	83 ec 0c             	sub    esp,0xc
c0014517:	ba 04 ae 02 c0       	mov    edx,0xc002ae04
c001451c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014520:	89 10                	mov    DWORD PTR [eax],edx
c0014522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014526:	83 ec 0c             	sub    esp,0xc
c0014529:	50                   	push   eax
c001452a:	e8 9f f4 ff ff       	call   c00139ce <Device::~Device()>
c001452f:	83 c4 10             	add    esp,0x10
c0014532:	90                   	nop
c0014533:	83 c4 0c             	add    esp,0xc
c0014536:	c3                   	ret    
c0014537:	90                   	nop

c0014538 <InterruptController::~InterruptController()>:
c0014538:	83 ec 0c             	sub    esp,0xc
c001453b:	83 ec 0c             	sub    esp,0xc
c001453e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014542:	e8 cd ff ff ff       	call   c0014514 <InterruptController::~InterruptController()>
c0014547:	83 c4 10             	add    esp,0x10
c001454a:	83 ec 08             	sub    esp,0x8
c001454d:	68 58 21 00 00       	push   0x2158
c0014552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014556:	e8 94 e0 ff ff       	call   c00125ef <operator delete(void*, unsigned long)>
c001455b:	83 c4 10             	add    esp,0x10
c001455e:	83 c4 0c             	add    esp,0xc
c0014561:	c3                   	ret    

c0014562 <displayDebugInfo(regs*)>:
c0014562:	55                   	push   ebp
c0014563:	57                   	push   edi
c0014564:	56                   	push   esi
c0014565:	53                   	push   ebx
c0014566:	83 ec 24             	sub    esp,0x24
c0014569:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001456d:	0f 20 c2             	mov    edx,cr0
c0014570:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014574:	0f 20 d7             	mov    edi,cr2
c0014577:	0f 20 de             	mov    esi,cr3
c001457a:	0f 20 e5             	mov    ebp,cr4
c001457d:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014580:	68 56 ab 02 c0       	push   0xc002ab56
c0014585:	e8 3d e1 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001458a:	59                   	pop    ecx
c001458b:	58                   	pop    eax
c001458c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001458f:	68 61 ab 02 c0       	push   0xc002ab61
c0014594:	e8 2e e1 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0014599:	58                   	pop    eax
c001459a:	5a                   	pop    edx
c001459b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001459e:	68 6c ab 02 c0       	push   0xc002ab6c
c00145a3:	e8 1f e1 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c00145a8:	59                   	pop    ecx
c00145a9:	58                   	pop    eax
c00145aa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00145ad:	68 77 ab 02 c0       	push   0xc002ab77
c00145b2:	e8 10 e1 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c00145b7:	58                   	pop    eax
c00145b8:	5a                   	pop    edx
c00145b9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00145bc:	68 82 ab 02 c0       	push   0xc002ab82
c00145c1:	e8 01 e1 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c00145c6:	59                   	pop    ecx
c00145c7:	58                   	pop    eax
c00145c8:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00145cb:	68 8d ab 02 c0       	push   0xc002ab8d
c00145d0:	e8 f2 e0 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c00145d5:	58                   	pop    eax
c00145d6:	5a                   	pop    edx
c00145d7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00145da:	68 98 ab 02 c0       	push   0xc002ab98
c00145df:	e8 e3 e0 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c00145e4:	59                   	pop    ecx
c00145e5:	58                   	pop    eax
c00145e6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00145e9:	68 a3 ab 02 c0       	push   0xc002aba3
c00145ee:	e8 d4 e0 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c00145f3:	58                   	pop    eax
c00145f4:	5a                   	pop    edx
c00145f5:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00145f8:	68 ae ab 02 c0       	push   0xc002abae
c00145fd:	e8 c5 e0 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0014602:	59                   	pop    ecx
c0014603:	58                   	pop    eax
c0014604:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014607:	68 bd ab 02 c0       	push   0xc002abbd
c001460c:	e8 b6 e0 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0014611:	58                   	pop    eax
c0014612:	5a                   	pop    edx
c0014613:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014616:	68 c8 ab 02 c0       	push   0xc002abc8
c001461b:	e8 a7 e0 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0014620:	59                   	pop    ecx
c0014621:	58                   	pop    eax
c0014622:	57                   	push   edi
c0014623:	68 d3 ab 02 c0       	push   0xc002abd3
c0014628:	e8 9a e0 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001462d:	58                   	pop    eax
c001462e:	5a                   	pop    edx
c001462f:	56                   	push   esi
c0014630:	68 de ab 02 c0       	push   0xc002abde
c0014635:	e8 8d e0 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001463a:	59                   	pop    ecx
c001463b:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0014640:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014646:	e8 06 bd ff ff       	call   c0010351 <setActiveTerminal(VgaText*)>
c001464b:	58                   	pop    eax
c001464c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001464f:	5a                   	pop    edx
c0014650:	c1 e0 05             	shl    eax,0x5
c0014653:	05 c0 c8 02 c0       	add    eax,0xc002c8c0
c0014658:	50                   	push   eax
c0014659:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001465e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014664:	e8 f5 c1 ff ff       	call   c001085e <VgaText::puts(char const*)>
c0014669:	59                   	pop    ecx
c001466a:	58                   	pop    eax
c001466b:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0014670:	68 e9 ab 02 c0       	push   0xc002abe9
c0014675:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001467b:	e8 de c1 ff ff       	call   c001085e <VgaText::puts(char const*)>
c0014680:	58                   	pop    eax
c0014681:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014686:	5a                   	pop    edx
c0014687:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001468a:	83 c0 0c             	add    eax,0xc
c001468d:	50                   	push   eax
c001468e:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0014693:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014699:	e8 c0 c1 ff ff       	call   c001085e <VgaText::puts(char const*)>
c001469e:	59                   	pop    ecx
c001469f:	58                   	pop    eax
c00146a0:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c00146a5:	68 f2 ab 02 c0       	push   0xc002abf2
c00146aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146b0:	e8 a9 c1 ff ff       	call   c001085e <VgaText::puts(char const*)>
c00146b5:	58                   	pop    eax
c00146b6:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c00146bb:	5a                   	pop    edx
c00146bc:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00146bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146c5:	e8 4e c1 ff ff       	call   c0010818 <VgaText::putx(unsigned int)>
c00146ca:	59                   	pop    ecx
c00146cb:	58                   	pop    eax
c00146cc:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c00146d1:	68 fa ab 02 c0       	push   0xc002abfa
c00146d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146dc:	e8 7d c1 ff ff       	call   c001085e <VgaText::puts(char const*)>
c00146e1:	58                   	pop    eax
c00146e2:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c00146e7:	5a                   	pop    edx
c00146e8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00146eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146f1:	e8 22 c1 ff ff       	call   c0010818 <VgaText::putx(unsigned int)>
c00146f6:	59                   	pop    ecx
c00146f7:	58                   	pop    eax
c00146f8:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c00146fd:	68 02 ac 02 c0       	push   0xc002ac02
c0014702:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014708:	e8 51 c1 ff ff       	call   c001085e <VgaText::puts(char const*)>
c001470d:	58                   	pop    eax
c001470e:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0014713:	5a                   	pop    edx
c0014714:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014717:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001471d:	e8 f6 c0 ff ff       	call   c0010818 <VgaText::putx(unsigned int)>
c0014722:	59                   	pop    ecx
c0014723:	58                   	pop    eax
c0014724:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0014729:	68 0a ac 02 c0       	push   0xc002ac0a
c001472e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014734:	e8 25 c1 ff ff       	call   c001085e <VgaText::puts(char const*)>
c0014739:	58                   	pop    eax
c001473a:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001473f:	5a                   	pop    edx
c0014740:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014743:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014749:	e8 ca c0 ff ff       	call   c0010818 <VgaText::putx(unsigned int)>
c001474e:	59                   	pop    ecx
c001474f:	58                   	pop    eax
c0014750:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0014755:	68 12 ac 02 c0       	push   0xc002ac12
c001475a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014760:	e8 f9 c0 ff ff       	call   c001085e <VgaText::puts(char const*)>
c0014765:	58                   	pop    eax
c0014766:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001476b:	5a                   	pop    edx
c001476c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001476f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014775:	e8 9e c0 ff ff       	call   c0010818 <VgaText::putx(unsigned int)>
c001477a:	59                   	pop    ecx
c001477b:	58                   	pop    eax
c001477c:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0014781:	68 1a ac 02 c0       	push   0xc002ac1a
c0014786:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001478c:	e8 cd c0 ff ff       	call   c001085e <VgaText::puts(char const*)>
c0014791:	58                   	pop    eax
c0014792:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0014797:	5a                   	pop    edx
c0014798:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001479b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a1:	e8 72 c0 ff ff       	call   c0010818 <VgaText::putx(unsigned int)>
c00147a6:	59                   	pop    ecx
c00147a7:	58                   	pop    eax
c00147a8:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c00147ad:	68 22 ac 02 c0       	push   0xc002ac22
c00147b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147b8:	e8 a1 c0 ff ff       	call   c001085e <VgaText::puts(char const*)>
c00147bd:	58                   	pop    eax
c00147be:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c00147c3:	5a                   	pop    edx
c00147c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00147c8:	52                   	push   edx
c00147c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147cf:	e8 44 c0 ff ff       	call   c0010818 <VgaText::putx(unsigned int)>
c00147d4:	59                   	pop    ecx
c00147d5:	58                   	pop    eax
c00147d6:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c00147db:	68 2b ac 02 c0       	push   0xc002ac2b
c00147e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e6:	e8 73 c0 ff ff       	call   c001085e <VgaText::puts(char const*)>
c00147eb:	58                   	pop    eax
c00147ec:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c00147f1:	5a                   	pop    edx
c00147f2:	57                   	push   edi
c00147f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147f9:	e8 1a c0 ff ff       	call   c0010818 <VgaText::putx(unsigned int)>
c00147fe:	59                   	pop    ecx
c00147ff:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0014804:	5f                   	pop    edi
c0014805:	68 33 ac 02 c0       	push   0xc002ac33
c001480a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014810:	e8 49 c0 ff ff       	call   c001085e <VgaText::puts(char const*)>
c0014815:	58                   	pop    eax
c0014816:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001481b:	5a                   	pop    edx
c001481c:	56                   	push   esi
c001481d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014823:	e8 f0 bf ff ff       	call   c0010818 <VgaText::putx(unsigned int)>
c0014828:	59                   	pop    ecx
c0014829:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001482e:	5e                   	pop    esi
c001482f:	68 3b ac 02 c0       	push   0xc002ac3b
c0014834:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001483a:	e8 1f c0 ff ff       	call   c001085e <VgaText::puts(char const*)>
c001483f:	5f                   	pop    edi
c0014840:	58                   	pop    eax
c0014841:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0014846:	55                   	push   ebp
c0014847:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001484d:	e8 c6 bf ff ff       	call   c0010818 <VgaText::putx(unsigned int)>
c0014852:	58                   	pop    eax
c0014853:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0014858:	5a                   	pop    edx
c0014859:	68 43 ac 02 c0       	push   0xc002ac43
c001485e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014864:	e8 f5 bf ff ff       	call   c001085e <VgaText::puts(char const*)>
c0014869:	0f 21 c0             	mov    eax,db0
c001486c:	59                   	pop    ecx
c001486d:	5e                   	pop    esi
c001486e:	50                   	push   eax
c001486f:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0014874:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001487a:	e8 99 bf ff ff       	call   c0010818 <VgaText::putx(unsigned int)>
c001487f:	5f                   	pop    edi
c0014880:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0014885:	5d                   	pop    ebp
c0014886:	68 4c ac 02 c0       	push   0xc002ac4c
c001488b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014891:	e8 c8 bf ff ff       	call   c001085e <VgaText::puts(char const*)>
c0014896:	0f 21 c8             	mov    eax,db1
c0014899:	5a                   	pop    edx
c001489a:	59                   	pop    ecx
c001489b:	50                   	push   eax
c001489c:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c00148a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a7:	e8 6c bf ff ff       	call   c0010818 <VgaText::putx(unsigned int)>
c00148ac:	5e                   	pop    esi
c00148ad:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c00148b2:	5f                   	pop    edi
c00148b3:	68 54 ac 02 c0       	push   0xc002ac54
c00148b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148be:	e8 9b bf ff ff       	call   c001085e <VgaText::puts(char const*)>
c00148c3:	0f 21 d0             	mov    eax,db2
c00148c6:	5d                   	pop    ebp
c00148c7:	5a                   	pop    edx
c00148c8:	50                   	push   eax
c00148c9:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c00148ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148d4:	e8 3f bf ff ff       	call   c0010818 <VgaText::putx(unsigned int)>
c00148d9:	59                   	pop    ecx
c00148da:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c00148df:	5e                   	pop    esi
c00148e0:	68 5c ac 02 c0       	push   0xc002ac5c
c00148e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148eb:	e8 6e bf ff ff       	call   c001085e <VgaText::puts(char const*)>
c00148f0:	0f 21 d8             	mov    eax,db3
c00148f3:	5f                   	pop    edi
c00148f4:	5d                   	pop    ebp
c00148f5:	50                   	push   eax
c00148f6:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c00148fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014901:	e8 12 bf ff ff       	call   c0010818 <VgaText::putx(unsigned int)>
c0014906:	58                   	pop    eax
c0014907:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001490c:	5a                   	pop    edx
c001490d:	68 64 ac 02 c0       	push   0xc002ac64
c0014912:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014918:	e8 41 bf ff ff       	call   c001085e <VgaText::puts(char const*)>
c001491d:	0f 21 f0             	mov    eax,db6
c0014920:	59                   	pop    ecx
c0014921:	5e                   	pop    esi
c0014922:	50                   	push   eax
c0014923:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0014928:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001492e:	e8 e5 be ff ff       	call   c0010818 <VgaText::putx(unsigned int)>
c0014933:	5f                   	pop    edi
c0014934:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0014939:	5d                   	pop    ebp
c001493a:	68 6c ac 02 c0       	push   0xc002ac6c
c001493f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014945:	e8 14 bf ff ff       	call   c001085e <VgaText::puts(char const*)>
c001494a:	0f 21 f8             	mov    eax,db7
c001494d:	5a                   	pop    edx
c001494e:	59                   	pop    ecx
c001494f:	50                   	push   eax
c0014950:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0014955:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001495b:	e8 b8 be ff ff       	call   c0010818 <VgaText::putx(unsigned int)>
c0014960:	5e                   	pop    esi
c0014961:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014964:	e8 43 86 00 00       	call   c001cfac <Thr::getDriverNameFromAddress(unsigned long)>
c0014969:	83 c4 10             	add    esp,0x10
c001496c:	85 c0                	test   eax,eax
c001496e:	74 7d                	je     c00149ed <displayDebugInfo(regs*)+0x48b>
c0014970:	89 c6                	mov    esi,eax
c0014972:	50                   	push   eax
c0014973:	50                   	push   eax
c0014974:	56                   	push   esi
c0014975:	68 74 ac 02 c0       	push   0xc002ac74
c001497a:	e8 48 dd ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001497f:	5a                   	pop    edx
c0014980:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0014985:	59                   	pop    ecx
c0014986:	68 82 ac 02 c0       	push   0xc002ac82
c001498b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014991:	e8 c8 be ff ff       	call   c001085e <VgaText::puts(char const*)>
c0014996:	5f                   	pop    edi
c0014997:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001499c:	5d                   	pop    ebp
c001499d:	56                   	push   esi
c001499e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a4:	e8 b5 be ff ff       	call   c001085e <VgaText::puts(char const*)>
c00149a9:	58                   	pop    eax
c00149aa:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c00149af:	5a                   	pop    edx
c00149b0:	68 8e ac 02 c0       	push   0xc002ac8e
c00149b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149bb:	e8 9e be ff ff       	call   c001085e <VgaText::puts(char const*)>
c00149c0:	59                   	pop    ecx
c00149c1:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c00149c6:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00149cc:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00149cf:	e8 0f 86 00 00       	call   c001cfe3 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00149d4:	5b                   	pop    ebx
c00149d5:	5d                   	pop    ebp
c00149d6:	50                   	push   eax
c00149d7:	57                   	push   edi
c00149d8:	e8 3b be ff ff       	call   c0010818 <VgaText::putx(unsigned int)>
c00149dd:	58                   	pop    eax
c00149de:	5a                   	pop    edx
c00149df:	56                   	push   esi
c00149e0:	68 9a ac 02 c0       	push   0xc002ac9a
c00149e5:	e8 dd dc ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c00149ea:	83 c4 10             	add    esp,0x10
c00149ed:	fa                   	cli    
c00149ee:	f4                   	hlt    
c00149ef:	eb fe                	jmp    c00149ef <displayDebugInfo(regs*)+0x48d>

c00149f1 <x87EmulHandler(regs*, void*)>:
c00149f1:	83 ec 0c             	sub    esp,0xc
c00149f4:	0f 20 c2             	mov    edx,cr0
c00149f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149fc:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014a00:	75 4b                	jne    c0014a4d <x87EmulHandler(regs*, void*)+0x5c>
c0014a02:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0014a07:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014a0d:	85 c0                	test   eax,eax
c0014a0f:	74 05                	je     c0014a16 <x87EmulHandler(regs*, void*)+0x25>
c0014a11:	83 e2 08             	and    edx,0x8
c0014a14:	75 17                	jne    c0014a2d <x87EmulHandler(regs*, void*)+0x3c>
c0014a16:	83 ec 0c             	sub    esp,0xc
c0014a19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a1d:	e8 5b a9 00 00       	call   c001f37d <Vm::x87Handler(regs*)>
c0014a22:	83 c4 10             	add    esp,0x10
c0014a25:	84 c0                	test   al,al
c0014a27:	74 24                	je     c0014a4d <x87EmulHandler(regs*, void*)+0x5c>
c0014a29:	83 c4 0c             	add    esp,0xc
c0014a2c:	c3                   	ret    
c0014a2d:	83 ec 0c             	sub    esp,0xc
c0014a30:	68 c0 ac 02 c0       	push   0xc002acc0
c0014a35:	e8 8d dc ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0014a3a:	0f 06                	clts   
c0014a3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a41:	83 c4 10             	add    esp,0x10
c0014a44:	a3 88 da 02 c0       	mov    ds:0xc002da88,eax
c0014a49:	83 c4 0c             	add    esp,0xc
c0014a4c:	c3                   	ret    
c0014a4d:	83 ec 0c             	sub    esp,0xc
c0014a50:	68 aa ac 02 c0       	push   0xc002acaa
c0014a55:	e8 6d dc ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0014a5a:	5a                   	pop    edx
c0014a5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a5f:	e8 fe fa ff ff       	call   c0014562 <displayDebugInfo(regs*)>

c0014a64 <gpFault(regs*, void*)>:
c0014a64:	53                   	push   ebx
c0014a65:	83 ec 14             	sub    esp,0x14
c0014a68:	c7 05 84 da 02 c0 56 e8 01 c0 	mov    DWORD PTR ds:0xc002da84,0xc001e856
c0014a72:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014a76:	53                   	push   ebx
c0014a77:	e8 da 9d 00 00       	call   c001e856 <Vm::faultHandler(regs*)>
c0014a7c:	83 c4 10             	add    esp,0x10
c0014a7f:	84 c0                	test   al,al
c0014a81:	74 05                	je     c0014a88 <gpFault(regs*, void*)+0x24>
c0014a83:	83 c4 08             	add    esp,0x8
c0014a86:	5b                   	pop    ebx
c0014a87:	c3                   	ret    
c0014a88:	83 ec 0c             	sub    esp,0xc
c0014a8b:	68 cd ac 02 c0       	push   0xc002accd
c0014a90:	e8 32 dc ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0014a95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a98:	e8 c5 fa ff ff       	call   c0014562 <displayDebugInfo(regs*)>

c0014a9d <pgFault(regs*, void*)>:
c0014a9d:	83 ec 18             	sub    esp,0x18
c0014aa0:	68 e8 ac 02 c0       	push   0xc002ace8
c0014aa5:	e8 1d dc ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0014aaa:	0f 20 d0             	mov    eax,cr2
c0014aad:	5a                   	pop    edx
c0014aae:	59                   	pop    ecx
c0014aaf:	50                   	push   eax
c0014ab0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ab5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ab8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014abe:	e8 2d d7 ff ff       	call   c00121f0 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014ac3:	83 c4 10             	add    esp,0x10
c0014ac6:	84 c0                	test   al,al
c0014ac8:	74 04                	je     c0014ace <pgFault(regs*, void*)+0x31>
c0014aca:	83 c4 0c             	add    esp,0xc
c0014acd:	c3                   	ret    
c0014ace:	83 ec 0c             	sub    esp,0xc
c0014ad1:	68 f2 ac 02 c0       	push   0xc002acf2
c0014ad6:	e8 ec db ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0014adb:	58                   	pop    eax
c0014adc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ae0:	e8 7d fa ff ff       	call   c0014562 <displayDebugInfo(regs*)>

c0014ae5 <otherISRHandler(regs*, void*)>:
c0014ae5:	53                   	push   ebx
c0014ae6:	83 ec 0c             	sub    esp,0xc
c0014ae9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014aed:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014af0:	50                   	push   eax
c0014af1:	50                   	push   eax
c0014af2:	68 ff ac 02 c0       	push   0xc002acff
c0014af7:	e8 cb db ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0014afc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014aff:	e8 5e fa ff ff       	call   c0014562 <displayDebugInfo(regs*)>

c0014b04 <opcodeFault(regs*, void*)>:
c0014b04:	55                   	push   ebp
c0014b05:	89 e5                	mov    ebp,esp
c0014b07:	56                   	push   esi
c0014b08:	53                   	push   ebx
c0014b09:	83 ec 40             	sub    esp,0x40
c0014b0c:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0014b11:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014b17:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014b1d:	84 c0                	test   al,al
c0014b1f:	74 24                	je     c0014b45 <opcodeFault(regs*, void*)+0x41>
c0014b21:	83 ec 0c             	sub    esp,0xc
c0014b24:	68 1c ad 02 c0       	push   0xc002ad1c
c0014b29:	e8 99 db ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0014b2e:	83 c4 10             	add    esp,0x10
c0014b31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b34:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b37:	8d 50 19             	lea    edx,[eax+0x19]
c0014b3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b3d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b40:	e9 d5 05 00 00       	jmp    c001511a <opcodeFault(regs*, void*)+0x616>
c0014b45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b48:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b4b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014b4e:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014b52:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014b56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b59:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b5c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014b5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b62:	8a 00                	mov    al,BYTE PTR [eax]
c0014b64:	3c f0                	cmp    al,0xf0
c0014b66:	75 17                	jne    c0014b7f <opcodeFault(regs*, void*)+0x7b>
c0014b68:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b6e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b71:	8d 50 01             	lea    edx,[eax+0x1]
c0014b74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b77:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b7a:	e9 da 00 00 00       	jmp    c0014c59 <opcodeFault(regs*, void*)+0x155>
c0014b7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b82:	8a 00                	mov    al,BYTE PTR [eax]
c0014b84:	3c f2                	cmp    al,0xf2
c0014b86:	74 09                	je     c0014b91 <opcodeFault(regs*, void*)+0x8d>
c0014b88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b8b:	8a 00                	mov    al,BYTE PTR [eax]
c0014b8d:	3c f3                	cmp    al,0xf3
c0014b8f:	75 1b                	jne    c0014bac <opcodeFault(regs*, void*)+0xa8>
c0014b91:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b95:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b9b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b9e:	8d 50 01             	lea    edx,[eax+0x1]
c0014ba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ba7:	e9 ad 00 00 00       	jmp    c0014c59 <opcodeFault(regs*, void*)+0x155>
c0014bac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014baf:	8a 00                	mov    al,BYTE PTR [eax]
c0014bb1:	3c 66                	cmp    al,0x66
c0014bb3:	75 1f                	jne    c0014bd4 <opcodeFault(regs*, void*)+0xd0>
c0014bb5:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014bb9:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014bbd:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bc3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bc6:	8d 50 01             	lea    edx,[eax+0x1]
c0014bc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bcc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bcf:	e9 85 00 00 00       	jmp    c0014c59 <opcodeFault(regs*, void*)+0x155>
c0014bd4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bd7:	8a 00                	mov    al,BYTE PTR [eax]
c0014bd9:	3c 67                	cmp    al,0x67
c0014bdb:	75 18                	jne    c0014bf5 <opcodeFault(regs*, void*)+0xf1>
c0014bdd:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014be1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014be4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014be7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bea:	8d 50 01             	lea    edx,[eax+0x1]
c0014bed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bf0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bf3:	eb 64                	jmp    c0014c59 <opcodeFault(regs*, void*)+0x155>
c0014bf5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bf8:	8a 00                	mov    al,BYTE PTR [eax]
c0014bfa:	3c 2e                	cmp    al,0x2e
c0014bfc:	74 09                	je     c0014c07 <opcodeFault(regs*, void*)+0x103>
c0014bfe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c01:	8a 00                	mov    al,BYTE PTR [eax]
c0014c03:	3c 3e                	cmp    al,0x3e
c0014c05:	75 18                	jne    c0014c1f <opcodeFault(regs*, void*)+0x11b>
c0014c07:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c0b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c11:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c14:	8d 50 01             	lea    edx,[eax+0x1]
c0014c17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c1a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c1d:	eb 3a                	jmp    c0014c59 <opcodeFault(regs*, void*)+0x155>
c0014c1f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c22:	8a 00                	mov    al,BYTE PTR [eax]
c0014c24:	3c 36                	cmp    al,0x36
c0014c26:	74 1b                	je     c0014c43 <opcodeFault(regs*, void*)+0x13f>
c0014c28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c2b:	8a 00                	mov    al,BYTE PTR [eax]
c0014c2d:	3c 26                	cmp    al,0x26
c0014c2f:	74 12                	je     c0014c43 <opcodeFault(regs*, void*)+0x13f>
c0014c31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c34:	8a 00                	mov    al,BYTE PTR [eax]
c0014c36:	3c 64                	cmp    al,0x64
c0014c38:	74 09                	je     c0014c43 <opcodeFault(regs*, void*)+0x13f>
c0014c3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c3d:	8a 00                	mov    al,BYTE PTR [eax]
c0014c3f:	3c 65                	cmp    al,0x65
c0014c41:	75 16                	jne    c0014c59 <opcodeFault(regs*, void*)+0x155>
c0014c43:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c47:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c4d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c50:	8d 50 01             	lea    edx,[eax+0x1]
c0014c53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c56:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c59:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c5c:	8a 00                	mov    al,BYTE PTR [eax]
c0014c5e:	3c 0f                	cmp    al,0xf
c0014c60:	0f 85 ad 00 00 00    	jne    c0014d13 <opcodeFault(regs*, void*)+0x20f>
c0014c66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c69:	40                   	inc    eax
c0014c6a:	8a 00                	mov    al,BYTE PTR [eax]
c0014c6c:	3c c2                	cmp    al,0xc2
c0014c6e:	74 0e                	je     c0014c7e <opcodeFault(regs*, void*)+0x17a>
c0014c70:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c73:	40                   	inc    eax
c0014c74:	8a 00                	mov    al,BYTE PTR [eax]
c0014c76:	3c c3                	cmp    al,0xc3
c0014c78:	0f 85 95 00 00 00    	jne    c0014d13 <opcodeFault(regs*, void*)+0x20f>
c0014c7e:	83 ec 0c             	sub    esp,0xc
c0014c81:	68 3f ad 02 c0       	push   0xc002ad3f
c0014c86:	e8 3c da ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0014c8b:	83 c4 10             	add    esp,0x10
c0014c8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c91:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c94:	8d 50 01             	lea    edx,[eax+0x1]
c0014c97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c9a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c9d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ca0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ca3:	8a 00                	mov    al,BYTE PTR [eax]
c0014ca5:	8d 50 fe             	lea    edx,[eax-0x2]
c0014ca8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cab:	88 10                	mov    BYTE PTR [eax],dl
c0014cad:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014cb0:	50                   	push   eax
c0014cb1:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014cb4:	50                   	push   eax
c0014cb5:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014cb8:	50                   	push   eax
c0014cb9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014cbc:	e8 8b 48 00 00       	call   c001954c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014cc1:	83 c4 10             	add    esp,0x10
c0014cc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cca:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014ccd:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014cd0:	01 d0                	add    eax,edx
c0014cd2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014cd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cdb:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014cde:	48                   	dec    eax
c0014cdf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014ce2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce5:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014ce8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ceb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cee:	83 ec 04             	sub    esp,0x4
c0014cf1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014cf4:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014cf7:	50                   	push   eax
c0014cf8:	e8 b7 b4 fe ff       	call   c00001b4 <voodooXADD>
c0014cfd:	83 c4 10             	add    esp,0x10
c0014d00:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014d03:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014d06:	01 c2                	add    edx,eax
c0014d08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d0b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d0e:	e9 07 04 00 00       	jmp    c001511a <opcodeFault(regs*, void*)+0x616>
c0014d13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d16:	8a 00                	mov    al,BYTE PTR [eax]
c0014d18:	3c 0f                	cmp    al,0xf
c0014d1a:	0f 85 8b 01 00 00    	jne    c0014eab <opcodeFault(regs*, void*)+0x3a7>
c0014d20:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d23:	40                   	inc    eax
c0014d24:	8a 00                	mov    al,BYTE PTR [eax]
c0014d26:	3c c7                	cmp    al,0xc7
c0014d28:	0f 86 7d 01 00 00    	jbe    c0014eab <opcodeFault(regs*, void*)+0x3a7>
c0014d2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d31:	40                   	inc    eax
c0014d32:	8a 00                	mov    al,BYTE PTR [eax]
c0014d34:	3c cf                	cmp    al,0xcf
c0014d36:	0f 87 6f 01 00 00    	ja     c0014eab <opcodeFault(regs*, void*)+0x3a7>
c0014d3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d3f:	40                   	inc    eax
c0014d40:	8a 00                	mov    al,BYTE PTR [eax]
c0014d42:	83 c0 38             	add    eax,0x38
c0014d45:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014d48:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014d4c:	75 0b                	jne    c0014d59 <opcodeFault(regs*, void*)+0x255>
c0014d4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d51:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014d54:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d57:	eb 75                	jmp    c0014dce <opcodeFault(regs*, void*)+0x2ca>
c0014d59:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014d5d:	75 0b                	jne    c0014d6a <opcodeFault(regs*, void*)+0x266>
c0014d5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d62:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014d65:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d68:	eb 64                	jmp    c0014dce <opcodeFault(regs*, void*)+0x2ca>
c0014d6a:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014d6e:	75 0b                	jne    c0014d7b <opcodeFault(regs*, void*)+0x277>
c0014d70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d73:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d76:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d79:	eb 53                	jmp    c0014dce <opcodeFault(regs*, void*)+0x2ca>
c0014d7b:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014d7f:	75 0b                	jne    c0014d8c <opcodeFault(regs*, void*)+0x288>
c0014d81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d84:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014d87:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d8a:	eb 42                	jmp    c0014dce <opcodeFault(regs*, void*)+0x2ca>
c0014d8c:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014d90:	75 0b                	jne    c0014d9d <opcodeFault(regs*, void*)+0x299>
c0014d92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d95:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014d98:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d9b:	eb 31                	jmp    c0014dce <opcodeFault(regs*, void*)+0x2ca>
c0014d9d:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014da1:	75 0b                	jne    c0014dae <opcodeFault(regs*, void*)+0x2aa>
c0014da3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da6:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014da9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014dac:	eb 20                	jmp    c0014dce <opcodeFault(regs*, void*)+0x2ca>
c0014dae:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014db2:	75 0b                	jne    c0014dbf <opcodeFault(regs*, void*)+0x2bb>
c0014db4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014dba:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014dbd:	eb 0f                	jmp    c0014dce <opcodeFault(regs*, void*)+0x2ca>
c0014dbf:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014dc3:	75 09                	jne    c0014dce <opcodeFault(regs*, void*)+0x2ca>
c0014dc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014dcb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014dce:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014dd2:	74 10                	je     c0014de4 <opcodeFault(regs*, void*)+0x2e0>
c0014dd4:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014ddb:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014de2:	eb 2d                	jmp    c0014e11 <opcodeFault(regs*, void*)+0x30d>
c0014de4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014de7:	c1 e0 18             	shl    eax,0x18
c0014dea:	89 c2                	mov    edx,eax
c0014dec:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014def:	c1 e0 08             	shl    eax,0x8
c0014df2:	25 00 00 ff 00       	and    eax,0xff0000
c0014df7:	09 c2                	or     edx,eax
c0014df9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014dfc:	c1 e8 08             	shr    eax,0x8
c0014dff:	25 00 ff 00 00       	and    eax,0xff00
c0014e04:	09 c2                	or     edx,eax
c0014e06:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e09:	c1 e8 18             	shr    eax,0x18
c0014e0c:	09 d0                	or     eax,edx
c0014e0e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e11:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014e15:	75 0b                	jne    c0014e22 <opcodeFault(regs*, void*)+0x31e>
c0014e17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e1a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e1d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014e20:	eb 75                	jmp    c0014e97 <opcodeFault(regs*, void*)+0x393>
c0014e22:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014e26:	75 0b                	jne    c0014e33 <opcodeFault(regs*, void*)+0x32f>
c0014e28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e2b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e2e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014e31:	eb 64                	jmp    c0014e97 <opcodeFault(regs*, void*)+0x393>
c0014e33:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014e37:	75 0b                	jne    c0014e44 <opcodeFault(regs*, void*)+0x340>
c0014e39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e3c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e3f:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e42:	eb 53                	jmp    c0014e97 <opcodeFault(regs*, void*)+0x393>
c0014e44:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014e48:	75 0b                	jne    c0014e55 <opcodeFault(regs*, void*)+0x351>
c0014e4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e4d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e50:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014e53:	eb 42                	jmp    c0014e97 <opcodeFault(regs*, void*)+0x393>
c0014e55:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014e59:	75 0b                	jne    c0014e66 <opcodeFault(regs*, void*)+0x362>
c0014e5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e61:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014e64:	eb 31                	jmp    c0014e97 <opcodeFault(regs*, void*)+0x393>
c0014e66:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014e6a:	75 0b                	jne    c0014e77 <opcodeFault(regs*, void*)+0x373>
c0014e6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e6f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e72:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014e75:	eb 20                	jmp    c0014e97 <opcodeFault(regs*, void*)+0x393>
c0014e77:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014e7b:	75 0b                	jne    c0014e88 <opcodeFault(regs*, void*)+0x384>
c0014e7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e80:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e83:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014e86:	eb 0f                	jmp    c0014e97 <opcodeFault(regs*, void*)+0x393>
c0014e88:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014e8c:	75 09                	jne    c0014e97 <opcodeFault(regs*, void*)+0x393>
c0014e8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e91:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e94:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014e97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e9d:	8d 50 02             	lea    edx,[eax+0x2]
c0014ea0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ea6:	e9 6f 02 00 00       	jmp    c001511a <opcodeFault(regs*, void*)+0x616>
c0014eab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eae:	8a 00                	mov    al,BYTE PTR [eax]
c0014eb0:	3c 0f                	cmp    al,0xf
c0014eb2:	0f 85 8d 01 00 00    	jne    c0015045 <opcodeFault(regs*, void*)+0x541>
c0014eb8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ebb:	40                   	inc    eax
c0014ebc:	8a 00                	mov    al,BYTE PTR [eax]
c0014ebe:	3c c7                	cmp    al,0xc7
c0014ec0:	0f 85 7f 01 00 00    	jne    c0015045 <opcodeFault(regs*, void*)+0x541>
c0014ec6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ec9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ecc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ecf:	8d 50 01             	lea    edx,[eax+0x1]
c0014ed2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ed8:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014edb:	50                   	push   eax
c0014edc:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014edf:	50                   	push   eax
c0014ee0:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014ee3:	50                   	push   eax
c0014ee4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ee7:	e8 60 46 00 00       	call   c001954c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014eec:	83 c4 10             	add    esp,0x10
c0014eef:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014ef2:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014ef5:	83 f0 01             	xor    eax,0x1
c0014ef8:	84 c0                	test   al,al
c0014efa:	0f 84 45 01 00 00    	je     c0015045 <opcodeFault(regs*, void*)+0x541>
c0014f00:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014f03:	3c 01                	cmp    al,0x1
c0014f05:	0f 85 3a 01 00 00    	jne    c0015045 <opcodeFault(regs*, void*)+0x541>
c0014f0b:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014f0e:	83 f0 01             	xor    eax,0x1
c0014f11:	84 c0                	test   al,al
c0014f13:	0f 84 2c 01 00 00    	je     c0015045 <opcodeFault(regs*, void*)+0x541>
c0014f19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f1c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f1f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f22:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014f29:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014f2c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014f2f:	89 c2                	mov    edx,eax
c0014f31:	b8 00 00 00 00       	mov    eax,0x0
c0014f36:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f39:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014f3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f3f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014f42:	ba 00 00 00 00       	mov    edx,0x0
c0014f47:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014f4a:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014f4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f50:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014f53:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014f56:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014f5d:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014f60:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014f63:	89 c2                	mov    edx,eax
c0014f65:	b8 00 00 00 00       	mov    eax,0x0
c0014f6a:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014f6d:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014f70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f73:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f76:	ba 00 00 00 00       	mov    edx,0x0
c0014f7b:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014f7e:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014f81:	fa                   	cli    
c0014f82:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c0014f87:	40                   	inc    eax
c0014f88:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c0014f8d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014f90:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014f93:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f95:	89 c1                	mov    ecx,eax
c0014f97:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014f9a:	89 cb                	mov    ebx,ecx
c0014f9c:	89 d0                	mov    eax,edx
c0014f9e:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014fa1:	89 c6                	mov    esi,eax
c0014fa3:	89 f0                	mov    eax,esi
c0014fa5:	09 d8                	or     eax,ebx
c0014fa7:	85 c0                	test   eax,eax
c0014fa9:	75 21                	jne    c0014fcc <opcodeFault(regs*, void*)+0x4c8>
c0014fab:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014fae:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014fb1:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014fb4:	89 01                	mov    DWORD PTR [ecx],eax
c0014fb6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fbc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fbf:	83 c8 40             	or     eax,0x40
c0014fc2:	89 c2                	mov    edx,eax
c0014fc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc7:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014fca:	eb 3e                	jmp    c001500a <opcodeFault(regs*, void*)+0x506>
c0014fcc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014fcf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014fd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fd4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014fd7:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014fda:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014fe3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014fe6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014fe9:	89 d0                	mov    eax,edx
c0014feb:	31 d2                	xor    edx,edx
c0014fed:	89 c3                	mov    ebx,eax
c0014fef:	89 d6                	mov    esi,edx
c0014ff1:	89 da                	mov    edx,ebx
c0014ff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff6:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ffc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fff:	83 e0 bf             	and    eax,0xffffffbf
c0015002:	89 c2                	mov    edx,eax
c0015004:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015007:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001500a:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001500f:	48                   	dec    eax
c0015010:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c0015015:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001501a:	85 c0                	test   eax,eax
c001501c:	75 01                	jne    c001501f <opcodeFault(regs*, void*)+0x51b>
c001501e:	fb                   	sti    
c001501f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015022:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015025:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015028:	01 c2                	add    edx,eax
c001502a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001502d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015030:	83 ec 0c             	sub    esp,0xc
c0015033:	68 4e ad 02 c0       	push   0xc002ad4e
c0015038:	e8 8a d6 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001503d:	83 c4 10             	add    esp,0x10
c0015040:	e9 d5 00 00 00       	jmp    c001511a <opcodeFault(regs*, void*)+0x616>
c0015045:	83 ec 0c             	sub    esp,0xc
c0015048:	68 61 ad 02 c0       	push   0xc002ad61
c001504d:	e8 75 d6 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0015052:	83 c4 10             	add    esp,0x10
c0015055:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015058:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001505b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001505e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015061:	c1 e0 04             	shl    eax,0x4
c0015064:	01 d0                	add    eax,edx
c0015066:	83 c0 03             	add    eax,0x3
c0015069:	8a 00                	mov    al,BYTE PTR [eax]
c001506b:	0f b6 d8             	movzx  ebx,al
c001506e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015071:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015074:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015077:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001507a:	c1 e0 04             	shl    eax,0x4
c001507d:	01 d0                	add    eax,edx
c001507f:	83 c0 02             	add    eax,0x2
c0015082:	8a 00                	mov    al,BYTE PTR [eax]
c0015084:	0f b6 c8             	movzx  ecx,al
c0015087:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001508d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015090:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015093:	c1 e0 04             	shl    eax,0x4
c0015096:	01 d0                	add    eax,edx
c0015098:	40                   	inc    eax
c0015099:	8a 00                	mov    al,BYTE PTR [eax]
c001509b:	0f b6 d0             	movzx  edx,al
c001509e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a1:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00150a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00150aa:	c1 e0 04             	shl    eax,0x4
c00150ad:	01 f0                	add    eax,esi
c00150af:	8a 00                	mov    al,BYTE PTR [eax]
c00150b1:	0f b6 c0             	movzx  eax,al
c00150b4:	83 ec 0c             	sub    esp,0xc
c00150b7:	53                   	push   ebx
c00150b8:	51                   	push   ecx
c00150b9:	52                   	push   edx
c00150ba:	50                   	push   eax
c00150bb:	68 74 ad 02 c0       	push   0xc002ad74
c00150c0:	e8 02 d6 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c00150c5:	83 c4 20             	add    esp,0x20
c00150c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150cb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150ce:	83 c0 03             	add    eax,0x3
c00150d1:	8a 00                	mov    al,BYTE PTR [eax]
c00150d3:	0f b6 d8             	movzx  ebx,al
c00150d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150dc:	83 c0 02             	add    eax,0x2
c00150df:	8a 00                	mov    al,BYTE PTR [eax]
c00150e1:	0f b6 c8             	movzx  ecx,al
c00150e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150ea:	40                   	inc    eax
c00150eb:	8a 00                	mov    al,BYTE PTR [eax]
c00150ed:	0f b6 d0             	movzx  edx,al
c00150f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150f6:	8a 00                	mov    al,BYTE PTR [eax]
c00150f8:	0f b6 c0             	movzx  eax,al
c00150fb:	83 ec 0c             	sub    esp,0xc
c00150fe:	53                   	push   ebx
c00150ff:	51                   	push   ecx
c0015100:	52                   	push   edx
c0015101:	50                   	push   eax
c0015102:	68 9c ad 02 c0       	push   0xc002ad9c
c0015107:	e8 bb d5 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001510c:	83 c4 20             	add    esp,0x20
c001510f:	83 ec 0c             	sub    esp,0xc
c0015112:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015115:	e8 48 f4 ff ff       	call   c0014562 <displayDebugInfo(regs*)>
c001511a:	8d 65 f8             	lea    esp,[ebp-0x8]
c001511d:	5b                   	pop    ebx
c001511e:	5e                   	pop    esi
c001511f:	5d                   	pop    ebp
c0015120:	c3                   	ret    

c0015121 <displayProgramFault(char const*)>:
c0015121:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015126:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015129:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001512f:	85 c0                	test   eax,eax
c0015131:	74 15                	je     c0015148 <displayProgramFault(char const*)+0x27>
c0015133:	83 ec 0c             	sub    esp,0xc
c0015136:	6a 04                	push   0x4
c0015138:	6a 0f                	push   0xf
c001513a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001513e:	50                   	push   eax
c001513f:	e8 16 b4 ff ff       	call   c001055a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015144:	83 c4 1c             	add    esp,0x1c
c0015147:	c3                   	ret    
c0015148:	c3                   	ret    

c0015149 <setupInterruptController()>:
c0015149:	55                   	push   ebp
c001514a:	89 e5                	mov    ebp,esp
c001514c:	53                   	push   ebx
c001514d:	83 ec 24             	sub    esp,0x24
c0015150:	b8 00 00 00 00       	mov    eax,0x0
c0015155:	85 c0                	test   eax,eax
c0015157:	0f 95 c0             	setne  al
c001515a:	84 c0                	test   al,al
c001515c:	74 5b                	je     c00151b9 <setupInterruptController()+0x70>
c001515e:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015165:	83 ec 0c             	sub    esp,0xc
c0015168:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001516b:	e8 29 a4 ff ff       	call   c000f599 <malloc>
c0015170:	83 c4 10             	add    esp,0x10
c0015173:	89 c3                	mov    ebx,eax
c0015175:	83 ec 0c             	sub    esp,0xc
c0015178:	53                   	push   ebx
c0015179:	e8 fc 04 01 00       	call   c002567a <APIC::APIC()>
c001517e:	83 c4 10             	add    esp,0x10
c0015181:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015184:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015187:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001518a:	8b 00                	mov    eax,DWORD PTR [eax]
c001518c:	83 c0 08             	add    eax,0x8
c001518f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015191:	6a 00                	push   0x0
c0015193:	6a 00                	push   0x0
c0015195:	6a 00                	push   0x0
c0015197:	52                   	push   edx
c0015198:	ff d0                	call   eax
c001519a:	83 c4 10             	add    esp,0x10
c001519d:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c00151a2:	83 ec 08             	sub    esp,0x8
c00151a5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00151a8:	50                   	push   eax
c00151a9:	e8 52 e9 ff ff       	call   c0013b00 <Device::addChild(Device*)>
c00151ae:	83 c4 10             	add    esp,0x10
c00151b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00151b4:	e9 79 03 00 00       	jmp    c0015532 <setupInterruptController()+0x3e9>
c00151b9:	a0 80 02 03 c0       	mov    al,ds:0xc0030280
c00151be:	84 c0                	test   al,al
c00151c0:	75 14                	jne    c00151d6 <setupInterruptController()+0x8d>
c00151c2:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c00151c7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00151cd:	83 e2 fe             	and    edx,0xfffffffe
c00151d0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00151d6:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c00151db:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00151e1:	83 e0 01             	and    eax,0x1
c00151e4:	84 c0                	test   al,al
c00151e6:	0f 95 c0             	setne  al
c00151e9:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00151ec:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00151f3:	83 ec 0c             	sub    esp,0xc
c00151f6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00151f9:	e8 9b a3 ff ff       	call   c000f599 <malloc>
c00151fe:	83 c4 10             	add    esp,0x10
c0015201:	89 c3                	mov    ebx,eax
c0015203:	83 ec 0c             	sub    esp,0xc
c0015206:	53                   	push   ebx
c0015207:	e8 c6 09 01 00       	call   c0025bd2 <PIC::PIC()>
c001520c:	83 c4 10             	add    esp,0x10
c001520f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015212:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015215:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015218:	8b 00                	mov    eax,DWORD PTR [eax]
c001521a:	83 c0 08             	add    eax,0x8
c001521d:	8b 00                	mov    eax,DWORD PTR [eax]
c001521f:	6a 00                	push   0x0
c0015221:	6a 00                	push   0x0
c0015223:	6a 00                	push   0x0
c0015225:	52                   	push   edx
c0015226:	ff d0                	call   eax
c0015228:	83 c4 10             	add    esp,0x10
c001522b:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001522f:	74 73                	je     c00152a4 <setupInterruptController()+0x15b>
c0015231:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015234:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015237:	8b 00                	mov    eax,DWORD PTR [eax]
c0015239:	83 c0 0c             	add    eax,0xc
c001523c:	8b 00                	mov    eax,DWORD PTR [eax]
c001523e:	6a 00                	push   0x0
c0015240:	6a 00                	push   0x0
c0015242:	6a 00                	push   0x0
c0015244:	52                   	push   edx
c0015245:	ff d0                	call   eax
c0015247:	83 c4 10             	add    esp,0x10
c001524a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001524e:	74 15                	je     c0015265 <setupInterruptController()+0x11c>
c0015250:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015253:	8b 00                	mov    eax,DWORD PTR [eax]
c0015255:	83 c0 04             	add    eax,0x4
c0015258:	8b 00                	mov    eax,DWORD PTR [eax]
c001525a:	83 ec 0c             	sub    esp,0xc
c001525d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015260:	ff d0                	call   eax
c0015262:	83 c4 10             	add    esp,0x10
c0015265:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001526c:	83 ec 0c             	sub    esp,0xc
c001526f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015272:	e8 22 a3 ff ff       	call   c000f599 <malloc>
c0015277:	83 c4 10             	add    esp,0x10
c001527a:	89 c3                	mov    ebx,eax
c001527c:	83 ec 0c             	sub    esp,0xc
c001527f:	53                   	push   ebx
c0015280:	e8 f5 03 01 00       	call   c002567a <APIC::APIC()>
c0015285:	83 c4 10             	add    esp,0x10
c0015288:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001528b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001528e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015291:	8b 00                	mov    eax,DWORD PTR [eax]
c0015293:	83 c0 08             	add    eax,0x8
c0015296:	8b 00                	mov    eax,DWORD PTR [eax]
c0015298:	6a 00                	push   0x0
c001529a:	6a 00                	push   0x0
c001529c:	6a 00                	push   0x0
c001529e:	52                   	push   edx
c001529f:	ff d0                	call   eax
c00152a1:	83 c4 10             	add    esp,0x10
c00152a4:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c00152a9:	83 ec 08             	sub    esp,0x8
c00152ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152af:	50                   	push   eax
c00152b0:	e8 4b e8 ff ff       	call   c0013b00 <Device::addChild(Device*)>
c00152b5:	83 c4 10             	add    esp,0x10
c00152b8:	c7 05 88 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da88,0x0
c00152c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c7:	83 c0 24             	add    eax,0x24
c00152ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00152cc:	6a 00                	push   0x0
c00152ce:	68 e5 4a 01 c0       	push   0xc0014ae5
c00152d3:	6a 00                	push   0x0
c00152d5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152d8:	ff d0                	call   eax
c00152da:	83 c4 10             	add    esp,0x10
c00152dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e2:	83 c0 24             	add    eax,0x24
c00152e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e7:	6a 00                	push   0x0
c00152e9:	68 e5 4a 01 c0       	push   0xc0014ae5
c00152ee:	6a 01                	push   0x1
c00152f0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152f3:	ff d0                	call   eax
c00152f5:	83 c4 10             	add    esp,0x10
c00152f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00152fd:	83 c0 24             	add    eax,0x24
c0015300:	8b 00                	mov    eax,DWORD PTR [eax]
c0015302:	6a 00                	push   0x0
c0015304:	68 bf 43 01 c0       	push   0xc00143bf
c0015309:	6a 02                	push   0x2
c001530b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001530e:	ff d0                	call   eax
c0015310:	83 c4 10             	add    esp,0x10
c0015313:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015316:	8b 00                	mov    eax,DWORD PTR [eax]
c0015318:	83 c0 24             	add    eax,0x24
c001531b:	8b 00                	mov    eax,DWORD PTR [eax]
c001531d:	6a 00                	push   0x0
c001531f:	68 e5 4a 01 c0       	push   0xc0014ae5
c0015324:	6a 03                	push   0x3
c0015326:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015329:	ff d0                	call   eax
c001532b:	83 c4 10             	add    esp,0x10
c001532e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015331:	8b 00                	mov    eax,DWORD PTR [eax]
c0015333:	83 c0 24             	add    eax,0x24
c0015336:	8b 00                	mov    eax,DWORD PTR [eax]
c0015338:	6a 00                	push   0x0
c001533a:	68 e5 4a 01 c0       	push   0xc0014ae5
c001533f:	6a 04                	push   0x4
c0015341:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015344:	ff d0                	call   eax
c0015346:	83 c4 10             	add    esp,0x10
c0015349:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001534c:	8b 00                	mov    eax,DWORD PTR [eax]
c001534e:	83 c0 24             	add    eax,0x24
c0015351:	8b 00                	mov    eax,DWORD PTR [eax]
c0015353:	6a 00                	push   0x0
c0015355:	68 e5 4a 01 c0       	push   0xc0014ae5
c001535a:	6a 05                	push   0x5
c001535c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001535f:	ff d0                	call   eax
c0015361:	83 c4 10             	add    esp,0x10
c0015364:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015367:	8b 00                	mov    eax,DWORD PTR [eax]
c0015369:	83 c0 24             	add    eax,0x24
c001536c:	8b 00                	mov    eax,DWORD PTR [eax]
c001536e:	6a 00                	push   0x0
c0015370:	68 04 4b 01 c0       	push   0xc0014b04
c0015375:	6a 06                	push   0x6
c0015377:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001537a:	ff d0                	call   eax
c001537c:	83 c4 10             	add    esp,0x10
c001537f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015382:	8b 00                	mov    eax,DWORD PTR [eax]
c0015384:	83 c0 24             	add    eax,0x24
c0015387:	8b 00                	mov    eax,DWORD PTR [eax]
c0015389:	6a 00                	push   0x0
c001538b:	68 f1 49 01 c0       	push   0xc00149f1
c0015390:	6a 07                	push   0x7
c0015392:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015395:	ff d0                	call   eax
c0015397:	83 c4 10             	add    esp,0x10
c001539a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001539d:	8b 00                	mov    eax,DWORD PTR [eax]
c001539f:	83 c0 24             	add    eax,0x24
c00153a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a4:	6a 00                	push   0x0
c00153a6:	68 da 41 01 c0       	push   0xc00141da
c00153ab:	6a 08                	push   0x8
c00153ad:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153b0:	ff d0                	call   eax
c00153b2:	83 c4 10             	add    esp,0x10
c00153b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ba:	83 c0 24             	add    eax,0x24
c00153bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00153bf:	6a 00                	push   0x0
c00153c1:	68 e5 4a 01 c0       	push   0xc0014ae5
c00153c6:	6a 09                	push   0x9
c00153c8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153cb:	ff d0                	call   eax
c00153cd:	83 c4 10             	add    esp,0x10
c00153d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00153d5:	83 c0 24             	add    eax,0x24
c00153d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153da:	6a 00                	push   0x0
c00153dc:	68 e5 4a 01 c0       	push   0xc0014ae5
c00153e1:	6a 0a                	push   0xa
c00153e3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153e6:	ff d0                	call   eax
c00153e8:	83 c4 10             	add    esp,0x10
c00153eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f0:	83 c0 24             	add    eax,0x24
c00153f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f5:	6a 00                	push   0x0
c00153f7:	68 e5 4a 01 c0       	push   0xc0014ae5
c00153fc:	6a 0b                	push   0xb
c00153fe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015401:	ff d0                	call   eax
c0015403:	83 c4 10             	add    esp,0x10
c0015406:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015409:	8b 00                	mov    eax,DWORD PTR [eax]
c001540b:	83 c0 24             	add    eax,0x24
c001540e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015410:	6a 00                	push   0x0
c0015412:	68 e5 4a 01 c0       	push   0xc0014ae5
c0015417:	6a 0c                	push   0xc
c0015419:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001541c:	ff d0                	call   eax
c001541e:	83 c4 10             	add    esp,0x10
c0015421:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015424:	8b 00                	mov    eax,DWORD PTR [eax]
c0015426:	83 c0 24             	add    eax,0x24
c0015429:	8b 00                	mov    eax,DWORD PTR [eax]
c001542b:	6a 00                	push   0x0
c001542d:	68 64 4a 01 c0       	push   0xc0014a64
c0015432:	6a 0d                	push   0xd
c0015434:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015437:	ff d0                	call   eax
c0015439:	83 c4 10             	add    esp,0x10
c001543c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001543f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015441:	83 c0 24             	add    eax,0x24
c0015444:	8b 00                	mov    eax,DWORD PTR [eax]
c0015446:	6a 00                	push   0x0
c0015448:	68 9d 4a 01 c0       	push   0xc0014a9d
c001544d:	6a 0e                	push   0xe
c001544f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015452:	ff d0                	call   eax
c0015454:	83 c4 10             	add    esp,0x10
c0015457:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001545a:	8b 00                	mov    eax,DWORD PTR [eax]
c001545c:	83 c0 24             	add    eax,0x24
c001545f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015461:	6a 00                	push   0x0
c0015463:	68 e5 4a 01 c0       	push   0xc0014ae5
c0015468:	6a 0f                	push   0xf
c001546a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001546d:	ff d0                	call   eax
c001546f:	83 c4 10             	add    esp,0x10
c0015472:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015475:	8b 00                	mov    eax,DWORD PTR [eax]
c0015477:	83 c0 24             	add    eax,0x24
c001547a:	8b 00                	mov    eax,DWORD PTR [eax]
c001547c:	6a 00                	push   0x0
c001547e:	68 e5 4a 01 c0       	push   0xc0014ae5
c0015483:	6a 10                	push   0x10
c0015485:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015488:	ff d0                	call   eax
c001548a:	83 c4 10             	add    esp,0x10
c001548d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015490:	8b 00                	mov    eax,DWORD PTR [eax]
c0015492:	83 c0 24             	add    eax,0x24
c0015495:	8b 00                	mov    eax,DWORD PTR [eax]
c0015497:	6a 00                	push   0x0
c0015499:	68 e5 4a 01 c0       	push   0xc0014ae5
c001549e:	6a 11                	push   0x11
c00154a0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154a3:	ff d0                	call   eax
c00154a5:	83 c4 10             	add    esp,0x10
c00154a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ad:	83 c0 24             	add    eax,0x24
c00154b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b2:	6a 00                	push   0x0
c00154b4:	68 e5 4a 01 c0       	push   0xc0014ae5
c00154b9:	6a 12                	push   0x12
c00154bb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154be:	ff d0                	call   eax
c00154c0:	83 c4 10             	add    esp,0x10
c00154c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00154c8:	83 c0 24             	add    eax,0x24
c00154cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00154cd:	6a 00                	push   0x0
c00154cf:	68 e5 4a 01 c0       	push   0xc0014ae5
c00154d4:	6a 13                	push   0x13
c00154d6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154d9:	ff d0                	call   eax
c00154db:	83 c4 10             	add    esp,0x10
c00154de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e3:	83 c0 24             	add    eax,0x24
c00154e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e8:	6a 00                	push   0x0
c00154ea:	68 e5 4a 01 c0       	push   0xc0014ae5
c00154ef:	6a 14                	push   0x14
c00154f1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154f4:	ff d0                	call   eax
c00154f6:	83 c4 10             	add    esp,0x10
c00154f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00154fe:	83 c0 24             	add    eax,0x24
c0015501:	8b 00                	mov    eax,DWORD PTR [eax]
c0015503:	6a 00                	push   0x0
c0015505:	68 e5 4a 01 c0       	push   0xc0014ae5
c001550a:	6a 1e                	push   0x1e
c001550c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001550f:	ff d0                	call   eax
c0015511:	83 c4 10             	add    esp,0x10
c0015514:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015517:	8b 00                	mov    eax,DWORD PTR [eax]
c0015519:	83 c0 24             	add    eax,0x24
c001551c:	8b 00                	mov    eax,DWORD PTR [eax]
c001551e:	6a 00                	push   0x0
c0015520:	68 22 c0 01 c0       	push   0xc001c022
c0015525:	6a 60                	push   0x60
c0015527:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001552a:	ff d0                	call   eax
c001552c:	83 c4 10             	add    esp,0x10
c001552f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015532:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015535:	c9                   	leave  
c0015536:	c3                   	ret    
c0015537:	90                   	nop

c0015538 <InterruptController::convertLegacyIRQNumber(int)>:
c0015538:	55                   	push   ebp
c0015539:	89 e5                	mov    ebp,esp
c001553b:	83 ec 08             	sub    esp,0x8
c001553e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015541:	83 ec 0c             	sub    esp,0xc
c0015544:	50                   	push   eax
c0015545:	e8 b6 e8 ff ff       	call   c0013e00 <Device::getName()>
c001554a:	83 c4 10             	add    esp,0x10
c001554d:	8a 00                	mov    al,BYTE PTR [eax]
c001554f:	3c 41                	cmp    al,0x41
c0015551:	0f 94 c0             	sete   al
c0015554:	84 c0                	test   al,al
c0015556:	74 28                	je     c0015580 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015558:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001555c:	7f 12                	jg     c0015570 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001555e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015561:	05 60 cb 02 c0       	add    eax,0xc002cb60
c0015566:	8a 00                	mov    al,BYTE PTR [eax]
c0015568:	0f b6 c0             	movzx  eax,al
c001556b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001556e:	eb 10                	jmp    c0015580 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015570:	83 ec 0c             	sub    esp,0xc
c0015573:	68 c4 ad 02 c0       	push   0xc002adc4
c0015578:	e8 b6 48 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c001557d:	83 c4 10             	add    esp,0x10
c0015580:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015583:	c9                   	leave  
c0015584:	c3                   	ret    
c0015585:	90                   	nop

c0015586 <startGUI(void*)>:
c0015586:	55                   	push   ebp
c0015587:	89 e5                	mov    ebp,esp
c0015589:	53                   	push   ebx
c001558a:	83 ec 04             	sub    esp,0x4
c001558d:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c0015592:	48                   	dec    eax
c0015593:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c0015598:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001559d:	85 c0                	test   eax,eax
c001559f:	75 01                	jne    c00155a2 <startGUI(void*)+0x1c>
c00155a1:	fb                   	sti    
c00155a2:	8b 1d 08 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d908
c00155a8:	83 ec 08             	sub    esp,0x8
c00155ab:	6a 01                	push   0x1
c00155ad:	68 44 ae 02 c0       	push   0xc002ae44
c00155b2:	e8 46 7a 00 00       	call   c001cffd <Thr::loadDLL(char const*, bool)>
c00155b7:	83 c4 10             	add    esp,0x10
c00155ba:	83 ec 08             	sub    esp,0x8
c00155bd:	53                   	push   ebx
c00155be:	50                   	push   eax
c00155bf:	e8 64 7c 00 00       	call   c001d228 <Thr::executeDLL(unsigned long, void*)>
c00155c4:	83 c4 10             	add    esp,0x10
c00155c7:	8b 1d 08 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d908
c00155cd:	83 ec 08             	sub    esp,0x8
c00155d0:	6a 01                	push   0x1
c00155d2:	68 5e ae 02 c0       	push   0xc002ae5e
c00155d7:	e8 21 7a 00 00       	call   c001cffd <Thr::loadDLL(char const*, bool)>
c00155dc:	83 c4 10             	add    esp,0x10
c00155df:	83 ec 08             	sub    esp,0x8
c00155e2:	53                   	push   ebx
c00155e3:	50                   	push   eax
c00155e4:	e8 3f 7c 00 00       	call   c001d228 <Thr::executeDLL(unsigned long, void*)>
c00155e9:	83 c4 10             	add    esp,0x10
c00155ec:	90                   	nop
c00155ed:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00155f0:	c9                   	leave  
c00155f1:	c3                   	ret    

c00155f2 <startGUIVESA(void*)>:
c00155f2:	55                   	push   ebp
c00155f3:	89 e5                	mov    ebp,esp
c00155f5:	53                   	push   ebx
c00155f6:	83 ec 04             	sub    esp,0x4
c00155f9:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c00155fe:	48                   	dec    eax
c00155ff:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c0015604:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c0015609:	85 c0                	test   eax,eax
c001560b:	75 01                	jne    c001560e <startGUIVESA(void*)+0x1c>
c001560d:	fb                   	sti    
c001560e:	8b 1d 08 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d908
c0015614:	83 ec 08             	sub    esp,0x8
c0015617:	6a 01                	push   0x1
c0015619:	68 78 ae 02 c0       	push   0xc002ae78
c001561e:	e8 da 79 00 00       	call   c001cffd <Thr::loadDLL(char const*, bool)>
c0015623:	83 c4 10             	add    esp,0x10
c0015626:	83 ec 08             	sub    esp,0x8
c0015629:	53                   	push   ebx
c001562a:	50                   	push   eax
c001562b:	e8 f8 7b 00 00       	call   c001d228 <Thr::executeDLL(unsigned long, void*)>
c0015630:	83 c4 10             	add    esp,0x10
c0015633:	8b 1d 08 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d908
c0015639:	83 ec 08             	sub    esp,0x8
c001563c:	6a 01                	push   0x1
c001563e:	68 5e ae 02 c0       	push   0xc002ae5e
c0015643:	e8 b5 79 00 00       	call   c001cffd <Thr::loadDLL(char const*, bool)>
c0015648:	83 c4 10             	add    esp,0x10
c001564b:	83 ec 08             	sub    esp,0x8
c001564e:	53                   	push   ebx
c001564f:	50                   	push   eax
c0015650:	e8 d3 7b 00 00       	call   c001d228 <Thr::executeDLL(unsigned long, void*)>
c0015655:	83 c4 10             	add    esp,0x10
c0015658:	90                   	nop
c0015659:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001565c:	c9                   	leave  
c001565d:	c3                   	ret    

c001565e <sendKeyToTerminal(unsigned char)>:
c001565e:	55                   	push   ebp
c001565f:	89 e5                	mov    ebp,esp
c0015661:	83 ec 28             	sub    esp,0x28
c0015664:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015667:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001566a:	a1 c4 d9 02 c0       	mov    eax,ds:0xc002d9c4
c001566f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015673:	83 ec 08             	sub    esp,0x8
c0015676:	52                   	push   edx
c0015677:	50                   	push   eax
c0015678:	e8 83 b3 ff ff       	call   c0010a00 <VgaText::receiveKey(unsigned char)>
c001567d:	83 c4 10             	add    esp,0x10
c0015680:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015684:	0f 85 8f 00 00 00    	jne    c0015719 <sendKeyToTerminal(unsigned char)+0xbb>
c001568a:	fa                   	cli    
c001568b:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c0015690:	40                   	inc    eax
c0015691:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c0015696:	a1 24 0e 03 c0       	mov    eax,ds:0xc0030e24
c001569b:	40                   	inc    eax
c001569c:	a3 24 0e 03 c0       	mov    ds:0xc0030e24,eax
c00156a1:	a1 a0 da 02 c0       	mov    eax,ds:0xc002daa0
c00156a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00156a9:	c7 05 a0 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002daa0,0x0
c00156b3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00156b7:	74 1f                	je     c00156d8 <sendKeyToTerminal(unsigned char)+0x7a>
c00156b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156bc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00156bf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00156c2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156c5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00156c8:	83 ec 0c             	sub    esp,0xc
c00156cb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00156ce:	e8 6d 87 00 00       	call   c001de40 <unblockTask(ThreadControlBlock*)>
c00156d3:	83 c4 10             	add    esp,0x10
c00156d6:	eb db                	jmp    c00156b3 <sendKeyToTerminal(unsigned char)+0x55>
c00156d8:	a1 24 0e 03 c0       	mov    eax,ds:0xc0030e24
c00156dd:	48                   	dec    eax
c00156de:	a3 24 0e 03 c0       	mov    ds:0xc0030e24,eax
c00156e3:	a1 24 0e 03 c0       	mov    eax,ds:0xc0030e24
c00156e8:	85 c0                	test   eax,eax
c00156ea:	75 18                	jne    c0015704 <sendKeyToTerminal(unsigned char)+0xa6>
c00156ec:	a1 20 0e 03 c0       	mov    eax,ds:0xc0030e20
c00156f1:	85 c0                	test   eax,eax
c00156f3:	74 0f                	je     c0015704 <sendKeyToTerminal(unsigned char)+0xa6>
c00156f5:	c7 05 20 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e20,0x0
c00156ff:	e8 b9 82 00 00       	call   c001d9bd <schedule()>
c0015704:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c0015709:	48                   	dec    eax
c001570a:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001570f:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c0015714:	85 c0                	test   eax,eax
c0015716:	75 01                	jne    c0015719 <sendKeyToTerminal(unsigned char)+0xbb>
c0015718:	fb                   	sti    
c0015719:	90                   	nop
c001571a:	c9                   	leave  
c001571b:	c3                   	ret    

c001571c <sendKeyboardToken(KeyboardToken)>:
c001571c:	55                   	push   ebp
c001571d:	89 e5                	mov    ebp,esp
c001571f:	83 ec 18             	sub    esp,0x18
c0015722:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015725:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015728:	0f b7 c0             	movzx  eax,ax
c001572b:	83 f2 01             	xor    edx,0x1
c001572e:	88 90 c0 da 02 c0    	mov    BYTE PTR [eax-0x3ffd2540],dl
c0015734:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0015739:	85 c0                	test   eax,eax
c001573b:	74 24                	je     c0015761 <sendKeyboardToken(KeyboardToken)+0x45>
c001573d:	8b 0d a8 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002daa8
c0015743:	83 ec 04             	sub    esp,0x4
c0015746:	68 c0 da 02 c0       	push   0xc002dac0
c001574b:	83 ec 08             	sub    esp,0x8
c001574e:	89 e2                	mov    edx,esp
c0015750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015753:	89 02                	mov    DWORD PTR [edx],eax
c0015755:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015758:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001575c:	ff d1                	call   ecx
c001575e:	83 c4 10             	add    esp,0x10
c0015761:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015764:	66 3d 03 02          	cmp    ax,0x203
c0015768:	75 07                	jne    c0015771 <sendKeyboardToken(KeyboardToken)+0x55>
c001576a:	a0 c0 db 02 c0       	mov    al,ds:0xc002dbc0
c001576f:	84 c0                	test   al,al
c0015771:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015775:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015778:	a0 c8 de 02 c0       	mov    al,ds:0xc002dec8
c001577d:	38 c2                	cmp    dl,al
c001577f:	74 1c                	je     c001579d <sendKeyboardToken(KeyboardToken)+0x81>
c0015781:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015784:	a2 c8 de 02 c0       	mov    ds:0xc002dec8,al
c0015789:	a0 c8 de 02 c0       	mov    al,ds:0xc002dec8
c001578e:	0f b6 c0             	movzx  eax,al
c0015791:	83 ec 0c             	sub    esp,0xc
c0015794:	50                   	push   eax
c0015795:	e8 a8 a8 ff ff       	call   c0010042 <setTerminalScrollLock(bool)>
c001579a:	83 c4 10             	add    esp,0x10
c001579d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00157a0:	84 c0                	test   al,al
c00157a2:	0f 84 ae 00 00 00    	je     c0015856 <sendKeyboardToken(KeyboardToken)+0x13a>
c00157a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ab:	66 3d 10 03          	cmp    ax,0x310
c00157af:	75 06                	jne    c00157b7 <sendKeyboardToken(KeyboardToken)+0x9b>
c00157b1:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00157b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ba:	66 3d 11 03          	cmp    ax,0x311
c00157be:	75 06                	jne    c00157c6 <sendKeyboardToken(KeyboardToken)+0xaa>
c00157c0:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00157c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c9:	66 3d 12 03          	cmp    ax,0x312
c00157cd:	75 06                	jne    c00157d5 <sendKeyboardToken(KeyboardToken)+0xb9>
c00157cf:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00157d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d8:	66 3d 13 03          	cmp    ax,0x313
c00157dc:	75 06                	jne    c00157e4 <sendKeyboardToken(KeyboardToken)+0xc8>
c00157de:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00157e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e7:	66 3d 14 03          	cmp    ax,0x314
c00157eb:	75 06                	jne    c00157f3 <sendKeyboardToken(KeyboardToken)+0xd7>
c00157ed:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00157f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f6:	66 3d 15 03          	cmp    ax,0x315
c00157fa:	75 06                	jne    c0015802 <sendKeyboardToken(KeyboardToken)+0xe6>
c00157fc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015802:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015805:	66 3d 16 03          	cmp    ax,0x316
c0015809:	75 06                	jne    c0015811 <sendKeyboardToken(KeyboardToken)+0xf5>
c001580b:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015811:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015814:	66 3d 17 03          	cmp    ax,0x317
c0015818:	75 06                	jne    c0015820 <sendKeyboardToken(KeyboardToken)+0x104>
c001581a:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015820:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015823:	66 3d 18 03          	cmp    ax,0x318
c0015827:	75 06                	jne    c001582f <sendKeyboardToken(KeyboardToken)+0x113>
c0015829:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001582f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015832:	66 3d 19 03          	cmp    ax,0x319
c0015836:	75 06                	jne    c001583e <sendKeyboardToken(KeyboardToken)+0x122>
c0015838:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001583e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015841:	66 3d 1a 03          	cmp    ax,0x31a
c0015845:	0f 85 c9 00 00 00    	jne    c0015914 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001584b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015851:	e9 be 00 00 00       	jmp    c0015914 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015856:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015859:	66 3d 10 03          	cmp    ax,0x310
c001585d:	75 0a                	jne    c0015869 <sendKeyboardToken(KeyboardToken)+0x14d>
c001585f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015865:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015869:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586c:	66 3d 11 03          	cmp    ax,0x311
c0015870:	75 0a                	jne    c001587c <sendKeyboardToken(KeyboardToken)+0x160>
c0015872:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015878:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001587c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587f:	66 3d 12 03          	cmp    ax,0x312
c0015883:	75 0a                	jne    c001588f <sendKeyboardToken(KeyboardToken)+0x173>
c0015885:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001588b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001588f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015892:	66 3d 13 03          	cmp    ax,0x313
c0015896:	75 0a                	jne    c00158a2 <sendKeyboardToken(KeyboardToken)+0x186>
c0015898:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001589e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a5:	66 3d 14 03          	cmp    ax,0x314
c00158a9:	75 0a                	jne    c00158b5 <sendKeyboardToken(KeyboardToken)+0x199>
c00158ab:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00158b1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b8:	66 3d 15 03          	cmp    ax,0x315
c00158bc:	75 0a                	jne    c00158c8 <sendKeyboardToken(KeyboardToken)+0x1ac>
c00158be:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00158c4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158cb:	66 3d 16 03          	cmp    ax,0x316
c00158cf:	75 0a                	jne    c00158db <sendKeyboardToken(KeyboardToken)+0x1bf>
c00158d1:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00158d7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158de:	66 3d 17 03          	cmp    ax,0x317
c00158e2:	75 0a                	jne    c00158ee <sendKeyboardToken(KeyboardToken)+0x1d2>
c00158e4:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00158ea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f1:	66 3d 18 03          	cmp    ax,0x318
c00158f5:	75 0a                	jne    c0015901 <sendKeyboardToken(KeyboardToken)+0x1e5>
c00158f7:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00158fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015901:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015904:	66 3d 19 03          	cmp    ax,0x319
c0015908:	75 0a                	jne    c0015914 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001590a:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015910:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015914:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015917:	66 3d 00 02          	cmp    ax,0x200
c001591b:	75 2c                	jne    c0015949 <sendKeyboardToken(KeyboardToken)+0x22d>
c001591d:	a0 c0 de 02 c0       	mov    al,ds:0xc002dec0
c0015922:	83 f0 01             	xor    eax,0x1
c0015925:	84 c0                	test   al,al
c0015927:	74 20                	je     c0015949 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015929:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001592e:	6a 01                	push   0x1
c0015930:	6a 00                	push   0x0
c0015932:	68 86 55 01 c0       	push   0xc0015586
c0015937:	50                   	push   eax
c0015938:	e8 5b 7e 00 00       	call   c001d798 <Process::createThread(void (*)(void*), void*, int)>
c001593d:	83 c4 10             	add    esp,0x10
c0015940:	c6 05 c0 de 02 c0 01 	mov    BYTE PTR ds:0xc002dec0,0x1
c0015947:	eb 33                	jmp    c001597c <sendKeyboardToken(KeyboardToken)+0x260>
c0015949:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001594c:	66 3d 01 02          	cmp    ax,0x201
c0015950:	75 2a                	jne    c001597c <sendKeyboardToken(KeyboardToken)+0x260>
c0015952:	a0 c0 de 02 c0       	mov    al,ds:0xc002dec0
c0015957:	83 f0 01             	xor    eax,0x1
c001595a:	84 c0                	test   al,al
c001595c:	74 1e                	je     c001597c <sendKeyboardToken(KeyboardToken)+0x260>
c001595e:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0015963:	6a 01                	push   0x1
c0015965:	6a 00                	push   0x0
c0015967:	68 f2 55 01 c0       	push   0xc00155f2
c001596c:	50                   	push   eax
c001596d:	e8 26 7e 00 00       	call   c001d798 <Process::createThread(void (*)(void*), void*, int)>
c0015972:	83 c4 10             	add    esp,0x10
c0015975:	c6 05 c0 de 02 c0 01 	mov    BYTE PTR ds:0xc002dec0,0x1
c001597c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001597f:	66 3d 1d 03          	cmp    ax,0x31d
c0015983:	75 06                	jne    c001598b <sendKeyboardToken(KeyboardToken)+0x26f>
c0015985:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001598b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001598e:	66 3d 1c 03          	cmp    ax,0x31c
c0015992:	75 06                	jne    c001599a <sendKeyboardToken(KeyboardToken)+0x27e>
c0015994:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001599a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001599d:	66 3d 1b 03          	cmp    ax,0x31b
c00159a1:	75 06                	jne    c00159a9 <sendKeyboardToken(KeyboardToken)+0x28d>
c00159a3:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00159a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ac:	66 3d 1e 03          	cmp    ax,0x31e
c00159b0:	75 06                	jne    c00159b8 <sendKeyboardToken(KeyboardToken)+0x29c>
c00159b2:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00159b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159bb:	66 3d 1f 03          	cmp    ax,0x31f
c00159bf:	75 06                	jne    c00159c7 <sendKeyboardToken(KeyboardToken)+0x2ab>
c00159c1:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00159c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ca:	66 3d 1a 03          	cmp    ax,0x31a
c00159ce:	75 06                	jne    c00159d6 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00159d0:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00159d6:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00159da:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00159dd:	83 f0 01             	xor    eax,0x1
c00159e0:	84 c0                	test   al,al
c00159e2:	74 77                	je     c0015a5b <sendKeyboardToken(KeyboardToken)+0x33f>
c00159e4:	a0 c1 db 02 c0       	mov    al,ds:0xc002dbc1
c00159e9:	84 c0                	test   al,al
c00159eb:	74 41                	je     c0015a2e <sendKeyboardToken(KeyboardToken)+0x312>
c00159ed:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00159f1:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00159f5:	74 2b                	je     c0015a22 <sendKeyboardToken(KeyboardToken)+0x306>
c00159f7:	8b 15 c4 de 02 c0    	mov    edx,DWORD PTR ds:0xc002dec4
c00159fd:	89 d0                	mov    eax,edx
c00159ff:	c1 e0 02             	shl    eax,0x2
c0015a02:	01 d0                	add    eax,edx
c0015a04:	01 c0                	add    eax,eax
c0015a06:	a3 c4 de 02 c0       	mov    ds:0xc002dec4,eax
c0015a0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a0e:	0f b7 c0             	movzx  eax,ax
c0015a11:	8d 50 d0             	lea    edx,[eax-0x30]
c0015a14:	a1 c4 de 02 c0       	mov    eax,ds:0xc002dec4
c0015a19:	01 d0                	add    eax,edx
c0015a1b:	a3 c4 de 02 c0       	mov    ds:0xc002dec4,eax
c0015a20:	eb 6d                	jmp    c0015a8f <sendKeyboardToken(KeyboardToken)+0x373>
c0015a22:	c7 05 c4 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dec4,0x0
c0015a2c:	eb 61                	jmp    c0015a8f <sendKeyboardToken(KeyboardToken)+0x373>
c0015a2e:	a1 c4 de 02 c0       	mov    eax,ds:0xc002dec4
c0015a33:	85 c0                	test   eax,eax
c0015a35:	74 18                	je     c0015a4f <sendKeyboardToken(KeyboardToken)+0x333>
c0015a37:	a1 c4 de 02 c0       	mov    eax,ds:0xc002dec4
c0015a3c:	0f b6 c0             	movzx  eax,al
c0015a3f:	83 ec 0c             	sub    esp,0xc
c0015a42:	50                   	push   eax
c0015a43:	e8 16 fc ff ff       	call   c001565e <sendKeyToTerminal(unsigned char)>
c0015a48:	83 c4 10             	add    esp,0x10
c0015a4b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a4f:	c7 05 c4 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dec4,0x0
c0015a59:	eb 34                	jmp    c0015a8f <sendKeyboardToken(KeyboardToken)+0x373>
c0015a5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a5e:	66 3d 01 01          	cmp    ax,0x101
c0015a62:	75 2b                	jne    c0015a8f <sendKeyboardToken(KeyboardToken)+0x373>
c0015a64:	a1 c4 de 02 c0       	mov    eax,ds:0xc002dec4
c0015a69:	85 c0                	test   eax,eax
c0015a6b:	74 18                	je     c0015a85 <sendKeyboardToken(KeyboardToken)+0x369>
c0015a6d:	a1 c4 de 02 c0       	mov    eax,ds:0xc002dec4
c0015a72:	0f b6 c0             	movzx  eax,al
c0015a75:	83 ec 0c             	sub    esp,0xc
c0015a78:	50                   	push   eax
c0015a79:	e8 e0 fb ff ff       	call   c001565e <sendKeyToTerminal(unsigned char)>
c0015a7e:	83 c4 10             	add    esp,0x10
c0015a81:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a85:	c7 05 c4 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dec4,0x0
c0015a8f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015a92:	83 f0 01             	xor    eax,0x1
c0015a95:	84 c0                	test   al,al
c0015a97:	74 4c                	je     c0015ae5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015a99:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a9c:	83 f0 01             	xor    eax,0x1
c0015a9f:	84 c0                	test   al,al
c0015aa1:	74 42                	je     c0015ae5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015aa3:	a0 c0 db 02 c0       	mov    al,ds:0xc002dbc0
c0015aa8:	83 f0 01             	xor    eax,0x1
c0015aab:	84 c0                	test   al,al
c0015aad:	74 36                	je     c0015ae5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015aaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab2:	66 83 f8 1f          	cmp    ax,0x1f
c0015ab6:	76 09                	jbe    c0015ac1 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015ab8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015abb:	66 83 f8 7e          	cmp    ax,0x7e
c0015abf:	76 12                	jbe    c0015ad3 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015ac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac4:	66 83 f8 0a          	cmp    ax,0xa
c0015ac8:	74 09                	je     c0015ad3 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015aca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015acd:	66 83 f8 08          	cmp    ax,0x8
c0015ad1:	75 12                	jne    c0015ae5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015ad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ad6:	0f b6 c0             	movzx  eax,al
c0015ad9:	83 ec 0c             	sub    esp,0xc
c0015adc:	50                   	push   eax
c0015add:	e8 7c fb ff ff       	call   c001565e <sendKeyToTerminal(unsigned char)>
c0015ae2:	83 c4 10             	add    esp,0x10
c0015ae5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015ae8:	83 f0 01             	xor    eax,0x1
c0015aeb:	84 c0                	test   al,al
c0015aed:	74 4f                	je     c0015b3e <sendKeyboardToken(KeyboardToken)+0x422>
c0015aef:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015af2:	83 f0 01             	xor    eax,0x1
c0015af5:	84 c0                	test   al,al
c0015af7:	74 45                	je     c0015b3e <sendKeyboardToken(KeyboardToken)+0x422>
c0015af9:	a0 c0 db 02 c0       	mov    al,ds:0xc002dbc0
c0015afe:	84 c0                	test   al,al
c0015b00:	74 3c                	je     c0015b3e <sendKeyboardToken(KeyboardToken)+0x422>
c0015b02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b05:	66 83 f8 3f          	cmp    ax,0x3f
c0015b09:	76 33                	jbe    c0015b3e <sendKeyboardToken(KeyboardToken)+0x422>
c0015b0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b0e:	66 83 f8 7f          	cmp    ax,0x7f
c0015b12:	77 2a                	ja     c0015b3e <sendKeyboardToken(KeyboardToken)+0x422>
c0015b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b17:	88 c2                	mov    dl,al
c0015b19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b1c:	66 83 f8 5f          	cmp    ax,0x5f
c0015b20:	76 04                	jbe    c0015b26 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015b22:	b0 20                	mov    al,0x20
c0015b24:	eb 02                	jmp    c0015b28 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015b26:	b0 00                	mov    al,0x0
c0015b28:	29 c2                	sub    edx,eax
c0015b2a:	88 d0                	mov    al,dl
c0015b2c:	83 e8 40             	sub    eax,0x40
c0015b2f:	0f b6 c0             	movzx  eax,al
c0015b32:	83 ec 0c             	sub    esp,0xc
c0015b35:	50                   	push   eax
c0015b36:	e8 23 fb ff ff       	call   c001565e <sendKeyToTerminal(unsigned char)>
c0015b3b:	83 c4 10             	add    esp,0x10
c0015b3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b41:	66 3d 00 03          	cmp    ax,0x300
c0015b45:	75 0f                	jne    c0015b56 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015b47:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b4a:	83 f0 01             	xor    eax,0x1
c0015b4d:	84 c0                	test   al,al
c0015b4f:	74 05                	je     c0015b56 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015b51:	e8 5d a8 ff ff       	call   c00103b3 <doTerminalCycle()>
c0015b56:	90                   	nop
c0015b57:	c9                   	leave  
c0015b58:	c3                   	ret    

c0015b59 <clearInternalKeybuffer(VgaText*)>:
c0015b59:	55                   	push   ebp
c0015b5a:	89 e5                	mov    ebp,esp
c0015b5c:	83 ec 08             	sub    esp,0x8
c0015b5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b62:	05 98 01 00 00       	add    eax,0x198
c0015b67:	83 ec 0c             	sub    esp,0xc
c0015b6a:	50                   	push   eax
c0015b6b:	e8 fc ab fe ff       	call   c000076c <strlen>
c0015b70:	83 c4 10             	add    esp,0x10
c0015b73:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b76:	81 c2 98 01 00 00    	add    edx,0x198
c0015b7c:	83 ec 04             	sub    esp,0x4
c0015b7f:	50                   	push   eax
c0015b80:	6a 00                	push   0x0
c0015b82:	52                   	push   edx
c0015b83:	e8 c8 ab fe ff       	call   c0000750 <memset>
c0015b88:	83 c4 10             	add    esp,0x10
c0015b8b:	90                   	nop
c0015b8c:	c9                   	leave  
c0015b8d:	c3                   	ret    

c0015b8e <readKeyboard(VgaText*, char*, unsigned long)>:
c0015b8e:	55                   	push   ebp
c0015b8f:	89 e5                	mov    ebp,esp
c0015b91:	83 ec 18             	sub    esp,0x18
c0015b94:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0015b99:	85 c0                	test   eax,eax
c0015b9b:	74 2a                	je     c0015bc7 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015b9d:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015ba3:	8b 0d a8 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002daa8
c0015ba9:	83 ec 04             	sub    esp,0x4
c0015bac:	68 c0 da 02 c0       	push   0xc002dac0
c0015bb1:	83 ec 08             	sub    esp,0x8
c0015bb4:	89 e2                	mov    edx,esp
c0015bb6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015bb9:	89 02                	mov    DWORD PTR [edx],eax
c0015bbb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015bbe:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015bc2:	ff d1                	call   ecx
c0015bc4:	83 c4 10             	add    esp,0x10
c0015bc7:	fb                   	sti    
c0015bc8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015bcf:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015bd3:	0f 84 a1 00 00 00    	je     c0015c7a <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015bd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bdc:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015be2:	84 c0                	test   al,al
c0015be4:	75 28                	jne    c0015c0e <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015be6:	fa                   	cli    
c0015be7:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c0015bec:	40                   	inc    eax
c0015bed:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c0015bf2:	e8 c6 7d 00 00       	call   c001d9bd <schedule()>
c0015bf7:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c0015bfc:	48                   	dec    eax
c0015bfd:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c0015c02:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c0015c07:	85 c0                	test   eax,eax
c0015c09:	75 ce                	jne    c0015bd9 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015c0b:	fb                   	sti    
c0015c0c:	eb cb                	jmp    c0015bd9 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015c0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c11:	8d 50 01             	lea    edx,[eax+0x1]
c0015c14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015c17:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c1a:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015c20:	88 10                	mov    BYTE PTR [eax],dl
c0015c22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c25:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015c2b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015c2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c31:	05 98 01 00 00       	add    eax,0x198
c0015c36:	83 ec 0c             	sub    esp,0xc
c0015c39:	50                   	push   eax
c0015c3a:	e8 2d ab fe ff       	call   c000076c <strlen>
c0015c3f:	83 c4 10             	add    esp,0x10
c0015c42:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c45:	81 c2 98 01 00 00    	add    edx,0x198
c0015c4b:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015c4e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c51:	81 c2 98 01 00 00    	add    edx,0x198
c0015c57:	83 ec 04             	sub    esp,0x4
c0015c5a:	50                   	push   eax
c0015c5b:	51                   	push   ecx
c0015c5c:	52                   	push   edx
c0015c5d:	e8 26 aa fe ff       	call   c0000688 <memmove>
c0015c62:	83 c4 10             	add    esp,0x10
c0015c65:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015c68:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015c6b:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015c6f:	0f 85 5a ff ff ff    	jne    c0015bcf <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015c75:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c78:	eb 03                	jmp    c0015c7d <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015c7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c7d:	c9                   	leave  
c0015c7e:	c3                   	ret    
c0015c7f:	90                   	nop

c0015c80 <Keyboard::Keyboard(char const*)>:
c0015c80:	83 ec 0c             	sub    esp,0xc
c0015c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c87:	83 ec 08             	sub    esp,0x8
c0015c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c8e:	50                   	push   eax
c0015c8f:	e8 70 e0 ff ff       	call   c0013d04 <Device::Device(char const*)>
c0015c94:	83 c4 10             	add    esp,0x10
c0015c97:	ba 9c ae 02 c0       	mov    edx,0xc002ae9c
c0015c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ca0:	89 10                	mov    DWORD PTR [eax],edx
c0015ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ca6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015cb0:	c6 05 a4 da 02 c0 01 	mov    BYTE PTR ds:0xc002daa4,0x1
c0015cb7:	90                   	nop
c0015cb8:	83 c4 0c             	add    esp,0xc
c0015cbb:	c3                   	ret    

c0015cbc <Keyboard::~Keyboard()>:
c0015cbc:	83 ec 0c             	sub    esp,0xc
c0015cbf:	ba 9c ae 02 c0       	mov    edx,0xc002ae9c
c0015cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cc8:	89 10                	mov    DWORD PTR [eax],edx
c0015cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cce:	83 ec 0c             	sub    esp,0xc
c0015cd1:	50                   	push   eax
c0015cd2:	e8 f7 dc ff ff       	call   c00139ce <Device::~Device()>
c0015cd7:	83 c4 10             	add    esp,0x10
c0015cda:	90                   	nop
c0015cdb:	83 c4 0c             	add    esp,0xc
c0015cde:	c3                   	ret    
c0015cdf:	90                   	nop

c0015ce0 <Keyboard::~Keyboard()>:
c0015ce0:	83 ec 0c             	sub    esp,0xc
c0015ce3:	83 ec 0c             	sub    esp,0xc
c0015ce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cea:	e8 cd ff ff ff       	call   c0015cbc <Keyboard::~Keyboard()>
c0015cef:	83 c4 10             	add    esp,0x10
c0015cf2:	83 ec 08             	sub    esp,0x8
c0015cf5:	68 5c 01 00 00       	push   0x15c
c0015cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cfe:	e8 ec c8 ff ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0015d03:	83 c4 10             	add    esp,0x10
c0015d06:	83 c4 0c             	add    esp,0xc
c0015d09:	c3                   	ret    

c0015d0a <LogicalDisk::close(int, int, void*)>:
c0015d0a:	83 c8 ff             	or     eax,0xffffffff
c0015d0d:	c3                   	ret    

c0015d0e <LogicalDisk::~LogicalDisk()>:
c0015d0e:	83 ec 0c             	sub    esp,0xc
c0015d11:	ba 14 af 02 c0       	mov    edx,0xc002af14
c0015d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d1a:	89 10                	mov    DWORD PTR [eax],edx
c0015d1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d20:	83 ec 0c             	sub    esp,0xc
c0015d23:	50                   	push   eax
c0015d24:	e8 a5 dc ff ff       	call   c00139ce <Device::~Device()>
c0015d29:	83 c4 10             	add    esp,0x10
c0015d2c:	90                   	nop
c0015d2d:	83 c4 0c             	add    esp,0xc
c0015d30:	c3                   	ret    
c0015d31:	90                   	nop

c0015d32 <LogicalDisk::~LogicalDisk()>:
c0015d32:	83 ec 0c             	sub    esp,0xc
c0015d35:	83 ec 0c             	sub    esp,0xc
c0015d38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d3c:	e8 cd ff ff ff       	call   c0015d0e <LogicalDisk::~LogicalDisk()>
c0015d41:	83 c4 10             	add    esp,0x10
c0015d44:	83 ec 08             	sub    esp,0x8
c0015d47:	68 74 01 00 00       	push   0x174
c0015d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d50:	e8 9a c8 ff ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0015d55:	83 c4 10             	add    esp,0x10
c0015d58:	83 c4 0c             	add    esp,0xc
c0015d5b:	c3                   	ret    

c0015d5c <LogicalDisk::open(int, int, void*)>:
c0015d5c:	83 ec 18             	sub    esp,0x18
c0015d5f:	68 c8 ae 02 c0       	push   0xc002aec8
c0015d64:	e8 ca 40 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c0015d69:	83 c8 ff             	or     eax,0xffffffff
c0015d6c:	83 c4 1c             	add    esp,0x1c
c0015d6f:	c3                   	ret    

c0015d70 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015d70:	53                   	push   ebx
c0015d71:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015d75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d79:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d7d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015d83:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015d89:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015d8f:	77 10                	ja     c0015da1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015d91:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015d97:	89 d3                	mov    ebx,edx
c0015d99:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015d9f:	72 05                	jb     c0015da6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015da1:	83 c8 ff             	or     eax,0xffffffff
c0015da4:	89 c2                	mov    edx,eax
c0015da6:	5b                   	pop    ebx
c0015da7:	c3                   	ret    

c0015da8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015da8:	56                   	push   esi
c0015da9:	83 c8 ff             	or     eax,0xffffffff
c0015dac:	53                   	push   ebx
c0015dad:	89 c2                	mov    edx,eax
c0015daf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015db3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015db7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015dbb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015dc1:	77 27                	ja     c0015dea <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015dc3:	89 d8                	mov    eax,ebx
c0015dc5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015dcb:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015dd1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015dd6:	89 c2                	mov    edx,eax
c0015dd8:	73 10                	jae    c0015dea <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015dda:	89 c8                	mov    eax,ecx
c0015ddc:	89 da                	mov    edx,ebx
c0015dde:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015de4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015dea:	5b                   	pop    ebx
c0015deb:	5e                   	pop    esi
c0015dec:	c3                   	ret    
c0015ded:	90                   	nop

c0015dee <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015dee:	83 ec 1c             	sub    esp,0x1c
c0015df1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015df9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dfd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e01:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015e05:	89 04 24             	mov    DWORD PTR [esp],eax
c0015e08:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015e0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e14:	83 ec 08             	sub    esp,0x8
c0015e17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e1b:	50                   	push   eax
c0015e1c:	e8 e3 de ff ff       	call   c0013d04 <Device::Device(char const*)>
c0015e21:	83 c4 10             	add    esp,0x10
c0015e24:	ba 14 af 02 c0       	mov    edx,0xc002af14
c0015e29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e2d:	89 10                	mov    DWORD PTR [eax],edx
c0015e2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e33:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e3e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e49:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015e53:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e5b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e5f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015e65:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015e6b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e6f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015e72:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e76:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015e7c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015e82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e86:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015e8a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015e90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e94:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015e9e:	90                   	nop
c0015e9f:	83 c4 1c             	add    esp,0x1c
c0015ea2:	c3                   	ret    
c0015ea3:	90                   	nop

c0015ea4 <LogicalDisk::assignDriveLetter()>:
c0015ea4:	55                   	push   ebp
c0015ea5:	57                   	push   edi
c0015ea6:	56                   	push   esi
c0015ea7:	53                   	push   ebx
c0015ea8:	83 ec 14             	sub    esp,0x14
c0015eab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015eaf:	8b 3d e0 de 02 c0    	mov    edi,DWORD PTR ds:0xc002dee0
c0015eb5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015ebb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015ebf:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015ec5:	8b 3d e4 de 02 c0    	mov    edi,DWORD PTR ds:0xc002dee4
c0015ecb:	3c 01                	cmp    al,0x1
c0015ecd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015ed1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015ed5:	19 c0                	sbb    eax,eax
c0015ed7:	83 e0 02             	and    eax,0x2
c0015eda:	83 c0 41             	add    eax,0x41
c0015edd:	0f be e8             	movsx  ebp,al
c0015ee0:	3c 43                	cmp    al,0x43
c0015ee2:	75 10                	jne    c0015ef4 <LogicalDisk::assignDriveLetter()+0x50>
c0015ee4:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015eeb:	75 5d                	jne    c0015f4a <LogicalDisk::assignDriveLetter()+0xa6>
c0015eed:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015ef2:	75 56                	jne    c0015f4a <LogicalDisk::assignDriveLetter()+0xa6>
c0015ef4:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015ef7:	ba 01 00 00 00       	mov    edx,0x1
c0015efc:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015f00:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015f04:	d3 e2                	shl    edx,cl
c0015f06:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015f0a:	89 d7                	mov    edi,edx
c0015f0c:	89 d6                	mov    esi,edx
c0015f0e:	c1 ff 1f             	sar    edi,0x1f
c0015f11:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015f15:	21 f9                	and    ecx,edi
c0015f17:	09 d1                	or     ecx,edx
c0015f19:	75 2f                	jne    c0015f4a <LogicalDisk::assignDriveLetter()+0xa6>
c0015f1b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015f1f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015f23:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015f29:	09 f2                	or     edx,esi
c0015f2b:	89 15 e0 de 02 c0    	mov    DWORD PTR ds:0xc002dee0,edx
c0015f31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f35:	09 fa                	or     edx,edi
c0015f37:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015f3b:	89 15 e4 de 02 c0    	mov    DWORD PTR ds:0xc002dee4,edx
c0015f41:	89 1c bd 00 df 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2100],ebx
c0015f48:	eb 08                	jmp    c0015f52 <LogicalDisk::assignDriveLetter()+0xae>
c0015f4a:	45                   	inc    ebp
c0015f4b:	40                   	inc    eax
c0015f4c:	3c 5b                	cmp    al,0x5b
c0015f4e:	75 90                	jne    c0015ee0 <LogicalDisk::assignDriveLetter()+0x3c>
c0015f50:	31 c0                	xor    eax,eax
c0015f52:	83 c4 14             	add    esp,0x14
c0015f55:	5b                   	pop    ebx
c0015f56:	5e                   	pop    esi
c0015f57:	5f                   	pop    edi
c0015f58:	5d                   	pop    ebp
c0015f59:	c3                   	ret    

c0015f5a <LogicalDisk::mount()>:
c0015f5a:	56                   	push   esi
c0015f5b:	53                   	push   ebx
c0015f5c:	53                   	push   ebx
c0015f5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f61:	8b 1d 74 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da74
c0015f67:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015f71:	85 db                	test   ebx,ebx
c0015f73:	74 27                	je     c0015f9c <LogicalDisk::mount()+0x42>
c0015f75:	51                   	push   ecx
c0015f76:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015f7d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015f7f:	83 e8 41             	sub    eax,0x41
c0015f82:	50                   	push   eax
c0015f83:	56                   	push   esi
c0015f84:	53                   	push   ebx
c0015f85:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015f88:	83 c4 10             	add    esp,0x10
c0015f8b:	84 c0                	test   al,al
c0015f8d:	74 08                	je     c0015f97 <LogicalDisk::mount()+0x3d>
c0015f8f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015f95:	eb 07                	jmp    c0015f9e <LogicalDisk::mount()+0x44>
c0015f97:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015f9a:	eb d5                	jmp    c0015f71 <LogicalDisk::mount()+0x17>
c0015f9c:	31 c0                	xor    eax,eax
c0015f9e:	5a                   	pop    edx
c0015f9f:	5b                   	pop    ebx
c0015fa0:	5e                   	pop    esi
c0015fa1:	c3                   	ret    

c0015fa2 <LogicalDisk::unmount()>:
c0015fa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fa6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015fb0:	c3                   	ret    
c0015fb1:	90                   	nop

c0015fb2 <LogicalDisk::eject()>:
c0015fb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fb6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015fbc:	8b 10                	mov    edx,DWORD PTR [eax]
c0015fbe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015fc2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0015fc5:	90                   	nop

c0015fc6 <LogicalDisk::unassignDriveLetter()>:
c0015fc6:	57                   	push   edi
c0015fc7:	56                   	push   esi
c0015fc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015fcc:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015fd3:	84 c9                	test   cl,cl
c0015fd5:	75 0f                	jne    c0015fe6 <LogicalDisk::unassignDriveLetter()+0x20>
c0015fd7:	c7 44 24 0c ec ae 02 c0 	mov    DWORD PTR [esp+0xc],0xc002aeec
c0015fdf:	5e                   	pop    esi
c0015fe0:	5f                   	pop    edi
c0015fe1:	e9 4d 3e 00 00       	jmp    c0019e33 <Krnl::panic(char const*)>
c0015fe6:	83 e9 41             	sub    ecx,0x41
c0015fe9:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015ff0:	b8 01 00 00 00       	mov    eax,0x1
c0015ff5:	c7 04 8d 00 df 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2100],0x0
c0016000:	d3 e0                	shl    eax,cl
c0016002:	89 c7                	mov    edi,eax
c0016004:	f7 d0                	not    eax
c0016006:	c1 ff 1f             	sar    edi,0x1f
c0016009:	21 05 e0 de 02 c0    	and    DWORD PTR ds:0xc002dee0,eax
c001600f:	89 fe                	mov    esi,edi
c0016011:	f7 d6                	not    esi
c0016013:	21 35 e4 de 02 c0    	and    DWORD PTR ds:0xc002dee4,esi
c0016019:	5e                   	pop    esi
c001601a:	5f                   	pop    edi
c001601b:	c3                   	ret    

c001601c <LogicalDisk::read(unsigned long long, int, void*)>:
c001601c:	57                   	push   edi
c001601d:	56                   	push   esi
c001601e:	53                   	push   ebx
c001601f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016023:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016027:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001602b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001602f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016035:	77 41                	ja     c0016078 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016037:	99                   	cdq    
c0016038:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001603e:	01 c8                	add    eax,ecx
c0016040:	11 da                	adc    edx,ebx
c0016042:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016048:	19 d7                	sbb    edi,edx
c001604a:	72 33                	jb     c001607f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001604c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016052:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016058:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001605c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016060:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016066:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001606c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016070:	5b                   	pop    ebx
c0016071:	5e                   	pop    esi
c0016072:	5f                   	pop    edi
c0016073:	e9 cc 0a 00 00       	jmp    c0016b44 <VCache::read(unsigned long long, int, void*)>
c0016078:	b8 05 00 00 00       	mov    eax,0x5
c001607d:	eb 05                	jmp    c0016084 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001607f:	b8 07 00 00 00       	mov    eax,0x7
c0016084:	5b                   	pop    ebx
c0016085:	5e                   	pop    esi
c0016086:	5f                   	pop    edi
c0016087:	c3                   	ret    

c0016088 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016088:	57                   	push   edi
c0016089:	56                   	push   esi
c001608a:	53                   	push   ebx
c001608b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001608f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016093:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016097:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001609b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00160a1:	77 41                	ja     c00160e4 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00160a3:	99                   	cdq    
c00160a4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00160aa:	01 c8                	add    eax,ecx
c00160ac:	11 da                	adc    edx,ebx
c00160ae:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00160b4:	19 d7                	sbb    edi,edx
c00160b6:	72 33                	jb     c00160eb <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00160b8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00160be:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00160c4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00160c8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00160cc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00160d2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00160d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00160dc:	5b                   	pop    ebx
c00160dd:	5e                   	pop    esi
c00160de:	5f                   	pop    edi
c00160df:	e9 76 09 00 00       	jmp    c0016a5a <VCache::write(unsigned long long, int, void*)>
c00160e4:	b8 05 00 00 00       	mov    eax,0x5
c00160e9:	eb 05                	jmp    c00160f0 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00160eb:	b8 07 00 00 00       	mov    eax,0x7
c00160f0:	5b                   	pop    ebx
c00160f1:	5e                   	pop    esi
c00160f2:	5f                   	pop    edi
c00160f3:	c3                   	ret    

c00160f4 <Mouse::Mouse(char const*)>:
c00160f4:	83 ec 0c             	sub    esp,0xc
c00160f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160fb:	83 ec 08             	sub    esp,0x8
c00160fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016102:	50                   	push   eax
c0016103:	e8 fc db ff ff       	call   c0013d04 <Device::Device(char const*)>
c0016108:	83 c4 10             	add    esp,0x10
c001610b:	ba 40 af 02 c0       	mov    edx,0xc002af40
c0016110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016114:	89 10                	mov    DWORD PTR [eax],edx
c0016116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001611a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016124:	90                   	nop
c0016125:	83 c4 0c             	add    esp,0xc
c0016128:	c3                   	ret    
c0016129:	90                   	nop

c001612a <Mouse::~Mouse()>:
c001612a:	83 ec 0c             	sub    esp,0xc
c001612d:	ba 40 af 02 c0       	mov    edx,0xc002af40
c0016132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016136:	89 10                	mov    DWORD PTR [eax],edx
c0016138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001613c:	83 ec 0c             	sub    esp,0xc
c001613f:	50                   	push   eax
c0016140:	e8 89 d8 ff ff       	call   c00139ce <Device::~Device()>
c0016145:	83 c4 10             	add    esp,0x10
c0016148:	90                   	nop
c0016149:	83 c4 0c             	add    esp,0xc
c001614c:	c3                   	ret    
c001614d:	90                   	nop

c001614e <Mouse::~Mouse()>:
c001614e:	83 ec 0c             	sub    esp,0xc
c0016151:	83 ec 0c             	sub    esp,0xc
c0016154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016158:	e8 cd ff ff ff       	call   c001612a <Mouse::~Mouse()>
c001615d:	83 c4 10             	add    esp,0x10
c0016160:	83 ec 08             	sub    esp,0x8
c0016163:	68 58 01 00 00       	push   0x158
c0016168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001616c:	e8 7e c4 ff ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0016171:	83 c4 10             	add    esp,0x10
c0016174:	83 c4 0c             	add    esp,0xc
c0016177:	c3                   	ret    

c0016178 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016178:	55                   	push   ebp
c0016179:	57                   	push   edi
c001617a:	56                   	push   esi
c001617b:	53                   	push   ebx
c001617c:	81 ec 28 01 00 00    	sub    esp,0x128
c0016182:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016189:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016190:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016197:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001619e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00161a2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00161a6:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00161ad:	e8 4e dc ff ff       	call   c0013e00 <Device::getName()>
c00161b2:	5a                   	pop    edx
c00161b3:	59                   	pop    ecx
c00161b4:	50                   	push   eax
c00161b5:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00161b9:	55                   	push   ebp
c00161ba:	e8 4d a6 fe ff       	call   c000080c <strcpy>
c00161bf:	5b                   	pop    ebx
c00161c0:	58                   	pop    eax
c00161c1:	68 64 af 02 c0       	push   0xc002af64
c00161c6:	55                   	push   ebp
c00161c7:	e8 80 a7 fe ff       	call   c000094c <strcat>
c00161cc:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00161d3:	e8 c1 93 ff ff       	call   c000f599 <malloc>
c00161d8:	83 c4 0c             	add    esp,0xc
c00161db:	89 c3                	mov    ebx,eax
c00161dd:	57                   	push   edi
c00161de:	56                   	push   esi
c00161df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161e7:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00161ee:	55                   	push   ebp
c00161ef:	50                   	push   eax
c00161f0:	e8 f9 fb ff ff       	call   c0015dee <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00161f5:	83 c4 14             	add    esp,0x14
c00161f8:	53                   	push   ebx
c00161f9:	e8 a6 fc ff ff       	call   c0015ea4 <LogicalDisk::assignDriveLetter()>
c00161fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016201:	e8 54 fd ff ff       	call   c0015f5a <LogicalDisk::mount()>
c0016206:	58                   	pop    eax
c0016207:	5a                   	pop    edx
c0016208:	53                   	push   ebx
c0016209:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016210:	e8 eb d8 ff ff       	call   c0013b00 <Device::addChild(Device*)>
c0016215:	81 c4 2c 01 00 00    	add    esp,0x12c
c001621b:	5b                   	pop    ebx
c001621c:	5e                   	pop    esi
c001621d:	5f                   	pop    edi
c001621e:	5d                   	pop    ebp
c001621f:	c3                   	ret    

c0016220 <createPartitionsForDisk(PhysicalDisk*)>:
c0016220:	55                   	push   ebp
c0016221:	57                   	push   edi
c0016222:	56                   	push   esi
c0016223:	53                   	push   ebx
c0016224:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001622a:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016231:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016237:	3d 00 02 00 00       	cmp    eax,0x200
c001623c:	74 27                	je     c0016265 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001623e:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016244:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001624a:	83 ec 10             	sub    esp,0x10
c001624d:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016251:	99                   	cdq    
c0016252:	c1 e6 0a             	shl    esi,0xa
c0016255:	52                   	push   edx
c0016256:	89 fd                	mov    ebp,edi
c0016258:	50                   	push   eax
c0016259:	55                   	push   ebp
c001625a:	56                   	push   esi
c001625b:	e8 a4 04 01 00       	call   c0026704 <__udivdi3>
c0016260:	e9 b1 00 00 00       	jmp    c0016316 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016265:	83 ec 0c             	sub    esp,0xc
c0016268:	8b 03                	mov    eax,DWORD PTR [ebx]
c001626a:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001626e:	56                   	push   esi
c001626f:	6a 01                	push   0x1
c0016271:	6a 00                	push   0x0
c0016273:	6a 00                	push   0x0
c0016275:	53                   	push   ebx
c0016276:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016279:	83 c4 20             	add    esp,0x20
c001627c:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016284:	75 0a                	jne    c0016290 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016286:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001628e:	74 2c                	je     c00162bc <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016290:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016296:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001629c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00162a2:	83 ec 10             	sub    esp,0x10
c00162a5:	0f a4 c2 0a          	shld   edx,eax,0xa
c00162a9:	89 f7                	mov    edi,esi
c00162ab:	c1 e0 0a             	shl    eax,0xa
c00162ae:	c1 ff 1f             	sar    edi,0x1f
c00162b1:	57                   	push   edi
c00162b2:	56                   	push   esi
c00162b3:	52                   	push   edx
c00162b4:	50                   	push   eax
c00162b5:	e8 4a 04 01 00       	call   c0026704 <__udivdi3>
c00162ba:	eb 5a                	jmp    c0016316 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00162bc:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00162c3:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00162ca:	83 e1 7f             	and    ecx,0x7f
c00162cd:	83 e0 7f             	and    eax,0x7f
c00162d0:	01 c1                	add    ecx,eax
c00162d2:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00162d9:	83 e0 7f             	and    eax,0x7f
c00162dc:	01 c1                	add    ecx,eax
c00162de:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00162e5:	83 e0 7f             	and    eax,0x7f
c00162e8:	00 c1                	add    cl,al
c00162ea:	74 41                	je     c001632d <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00162ec:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00162f2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00162f8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00162fe:	83 ec 10             	sub    esp,0x10
c0016301:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016305:	89 f7                	mov    edi,esi
c0016307:	c1 e0 0a             	shl    eax,0xa
c001630a:	c1 ff 1f             	sar    edi,0x1f
c001630d:	57                   	push   edi
c001630e:	56                   	push   esi
c001630f:	52                   	push   edx
c0016310:	50                   	push   eax
c0016311:	e8 ee 03 01 00       	call   c0026704 <__udivdi3>
c0016316:	83 c4 14             	add    esp,0x14
c0016319:	52                   	push   edx
c001631a:	50                   	push   eax
c001631b:	6a 00                	push   0x0
c001631d:	6a 00                	push   0x0
c001631f:	53                   	push   ebx
c0016320:	e8 53 fe ff ff       	call   c0016178 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016325:	83 c4 20             	add    esp,0x20
c0016328:	e9 79 01 00 00       	jmp    c00164a6 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001632d:	89 f0                	mov    eax,esi
c001632f:	31 f6                	xor    esi,esi
c0016331:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016338:	75 02                	jne    c001633c <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001633a:	89 f1                	mov    ecx,esi
c001633c:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016343:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001634a:	c1 e2 08             	shl    edx,0x8
c001634d:	c1 e7 10             	shl    edi,0x10
c0016350:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016358:	09 fa                	or     edx,edi
c001635a:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016362:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016369:	83 c0 10             	add    eax,0x10
c001636c:	09 fa                	or     edx,edi
c001636e:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016375:	c1 e7 18             	shl    edi,0x18
c0016378:	09 fa                	or     edx,edi
c001637a:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016381:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016385:	c1 e7 10             	shl    edi,0x10
c0016388:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001638f:	c1 e2 08             	shl    edx,0x8
c0016392:	09 fa                	or     edx,edi
c0016394:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001639b:	09 fa                	or     edx,edi
c001639d:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00163a4:	c1 e7 18             	shl    edi,0x18
c00163a7:	09 fa                	or     edx,edi
c00163a9:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00163ad:	46                   	inc    esi
c00163ae:	83 fe 04             	cmp    esi,0x4
c00163b1:	0f 85 7a ff ff ff    	jne    c0016331 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00163b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163bb:	83 f0 01             	xor    eax,0x1
c00163be:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00163c2:	75 57                	jne    c001641b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00163c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00163c8:	83 f0 01             	xor    eax,0x1
c00163cb:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00163cf:	75 4a                	jne    c001641b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00163d1:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00163d5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00163dd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00163e5:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00163eb:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00163f1:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00163f7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00163fb:	89 f7                	mov    edi,esi
c00163fd:	c1 e0 0a             	shl    eax,0xa
c0016400:	c1 ff 1f             	sar    edi,0x1f
c0016403:	57                   	push   edi
c0016404:	56                   	push   esi
c0016405:	52                   	push   edx
c0016406:	50                   	push   eax
c0016407:	e8 f8 02 01 00       	call   c0026704 <__udivdi3>
c001640c:	83 c4 10             	add    esp,0x10
c001640f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016413:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016417:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001641b:	84 c9                	test   cl,cl
c001641d:	74 53                	je     c0016472 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001641f:	0f b6 c9             	movzx  ecx,cl
c0016422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016426:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001642a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001642e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016432:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016436:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001643a:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001643e:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016442:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016446:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001644a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001644e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016452:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016456:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001645a:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001645e:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016462:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016466:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001646a:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001646e:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016472:	31 ed                	xor    ebp,ebp
c0016474:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016478:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001647c:	89 f8                	mov    eax,edi
c001647e:	09 f0                	or     eax,esi
c0016480:	74 1e                	je     c00164a0 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016482:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016486:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001648a:	89 d1                	mov    ecx,edx
c001648c:	09 c1                	or     ecx,eax
c001648e:	74 10                	je     c00164a0 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016490:	83 ec 0c             	sub    esp,0xc
c0016493:	57                   	push   edi
c0016494:	56                   	push   esi
c0016495:	52                   	push   edx
c0016496:	50                   	push   eax
c0016497:	53                   	push   ebx
c0016498:	e8 db fc ff ff       	call   c0016178 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001649d:	83 c4 20             	add    esp,0x20
c00164a0:	45                   	inc    ebp
c00164a1:	83 fd 04             	cmp    ebp,0x4
c00164a4:	75 ce                	jne    c0016474 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00164a6:	81 c4 5c 02 00 00    	add    esp,0x25c
c00164ac:	5b                   	pop    ebx
c00164ad:	5e                   	pop    esi
c00164ae:	5f                   	pop    edi
c00164af:	5d                   	pop    ebp
c00164b0:	c3                   	ret    
c00164b1:	90                   	nop

c00164b2 <Serial::Serial(char const*)>:
c00164b2:	83 ec 0c             	sub    esp,0xc
c00164b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b9:	83 ec 08             	sub    esp,0x8
c00164bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164c0:	50                   	push   eax
c00164c1:	e8 3e d8 ff ff       	call   c0013d04 <Device::Device(char const*)>
c00164c6:	83 c4 10             	add    esp,0x10
c00164c9:	ba 78 af 02 c0       	mov    edx,0xc002af78
c00164ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164d2:	89 10                	mov    DWORD PTR [eax],edx
c00164d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164d8:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00164e2:	90                   	nop
c00164e3:	83 c4 0c             	add    esp,0xc
c00164e6:	c3                   	ret    
c00164e7:	90                   	nop

c00164e8 <Serial::~Serial()>:
c00164e8:	83 ec 0c             	sub    esp,0xc
c00164eb:	ba 78 af 02 c0       	mov    edx,0xc002af78
c00164f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164f4:	89 10                	mov    DWORD PTR [eax],edx
c00164f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164fa:	83 ec 0c             	sub    esp,0xc
c00164fd:	50                   	push   eax
c00164fe:	e8 cb d4 ff ff       	call   c00139ce <Device::~Device()>
c0016503:	83 c4 10             	add    esp,0x10
c0016506:	90                   	nop
c0016507:	83 c4 0c             	add    esp,0xc
c001650a:	c3                   	ret    
c001650b:	90                   	nop

c001650c <Serial::~Serial()>:
c001650c:	83 ec 0c             	sub    esp,0xc
c001650f:	83 ec 0c             	sub    esp,0xc
c0016512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016516:	e8 cd ff ff ff       	call   c00164e8 <Serial::~Serial()>
c001651b:	83 c4 10             	add    esp,0x10
c001651e:	83 ec 08             	sub    esp,0x8
c0016521:	68 58 01 00 00       	push   0x158
c0016526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001652a:	e8 c0 c0 ff ff       	call   c00125ef <operator delete(void*, unsigned long)>
c001652f:	83 c4 10             	add    esp,0x10
c0016532:	83 c4 0c             	add    esp,0xc
c0016535:	c3                   	ret    

c0016536 <Timer::Timer(char const*)>:
c0016536:	83 ec 0c             	sub    esp,0xc
c0016539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001653d:	83 ec 08             	sub    esp,0x8
c0016540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016544:	50                   	push   eax
c0016545:	e8 ba d7 ff ff       	call   c0013d04 <Device::Device(char const*)>
c001654a:	83 c4 10             	add    esp,0x10
c001654d:	ba bc af 02 c0       	mov    edx,0xc002afbc
c0016552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016556:	89 10                	mov    DWORD PTR [eax],edx
c0016558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001655c:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016566:	90                   	nop
c0016567:	83 c4 0c             	add    esp,0xc
c001656a:	c3                   	ret    
c001656b:	90                   	nop

c001656c <Timer::~Timer()>:
c001656c:	83 ec 0c             	sub    esp,0xc
c001656f:	ba bc af 02 c0       	mov    edx,0xc002afbc
c0016574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016578:	89 10                	mov    DWORD PTR [eax],edx
c001657a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001657e:	83 ec 0c             	sub    esp,0xc
c0016581:	50                   	push   eax
c0016582:	e8 47 d4 ff ff       	call   c00139ce <Device::~Device()>
c0016587:	83 c4 10             	add    esp,0x10
c001658a:	90                   	nop
c001658b:	83 c4 0c             	add    esp,0xc
c001658e:	c3                   	ret    
c001658f:	90                   	nop

c0016590 <Timer::~Timer()>:
c0016590:	83 ec 0c             	sub    esp,0xc
c0016593:	83 ec 0c             	sub    esp,0xc
c0016596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001659a:	e8 cd ff ff ff       	call   c001656c <Timer::~Timer()>
c001659f:	83 c4 10             	add    esp,0x10
c00165a2:	83 ec 08             	sub    esp,0x8
c00165a5:	68 5c 01 00 00       	push   0x15c
c00165aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165ae:	e8 3c c0 ff ff       	call   c00125ef <operator delete(void*, unsigned long)>
c00165b3:	83 c4 10             	add    esp,0x10
c00165b6:	83 c4 0c             	add    esp,0xc
c00165b9:	c3                   	ret    

c00165ba <Timer::read()>:
c00165ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165be:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00165c4:	c3                   	ret    

c00165c5 <timerHandler(unsigned long long)>:
c00165c5:	55                   	push   ebp
c00165c6:	57                   	push   edi
c00165c7:	56                   	push   esi
c00165c8:	53                   	push   ebx
c00165c9:	83 ec 0c             	sub    esp,0xc
c00165cc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00165d0:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00165d4:	01 35 70 df 02 c0    	add    DWORD PTR ds:0xc002df70,esi
c00165da:	11 3d 74 df 02 c0    	adc    DWORD PTR ds:0xc002df74,edi
c00165e0:	80 3d 0d d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d90d,0x0
c00165e7:	0f 84 42 01 00 00    	je     c001672f <timerHandler(unsigned long long)+0x16a>
c00165ed:	fa                   	cli    
c00165ee:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c00165f4:	83 ec 0c             	sub    esp,0xc
c00165f7:	ff 05 24 0e 03 c0    	inc    DWORD PTR ds:0xc0030e24
c00165fd:	68 38 0e 03 c0       	push   0xc0030e38
c0016602:	e8 57 21 01 00       	call   c002875e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016607:	83 c4 10             	add    esp,0x10
c001660a:	84 c0                	test   al,al
c001660c:	0f 85 a2 00 00 00    	jne    c00166b4 <timerHandler(unsigned long long)+0xef>
c0016612:	83 ec 0c             	sub    esp,0xc
c0016615:	68 38 0e 03 c0       	push   0xc0030e38
c001661a:	e8 5b 21 01 00       	call   c002877a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001661f:	83 c4 10             	add    esp,0x10
c0016622:	89 c3                	mov    ebx,eax
c0016624:	83 ec 0c             	sub    esp,0xc
c0016627:	68 38 0e 03 c0       	push   0xc0030e38
c001662c:	e8 49 21 01 00       	call   c002877a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016631:	c7 04 24 38 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e38
c0016638:	89 c5                	mov    ebp,eax
c001663a:	e8 43 21 01 00       	call   c0028782 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001663f:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016642:	83 c4 10             	add    esp,0x10
c0016645:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016648:	39 15 70 df 02 c0    	cmp    DWORD PTR ds:0xc002df70,edx
c001664e:	a1 74 df 02 c0       	mov    eax,ds:0xc002df74
c0016653:	19 c8                	sbb    eax,ecx
c0016655:	72 21                	jb     c0016678 <timerHandler(unsigned long long)+0xb3>
c0016657:	83 ec 0c             	sub    esp,0xc
c001665a:	55                   	push   ebp
c001665b:	e8 e0 77 00 00       	call   c001de40 <unblockTask(ThreadControlBlock*)>
c0016660:	83 c4 10             	add    esp,0x10
c0016663:	39 eb                	cmp    ebx,ebp
c0016665:	75 21                	jne    c0016688 <timerHandler(unsigned long long)+0xc3>
c0016667:	83 ec 0c             	sub    esp,0xc
c001666a:	68 38 0e 03 c0       	push   0xc0030e38
c001666f:	e8 06 21 01 00       	call   c002877a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016674:	89 c3                	mov    ebx,eax
c0016676:	eb 0d                	jmp    c0016685 <timerHandler(unsigned long long)+0xc0>
c0016678:	50                   	push   eax
c0016679:	50                   	push   eax
c001667a:	55                   	push   ebp
c001667b:	68 38 0e 03 c0       	push   0xc0030e38
c0016680:	e8 ab 21 01 00       	call   c0028830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016685:	83 c4 10             	add    esp,0x10
c0016688:	83 ec 0c             	sub    esp,0xc
c001668b:	68 38 0e 03 c0       	push   0xc0030e38
c0016690:	e8 c9 20 01 00       	call   c002875e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016695:	83 c4 10             	add    esp,0x10
c0016698:	84 c0                	test   al,al
c001669a:	75 18                	jne    c00166b4 <timerHandler(unsigned long long)+0xef>
c001669c:	83 ec 0c             	sub    esp,0xc
c001669f:	68 38 0e 03 c0       	push   0xc0030e38
c00166a4:	e8 d1 20 01 00       	call   c002877a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166a9:	83 c4 10             	add    esp,0x10
c00166ac:	39 d8                	cmp    eax,ebx
c00166ae:	0f 85 70 ff ff ff    	jne    c0016624 <timerHandler(unsigned long long)+0x5f>
c00166b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166b9:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c00166bd:	74 3d                	je     c00166fc <timerHandler(unsigned long long)+0x137>
c00166bf:	80 3d 0c d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d90c,0x0
c00166c6:	74 34                	je     c00166fc <timerHandler(unsigned long long)+0x137>
c00166c8:	fa                   	cli    
c00166c9:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c00166cf:	31 d2                	xor    edx,edx
c00166d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166d6:	89 f9                	mov    ecx,edi
c00166d8:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00166db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166e0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00166e3:	39 c6                	cmp    esi,eax
c00166e5:	19 d1                	sbb    ecx,edx
c00166e7:	72 05                	jb     c00166ee <timerHandler(unsigned long long)+0x129>
c00166e9:	e8 cf 72 00 00       	call   c001d9bd <schedule()>
c00166ee:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c00166f3:	48                   	dec    eax
c00166f4:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c00166f9:	75 01                	jne    c00166fc <timerHandler(unsigned long long)+0x137>
c00166fb:	fb                   	sti    
c00166fc:	a1 24 0e 03 c0       	mov    eax,ds:0xc0030e24
c0016701:	48                   	dec    eax
c0016702:	a3 24 0e 03 c0       	mov    ds:0xc0030e24,eax
c0016707:	75 18                	jne    c0016721 <timerHandler(unsigned long long)+0x15c>
c0016709:	83 3d 20 0e 03 c0 00 	cmp    DWORD PTR ds:0xc0030e20,0x0
c0016710:	74 0f                	je     c0016721 <timerHandler(unsigned long long)+0x15c>
c0016712:	c7 05 20 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e20,0x0
c001671c:	e8 9c 72 00 00       	call   c001d9bd <schedule()>
c0016721:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c0016726:	48                   	dec    eax
c0016727:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001672c:	75 01                	jne    c001672f <timerHandler(unsigned long long)+0x16a>
c001672e:	fb                   	sti    
c001672f:	83 c4 0c             	add    esp,0xc
c0016732:	5b                   	pop    ebx
c0016733:	5e                   	pop    esi
c0016734:	5f                   	pop    edi
c0016735:	5d                   	pop    ebp
c0016736:	c3                   	ret    

c0016737 <setupTimer(int)>:
c0016737:	57                   	push   edi
c0016738:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c001673d:	56                   	push   esi
c001673e:	53                   	push   ebx
c001673f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016743:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016749:	83 ec 0c             	sub    esp,0xc
c001674c:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016752:	e8 a9 d6 ff ff       	call   c0013e00 <Device::getName()>
c0016757:	83 c4 10             	add    esp,0x10
c001675a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001675d:	0f 85 8d 00 00 00    	jne    c00167f0 <setupTimer(int)+0xb9>
c0016763:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0016768:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001676f:	74 7f                	je     c00167f0 <setupTimer(int)+0xb9>
c0016771:	83 ec 0c             	sub    esp,0xc
c0016774:	68 5c 01 00 00       	push   0x15c
c0016779:	e8 1b 8e ff ff       	call   c000f599 <malloc>
c001677e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016781:	89 c3                	mov    ebx,eax
c0016783:	e8 54 fb 00 00       	call   c00262dc <PIT::PIT()>
c0016788:	59                   	pop    ecx
c0016789:	5f                   	pop    edi
c001678a:	53                   	push   ebx
c001678b:	ff 35 08 d9 02 c0    	push   DWORD PTR ds:0xc002d908
c0016791:	e8 6a d3 ff ff       	call   c0013b00 <Device::addChild(Device*)>
c0016796:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016798:	6a 00                	push   0x0
c001679a:	6a 00                	push   0x0
c001679c:	56                   	push   esi
c001679d:	53                   	push   ebx
c001679e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167a1:	83 c4 14             	add    esp,0x14
c00167a4:	68 60 01 00 00       	push   0x160
c00167a9:	e8 eb 8d ff ff       	call   c000f599 <malloc>
c00167ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00167b1:	89 c7                	mov    edi,eax
c00167b3:	e8 d4 f9 00 00       	call   c002618c <APICTimer::APICTimer()>
c00167b8:	6a 00                	push   0x0
c00167ba:	6a 00                	push   0x0
c00167bc:	56                   	push   esi
c00167bd:	57                   	push   edi
c00167be:	e8 cb f8 00 00       	call   c002608e <APICTimer::open(int, int, void*)>
c00167c3:	83 c4 20             	add    esp,0x20
c00167c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167c8:	6a 00                	push   0x0
c00167ca:	6a 00                	push   0x0
c00167cc:	6a 00                	push   0x0
c00167ce:	53                   	push   ebx
c00167cf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00167d2:	58                   	pop    eax
c00167d3:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c00167d8:	5a                   	pop    edx
c00167d9:	57                   	push   edi
c00167da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00167e0:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00167e6:	e8 15 d3 ff ff       	call   c0013b00 <Device::addChild(Device*)>
c00167eb:	83 c4 10             	add    esp,0x10
c00167ee:	eb 33                	jmp    c0016823 <setupTimer(int)+0xec>
c00167f0:	83 ec 0c             	sub    esp,0xc
c00167f3:	68 5c 01 00 00       	push   0x15c
c00167f8:	e8 9c 8d ff ff       	call   c000f599 <malloc>
c00167fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0016800:	89 c3                	mov    ebx,eax
c0016802:	e8 d5 fa 00 00       	call   c00262dc <PIT::PIT()>
c0016807:	58                   	pop    eax
c0016808:	5a                   	pop    edx
c0016809:	53                   	push   ebx
c001680a:	ff 35 08 d9 02 c0    	push   DWORD PTR ds:0xc002d908
c0016810:	e8 eb d2 ff ff       	call   c0013b00 <Device::addChild(Device*)>
c0016815:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016817:	6a 00                	push   0x0
c0016819:	6a 00                	push   0x0
c001681b:	56                   	push   esi
c001681c:	53                   	push   ebx
c001681d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016820:	83 c4 20             	add    esp,0x20
c0016823:	89 d8                	mov    eax,ebx
c0016825:	5b                   	pop    ebx
c0016826:	5e                   	pop    esi
c0016827:	5f                   	pop    edi
c0016828:	c3                   	ret    
c0016829:	90                   	nop

c001682a <VCache::VCache(PhysicalDisk*)>:
c001682a:	53                   	push   ebx
c001682b:	83 ec 18             	sub    esp,0x18
c001682e:	ba ec af 02 c0       	mov    edx,0xc002afec
c0016833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016837:	89 10                	mov    DWORD PTR [eax],edx
c0016839:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001683d:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016844:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016848:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001684f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016853:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001685a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016861:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016865:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001686c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016873:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016877:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001687e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016882:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016886:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001688a:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016891:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016898:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001689c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00168a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168a4:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00168a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ac:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00168b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168b4:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00168bb:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00168c3:	83 ec 0c             	sub    esp,0xc
c00168c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168ca:	e8 ca 8c ff ff       	call   c000f599 <malloc>
c00168cf:	83 c4 10             	add    esp,0x10
c00168d2:	89 c3                	mov    ebx,eax
c00168d4:	83 ec 0c             	sub    esp,0xc
c00168d7:	53                   	push   ebx
c00168d8:	e8 a9 6e 00 00       	call   c001d786 <Mutex::Mutex()>
c00168dd:	83 c4 10             	add    esp,0x10
c00168e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168e4:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00168e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168eb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00168ef:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00168f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168f6:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00168fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016901:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016907:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001690b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001690e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016912:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016918:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001691e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016922:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016925:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016928:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001692c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016930:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016934:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001693a:	05 00 01 00 00       	add    eax,0x100
c001693f:	c1 e0 04             	shl    eax,0x4
c0016942:	83 ec 0c             	sub    esp,0xc
c0016945:	50                   	push   eax
c0016946:	e8 4e 8c ff ff       	call   c000f599 <malloc>
c001694b:	83 c4 10             	add    esp,0x10
c001694e:	89 c2                	mov    edx,eax
c0016950:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016954:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016957:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001695b:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016962:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016966:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001696a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001696e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016974:	c1 e0 07             	shl    eax,0x7
c0016977:	83 ec 0c             	sub    esp,0xc
c001697a:	50                   	push   eax
c001697b:	e8 19 8c ff ff       	call   c000f599 <malloc>
c0016980:	83 c4 10             	add    esp,0x10
c0016983:	89 c2                	mov    edx,eax
c0016985:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016989:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001698c:	90                   	nop
c001698d:	83 c4 18             	add    esp,0x18
c0016990:	5b                   	pop    ebx
c0016991:	c3                   	ret    

c0016992 <VCache::invalidateReadBuffer()>:
c0016992:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016996:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001699c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00169a0:	c3                   	ret    
c00169a1:	90                   	nop

c00169a2 <VCache::writeWriteBuffer()>:
c00169a2:	53                   	push   ebx
c00169a3:	83 ec 14             	sub    esp,0x14
c00169a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00169aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00169ad:	8b 10                	mov    edx,DWORD PTR [eax]
c00169af:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00169b2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00169b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00169b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00169bb:	50                   	push   eax
c00169bc:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00169bf:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00169c6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00169cd:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00169d1:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00169d8:	83 c4 28             	add    esp,0x28
c00169db:	5b                   	pop    ebx
c00169dc:	c3                   	ret    
c00169dd:	90                   	nop

c00169de <VCache::~VCache()>:
c00169de:	83 ec 0c             	sub    esp,0xc
c00169e1:	ba ec af 02 c0       	mov    edx,0xc002afec
c00169e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169ea:	89 10                	mov    DWORD PTR [eax],edx
c00169ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169f0:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00169f3:	84 c0                	test   al,al
c00169f5:	74 0f                	je     c0016a06 <VCache::~VCache()+0x28>
c00169f7:	83 ec 0c             	sub    esp,0xc
c00169fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169fe:	e8 9f ff ff ff       	call   c00169a2 <VCache::writeWriteBuffer()>
c0016a03:	83 c4 10             	add    esp,0x10
c0016a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a0a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016a0d:	83 ec 0c             	sub    esp,0xc
c0016a10:	50                   	push   eax
c0016a11:	e8 93 8b ff ff       	call   c000f5a9 <free>
c0016a16:	83 c4 10             	add    esp,0x10
c0016a19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a1d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016a20:	83 ec 0c             	sub    esp,0xc
c0016a23:	50                   	push   eax
c0016a24:	e8 80 8b ff ff       	call   c000f5a9 <free>
c0016a29:	83 c4 10             	add    esp,0x10
c0016a2c:	90                   	nop
c0016a2d:	83 c4 0c             	add    esp,0xc
c0016a30:	c3                   	ret    
c0016a31:	90                   	nop

c0016a32 <VCache::~VCache()>:
c0016a32:	83 ec 0c             	sub    esp,0xc
c0016a35:	83 ec 0c             	sub    esp,0xc
c0016a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a3c:	e8 9d ff ff ff       	call   c00169de <VCache::~VCache()>
c0016a41:	83 c4 10             	add    esp,0x10
c0016a44:	83 ec 08             	sub    esp,0x8
c0016a47:	6a 44                	push   0x44
c0016a49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a4d:	e8 9d bb ff ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0016a52:	83 c4 10             	add    esp,0x10
c0016a55:	83 c4 0c             	add    esp,0xc
c0016a58:	c3                   	ret    
c0016a59:	90                   	nop

c0016a5a <VCache::write(unsigned long long, int, void*)>:
c0016a5a:	55                   	push   ebp
c0016a5b:	57                   	push   edi
c0016a5c:	56                   	push   esi
c0016a5d:	53                   	push   ebx
c0016a5e:	83 ec 18             	sub    esp,0x18
c0016a61:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016a65:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a69:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016a6d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a70:	e8 57 72 00 00       	call   c001dccc <Semaphore::acquire()>
c0016a75:	83 c4 10             	add    esp,0x10
c0016a78:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016a7c:	74 0c                	je     c0016a8a <VCache::write(unsigned long long, int, void*)+0x30>
c0016a7e:	83 ec 0c             	sub    esp,0xc
c0016a81:	53                   	push   ebx
c0016a82:	e8 0b ff ff ff       	call   c0016992 <VCache::invalidateReadBuffer()>
c0016a87:	83 c4 10             	add    esp,0x10
c0016a8a:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016a8e:	74 5c                	je     c0016aec <VCache::write(unsigned long long, int, void*)+0x92>
c0016a90:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016a93:	89 e8                	mov    eax,ebp
c0016a95:	99                   	cdq    
c0016a96:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016a99:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016a9c:	89 c1                	mov    ecx,eax
c0016a9e:	89 d0                	mov    eax,edx
c0016aa0:	31 f1                	xor    ecx,esi
c0016aa2:	31 f8                	xor    eax,edi
c0016aa4:	09 c1                	or     ecx,eax
c0016aa6:	75 38                	jne    c0016ae0 <VCache::write(unsigned long long, int, void*)+0x86>
c0016aa8:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016aad:	75 31                	jne    c0016ae0 <VCache::write(unsigned long long, int, void*)+0x86>
c0016aaf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ab2:	89 ef                	mov    edi,ebp
c0016ab4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016aba:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016abe:	0f af f9             	imul   edi,ecx
c0016ac1:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016ac4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ac6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016ac9:	40                   	inc    eax
c0016aca:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016acd:	83 c0 80             	add    eax,0xffffff80
c0016ad0:	75 5c                	jne    c0016b2e <VCache::write(unsigned long long, int, void*)+0xd4>
c0016ad2:	83 ec 0c             	sub    esp,0xc
c0016ad5:	53                   	push   ebx
c0016ad6:	e8 c7 fe ff ff       	call   c00169a2 <VCache::writeWriteBuffer()>
c0016adb:	83 c4 10             	add    esp,0x10
c0016ade:	eb 4e                	jmp    c0016b2e <VCache::write(unsigned long long, int, void*)+0xd4>
c0016ae0:	83 ec 0c             	sub    esp,0xc
c0016ae3:	53                   	push   ebx
c0016ae4:	e8 b9 fe ff ff       	call   c00169a2 <VCache::writeWriteBuffer()>
c0016ae9:	83 c4 10             	add    esp,0x10
c0016aec:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016aef:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016af4:	7f 22                	jg     c0016b18 <VCache::write(unsigned long long, int, void*)+0xbe>
c0016af6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016af9:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016afc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016b00:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016b04:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016b07:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016b0a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016b10:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b16:	eb 16                	jmp    c0016b2e <VCache::write(unsigned long long, int, void*)+0xd4>
c0016b18:	83 ec 0c             	sub    esp,0xc
c0016b1b:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016b21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016b25:	57                   	push   edi
c0016b26:	56                   	push   esi
c0016b27:	50                   	push   eax
c0016b28:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016b2b:	83 c4 20             	add    esp,0x20
c0016b2e:	83 ec 0c             	sub    esp,0xc
c0016b31:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b34:	e8 ef 77 00 00       	call   c001e328 <Semaphore::release()>
c0016b39:	83 c4 1c             	add    esp,0x1c
c0016b3c:	31 c0                	xor    eax,eax
c0016b3e:	5b                   	pop    ebx
c0016b3f:	5e                   	pop    esi
c0016b40:	5f                   	pop    edi
c0016b41:	5d                   	pop    ebp
c0016b42:	c3                   	ret    
c0016b43:	90                   	nop

c0016b44 <VCache::read(unsigned long long, int, void*)>:
c0016b44:	55                   	push   ebp
c0016b45:	57                   	push   edi
c0016b46:	56                   	push   esi
c0016b47:	53                   	push   ebx
c0016b48:	83 ec 28             	sub    esp,0x28
c0016b4b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016b4f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016b53:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016b57:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016b5b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b5e:	e8 69 71 00 00       	call   c001dccc <Semaphore::acquire()>
c0016b63:	83 c4 10             	add    esp,0x10
c0016b66:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016b6a:	74 0c                	je     c0016b78 <VCache::read(unsigned long long, int, void*)+0x34>
c0016b6c:	83 ec 0c             	sub    esp,0xc
c0016b6f:	53                   	push   ebx
c0016b70:	e8 2d fe ff ff       	call   c00169a2 <VCache::writeWriteBuffer()>
c0016b75:	83 c4 10             	add    esp,0x10
c0016b78:	83 fd 01             	cmp    ebp,0x1
c0016b7b:	0f 85 80 00 00 00    	jne    c0016c01 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016b81:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b84:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016b88:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016b8f:	75 70                	jne    c0016c01 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016b91:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016b94:	89 e9                	mov    ecx,ebp
c0016b96:	f7 d9                	neg    ecx
c0016b98:	89 c8                	mov    eax,ecx
c0016b9a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016b9e:	c1 f8 1f             	sar    eax,0x1f
c0016ba1:	21 f1                	and    ecx,esi
c0016ba3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ba7:	89 c8                	mov    eax,ecx
c0016ba9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016bad:	21 f9                	and    ecx,edi
c0016baf:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016bb3:	89 ca                	mov    edx,ecx
c0016bb5:	74 0a                	je     c0016bc1 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016bb7:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016bba:	75 05                	jne    c0016bc1 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016bbc:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016bbf:	74 23                	je     c0016be4 <VCache::read(unsigned long long, int, void*)+0xa0>
c0016bc1:	83 ec 0c             	sub    esp,0xc
c0016bc4:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016bc8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016bcc:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016bcf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016bd2:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016bd4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016bd7:	55                   	push   ebp
c0016bd8:	52                   	push   edx
c0016bd9:	50                   	push   eax
c0016bda:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016bde:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016be1:	83 c4 20             	add    esp,0x20
c0016be4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016be7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016beb:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016bf1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016bf4:	48                   	dec    eax
c0016bf5:	21 c6                	and    esi,eax
c0016bf7:	0f af f1             	imul   esi,ecx
c0016bfa:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016bfd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016bff:	eb 1d                	jmp    c0016c1e <VCache::read(unsigned long long, int, void*)+0xda>
c0016c01:	83 ec 0c             	sub    esp,0xc
c0016c04:	53                   	push   ebx
c0016c05:	e8 88 fd ff ff       	call   c0016992 <VCache::invalidateReadBuffer()>
c0016c0a:	5a                   	pop    edx
c0016c0b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c0e:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c10:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016c14:	55                   	push   ebp
c0016c15:	57                   	push   edi
c0016c16:	56                   	push   esi
c0016c17:	50                   	push   eax
c0016c18:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016c1b:	83 c4 20             	add    esp,0x20
c0016c1e:	83 ec 0c             	sub    esp,0xc
c0016c21:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016c24:	e8 ff 76 00 00       	call   c001e328 <Semaphore::release()>
c0016c29:	83 c4 2c             	add    esp,0x2c
c0016c2c:	31 c0                	xor    eax,eax
c0016c2e:	5b                   	pop    ebx
c0016c2f:	5e                   	pop    esi
c0016c30:	5f                   	pop    edi
c0016c31:	5d                   	pop    ebp
c0016c32:	c3                   	ret    
c0016c33:	90                   	nop

c0016c34 <Video::putrect(int, int, int, int, unsigned int)>:
c0016c34:	55                   	push   ebp
c0016c35:	57                   	push   edi
c0016c36:	56                   	push   esi
c0016c37:	53                   	push   ebx
c0016c38:	83 ec 1c             	sub    esp,0x1c
c0016c3b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016c3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016c43:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016c47:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016c4b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c53:	01 df                	add    edi,ebx
c0016c55:	39 fb                	cmp    ebx,edi
c0016c57:	7d 1f                	jge    c0016c78 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016c59:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016c5d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016c61:	7d 12                	jge    c0016c75 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016c63:	8b 16                	mov    edx,DWORD PTR [esi]
c0016c65:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016c69:	53                   	push   ebx
c0016c6a:	55                   	push   ebp
c0016c6b:	45                   	inc    ebp
c0016c6c:	56                   	push   esi
c0016c6d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016c70:	83 c4 10             	add    esp,0x10
c0016c73:	eb e8                	jmp    c0016c5d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016c75:	43                   	inc    ebx
c0016c76:	eb dd                	jmp    c0016c55 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016c78:	83 c4 1c             	add    esp,0x1c
c0016c7b:	5b                   	pop    ebx
c0016c7c:	5e                   	pop    esi
c0016c7d:	5f                   	pop    edi
c0016c7e:	5d                   	pop    ebp
c0016c7f:	c3                   	ret    

c0016c80 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016c80:	55                   	push   ebp
c0016c81:	57                   	push   edi
c0016c82:	31 ff                	xor    edi,edi
c0016c84:	56                   	push   esi
c0016c85:	53                   	push   ebx
c0016c86:	83 ec 1c             	sub    esp,0x1c
c0016c89:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016c8d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016c91:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016c98:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016c9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ca1:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016ca5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ca9:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016cac:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016cb0:	01 f9                	add    ecx,edi
c0016cb2:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016cb6:	7d 2f                	jge    c0016ce7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016cb8:	31 f6                	xor    esi,esi
c0016cba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016cbe:	01 f2                	add    edx,esi
c0016cc0:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016cc4:	7d 1a                	jge    c0016ce0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016cc6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016cc9:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016ccc:	46                   	inc    esi
c0016ccd:	51                   	push   ecx
c0016cce:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016cd2:	52                   	push   edx
c0016cd3:	55                   	push   ebp
c0016cd4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016cd7:	83 c4 10             	add    esp,0x10
c0016cda:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016cde:	eb da                	jmp    c0016cba <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016ce0:	47                   	inc    edi
c0016ce1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016ce5:	eb c5                	jmp    c0016cac <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016ce7:	83 c4 1c             	add    esp,0x1c
c0016cea:	5b                   	pop    ebx
c0016ceb:	5e                   	pop    esi
c0016cec:	5f                   	pop    edi
c0016ced:	5d                   	pop    ebp
c0016cee:	c3                   	ret    
c0016cef:	90                   	nop

c0016cf0 <Video::blit(unsigned int*, int, int, int, int)>:
c0016cf0:	55                   	push   ebp
c0016cf1:	57                   	push   edi
c0016cf2:	56                   	push   esi
c0016cf3:	53                   	push   ebx
c0016cf4:	83 ec 1c             	sub    esp,0x1c
c0016cf7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016cfb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016cff:	85 c0                	test   eax,eax
c0016d01:	79 02                	jns    c0016d05 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016d03:	31 c0                	xor    eax,eax
c0016d05:	c1 e0 02             	shl    eax,0x2
c0016d08:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016d0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d10:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016d14:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016d18:	39 d8                	cmp    eax,ebx
c0016d1a:	7e 49                	jle    c0016d65 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016d1c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016d22:	7c 41                	jl     c0016d65 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016d24:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016d28:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016d2c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016d30:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016d34:	39 f9                	cmp    ecx,edi
c0016d36:	7e 22                	jle    c0016d5a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016d38:	83 c5 04             	add    ebp,0x4
c0016d3b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016d41:	7c 14                	jl     c0016d57 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016d43:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016d45:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016d48:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d4c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d50:	56                   	push   esi
c0016d51:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016d54:	83 c4 10             	add    esp,0x10
c0016d57:	47                   	inc    edi
c0016d58:	eb d2                	jmp    c0016d2c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016d5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d5e:	43                   	inc    ebx
c0016d5f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016d63:	eb ab                	jmp    c0016d10 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016d65:	83 c4 1c             	add    esp,0x1c
c0016d68:	5b                   	pop    ebx
c0016d69:	5e                   	pop    esi
c0016d6a:	5f                   	pop    edi
c0016d6b:	5d                   	pop    ebp
c0016d6c:	c3                   	ret    
c0016d6d:	90                   	nop

c0016d6e <Video::clearScreen(unsigned int)>:
c0016d6e:	57                   	push   edi
c0016d6f:	56                   	push   esi
c0016d70:	53                   	push   ebx
c0016d71:	31 db                	xor    ebx,ebx
c0016d73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016d77:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016d7d:	7e 1f                	jle    c0016d9e <Video::clearScreen(unsigned int)+0x30>
c0016d7f:	31 ff                	xor    edi,edi
c0016d81:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016d87:	7e 12                	jle    c0016d9b <Video::clearScreen(unsigned int)+0x2d>
c0016d89:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016d8f:	53                   	push   ebx
c0016d90:	57                   	push   edi
c0016d91:	47                   	inc    edi
c0016d92:	56                   	push   esi
c0016d93:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d96:	83 c4 10             	add    esp,0x10
c0016d99:	eb e6                	jmp    c0016d81 <Video::clearScreen(unsigned int)+0x13>
c0016d9b:	43                   	inc    ebx
c0016d9c:	eb d9                	jmp    c0016d77 <Video::clearScreen(unsigned int)+0x9>
c0016d9e:	5b                   	pop    ebx
c0016d9f:	5e                   	pop    esi
c0016da0:	5f                   	pop    edi
c0016da1:	c3                   	ret    

c0016da2 <Video::putpixel(int, int, unsigned int)>:
c0016da2:	c7 44 24 04 f4 af 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aff4
c0016daa:	e9 84 30 00 00       	jmp    c0019e33 <Krnl::panic(char const*)>
c0016daf:	90                   	nop

c0016db0 <Video::Video(char const*)>:
c0016db0:	83 ec 0c             	sub    esp,0xc
c0016db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016db7:	83 ec 08             	sub    esp,0x8
c0016dba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dbe:	50                   	push   eax
c0016dbf:	e8 40 cf ff ff       	call   c0013d04 <Device::Device(char const*)>
c0016dc4:	83 c4 10             	add    esp,0x10
c0016dc7:	ba 64 b0 02 c0       	mov    edx,0xc002b064
c0016dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dd0:	89 10                	mov    DWORD PTR [eax],edx
c0016dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dd6:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016de0:	90                   	nop
c0016de1:	83 c4 0c             	add    esp,0xc
c0016de4:	c3                   	ret    
c0016de5:	90                   	nop

c0016de6 <Video::~Video()>:
c0016de6:	83 ec 0c             	sub    esp,0xc
c0016de9:	ba 64 b0 02 c0       	mov    edx,0xc002b064
c0016dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016df2:	89 10                	mov    DWORD PTR [eax],edx
c0016df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016df8:	83 ec 0c             	sub    esp,0xc
c0016dfb:	50                   	push   eax
c0016dfc:	e8 cd cb ff ff       	call   c00139ce <Device::~Device()>
c0016e01:	83 c4 10             	add    esp,0x10
c0016e04:	90                   	nop
c0016e05:	83 c4 0c             	add    esp,0xc
c0016e08:	c3                   	ret    
c0016e09:	90                   	nop

c0016e0a <Video::~Video()>:
c0016e0a:	83 ec 0c             	sub    esp,0xc
c0016e0d:	83 ec 0c             	sub    esp,0xc
c0016e10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e14:	e8 cd ff ff ff       	call   c0016de6 <Video::~Video()>
c0016e19:	83 c4 10             	add    esp,0x10
c0016e1c:	83 ec 08             	sub    esp,0x8
c0016e1f:	68 64 01 00 00       	push   0x164
c0016e24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e28:	e8 c2 b7 ff ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0016e2d:	83 c4 10             	add    esp,0x10
c0016e30:	83 c4 0c             	add    esp,0xc
c0016e33:	c3                   	ret    

c0016e34 <Video::isMonochrome()>:
c0016e34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e38:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016e3e:	c3                   	ret    
c0016e3f:	90                   	nop

c0016e40 <Video::getWidth()>:
c0016e40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e44:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016e4a:	c3                   	ret    
c0016e4b:	90                   	nop

c0016e4c <Video::getHeight()>:
c0016e4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e50:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016e56:	c3                   	ret    
c0016e57:	90                   	nop

c0016e58 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016e58:	55                   	push   ebp
c0016e59:	57                   	push   edi
c0016e5a:	56                   	push   esi
c0016e5b:	53                   	push   ebx
c0016e5c:	83 ec 2c             	sub    esp,0x2c
c0016e5f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e63:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016e67:	83 f8 01             	cmp    eax,0x1
c0016e6a:	19 c9                	sbb    ecx,ecx
c0016e6c:	31 db                	xor    ebx,ebx
c0016e6e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016e72:	89 cd                	mov    ebp,ecx
c0016e74:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016e7c:	f7 d5                	not    ebp
c0016e7e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016e84:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016e88:	01 d8                	add    eax,ebx
c0016e8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e8e:	56                   	push   esi
c0016e8f:	e8 b8 ff ff ff       	call   c0016e4c <Video::getHeight()>
c0016e94:	59                   	pop    ecx
c0016e95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016e99:	7e 70                	jle    c0016f0b <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016e9b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016e9f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016ea3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016ea6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016eaa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016eae:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016eb5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016eb9:	89 f8                	mov    eax,edi
c0016ebb:	83 c0 20             	add    eax,0x20
c0016ebe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ec2:	56                   	push   esi
c0016ec3:	e8 78 ff ff ff       	call   c0016e40 <Video::getWidth()>
c0016ec8:	5a                   	pop    edx
c0016ec9:	39 c7                	cmp    edi,eax
c0016ecb:	7d 34                	jge    c0016f01 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016ecd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016ed2:	74 05                	je     c0016ed9 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016ed4:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ed6:	55                   	push   ebp
c0016ed7:	eb 0d                	jmp    c0016ee6 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016ed9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016ede:	74 12                	je     c0016ef2 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016ee0:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ee2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ee6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016eea:	57                   	push   edi
c0016eeb:	56                   	push   esi
c0016eec:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016eef:	83 c4 10             	add    esp,0x10
c0016ef2:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016ef6:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016efa:	47                   	inc    edi
c0016efb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016eff:	75 c1                	jne    c0016ec2 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016f01:	43                   	inc    ebx
c0016f02:	83 fb 20             	cmp    ebx,0x20
c0016f05:	0f 85 79 ff ff ff    	jne    c0016e84 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016f0b:	83 c4 2c             	add    esp,0x2c
c0016f0e:	5b                   	pop    ebx
c0016f0f:	5e                   	pop    esi
c0016f10:	5f                   	pop    edi
c0016f11:	5d                   	pop    ebp
c0016f12:	c3                   	ret    
c0016f13:	90                   	nop

c0016f14 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016f14:	55                   	push   ebp
c0016f15:	57                   	push   edi
c0016f16:	56                   	push   esi
c0016f17:	53                   	push   ebx
c0016f18:	83 ec 28             	sub    esp,0x28
c0016f1b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016f1f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016f23:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0016f27:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016f2b:	c1 e6 08             	shl    esi,0x8
c0016f2e:	01 c6                	add    esi,eax
c0016f30:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016f34:	c1 e0 08             	shl    eax,0x8
c0016f37:	01 d0                	add    eax,edx
c0016f39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f41:	0f af c6             	imul   eax,esi
c0016f44:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016f4b:	50                   	push   eax
c0016f4c:	e8 48 86 ff ff       	call   c000f599 <malloc>
c0016f51:	83 c4 10             	add    esp,0x10
c0016f54:	89 c7                	mov    edi,eax
c0016f56:	85 c0                	test   eax,eax
c0016f58:	75 10                	jne    c0016f6a <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0016f5a:	83 ec 0c             	sub    esp,0xc
c0016f5d:	68 15 b0 02 c0       	push   0xc002b015
c0016f62:	e8 cc 2e 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c0016f67:	83 c4 10             	add    esp,0x10
c0016f6a:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0016f6d:	ba 12 00 00 00       	mov    edx,0x12
c0016f72:	84 c0                	test   al,al
c0016f74:	74 11                	je     c0016f87 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0016f76:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0016f7a:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0016f7e:	c1 fa 03             	sar    edx,0x3
c0016f81:	0f af d1             	imul   edx,ecx
c0016f84:	83 c2 12             	add    edx,0x12
c0016f87:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016f8b:	74 04                	je     c0016f91 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0016f8d:	85 f6                	test   esi,esi
c0016f8f:	75 12                	jne    c0016fa3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0016f91:	83 ec 0c             	sub    esp,0xc
c0016f94:	68 25 b0 02 c0       	push   0xc002b025
c0016f99:	e8 29 b7 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0016f9e:	e9 b8 00 00 00       	jmp    c001705b <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0016fa3:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0016fa7:	80 f9 02             	cmp    cl,0x2
c0016faa:	0f 85 96 00 00 00    	jne    c0017046 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0016fb0:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016fb5:	75 0e                	jne    c0016fc5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016fb7:	84 c0                	test   al,al
c0016fb9:	75 0a                	jne    c0016fc5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016fbb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016fbe:	83 e8 18             	sub    eax,0x18
c0016fc1:	a8 f7                	test   al,0xf7
c0016fc3:	74 0a                	je     c0016fcf <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0016fc5:	83 ec 0c             	sub    esp,0xc
c0016fc8:	68 3a b0 02 c0       	push   0xc002b03a
c0016fcd:	eb 7f                	jmp    c001704e <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0016fcf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016fd7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016fdf:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0016fe3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016feb:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016fef:	75 0c                	jne    c0016ffd <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016ff1:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0016ff6:	c1 e0 18             	shl    eax,0x18
c0016ff9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ffd:	45                   	inc    ebp
c0016ffe:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0017003:	c1 e1 10             	shl    ecx,0x10
c0017006:	89 c8                	mov    eax,ecx
c0017008:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c001700d:	c1 e1 08             	shl    ecx,0x8
c0017010:	09 c1                	or     ecx,eax
c0017012:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0017016:	09 c1                	or     ecx,eax
c0017018:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c001701c:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0017020:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017024:	c1 f8 03             	sar    eax,0x3
c0017027:	01 c2                	add    edx,eax
c0017029:	89 e8                	mov    eax,ebp
c001702b:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001702f:	39 c6                	cmp    esi,eax
c0017031:	7f b0                	jg     c0016fe3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0017033:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017037:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001703b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c001703e:	7e 22                	jle    c0017062 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0017040:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0017044:	eb 99                	jmp    c0016fdf <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017046:	50                   	push   eax
c0017047:	50                   	push   eax
c0017048:	51                   	push   ecx
c0017049:	68 48 b0 02 c0       	push   0xc002b048
c001704e:	e8 74 b6 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0017053:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017056:	e8 4e 85 ff ff       	call   c000f5a9 <free>
c001705b:	83 c4 10             	add    esp,0x10
c001705e:	31 ff                	xor    edi,edi
c0017060:	eb 0f                	jmp    c0017071 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0017062:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017066:	89 30                	mov    DWORD PTR [eax],esi
c0017068:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001706c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001706f:	89 30                	mov    DWORD PTR [eax],esi
c0017071:	83 c4 1c             	add    esp,0x1c
c0017074:	89 f8                	mov    eax,edi
c0017076:	5b                   	pop    ebx
c0017077:	5e                   	pop    esi
c0017078:	5f                   	pop    edi
c0017079:	5d                   	pop    ebp
c001707a:	c3                   	ret    
c001707b:	90                   	nop

c001707c <Video::putTGA(int, int, unsigned char*, int)>:
c001707c:	55                   	push   ebp
c001707d:	57                   	push   edi
c001707e:	56                   	push   esi
c001707f:	53                   	push   ebx
c0017080:	83 ec 28             	sub    esp,0x28
c0017083:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017087:	8d 44 24 18          	lea    eax,[esp+0x18]
c001708b:	50                   	push   eax
c001708c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017090:	50                   	push   eax
c0017091:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017095:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017099:	56                   	push   esi
c001709a:	e8 75 fe ff ff       	call   c0016f14 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001709f:	83 c4 20             	add    esp,0x20
c00170a2:	85 c0                	test   eax,eax
c00170a4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00170a8:	74 35                	je     c00170df <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00170aa:	89 c7                	mov    edi,eax
c00170ac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00170b0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00170b4:	39 d8                	cmp    eax,ebx
c00170b6:	7e 27                	jle    c00170df <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00170b8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00170bc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170c0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00170c4:	39 e8                	cmp    eax,ebp
c00170c6:	7e 14                	jle    c00170dc <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00170c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00170ca:	83 c7 04             	add    edi,0x4
c00170cd:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00170d0:	53                   	push   ebx
c00170d1:	55                   	push   ebp
c00170d2:	45                   	inc    ebp
c00170d3:	56                   	push   esi
c00170d4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00170d7:	83 c4 10             	add    esp,0x10
c00170da:	eb e0                	jmp    c00170bc <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00170dc:	43                   	inc    ebx
c00170dd:	eb cd                	jmp    c00170ac <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00170df:	83 c4 1c             	add    esp,0x1c
c00170e2:	5b                   	pop    ebx
c00170e3:	5e                   	pop    esi
c00170e4:	5f                   	pop    edi
c00170e5:	5d                   	pop    ebp
c00170e6:	c3                   	ret    
c00170e7:	90                   	nop

c00170e8 <ACPI::close(int, int, void*)>:
c00170e8:	83 ec 1c             	sub    esp,0x1c
c00170eb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00170f3:	74 0a                	je     c00170ff <ACPI::close(int, int, void*)+0x17>
c00170f5:	b8 00 00 00 00       	mov    eax,0x0
c00170fa:	e9 8a 00 00 00       	jmp    c0017189 <ACPI::close(int, int, void*)+0xa1>
c00170ff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017104:	75 27                	jne    c001712d <ACPI::close(int, int, void*)+0x45>
c0017106:	a1 a8 ff 02 c0       	mov    eax,ds:0xc002ffa8
c001710b:	85 c0                	test   eax,eax
c001710d:	74 07                	je     c0017116 <ACPI::close(int, int, void*)+0x2e>
c001710f:	a1 a8 ff 02 c0       	mov    eax,ds:0xc002ffa8
c0017114:	ff d0                	call   eax
c0017116:	83 ec 0c             	sub    esp,0xc
c0017119:	68 a4 b0 02 c0       	push   0xc002b0a4
c001711e:	e8 10 2d 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c0017123:	83 c4 10             	add    esp,0x10
c0017126:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001712b:	eb 5c                	jmp    c0017189 <ACPI::close(int, int, void*)+0xa1>
c001712d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017132:	75 50                	jne    c0017184 <ACPI::close(int, int, void*)+0x9c>
c0017134:	a1 a4 ff 02 c0       	mov    eax,ds:0xc002ffa4
c0017139:	85 c0                	test   eax,eax
c001713b:	74 07                	je     c0017144 <ACPI::close(int, int, void*)+0x5c>
c001713d:	a1 a4 ff 02 c0       	mov    eax,ds:0xc002ffa4
c0017142:	ff d0                	call   eax
c0017144:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017149:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001714e:	83 e0 02             	and    eax,0x2
c0017151:	74 1c                	je     c001716f <ACPI::close(int, int, void*)+0x87>
c0017153:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001715a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001715e:	89 c2                	mov    edx,eax
c0017160:	ec                   	in     al,dx
c0017161:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017165:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017169:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001716d:	eb da                	jmp    c0017149 <ACPI::close(int, int, void*)+0x61>
c001716f:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017176:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001717b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001717f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017183:	ee                   	out    dx,al
c0017184:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017189:	83 c4 1c             	add    esp,0x1c
c001718c:	c3                   	ret    

c001718d <findRSDP()>:
c001718d:	83 ec 1c             	sub    esp,0x1c
c0017190:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0017195:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001719b:	83 e0 04             	and    eax,0x4
c001719e:	84 c0                	test   al,al
c00171a0:	75 07                	jne    c00171a9 <findRSDP()+0x1c>
c00171a2:	b8 00 00 00 00       	mov    eax,0x0
c00171a7:	eb 6a                	jmp    c0017213 <findRSDP()+0x86>
c00171a9:	a1 54 d9 02 c0       	mov    eax,ds:0xc002d954
c00171ae:	3d ff 07 00 00       	cmp    eax,0x7ff
c00171b3:	7f 1b                	jg     c00171d0 <findRSDP()+0x43>
c00171b5:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c00171ba:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00171c0:	83 e2 fb             	and    edx,0xfffffffb
c00171c3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00171c9:	b8 00 00 00 00       	mov    eax,0x0
c00171ce:	eb 43                	jmp    c0017213 <findRSDP()+0x86>
c00171d0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00171d8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00171e0:	77 2c                	ja     c001720e <findRSDP()+0x81>
c00171e2:	83 ec 04             	sub    esp,0x4
c00171e5:	6a 08                	push   0x8
c00171e7:	68 3f b1 02 c0       	push   0xc002b13f
c00171ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171f0:	e8 57 94 fe ff       	call   c000064c <memcmp>
c00171f5:	83 c4 10             	add    esp,0x10
c00171f8:	85 c0                	test   eax,eax
c00171fa:	0f 94 c0             	sete   al
c00171fd:	84 c0                	test   al,al
c00171ff:	74 06                	je     c0017207 <findRSDP()+0x7a>
c0017201:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017205:	eb 0c                	jmp    c0017213 <findRSDP()+0x86>
c0017207:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001720c:	eb ca                	jmp    c00171d8 <findRSDP()+0x4b>
c001720e:	b8 00 00 00 00       	mov    eax,0x0
c0017213:	83 c4 1c             	add    esp,0x1c
c0017216:	c3                   	ret    

c0017217 <loadACPITables(unsigned char*)>:
c0017217:	57                   	push   edi
c0017218:	56                   	push   esi
c0017219:	53                   	push   ebx
c001721a:	83 ec 60             	sub    esp,0x60
c001721d:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0017222:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017228:	83 e0 04             	and    eax,0x4
c001722b:	84 c0                	test   al,al
c001722d:	0f 84 33 02 00 00    	je     c0017466 <loadACPITables(unsigned char*)+0x24f>
c0017233:	a0 c0 01 03 c0       	mov    al,ds:0xc00301c0
c0017238:	84 c0                	test   al,al
c001723a:	74 75                	je     c00172b1 <loadACPITables(unsigned char*)+0x9a>
c001723c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017240:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017244:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017248:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001724b:	83 e8 24             	sub    eax,0x24
c001724e:	c1 e8 03             	shr    eax,0x3
c0017251:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017255:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001725d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017261:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017265:	0f 8d b2 00 00 00    	jge    c001731d <loadACPITables(unsigned char*)+0x106>
c001726b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001726f:	83 c0 24             	add    eax,0x24
c0017272:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017276:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001727a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001727e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017282:	c1 e0 03             	shl    eax,0x3
c0017285:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017289:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001728d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017290:	8b 00                	mov    eax,DWORD PTR [eax]
c0017292:	89 c1                	mov    ecx,eax
c0017294:	a1 ac ff 02 c0       	mov    eax,ds:0xc002ffac
c0017299:	8d 50 01             	lea    edx,[eax+0x1]
c001729c:	89 15 ac ff 02 c0    	mov    DWORD PTR ds:0xc002ffac,edx
c00172a2:	89 ca                	mov    edx,ecx
c00172a4:	89 14 c5 c4 ff 02 c0 	mov    DWORD PTR [eax*8-0x3ffd003c],edx
c00172ab:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00172af:	eb ac                	jmp    c001725d <loadACPITables(unsigned char*)+0x46>
c00172b1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00172b5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00172b9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00172c0:	83 e8 24             	sub    eax,0x24
c00172c3:	c1 e8 02             	shr    eax,0x2
c00172c6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00172ca:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00172d2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00172d6:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00172da:	7d 41                	jge    c001731d <loadACPITables(unsigned char*)+0x106>
c00172dc:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00172e0:	83 c0 24             	add    eax,0x24
c00172e3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00172e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00172eb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00172ef:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00172f3:	c1 e0 02             	shl    eax,0x2
c00172f6:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00172fa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00172fe:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017300:	a1 ac ff 02 c0       	mov    eax,ds:0xc002ffac
c0017305:	8d 50 01             	lea    edx,[eax+0x1]
c0017308:	89 15 ac ff 02 c0    	mov    DWORD PTR ds:0xc002ffac,edx
c001730e:	89 ca                	mov    edx,ecx
c0017310:	89 14 c5 c4 ff 02 c0 	mov    DWORD PTR [eax*8-0x3ffd003c],edx
c0017317:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c001731b:	eb b5                	jmp    c00172d2 <loadACPITables(unsigned char*)+0xbb>
c001731d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017325:	a1 ac ff 02 c0       	mov    eax,ds:0xc002ffac
c001732a:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001732e:	0f 8d 33 01 00 00    	jge    c0017467 <loadACPITables(unsigned char*)+0x250>
c0017334:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017338:	8b 04 c5 c4 ff 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd003c]
c001733f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017343:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017347:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001734b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001734f:	25 ff 0f 00 00       	and    eax,0xfff
c0017354:	89 c6                	mov    esi,eax
c0017356:	8b 1d 70 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da70
c001735c:	83 ec 0c             	sub    esp,0xc
c001735f:	6a 01                	push   0x1
c0017361:	e8 b5 9e ff ff       	call   c001121b <Virt::allocateKernelVirtualPages(int)>
c0017366:	83 c4 10             	add    esp,0x10
c0017369:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001736d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017373:	83 ec 0c             	sub    esp,0xc
c0017376:	6a 01                	push   0x1
c0017378:	6a 01                	push   0x1
c001737a:	50                   	push   eax
c001737b:	52                   	push   edx
c001737c:	53                   	push   ebx
c001737d:	e8 4c a9 ff ff       	call   c0011cce <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017382:	83 c4 20             	add    esp,0x20
c0017385:	09 f0                	or     eax,esi
c0017387:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001738b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001738f:	c1 e0 03             	shl    eax,0x3
c0017392:	05 c0 ff 02 c0       	add    eax,0xc002ffc0
c0017397:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001739b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001739f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00173a3:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00173ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00173b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00173bb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00173bf:	89 c6                	mov    esi,eax
c00173c1:	89 d7                	mov    edi,edx
c00173c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173c5:	89 c8                	mov    eax,ecx
c00173c7:	89 fa                	mov    edx,edi
c00173c9:	89 f3                	mov    ebx,esi
c00173cb:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00173cf:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00173d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00173d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00173de:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00173e2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173e6:	05 00 10 00 00       	add    eax,0x1000
c00173eb:	c1 e8 0c             	shr    eax,0xc
c00173ee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00173f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00173fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173fe:	25 ff 0f 00 00       	and    eax,0xfff
c0017403:	89 c6                	mov    esi,eax
c0017405:	8b 1d 70 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da70
c001740b:	83 ec 0c             	sub    esp,0xc
c001740e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017412:	e8 04 9e ff ff       	call   c001121b <Virt::allocateKernelVirtualPages(int)>
c0017417:	83 c4 10             	add    esp,0x10
c001741a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001741e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017424:	83 ec 0c             	sub    esp,0xc
c0017427:	6a 01                	push   0x1
c0017429:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001742d:	50                   	push   eax
c001742e:	52                   	push   edx
c001742f:	53                   	push   ebx
c0017430:	e8 99 a8 ff ff       	call   c0011cce <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017435:	83 c4 20             	add    esp,0x20
c0017438:	09 f0                	or     eax,esi
c001743a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001743e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017442:	83 ec 0c             	sub    esp,0xc
c0017445:	50                   	push   eax
c0017446:	e8 16 a2 ff ff       	call   c0011661 <Virt::freeKernelVirtualPages(unsigned long)>
c001744b:	83 c4 10             	add    esp,0x10
c001744e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017452:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017456:	89 14 c5 c4 ff 02 c0 	mov    DWORD PTR [eax*8-0x3ffd003c],edx
c001745d:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017461:	e9 bf fe ff ff       	jmp    c0017325 <loadACPITables(unsigned char*)+0x10e>
c0017466:	90                   	nop
c0017467:	83 c4 60             	add    esp,0x60
c001746a:	5b                   	pop    ebx
c001746b:	5e                   	pop    esi
c001746c:	5f                   	pop    edi
c001746d:	c3                   	ret    

c001746e <findRSDT(unsigned char*)>:
c001746e:	57                   	push   edi
c001746f:	56                   	push   esi
c0017470:	53                   	push   ebx
c0017471:	83 ec 50             	sub    esp,0x50
c0017474:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0017479:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001747f:	83 e0 04             	and    eax,0x4
c0017482:	84 c0                	test   al,al
c0017484:	75 0a                	jne    c0017490 <findRSDT(unsigned char*)+0x22>
c0017486:	b8 00 00 00 00       	mov    eax,0x0
c001748b:	e9 21 01 00 00       	jmp    c00175b1 <findRSDT(unsigned char*)+0x143>
c0017490:	89 e0                	mov    eax,esp
c0017492:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017496:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001749a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001749e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00174a6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174aa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00174ae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00174b2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00174b6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00174ba:	89 c6                	mov    esi,eax
c00174bc:	89 d7                	mov    edi,edx
c00174be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00174c0:	89 c8                	mov    eax,ecx
c00174c2:	89 fa                	mov    edx,edi
c00174c4:	89 f3                	mov    ebx,esi
c00174c6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00174ca:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00174ce:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00174d2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00174d6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00174da:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00174e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00174e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00174ea:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00174ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174f2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00174f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00174fa:	25 ff 0f 00 00       	and    eax,0xfff
c00174ff:	89 c6                	mov    esi,eax
c0017501:	8b 1d 70 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da70
c0017507:	83 ec 0c             	sub    esp,0xc
c001750a:	6a 02                	push   0x2
c001750c:	e8 0a 9d ff ff       	call   c001121b <Virt::allocateKernelVirtualPages(int)>
c0017511:	83 c4 10             	add    esp,0x10
c0017514:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017518:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001751e:	83 ec 0c             	sub    esp,0xc
c0017521:	6a 01                	push   0x1
c0017523:	6a 02                	push   0x2
c0017525:	50                   	push   eax
c0017526:	52                   	push   edx
c0017527:	53                   	push   ebx
c0017528:	e8 a1 a7 ff ff       	call   c0011cce <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001752d:	83 c4 20             	add    esp,0x20
c0017530:	09 f0                	or     eax,esi
c0017532:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017536:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001753a:	25 ff 0f 00 00       	and    eax,0xfff
c001753f:	89 c6                	mov    esi,eax
c0017541:	8b 1d 70 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da70
c0017547:	83 ec 0c             	sub    esp,0xc
c001754a:	6a 02                	push   0x2
c001754c:	e8 ca 9c ff ff       	call   c001121b <Virt::allocateKernelVirtualPages(int)>
c0017551:	83 c4 10             	add    esp,0x10
c0017554:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017558:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001755e:	83 ec 0c             	sub    esp,0xc
c0017561:	6a 01                	push   0x1
c0017563:	6a 02                	push   0x2
c0017565:	50                   	push   eax
c0017566:	52                   	push   edx
c0017567:	53                   	push   ebx
c0017568:	e8 61 a7 ff ff       	call   c0011cce <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001756d:	83 c4 20             	add    esp,0x20
c0017570:	09 f0                	or     eax,esi
c0017572:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017576:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c001757b:	75 11                	jne    c001758e <findRSDT(unsigned char*)+0x120>
c001757d:	c6 05 c0 01 03 c0 00 	mov    BYTE PTR ds:0xc00301c0,0x0
c0017584:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017588:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001758c:	eb 1f                	jmp    c00175ad <findRSDT(unsigned char*)+0x13f>
c001758e:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017593:	75 11                	jne    c00175a6 <findRSDT(unsigned char*)+0x138>
c0017595:	c6 05 c0 01 03 c0 01 	mov    BYTE PTR ds:0xc00301c0,0x1
c001759c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00175a0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00175a4:	eb 07                	jmp    c00175ad <findRSDT(unsigned char*)+0x13f>
c00175a6:	b8 00 00 00 00       	mov    eax,0x0
c00175ab:	eb 04                	jmp    c00175b1 <findRSDT(unsigned char*)+0x143>
c00175ad:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175b1:	83 c4 50             	add    esp,0x50
c00175b4:	5b                   	pop    ebx
c00175b5:	5e                   	pop    esi
c00175b6:	5f                   	pop    edi
c00175b7:	c3                   	ret    

c00175b8 <findDataTable(unsigned char*, char*)>:
c00175b8:	83 ec 1c             	sub    esp,0x1c
c00175bb:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c00175c0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00175c6:	83 e0 04             	and    eax,0x4
c00175c9:	84 c0                	test   al,al
c00175cb:	75 07                	jne    c00175d4 <findDataTable(unsigned char*, char*)+0x1c>
c00175cd:	b8 00 00 00 00       	mov    eax,0x0
c00175d2:	eb 52                	jmp    c0017626 <findDataTable(unsigned char*, char*)+0x6e>
c00175d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00175dc:	a1 ac ff 02 c0       	mov    eax,ds:0xc002ffac
c00175e1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00175e5:	7d 3a                	jge    c0017621 <findDataTable(unsigned char*, char*)+0x69>
c00175e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175eb:	c1 e0 03             	shl    eax,0x3
c00175ee:	05 c0 ff 02 c0       	add    eax,0xc002ffc0
c00175f3:	83 ec 04             	sub    esp,0x4
c00175f6:	6a 04                	push   0x4
c00175f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175fc:	50                   	push   eax
c00175fd:	e8 4a 90 fe ff       	call   c000064c <memcmp>
c0017602:	83 c4 10             	add    esp,0x10
c0017605:	85 c0                	test   eax,eax
c0017607:	0f 94 c0             	sete   al
c001760a:	84 c0                	test   al,al
c001760c:	74 0d                	je     c001761b <findDataTable(unsigned char*, char*)+0x63>
c001760e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017612:	8b 04 c5 c4 ff 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd003c]
c0017619:	eb 0b                	jmp    c0017626 <findDataTable(unsigned char*, char*)+0x6e>
c001761b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001761f:	eb bb                	jmp    c00175dc <findDataTable(unsigned char*, char*)+0x24>
c0017621:	b8 00 00 00 00       	mov    eax,0x0
c0017626:	83 c4 1c             	add    esp,0x1c
c0017629:	c3                   	ret    

c001762a <scanMADT()>:
c001762a:	53                   	push   ebx
c001762b:	83 ec 38             	sub    esp,0x38
c001762e:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0017633:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017639:	83 e0 04             	and    eax,0x4
c001763c:	84 c0                	test   al,al
c001763e:	0f 84 4a 04 00 00    	je     c0017a8e <scanMADT()+0x464>
c0017644:	e8 44 fb ff ff       	call   c001718d <findRSDP()>
c0017649:	a3 cc 01 03 c0       	mov    ds:0xc00301cc,eax
c001764e:	a1 cc 01 03 c0       	mov    eax,ds:0xc00301cc
c0017653:	85 c0                	test   eax,eax
c0017655:	75 19                	jne    c0017670 <scanMADT()+0x46>
c0017657:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c001765c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017662:	83 e2 fb             	and    edx,0xfffffffb
c0017665:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001766b:	e9 22 04 00 00       	jmp    c0017a92 <scanMADT()+0x468>
c0017670:	a1 cc 01 03 c0       	mov    eax,ds:0xc00301cc
c0017675:	83 ec 0c             	sub    esp,0xc
c0017678:	50                   	push   eax
c0017679:	e8 f0 fd ff ff       	call   c001746e <findRSDT(unsigned char*)>
c001767e:	83 c4 10             	add    esp,0x10
c0017681:	a3 c8 01 03 c0       	mov    ds:0xc00301c8,eax
c0017686:	a1 c8 01 03 c0       	mov    eax,ds:0xc00301c8
c001768b:	85 c0                	test   eax,eax
c001768d:	75 19                	jne    c00176a8 <scanMADT()+0x7e>
c001768f:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0017694:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001769a:	83 e2 fb             	and    edx,0xfffffffb
c001769d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00176a3:	e9 ea 03 00 00       	jmp    c0017a92 <scanMADT()+0x468>
c00176a8:	a1 c8 01 03 c0       	mov    eax,ds:0xc00301c8
c00176ad:	83 ec 0c             	sub    esp,0xc
c00176b0:	50                   	push   eax
c00176b1:	e8 61 fb ff ff       	call   c0017217 <loadACPITables(unsigned char*)>
c00176b6:	83 c4 10             	add    esp,0x10
c00176b9:	a1 c8 01 03 c0       	mov    eax,ds:0xc00301c8
c00176be:	83 ec 08             	sub    esp,0x8
c00176c1:	68 48 b1 02 c0       	push   0xc002b148
c00176c6:	50                   	push   eax
c00176c7:	e8 ec fe ff ff       	call   c00175b8 <findDataTable(unsigned char*, char*)>
c00176cc:	83 c4 10             	add    esp,0x10
c00176cf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00176d3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00176d8:	75 19                	jne    c00176f3 <scanMADT()+0xc9>
c00176da:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c00176df:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00176e5:	83 e2 fe             	and    edx,0xfffffffe
c00176e8:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00176ee:	e9 9f 03 00 00       	jmp    c0017a92 <scanMADT()+0x468>
c00176f3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00176fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017702:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017706:	0f 87 86 03 00 00    	ja     c0017a92 <scanMADT()+0x468>
c001770c:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017714:	0f 87 78 03 00 00    	ja     c0017a92 <scanMADT()+0x468>
c001771a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001771e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017722:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017726:	8d 50 01             	lea    edx,[eax+0x1]
c0017729:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001772d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017731:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017735:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017739:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001773d:	8d 50 01             	lea    edx,[eax+0x1]
c0017740:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017744:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017748:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001774c:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017750:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017755:	0f 86 36 03 00 00    	jbe    c0017a91 <scanMADT()+0x467>
c001775b:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017760:	75 57                	jne    c00177b9 <scanMADT()+0x18f>
c0017762:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017766:	8d 50 01             	lea    edx,[eax+0x1]
c0017769:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001776d:	8a 15 c0 03 03 c0    	mov    dl,BYTE PTR ds:0xc00303c0
c0017773:	0f b6 d2             	movzx  edx,dl
c0017776:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001777a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001777e:	88 82 00 04 03 c0    	mov    BYTE PTR [edx-0x3ffcfc00],al
c0017784:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017788:	8d 50 01             	lea    edx,[eax+0x1]
c001778b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001778f:	8a 15 c0 03 03 c0    	mov    dl,BYTE PTR ds:0xc00303c0
c0017795:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017798:	88 0d c0 03 03 c0    	mov    BYTE PTR ds:0xc00303c0,cl
c001779e:	0f b6 d2             	movzx  edx,dl
c00177a1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00177a5:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00177a9:	88 82 e0 03 03 c0    	mov    BYTE PTR [edx-0x3ffcfc20],al
c00177af:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00177b4:	e9 c1 02 00 00       	jmp    c0017a7a <scanMADT()+0x450>
c00177b9:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00177be:	0f 85 14 01 00 00    	jne    c00178d8 <scanMADT()+0x2ae>
c00177c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177c8:	8d 50 01             	lea    edx,[eax+0x1]
c00177cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177cf:	8a 15 80 02 03 c0    	mov    dl,BYTE PTR ds:0xc0030280
c00177d5:	0f b6 d2             	movzx  edx,dl
c00177d8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00177dc:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00177e0:	88 82 a0 02 03 c0    	mov    BYTE PTR [edx-0x3ffcfd60],al
c00177e6:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00177ea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177f2:	01 d0                	add    eax,edx
c00177f4:	83 c0 2c             	add    eax,0x2c
c00177f7:	8a 00                	mov    al,BYTE PTR [eax]
c00177f9:	0f b6 d0             	movzx  edx,al
c00177fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017800:	8d 48 01             	lea    ecx,[eax+0x1]
c0017803:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017807:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001780b:	0f b6 c0             	movzx  eax,al
c001780e:	c1 e0 08             	shl    eax,0x8
c0017811:	89 d1                	mov    ecx,edx
c0017813:	09 c1                	or     ecx,eax
c0017815:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017819:	8d 50 02             	lea    edx,[eax+0x2]
c001781c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017820:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017824:	0f b6 c0             	movzx  eax,al
c0017827:	c1 e0 10             	shl    eax,0x10
c001782a:	09 c1                	or     ecx,eax
c001782c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017830:	8d 50 03             	lea    edx,[eax+0x3]
c0017833:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017837:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001783b:	0f b6 c0             	movzx  eax,al
c001783e:	c1 e0 18             	shl    eax,0x18
c0017841:	09 c1                	or     ecx,eax
c0017843:	89 ca                	mov    edx,ecx
c0017845:	a0 80 02 03 c0       	mov    al,ds:0xc0030280
c001784a:	0f b6 c0             	movzx  eax,al
c001784d:	89 14 85 c0 02 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfd40],edx
c0017854:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017859:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001785d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017861:	01 d0                	add    eax,edx
c0017863:	83 c0 2c             	add    eax,0x2c
c0017866:	8a 00                	mov    al,BYTE PTR [eax]
c0017868:	0f b6 d0             	movzx  edx,al
c001786b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001786f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017872:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017876:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001787a:	0f b6 c0             	movzx  eax,al
c001787d:	c1 e0 08             	shl    eax,0x8
c0017880:	89 d1                	mov    ecx,edx
c0017882:	09 c1                	or     ecx,eax
c0017884:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017888:	8d 50 02             	lea    edx,[eax+0x2]
c001788b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001788f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017893:	0f b6 c0             	movzx  eax,al
c0017896:	c1 e0 10             	shl    eax,0x10
c0017899:	09 c1                	or     ecx,eax
c001789b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001789f:	8d 50 03             	lea    edx,[eax+0x3]
c00178a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178a6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00178aa:	0f b6 c0             	movzx  eax,al
c00178ad:	c1 e0 18             	shl    eax,0x18
c00178b0:	09 c1                	or     ecx,eax
c00178b2:	89 ca                	mov    edx,ecx
c00178b4:	a0 80 02 03 c0       	mov    al,ds:0xc0030280
c00178b9:	0f b6 c0             	movzx  eax,al
c00178bc:	89 14 85 40 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfcc0],edx
c00178c3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00178c8:	a0 80 02 03 c0       	mov    al,ds:0xc0030280
c00178cd:	40                   	inc    eax
c00178ce:	a2 80 02 03 c0       	mov    ds:0xc0030280,al
c00178d3:	e9 a2 01 00 00       	jmp    c0017a7a <scanMADT()+0x450>
c00178d8:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00178dd:	0f 85 e9 00 00 00    	jne    c00179cc <scanMADT()+0x3a2>
c00178e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178e7:	8d 50 01             	lea    edx,[eax+0x1]
c00178ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178f2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00178f6:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00178fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178fe:	8d 50 01             	lea    edx,[eax+0x1]
c0017901:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017905:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017909:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001790d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017911:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017915:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017919:	01 d0                	add    eax,edx
c001791b:	83 c0 2c             	add    eax,0x2c
c001791e:	8a 00                	mov    al,BYTE PTR [eax]
c0017920:	0f b6 d0             	movzx  edx,al
c0017923:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017927:	8d 48 01             	lea    ecx,[eax+0x1]
c001792a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001792e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017932:	0f b6 c0             	movzx  eax,al
c0017935:	c1 e0 08             	shl    eax,0x8
c0017938:	89 d1                	mov    ecx,edx
c001793a:	09 c1                	or     ecx,eax
c001793c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017940:	8d 50 02             	lea    edx,[eax+0x2]
c0017943:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017947:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001794b:	0f b6 c0             	movzx  eax,al
c001794e:	c1 e0 10             	shl    eax,0x10
c0017951:	09 c1                	or     ecx,eax
c0017953:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017957:	8d 50 03             	lea    edx,[eax+0x3]
c001795a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001795e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017962:	0f b6 c0             	movzx  eax,al
c0017965:	c1 e0 18             	shl    eax,0x18
c0017968:	09 c8                	or     eax,ecx
c001796a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001796e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017973:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017977:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001797b:	01 d0                	add    eax,edx
c001797d:	83 c0 2c             	add    eax,0x2c
c0017980:	8a 00                	mov    al,BYTE PTR [eax]
c0017982:	0f b6 c0             	movzx  eax,al
c0017985:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017989:	8d 4a 01             	lea    ecx,[edx+0x1]
c001798c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017990:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017994:	0f b6 d2             	movzx  edx,dl
c0017997:	c1 e2 08             	shl    edx,0x8
c001799a:	09 d0                	or     eax,edx
c001799c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00179a1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00179a6:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00179ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00179af:	88 90 60 cb 02 c0    	mov    BYTE PTR [eax-0x3ffd34a0],dl
c00179b5:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00179ba:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00179bf:	66 89 84 12 60 02 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcfda0],ax
c00179c7:	e9 ae 00 00 00       	jmp    c0017a7a <scanMADT()+0x450>
c00179cc:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00179d1:	0f 85 97 00 00 00    	jne    c0017a6e <scanMADT()+0x444>
c00179d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179db:	8d 50 01             	lea    edx,[eax+0x1]
c00179de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179e2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179e6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179ea:	0f b6 c0             	movzx  eax,al
c00179ed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00179f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179f9:	01 d0                	add    eax,edx
c00179fb:	83 c0 2c             	add    eax,0x2c
c00179fe:	8a 00                	mov    al,BYTE PTR [eax]
c0017a00:	0f b6 d0             	movzx  edx,al
c0017a03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a07:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a0e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017a12:	0f b6 c0             	movzx  eax,al
c0017a15:	c1 e0 08             	shl    eax,0x8
c0017a18:	09 d0                	or     eax,edx
c0017a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a1e:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017a23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a27:	8d 50 01             	lea    edx,[eax+0x1]
c0017a2a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a2e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a32:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a36:	0f b6 c0             	movzx  eax,al
c0017a39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a41:	c1 e0 08             	shl    eax,0x8
c0017a44:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017a48:	89 c1                	mov    ecx,eax
c0017a4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a4e:	c1 e0 18             	shl    eax,0x18
c0017a51:	89 c3                	mov    ebx,eax
c0017a53:	a1 d0 01 03 c0       	mov    eax,ds:0xc00301d0
c0017a58:	8d 50 01             	lea    edx,[eax+0x1]
c0017a5b:	89 15 d0 01 03 c0    	mov    DWORD PTR ds:0xc00301d0,edx
c0017a61:	09 d9                	or     ecx,ebx
c0017a63:	89 ca                	mov    edx,ecx
c0017a65:	89 14 85 e0 01 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfe20],edx
c0017a6c:	eb 0c                	jmp    c0017a7a <scanMADT()+0x450>
c0017a6e:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017a73:	75 05                	jne    c0017a7a <scanMADT()+0x450>
c0017a75:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017a7a:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017a7f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a83:	01 d0                	add    eax,edx
c0017a85:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a89:	e9 6d fc ff ff       	jmp    c00176fb <scanMADT()+0xd1>
c0017a8e:	90                   	nop
c0017a8f:	eb 01                	jmp    c0017a92 <scanMADT()+0x468>
c0017a91:	90                   	nop
c0017a92:	83 c4 38             	add    esp,0x38
c0017a95:	5b                   	pop    ebx
c0017a96:	c3                   	ret    
c0017a97:	90                   	nop

c0017a98 <ACPI::ACPI()>:
c0017a98:	83 ec 0c             	sub    esp,0xc
c0017a9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a9f:	83 ec 08             	sub    esp,0x8
c0017aa2:	68 4d b1 02 c0       	push   0xc002b14d
c0017aa7:	50                   	push   eax
c0017aa8:	e8 57 c2 ff ff       	call   c0013d04 <Device::Device(char const*)>
c0017aad:	83 c4 10             	add    esp,0x10
c0017ab0:	ba a8 b2 02 c0       	mov    edx,0xc002b2a8
c0017ab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ab9:	89 10                	mov    DWORD PTR [eax],edx
c0017abb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017abf:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aca:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017ad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ad8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017ae2:	e8 43 fb ff ff       	call   c001762a <scanMADT()>
c0017ae7:	90                   	nop
c0017ae8:	83 c4 0c             	add    esp,0xc
c0017aeb:	c3                   	ret    

c0017aec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017aec:	83 ec 2c             	sub    esp,0x2c
c0017aef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017af3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017af7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017afb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017aff:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017b04:	88 d0                	mov    al,dl
c0017b06:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017b0a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017b0f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017b17:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b1b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b21:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017b25:	0f 8d 97 00 00 00    	jge    c0017bc2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017b2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b2f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b33:	83 c2 2a             	add    edx,0x2a
c0017b36:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017b3a:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017b3f:	75 78                	jne    c0017bb9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017b41:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b45:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b49:	83 c2 2a             	add    edx,0x2a
c0017b4c:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017b50:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017b54:	75 63                	jne    c0017bb9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017b56:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017b5b:	74 3a                	je     c0017b97 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017b5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b61:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b65:	83 c2 2a             	add    edx,0x2a
c0017b68:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017b6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b73:	39 c2                	cmp    edx,eax
c0017b75:	74 10                	je     c0017b87 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017b77:	83 ec 0c             	sub    esp,0xc
c0017b7a:	68 c8 b0 02 c0       	push   0xc002b0c8
c0017b7f:	e8 af 22 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c0017b84:	83 c4 10             	add    esp,0x10
c0017b87:	83 ec 0c             	sub    esp,0xc
c0017b8a:	68 52 b1 02 c0       	push   0xc002b152
c0017b8f:	e8 9f 22 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c0017b94:	83 c4 10             	add    esp,0x10
c0017b97:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017b9b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b9f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ba3:	83 c2 2a             	add    edx,0x2a
c0017ba6:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017baa:	8b 02                	mov    eax,DWORD PTR [edx]
c0017bac:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017baf:	89 01                	mov    DWORD PTR [ecx],eax
c0017bb1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017bb4:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017bb9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017bbd:	e9 55 ff ff ff       	jmp    c0017b17 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017bc2:	90                   	nop
c0017bc3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bc7:	83 c4 2c             	add    esp,0x2c
c0017bca:	c2 04 00             	ret    0x4
c0017bcd:	90                   	nop

c0017bce <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017bce:	83 ec 1c             	sub    esp,0x1c
c0017bd1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bd5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017bd9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017bdd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017be2:	88 c8                	mov    al,cl
c0017be4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017be8:	88 d0                	mov    al,dl
c0017bea:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017bee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bf2:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017bf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bfc:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017bff:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017c03:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017c07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c0b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c11:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c15:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017c18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c1c:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017c21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c25:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c2b:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017c2f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c36:	83 c2 2a             	add    edx,0x2a
c0017c39:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017c3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c41:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c4b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017c4e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017c52:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017c56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c5a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c60:	8d 50 01             	lea    edx,[eax+0x1]
c0017c63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c67:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017c6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c71:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c77:	3d 00 02 00 00       	cmp    eax,0x200
c0017c7c:	75 10                	jne    c0017c8e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017c7e:	83 ec 0c             	sub    esp,0xc
c0017c81:	68 61 b1 02 c0       	push   0xc002b161
c0017c86:	e8 a8 21 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c0017c8b:	83 c4 10             	add    esp,0x10
c0017c8e:	90                   	nop
c0017c8f:	83 c4 1c             	add    esp,0x1c
c0017c92:	c3                   	ret    
c0017c93:	90                   	nop

c0017c94 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017c94:	b8 00 00 00 00       	mov    eax,0x0
c0017c99:	c3                   	ret    

c0017c9a <ACPI::detectPCI()>:
c0017c9a:	53                   	push   ebx
c0017c9b:	83 ec 28             	sub    esp,0x28
c0017c9e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017ca3:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017ca8:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0017cad:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017cb3:	83 e0 04             	and    eax,0x4
c0017cb6:	84 c0                	test   al,al
c0017cb8:	74 2b                	je     c0017ce5 <ACPI::detectPCI()+0x4b>
c0017cba:	a1 c8 01 03 c0       	mov    eax,ds:0xc00301c8
c0017cbf:	83 ec 08             	sub    esp,0x8
c0017cc2:	68 7e b1 02 c0       	push   0xc002b17e
c0017cc7:	50                   	push   eax
c0017cc8:	e8 eb f8 ff ff       	call   c00175b8 <findDataTable(unsigned char*, char*)>
c0017ccd:	83 c4 10             	add    esp,0x10
c0017cd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017cd4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017cd9:	74 0a                	je     c0017ce5 <ACPI::detectPCI()+0x4b>
c0017cdb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017ce0:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017ce5:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017ced:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017cf1:	8a 00                	mov    al,BYTE PTR [eax]
c0017cf3:	3c 01                	cmp    al,0x1
c0017cf5:	75 0c                	jne    c0017d03 <ACPI::detectPCI()+0x69>
c0017cf7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017cfc:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017d01:	eb 26                	jmp    c0017d29 <ACPI::detectPCI()+0x8f>
c0017d03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d07:	8a 00                	mov    al,BYTE PTR [eax]
c0017d09:	3c 02                	cmp    al,0x2
c0017d0b:	75 1c                	jne    c0017d29 <ACPI::detectPCI()+0x8f>
c0017d0d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d12:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017d17:	74 10                	je     c0017d29 <ACPI::detectPCI()+0x8f>
c0017d19:	83 ec 0c             	sub    esp,0xc
c0017d1c:	68 f8 b0 02 c0       	push   0xc002b0f8
c0017d21:	e8 0d 21 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c0017d26:	83 c4 10             	add    esp,0x10
c0017d29:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017d2d:	83 f0 01             	xor    eax,0x1
c0017d30:	84 c0                	test   al,al
c0017d32:	74 3f                	je     c0017d73 <ACPI::detectPCI()+0xd9>
c0017d34:	e8 17 84 fe ff       	call   c0000150 <manualPCIProbe>
c0017d39:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d3d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017d42:	75 0c                	jne    c0017d50 <ACPI::detectPCI()+0xb6>
c0017d44:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d49:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017d4e:	eb 23                	jmp    c0017d73 <ACPI::detectPCI()+0xd9>
c0017d50:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017d55:	75 1c                	jne    c0017d73 <ACPI::detectPCI()+0xd9>
c0017d57:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d5c:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017d61:	74 10                	je     c0017d73 <ACPI::detectPCI()+0xd9>
c0017d63:	83 ec 0c             	sub    esp,0xc
c0017d66:	68 f8 b0 02 c0       	push   0xc002b0f8
c0017d6b:	e8 c3 20 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c0017d70:	83 c4 10             	add    esp,0x10
c0017d73:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017d78:	74 7e                	je     c0017df8 <ACPI::detectPCI()+0x15e>
c0017d7a:	83 ec 0c             	sub    esp,0xc
c0017d7d:	68 83 b1 02 c0       	push   0xc002b183
c0017d82:	e8 6c 78 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017d87:	83 c4 10             	add    esp,0x10
c0017d8a:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017d92:	83 ec 0c             	sub    esp,0xc
c0017d95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d99:	e8 fb 77 ff ff       	call   c000f599 <malloc>
c0017d9e:	83 c4 10             	add    esp,0x10
c0017da1:	89 c3                	mov    ebx,eax
c0017da3:	83 ec 0c             	sub    esp,0xc
c0017da6:	53                   	push   ebx
c0017da7:	e8 aa a5 00 00       	call   c0022356 <PCI::PCI()>
c0017dac:	83 c4 10             	add    esp,0x10
c0017daf:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017db3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017db7:	83 ec 08             	sub    esp,0x8
c0017dba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017dbe:	50                   	push   eax
c0017dbf:	e8 3c bd ff ff       	call   c0013b00 <Device::addChild(Device*)>
c0017dc4:	83 c4 10             	add    esp,0x10
c0017dc7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dcd:	83 c0 08             	add    eax,0x8
c0017dd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dd2:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017dd7:	74 07                	je     c0017de0 <ACPI::detectPCI()+0x146>
c0017dd9:	ba 01 00 00 00       	mov    edx,0x1
c0017dde:	eb 05                	jmp    c0017de5 <ACPI::detectPCI()+0x14b>
c0017de0:	ba 02 00 00 00       	mov    edx,0x2
c0017de5:	6a 00                	push   0x0
c0017de7:	6a 00                	push   0x0
c0017de9:	52                   	push   edx
c0017dea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017dee:	ff d0                	call   eax
c0017df0:	83 c4 10             	add    esp,0x10
c0017df3:	e9 9e 00 00 00       	jmp    c0017e96 <ACPI::detectPCI()+0x1fc>
c0017df8:	83 ec 0c             	sub    esp,0xc
c0017dfb:	68 9b b1 02 c0       	push   0xc002b19b
c0017e00:	e8 c2 a8 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0017e05:	83 c4 10             	add    esp,0x10
c0017e08:	83 ec 0c             	sub    esp,0xc
c0017e0b:	68 a6 b1 02 c0       	push   0xc002b1a6
c0017e10:	e8 de 77 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017e15:	83 c4 10             	add    esp,0x10
c0017e18:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017e1f:	83 ec 0c             	sub    esp,0xc
c0017e22:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017e26:	e8 6e 77 ff ff       	call   c000f599 <malloc>
c0017e2b:	83 c4 10             	add    esp,0x10
c0017e2e:	89 c3                	mov    ebx,eax
c0017e30:	83 ec 0c             	sub    esp,0xc
c0017e33:	53                   	push   ebx
c0017e34:	e8 87 b0 00 00       	call   c0022ec0 <IDE::IDE()>
c0017e39:	83 c4 10             	add    esp,0x10
c0017e3c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017e40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e44:	83 ec 08             	sub    esp,0x8
c0017e47:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017e4b:	50                   	push   eax
c0017e4c:	e8 af bc ff ff       	call   c0013b00 <Device::addChild(Device*)>
c0017e51:	83 c4 10             	add    esp,0x10
c0017e54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e58:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e66:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017e6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e73:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017e7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e80:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e82:	83 c0 08             	add    eax,0x8
c0017e85:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e87:	6a 00                	push   0x0
c0017e89:	6a 00                	push   0x0
c0017e8b:	6a 00                	push   0x0
c0017e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017e91:	ff d0                	call   eax
c0017e93:	83 c4 10             	add    esp,0x10
c0017e96:	90                   	nop
c0017e97:	83 c4 28             	add    esp,0x28
c0017e9a:	5b                   	pop    ebx
c0017e9b:	c3                   	ret    

c0017e9c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017e9c:	83 ec 1c             	sub    esp,0x1c
c0017e9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ea3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017ea6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017eaa:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0017eaf:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017eb4:	83 ec 08             	sub    esp,0x8
c0017eb7:	52                   	push   edx
c0017eb8:	50                   	push   eax
c0017eb9:	e8 f2 6c ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017ebe:	83 c4 10             	add    esp,0x10
c0017ec1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017ec5:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0017eca:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017ecf:	83 ec 04             	sub    esp,0x4
c0017ed2:	6a 01                	push   0x1
c0017ed4:	52                   	push   edx
c0017ed5:	50                   	push   eax
c0017ed6:	e8 07 6e ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017edb:	83 c4 10             	add    esp,0x10
c0017ede:	90                   	nop
c0017edf:	83 c4 1c             	add    esp,0x1c
c0017ee2:	c3                   	ret    
c0017ee3:	90                   	nop

c0017ee4 <ACPI::sleep()>:
c0017ee4:	83 ec 0c             	sub    esp,0xc
c0017ee7:	a1 a0 ff 02 c0       	mov    eax,ds:0xc002ffa0
c0017eec:	85 c0                	test   eax,eax
c0017eee:	74 07                	je     c0017ef7 <ACPI::sleep()+0x13>
c0017ef0:	a1 a0 ff 02 c0       	mov    eax,ds:0xc002ffa0
c0017ef5:	ff d0                	call   eax
c0017ef7:	90                   	nop
c0017ef8:	83 c4 0c             	add    esp,0xc
c0017efb:	c3                   	ret    

c0017efc <ACPI::open(int, int, void*)>:
c0017efc:	57                   	push   edi
c0017efd:	56                   	push   esi
c0017efe:	53                   	push   ebx
c0017eff:	81 ec 60 01 00 00    	sub    esp,0x160
c0017f05:	83 ec 0c             	sub    esp,0xc
c0017f08:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017f0f:	e8 86 fd ff ff       	call   c0017c9a <ACPI::detectPCI()>
c0017f14:	83 c4 10             	add    esp,0x10
c0017f17:	83 ec 0c             	sub    esp,0xc
c0017f1a:	68 20 b1 02 c0       	push   0xc002b120
c0017f1f:	e8 cf 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f24:	83 c4 10             	add    esp,0x10
c0017f27:	83 ec 0c             	sub    esp,0xc
c0017f2a:	68 bb b1 02 c0       	push   0xc002b1bb
c0017f2f:	e8 52 46 00 00       	call   c001c586 <Thr::loadKernelSymbolTable(char const*)>
c0017f34:	83 c4 10             	add    esp,0x10
c0017f37:	83 ec 0c             	sub    esp,0xc
c0017f3a:	68 d9 b1 02 c0       	push   0xc002b1d9
c0017f3f:	e8 af 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f44:	83 c4 10             	add    esp,0x10
c0017f47:	83 ec 04             	sub    esp,0x4
c0017f4a:	6a 0c                	push   0xc
c0017f4c:	68 f4 b1 02 c0       	push   0xc002b1f4
c0017f51:	68 05 b2 02 c0       	push   0xc002b205
c0017f56:	e8 94 2c 00 00       	call   c001abef <Reg::readIntWithDefault(char*, char*, int)>
c0017f5b:	83 c4 10             	add    esp,0x10
c0017f5e:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0017f65:	83 ec 0c             	sub    esp,0xc
c0017f68:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0017f6f:	e8 b1 94 ff ff       	call   c0011425 <Virt::setupPageSwapping(int)>
c0017f74:	83 c4 10             	add    esp,0x10
c0017f77:	83 ec 0c             	sub    esp,0xc
c0017f7a:	68 f5 9d 02 c0       	push   0xc0029df5
c0017f7f:	e8 6f 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f84:	83 c4 10             	add    esp,0x10
c0017f87:	8b 1d 08 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d908
c0017f8d:	83 ec 08             	sub    esp,0x8
c0017f90:	6a 01                	push   0x1
c0017f92:	68 0c b2 02 c0       	push   0xc002b20c
c0017f97:	e8 61 50 00 00       	call   c001cffd <Thr::loadDLL(char const*, bool)>
c0017f9c:	83 c4 10             	add    esp,0x10
c0017f9f:	83 ec 08             	sub    esp,0x8
c0017fa2:	53                   	push   ebx
c0017fa3:	50                   	push   eax
c0017fa4:	e8 7f 52 00 00       	call   c001d228 <Thr::executeDLL(unsigned long, void*)>
c0017fa9:	83 c4 10             	add    esp,0x10
c0017fac:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0017fb3:	83 ec 08             	sub    esp,0x8
c0017fb6:	6a 12                	push   0x12
c0017fb8:	50                   	push   eax
c0017fb9:	e8 c6 be ff ff       	call   c0013e84 <getDevicesOfType(DeviceType)>
c0017fbe:	83 c4 0c             	add    esp,0xc
c0017fc1:	83 ec 0c             	sub    esp,0xc
c0017fc4:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017fcb:	50                   	push   eax
c0017fcc:	e8 83 09 01 00       	call   c0028954 <LinkedList<Device>::isEmpty()>
c0017fd1:	83 c4 10             	add    esp,0x10
c0017fd4:	83 f0 01             	xor    eax,0x1
c0017fd7:	84 c0                	test   al,al
c0017fd9:	0f 84 43 01 00 00    	je     c0018122 <ACPI::open(int, int, void*)+0x226>
c0017fdf:	83 ec 0c             	sub    esp,0xc
c0017fe2:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017fe9:	50                   	push   eax
c0017fea:	e8 81 09 01 00       	call   c0028970 <LinkedList<Device>::getFirstElement()>
c0017fef:	83 c4 10             	add    esp,0x10
c0017ff2:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0017ff9:	83 ec 0c             	sub    esp,0xc
c0017ffc:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018003:	50                   	push   eax
c0018004:	e8 6f 09 01 00       	call   c0028978 <LinkedList<Device>::removeFirst()>
c0018009:	83 c4 10             	add    esp,0x10
c001800c:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0018013:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001801a:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0018021:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018025:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001802b:	ba 09 00 00 00       	mov    edx,0x9
c0018030:	fc                   	cld    
c0018031:	89 c7                	mov    edi,eax
c0018033:	89 de                	mov    esi,ebx
c0018035:	89 d1                	mov    ecx,edx
c0018037:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018039:	83 ec 08             	sub    esp,0x8
c001803c:	8d 44 24 38          	lea    eax,[esp+0x38]
c0018040:	50                   	push   eax
c0018041:	83 ec 24             	sub    esp,0x24
c0018044:	89 e0                	mov    eax,esp
c0018046:	89 c3                	mov    ebx,eax
c0018048:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001804c:	ba 09 00 00 00       	mov    edx,0x9
c0018051:	89 df                	mov    edi,ebx
c0018053:	89 c6                	mov    esi,eax
c0018055:	89 d1                	mov    ecx,edx
c0018057:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018059:	e8 d6 a7 00 00       	call   c0022834 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001805e:	83 c4 30             	add    esp,0x30
c0018061:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0018068:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0018070:	0f 84 4b ff ff ff    	je     c0017fc1 <ACPI::open(int, int, void*)+0xc5>
c0018076:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0018081:	83 ec 0c             	sub    esp,0xc
c0018084:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001808b:	e8 09 75 ff ff       	call   c000f599 <malloc>
c0018090:	83 c4 10             	add    esp,0x10
c0018093:	89 c3                	mov    ebx,eax
c0018095:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001809a:	83 ec 04             	sub    esp,0x4
c001809d:	50                   	push   eax
c001809e:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00180a5:	53                   	push   ebx
c00180a6:	e8 7b ab ff ff       	call   c0012c26 <File::File(char const*, Process*)>
c00180ab:	83 c4 10             	add    esp,0x10
c00180ae:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00180b5:	83 ec 0c             	sub    esp,0xc
c00180b8:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00180bf:	e8 34 ae ff ff       	call   c0012ef8 <File::exists()>
c00180c4:	83 c4 10             	add    esp,0x10
c00180c7:	84 c0                	test   al,al
c00180c9:	74 27                	je     c00180f2 <ACPI::open(int, int, void*)+0x1f6>
c00180cb:	83 ec 08             	sub    esp,0x8
c00180ce:	6a 01                	push   0x1
c00180d0:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00180d7:	e8 21 4f 00 00       	call   c001cffd <Thr::loadDLL(char const*, bool)>
c00180dc:	83 c4 10             	add    esp,0x10
c00180df:	83 ec 08             	sub    esp,0x8
c00180e2:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00180e9:	50                   	push   eax
c00180ea:	e8 39 51 00 00       	call   c001d228 <Thr::executeDLL(unsigned long, void*)>
c00180ef:	83 c4 10             	add    esp,0x10
c00180f2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00180fa:	0f 84 c1 fe ff ff    	je     c0017fc1 <ACPI::open(int, int, void*)+0xc5>
c0018100:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0018107:	8b 00                	mov    eax,DWORD PTR [eax]
c0018109:	83 c0 08             	add    eax,0x8
c001810c:	8b 00                	mov    eax,DWORD PTR [eax]
c001810e:	83 ec 0c             	sub    esp,0xc
c0018111:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018118:	ff d0                	call   eax
c001811a:	83 c4 10             	add    esp,0x10
c001811d:	e9 9f fe ff ff       	jmp    c0017fc1 <ACPI::open(int, int, void*)+0xc5>
c0018122:	83 ec 0c             	sub    esp,0xc
c0018125:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001812c:	50                   	push   eax
c001812d:	e8 20 08 01 00       	call   c0028952 <LinkedList<Device>::~LinkedList()>
c0018132:	83 c4 10             	add    esp,0x10
c0018135:	8b 1d 08 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d908
c001813b:	83 ec 08             	sub    esp,0x8
c001813e:	6a 01                	push   0x1
c0018140:	68 27 b2 02 c0       	push   0xc002b227
c0018145:	e8 b3 4e 00 00       	call   c001cffd <Thr::loadDLL(char const*, bool)>
c001814a:	83 c4 10             	add    esp,0x10
c001814d:	83 ec 08             	sub    esp,0x8
c0018150:	53                   	push   ebx
c0018151:	50                   	push   eax
c0018152:	e8 d1 50 00 00       	call   c001d228 <Thr::executeDLL(unsigned long, void*)>
c0018157:	83 c4 10             	add    esp,0x10
c001815a:	8b 1d 08 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d908
c0018160:	83 ec 08             	sub    esp,0x8
c0018163:	6a 01                	push   0x1
c0018165:	68 44 b2 02 c0       	push   0xc002b244
c001816a:	e8 8e 4e 00 00       	call   c001cffd <Thr::loadDLL(char const*, bool)>
c001816f:	83 c4 10             	add    esp,0x10
c0018172:	83 ec 08             	sub    esp,0x8
c0018175:	53                   	push   ebx
c0018176:	50                   	push   eax
c0018177:	e8 ac 50 00 00       	call   c001d228 <Thr::executeDLL(unsigned long, void*)>
c001817c:	83 c4 10             	add    esp,0x10
c001817f:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0018184:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001818a:	83 e0 04             	and    eax,0x4
c001818d:	84 c0                	test   al,al
c001818f:	0f 84 0d 01 00 00    	je     c00182a2 <ACPI::open(int, int, void*)+0x3a6>
c0018195:	83 ec 0c             	sub    esp,0xc
c0018198:	68 61 b2 02 c0       	push   0xc002b261
c001819d:	e8 51 74 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c00181a2:	83 c4 10             	add    esp,0x10
c00181a5:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00181b0:	83 ec 0c             	sub    esp,0xc
c00181b3:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00181ba:	e8 da 73 ff ff       	call   c000f599 <malloc>
c00181bf:	83 c4 10             	add    esp,0x10
c00181c2:	89 c3                	mov    ebx,eax
c00181c4:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c00181c9:	83 ec 04             	sub    esp,0x4
c00181cc:	50                   	push   eax
c00181cd:	68 7e b2 02 c0       	push   0xc002b27e
c00181d2:	53                   	push   ebx
c00181d3:	e8 4e aa ff ff       	call   c0012c26 <File::File(char const*, Process*)>
c00181d8:	83 c4 10             	add    esp,0x10
c00181db:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c00181e2:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00181ea:	74 1a                	je     c0018206 <ACPI::open(int, int, void*)+0x30a>
c00181ec:	83 ec 0c             	sub    esp,0xc
c00181ef:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00181f6:	e8 fd ac ff ff       	call   c0012ef8 <File::exists()>
c00181fb:	83 c4 10             	add    esp,0x10
c00181fe:	84 c0                	test   al,al
c0018200:	74 04                	je     c0018206 <ACPI::open(int, int, void*)+0x30a>
c0018202:	b0 01                	mov    al,0x1
c0018204:	eb 02                	jmp    c0018208 <ACPI::open(int, int, void*)+0x30c>
c0018206:	b0 00                	mov    al,0x0
c0018208:	84 c0                	test   al,al
c001820a:	74 25                	je     c0018231 <ACPI::open(int, int, void*)+0x335>
c001820c:	83 ec 08             	sub    esp,0x8
c001820f:	6a 01                	push   0x1
c0018211:	68 7e b2 02 c0       	push   0xc002b27e
c0018216:	e8 e2 4d 00 00       	call   c001cffd <Thr::loadDLL(char const*, bool)>
c001821b:	83 c4 10             	add    esp,0x10
c001821e:	83 ec 08             	sub    esp,0x8
c0018221:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c0018228:	50                   	push   eax
c0018229:	e8 fa 4f 00 00       	call   c001d228 <Thr::executeDLL(unsigned long, void*)>
c001822e:	83 c4 10             	add    esp,0x10
c0018231:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018239:	74 27                	je     c0018262 <ACPI::open(int, int, void*)+0x366>
c001823b:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018243:	74 1d                	je     c0018262 <ACPI::open(int, int, void*)+0x366>
c0018245:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001824c:	8b 00                	mov    eax,DWORD PTR [eax]
c001824e:	83 c0 08             	add    eax,0x8
c0018251:	8b 00                	mov    eax,DWORD PTR [eax]
c0018253:	83 ec 0c             	sub    esp,0xc
c0018256:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001825d:	ff d0                	call   eax
c001825f:	83 c4 10             	add    esp,0x10
c0018262:	a1 c8 01 03 c0       	mov    eax,ds:0xc00301c8
c0018267:	83 ec 08             	sub    esp,0x8
c001826a:	68 9b b2 02 c0       	push   0xc002b29b
c001826f:	50                   	push   eax
c0018270:	e8 43 f3 ff ff       	call   c00175b8 <findDataTable(unsigned char*, char*)>
c0018275:	83 c4 10             	add    esp,0x10
c0018278:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c001827f:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018287:	74 19                	je     c00182a2 <ACPI::open(int, int, void*)+0x3a6>
c0018289:	83 ec 08             	sub    esp,0x8
c001828c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018293:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c001829a:	e8 fd fb ff ff       	call   c0017e9c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001829f:	83 c4 10             	add    esp,0x10
c00182a2:	b8 00 00 00 00       	mov    eax,0x0
c00182a7:	81 c4 60 01 00 00    	add    esp,0x160
c00182ad:	5b                   	pop    ebx
c00182ae:	5e                   	pop    esi
c00182af:	5f                   	pop    edi
c00182b0:	c3                   	ret    
c00182b1:	90                   	nop

c00182b2 <CPU::close(int, int, void*)>:
c00182b2:	31 c0                	xor    eax,eax
c00182b4:	c3                   	ret    
c00182b5:	90                   	nop

c00182b6 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00182b6:	55                   	push   ebp
c00182b7:	57                   	push   edi
c00182b8:	56                   	push   esi
c00182b9:	53                   	push   ebx
c00182ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00182be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182c2:	89 ce                	mov    esi,ecx
c00182c4:	89 d5                	mov    ebp,edx
c00182c6:	80 f9 04             	cmp    cl,0x4
c00182c9:	75 28                	jne    c00182f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00182cb:	8d 42 f9             	lea    eax,[edx-0x7]
c00182ce:	3c 03                	cmp    al,0x3
c00182d0:	0f 86 63 01 00 00    	jbe    c0018439 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00182d6:	80 fa 03             	cmp    dl,0x3
c00182d9:	0f 84 5a 01 00 00    	je     c0018439 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00182df:	8d 7a f2             	lea    edi,[edx-0xe]
c00182e2:	b8 30 cd 02 c0       	mov    eax,0xc002cd30
c00182e7:	89 fb                	mov    ebx,edi
c00182e9:	80 fb 01             	cmp    bl,0x1
c00182ec:	77 4e                	ja     c001833c <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00182ee:	e9 52 01 00 00       	jmp    c0018445 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182f3:	80 f9 05             	cmp    cl,0x5
c00182f6:	75 4d                	jne    c0018345 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00182f8:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c00182fd:	80 fa 03             	cmp    dl,0x3
c0018300:	0f 86 3f 01 00 00    	jbe    c0018445 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018306:	8d 7a fa             	lea    edi,[edx-0x6]
c0018309:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c001830e:	89 fb                	mov    ebx,edi
c0018310:	80 fb 01             	cmp    bl,0x1
c0018313:	0f 86 2c 01 00 00    	jbe    c0018445 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018319:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c001831e:	80 fa 08             	cmp    dl,0x8
c0018321:	0f 84 1e 01 00 00    	je     c0018445 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018327:	89 d7                	mov    edi,edx
c0018329:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c001832e:	83 e7 fb             	and    edi,0xfffffffb
c0018331:	89 fb                	mov    ebx,edi
c0018333:	80 fb 09             	cmp    bl,0x9
c0018336:	0f 84 09 01 00 00    	je     c0018445 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001833c:	31 c0                	xor    eax,eax
c001833e:	89 eb                	mov    ebx,ebp
c0018340:	0f b6 fb             	movzx  edi,bl
c0018343:	eb 30                	jmp    c0018375 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018345:	31 c0                	xor    eax,eax
c0018347:	80 f9 06             	cmp    cl,0x6
c001834a:	75 f2                	jne    c001833e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001834c:	80 fa 0a             	cmp    dl,0xa
c001834f:	77 ed                	ja     c001833e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018351:	bf de 05 00 00       	mov    edi,0x5de
c0018356:	0f a3 d7             	bt     edi,edx
c0018359:	73 e3                	jae    c001833e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001835b:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c0018360:	e9 e0 00 00 00       	jmp    c0018445 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018365:	39 c7                	cmp    edi,eax
c0018367:	0f 84 d3 00 00 00    	je     c0018440 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001836d:	40                   	inc    eax
c001836e:	3d d0 00 00 00       	cmp    eax,0xd0
c0018373:	74 09                	je     c001837e <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018375:	89 f3                	mov    ebx,esi
c0018377:	80 fb 0f             	cmp    bl,0xf
c001837a:	75 f1                	jne    c001836d <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001837c:	eb e7                	jmp    c0018365 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001837e:	80 f9 10             	cmp    cl,0x10
c0018381:	75 14                	jne    c0018397 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018383:	8d 42 fc             	lea    eax,[edx-0x4]
c0018386:	83 e0 fb             	and    eax,0xfffffffb
c0018389:	3c 02                	cmp    al,0x2
c001838b:	76 34                	jbe    c00183c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001838d:	b8 21 b4 02 c0       	mov    eax,0xc002b421
c0018392:	80 fa 02             	cmp    dl,0x2
c0018395:	eb 24                	jmp    c00183bb <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018397:	80 f9 11             	cmp    cl,0x11
c001839a:	75 13                	jne    c00183af <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001839c:	b8 21 b4 02 c0       	mov    eax,0xc002b421
c00183a1:	80 fa 03             	cmp    dl,0x3
c00183a4:	0f 85 9b 00 00 00    	jne    c0018445 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183aa:	e9 91 00 00 00       	jmp    c0018440 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00183af:	80 f9 12             	cmp    cl,0x12
c00183b2:	75 14                	jne    c00183c8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00183b4:	b8 21 b4 02 c0       	mov    eax,0xc002b421
c00183b9:	fe ca                	dec    dl
c00183bb:	0f 85 84 00 00 00    	jne    c0018445 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183c1:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c00183c6:	eb 7d                	jmp    c0018445 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183c8:	80 f9 14             	cmp    cl,0x14
c00183cb:	75 12                	jne    c00183df <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00183cd:	4a                   	dec    edx
c00183ce:	b8 21 b4 02 c0       	mov    eax,0xc002b421
c00183d3:	80 fa 01             	cmp    dl,0x1
c00183d6:	77 6d                	ja     c0018445 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183d8:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c00183dd:	eb 66                	jmp    c0018445 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183df:	80 f9 15             	cmp    cl,0x15
c00183e2:	75 31                	jne    c0018415 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00183e4:	b8 c0 cd 02 c0       	mov    eax,0xc002cdc0
c00183e9:	80 fa 01             	cmp    dl,0x1
c00183ec:	74 57                	je     c0018445 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183ee:	b8 21 b4 02 c0       	mov    eax,0xc002b421
c00183f3:	80 fa 13             	cmp    dl,0x13
c00183f6:	76 0c                	jbe    c0018404 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00183f8:	80 fa 30             	cmp    dl,0x30
c00183fb:	75 48                	jne    c0018445 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183fd:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c0018402:	eb 41                	jmp    c0018445 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018404:	b9 04 00 09 00       	mov    ecx,0x90004
c0018409:	0f a3 d1             	bt     ecx,edx
c001840c:	73 37                	jae    c0018445 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001840e:	b8 d0 cd 02 c0       	mov    eax,0xc002cdd0
c0018413:	eb 30                	jmp    c0018445 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018415:	b8 21 b4 02 c0       	mov    eax,0xc002b421
c001841a:	80 f9 16             	cmp    cl,0x16
c001841d:	75 26                	jne    c0018445 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001841f:	b8 f0 cd 02 c0       	mov    eax,0xc002cdf0
c0018424:	84 d2                	test   dl,dl
c0018426:	74 1d                	je     c0018445 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018428:	b8 21 b4 02 c0       	mov    eax,0xc002b421
c001842d:	80 fa 30             	cmp    dl,0x30
c0018430:	75 13                	jne    c0018445 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018432:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c0018437:	eb 0c                	jmp    c0018445 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018439:	b8 20 cd 02 c0       	mov    eax,0xc002cd20
c001843e:	eb 05                	jmp    c0018445 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018440:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c0018445:	5b                   	pop    ebx
c0018446:	5e                   	pop    esi
c0018447:	5f                   	pop    edi
c0018448:	5d                   	pop    ebp
c0018449:	c3                   	ret    

c001844a <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001844a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001844e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018452:	80 f9 04             	cmp    cl,0x4
c0018455:	75 6b                	jne    c00184c2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018457:	b8 80 cb 02 c0       	mov    eax,0xc002cb80
c001845c:	80 fa 01             	cmp    dl,0x1
c001845f:	0f 86 92 02 00 00    	jbe    c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018465:	b8 90 cb 02 c0       	mov    eax,0xc002cb90
c001846a:	80 fa 02             	cmp    dl,0x2
c001846d:	0f 84 84 02 00 00    	je     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018473:	b8 a0 cb 02 c0       	mov    eax,0xc002cba0
c0018478:	80 fa 03             	cmp    dl,0x3
c001847b:	0f 84 76 02 00 00    	je     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018481:	b8 b0 cb 02 c0       	mov    eax,0xc002cbb0
c0018486:	80 fa 04             	cmp    dl,0x4
c0018489:	0f 84 68 02 00 00    	je     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001848f:	b8 c0 cb 02 c0       	mov    eax,0xc002cbc0
c0018494:	80 fa 05             	cmp    dl,0x5
c0018497:	0f 84 5a 02 00 00    	je     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001849d:	b8 a0 cb 02 c0       	mov    eax,0xc002cba0
c00184a2:	80 fa 07             	cmp    dl,0x7
c00184a5:	0f 84 4c 02 00 00    	je     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184ab:	83 ea 08             	sub    edx,0x8
c00184ae:	b8 21 b4 02 c0       	mov    eax,0xc002b421
c00184b3:	80 fa 01             	cmp    dl,0x1
c00184b6:	0f 87 3b 02 00 00    	ja     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184bc:	b8 d0 cb 02 c0       	mov    eax,0xc002cbd0
c00184c1:	c3                   	ret    
c00184c2:	80 f9 05             	cmp    cl,0x5
c00184c5:	75 45                	jne    c001850c <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00184c7:	8d 4a ff             	lea    ecx,[edx-0x1]
c00184ca:	b8 e0 cb 02 c0       	mov    eax,0xc002cbe0
c00184cf:	80 f9 02             	cmp    cl,0x2
c00184d2:	0f 86 1f 02 00 00    	jbe    c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184d8:	80 fa 04             	cmp    dl,0x4
c00184db:	0f 84 f3 01 00 00    	je     c00186d4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00184e1:	80 fa 07             	cmp    dl,0x7
c00184e4:	0f 84 0d 02 00 00    	je     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184ea:	b8 f0 cb 02 c0       	mov    eax,0xc002cbf0
c00184ef:	80 fa 08             	cmp    dl,0x8
c00184f2:	0f 84 ff 01 00 00    	je     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184f8:	b8 21 b4 02 c0       	mov    eax,0xc002b421
c00184fd:	80 fa 09             	cmp    dl,0x9
c0018500:	0f 85 f1 01 00 00    	jne    c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018506:	b8 00 cc 02 c0       	mov    eax,0xc002cc00
c001850b:	c3                   	ret    
c001850c:	80 f9 06             	cmp    cl,0x6
c001850f:	0f 85 85 01 00 00    	jne    c001869a <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018515:	b8 10 cc 02 c0       	mov    eax,0xc002cc10
c001851a:	80 fa 01             	cmp    dl,0x1
c001851d:	0f 84 d4 01 00 00    	je     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018523:	8d 42 fb             	lea    eax,[edx-0x5]
c0018526:	3c 01                	cmp    al,0x1
c0018528:	0f 86 ac 01 00 00    	jbe    c00186da <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001852e:	80 fa 03             	cmp    dl,0x3
c0018531:	0f 84 a3 01 00 00    	je     c00186da <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018537:	8d 4a f9             	lea    ecx,[edx-0x7]
c001853a:	b8 30 cc 02 c0       	mov    eax,0xc002cc30
c001853f:	80 f9 01             	cmp    cl,0x1
c0018542:	0f 86 af 01 00 00    	jbe    c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018548:	80 fa 09             	cmp    dl,0x9
c001854b:	0f 84 8f 01 00 00    	je     c00186e0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018551:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018554:	80 f9 01             	cmp    cl,0x1
c0018557:	0f 86 9a 01 00 00    	jbe    c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001855d:	b8 40 cc 02 c0       	mov    eax,0xc002cc40
c0018562:	80 fa 0d             	cmp    dl,0xd
c0018565:	0f 84 8c 01 00 00    	je     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001856b:	b8 50 cc 02 c0       	mov    eax,0xc002cc50
c0018570:	80 fa 0e             	cmp    dl,0xe
c0018573:	0f 84 7e 01 00 00    	je     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018579:	b8 60 cc 02 c0       	mov    eax,0xc002cc60
c001857e:	80 fa 0f             	cmp    dl,0xf
c0018581:	0f 84 70 01 00 00    	je     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018587:	b8 40 cc 02 c0       	mov    eax,0xc002cc40
c001858c:	80 fa 15             	cmp    dl,0x15
c001858f:	0f 84 62 01 00 00    	je     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018595:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018598:	b8 60 cc 02 c0       	mov    eax,0xc002cc60
c001859d:	80 f9 01             	cmp    cl,0x1
c00185a0:	0f 86 51 01 00 00    	jbe    c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185a6:	80 fa 1a             	cmp    dl,0x1a
c00185a9:	0f 84 37 01 00 00    	je     c00186e6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00185af:	80 fa 1c             	cmp    dl,0x1c
c00185b2:	0f 84 34 01 00 00    	je     c00186ec <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00185b8:	80 fa 1d             	cmp    dl,0x1d
c00185bb:	0f 84 36 01 00 00    	je     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185c1:	b8 90 cc 02 c0       	mov    eax,0xc002cc90
c00185c6:	80 fa 25             	cmp    dl,0x25
c00185c9:	0f 84 28 01 00 00    	je     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185cf:	8d 4a da             	lea    ecx,[edx-0x26]
c00185d2:	b8 80 cc 02 c0       	mov    eax,0xc002cc80
c00185d7:	80 f9 01             	cmp    cl,0x1
c00185da:	0f 86 17 01 00 00    	jbe    c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185e0:	b8 a0 cc 02 c0       	mov    eax,0xc002cca0
c00185e5:	80 fa 2a             	cmp    dl,0x2a
c00185e8:	0f 84 09 01 00 00    	je     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185ee:	b8 90 cc 02 c0       	mov    eax,0xc002cc90
c00185f3:	80 fa 2c             	cmp    dl,0x2c
c00185f6:	0f 84 fb 00 00 00    	je     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185fc:	b8 a0 cc 02 c0       	mov    eax,0xc002cca0
c0018601:	80 fa 2d             	cmp    dl,0x2d
c0018604:	0f 84 ed 00 00 00    	je     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001860a:	b8 70 cc 02 c0       	mov    eax,0xc002cc70
c001860f:	80 fa 2e             	cmp    dl,0x2e
c0018612:	0f 84 df 00 00 00    	je     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018618:	b8 90 cc 02 c0       	mov    eax,0xc002cc90
c001861d:	80 fa 2f             	cmp    dl,0x2f
c0018620:	0f 84 d1 00 00 00    	je     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018626:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018629:	b8 80 cc 02 c0       	mov    eax,0xc002cc80
c001862e:	80 f9 01             	cmp    cl,0x1
c0018631:	0f 86 c0 00 00 00    	jbe    c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018637:	b8 b0 cc 02 c0       	mov    eax,0xc002ccb0
c001863c:	80 fa 37             	cmp    dl,0x37
c001863f:	0f 84 b2 00 00 00    	je     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018645:	b8 c0 cc 02 c0       	mov    eax,0xc002ccc0
c001864a:	80 fa 3a             	cmp    dl,0x3a
c001864d:	0f 84 a4 00 00 00    	je     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018653:	b8 d0 cc 02 c0       	mov    eax,0xc002ccd0
c0018658:	80 fa 3c             	cmp    dl,0x3c
c001865b:	0f 84 96 00 00 00    	je     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018661:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c0018666:	80 fa 3d             	cmp    dl,0x3d
c0018669:	0f 84 88 00 00 00    	je     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001866f:	b8 c0 cc 02 c0       	mov    eax,0xc002ccc0
c0018674:	80 fa 3e             	cmp    dl,0x3e
c0018677:	74 7e                	je     c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018679:	8d 42 bb             	lea    eax,[edx-0x45]
c001867c:	3c 01                	cmp    al,0x1
c001867e:	76 72                	jbe    c00186f2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018680:	80 fa 3f             	cmp    dl,0x3f
c0018683:	74 6d                	je     c00186f2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018685:	80 fa 4a             	cmp    dl,0x4a
c0018688:	74 0a                	je     c0018694 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001868a:	b8 21 b4 02 c0       	mov    eax,0xc002b421
c001868f:	80 fa 4d             	cmp    dl,0x4d
c0018692:	75 63                	jne    c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018694:	b8 b0 cc 02 c0       	mov    eax,0xc002ccb0
c0018699:	c3                   	ret    
c001869a:	b8 21 b4 02 c0       	mov    eax,0xc002b421
c001869f:	80 f9 0b             	cmp    cl,0xb
c00186a2:	75 0a                	jne    c00186ae <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00186a4:	fe ca                	dec    dl
c00186a6:	75 4f                	jne    c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186a8:	b8 f0 cc 02 c0       	mov    eax,0xc002ccf0
c00186ad:	c3                   	ret    
c00186ae:	80 f9 0f             	cmp    cl,0xf
c00186b1:	75 44                	jne    c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186b3:	b8 00 cd 02 c0       	mov    eax,0xc002cd00
c00186b8:	80 fa 02             	cmp    dl,0x2
c00186bb:	76 3a                	jbe    c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186bd:	8d 42 fd             	lea    eax,[edx-0x3]
c00186c0:	3c 01                	cmp    al,0x1
c00186c2:	76 0a                	jbe    c00186ce <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00186c4:	b8 21 b4 02 c0       	mov    eax,0xc002b421
c00186c9:	80 fa 06             	cmp    dl,0x6
c00186cc:	75 29                	jne    c00186f7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186ce:	b8 10 cd 02 c0       	mov    eax,0xc002cd10
c00186d3:	c3                   	ret    
c00186d4:	b8 f0 cb 02 c0       	mov    eax,0xc002cbf0
c00186d9:	c3                   	ret    
c00186da:	b8 20 cc 02 c0       	mov    eax,0xc002cc20
c00186df:	c3                   	ret    
c00186e0:	b8 40 cc 02 c0       	mov    eax,0xc002cc40
c00186e5:	c3                   	ret    
c00186e6:	b8 70 cc 02 c0       	mov    eax,0xc002cc70
c00186eb:	c3                   	ret    
c00186ec:	b8 80 cc 02 c0       	mov    eax,0xc002cc80
c00186f1:	c3                   	ret    
c00186f2:	b8 d0 cc 02 c0       	mov    eax,0xc002ccd0
c00186f7:	c3                   	ret    

c00186f8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00186f8:	60                   	pusha  
c00186f9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00186fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018701:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018705:	9c                   	pushf  
c0018706:	fa                   	cli    
c0018707:	0f 09                	wbinvd 
c0018709:	0f 30                	wrmsr  
c001870b:	9d                   	popf   
c001870c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018710:	89 02                	mov    DWORD PTR [edx],eax
c0018712:	61                   	popa   
c0018713:	c3                   	ret    

c0018714 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018714:	60                   	pusha  
c0018715:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018719:	9c                   	pushf  
c001871a:	fa                   	cli    
c001871b:	0f 09                	wbinvd 
c001871d:	31 c0                	xor    eax,eax
c001871f:	31 d2                	xor    edx,edx
c0018721:	0f 32                	rdmsr  
c0018723:	9d                   	popf   
c0018724:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018728:	89 02                	mov    DWORD PTR [edx],eax
c001872a:	61                   	popa   
c001872b:	c3                   	ret    

c001872c <CPU::AMD_K6_writeback(int, int, int)>:
c001872c:	56                   	push   esi
c001872d:	53                   	push   ebx
c001872e:	83 ec 10             	sub    esp,0x10
c0018731:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018735:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001873a:	75 5d                	jne    c0018799 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001873c:	83 f8 08             	cmp    eax,0x8
c001873f:	75 09                	jne    c001874a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018741:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018746:	7e 13                	jle    c001875b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018748:	eb 30                	jmp    c001877a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001874a:	83 f8 06             	cmp    eax,0x6
c001874d:	7c 4a                	jl     c0018799 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001874f:	83 f8 07             	cmp    eax,0x7
c0018752:	7e 07                	jle    c001875b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018754:	83 f8 09             	cmp    eax,0x9
c0018757:	74 21                	je     c001877a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018759:	eb 3e                	jmp    c0018799 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001875b:	89 e6                	mov    esi,esp
c001875d:	8b 1d 48 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d948
c0018763:	56                   	push   esi
c0018764:	c1 eb 15             	shr    ebx,0x15
c0018767:	68 82 00 00 c0       	push   0xc0000082
c001876c:	83 e3 7e             	and    ebx,0x7e
c001876f:	e8 a0 ff ff ff       	call   c0018714 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018774:	56                   	push   esi
c0018775:	6a 00                	push   0x0
c0018777:	53                   	push   ebx
c0018778:	eb 12                	jmp    c001878c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001877a:	89 e3                	mov    ebx,esp
c001877c:	53                   	push   ebx
c001877d:	68 82 00 00 c0       	push   0xc0000082
c0018782:	e8 8d ff ff ff       	call   c0018714 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018787:	53                   	push   ebx
c0018788:	6a 00                	push   0x0
c001878a:	6a 00                	push   0x0
c001878c:	68 82 00 00 c0       	push   0xc0000082
c0018791:	e8 62 ff ff ff       	call   c00186f8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018796:	83 c4 18             	add    esp,0x18
c0018799:	83 c4 10             	add    esp,0x10
c001879c:	5b                   	pop    ebx
c001879d:	5e                   	pop    esi
c001879e:	c3                   	ret    
c001879f:	90                   	nop

c00187a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00187a0:	55                   	push   ebp
c00187a1:	57                   	push   edi
c00187a2:	56                   	push   esi
c00187a3:	53                   	push   ebx
c00187a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187a8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00187ac:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00187b0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00187b4:	39 05 20 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce20,eax
c00187ba:	75 23                	jne    c00187df <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00187bc:	a1 2c 04 03 c0       	mov    eax,ds:0xc003042c
c00187c1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00187c5:	89 06                	mov    DWORD PTR [esi],eax
c00187c7:	a1 28 04 03 c0       	mov    eax,ds:0xc0030428
c00187cc:	89 07                	mov    DWORD PTR [edi],eax
c00187ce:	a1 24 04 03 c0       	mov    eax,ds:0xc0030424
c00187d3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00187d6:	a1 20 04 03 c0       	mov    eax,ds:0xc0030420
c00187db:	89 02                	mov    DWORD PTR [edx],eax
c00187dd:	eb 3f                	jmp    c001881e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00187df:	31 c9                	xor    ecx,ecx
c00187e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187e5:	0f a2                	cpuid  
c00187e7:	89 06                	mov    DWORD PTR [esi],eax
c00187e9:	89 1f                	mov    DWORD PTR [edi],ebx
c00187eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00187ef:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00187f2:	89 10                	mov    DWORD PTR [eax],edx
c00187f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187f8:	a3 20 ce 02 c0       	mov    ds:0xc002ce20,eax
c00187fd:	8b 06                	mov    eax,DWORD PTR [esi]
c00187ff:	a3 2c 04 03 c0       	mov    ds:0xc003042c,eax
c0018804:	8b 07                	mov    eax,DWORD PTR [edi]
c0018806:	a3 28 04 03 c0       	mov    ds:0xc0030428,eax
c001880b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001880e:	a3 24 04 03 c0       	mov    ds:0xc0030424,eax
c0018813:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018817:	8b 00                	mov    eax,DWORD PTR [eax]
c0018819:	a3 20 04 03 c0       	mov    ds:0xc0030420,eax
c001881e:	5b                   	pop    ebx
c001881f:	5e                   	pop    esi
c0018820:	5f                   	pop    edi
c0018821:	5d                   	pop    ebp
c0018822:	c3                   	ret    
c0018823:	90                   	nop

c0018824 <CPU::cpuidCheckEDX(unsigned int)>:
c0018824:	83 ec 10             	sub    esp,0x10
c0018827:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001882b:	50                   	push   eax
c001882c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018830:	50                   	push   eax
c0018831:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018835:	50                   	push   eax
c0018836:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001883a:	50                   	push   eax
c001883b:	6a 01                	push   0x1
c001883d:	e8 5e ff ff ff       	call   c00187a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018842:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018846:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001884a:	0f 95 c0             	setne  al
c001884d:	83 c4 24             	add    esp,0x24
c0018850:	c3                   	ret    
c0018851:	90                   	nop

c0018852 <CPU::cpuidCheckECX(unsigned int)>:
c0018852:	83 ec 10             	sub    esp,0x10
c0018855:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018859:	50                   	push   eax
c001885a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001885e:	50                   	push   eax
c001885f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018863:	50                   	push   eax
c0018864:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018868:	50                   	push   eax
c0018869:	6a 01                	push   0x1
c001886b:	e8 30 ff ff ff       	call   c00187a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018870:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018874:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018878:	0f 95 c0             	setne  al
c001887b:	83 c4 24             	add    esp,0x24
c001887e:	c3                   	ret    
c001887f:	90                   	nop

c0018880 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018880:	83 ec 10             	sub    esp,0x10
c0018883:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018887:	50                   	push   eax
c0018888:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001888c:	50                   	push   eax
c001888d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018891:	50                   	push   eax
c0018892:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018896:	50                   	push   eax
c0018897:	6a 07                	push   0x7
c0018899:	e8 02 ff ff ff       	call   c00187a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001889e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188a2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00188a6:	0f 95 c0             	setne  al
c00188a9:	83 c4 24             	add    esp,0x24
c00188ac:	c3                   	ret    
c00188ad:	90                   	nop

c00188ae <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00188ae:	83 ec 10             	sub    esp,0x10
c00188b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188b5:	50                   	push   eax
c00188b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188ba:	50                   	push   eax
c00188bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188bf:	50                   	push   eax
c00188c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188c4:	50                   	push   eax
c00188c5:	6a 07                	push   0x7
c00188c7:	e8 d4 fe ff ff       	call   c00187a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188d0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00188d4:	0f 95 c0             	setne  al
c00188d7:	83 c4 24             	add    esp,0x24
c00188da:	c3                   	ret    
c00188db:	90                   	nop

c00188dc <CPU::CPU()>:
c00188dc:	83 ec 0c             	sub    esp,0xc
c00188df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188e3:	83 ec 08             	sub    esp,0x8
c00188e6:	68 21 b4 02 c0       	push   0xc002b421
c00188eb:	50                   	push   eax
c00188ec:	e8 13 b4 ff ff       	call   c0013d04 <Device::Device(char const*)>
c00188f1:	83 c4 10             	add    esp,0x10
c00188f4:	ba f8 b4 02 c0       	mov    edx,0xc002b4f8
c00188f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188fd:	89 10                	mov    DWORD PTR [eax],edx
c00188ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018903:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001890d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018911:	05 78 01 00 00       	add    eax,0x178
c0018916:	83 ec 0c             	sub    esp,0xc
c0018919:	50                   	push   eax
c001891a:	e8 ad 64 ff ff       	call   c000edcc <GDT::GDT()>
c001891f:	83 c4 10             	add    esp,0x10
c0018922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018926:	05 7c 09 00 00       	add    eax,0x97c
c001892b:	83 ec 0c             	sub    esp,0xc
c001892e:	50                   	push   eax
c001892f:	e8 e8 66 ff ff       	call   c000f01c <IDT::IDT()>
c0018934:	83 c4 10             	add    esp,0x10
c0018937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001893b:	05 7c 11 00 00       	add    eax,0x117c
c0018940:	83 ec 0c             	sub    esp,0xc
c0018943:	50                   	push   eax
c0018944:	e8 19 82 ff ff       	call   c0010b62 <TSS::TSS()>
c0018949:	83 c4 10             	add    esp,0x10
c001894c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018950:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001895b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018965:	90                   	nop
c0018966:	83 c4 0c             	add    esp,0xc
c0018969:	c3                   	ret    

c001896a <CPU::displayFeatures()>:
c001896a:	c3                   	ret    
c001896b:	90                   	nop

c001896c <CPU::detectFeatures()>:
c001896c:	55                   	push   ebp
c001896d:	57                   	push   edi
c001896e:	56                   	push   esi
c001896f:	53                   	push   ebx
c0018970:	83 ec 50             	sub    esp,0x50
c0018973:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018977:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018981:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018988:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001898e:	6a 0d                	push   0xd
c0018990:	6a 00                	push   0x0
c0018992:	55                   	push   ebp
c0018993:	e8 b8 7d fe ff       	call   c0000750 <memset>
c0018998:	83 c4 10             	add    esp,0x10
c001899b:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c00189a0:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00189a7:	0f 84 22 09 00 00    	je     c00192cf <CPU::detectFeatures()+0x963>
c00189ad:	83 ec 0c             	sub    esp,0xc
c00189b0:	89 ef                	mov    edi,ebp
c00189b2:	6a 10                	push   0x10
c00189b4:	e8 6b fe ff ff       	call   c0018824 <CPU::cpuidCheckEDX(unsigned int)>
c00189b9:	83 e0 01             	and    eax,0x1
c00189bc:	8d 14 00             	lea    edx,[eax+eax*1]
c00189bf:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00189c5:	83 e0 fd             	and    eax,0xfffffffd
c00189c8:	09 d0                	or     eax,edx
c00189ca:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00189d0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00189d7:	e8 48 fe ff ff       	call   c0018824 <CPU::cpuidCheckEDX(unsigned int)>
c00189dc:	83 e0 01             	and    eax,0x1
c00189df:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00189e6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00189ec:	83 e0 fb             	and    eax,0xfffffffb
c00189ef:	09 d0                	or     eax,edx
c00189f1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00189f7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00189fe:	e8 21 fe ff ff       	call   c0018824 <CPU::cpuidCheckEDX(unsigned int)>
c0018a03:	83 e0 01             	and    eax,0x1
c0018a06:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018a0d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a13:	83 e0 f7             	and    eax,0xfffffff7
c0018a16:	09 d0                	or     eax,edx
c0018a18:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a1e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018a25:	e8 fa fd ff ff       	call   c0018824 <CPU::cpuidCheckEDX(unsigned int)>
c0018a2a:	83 e0 01             	and    eax,0x1
c0018a2d:	c1 e0 04             	shl    eax,0x4
c0018a30:	88 c2                	mov    dl,al
c0018a32:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a38:	83 e0 ef             	and    eax,0xffffffef
c0018a3b:	09 d0                	or     eax,edx
c0018a3d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a43:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018a4a:	e8 d5 fd ff ff       	call   c0018824 <CPU::cpuidCheckEDX(unsigned int)>
c0018a4f:	83 e0 01             	and    eax,0x1
c0018a52:	c1 e0 05             	shl    eax,0x5
c0018a55:	88 c2                	mov    dl,al
c0018a57:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a5d:	83 e0 df             	and    eax,0xffffffdf
c0018a60:	09 d0                	or     eax,edx
c0018a62:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a68:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018a6f:	e8 b0 fd ff ff       	call   c0018824 <CPU::cpuidCheckEDX(unsigned int)>
c0018a74:	83 e0 01             	and    eax,0x1
c0018a77:	8d 14 00             	lea    edx,[eax+eax*1]
c0018a7a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018a80:	83 e0 fd             	and    eax,0xfffffffd
c0018a83:	09 d0                	or     eax,edx
c0018a85:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018a8b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018a92:	e8 8d fd ff ff       	call   c0018824 <CPU::cpuidCheckEDX(unsigned int)>
c0018a97:	83 e0 01             	and    eax,0x1
c0018a9a:	c1 e0 06             	shl    eax,0x6
c0018a9d:	88 c2                	mov    dl,al
c0018a9f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018aa5:	83 e0 bf             	and    eax,0xffffffbf
c0018aa8:	09 d0                	or     eax,edx
c0018aaa:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018ab0:	58                   	pop    eax
c0018ab1:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ab5:	50                   	push   eax
c0018ab6:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018aba:	50                   	push   eax
c0018abb:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018abf:	56                   	push   esi
c0018ac0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ac4:	50                   	push   eax
c0018ac5:	6a 00                	push   0x0
c0018ac7:	e8 d4 fc ff ff       	call   c00187a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018acc:	b8 04 00 00 00       	mov    eax,0x4
c0018ad1:	89 c1                	mov    ecx,eax
c0018ad3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018ad5:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018adb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018adf:	89 c1                	mov    ecx,eax
c0018ae1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018ae3:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018ae9:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018aed:	89 c1                	mov    ecx,eax
c0018aef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018af1:	83 c4 18             	add    esp,0x18
c0018af4:	68 cc b2 02 c0       	push   0xc002b2cc
c0018af9:	55                   	push   ebp
c0018afa:	e8 99 7d fe ff       	call   c0000898 <strcmp>
c0018aff:	83 c4 10             	add    esp,0x10
c0018b02:	85 c0                	test   eax,eax
c0018b04:	75 0f                	jne    c0018b15 <CPU::detectFeatures()+0x1a9>
c0018b06:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018b10:	e9 22 02 00 00       	jmp    c0018d37 <CPU::detectFeatures()+0x3cb>
c0018b15:	50                   	push   eax
c0018b16:	50                   	push   eax
c0018b17:	68 d9 b2 02 c0       	push   0xc002b2d9
c0018b1c:	55                   	push   ebp
c0018b1d:	e8 76 7d fe ff       	call   c0000898 <strcmp>
c0018b22:	83 c4 10             	add    esp,0x10
c0018b25:	85 c0                	test   eax,eax
c0018b27:	74 dd                	je     c0018b06 <CPU::detectFeatures()+0x19a>
c0018b29:	50                   	push   eax
c0018b2a:	50                   	push   eax
c0018b2b:	68 e6 b2 02 c0       	push   0xc002b2e6
c0018b30:	55                   	push   ebp
c0018b31:	e8 62 7d fe ff       	call   c0000898 <strcmp>
c0018b36:	83 c4 10             	add    esp,0x10
c0018b39:	85 c0                	test   eax,eax
c0018b3b:	74 2a                	je     c0018b67 <CPU::detectFeatures()+0x1fb>
c0018b3d:	50                   	push   eax
c0018b3e:	50                   	push   eax
c0018b3f:	68 f3 b2 02 c0       	push   0xc002b2f3
c0018b44:	55                   	push   ebp
c0018b45:	e8 4e 7d fe ff       	call   c0000898 <strcmp>
c0018b4a:	83 c4 10             	add    esp,0x10
c0018b4d:	85 c0                	test   eax,eax
c0018b4f:	74 16                	je     c0018b67 <CPU::detectFeatures()+0x1fb>
c0018b51:	50                   	push   eax
c0018b52:	50                   	push   eax
c0018b53:	68 00 b3 02 c0       	push   0xc002b300
c0018b58:	55                   	push   ebp
c0018b59:	e8 3a 7d fe ff       	call   c0000898 <strcmp>
c0018b5e:	83 c4 10             	add    esp,0x10
c0018b61:	85 c0                	test   eax,eax
c0018b63:	74 48                	je     c0018bad <CPU::detectFeatures()+0x241>
c0018b65:	eb 0f                	jmp    c0018b76 <CPU::detectFeatures()+0x20a>
c0018b67:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018b71:	e9 c1 01 00 00       	jmp    c0018d37 <CPU::detectFeatures()+0x3cb>
c0018b76:	50                   	push   eax
c0018b77:	50                   	push   eax
c0018b78:	68 0d b3 02 c0       	push   0xc002b30d
c0018b7d:	55                   	push   ebp
c0018b7e:	e8 15 7d fe ff       	call   c0000898 <strcmp>
c0018b83:	83 c4 10             	add    esp,0x10
c0018b86:	85 c0                	test   eax,eax
c0018b88:	74 23                	je     c0018bad <CPU::detectFeatures()+0x241>
c0018b8a:	57                   	push   edi
c0018b8b:	57                   	push   edi
c0018b8c:	68 1a b3 02 c0       	push   0xc002b31a
c0018b91:	55                   	push   ebp
c0018b92:	e8 01 7d fe ff       	call   c0000898 <strcmp>
c0018b97:	83 c4 10             	add    esp,0x10
c0018b9a:	85 c0                	test   eax,eax
c0018b9c:	75 1e                	jne    c0018bbc <CPU::detectFeatures()+0x250>
c0018b9e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018ba8:	e9 8a 01 00 00       	jmp    c0018d37 <CPU::detectFeatures()+0x3cb>
c0018bad:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018bb7:	e9 7b 01 00 00       	jmp    c0018d37 <CPU::detectFeatures()+0x3cb>
c0018bbc:	56                   	push   esi
c0018bbd:	56                   	push   esi
c0018bbe:	68 27 b3 02 c0       	push   0xc002b327
c0018bc3:	55                   	push   ebp
c0018bc4:	e8 cf 7c fe ff       	call   c0000898 <strcmp>
c0018bc9:	83 c4 10             	add    esp,0x10
c0018bcc:	85 c0                	test   eax,eax
c0018bce:	75 0f                	jne    c0018bdf <CPU::detectFeatures()+0x273>
c0018bd0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018bda:	e9 58 01 00 00       	jmp    c0018d37 <CPU::detectFeatures()+0x3cb>
c0018bdf:	51                   	push   ecx
c0018be0:	51                   	push   ecx
c0018be1:	68 e6 b2 02 c0       	push   0xc002b2e6
c0018be6:	55                   	push   ebp
c0018be7:	e8 ac 7c fe ff       	call   c0000898 <strcmp>
c0018bec:	83 c4 10             	add    esp,0x10
c0018bef:	85 c0                	test   eax,eax
c0018bf1:	75 0f                	jne    c0018c02 <CPU::detectFeatures()+0x296>
c0018bf3:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018bfd:	e9 35 01 00 00       	jmp    c0018d37 <CPU::detectFeatures()+0x3cb>
c0018c02:	52                   	push   edx
c0018c03:	52                   	push   edx
c0018c04:	68 34 b3 02 c0       	push   0xc002b334
c0018c09:	55                   	push   ebp
c0018c0a:	e8 89 7c fe ff       	call   c0000898 <strcmp>
c0018c0f:	83 c4 10             	add    esp,0x10
c0018c12:	85 c0                	test   eax,eax
c0018c14:	75 0f                	jne    c0018c25 <CPU::detectFeatures()+0x2b9>
c0018c16:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018c20:	e9 12 01 00 00       	jmp    c0018d37 <CPU::detectFeatures()+0x3cb>
c0018c25:	50                   	push   eax
c0018c26:	50                   	push   eax
c0018c27:	68 41 b3 02 c0       	push   0xc002b341
c0018c2c:	55                   	push   ebp
c0018c2d:	e8 66 7c fe ff       	call   c0000898 <strcmp>
c0018c32:	83 c4 10             	add    esp,0x10
c0018c35:	85 c0                	test   eax,eax
c0018c37:	75 0f                	jne    c0018c48 <CPU::detectFeatures()+0x2dc>
c0018c39:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018c43:	e9 ef 00 00 00       	jmp    c0018d37 <CPU::detectFeatures()+0x3cb>
c0018c48:	50                   	push   eax
c0018c49:	50                   	push   eax
c0018c4a:	68 4e b3 02 c0       	push   0xc002b34e
c0018c4f:	55                   	push   ebp
c0018c50:	e8 43 7c fe ff       	call   c0000898 <strcmp>
c0018c55:	83 c4 10             	add    esp,0x10
c0018c58:	85 c0                	test   eax,eax
c0018c5a:	75 0f                	jne    c0018c6b <CPU::detectFeatures()+0x2ff>
c0018c5c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018c66:	e9 cc 00 00 00       	jmp    c0018d37 <CPU::detectFeatures()+0x3cb>
c0018c6b:	50                   	push   eax
c0018c6c:	50                   	push   eax
c0018c6d:	68 5b b3 02 c0       	push   0xc002b35b
c0018c72:	55                   	push   ebp
c0018c73:	e8 20 7c fe ff       	call   c0000898 <strcmp>
c0018c78:	83 c4 10             	add    esp,0x10
c0018c7b:	85 c0                	test   eax,eax
c0018c7d:	75 0f                	jne    c0018c8e <CPU::detectFeatures()+0x322>
c0018c7f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018c89:	e9 a9 00 00 00       	jmp    c0018d37 <CPU::detectFeatures()+0x3cb>
c0018c8e:	50                   	push   eax
c0018c8f:	50                   	push   eax
c0018c90:	68 68 b3 02 c0       	push   0xc002b368
c0018c95:	55                   	push   ebp
c0018c96:	e8 fd 7b fe ff       	call   c0000898 <strcmp>
c0018c9b:	83 c4 10             	add    esp,0x10
c0018c9e:	85 c0                	test   eax,eax
c0018ca0:	75 0f                	jne    c0018cb1 <CPU::detectFeatures()+0x345>
c0018ca2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018cac:	e9 86 00 00 00       	jmp    c0018d37 <CPU::detectFeatures()+0x3cb>
c0018cb1:	50                   	push   eax
c0018cb2:	50                   	push   eax
c0018cb3:	68 75 b3 02 c0       	push   0xc002b375
c0018cb8:	55                   	push   ebp
c0018cb9:	e8 da 7b fe ff       	call   c0000898 <strcmp>
c0018cbe:	83 c4 10             	add    esp,0x10
c0018cc1:	85 c0                	test   eax,eax
c0018cc3:	75 0c                	jne    c0018cd1 <CPU::detectFeatures()+0x365>
c0018cc5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018ccf:	eb 66                	jmp    c0018d37 <CPU::detectFeatures()+0x3cb>
c0018cd1:	50                   	push   eax
c0018cd2:	50                   	push   eax
c0018cd3:	68 82 b3 02 c0       	push   0xc002b382
c0018cd8:	55                   	push   ebp
c0018cd9:	e8 ba 7b fe ff       	call   c0000898 <strcmp>
c0018cde:	83 c4 10             	add    esp,0x10
c0018ce1:	85 c0                	test   eax,eax
c0018ce3:	75 0c                	jne    c0018cf1 <CPU::detectFeatures()+0x385>
c0018ce5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018cef:	eb 46                	jmp    c0018d37 <CPU::detectFeatures()+0x3cb>
c0018cf1:	57                   	push   edi
c0018cf2:	57                   	push   edi
c0018cf3:	68 8f b3 02 c0       	push   0xc002b38f
c0018cf8:	55                   	push   ebp
c0018cf9:	e8 9a 7b fe ff       	call   c0000898 <strcmp>
c0018cfe:	83 c4 10             	add    esp,0x10
c0018d01:	85 c0                	test   eax,eax
c0018d03:	74 e0                	je     c0018ce5 <CPU::detectFeatures()+0x379>
c0018d05:	56                   	push   esi
c0018d06:	56                   	push   esi
c0018d07:	68 9c b3 02 c0       	push   0xc002b39c
c0018d0c:	55                   	push   ebp
c0018d0d:	e8 86 7b fe ff       	call   c0000898 <strcmp>
c0018d12:	83 c4 10             	add    esp,0x10
c0018d15:	85 c0                	test   eax,eax
c0018d17:	74 cc                	je     c0018ce5 <CPU::detectFeatures()+0x379>
c0018d19:	51                   	push   ecx
c0018d1a:	51                   	push   ecx
c0018d1b:	68 a9 b3 02 c0       	push   0xc002b3a9
c0018d20:	55                   	push   ebp
c0018d21:	e8 72 7b fe ff       	call   c0000898 <strcmp>
c0018d26:	83 c4 10             	add    esp,0x10
c0018d29:	85 c0                	test   eax,eax
c0018d2b:	74 b8                	je     c0018ce5 <CPU::detectFeatures()+0x379>
c0018d2d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018d37:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018d3c:	0f 86 be 00 00 00    	jbe    c0018e00 <CPU::detectFeatures()+0x494>
c0018d42:	83 ec 0c             	sub    esp,0xc
c0018d45:	68 80 00 00 00       	push   0x80
c0018d4a:	e8 31 fb ff ff       	call   c0018880 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d4f:	83 e0 01             	and    eax,0x1
c0018d52:	c1 e0 06             	shl    eax,0x6
c0018d55:	88 c2                	mov    dl,al
c0018d57:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d5d:	83 e0 bf             	and    eax,0xffffffbf
c0018d60:	09 d0                	or     eax,edx
c0018d62:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d68:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018d6f:	e8 0c fb ff ff       	call   c0018880 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d74:	83 e0 01             	and    eax,0x1
c0018d77:	c1 e0 04             	shl    eax,0x4
c0018d7a:	88 c2                	mov    dl,al
c0018d7c:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018d82:	83 e0 ef             	and    eax,0xffffffef
c0018d85:	09 d0                	or     eax,edx
c0018d87:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018d8d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018d94:	e8 e7 fa ff ff       	call   c0018880 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d99:	c1 e0 07             	shl    eax,0x7
c0018d9c:	88 c2                	mov    dl,al
c0018d9e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018da4:	83 e0 7f             	and    eax,0x7f
c0018da7:	09 d0                	or     eax,edx
c0018da9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018daf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018db6:	e8 f3 fa ff ff       	call   c00188ae <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018dbb:	83 e0 01             	and    eax,0x1
c0018dbe:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018dc5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018dcb:	83 e0 f7             	and    eax,0xfffffff7
c0018dce:	09 d0                	or     eax,edx
c0018dd0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018dd6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018ddd:	e8 cc fa ff ff       	call   c00188ae <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018de2:	83 c4 10             	add    esp,0x10
c0018de5:	83 e0 01             	and    eax,0x1
c0018de8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018def:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018df5:	83 e0 fb             	and    eax,0xfffffffb
c0018df8:	09 d0                	or     eax,edx
c0018dfa:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018e00:	83 ec 0c             	sub    esp,0xc
c0018e03:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e07:	50                   	push   eax
c0018e08:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e0c:	50                   	push   eax
c0018e0d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018e11:	56                   	push   esi
c0018e12:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e16:	50                   	push   eax
c0018e17:	6a 01                	push   0x1
c0018e19:	e8 82 f9 ff ff       	call   c00187a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e1e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018e22:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018e28:	88 ca                	mov    dl,cl
c0018e2a:	83 e0 f0             	and    eax,0xfffffff0
c0018e2d:	83 e2 0f             	and    edx,0xf
c0018e30:	09 d0                	or     eax,edx
c0018e32:	88 ca                	mov    dl,cl
c0018e34:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018e3a:	c0 ea 04             	shr    dl,0x4
c0018e3d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018e41:	0f b6 c2             	movzx  eax,dl
c0018e44:	83 c4 20             	add    esp,0x20
c0018e47:	c1 e0 06             	shl    eax,0x6
c0018e4a:	89 c7                	mov    edi,eax
c0018e4c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e52:	66 25 3f c0          	and    ax,0xc03f
c0018e56:	09 f8                	or     eax,edi
c0018e58:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018e5f:	89 c8                	mov    eax,ecx
c0018e61:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018e68:	c1 e8 08             	shr    eax,0x8
c0018e6b:	83 e5 3f             	and    ebp,0x3f
c0018e6e:	83 e0 0f             	and    eax,0xf
c0018e71:	89 c7                	mov    edi,eax
c0018e73:	c1 e7 06             	shl    edi,0x6
c0018e76:	09 ef                	or     edi,ebp
c0018e78:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018e7f:	89 fa                	mov    edx,edi
c0018e81:	83 e5 c0             	and    ebp,0xffffffc0
c0018e84:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018e8a:	88 c2                	mov    dl,al
c0018e8c:	c0 ea 02             	shr    dl,0x2
c0018e8f:	89 d7                	mov    edi,edx
c0018e91:	09 ef                	or     edi,ebp
c0018e93:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018e99:	89 fa                	mov    edx,edi
c0018e9b:	83 e5 cf             	and    ebp,0xffffffcf
c0018e9e:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018ea4:	89 cf                	mov    edi,ecx
c0018ea6:	c1 ef 0c             	shr    edi,0xc
c0018ea9:	83 e7 03             	and    edi,0x3
c0018eac:	c1 e7 04             	shl    edi,0x4
c0018eaf:	09 ef                	or     edi,ebp
c0018eb1:	3c 06                	cmp    al,0x6
c0018eb3:	89 fa                	mov    edx,edi
c0018eb5:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018ebb:	74 04                	je     c0018ec1 <CPU::detectFeatures()+0x555>
c0018ebd:	3c 0f                	cmp    al,0xf
c0018ebf:	75 5c                	jne    c0018f1d <CPU::detectFeatures()+0x5b1>
c0018ec1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018ec5:	89 cf                	mov    edi,ecx
c0018ec7:	c1 ef 10             	shr    edi,0x10
c0018eca:	c1 e7 04             	shl    edi,0x4
c0018ecd:	09 fa                	or     edx,edi
c0018ecf:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0018ed5:	0f b6 d2             	movzx  edx,dl
c0018ed8:	66 81 e7 3f c0       	and    di,0xc03f
c0018edd:	c1 e2 06             	shl    edx,0x6
c0018ee0:	09 fa                	or     edx,edi
c0018ee2:	3c 0f                	cmp    al,0xf
c0018ee4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018eeb:	75 30                	jne    c0018f1d <CPU::detectFeatures()+0x5b1>
c0018eed:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018ef3:	c1 e9 14             	shr    ecx,0x14
c0018ef6:	83 e0 3f             	and    eax,0x3f
c0018ef9:	83 c1 0f             	add    ecx,0xf
c0018efc:	88 ca                	mov    dl,cl
c0018efe:	c0 e9 02             	shr    cl,0x2
c0018f01:	c1 e2 06             	shl    edx,0x6
c0018f04:	09 d0                	or     eax,edx
c0018f06:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018f0c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018f12:	83 e0 c0             	and    eax,0xffffffc0
c0018f15:	09 c1                	or     ecx,eax
c0018f17:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018f1d:	83 ec 0c             	sub    esp,0xc
c0018f20:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018f27:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f2b:	50                   	push   eax
c0018f2c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018f30:	55                   	push   ebp
c0018f31:	56                   	push   esi
c0018f32:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018f36:	57                   	push   edi
c0018f37:	68 00 00 00 80       	push   0x80000000
c0018f3c:	e8 5f f8 ff ff       	call   c00187a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f41:	83 c4 20             	add    esp,0x20
c0018f44:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018f4c:	76 22                	jbe    c0018f70 <CPU::detectFeatures()+0x604>
c0018f4e:	83 ec 0c             	sub    esp,0xc
c0018f51:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f55:	50                   	push   eax
c0018f56:	55                   	push   ebp
c0018f57:	56                   	push   esi
c0018f58:	57                   	push   edi
c0018f59:	68 01 00 00 80       	push   0x80000001
c0018f5e:	e8 3d f8 ff ff       	call   c00187a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f63:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018f6d:	83 c4 20             	add    esp,0x20
c0018f70:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018f76:	83 f8 01             	cmp    eax,0x1
c0018f79:	75 6f                	jne    c0018fea <CPU::detectFeatures()+0x67e>
c0018f7b:	51                   	push   ecx
c0018f7c:	51                   	push   ecx
c0018f7d:	68 b5 b3 02 c0       	push   0xc002b3b5
c0018f82:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018f86:	56                   	push   esi
c0018f87:	e8 80 78 fe ff       	call   c000080c <strcpy>
c0018f8c:	5f                   	pop    edi
c0018f8d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f93:	5d                   	pop    ebp
c0018f94:	66 c1 e8 06          	shr    ax,0x6
c0018f98:	0f b6 c0             	movzx  eax,al
c0018f9b:	50                   	push   eax
c0018f9c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018fa2:	c1 e8 0e             	shr    eax,0xe
c0018fa5:	0f b6 c0             	movzx  eax,al
c0018fa8:	50                   	push   eax
c0018fa9:	e8 9c f4 ff ff       	call   c001844a <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018fae:	5a                   	pop    edx
c0018faf:	59                   	pop    ecx
c0018fb0:	50                   	push   eax
c0018fb1:	56                   	push   esi
c0018fb2:	e8 95 79 fe ff       	call   c000094c <strcat>
c0018fb7:	5f                   	pop    edi
c0018fb8:	5d                   	pop    ebp
c0018fb9:	56                   	push   esi
c0018fba:	53                   	push   ebx
c0018fbb:	e8 36 ad ff ff       	call   c0013cf6 <Device::setName(char const*)>
c0018fc0:	58                   	pop    eax
c0018fc1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018fc7:	5a                   	pop    edx
c0018fc8:	68 bc b3 02 c0       	push   0xc002b3bc
c0018fcd:	50                   	push   eax
c0018fce:	e8 c5 78 fe ff       	call   c0000898 <strcmp>
c0018fd3:	83 c4 10             	add    esp,0x10
c0018fd6:	85 c0                	test   eax,eax
c0018fd8:	0f 85 71 03 00 00    	jne    c001934f <CPU::detectFeatures()+0x9e3>
c0018fde:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018fe5:	e9 65 03 00 00       	jmp    c001934f <CPU::detectFeatures()+0x9e3>
c0018fea:	83 f8 02             	cmp    eax,0x2
c0018fed:	0f 85 b5 00 00 00    	jne    c00190a8 <CPU::detectFeatures()+0x73c>
c0018ff3:	57                   	push   edi
c0018ff4:	57                   	push   edi
c0018ff5:	68 ce b3 02 c0       	push   0xc002b3ce
c0018ffa:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018ffe:	56                   	push   esi
c0018fff:	e8 08 78 fe ff       	call   c000080c <strcpy>
c0019004:	5d                   	pop    ebp
c0019005:	58                   	pop    eax
c0019006:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001900c:	66 c1 e8 06          	shr    ax,0x6
c0019010:	0f b6 c0             	movzx  eax,al
c0019013:	50                   	push   eax
c0019014:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001901a:	c1 e8 0e             	shr    eax,0xe
c001901d:	0f b6 c0             	movzx  eax,al
c0019020:	50                   	push   eax
c0019021:	e8 90 f2 ff ff       	call   c00182b6 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019026:	5a                   	pop    edx
c0019027:	59                   	pop    ecx
c0019028:	50                   	push   eax
c0019029:	56                   	push   esi
c001902a:	e8 1d 79 fe ff       	call   c000094c <strcat>
c001902f:	5f                   	pop    edi
c0019030:	5d                   	pop    ebp
c0019031:	56                   	push   esi
c0019032:	53                   	push   ebx
c0019033:	e8 be ac ff ff       	call   c0013cf6 <Device::setName(char const*)>
c0019038:	58                   	pop    eax
c0019039:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001903f:	5a                   	pop    edx
c0019040:	68 d3 b3 02 c0       	push   0xc002b3d3
c0019045:	50                   	push   eax
c0019046:	e8 4d 78 fe ff       	call   c0000898 <strcmp>
c001904b:	83 c4 10             	add    esp,0x10
c001904e:	85 c0                	test   eax,eax
c0019050:	75 20                	jne    c0019072 <CPU::detectFeatures()+0x706>
c0019052:	8b 15 08 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d908
c0019058:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001905e:	a8 01                	test   al,0x1
c0019060:	74 10                	je     c0019072 <CPU::detectFeatures()+0x706>
c0019062:	83 e0 fe             	and    eax,0xfffffffe
c0019065:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001906b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019072:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019078:	c1 e8 0e             	shr    eax,0xe
c001907b:	3c 05                	cmp    al,0x5
c001907d:	0f 85 cc 02 00 00    	jne    c001934f <CPU::detectFeatures()+0x9e3>
c0019083:	56                   	push   esi
c0019084:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001908a:	83 e0 0f             	and    eax,0xf
c001908d:	50                   	push   eax
c001908e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019094:	66 c1 e8 06          	shr    ax,0x6
c0019098:	0f b6 c0             	movzx  eax,al
c001909b:	50                   	push   eax
c001909c:	6a 05                	push   0x5
c001909e:	e8 89 f6 ff ff       	call   c001872c <CPU::AMD_K6_writeback(int, int, int)>
c00190a3:	e9 1f 02 00 00       	jmp    c00192c7 <CPU::detectFeatures()+0x95b>
c00190a8:	8d 50 fd             	lea    edx,[eax-0x3]
c00190ab:	83 fa 01             	cmp    edx,0x1
c00190ae:	76 09                	jbe    c00190b9 <CPU::detectFeatures()+0x74d>
c00190b0:	83 f8 06             	cmp    eax,0x6
c00190b3:	0f 85 91 01 00 00    	jne    c001924a <CPU::detectFeatures()+0x8de>
c00190b9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00190bf:	c1 ea 0e             	shr    edx,0xe
c00190c2:	80 fa 05             	cmp    dl,0x5
c00190c5:	75 7b                	jne    c0019142 <CPU::detectFeatures()+0x7d6>
c00190c7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00190cd:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00190d2:	66 81 fa 00 01       	cmp    dx,0x100
c00190d7:	75 0c                	jne    c00190e5 <CPU::detectFeatures()+0x779>
c00190d9:	51                   	push   ecx
c00190da:	51                   	push   ecx
c00190db:	68 da b3 02 c0       	push   0xc002b3da
c00190e0:	e9 dc 01 00 00       	jmp    c00192c1 <CPU::detectFeatures()+0x955>
c00190e5:	66 81 fa 00 02       	cmp    dx,0x200
c00190ea:	75 0c                	jne    c00190f8 <CPU::detectFeatures()+0x78c>
c00190ec:	52                   	push   edx
c00190ed:	52                   	push   edx
c00190ee:	68 ed b3 02 c0       	push   0xc002b3ed
c00190f3:	e9 c9 01 00 00       	jmp    c00192c1 <CPU::detectFeatures()+0x955>
c00190f8:	66 81 fa 40 02       	cmp    dx,0x240
c00190fd:	75 0c                	jne    c001910b <CPU::detectFeatures()+0x79f>
c00190ff:	50                   	push   eax
c0019100:	50                   	push   eax
c0019101:	68 ff b3 02 c0       	push   0xc002b3ff
c0019106:	e9 b6 01 00 00       	jmp    c00192c1 <CPU::detectFeatures()+0x955>
c001910b:	83 f8 06             	cmp    eax,0x6
c001910e:	75 0c                	jne    c001911c <CPU::detectFeatures()+0x7b0>
c0019110:	50                   	push   eax
c0019111:	50                   	push   eax
c0019112:	68 11 b4 02 c0       	push   0xc002b411
c0019117:	e9 a5 01 00 00       	jmp    c00192c1 <CPU::detectFeatures()+0x955>
c001911c:	83 f8 04             	cmp    eax,0x4
c001911f:	75 0c                	jne    c001912d <CPU::detectFeatures()+0x7c1>
c0019121:	50                   	push   eax
c0019122:	50                   	push   eax
c0019123:	68 1d b4 02 c0       	push   0xc002b41d
c0019128:	e9 94 01 00 00       	jmp    c00192c1 <CPU::detectFeatures()+0x955>
c001912d:	83 f8 03             	cmp    eax,0x3
c0019130:	0f 85 19 02 00 00    	jne    c001934f <CPU::detectFeatures()+0x9e3>
c0019136:	50                   	push   eax
c0019137:	50                   	push   eax
c0019138:	68 25 b4 02 c0       	push   0xc002b425
c001913d:	e9 7f 01 00 00       	jmp    c00192c1 <CPU::detectFeatures()+0x955>
c0019142:	80 fa 06             	cmp    dl,0x6
c0019145:	0f 85 db 00 00 00    	jne    c0019226 <CPU::detectFeatures()+0x8ba>
c001914b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019151:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019156:	66 81 fa 80 01       	cmp    dx,0x180
c001915b:	75 0c                	jne    c0019169 <CPU::detectFeatures()+0x7fd>
c001915d:	50                   	push   eax
c001915e:	50                   	push   eax
c001915f:	68 30 b4 02 c0       	push   0xc002b430
c0019164:	e9 58 01 00 00       	jmp    c00192c1 <CPU::detectFeatures()+0x955>
c0019169:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001916f:	66 f7 c1 80 ff       	test   cx,0xff80
c0019174:	75 0c                	jne    c0019182 <CPU::detectFeatures()+0x816>
c0019176:	50                   	push   eax
c0019177:	50                   	push   eax
c0019178:	68 40 b4 02 c0       	push   0xc002b440
c001917d:	e9 3f 01 00 00       	jmp    c00192c1 <CPU::detectFeatures()+0x955>
c0019182:	66 81 fa 40 02       	cmp    dx,0x240
c0019187:	75 0c                	jne    c0019195 <CPU::detectFeatures()+0x829>
c0019189:	55                   	push   ebp
c001918a:	55                   	push   ebp
c001918b:	68 47 b4 02 c0       	push   0xc002b447
c0019190:	e9 2c 01 00 00       	jmp    c00192c1 <CPU::detectFeatures()+0x955>
c0019195:	66 81 fa 80 02       	cmp    dx,0x280
c001919a:	75 0c                	jne    c00191a8 <CPU::detectFeatures()+0x83c>
c001919c:	57                   	push   edi
c001919d:	57                   	push   edi
c001919e:	68 50 b4 02 c0       	push   0xc002b450
c00191a3:	e9 19 01 00 00       	jmp    c00192c1 <CPU::detectFeatures()+0x955>
c00191a8:	66 81 fa 40 03       	cmp    dx,0x340
c00191ad:	74 ed                	je     c001919c <CPU::detectFeatures()+0x830>
c00191af:	66 81 fa c0 03       	cmp    dx,0x3c0
c00191b4:	75 0c                	jne    c00191c2 <CPU::detectFeatures()+0x856>
c00191b6:	56                   	push   esi
c00191b7:	56                   	push   esi
c00191b8:	68 57 b4 02 c0       	push   0xc002b457
c00191bd:	e9 ff 00 00 00       	jmp    c00192c1 <CPU::detectFeatures()+0x955>
c00191c2:	83 f8 06             	cmp    eax,0x6
c00191c5:	0f 84 45 ff ff ff    	je     c0019110 <CPU::detectFeatures()+0x7a4>
c00191cb:	83 f8 04             	cmp    eax,0x4
c00191ce:	0f 84 4d ff ff ff    	je     c0019121 <CPU::detectFeatures()+0x7b5>
c00191d4:	83 f8 03             	cmp    eax,0x3
c00191d7:	0f 85 72 01 00 00    	jne    c001934f <CPU::detectFeatures()+0x9e3>
c00191dd:	51                   	push   ecx
c00191de:	51                   	push   ecx
c00191df:	68 60 b4 02 c0       	push   0xc002b460
c00191e4:	53                   	push   ebx
c00191e5:	e8 0c ab ff ff       	call   c0013cf6 <Device::setName(char const*)>
c00191ea:	b1 c1                	mov    cl,0xc1
c00191ec:	88 c8                	mov    al,cl
c00191ee:	e6 22                	out    0x22,al
c00191f0:	e4 23                	in     al,0x23
c00191f2:	88 c2                	mov    dl,al
c00191f4:	88 c8                	mov    al,cl
c00191f6:	e6 22                	out    0x22,al
c00191f8:	88 d0                	mov    al,dl
c00191fa:	83 c8 10             	or     eax,0x10
c00191fd:	e6 23                	out    0x23,al
c00191ff:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019206:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019209:	89 d0                	mov    eax,edx
c001920b:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019211:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019215:	40                   	inc    eax
c0019216:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001921c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019221:	e9 a1 00 00 00       	jmp    c00192c7 <CPU::detectFeatures()+0x95b>
c0019226:	83 f8 06             	cmp    eax,0x6
c0019229:	0f 84 e1 fe ff ff    	je     c0019110 <CPU::detectFeatures()+0x7a4>
c001922f:	83 f8 04             	cmp    eax,0x4
c0019232:	0f 84 e9 fe ff ff    	je     c0019121 <CPU::detectFeatures()+0x7b5>
c0019238:	83 f8 03             	cmp    eax,0x3
c001923b:	0f 85 0e 01 00 00    	jne    c001934f <CPU::detectFeatures()+0x9e3>
c0019241:	52                   	push   edx
c0019242:	52                   	push   edx
c0019243:	68 6b b4 02 c0       	push   0xc002b46b
c0019248:	eb 77                	jmp    c00192c1 <CPU::detectFeatures()+0x955>
c001924a:	83 f8 07             	cmp    eax,0x7
c001924d:	75 09                	jne    c0019258 <CPU::detectFeatures()+0x8ec>
c001924f:	50                   	push   eax
c0019250:	50                   	push   eax
c0019251:	68 75 b4 02 c0       	push   0xc002b475
c0019256:	eb 69                	jmp    c00192c1 <CPU::detectFeatures()+0x955>
c0019258:	83 f8 0a             	cmp    eax,0xa
c001925b:	75 09                	jne    c0019266 <CPU::detectFeatures()+0x8fa>
c001925d:	50                   	push   eax
c001925e:	50                   	push   eax
c001925f:	68 80 b4 02 c0       	push   0xc002b480
c0019264:	eb 5b                	jmp    c00192c1 <CPU::detectFeatures()+0x955>
c0019266:	83 f8 0b             	cmp    eax,0xb
c0019269:	75 09                	jne    c0019274 <CPU::detectFeatures()+0x908>
c001926b:	50                   	push   eax
c001926c:	50                   	push   eax
c001926d:	68 88 b4 02 c0       	push   0xc002b488
c0019272:	eb 4d                	jmp    c00192c1 <CPU::detectFeatures()+0x955>
c0019274:	83 f8 08             	cmp    eax,0x8
c0019277:	75 09                	jne    c0019282 <CPU::detectFeatures()+0x916>
c0019279:	50                   	push   eax
c001927a:	50                   	push   eax
c001927b:	68 91 b4 02 c0       	push   0xc002b491
c0019280:	eb 3f                	jmp    c00192c1 <CPU::detectFeatures()+0x955>
c0019282:	83 f8 09             	cmp    eax,0x9
c0019285:	75 09                	jne    c0019290 <CPU::detectFeatures()+0x924>
c0019287:	50                   	push   eax
c0019288:	50                   	push   eax
c0019289:	68 99 b4 02 c0       	push   0xc002b499
c001928e:	eb 31                	jmp    c00192c1 <CPU::detectFeatures()+0x955>
c0019290:	83 f8 05             	cmp    eax,0x5
c0019293:	75 09                	jne    c001929e <CPU::detectFeatures()+0x932>
c0019295:	50                   	push   eax
c0019296:	50                   	push   eax
c0019297:	68 a1 b4 02 c0       	push   0xc002b4a1
c001929c:	eb 23                	jmp    c00192c1 <CPU::detectFeatures()+0x955>
c001929e:	83 f8 0c             	cmp    eax,0xc
c00192a1:	75 09                	jne    c00192ac <CPU::detectFeatures()+0x940>
c00192a3:	55                   	push   ebp
c00192a4:	55                   	push   ebp
c00192a5:	68 af b4 02 c0       	push   0xc002b4af
c00192aa:	eb 15                	jmp    c00192c1 <CPU::detectFeatures()+0x955>
c00192ac:	83 f8 0d             	cmp    eax,0xd
c00192af:	75 09                	jne    c00192ba <CPU::detectFeatures()+0x94e>
c00192b1:	57                   	push   edi
c00192b2:	57                   	push   edi
c00192b3:	68 ba b4 02 c0       	push   0xc002b4ba
c00192b8:	eb 07                	jmp    c00192c1 <CPU::detectFeatures()+0x955>
c00192ba:	56                   	push   esi
c00192bb:	56                   	push   esi
c00192bc:	68 ce b4 02 c0       	push   0xc002b4ce
c00192c1:	53                   	push   ebx
c00192c2:	e8 2f aa ff ff       	call   c0013cf6 <Device::setName(char const*)>
c00192c7:	83 c4 10             	add    esp,0x10
c00192ca:	e9 80 00 00 00       	jmp    c001934f <CPU::detectFeatures()+0x9e3>
c00192cf:	51                   	push   ecx
c00192d0:	51                   	push   ecx
c00192d1:	68 1a b3 02 c0       	push   0xc002b31a
c00192d6:	55                   	push   ebp
c00192d7:	e8 30 75 fe ff       	call   c000080c <strcpy>
c00192dc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00192e6:	e8 c3 6f fe ff       	call   c00002ae <is486>
c00192eb:	83 c4 10             	add    esp,0x10
c00192ee:	85 c0                	test   eax,eax
c00192f0:	74 2b                	je     c001931d <CPU::detectFeatures()+0x9b1>
c00192f2:	52                   	push   edx
c00192f3:	52                   	push   edx
c00192f4:	68 da b4 02 c0       	push   0xc002b4da
c00192f9:	53                   	push   ebx
c00192fa:	e8 f7 a9 ff ff       	call   c0013cf6 <Device::setName(char const*)>
c00192ff:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019306:	0f 20 c0             	mov    eax,cr0
c0019309:	83 e0 14             	and    eax,0x14
c001930c:	83 c4 10             	add    esp,0x10
c001930f:	83 f8 04             	cmp    eax,0x4
c0019312:	75 1f                	jne    c0019333 <CPU::detectFeatures()+0x9c7>
c0019314:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001931b:	eb 32                	jmp    c001934f <CPU::detectFeatures()+0x9e3>
c001931d:	50                   	push   eax
c001931e:	50                   	push   eax
c001931f:	68 e5 b4 02 c0       	push   0xc002b4e5
c0019324:	53                   	push   ebx
c0019325:	e8 cc a9 ff ff       	call   c0013cf6 <Device::setName(char const*)>
c001932a:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019331:	eb d3                	jmp    c0019306 <CPU::detectFeatures()+0x99a>
c0019333:	e8 51 6f fe ff       	call   c0000289 <hasLegacyFPU>
c0019338:	83 e0 01             	and    eax,0x1
c001933b:	8d 14 00             	lea    edx,[eax+eax*1]
c001933e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019344:	83 e0 fd             	and    eax,0xfffffffd
c0019347:	09 d0                	or     eax,edx
c0019349:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001934f:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019356:	83 c4 4c             	add    esp,0x4c
c0019359:	5b                   	pop    ebx
c001935a:	5e                   	pop    esi
c001935b:	5f                   	pop    edi
c001935c:	5d                   	pop    ebp
c001935d:	c3                   	ret    

c001935e <CPU::setupSMEP()>:
c001935e:	0f 20 e0             	mov    eax,cr4
c0019361:	0d 00 00 10 00       	or     eax,0x100000
c0019366:	0f 22 e0             	mov    cr4,eax
c0019369:	c3                   	ret    

c001936a <CPU::setupUMIP()>:
c001936a:	0f 20 e0             	mov    eax,cr4
c001936d:	80 cc 08             	or     ah,0x8
c0019370:	0f 22 e0             	mov    cr4,eax
c0019373:	c3                   	ret    

c0019374 <CPU::setupTSC()>:
c0019374:	0f 20 e0             	mov    eax,cr4
c0019377:	83 c8 04             	or     eax,0x4
c001937a:	0f 22 e0             	mov    cr4,eax
c001937d:	c3                   	ret    

c001937e <CPU::setupLargePages()>:
c001937e:	0f 20 e0             	mov    eax,cr4
c0019381:	83 c8 10             	or     eax,0x10
c0019384:	0f 22 e0             	mov    cr4,eax
c0019387:	c3                   	ret    

c0019388 <CPU::setupPAT()>:
c0019388:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c001938d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019394:	74 2c                	je     c00193c2 <CPU::setupPAT()+0x3a>
c0019396:	53                   	push   ebx
c0019397:	83 ec 10             	sub    esp,0x10
c001939a:	68 77 02 00 00       	push   0x277
c001939f:	50                   	push   eax
c00193a0:	e8 9b 57 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00193a5:	83 e2 f8             	and    edx,0xfffffff8
c00193a8:	83 ca 01             	or     edx,0x1
c00193ab:	52                   	push   edx
c00193ac:	50                   	push   eax
c00193ad:	68 77 02 00 00       	push   0x277
c00193b2:	ff 35 08 d9 02 c0    	push   DWORD PTR ds:0xc002d908
c00193b8:	e8 af 57 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c00193bd:	83 c4 28             	add    esp,0x28
c00193c0:	5b                   	pop    ebx
c00193c1:	c3                   	ret    
c00193c2:	c3                   	ret    
c00193c3:	90                   	nop

c00193c4 <CPU::setupMTRR()>:
c00193c4:	c3                   	ret    
c00193c5:	90                   	nop

c00193c6 <CPU::setupGlobalPages()>:
c00193c6:	0f 20 e0             	mov    eax,cr4
c00193c9:	0c 80                	or     al,0x80
c00193cb:	0f 22 e0             	mov    cr4,eax
c00193ce:	c3                   	ret    
c00193cf:	90                   	nop

c00193d0 <CPU::allowUsermodeDataAccess()>:
c00193d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00193d4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00193db:	74 03                	je     c00193e0 <CPU::allowUsermodeDataAccess()+0x10>
c00193dd:	0f 01 cb             	stac   
c00193e0:	c3                   	ret    
c00193e1:	90                   	nop

c00193e2 <CPU::prohibitUsermodeDataAccess()>:
c00193e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00193e6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00193ed:	74 03                	je     c00193f2 <CPU::prohibitUsermodeDataAccess()+0x10>
c00193ef:	0f 01 ca             	clac   
c00193f2:	c3                   	ret    
c00193f3:	90                   	nop

c00193f4 <CPU::setupSMAP()>:
c00193f4:	0f 20 e0             	mov    eax,cr4
c00193f7:	0d 00 00 20 00       	or     eax,0x200000
c00193fc:	0f 22 e0             	mov    cr4,eax
c00193ff:	eb e1                	jmp    c00193e2 <CPU::prohibitUsermodeDataAccess()>
c0019401:	90                   	nop

c0019402 <CPU::setupFeatures()>:
c0019402:	83 ec 0c             	sub    esp,0xc
c0019405:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019409:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019410:	74 07                	je     c0019419 <CPU::setupFeatures()+0x17>
c0019412:	52                   	push   edx
c0019413:	e8 46 ff ff ff       	call   c001935e <CPU::setupSMEP()>
c0019418:	58                   	pop    eax
c0019419:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019420:	74 07                	je     c0019429 <CPU::setupFeatures()+0x27>
c0019422:	52                   	push   edx
c0019423:	e8 cc ff ff ff       	call   c00193f4 <CPU::setupSMAP()>
c0019428:	58                   	pop    eax
c0019429:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019430:	74 07                	je     c0019439 <CPU::setupFeatures()+0x37>
c0019432:	52                   	push   edx
c0019433:	e8 32 ff ff ff       	call   c001936a <CPU::setupUMIP()>
c0019438:	58                   	pop    eax
c0019439:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019440:	74 07                	je     c0019449 <CPU::setupFeatures()+0x47>
c0019442:	52                   	push   edx
c0019443:	e8 2c ff ff ff       	call   c0019374 <CPU::setupTSC()>
c0019448:	58                   	pop    eax
c0019449:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019450:	74 07                	je     c0019459 <CPU::setupFeatures()+0x57>
c0019452:	52                   	push   edx
c0019453:	e8 26 ff ff ff       	call   c001937e <CPU::setupLargePages()>
c0019458:	59                   	pop    ecx
c0019459:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019460:	74 07                	je     c0019469 <CPU::setupFeatures()+0x67>
c0019462:	52                   	push   edx
c0019463:	e8 5e ff ff ff       	call   c00193c6 <CPU::setupGlobalPages()>
c0019468:	58                   	pop    eax
c0019469:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019470:	74 0c                	je     c001947e <CPU::setupFeatures()+0x7c>
c0019472:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019476:	83 c4 0c             	add    esp,0xc
c0019479:	e9 0a ff ff ff       	jmp    c0019388 <CPU::setupPAT()>
c001947e:	83 c4 0c             	add    esp,0xc
c0019481:	c3                   	ret    

c0019482 <CPU::open(int, int, void*)>:
c0019482:	57                   	push   edi
c0019483:	56                   	push   esi
c0019484:	53                   	push   ebx
c0019485:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019489:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001948d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019493:	83 ec 0c             	sub    esp,0xc
c0019496:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001949c:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00194a2:	50                   	push   eax
c00194a3:	e8 86 59 ff ff       	call   c000ee2e <GDT::setup()>
c00194a8:	83 c4 0c             	add    esp,0xc
c00194ab:	6a 00                	push   0x0
c00194ad:	68 ef be ad de       	push   0xdeadbeef
c00194b2:	57                   	push   edi
c00194b3:	e8 ea 76 ff ff       	call   c0010ba2 <TSS::setup(unsigned long, unsigned long)>
c00194b8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00194bb:	e8 c2 76 ff ff       	call   c0010b82 <TSS::flush()>
c00194c0:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00194c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00194c9:	e8 c4 5b ff ff       	call   c000f092 <IDT::setup()>
c00194ce:	b8 00 04 00 00       	mov    eax,0x400
c00194d3:	0f 23 f8             	mov    db7,eax
c00194d6:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00194e0:	e8 8c 64 ff ff       	call   c000f971 <Phys::allocatePage()>
c00194e5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00194eb:	89 30                	mov    DWORD PTR [eax],esi
c00194ed:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00194f3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00194f6:	58                   	pop    eax
c00194f7:	5a                   	pop    edx
c00194f8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00194fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019502:	e8 ab 87 ff ff       	call   c0011cb2 <VAS::setCPUSpecific(unsigned long)>
c0019507:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001950a:	e8 5d f4 ff ff       	call   c001896c <CPU::detectFeatures()>
c001950f:	e8 35 bc ff ff       	call   c0015149 <setupInterruptController()>
c0019514:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001951a:	a1 20 d9 02 c0       	mov    eax,ds:0xc002d920
c001951f:	83 e0 10             	and    eax,0x10
c0019522:	83 f8 01             	cmp    eax,0x1
c0019525:	19 c0                	sbb    eax,eax
c0019527:	83 e0 46             	and    eax,0x46
c001952a:	83 c0 1e             	add    eax,0x1e
c001952d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019530:	e8 02 d2 ff ff       	call   c0016737 <setupTimer(int)>
c0019535:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001953b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001953e:	e8 bf fe ff ff       	call   c0019402 <CPU::setupFeatures()>
c0019543:	83 c4 10             	add    esp,0x10
c0019546:	31 c0                	xor    eax,eax
c0019548:	5b                   	pop    ebx
c0019549:	5e                   	pop    esi
c001954a:	5f                   	pop    edi
c001954b:	c3                   	ret    

c001954c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001954c:	57                   	push   edi
c001954d:	56                   	push   esi
c001954e:	53                   	push   ebx
c001954f:	51                   	push   ecx
c0019550:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019554:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019557:	0f 02 c0             	lar    eax,ax
c001955a:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001955d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019561:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019564:	88 ca                	mov    dl,cl
c0019566:	c0 ea 06             	shr    dl,0x6
c0019569:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001956d:	89 ca                	mov    edx,ecx
c001956f:	66 c1 ea 03          	shr    dx,0x3
c0019573:	83 e2 07             	and    edx,0x7
c0019576:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001957b:	88 17                	mov    BYTE PTR [edi],dl
c001957d:	0f 84 a6 01 00 00    	je     c0019729 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019583:	83 e1 07             	and    ecx,0x7
c0019586:	80 f9 04             	cmp    cl,0x4
c0019589:	0f 84 98 00 00 00    	je     c0019627 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001958f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019594:	0f 95 c0             	setne  al
c0019597:	80 f9 05             	cmp    cl,0x5
c001959a:	0f 95 c2             	setne  dl
c001959d:	08 c2                	or     dl,al
c001959f:	74 79                	je     c001961a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00195a1:	84 c9                	test   cl,cl
c00195a3:	75 05                	jne    c00195aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00195a5:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00195a8:	eb 3c                	jmp    c00195e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195aa:	80 f9 01             	cmp    cl,0x1
c00195ad:	75 05                	jne    c00195b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00195af:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00195b2:	eb 32                	jmp    c00195e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195b4:	80 f9 02             	cmp    cl,0x2
c00195b7:	75 05                	jne    c00195be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00195b9:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00195bc:	eb 28                	jmp    c00195e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195be:	31 c0                	xor    eax,eax
c00195c0:	80 f9 03             	cmp    cl,0x3
c00195c3:	75 05                	jne    c00195ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00195c5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00195c8:	eb 1c                	jmp    c00195e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195ca:	80 f9 05             	cmp    cl,0x5
c00195cd:	75 05                	jne    c00195d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00195cf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00195d2:	eb 12                	jmp    c00195e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195d4:	80 f9 06             	cmp    cl,0x6
c00195d7:	75 05                	jne    c00195de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00195d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00195dc:	eb 08                	jmp    c00195e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195de:	80 f9 07             	cmp    cl,0x7
c00195e1:	75 03                	jne    c00195e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195e3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00195e6:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00195eb:	75 10                	jne    c00195fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00195ed:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00195f1:	b9 03 00 00 00       	mov    ecx,0x3
c00195f6:	01 d0                	add    eax,edx
c00195f8:	e9 37 01 00 00       	jmp    c0019734 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00195fd:	b9 02 00 00 00       	mov    ecx,0x2
c0019602:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019607:	0f 85 27 01 00 00    	jne    c0019734 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001960d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019610:	b9 06 00 00 00       	mov    ecx,0x6
c0019615:	e9 1a 01 00 00       	jmp    c0019734 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001961a:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001961d:	b9 06 00 00 00       	mov    ecx,0x6
c0019622:	e9 0f 01 00 00       	jmp    c0019736 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019627:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001962a:	88 ca                	mov    dl,cl
c001962c:	c0 ea 06             	shr    dl,0x6
c001962f:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019633:	89 ca                	mov    edx,ecx
c0019635:	66 c1 ea 03          	shr    dx,0x3
c0019639:	83 e2 07             	and    edx,0x7
c001963c:	80 e1 07             	and    cl,0x7
c001963f:	75 05                	jne    c0019646 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019641:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019644:	eb 4c                	jmp    c0019692 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019646:	80 f9 01             	cmp    cl,0x1
c0019649:	75 05                	jne    c0019650 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001964b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001964e:	eb 42                	jmp    c0019692 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019650:	80 f9 02             	cmp    cl,0x2
c0019653:	75 05                	jne    c001965a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019655:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019658:	eb 38                	jmp    c0019692 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001965a:	80 f9 03             	cmp    cl,0x3
c001965d:	75 05                	jne    c0019664 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001965f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019662:	eb 2e                	jmp    c0019692 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019664:	80 f9 04             	cmp    cl,0x4
c0019667:	75 12                	jne    c001967b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019669:	f6 c4 60             	test   ah,0x60
c001966c:	75 08                	jne    c0019676 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001966e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019671:	8d 78 14             	lea    edi,[eax+0x14]
c0019674:	eb 1c                	jmp    c0019692 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019676:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019679:	eb 17                	jmp    c0019692 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001967b:	80 f9 05             	cmp    cl,0x5
c001967e:	75 05                	jne    c0019685 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019680:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019683:	eb 0d                	jmp    c0019692 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019685:	80 f9 06             	cmp    cl,0x6
c0019688:	75 05                	jne    c001968f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001968a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001968d:	eb 03                	jmp    c0019692 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001968f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019692:	84 d2                	test   dl,dl
c0019694:	75 05                	jne    c001969b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019696:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019699:	eb 3c                	jmp    c00196d7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001969b:	80 fa 01             	cmp    dl,0x1
c001969e:	75 05                	jne    c00196a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00196a0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00196a3:	eb 32                	jmp    c00196d7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196a5:	80 fa 02             	cmp    dl,0x2
c00196a8:	75 05                	jne    c00196af <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00196aa:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00196ad:	eb 28                	jmp    c00196d7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196af:	80 fa 03             	cmp    dl,0x3
c00196b2:	75 05                	jne    c00196b9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00196b4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00196b7:	eb 1e                	jmp    c00196d7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196b9:	31 c0                	xor    eax,eax
c00196bb:	80 fa 04             	cmp    dl,0x4
c00196be:	74 17                	je     c00196d7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196c0:	80 fa 05             	cmp    dl,0x5
c00196c3:	75 05                	jne    c00196ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00196c5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00196c8:	eb 0d                	jmp    c00196d7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196ca:	80 fa 06             	cmp    dl,0x6
c00196cd:	75 05                	jne    c00196d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00196cf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00196d2:	eb 03                	jmp    c00196d7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196d4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00196d7:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00196dc:	0f 94 c2             	sete   dl
c00196df:	80 f9 05             	cmp    cl,0x5
c00196e2:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00196e6:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00196eb:	d3 e0                	shl    eax,cl
c00196ed:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00196f1:	74 0a                	je     c00196fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00196f3:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00196f6:	b9 07 00 00 00       	mov    ecx,0x7
c00196fb:	eb 37                	jmp    c0019734 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00196fd:	01 f8                	add    eax,edi
c00196ff:	b9 03 00 00 00       	mov    ecx,0x3
c0019704:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019709:	74 2b                	je     c0019736 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001970b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019710:	75 0d                	jne    c001971f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019712:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019716:	01 c8                	add    eax,ecx
c0019718:	b9 04 00 00 00       	mov    ecx,0x4
c001971d:	eb 17                	jmp    c0019736 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001971f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019722:	b9 07 00 00 00       	mov    ecx,0x7
c0019727:	eb 0d                	jmp    c0019736 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019729:	b9 02 00 00 00       	mov    ecx,0x2
c001972e:	b2 01                	mov    dl,0x1
c0019730:	31 c0                	xor    eax,eax
c0019732:	eb 02                	jmp    c0019736 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019734:	31 d2                	xor    edx,edx
c0019736:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001973a:	89 0b                	mov    DWORD PTR [ebx],ecx
c001973c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019740:	88 11                	mov    BYTE PTR [ecx],dl
c0019742:	5a                   	pop    edx
c0019743:	5b                   	pop    ebx
c0019744:	5e                   	pop    esi
c0019745:	5f                   	pop    edi
c0019746:	c3                   	ret    

c0019747 <Krnl::smpEntry()>:
c0019747:	eb fe                	jmp    c0019747 <Krnl::smpEntry()>

c0019749 <Krnl::startCPU(int)>:
c0019749:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c001974e:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019755:	0f 84 36 01 00 00    	je     c0019891 <Krnl::startCPU(int)+0x148>
c001975b:	53                   	push   ebx
c001975c:	83 ec 10             	sub    esp,0x10
c001975f:	fa                   	cli    
c0019760:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c0019766:	6a 1b                	push   0x1b
c0019768:	ff 35 08 d9 02 c0    	push   DWORD PTR ds:0xc002d908
c001976e:	e8 cd 53 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0019773:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019778:	89 c3                	mov    ebx,eax
c001977a:	58                   	pop    eax
c001977b:	5a                   	pop    edx
c001977c:	53                   	push   ebx
c001977d:	68 1c b5 02 c0       	push   0xc002b51c
c0019782:	e8 40 8f ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0019787:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019791:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019795:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001979f:	c1 e0 18             	shl    eax,0x18
c00197a2:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c00197a8:	83 c4 10             	add    esp,0x10
c00197ab:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00197b1:	09 c2                	or     edx,eax
c00197b3:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00197b9:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00197bf:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00197c5:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00197cb:	80 cd c5             	or     ch,0xc5
c00197ce:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00197d4:	f3 90                	pause  
c00197d6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00197d8:	0f ba e1 0c          	bt     ecx,0xc
c00197dc:	72 f6                	jb     c00197d4 <Krnl::startCPU(int)+0x8b>
c00197de:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00197e4:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00197ea:	09 c1                	or     ecx,eax
c00197ec:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00197f2:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00197f8:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00197fe:	80 cd 85             	or     ch,0x85
c0019801:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019807:	f3 90                	pause  
c0019809:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001980b:	0f ba e1 0c          	bt     ecx,0xc
c001980f:	72 f6                	jb     c0019807 <Krnl::startCPU(int)+0xbe>
c0019811:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001981b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019821:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019827:	09 c1                	or     ecx,eax
c0019829:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001982f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019835:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001983b:	81 c9 02 06 00 00    	or     ecx,0x602
c0019841:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019847:	f3 90                	pause  
c0019849:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001984b:	0f ba e1 0c          	bt     ecx,0xc
c001984f:	72 f6                	jb     c0019847 <Krnl::startCPU(int)+0xfe>
c0019851:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001985b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019861:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019867:	09 c8                	or     eax,ecx
c0019869:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001986f:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019875:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001987a:	0d 02 06 00 00       	or     eax,0x602
c001987f:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019885:	f3 90                	pause  
c0019887:	8b 02                	mov    eax,DWORD PTR [edx]
c0019889:	0f ba e0 0c          	bt     eax,0xc
c001988d:	72 f6                	jb     c0019885 <Krnl::startCPU(int)+0x13c>
c001988f:	eb fe                	jmp    c001988f <Krnl::startCPU(int)+0x146>
c0019891:	c3                   	ret    

c0019892 <Krnl::startCPUs()>:
c0019892:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0019897:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001989d:	88 c2                	mov    dl,al
c001989f:	83 e2 0a             	and    edx,0xa
c00198a2:	80 fa 0a             	cmp    dl,0xa
c00198a5:	75 09                	jne    c00198b0 <Krnl::startCPUs()+0x1e>
c00198a7:	a8 01                	test   al,0x1
c00198a9:	74 05                	je     c00198b0 <Krnl::startCPUs()+0x1e>
c00198ab:	e9 eb 68 fe ff       	jmp    c000019b <prepareTramp>
c00198b0:	c3                   	ret    
c00198b1:	90                   	nop

c00198b2 <EnvVarContainer::getEnv(char const*)>:
c00198b2:	57                   	push   edi
c00198b3:	56                   	push   esi
c00198b4:	53                   	push   ebx
c00198b5:	31 db                	xor    ebx,ebx
c00198b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00198bb:	39 1e                	cmp    DWORD PTR [esi],ebx
c00198bd:	7e 2b                	jle    c00198ea <EnvVarContainer::getEnv(char const*)+0x38>
c00198bf:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00198c6:	50                   	push   eax
c00198c7:	50                   	push   eax
c00198c8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198cb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00198ce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00198d2:	e8 c1 6f fe ff       	call   c0000898 <strcmp>
c00198d7:	83 c4 10             	add    esp,0x10
c00198da:	85 c0                	test   eax,eax
c00198dc:	75 09                	jne    c00198e7 <EnvVarContainer::getEnv(char const*)+0x35>
c00198de:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198e1:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00198e5:	eb 05                	jmp    c00198ec <EnvVarContainer::getEnv(char const*)+0x3a>
c00198e7:	43                   	inc    ebx
c00198e8:	eb d1                	jmp    c00198bb <EnvVarContainer::getEnv(char const*)+0x9>
c00198ea:	31 c0                	xor    eax,eax
c00198ec:	5b                   	pop    ebx
c00198ed:	5e                   	pop    esi
c00198ee:	5f                   	pop    edi
c00198ef:	c3                   	ret    

c00198f0 <EnvVarContainer::setEnv(char const*, char const*)>:
c00198f0:	55                   	push   ebp
c00198f1:	57                   	push   edi
c00198f2:	56                   	push   esi
c00198f3:	53                   	push   ebx
c00198f4:	83 ec 28             	sub    esp,0x28
c00198f7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00198fb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00198ff:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019903:	56                   	push   esi
c0019904:	e8 63 6e fe ff       	call   c000076c <strlen>
c0019909:	40                   	inc    eax
c001990a:	89 04 24             	mov    DWORD PTR [esp],eax
c001990d:	e8 87 5c ff ff       	call   c000f599 <malloc>
c0019912:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019915:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019919:	e8 4e 6e fe ff       	call   c000076c <strlen>
c001991e:	40                   	inc    eax
c001991f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019922:	e8 72 5c ff ff       	call   c000f599 <malloc>
c0019927:	89 34 24             	mov    DWORD PTR [esp],esi
c001992a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001992e:	e8 39 6e fe ff       	call   c000076c <strlen>
c0019933:	83 c4 0c             	add    esp,0xc
c0019936:	40                   	inc    eax
c0019937:	50                   	push   eax
c0019938:	6a 00                	push   0x0
c001993a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001993e:	e8 0d 6e fe ff       	call   c0000750 <memset>
c0019943:	89 34 24             	mov    DWORD PTR [esp],esi
c0019946:	e8 21 6e fe ff       	call   c000076c <strlen>
c001994b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001994f:	8d 48 01             	lea    ecx,[eax+0x1]
c0019952:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019954:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019957:	89 de                	mov    esi,ebx
c0019959:	e8 0e 6e fe ff       	call   c000076c <strlen>
c001995e:	83 c4 0c             	add    esp,0xc
c0019961:	40                   	inc    eax
c0019962:	50                   	push   eax
c0019963:	6a 00                	push   0x0
c0019965:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019969:	e8 e2 6d fe ff       	call   c0000750 <memset>
c001996e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019971:	e8 f6 6d fe ff       	call   c000076c <strlen>
c0019976:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001997a:	8d 48 01             	lea    ecx,[eax+0x1]
c001997d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001997f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019982:	40                   	inc    eax
c0019983:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019986:	c1 e0 03             	shl    eax,0x3
c0019989:	5a                   	pop    edx
c001998a:	59                   	pop    ecx
c001998b:	50                   	push   eax
c001998c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001998f:	e8 f1 5b ff ff       	call   c000f585 <realloc>
c0019994:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019998:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001999b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001999e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00199a2:	b9 08 00 00 00       	mov    ecx,0x8
c00199a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199a9:	83 c4 2c             	add    esp,0x2c
c00199ac:	5b                   	pop    ebx
c00199ad:	5e                   	pop    esi
c00199ae:	5f                   	pop    edi
c00199af:	5d                   	pop    ebp
c00199b0:	c3                   	ret    
c00199b1:	90                   	nop

c00199b2 <EnvVarContainer::deleteEnv(char const*)>:
c00199b2:	c3                   	ret    
c00199b3:	90                   	nop

c00199b4 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00199b4:	55                   	push   ebp
c00199b5:	57                   	push   edi
c00199b6:	56                   	push   esi
c00199b7:	53                   	push   ebx
c00199b8:	81 ec 38 01 00 00    	sub    esp,0x138
c00199be:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00199c5:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00199cc:	68 14 01 00 00       	push   0x114
c00199d1:	e8 c3 5b ff ff       	call   c000f599 <malloc>
c00199d6:	83 c4 0c             	add    esp,0xc
c00199d9:	89 c3                	mov    ebx,eax
c00199db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00199de:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00199e5:	50                   	push   eax
c00199e6:	e8 3b 92 ff ff       	call   c0012c26 <File::File(char const*, Process*)>
c00199eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199ee:	e8 05 95 ff ff       	call   c0012ef8 <File::exists()>
c00199f3:	83 c4 10             	add    esp,0x10
c00199f6:	84 c0                	test   al,al
c00199f8:	75 31                	jne    c0019a2b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00199fa:	50                   	push   eax
c00199fb:	50                   	push   eax
c00199fc:	6a 12                	push   0x12
c00199fe:	53                   	push   ebx
c00199ff:	e8 86 92 ff ff       	call   c0012c8a <File::open(FileOpenMode)>
c0019a04:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a06:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019a09:	89 34 24             	mov    DWORD PTR [esp],esi
c0019a0c:	e8 5b 6d fe ff       	call   c000076c <strlen>
c0019a11:	5a                   	pop    edx
c0019a12:	31 d2                	xor    edx,edx
c0019a14:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a18:	51                   	push   ecx
c0019a19:	56                   	push   esi
c0019a1a:	52                   	push   edx
c0019a1b:	50                   	push   eax
c0019a1c:	53                   	push   ebx
c0019a1d:	ff d7                	call   edi
c0019a1f:	83 c4 14             	add    esp,0x14
c0019a22:	53                   	push   ebx
c0019a23:	e8 c0 92 ff ff       	call   c0012ce8 <File::close()>
c0019a28:	83 c4 10             	add    esp,0x10
c0019a2b:	56                   	push   esi
c0019a2c:	31 f6                	xor    esi,esi
c0019a2e:	68 00 01 00 00       	push   0x100
c0019a33:	6a 00                	push   0x0
c0019a35:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019a39:	50                   	push   eax
c0019a3a:	e8 11 6d fe ff       	call   c0000750 <memset>
c0019a3f:	5f                   	pop    edi
c0019a40:	58                   	pop    eax
c0019a41:	6a 01                	push   0x1
c0019a43:	53                   	push   ebx
c0019a44:	e8 41 92 ff ff       	call   c0012c8a <File::open(FileOpenMode)>
c0019a49:	83 c4 10             	add    esp,0x10
c0019a4c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019a54:	83 ec 0c             	sub    esp,0xc
c0019a57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a59:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a5d:	51                   	push   ecx
c0019a5e:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019a62:	52                   	push   edx
c0019a63:	6a 00                	push   0x0
c0019a65:	6a 01                	push   0x1
c0019a67:	53                   	push   ebx
c0019a68:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019a6b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019a6f:	83 c4 20             	add    esp,0x20
c0019a72:	3c 0d                	cmp    al,0xd
c0019a74:	0f 84 09 01 00 00    	je     c0019b83 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019a7a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019a7f:	0f 84 ef 00 00 00    	je     c0019b74 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019a85:	3c 0a                	cmp    al,0xa
c0019a87:	74 13                	je     c0019a9c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019a89:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019a8e:	74 0c                	je     c0019a9c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019a90:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019a96:	0f 8e d8 00 00 00    	jle    c0019b74 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019a9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019aa0:	83 ec 0c             	sub    esp,0xc
c0019aa3:	8d 78 01             	lea    edi,[eax+0x1]
c0019aa6:	57                   	push   edi
c0019aa7:	e8 ed 5a ff ff       	call   c000f599 <malloc>
c0019aac:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019ab0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019ab4:	8d 56 04             	lea    edx,[esi+0x4]
c0019ab7:	89 14 24             	mov    DWORD PTR [esp],edx
c0019aba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019abe:	e8 d6 5a ff ff       	call   c000f599 <malloc>
c0019ac3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019ac7:	83 c4 0c             	add    esp,0xc
c0019aca:	57                   	push   edi
c0019acb:	6a 00                	push   0x0
c0019acd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019ad1:	e8 7a 6c fe ff       	call   c0000750 <memset>
c0019ad6:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019ada:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019ade:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019ae2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ae4:	83 c4 0c             	add    esp,0xc
c0019ae7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019aeb:	52                   	push   edx
c0019aec:	6a 00                	push   0x0
c0019aee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019af2:	e8 59 6c fe ff       	call   c0000750 <memset>
c0019af7:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019afb:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019aff:	89 34 24             	mov    DWORD PTR [esp],esi
c0019b02:	e8 65 6c fe ff       	call   c000076c <strlen>
c0019b07:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019b0b:	89 c1                	mov    ecx,eax
c0019b0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b0f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019b12:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019b15:	40                   	inc    eax
c0019b16:	83 c4 10             	add    esp,0x10
c0019b19:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019b1c:	85 d2                	test   edx,edx
c0019b1e:	75 0c                	jne    c0019b2c <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019b20:	83 ec 0c             	sub    esp,0xc
c0019b23:	6a 08                	push   0x8
c0019b25:	e8 6f 5a ff ff       	call   c000f599 <malloc>
c0019b2a:	eb 0c                	jmp    c0019b38 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019b2c:	c1 e0 03             	shl    eax,0x3
c0019b2f:	51                   	push   ecx
c0019b30:	51                   	push   ecx
c0019b31:	50                   	push   eax
c0019b32:	52                   	push   edx
c0019b33:	e8 4d 5a ff ff       	call   c000f585 <realloc>
c0019b38:	83 c4 10             	add    esp,0x10
c0019b3b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019b3e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b41:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019b44:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019b48:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019b4c:	b9 08 00 00 00       	mov    ecx,0x8
c0019b51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b53:	31 f6                	xor    esi,esi
c0019b55:	50                   	push   eax
c0019b56:	68 00 01 00 00       	push   0x100
c0019b5b:	6a 00                	push   0x0
c0019b5d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019b61:	50                   	push   eax
c0019b62:	e8 e9 6b fe ff       	call   c0000750 <memset>
c0019b67:	83 c4 10             	add    esp,0x10
c0019b6a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019b72:	eb 0f                	jmp    c0019b83 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019b74:	3c 3d                	cmp    al,0x3d
c0019b76:	74 07                	je     c0019b7f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019b78:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019b7c:	46                   	inc    esi
c0019b7d:	eb 04                	jmp    c0019b83 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019b7f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019b83:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019b88:	0f 85 c6 fe ff ff    	jne    c0019a54 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019b8e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019b94:	5b                   	pop    ebx
c0019b95:	5e                   	pop    esi
c0019b96:	5f                   	pop    edi
c0019b97:	5d                   	pop    ebp
c0019b98:	c3                   	ret    
c0019b99:	90                   	nop

c0019b9a <EnvVarContainer::__loadSystem()>:
c0019b9a:	83 ec 10             	sub    esp,0x10
c0019b9d:	68 40 ce 02 c0       	push   0xc002ce40
c0019ba2:	68 2d b5 02 c0       	push   0xc002b52d
c0019ba7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019bab:	e8 04 fe ff ff       	call   c00199b4 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019bb0:	83 c4 1c             	add    esp,0x1c
c0019bb3:	c3                   	ret    

c0019bb4 <EnvVarContainer::__loadUser()>:
c0019bb4:	c3                   	ret    
c0019bb5:	90                   	nop

c0019bb6 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019bb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019bc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019bc8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019bcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bcf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019bd6:	90                   	nop
c0019bd7:	c3                   	ret    

c0019bd8 <EnvVarContainer::~EnvVarContainer()>:
c0019bd8:	83 ec 0c             	sub    esp,0xc
c0019bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bdf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019be2:	85 c0                	test   eax,eax
c0019be4:	74 1d                	je     c0019c03 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bea:	8b 00                	mov    eax,DWORD PTR [eax]
c0019bec:	85 c0                	test   eax,eax
c0019bee:	74 13                	je     c0019c03 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bf4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019bf7:	83 ec 0c             	sub    esp,0xc
c0019bfa:	50                   	push   eax
c0019bfb:	e8 a9 59 ff ff       	call   c000f5a9 <free>
c0019c00:	83 c4 10             	add    esp,0x10
c0019c03:	90                   	nop
c0019c04:	83 c4 0c             	add    esp,0xc
c0019c07:	c3                   	ret    

c0019c08 <Krnl::getEnv(Process*, char const*)>:
c0019c08:	53                   	push   ebx
c0019c09:	83 ec 08             	sub    esp,0x8
c0019c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019c14:	39 05 50 0e 03 c0    	cmp    DWORD PTR ds:0xc0030e50,eax
c0019c1a:	74 04                	je     c0019c20 <Krnl::getEnv(Process*, char const*)+0x18>
c0019c1c:	85 c0                	test   eax,eax
c0019c1e:	75 0b                	jne    c0019c2b <Krnl::getEnv(Process*, char const*)+0x23>
c0019c20:	a1 34 04 03 c0       	mov    eax,ds:0xc0030434
c0019c25:	85 c0                	test   eax,eax
c0019c27:	75 19                	jne    c0019c42 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019c29:	eb 27                	jmp    c0019c52 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019c2b:	52                   	push   edx
c0019c2c:	52                   	push   edx
c0019c2d:	53                   	push   ebx
c0019c2e:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019c34:	e8 79 fc ff ff       	call   c00198b2 <EnvVarContainer::getEnv(char const*)>
c0019c39:	83 c4 10             	add    esp,0x10
c0019c3c:	85 c0                	test   eax,eax
c0019c3e:	75 28                	jne    c0019c68 <Krnl::getEnv(Process*, char const*)+0x60>
c0019c40:	eb de                	jmp    c0019c20 <Krnl::getEnv(Process*, char const*)+0x18>
c0019c42:	52                   	push   edx
c0019c43:	52                   	push   edx
c0019c44:	53                   	push   ebx
c0019c45:	50                   	push   eax
c0019c46:	e8 67 fc ff ff       	call   c00198b2 <EnvVarContainer::getEnv(char const*)>
c0019c4b:	83 c4 10             	add    esp,0x10
c0019c4e:	85 c0                	test   eax,eax
c0019c50:	75 16                	jne    c0019c68 <Krnl::getEnv(Process*, char const*)+0x60>
c0019c52:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019c56:	a1 38 04 03 c0       	mov    eax,ds:0xc0030438
c0019c5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019c5f:	83 c4 08             	add    esp,0x8
c0019c62:	5b                   	pop    ebx
c0019c63:	e9 4a fc ff ff       	jmp    c00198b2 <EnvVarContainer::getEnv(char const*)>
c0019c68:	83 c4 08             	add    esp,0x8
c0019c6b:	5b                   	pop    ebx
c0019c6c:	c3                   	ret    

c0019c6d <Krnl::setEnvSystem(char const*, char const*)>:
c0019c6d:	83 ec 10             	sub    esp,0x10
c0019c70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c78:	ff 35 38 04 03 c0    	push   DWORD PTR ds:0xc0030438
c0019c7e:	e8 6d fc ff ff       	call   c00198f0 <EnvVarContainer::setEnv(char const*, char const*)>
c0019c83:	83 c4 1c             	add    esp,0x1c
c0019c86:	c3                   	ret    

c0019c87 <Krnl::setEnvUser(char const*, char const*)>:
c0019c87:	a1 34 04 03 c0       	mov    eax,ds:0xc0030434
c0019c8c:	85 c0                	test   eax,eax
c0019c8e:	74 15                	je     c0019ca5 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019c90:	83 ec 10             	sub    esp,0x10
c0019c93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c97:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c9b:	50                   	push   eax
c0019c9c:	e8 4f fc ff ff       	call   c00198f0 <EnvVarContainer::setEnv(char const*, char const*)>
c0019ca1:	83 c4 1c             	add    esp,0x1c
c0019ca4:	c3                   	ret    
c0019ca5:	c3                   	ret    

c0019ca6 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019ca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019caa:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019cb0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019cb4:	e9 37 fc ff ff       	jmp    c00198f0 <EnvVarContainer::setEnv(char const*, char const*)>

c0019cb9 <Krnl::deleteEnvSystem(char const*)>:
c0019cb9:	c3                   	ret    

c0019cba <Krnl::deleteEnvUser(char const*)>:
c0019cba:	c3                   	ret    

c0019cbb <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019cbb:	c3                   	ret    

c0019cbc <Krnl::newProcessEnv(Process*)>:
c0019cbc:	83 ec 28             	sub    esp,0x28
c0019cbf:	6a 0c                	push   0xc
c0019cc1:	e8 d3 58 ff ff       	call   c000f599 <malloc>
c0019cc6:	5a                   	pop    edx
c0019cc7:	59                   	pop    ecx
c0019cc8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ccc:	50                   	push   eax
c0019ccd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019cd1:	e8 e0 fe ff ff       	call   c0019bb6 <EnvVarContainer::EnvVarContainer(Process*)>
c0019cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019cda:	83 c4 2c             	add    esp,0x2c
c0019cdd:	c3                   	ret    

c0019cde <Krnl::copyProcessEnv(Process*, Process*)>:
c0019cde:	57                   	push   edi
c0019cdf:	56                   	push   esi
c0019ce0:	53                   	push   ebx
c0019ce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ce5:	83 ec 0c             	sub    esp,0xc
c0019ce8:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019cee:	6a 0c                	push   0xc
c0019cf0:	e8 a4 58 ff ff       	call   c000f599 <malloc>
c0019cf5:	89 c3                	mov    ebx,eax
c0019cf7:	58                   	pop    eax
c0019cf8:	5a                   	pop    edx
c0019cf9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019cfd:	53                   	push   ebx
c0019cfe:	e8 b3 fe ff ff       	call   c0019bb6 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d03:	8b 07                	mov    eax,DWORD PTR [edi]
c0019d05:	89 03                	mov    DWORD PTR [ebx],eax
c0019d07:	c1 e0 03             	shl    eax,0x3
c0019d0a:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d0d:	e8 87 58 ff ff       	call   c000f599 <malloc>
c0019d12:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019d15:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019d17:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019d1a:	c1 e1 03             	shl    ecx,0x3
c0019d1d:	89 c7                	mov    edi,eax
c0019d1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d21:	83 c4 10             	add    esp,0x10
c0019d24:	89 d8                	mov    eax,ebx
c0019d26:	5b                   	pop    ebx
c0019d27:	5e                   	pop    esi
c0019d28:	5f                   	pop    edi
c0019d29:	c3                   	ret    

c0019d2a <Krnl::loadSystemEnv()>:
c0019d2a:	53                   	push   ebx
c0019d2b:	83 ec 14             	sub    esp,0x14
c0019d2e:	6a 0c                	push   0xc
c0019d30:	e8 64 58 ff ff       	call   c000f599 <malloc>
c0019d35:	89 c3                	mov    ebx,eax
c0019d37:	58                   	pop    eax
c0019d38:	5a                   	pop    edx
c0019d39:	ff 35 50 0e 03 c0    	push   DWORD PTR ds:0xc0030e50
c0019d3f:	53                   	push   ebx
c0019d40:	e8 71 fe ff ff       	call   c0019bb6 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d48:	89 1d 38 04 03 c0    	mov    DWORD PTR ds:0xc0030438,ebx
c0019d4e:	e8 47 fe ff ff       	call   c0019b9a <EnvVarContainer::__loadSystem()>
c0019d53:	83 c4 18             	add    esp,0x18
c0019d56:	5b                   	pop    ebx
c0019d57:	c3                   	ret    

c0019d58 <Krnl::loadUserEnv()>:
c0019d58:	53                   	push   ebx
c0019d59:	83 ec 14             	sub    esp,0x14
c0019d5c:	6a 0c                	push   0xc
c0019d5e:	e8 36 58 ff ff       	call   c000f599 <malloc>
c0019d63:	89 c3                	mov    ebx,eax
c0019d65:	58                   	pop    eax
c0019d66:	5a                   	pop    edx
c0019d67:	ff 35 50 0e 03 c0    	push   DWORD PTR ds:0xc0030e50
c0019d6d:	53                   	push   ebx
c0019d6e:	e8 43 fe ff ff       	call   c0019bb6 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d73:	89 1d 34 04 03 c0    	mov    DWORD PTR ds:0xc0030434,ebx
c0019d79:	83 c4 18             	add    esp,0x18
c0019d7c:	5b                   	pop    ebx
c0019d7d:	c3                   	ret    

c0019d7e <Krnl::flushEnv()>:
c0019d7e:	c3                   	ret    

c0019d7f <Krnl::getProcessTotalEnvCount(Process*)>:
c0019d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d83:	8b 15 34 04 03 c0    	mov    edx,DWORD PTR ds:0xc0030434
c0019d89:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019d8f:	a1 38 04 03 c0       	mov    eax,ds:0xc0030438
c0019d94:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d96:	03 01                	add    eax,DWORD PTR [ecx]
c0019d98:	85 d2                	test   edx,edx
c0019d9a:	74 02                	je     c0019d9e <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019d9c:	03 02                	add    eax,DWORD PTR [edx]
c0019d9e:	c3                   	ret    

c0019d9f <Krnl::getProcessEnvPair(Process*, int)>:
c0019d9f:	57                   	push   edi
c0019da0:	56                   	push   esi
c0019da1:	8b 35 34 04 03 c0    	mov    esi,DWORD PTR ds:0xc0030434
c0019da7:	53                   	push   ebx
c0019da8:	85 f6                	test   esi,esi
c0019daa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019dae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019db2:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019db8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019dbc:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019dbe:	75 16                	jne    c0019dd6 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019dc0:	39 c2                	cmp    edx,eax
c0019dc2:	7c 16                	jl     c0019dda <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019dc4:	8b 0d 38 04 03 c0    	mov    ecx,DWORD PTR ds:0xc0030438
c0019dca:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019dcc:	01 c6                	add    esi,eax
c0019dce:	39 d6                	cmp    esi,edx
c0019dd0:	7e 3c                	jle    c0019e0e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019dd2:	29 c2                	sub    edx,eax
c0019dd4:	eb 04                	jmp    c0019dda <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019dd6:	39 c2                	cmp    edx,eax
c0019dd8:	7d 05                	jge    c0019ddf <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019dda:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019ddd:	eb 20                	jmp    c0019dff <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019ddf:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019de1:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019de4:	39 d1                	cmp    ecx,edx
c0019de6:	7e 04                	jle    c0019dec <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019de8:	29 c2                	sub    edx,eax
c0019dea:	eb 10                	jmp    c0019dfc <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019dec:	8b 35 38 04 03 c0    	mov    esi,DWORD PTR ds:0xc0030438
c0019df2:	03 0e                	add    ecx,DWORD PTR [esi]
c0019df4:	39 d1                	cmp    ecx,edx
c0019df6:	7e 16                	jle    c0019e0e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019df8:	29 c2                	sub    edx,eax
c0019dfa:	29 fa                	sub    edx,edi
c0019dfc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019dff:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019e02:	8b 02                	mov    eax,DWORD PTR [edx]
c0019e04:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019e07:	89 03                	mov    DWORD PTR [ebx],eax
c0019e09:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019e0c:	eb 1d                	jmp    c0019e2b <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019e0e:	83 ec 0c             	sub    esp,0xc
c0019e11:	68 4f b5 02 c0       	push   0xc002b54f
c0019e16:	e8 18 00 00 00       	call   c0019e33 <Krnl::panic(char const*)>
c0019e1b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019e21:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019e28:	83 c4 10             	add    esp,0x10
c0019e2b:	89 d8                	mov    eax,ebx
c0019e2d:	5b                   	pop    ebx
c0019e2e:	5e                   	pop    esi
c0019e2f:	5f                   	pop    edi
c0019e30:	c2 04 00             	ret    0x4

c0019e33 <Krnl::panic(char const*)>:
c0019e33:	55                   	push   ebp
c0019e34:	89 e5                	mov    ebp,esp
c0019e36:	53                   	push   ebx
c0019e37:	83 ec 10             	sub    esp,0x10
c0019e3a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019e3d:	fa                   	cli    
c0019e3e:	c6 05 44 04 03 c0 01 	mov    BYTE PTR ds:0xc0030444,0x1
c0019e45:	53                   	push   ebx
c0019e46:	e8 a8 57 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0019e4b:	58                   	pop    eax
c0019e4c:	c6 05 40 c8 02 c0 00 	mov    BYTE PTR ds:0xc002c840,0x0
c0019e53:	5a                   	pop    edx
c0019e54:	53                   	push   ebx
c0019e55:	68 69 b5 02 c0       	push   0xc002b569
c0019e5a:	e8 68 88 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0019e5f:	59                   	pop    ecx
c0019e60:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0019e65:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e6b:	e8 e1 64 ff ff       	call   c0010351 <setActiveTerminal(VgaText*)>
c0019e70:	83 c4 0c             	add    esp,0xc
c0019e73:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0019e78:	6a 01                	push   0x1
c0019e7a:	6a 0f                	push   0xf
c0019e7c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e82:	e8 29 63 ff ff       	call   c00101b0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019e87:	58                   	pop    eax
c0019e88:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0019e8d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e93:	e8 3a 68 ff ff       	call   c00106d2 <VgaText::clearScreen()>
c0019e98:	58                   	pop    eax
c0019e99:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0019e9e:	5a                   	pop    edx
c0019e9f:	68 82 b5 02 c0       	push   0xc002b582
c0019ea4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eaa:	e8 af 69 ff ff       	call   c001085e <VgaText::puts(char const*)>
c0019eaf:	59                   	pop    ecx
c0019eb0:	58                   	pop    eax
c0019eb1:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0019eb6:	68 28 b6 02 c0       	push   0xc002b628
c0019ebb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ec1:	e8 98 69 ff ff       	call   c001085e <VgaText::puts(char const*)>
c0019ec6:	58                   	pop    eax
c0019ec7:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0019ecc:	5a                   	pop    edx
c0019ecd:	68 9e b5 02 c0       	push   0xc002b59e
c0019ed2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ed8:	e8 81 69 ff ff       	call   c001085e <VgaText::puts(char const*)>
c0019edd:	59                   	pop    ecx
c0019ede:	58                   	pop    eax
c0019edf:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0019ee4:	53                   	push   ebx
c0019ee5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eeb:	e8 6e 69 ff ff       	call   c001085e <VgaText::puts(char const*)>
c0019ef0:	58                   	pop    eax
c0019ef1:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0019ef6:	5a                   	pop    edx
c0019ef7:	68 be b5 02 c0       	push   0xc002b5be
c0019efc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f02:	e8 57 69 ff ff       	call   c001085e <VgaText::puts(char const*)>
c0019f07:	a1 40 04 03 c0       	mov    eax,ds:0xc0030440
c0019f0c:	83 c4 10             	add    esp,0x10
c0019f0f:	85 c0                	test   eax,eax
c0019f11:	74 02                	je     c0019f15 <Krnl::panic(char const*)+0xe2>
c0019f13:	ff d0                	call   eax
c0019f15:	83 ec 0c             	sub    esp,0xc
c0019f18:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f1b:	e8 8c 30 00 00       	call   c001cfac <Thr::getDriverNameFromAddress(unsigned long)>
c0019f20:	83 c4 10             	add    esp,0x10
c0019f23:	89 c3                	mov    ebx,eax
c0019f25:	85 c0                	test   eax,eax
c0019f27:	0f 84 4e 02 00 00    	je     c001a17b <Krnl::panic(char const*)+0x348>
c0019f2d:	83 ec 08             	sub    esp,0x8
c0019f30:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0019f35:	68 64 b6 02 c0       	push   0xc002b664
c0019f3a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f40:	e8 19 69 ff ff       	call   c001085e <VgaText::puts(char const*)>
c0019f45:	58                   	pop    eax
c0019f46:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0019f4b:	5a                   	pop    edx
c0019f4c:	68 9e b5 02 c0       	push   0xc002b59e
c0019f51:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f57:	e8 02 69 ff ff       	call   c001085e <VgaText::puts(char const*)>
c0019f5c:	59                   	pop    ecx
c0019f5d:	58                   	pop    eax
c0019f5e:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0019f63:	53                   	push   ebx
c0019f64:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f6a:	e8 ef 68 ff ff       	call   c001085e <VgaText::puts(char const*)>
c0019f6f:	83 c4 10             	add    esp,0x10
c0019f72:	83 ec 08             	sub    esp,0x8
c0019f75:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0019f7a:	68 bd b5 02 c0       	push   0xc002b5bd
c0019f7f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f85:	e8 d4 68 ff ff       	call   c001085e <VgaText::puts(char const*)>
c0019f8a:	58                   	pop    eax
c0019f8b:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0019f90:	5a                   	pop    edx
c0019f91:	68 bc b6 02 c0       	push   0xc002b6bc
c0019f96:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f9c:	e8 bd 68 ff ff       	call   c001085e <VgaText::puts(char const*)>
c0019fa1:	59                   	pop    ecx
c0019fa2:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0019fa7:	5b                   	pop    ebx
c0019fa8:	68 fc b6 02 c0       	push   0xc002b6fc
c0019fad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fb3:	e8 a6 68 ff ff       	call   c001085e <VgaText::puts(char const*)>
c0019fb8:	58                   	pop    eax
c0019fb9:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0019fbe:	5a                   	pop    edx
c0019fbf:	68 a9 b5 02 c0       	push   0xc002b5a9
c0019fc4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fca:	e8 8f 68 ff ff       	call   c001085e <VgaText::puts(char const*)>
c0019fcf:	59                   	pop    ecx
c0019fd0:	5b                   	pop    ebx
c0019fd1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019fd4:	68 c1 b5 02 c0       	push   0xc002b5c1
c0019fd9:	e8 e9 86 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0019fde:	58                   	pop    eax
c0019fdf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019fe2:	5a                   	pop    edx
c0019fe3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019fe6:	68 ca b5 02 c0       	push   0xc002b5ca
c0019feb:	e8 d7 86 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0019ff0:	59                   	pop    ecx
c0019ff1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019ff4:	5b                   	pop    ebx
c0019ff5:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ff7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019ffa:	68 d3 b5 02 c0       	push   0xc002b5d3
c0019fff:	e8 c3 86 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001a004:	58                   	pop    eax
c001a005:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001a00a:	5a                   	pop    edx
c001a00b:	68 40 b7 02 c0       	push   0xc002b740
c001a010:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a016:	e8 43 68 ff ff       	call   c001085e <VgaText::puts(char const*)>
c001a01b:	59                   	pop    ecx
c001a01c:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001a021:	5b                   	pop    ebx
c001a022:	68 dc b5 02 c0       	push   0xc002b5dc
c001a027:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a02d:	e8 2c 68 ff ff       	call   c001085e <VgaText::puts(char const*)>
c001a032:	0f 20 c0             	mov    eax,cr0
c001a035:	5a                   	pop    edx
c001a036:	59                   	pop    ecx
c001a037:	50                   	push   eax
c001a038:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001a03d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a043:	e8 d0 67 ff ff       	call   c0010818 <VgaText::putx(unsigned int)>
c001a048:	5b                   	pop    ebx
c001a049:	58                   	pop    eax
c001a04a:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001a04f:	68 e6 b5 02 c0       	push   0xc002b5e6
c001a054:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a05a:	e8 ff 67 ff ff       	call   c001085e <VgaText::puts(char const*)>
c001a05f:	0f 20 d0             	mov    eax,cr2
c001a062:	5a                   	pop    edx
c001a063:	59                   	pop    ecx
c001a064:	50                   	push   eax
c001a065:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001a06a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a070:	e8 a3 67 ff ff       	call   c0010818 <VgaText::putx(unsigned int)>
c001a075:	5b                   	pop    ebx
c001a076:	58                   	pop    eax
c001a077:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001a07c:	68 f0 b5 02 c0       	push   0xc002b5f0
c001a081:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a087:	e8 d2 67 ff ff       	call   c001085e <VgaText::puts(char const*)>
c001a08c:	0f 20 d8             	mov    eax,cr3
c001a08f:	5a                   	pop    edx
c001a090:	59                   	pop    ecx
c001a091:	50                   	push   eax
c001a092:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001a097:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a09d:	e8 76 67 ff ff       	call   c0010818 <VgaText::putx(unsigned int)>
c001a0a2:	5b                   	pop    ebx
c001a0a3:	58                   	pop    eax
c001a0a4:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001a0a9:	68 03 b6 02 c0       	push   0xc002b603
c001a0ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0b4:	e8 a5 67 ff ff       	call   c001085e <VgaText::puts(char const*)>
c001a0b9:	0f 20 e0             	mov    eax,cr4
c001a0bc:	5a                   	pop    edx
c001a0bd:	59                   	pop    ecx
c001a0be:	50                   	push   eax
c001a0bf:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001a0c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0ca:	e8 49 67 ff ff       	call   c0010818 <VgaText::putx(unsigned int)>
c001a0cf:	5b                   	pop    ebx
c001a0d0:	58                   	pop    eax
c001a0d1:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001a0d6:	68 0d b6 02 c0       	push   0xc002b60d
c001a0db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0e1:	e8 78 67 ff ff       	call   c001085e <VgaText::puts(char const*)>
c001a0e6:	5a                   	pop    edx
c001a0e7:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001a0ec:	59                   	pop    ecx
c001a0ed:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a0f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a0f6:	50                   	push   eax
c001a0f7:	e8 1c 67 ff ff       	call   c0010818 <VgaText::putx(unsigned int)>
c001a0fc:	5b                   	pop    ebx
c001a0fd:	58                   	pop    eax
c001a0fe:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001a103:	68 24 b6 02 c0       	push   0xc002b624
c001a108:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a10e:	e8 4b 67 ff ff       	call   c001085e <VgaText::puts(char const*)>
c001a113:	5a                   	pop    edx
c001a114:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001a119:	59                   	pop    ecx
c001a11a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a120:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a123:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a126:	50                   	push   eax
c001a127:	e8 ec 66 ff ff       	call   c0010818 <VgaText::putx(unsigned int)>
c001a12c:	5b                   	pop    ebx
c001a12d:	58                   	pop    eax
c001a12e:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001a133:	68 24 b6 02 c0       	push   0xc002b624
c001a138:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a13e:	e8 1b 67 ff ff       	call   c001085e <VgaText::puts(char const*)>
c001a143:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001a148:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a14b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a151:	8b 12                	mov    edx,DWORD PTR [edx]
c001a153:	59                   	pop    ecx
c001a154:	5b                   	pop    ebx
c001a155:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a158:	50                   	push   eax
c001a159:	e8 ba 66 ff ff       	call   c0010818 <VgaText::putx(unsigned int)>
c001a15e:	83 c4 10             	add    esp,0x10
c001a161:	b2 fe                	mov    dl,0xfe
c001a163:	e4 60                	in     al,0x60
c001a165:	3c 1c                	cmp    al,0x1c
c001a167:	74 04                	je     c001a16d <Krnl::panic(char const*)+0x33a>
c001a169:	3c 5a                	cmp    al,0x5a
c001a16b:	75 f6                	jne    c001a163 <Krnl::panic(char const*)+0x330>
c001a16d:	e4 64                	in     al,0x64
c001a16f:	a8 02                	test   al,0x2
c001a171:	75 fa                	jne    c001a16d <Krnl::panic(char const*)+0x33a>
c001a173:	88 d0                	mov    al,dl
c001a175:	e6 64                	out    0x64,al
c001a177:	fa                   	cli    
c001a178:	f4                   	hlt    
c001a179:	eb e8                	jmp    c001a163 <Krnl::panic(char const*)+0x330>
c001a17b:	50                   	push   eax
c001a17c:	50                   	push   eax
c001a17d:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001a182:	68 90 b6 02 c0       	push   0xc002b690
c001a187:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a18d:	e8 cc 66 ff ff       	call   c001085e <VgaText::puts(char const*)>
c001a192:	58                   	pop    eax
c001a193:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001a198:	5a                   	pop    edx
c001a199:	68 9e b5 02 c0       	push   0xc002b59e
c001a19e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1a4:	e8 b5 66 ff ff       	call   c001085e <VgaText::puts(char const*)>
c001a1a9:	59                   	pop    ecx
c001a1aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a1af:	5b                   	pop    ebx
c001a1b0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a1b3:	83 c0 0c             	add    eax,0xc
c001a1b6:	50                   	push   eax
c001a1b7:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001a1bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1c2:	e8 97 66 ff ff       	call   c001085e <VgaText::puts(char const*)>
c001a1c7:	83 c4 10             	add    esp,0x10
c001a1ca:	e9 a3 fd ff ff       	jmp    c0019f72 <Krnl::panic(char const*)+0x13f>

c001a1cf <Net::switchEndian16(unsigned short)>:
c001a1cf:	83 ec 04             	sub    esp,0x4
c001a1d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a1d6:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a1da:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a1de:	c1 f8 08             	sar    eax,0x8
c001a1e1:	89 c2                	mov    edx,eax
c001a1e3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a1e7:	c1 e0 08             	shl    eax,0x8
c001a1ea:	09 d0                	or     eax,edx
c001a1ec:	83 c4 04             	add    esp,0x4
c001a1ef:	c3                   	ret    

c001a1f0 <Net::switchEndian32(unsigned int)>:
c001a1f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1f4:	c1 e8 18             	shr    eax,0x18
c001a1f7:	89 c2                	mov    edx,eax
c001a1f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1fd:	c1 e0 08             	shl    eax,0x8
c001a200:	25 00 00 ff 00       	and    eax,0xff0000
c001a205:	09 c2                	or     edx,eax
c001a207:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a20b:	c1 e8 08             	shr    eax,0x8
c001a20e:	25 00 ff 00 00       	and    eax,0xff00
c001a213:	09 c2                	or     edx,eax
c001a215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a219:	c1 e0 18             	shl    eax,0x18
c001a21c:	09 d0                	or     eax,edx
c001a21e:	c3                   	ret    

c001a21f <Net::crc32Calc(unsigned char*, int)>:
c001a21f:	83 ec 10             	sub    esp,0x10
c001a222:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a227:	75 07                	jne    c001a230 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a229:	b8 00 00 00 00       	mov    eax,0x0
c001a22e:	eb 7c                	jmp    c001a2ac <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a230:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a235:	7f 07                	jg     c001a23e <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a237:	b8 00 00 00 00       	mov    eax,0x0
c001a23c:	eb 6e                	jmp    c001a2ac <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a23e:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a246:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a24e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a252:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a256:	7d 4e                	jge    c001a2a6 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a25c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a260:	01 d0                	add    eax,edx
c001a262:	8a 00                	mov    al,BYTE PTR [eax]
c001a264:	0f b6 c0             	movzx  eax,al
c001a267:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a26b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a273:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a278:	7f 26                	jg     c001a2a0 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a27a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a27e:	83 e0 01             	and    eax,0x1
c001a281:	74 0d                	je     c001a290 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a283:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a287:	d1 e8                	shr    eax,1
c001a289:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a28e:	eb 06                	jmp    c001a296 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a290:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a294:	d1 e8                	shr    eax,1
c001a296:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a29a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a29e:	eb d3                	jmp    c001a273 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a2a0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a2a4:	eb a8                	jmp    c001a24e <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a2a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2aa:	f7 d0                	not    eax
c001a2ac:	83 c4 10             	add    esp,0x10
c001a2af:	c3                   	ret    

c001a2b0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a2b0:	57                   	push   edi
c001a2b1:	56                   	push   esi
c001a2b2:	53                   	push   ebx
c001a2b3:	83 ec 60             	sub    esp,0x60
c001a2b6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2bd:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a2c1:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a2c9:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a2ce:	7f 1a                	jg     c001a2ea <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a2d0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2d7:	8d 50 01             	lea    edx,[eax+0x1]
c001a2da:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2e1:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a2e4:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a2e8:	eb df                	jmp    c001a2c9 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a2ea:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2f1:	8d 50 01             	lea    edx,[eax+0x1]
c001a2f4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2fb:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a2fe:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a305:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a309:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a30d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a311:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a319:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a31d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a321:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a325:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a329:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a32d:	89 c6                	mov    esi,eax
c001a32f:	89 d7                	mov    edi,edx
c001a331:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a333:	89 c8                	mov    eax,ecx
c001a335:	89 fa                	mov    edx,edi
c001a337:	89 f3                	mov    ebx,esi
c001a339:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a33d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a341:	89 04 24             	mov    DWORD PTR [esp],eax
c001a344:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a34c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a353:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a357:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a35b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a35f:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a367:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a36b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a36f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a373:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a377:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a37b:	89 c6                	mov    esi,eax
c001a37d:	89 d7                	mov    edi,edx
c001a37f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a381:	89 c8                	mov    eax,ecx
c001a383:	89 fa                	mov    edx,edi
c001a385:	89 f3                	mov    ebx,esi
c001a387:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a38b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a38f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a393:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a39b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a3a2:	0f b7 c0             	movzx  eax,ax
c001a3a5:	c1 f8 08             	sar    eax,0x8
c001a3a8:	89 c1                	mov    ecx,eax
c001a3aa:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3b1:	8d 50 01             	lea    edx,[eax+0x1]
c001a3b4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a3bb:	88 ca                	mov    dl,cl
c001a3bd:	88 10                	mov    BYTE PTR [eax],dl
c001a3bf:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a3c6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3cd:	8d 48 01             	lea    ecx,[eax+0x1]
c001a3d0:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a3d7:	88 10                	mov    BYTE PTR [eax],dl
c001a3d9:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a3dd:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a3e1:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a3e8:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a3ec:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a3f0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a3f4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a3f8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a3fc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a400:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a404:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a408:	89 c6                	mov    esi,eax
c001a40a:	89 d7                	mov    edi,edx
c001a40c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a40e:	89 c8                	mov    eax,ecx
c001a410:	89 fa                	mov    edx,edi
c001a412:	89 f3                	mov    ebx,esi
c001a414:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a418:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a41c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a420:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a424:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a42b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a432:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a436:	50                   	push   eax
c001a437:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a43b:	e8 df fd ff ff       	call   c001a21f <Net::crc32Calc(unsigned char*, int)>
c001a440:	83 c4 08             	add    esp,0x8
c001a443:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a447:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a44b:	c1 e8 18             	shr    eax,0x18
c001a44e:	89 c1                	mov    ecx,eax
c001a450:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a457:	8d 50 01             	lea    edx,[eax+0x1]
c001a45a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a461:	88 ca                	mov    dl,cl
c001a463:	88 10                	mov    BYTE PTR [eax],dl
c001a465:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a469:	c1 e8 10             	shr    eax,0x10
c001a46c:	89 c1                	mov    ecx,eax
c001a46e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a475:	8d 50 01             	lea    edx,[eax+0x1]
c001a478:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a47f:	88 ca                	mov    dl,cl
c001a481:	88 10                	mov    BYTE PTR [eax],dl
c001a483:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a487:	c1 e8 08             	shr    eax,0x8
c001a48a:	89 c1                	mov    ecx,eax
c001a48c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a493:	8d 50 01             	lea    edx,[eax+0x1]
c001a496:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a49d:	88 ca                	mov    dl,cl
c001a49f:	88 10                	mov    BYTE PTR [eax],dl
c001a4a1:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4a8:	8d 50 01             	lea    edx,[eax+0x1]
c001a4ab:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a4b2:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a4b6:	88 10                	mov    BYTE PTR [eax],dl
c001a4b8:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a4bc:	83 c4 60             	add    esp,0x60
c001a4bf:	5b                   	pop    ebx
c001a4c0:	5e                   	pop    esi
c001a4c1:	5f                   	pop    edi
c001a4c2:	c3                   	ret    

c001a4c3 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a4c3:	57                   	push   edi
c001a4c4:	56                   	push   esi
c001a4c5:	53                   	push   ebx
c001a4c6:	83 ec 70             	sub    esp,0x70
c001a4c9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4d0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a4d4:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a4dc:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a4e3:	83 c0 0e             	add    eax,0xe
c001a4e6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a4ea:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a4f5:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a4fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a501:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a505:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a509:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a50d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a511:	89 c6                	mov    esi,eax
c001a513:	89 d7                	mov    edi,edx
c001a515:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a517:	89 c8                	mov    eax,ecx
c001a519:	89 fa                	mov    edx,edi
c001a51b:	89 f3                	mov    ebx,esi
c001a51d:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a525:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a529:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a531:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a538:	83 c0 08             	add    eax,0x8
c001a53b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a53f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a546:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a54a:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a552:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a556:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a55a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a55e:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a562:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a566:	89 c6                	mov    esi,eax
c001a568:	89 d7                	mov    edi,edx
c001a56a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a56c:	89 c8                	mov    eax,ecx
c001a56e:	89 fa                	mov    edx,edi
c001a570:	89 f3                	mov    ebx,esi
c001a572:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a576:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a57a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a57e:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a586:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a58d:	8d 50 01             	lea    edx,[eax+0x1]
c001a590:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a597:	8a 00                	mov    al,BYTE PTR [eax]
c001a599:	0f b6 c0             	movzx  eax,al
c001a59c:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a5a1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5a8:	8d 50 01             	lea    edx,[eax+0x1]
c001a5ab:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a5b2:	8a 00                	mov    al,BYTE PTR [eax]
c001a5b4:	0f b6 c0             	movzx  eax,al
c001a5b7:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a5bc:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a5c1:	c1 e0 08             	shl    eax,0x8
c001a5c4:	89 c2                	mov    edx,eax
c001a5c6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a5ca:	09 d0                	or     eax,edx
c001a5cc:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a5d3:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a5d7:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a5df:	75 46                	jne    c001a627 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a5e1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a5e8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a5eb:	66 3d dc 05          	cmp    ax,0x5dc
c001a5ef:	77 16                	ja     c001a607 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a5f1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a5f8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a5fb:	0f b7 c0             	movzx  eax,ax
c001a5fe:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a605:	eb 20                	jmp    c001a627 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a607:	83 ec 0c             	sub    esp,0xc
c001a60a:	68 68 b7 02 c0       	push   0xc002b768
c001a60f:	e8 b3 80 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001a614:	83 c4 10             	add    esp,0x10
c001a617:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a61e:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a622:	e9 17 01 00 00       	jmp    c001a73e <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a627:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a62e:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a635:	8b 12                	mov    edx,DWORD PTR [edx]
c001a637:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a63b:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a642:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a646:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a64a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a64e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a652:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a656:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a65a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a65e:	89 c6                	mov    esi,eax
c001a660:	89 d7                	mov    edi,edx
c001a662:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a664:	89 c8                	mov    eax,ecx
c001a666:	89 fa                	mov    edx,edi
c001a668:	89 f3                	mov    ebx,esi
c001a66a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a66e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a672:	89 04 24             	mov    DWORD PTR [esp],eax
c001a675:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a67c:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a683:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a68a:	8d 50 01             	lea    edx,[eax+0x1]
c001a68d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a694:	8a 00                	mov    al,BYTE PTR [eax]
c001a696:	0f b6 c0             	movzx  eax,al
c001a699:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a69d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6a4:	8d 50 01             	lea    edx,[eax+0x1]
c001a6a7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6ae:	8a 00                	mov    al,BYTE PTR [eax]
c001a6b0:	0f b6 c0             	movzx  eax,al
c001a6b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a6b7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6be:	8d 50 01             	lea    edx,[eax+0x1]
c001a6c1:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6c8:	8a 00                	mov    al,BYTE PTR [eax]
c001a6ca:	0f b6 c0             	movzx  eax,al
c001a6cd:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a6d1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6d8:	8d 50 01             	lea    edx,[eax+0x1]
c001a6db:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6e2:	8a 00                	mov    al,BYTE PTR [eax]
c001a6e4:	0f b6 c0             	movzx  eax,al
c001a6e7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a6eb:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a6ef:	c1 e0 18             	shl    eax,0x18
c001a6f2:	89 c2                	mov    edx,eax
c001a6f4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a6f8:	c1 e0 10             	shl    eax,0x10
c001a6fb:	09 c2                	or     edx,eax
c001a6fd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a701:	c1 e0 08             	shl    eax,0x8
c001a704:	09 d0                	or     eax,edx
c001a706:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a70a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a70e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a715:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a719:	83 e8 04             	sub    eax,0x4
c001a71c:	83 ec 08             	sub    esp,0x8
c001a71f:	50                   	push   eax
c001a720:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a724:	e8 f6 fa ff ff       	call   c001a21f <Net::crc32Calc(unsigned char*, int)>
c001a729:	83 c4 10             	add    esp,0x10
c001a72c:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a730:	0f 94 c2             	sete   dl
c001a733:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a73a:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a73d:	90                   	nop
c001a73e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a745:	83 c4 70             	add    esp,0x70
c001a748:	5b                   	pop    ebx
c001a749:	5e                   	pop    esi
c001a74a:	5f                   	pop    edi
c001a74b:	c2 04 00             	ret    0x4

c001a74e <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a74e:	55                   	push   ebp
c001a74f:	57                   	push   edi
c001a750:	56                   	push   esi
c001a751:	53                   	push   ebx
c001a752:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a758:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a75f:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a761:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a764:	80 fb 40             	cmp    bl,0x40
c001a767:	75 1b                	jne    c001a784 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a769:	8a 16                	mov    dl,BYTE PTR [esi]
c001a76b:	84 d2                	test   dl,dl
c001a76d:	0f 84 f1 00 00 00    	je     c001a864 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a773:	8d 46 01             	lea    eax,[esi+0x1]
c001a776:	80 fa 3a             	cmp    dl,0x3a
c001a779:	74 04                	je     c001a77f <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a77b:	89 c6                	mov    esi,eax
c001a77d:	eb ea                	jmp    c001a769 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a77f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a782:	89 c6                	mov    esi,eax
c001a784:	50                   	push   eax
c001a785:	6a 40                	push   0x40
c001a787:	6a 00                	push   0x0
c001a789:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a78d:	50                   	push   eax
c001a78e:	e8 bd 5f fe ff       	call   c0000750 <memset>
c001a793:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a79a:	31 c0                	xor    eax,eax
c001a79c:	83 c4 10             	add    esp,0x10
c001a79f:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a7a1:	84 c9                	test   cl,cl
c001a7a3:	0f 84 bb 00 00 00    	je     c001a864 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7a9:	3d c7 00 00 00       	cmp    eax,0xc7
c001a7ae:	0f 8f b0 00 00 00    	jg     c001a864 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7b4:	80 f9 0a             	cmp    cl,0xa
c001a7b7:	0f 85 98 00 00 00    	jne    c001a855 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a7bd:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a7c2:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a7c6:	a8 df                	test   al,0xdf
c001a7c8:	0f 94 c1             	sete   cl
c001a7cb:	3c 23                	cmp    al,0x23
c001a7cd:	0f 94 c2             	sete   dl
c001a7d0:	08 d1                	or     cl,dl
c001a7d2:	75 4a                	jne    c001a81e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7d4:	8d 50 f7             	lea    edx,[eax-0x9]
c001a7d7:	80 fa 01             	cmp    dl,0x1
c001a7da:	76 42                	jbe    c001a81e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7dc:	3c 5b                	cmp    al,0x5b
c001a7de:	75 42                	jne    c001a822 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a7e0:	80 fb 40             	cmp    bl,0x40
c001a7e3:	75 39                	jne    c001a81e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7e5:	83 ec 0c             	sub    esp,0xc
c001a7e8:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a7ec:	52                   	push   edx
c001a7ed:	e8 7a 5f fe ff       	call   c000076c <strlen>
c001a7f2:	83 c4 10             	add    esp,0x10
c001a7f5:	83 f8 3f             	cmp    eax,0x3f
c001a7f8:	77 6a                	ja     c001a864 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7fa:	50                   	push   eax
c001a7fb:	50                   	push   eax
c001a7fc:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a800:	52                   	push   edx
c001a801:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a805:	52                   	push   edx
c001a806:	e8 01 60 fe ff       	call   c000080c <strcpy>
c001a80b:	58                   	pop    eax
c001a80c:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a810:	52                   	push   edx
c001a811:	e8 56 5f fe ff       	call   c000076c <strlen>
c001a816:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a81b:	83 c4 10             	add    esp,0x10
c001a81e:	31 d2                	xor    edx,edx
c001a820:	eb 3a                	jmp    c001a85c <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a822:	80 fb 40             	cmp    bl,0x40
c001a825:	74 06                	je     c001a82d <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a827:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a82b:	eb 20                	jmp    c001a84d <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a82d:	50                   	push   eax
c001a82e:	50                   	push   eax
c001a82f:	55                   	push   ebp
c001a830:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a834:	50                   	push   eax
c001a835:	e8 5e 60 fe ff       	call   c0000898 <strcmp>
c001a83a:	83 c4 10             	add    esp,0x10
c001a83d:	85 c0                	test   eax,eax
c001a83f:	75 dd                	jne    c001a81e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a841:	eb e4                	jmp    c001a827 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a843:	8d 50 01             	lea    edx,[eax+0x1]
c001a846:	80 f9 3d             	cmp    cl,0x3d
c001a849:	74 1d                	je     c001a868 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a84b:	89 d0                	mov    eax,edx
c001a84d:	8a 08                	mov    cl,BYTE PTR [eax]
c001a84f:	84 c9                	test   cl,cl
c001a851:	75 f0                	jne    c001a843 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a853:	eb 0f                	jmp    c001a864 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a855:	8d 50 01             	lea    edx,[eax+0x1]
c001a858:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a85c:	47                   	inc    edi
c001a85d:	89 d0                	mov    eax,edx
c001a85f:	e9 3b ff ff ff       	jmp    c001a79f <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a864:	31 c0                	xor    eax,eax
c001a866:	eb 33                	jmp    c001a89b <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a868:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a86c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a86f:	50                   	push   eax
c001a870:	50                   	push   eax
c001a871:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a875:	50                   	push   eax
c001a876:	56                   	push   esi
c001a877:	e8 1c 60 fe ff       	call   c0000898 <strcmp>
c001a87c:	83 c4 10             	add    esp,0x10
c001a87f:	85 c0                	test   eax,eax
c001a881:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a885:	75 97                	jne    c001a81e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a887:	51                   	push   ecx
c001a888:	51                   	push   ecx
c001a889:	52                   	push   edx
c001a88a:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a891:	e8 76 5f fe ff       	call   c000080c <strcpy>
c001a896:	83 c4 10             	add    esp,0x10
c001a899:	b0 01                	mov    al,0x1
c001a89b:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a8a1:	5b                   	pop    ebx
c001a8a2:	5e                   	pop    esi
c001a8a3:	5f                   	pop    edi
c001a8a4:	5d                   	pop    ebp
c001a8a5:	c3                   	ret    

c001a8a6 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a8a6:	57                   	push   edi
c001a8a7:	56                   	push   esi
c001a8a8:	53                   	push   ebx
c001a8a9:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a8af:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a8b6:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a8bd:	53                   	push   ebx
c001a8be:	e8 a9 5e fe ff       	call   c000076c <strlen>
c001a8c3:	89 34 24             	mov    DWORD PTR [esp],esi
c001a8c6:	89 c7                	mov    edi,eax
c001a8c8:	e8 9f 5e fe ff       	call   c000076c <strlen>
c001a8cd:	83 c4 10             	add    esp,0x10
c001a8d0:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a8d4:	3d ff 00 00 00       	cmp    eax,0xff
c001a8d9:	0f 87 d3 00 00 00    	ja     c001a9b2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a8df:	57                   	push   edi
c001a8e0:	57                   	push   edi
c001a8e1:	56                   	push   esi
c001a8e2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a8e6:	56                   	push   esi
c001a8e7:	e8 20 5f fe ff       	call   c000080c <strcpy>
c001a8ec:	58                   	pop    eax
c001a8ed:	5a                   	pop    edx
c001a8ee:	68 0a bb 02 c0       	push   0xc002bb0a
c001a8f3:	56                   	push   esi
c001a8f4:	e8 53 60 fe ff       	call   c000094c <strcat>
c001a8f9:	59                   	pop    ecx
c001a8fa:	5f                   	pop    edi
c001a8fb:	53                   	push   ebx
c001a8fc:	56                   	push   esi
c001a8fd:	e8 4a 60 fe ff       	call   c000094c <strcat>
c001a902:	58                   	pop    eax
c001a903:	5a                   	pop    edx
c001a904:	68 b4 b7 02 c0       	push   0xc002b7b4
c001a909:	56                   	push   esi
c001a90a:	e8 3d 60 fe ff       	call   c000094c <strcat>
c001a90f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a916:	e8 7e 4c ff ff       	call   c000f599 <malloc>
c001a91b:	83 c4 0c             	add    esp,0xc
c001a91e:	89 c3                	mov    ebx,eax
c001a920:	ff 35 50 0e 03 c0    	push   DWORD PTR ds:0xc0030e50
c001a926:	56                   	push   esi
c001a927:	50                   	push   eax
c001a928:	e8 f9 82 ff ff       	call   c0012c26 <File::File(char const*, Process*)>
c001a92d:	83 c4 10             	add    esp,0x10
c001a930:	85 db                	test   ebx,ebx
c001a932:	74 7e                	je     c001a9b2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a934:	51                   	push   ecx
c001a935:	51                   	push   ecx
c001a936:	6a 01                	push   0x1
c001a938:	53                   	push   ebx
c001a939:	e8 4c 83 ff ff       	call   c0012c8a <File::open(FileOpenMode)>
c001a93e:	83 c4 10             	add    esp,0x10
c001a941:	85 c0                	test   eax,eax
c001a943:	74 08                	je     c001a94d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a945:	83 ec 0c             	sub    esp,0xc
c001a948:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a94a:	53                   	push   ebx
c001a94b:	eb 5f                	jmp    c001a9ac <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a94d:	52                   	push   edx
c001a94e:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a952:	50                   	push   eax
c001a953:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a957:	50                   	push   eax
c001a958:	53                   	push   ebx
c001a959:	e8 d8 85 ff ff       	call   c0012f36 <File::stat(unsigned long long*, bool*)>
c001a95e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a962:	83 c4 10             	add    esp,0x10
c001a965:	89 c1                	mov    ecx,eax
c001a967:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a96b:	74 31                	je     c001a99e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a96d:	83 ec 0c             	sub    esp,0xc
c001a970:	50                   	push   eax
c001a971:	e8 23 4c ff ff       	call   c000f599 <malloc>
c001a976:	89 c6                	mov    esi,eax
c001a978:	58                   	pop    eax
c001a979:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a97b:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a97f:	52                   	push   edx
c001a980:	56                   	push   esi
c001a981:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a985:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a989:	53                   	push   ebx
c001a98a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a98d:	83 c4 20             	add    esp,0x20
c001a990:	85 c0                	test   eax,eax
c001a992:	75 0a                	jne    c001a99e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a994:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a998:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a99c:	74 18                	je     c001a9b6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a99e:	83 ec 0c             	sub    esp,0xc
c001a9a1:	53                   	push   ebx
c001a9a2:	e8 41 83 ff ff       	call   c0012ce8 <File::close()>
c001a9a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a9af:	83 c4 10             	add    esp,0x10
c001a9b2:	31 c0                	xor    eax,eax
c001a9b4:	eb 3b                	jmp    c001a9f1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a9b6:	83 ec 0c             	sub    esp,0xc
c001a9b9:	53                   	push   ebx
c001a9ba:	e8 29 83 ff ff       	call   c0012ce8 <File::close()>
c001a9bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9c4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a9c7:	83 c4 0c             	add    esp,0xc
c001a9ca:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a9d1:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a9d8:	56                   	push   esi
c001a9d9:	e8 70 fd ff ff       	call   c001a74e <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a9de:	89 34 24             	mov    DWORD PTR [esp],esi
c001a9e1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a9e5:	e8 bf 4b ff ff       	call   c000f5a9 <free>
c001a9ea:	83 c4 10             	add    esp,0x10
c001a9ed:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a9f1:	81 c4 20 01 00 00    	add    esp,0x120
c001a9f7:	5b                   	pop    ebx
c001a9f8:	5e                   	pop    esi
c001a9f9:	5f                   	pop    edi
c001a9fa:	c3                   	ret    

c001a9fb <Reg::getLine(char*, char*, char*)>:
c001a9fb:	57                   	push   edi
c001a9fc:	56                   	push   esi
c001a9fd:	53                   	push   ebx
c001a9fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa02:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aa06:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aa0a:	57                   	push   edi
c001aa0b:	56                   	push   esi
c001aa0c:	53                   	push   ebx
c001aa0d:	68 b9 b7 02 c0       	push   0xc002b7b9
c001aa12:	e8 8f fe ff ff       	call   c001a8a6 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa17:	83 c4 10             	add    esp,0x10
c001aa1a:	84 c0                	test   al,al
c001aa1c:	75 10                	jne    c001aa2e <Reg::getLine(char*, char*, char*)+0x33>
c001aa1e:	57                   	push   edi
c001aa1f:	56                   	push   esi
c001aa20:	53                   	push   ebx
c001aa21:	68 de b7 02 c0       	push   0xc002b7de
c001aa26:	e8 7b fe ff ff       	call   c001a8a6 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa2b:	83 c4 10             	add    esp,0x10
c001aa2e:	5b                   	pop    ebx
c001aa2f:	5e                   	pop    esi
c001aa30:	5f                   	pop    edi
c001aa31:	c3                   	ret    

c001aa32 <Reg::readInt(char*, char*, int*)>:
c001aa32:	55                   	push   ebp
c001aa33:	57                   	push   edi
c001aa34:	56                   	push   esi
c001aa35:	53                   	push   ebx
c001aa36:	81 ec f0 00 00 00    	sub    esp,0xf0
c001aa3c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001aa40:	57                   	push   edi
c001aa41:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa48:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa4f:	e8 a7 ff ff ff       	call   c001a9fb <Reg::getLine(char*, char*, char*)>
c001aa54:	83 c4 10             	add    esp,0x10
c001aa57:	84 c0                	test   al,al
c001aa59:	0f 84 b3 00 00 00    	je     c001ab12 <Reg::readInt(char*, char*, int*)+0xe0>
c001aa5f:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001aa63:	80 fa 2b             	cmp    dl,0x2b
c001aa66:	74 0c                	je     c001aa74 <Reg::readInt(char*, char*, int*)+0x42>
c001aa68:	80 fa 2d             	cmp    dl,0x2d
c001aa6b:	75 0e                	jne    c001aa7b <Reg::readInt(char*, char*, int*)+0x49>
c001aa6d:	ba 01 00 00 00       	mov    edx,0x1
c001aa72:	eb 0b                	jmp    c001aa7f <Reg::readInt(char*, char*, int*)+0x4d>
c001aa74:	ba 01 00 00 00       	mov    edx,0x1
c001aa79:	eb 02                	jmp    c001aa7d <Reg::readInt(char*, char*, int*)+0x4b>
c001aa7b:	31 d2                	xor    edx,edx
c001aa7d:	31 c0                	xor    eax,eax
c001aa7f:	be 0a 00 00 00       	mov    esi,0xa
c001aa84:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001aa89:	75 20                	jne    c001aaab <Reg::readInt(char*, char*, int*)+0x79>
c001aa8b:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001aa8f:	80 f9 78             	cmp    cl,0x78
c001aa92:	75 0a                	jne    c001aa9e <Reg::readInt(char*, char*, int*)+0x6c>
c001aa94:	83 c2 02             	add    edx,0x2
c001aa97:	be 10 00 00 00       	mov    esi,0x10
c001aa9c:	eb 0d                	jmp    c001aaab <Reg::readInt(char*, char*, int*)+0x79>
c001aa9e:	80 f9 62             	cmp    cl,0x62
c001aaa1:	75 08                	jne    c001aaab <Reg::readInt(char*, char*, int*)+0x79>
c001aaa3:	83 c2 02             	add    edx,0x2
c001aaa6:	be 02 00 00 00       	mov    esi,0x2
c001aaab:	01 d7                	add    edi,edx
c001aaad:	31 d2                	xor    edx,edx
c001aaaf:	8a 1f                	mov    bl,BYTE PTR [edi]
c001aab1:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001aab5:	80 fb 0d             	cmp    bl,0xd
c001aab8:	0f 94 c3             	sete   bl
c001aabb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001aac0:	0f 94 c1             	sete   cl
c001aac3:	08 cb                	or     bl,cl
c001aac5:	75 3a                	jne    c001ab01 <Reg::readInt(char*, char*, int*)+0xcf>
c001aac7:	0f af d6             	imul   edx,esi
c001aaca:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001aacf:	83 fe 10             	cmp    esi,0x10
c001aad2:	75 26                	jne    c001aafa <Reg::readInt(char*, char*, int*)+0xc8>
c001aad4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aad8:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001aadb:	89 e9                	mov    ecx,ebp
c001aadd:	80 f9 05             	cmp    cl,0x5
c001aae0:	77 06                	ja     c001aae8 <Reg::readInt(char*, char*, int*)+0xb6>
c001aae2:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001aae6:	eb 16                	jmp    c001aafe <Reg::readInt(char*, char*, int*)+0xcc>
c001aae8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aaec:	83 e9 61             	sub    ecx,0x61
c001aaef:	80 f9 05             	cmp    cl,0x5
c001aaf2:	77 06                	ja     c001aafa <Reg::readInt(char*, char*, int*)+0xc8>
c001aaf4:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001aaf8:	eb 04                	jmp    c001aafe <Reg::readInt(char*, char*, int*)+0xcc>
c001aafa:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001aafe:	47                   	inc    edi
c001aaff:	eb ae                	jmp    c001aaaf <Reg::readInt(char*, char*, int*)+0x7d>
c001ab01:	84 c0                	test   al,al
c001ab03:	74 02                	je     c001ab07 <Reg::readInt(char*, char*, int*)+0xd5>
c001ab05:	f7 da                	neg    edx
c001ab07:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001ab0e:	89 10                	mov    DWORD PTR [eax],edx
c001ab10:	88 d8                	mov    al,bl
c001ab12:	81 c4 ec 00 00 00    	add    esp,0xec
c001ab18:	5b                   	pop    ebx
c001ab19:	5e                   	pop    esi
c001ab1a:	5f                   	pop    edi
c001ab1b:	5d                   	pop    ebp
c001ab1c:	c3                   	ret    

c001ab1d <Reg::readString(char*, char*, char*, int)>:
c001ab1d:	57                   	push   edi
c001ab1e:	56                   	push   esi
c001ab1f:	53                   	push   ebx
c001ab20:	81 ec d4 00 00 00    	sub    esp,0xd4
c001ab26:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001ab2d:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001ab31:	57                   	push   edi
c001ab32:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab39:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab40:	e8 b6 fe ff ff       	call   c001a9fb <Reg::getLine(char*, char*, char*)>
c001ab45:	83 c4 10             	add    esp,0x10
c001ab48:	89 c6                	mov    esi,eax
c001ab4a:	84 c0                	test   al,al
c001ab4c:	74 44                	je     c001ab92 <Reg::readString(char*, char*, char*, int)+0x75>
c001ab4e:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001ab55:	31 c0                	xor    eax,eax
c001ab57:	4a                   	dec    edx
c001ab58:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001ab5b:	84 c9                	test   cl,cl
c001ab5d:	74 0f                	je     c001ab6e <Reg::readString(char*, char*, char*, int)+0x51>
c001ab5f:	39 c2                	cmp    edx,eax
c001ab61:	7e 0b                	jle    c001ab6e <Reg::readString(char*, char*, char*, int)+0x51>
c001ab63:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001ab66:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001ab6b:	40                   	inc    eax
c001ab6c:	eb ea                	jmp    c001ab58 <Reg::readString(char*, char*, char*, int)+0x3b>
c001ab6e:	83 ec 0c             	sub    esp,0xc
c001ab71:	53                   	push   ebx
c001ab72:	e8 f5 5b fe ff       	call   c000076c <strlen>
c001ab77:	83 c4 10             	add    esp,0x10
c001ab7a:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001ab7f:	75 11                	jne    c001ab92 <Reg::readString(char*, char*, char*, int)+0x75>
c001ab81:	83 ec 0c             	sub    esp,0xc
c001ab84:	53                   	push   ebx
c001ab85:	e8 e2 5b fe ff       	call   c000076c <strlen>
c001ab8a:	83 c4 10             	add    esp,0x10
c001ab8d:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001ab92:	81 c4 d0 00 00 00    	add    esp,0xd0
c001ab98:	89 f0                	mov    eax,esi
c001ab9a:	5b                   	pop    ebx
c001ab9b:	5e                   	pop    esi
c001ab9c:	5f                   	pop    edi
c001ab9d:	c3                   	ret    

c001ab9e <Reg::readBool(char*, char*, bool*)>:
c001ab9e:	83 ec 20             	sub    esp,0x20
c001aba1:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aba5:	50                   	push   eax
c001aba6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abaa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abae:	e8 7f fe ff ff       	call   c001aa32 <Reg::readInt(char*, char*, int*)>
c001abb3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001abb8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001abbc:	0f 95 02             	setne  BYTE PTR [edx]
c001abbf:	83 c4 2c             	add    esp,0x2c
c001abc2:	c3                   	ret    

c001abc3 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001abc3:	53                   	push   ebx
c001abc4:	83 ec 1c             	sub    esp,0x1c
c001abc7:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001abcb:	8d 44 24 13          	lea    eax,[esp+0x13]
c001abcf:	50                   	push   eax
c001abd0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abd8:	e8 c1 ff ff ff       	call   c001ab9e <Reg::readBool(char*, char*, bool*)>
c001abdd:	83 c4 10             	add    esp,0x10
c001abe0:	84 c0                	test   al,al
c001abe2:	74 04                	je     c001abe8 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001abe4:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001abe8:	88 d8                	mov    al,bl
c001abea:	83 c4 18             	add    esp,0x18
c001abed:	5b                   	pop    ebx
c001abee:	c3                   	ret    

c001abef <Reg::readIntWithDefault(char*, char*, int)>:
c001abef:	53                   	push   ebx
c001abf0:	83 ec 1c             	sub    esp,0x1c
c001abf3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001abf7:	8d 44 24 10          	lea    eax,[esp+0x10]
c001abfb:	50                   	push   eax
c001abfc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac04:	e8 29 fe ff ff       	call   c001aa32 <Reg::readInt(char*, char*, int*)>
c001ac09:	83 c4 10             	add    esp,0x10
c001ac0c:	84 c0                	test   al,al
c001ac0e:	74 04                	je     c001ac14 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001ac10:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ac14:	89 d8                	mov    eax,ebx
c001ac16:	83 c4 18             	add    esp,0x18
c001ac19:	5b                   	pop    ebx
c001ac1a:	c3                   	ret    

c001ac1b <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ac1b:	57                   	push   edi
c001ac1c:	56                   	push   esi
c001ac1d:	56                   	push   esi
c001ac1e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ac22:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ac26:	56                   	push   esi
c001ac27:	57                   	push   edi
c001ac28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac30:	e8 e8 fe ff ff       	call   c001ab1d <Reg::readString(char*, char*, char*, int)>
c001ac35:	83 c4 10             	add    esp,0x10
c001ac38:	84 c0                	test   al,al
c001ac3a:	75 1a                	jne    c001ac56 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001ac3c:	51                   	push   ecx
c001ac3d:	56                   	push   esi
c001ac3e:	6a 00                	push   0x0
c001ac40:	57                   	push   edi
c001ac41:	e8 0a 5b fe ff       	call   c0000750 <memset>
c001ac46:	8d 4e ff             	lea    ecx,[esi-0x1]
c001ac49:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ac4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac4f:	83 c4 10             	add    esp,0x10
c001ac52:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ac56:	89 f8                	mov    eax,edi
c001ac58:	5a                   	pop    edx
c001ac59:	5e                   	pop    esi
c001ac5a:	5f                   	pop    edi
c001ac5b:	c3                   	ret    

c001ac5c <Sys::eject(regs*)>:
c001ac5c:	83 ec 0c             	sub    esp,0xc
c001ac5f:	83 ca ff             	or     edx,0xffffffff
c001ac62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac66:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ac69:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ac6e:	83 e9 41             	sub    ecx,0x41
c001ac71:	83 f9 19             	cmp    ecx,0x19
c001ac74:	77 18                	ja     c001ac8e <Sys::eject(regs*)+0x32>
c001ac76:	8b 0c 8d 00 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2100]
c001ac7d:	85 c9                	test   ecx,ecx
c001ac7f:	74 0d                	je     c001ac8e <Sys::eject(regs*)+0x32>
c001ac81:	83 ec 0c             	sub    esp,0xc
c001ac84:	51                   	push   ecx
c001ac85:	e8 28 b3 ff ff       	call   c0015fb2 <LogicalDisk::eject()>
c001ac8a:	83 c4 10             	add    esp,0x10
c001ac8d:	99                   	cdq    
c001ac8e:	83 c4 0c             	add    esp,0xc
c001ac91:	c3                   	ret    

c001ac92 <Sys::exit(regs*)>:
c001ac92:	83 ec 18             	sub    esp,0x18
c001ac95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac99:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ac9c:	e8 bc 35 00 00       	call   c001e25d <terminateTask(int)>
c001aca1:	83 c8 ff             	or     eax,0xffffffff
c001aca4:	83 c4 1c             	add    esp,0x1c
c001aca7:	89 c2                	mov    edx,eax
c001aca9:	c3                   	ret    

c001acaa <Sys::getCwd(regs*)>:
c001acaa:	83 ec 10             	sub    esp,0x10
c001acad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acb1:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001acb4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001acb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acbc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001acbf:	e8 64 7d ff ff       	call   c0012a28 <Fs::getcwd(Process*, char*, int)>
c001acc4:	83 c4 1c             	add    esp,0x1c
c001acc7:	99                   	cdq    
c001acc8:	c3                   	ret    

c001acc9 <Sys::getPID(regs*)>:
c001acc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001acd1:	8b 00                	mov    eax,DWORD PTR [eax]
c001acd3:	99                   	cdq    
c001acd4:	c3                   	ret    

c001acd5 <Sys::getRAMData(regs*)>:
c001acd5:	8b 0d 54 d9 02 c0    	mov    ecx,DWORD PTR ds:0xc002d954
c001acdb:	6b 05 50 d9 02 c0 64 	imul   eax,DWORD PTR ds:0xc002d950,0x64
c001ace2:	99                   	cdq    
c001ace3:	f7 f9                	idiv   ecx
c001ace5:	c1 e0 18             	shl    eax,0x18
c001ace8:	09 c8                	or     eax,ecx
c001acea:	99                   	cdq    
c001aceb:	c3                   	ret    

c001acec <Sys::getVGAPtr(regs*)>:
c001acec:	55                   	push   ebp
c001aced:	57                   	push   edi
c001acee:	56                   	push   esi
c001acef:	53                   	push   ebx
c001acf0:	83 ec 18             	sub    esp,0x18
c001acf3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001acf7:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001acfa:	e8 aa 30 00 00       	call   c001dda9 <Thr::processFromPID(int)>
c001acff:	83 c4 10             	add    esp,0x10
c001ad02:	89 c1                	mov    ecx,eax
c001ad04:	b8 01 00 00 00       	mov    eax,0x1
c001ad09:	85 c9                	test   ecx,ecx
c001ad0b:	74 59                	je     c001ad66 <Sys::getVGAPtr(regs*)+0x7a>
c001ad0d:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001ad13:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001ad17:	74 0c                	je     c001ad25 <Sys::getVGAPtr(regs*)+0x39>
c001ad19:	83 ec 0c             	sub    esp,0xc
c001ad1c:	53                   	push   ebx
c001ad1d:	e8 2f 56 ff ff       	call   c0010351 <setActiveTerminal(VgaText*)>
c001ad22:	83 c4 10             	add    esp,0x10
c001ad25:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001ad28:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ad2b:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001ad30:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad32:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ad35:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad38:	81 c3 82 00 00 00    	add    ebx,0x82
c001ad3e:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001ad44:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad47:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001ad4a:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001ad50:	50                   	push   eax
c001ad51:	50                   	push   eax
c001ad52:	53                   	push   ebx
c001ad53:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad56:	05 a8 0f 00 00       	add    eax,0xfa8
c001ad5b:	50                   	push   eax
c001ad5c:	e8 ab 5a fe ff       	call   c000080c <strcpy>
c001ad61:	83 c4 10             	add    esp,0x10
c001ad64:	31 c0                	xor    eax,eax
c001ad66:	83 c4 0c             	add    esp,0xc
c001ad69:	31 d2                	xor    edx,edx
c001ad6b:	5b                   	pop    ebx
c001ad6c:	5e                   	pop    esi
c001ad6d:	5f                   	pop    edi
c001ad6e:	5d                   	pop    ebp
c001ad6f:	c3                   	ret    

c001ad70 <Sys::loadDLL(regs*)>:
c001ad70:	56                   	push   esi
c001ad71:	53                   	push   ebx
c001ad72:	31 d2                	xor    edx,edx
c001ad74:	51                   	push   ecx
c001ad75:	b8 01 00 00 00       	mov    eax,0x1
c001ad7a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ad7e:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ad82:	0f 84 8c 00 00 00    	je     c001ae14 <Sys::loadDLL(regs*)+0xa4>
c001ad88:	83 ec 0c             	sub    esp,0xc
c001ad8b:	68 14 01 00 00       	push   0x114
c001ad90:	e8 04 48 ff ff       	call   c000f599 <malloc>
c001ad95:	83 c4 0c             	add    esp,0xc
c001ad98:	89 c3                	mov    ebx,eax
c001ad9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad9f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ada2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ada5:	53                   	push   ebx
c001ada6:	e8 7b 7e ff ff       	call   c0012c26 <File::File(char const*, Process*)>
c001adab:	83 c4 10             	add    esp,0x10
c001adae:	31 d2                	xor    edx,edx
c001adb0:	b8 02 00 00 00       	mov    eax,0x2
c001adb5:	85 db                	test   ebx,ebx
c001adb7:	74 5b                	je     c001ae14 <Sys::loadDLL(regs*)+0xa4>
c001adb9:	83 ec 0c             	sub    esp,0xc
c001adbc:	53                   	push   ebx
c001adbd:	e8 36 81 ff ff       	call   c0012ef8 <File::exists()>
c001adc2:	83 c4 10             	add    esp,0x10
c001adc5:	84 c0                	test   al,al
c001adc7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adc9:	75 11                	jne    c001addc <Sys::loadDLL(regs*)+0x6c>
c001adcb:	83 ec 0c             	sub    esp,0xc
c001adce:	53                   	push   ebx
c001adcf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001add2:	83 c4 10             	add    esp,0x10
c001add5:	b8 03 00 00 00       	mov    eax,0x3
c001adda:	eb 36                	jmp    c001ae12 <Sys::loadDLL(regs*)+0xa2>
c001addc:	83 ec 0c             	sub    esp,0xc
c001addf:	53                   	push   ebx
c001ade0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ade3:	58                   	pop    eax
c001ade4:	5a                   	pop    edx
c001ade5:	6a 00                	push   0x0
c001ade7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001adea:	e8 0e 22 00 00       	call   c001cffd <Thr::loadDLL(char const*, bool)>
c001adef:	83 c4 10             	add    esp,0x10
c001adf2:	89 c1                	mov    ecx,eax
c001adf4:	31 d2                	xor    edx,edx
c001adf6:	b8 04 00 00 00       	mov    eax,0x4
c001adfb:	85 c9                	test   ecx,ecx
c001adfd:	74 15                	je     c001ae14 <Sys::loadDLL(regs*)+0xa4>
c001adff:	53                   	push   ebx
c001ae00:	53                   	push   ebx
c001ae01:	ff 35 08 d9 02 c0    	push   DWORD PTR ds:0xc002d908
c001ae07:	51                   	push   ecx
c001ae08:	e8 1b 24 00 00       	call   c001d228 <Thr::executeDLL(unsigned long, void*)>
c001ae0d:	83 c4 10             	add    esp,0x10
c001ae10:	31 c0                	xor    eax,eax
c001ae12:	31 d2                	xor    edx,edx
c001ae14:	59                   	pop    ecx
c001ae15:	5b                   	pop    ebx
c001ae16:	5e                   	pop    esi
c001ae17:	c3                   	ret    

c001ae18 <Sys::read(regs*)>:
c001ae18:	57                   	push   edi
c001ae19:	56                   	push   esi
c001ae1a:	53                   	push   ebx
c001ae1b:	83 ec 10             	sub    esp,0x10
c001ae1e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae22:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ae25:	83 f8 02             	cmp    eax,0x2
c001ae28:	77 10                	ja     c001ae3a <Sys::read(regs*)+0x22>
c001ae2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae2f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae32:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ae38:	eb 0e                	jmp    c001ae48 <Sys::read(regs*)+0x30>
c001ae3a:	83 ec 0c             	sub    esp,0xc
c001ae3d:	50                   	push   eax
c001ae3e:	e8 82 62 ff ff       	call   c00110c5 <getFromFileDescriptor(int)>
c001ae43:	83 c4 10             	add    esp,0x10
c001ae46:	89 c1                	mov    ecx,eax
c001ae48:	83 c8 ff             	or     eax,0xffffffff
c001ae4b:	85 c9                	test   ecx,ecx
c001ae4d:	89 c2                	mov    edx,eax
c001ae4f:	74 28                	je     c001ae79 <Sys::read(regs*)+0x61>
c001ae51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae59:	31 ff                	xor    edi,edi
c001ae5b:	83 ec 0c             	sub    esp,0xc
c001ae5e:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae60:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ae64:	52                   	push   edx
c001ae65:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ae68:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ae6b:	57                   	push   edi
c001ae6c:	56                   	push   esi
c001ae6d:	51                   	push   ecx
c001ae6e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae75:	83 c4 20             	add    esp,0x20
c001ae78:	99                   	cdq    
c001ae79:	83 c4 10             	add    esp,0x10
c001ae7c:	5b                   	pop    ebx
c001ae7d:	5e                   	pop    esi
c001ae7e:	5f                   	pop    edi
c001ae7f:	c3                   	ret    

c001ae80 <Sys::sbrk(regs*)>:
c001ae80:	56                   	push   esi
c001ae81:	53                   	push   ebx
c001ae82:	50                   	push   eax
c001ae83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae8c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae8f:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001ae92:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001ae98:	85 db                	test   ebx,ebx
c001ae9a:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001ae9d:	74 02                	je     c001aea1 <Sys::sbrk(regs*)+0x21>
c001ae9f:	79 06                	jns    c001aea7 <Sys::sbrk(regs*)+0x27>
c001aea1:	89 f0                	mov    eax,esi
c001aea3:	31 d2                	xor    edx,edx
c001aea5:	eb 2a                	jmp    c001aed1 <Sys::sbrk(regs*)+0x51>
c001aea7:	83 c8 ff             	or     eax,0xffffffff
c001aeaa:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001aeb0:	89 c2                	mov    edx,eax
c001aeb2:	77 1d                	ja     c001aed1 <Sys::sbrk(regs*)+0x51>
c001aeb4:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001aeba:	50                   	push   eax
c001aebb:	c1 ea 0c             	shr    edx,0xc
c001aebe:	68 07 0c 00 00       	push   0xc07
c001aec3:	52                   	push   edx
c001aec4:	51                   	push   ecx
c001aec5:	e8 10 6c ff ff       	call   c0011ada <VAS::allocatePages(int, int)>
c001aeca:	89 f0                	mov    eax,esi
c001aecc:	31 d2                	xor    edx,edx
c001aece:	83 c4 10             	add    esp,0x10
c001aed1:	59                   	pop    ecx
c001aed2:	5b                   	pop    ebx
c001aed3:	5e                   	pop    esi
c001aed4:	c3                   	ret    

c001aed5 <Sys::setCwd(regs*)>:
c001aed5:	83 ec 14             	sub    esp,0x14
c001aed8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aedc:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aedf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aee4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aee7:	e8 ab 80 ff ff       	call   c0012f97 <Fs::setcwd(Process*, char*)>
c001aeec:	83 c4 1c             	add    esp,0x1c
c001aeef:	99                   	cdq    
c001aef0:	c3                   	ret    

c001aef1 <Sys::setTime(regs*)>:
c001aef1:	55                   	push   ebp
c001aef2:	31 c9                	xor    ecx,ecx
c001aef4:	57                   	push   edi
c001aef5:	bd 0c 00 00 00       	mov    ebp,0xc
c001aefa:	56                   	push   esi
c001aefb:	53                   	push   ebx
c001aefc:	31 db                	xor    ebx,ebx
c001aefe:	83 ec 10             	sub    esp,0x10
c001af01:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001af05:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001af08:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001af0b:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001af0e:	89 c2                	mov    edx,eax
c001af10:	66 81 ef 6c 07       	sub    di,0x76c
c001af15:	83 e2 1f             	and    edx,0x1f
c001af18:	c1 e7 10             	shl    edi,0x10
c001af1b:	42                   	inc    edx
c001af1c:	c1 e8 05             	shr    eax,0x5
c001af1f:	88 d1                	mov    cl,dl
c001af21:	31 d2                	xor    edx,edx
c001af23:	f7 f5                	div    ebp
c001af25:	89 dd                	mov    ebp,ebx
c001af27:	88 d5                	mov    ch,dl
c001af29:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001af2f:	0f b7 c1             	movzx  eax,cx
c001af32:	31 d2                	xor    edx,edx
c001af34:	09 f8                	or     eax,edi
c001af36:	bf 3c 00 00 00       	mov    edi,0x3c
c001af3b:	89 c1                	mov    ecx,eax
c001af3d:	89 f0                	mov    eax,esi
c001af3f:	f7 f7                	div    edi
c001af41:	c1 e2 10             	shl    edx,0x10
c001af44:	09 d5                	or     ebp,edx
c001af46:	31 d2                	xor    edx,edx
c001af48:	89 eb                	mov    ebx,ebp
c001af4a:	f7 f7                	div    edi
c001af4c:	bf 10 0e 00 00       	mov    edi,0xe10
c001af51:	88 d7                	mov    bh,dl
c001af53:	89 f0                	mov    eax,esi
c001af55:	31 d2                	xor    edx,edx
c001af57:	f7 f7                	div    edi
c001af59:	bf 18 00 00 00       	mov    edi,0x18
c001af5e:	31 d2                	xor    edx,edx
c001af60:	f7 f7                	div    edi
c001af62:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c001af67:	88 d3                	mov    bl,dl
c001af69:	53                   	push   ebx
c001af6a:	51                   	push   ecx
c001af6b:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001af71:	e8 6a 88 ff ff       	call   c00137e0 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001af76:	83 c4 1c             	add    esp,0x1c
c001af79:	83 f0 01             	xor    eax,0x1
c001af7c:	5b                   	pop    ebx
c001af7d:	0f b6 c0             	movzx  eax,al
c001af80:	5e                   	pop    esi
c001af81:	31 d2                	xor    edx,edx
c001af83:	5f                   	pop    edi
c001af84:	5d                   	pop    ebp
c001af85:	c3                   	ret    

c001af86 <Sys::timezone(regs*)>:
c001af86:	53                   	push   ebx
c001af87:	83 ec 08             	sub    esp,0x8
c001af8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af8e:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001af92:	75 17                	jne    c001afab <Sys::timezone(regs*)+0x25>
c001af94:	83 ec 0c             	sub    esp,0xc
c001af97:	68 f9 b7 02 c0       	push   0xc002b7f9
c001af9c:	e8 26 77 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001afa1:	83 c8 ff             	or     eax,0xffffffff
c001afa4:	83 c4 10             	add    esp,0x10
c001afa7:	89 c2                	mov    edx,eax
c001afa9:	eb 20                	jmp    c001afcb <Sys::timezone(regs*)+0x45>
c001afab:	83 ec 0c             	sub    esp,0xc
c001afae:	68 0e b8 02 c0       	push   0xc002b80e
c001afb3:	e8 0f 77 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001afb8:	58                   	pop    eax
c001afb9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001afbc:	e8 81 85 ff ff       	call   c0013542 <User::loadClockSettings(int)>
c001afc1:	83 c4 10             	add    esp,0x10
c001afc4:	b8 01 00 00 00       	mov    eax,0x1
c001afc9:	31 d2                	xor    edx,edx
c001afcb:	83 c4 08             	add    esp,0x8
c001afce:	5b                   	pop    ebx
c001afcf:	c3                   	ret    

c001afd0 <Sys::write(regs*)>:
c001afd0:	57                   	push   edi
c001afd1:	56                   	push   esi
c001afd2:	53                   	push   ebx
c001afd3:	83 ec 10             	sub    esp,0x10
c001afd6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001afda:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001afdd:	83 f8 02             	cmp    eax,0x2
c001afe0:	77 10                	ja     c001aff2 <Sys::write(regs*)+0x22>
c001afe2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afe7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001afea:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001aff0:	eb 0e                	jmp    c001b000 <Sys::write(regs*)+0x30>
c001aff2:	83 ec 0c             	sub    esp,0xc
c001aff5:	50                   	push   eax
c001aff6:	e8 ca 60 ff ff       	call   c00110c5 <getFromFileDescriptor(int)>
c001affb:	83 c4 10             	add    esp,0x10
c001affe:	89 c1                	mov    ecx,eax
c001b000:	83 c8 ff             	or     eax,0xffffffff
c001b003:	85 c9                	test   ecx,ecx
c001b005:	89 c2                	mov    edx,eax
c001b007:	74 28                	je     c001b031 <Sys::write(regs*)+0x61>
c001b009:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b011:	31 ff                	xor    edi,edi
c001b013:	83 ec 0c             	sub    esp,0xc
c001b016:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b018:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b01c:	52                   	push   edx
c001b01d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b020:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b023:	57                   	push   edi
c001b024:	56                   	push   esi
c001b025:	51                   	push   ecx
c001b026:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b029:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b02d:	83 c4 20             	add    esp,0x20
c001b030:	99                   	cdq    
c001b031:	83 c4 10             	add    esp,0x10
c001b034:	5b                   	pop    ebx
c001b035:	5e                   	pop    esi
c001b036:	5f                   	pop    edi
c001b037:	c3                   	ret    

c001b038 <Sys::wsbe(regs*)>:
c001b038:	57                   	push   edi
c001b039:	b9 0b 00 00 00       	mov    ecx,0xb
c001b03e:	56                   	push   esi
c001b03f:	be 4d b8 02 c0       	mov    esi,0xc002b84d
c001b044:	53                   	push   ebx
c001b045:	83 ec 30             	sub    esp,0x30
c001b048:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b04c:	fc                   	cld    
c001b04d:	83 ec 0c             	sub    esp,0xc
c001b050:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b052:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b056:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b05b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b05e:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b064:	8b 06                	mov    eax,DWORD PTR [esi]
c001b066:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b069:	57                   	push   edi
c001b06a:	e8 fd 56 fe ff       	call   c000076c <strlen>
c001b06f:	5a                   	pop    edx
c001b070:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b074:	52                   	push   edx
c001b075:	31 d2                	xor    edx,edx
c001b077:	57                   	push   edi
c001b078:	52                   	push   edx
c001b079:	50                   	push   eax
c001b07a:	56                   	push   esi
c001b07b:	ff d3                	call   ebx
c001b07d:	83 c4 14             	add    esp,0x14
c001b080:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b084:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b087:	e8 d1 31 00 00       	call   c001e25d <terminateTask(int)>
c001b08c:	83 c4 40             	add    esp,0x40
c001b08f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b094:	5b                   	pop    ebx
c001b095:	31 d2                	xor    edx,edx
c001b097:	5e                   	pop    esi
c001b098:	5f                   	pop    edi
c001b099:	c3                   	ret    

c001b09a <Sys::yield(regs*)>:
c001b09a:	57                   	push   edi
c001b09b:	56                   	push   esi
c001b09c:	53                   	push   ebx
c001b09d:	fa                   	cli    
c001b09e:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c001b0a4:	e8 14 29 00 00       	call   c001d9bd <schedule()>
c001b0a9:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001b0ae:	48                   	dec    eax
c001b0af:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001b0b4:	75 01                	jne    c001b0b7 <Sys::yield(regs*)+0x1d>
c001b0b6:	fb                   	sti    
c001b0b7:	8b 35 70 df 02 c0    	mov    esi,DWORD PTR ds:0xc002df70
c001b0bd:	8b 3d 74 df 02 c0    	mov    edi,DWORD PTR ds:0xc002df74
c001b0c3:	89 f0                	mov    eax,esi
c001b0c5:	89 fb                	mov    ebx,edi
c001b0c7:	89 f1                	mov    ecx,esi
c001b0c9:	c1 e0 07             	shl    eax,0x7
c001b0cc:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b0d0:	25 80 30 0f 00       	and    eax,0xf3080
c001b0d5:	c1 eb 17             	shr    ebx,0x17
c001b0d8:	31 c8                	xor    eax,ecx
c001b0da:	89 da                	mov    edx,ebx
c001b0dc:	5b                   	pop    ebx
c001b0dd:	5e                   	pop    esi
c001b0de:	5f                   	pop    edi
c001b0df:	c3                   	ret    

c001b0e0 <sysCallSeekDir(regs*)>:
c001b0e0:	31 c0                	xor    eax,eax
c001b0e2:	31 d2                	xor    edx,edx
c001b0e4:	c3                   	ret    

c001b0e5 <sysCallTellDir(regs*)>:
c001b0e5:	31 c0                	xor    eax,eax
c001b0e7:	31 d2                	xor    edx,edx
c001b0e9:	c3                   	ret    

c001b0ea <sysCallVerify(regs*)>:
c001b0ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0ee:	31 d2                	xor    edx,edx
c001b0f0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b0f3:	c3                   	ret    

c001b0f4 <sysCallGetArgc(regs*)>:
c001b0f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0f9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0fc:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b102:	99                   	cdq    
c001b103:	c3                   	ret    

c001b104 <sysFormatDisk(regs*)>:
c001b104:	56                   	push   esi
c001b105:	53                   	push   ebx
c001b106:	53                   	push   ebx
c001b107:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b10b:	8b 1d 74 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da74
c001b111:	eb 25                	jmp    c001b138 <sysFormatDisk(regs*)+0x34>
c001b113:	83 ec 0c             	sub    esp,0xc
c001b116:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b119:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b11b:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b11e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b121:	50                   	push   eax
c001b122:	ff 34 85 00 df 02 c0 	push   DWORD PTR [eax*4-0x3ffd2100]
c001b129:	53                   	push   ebx
c001b12a:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b12d:	83 c4 20             	add    esp,0x20
c001b130:	83 f8 08             	cmp    eax,0x8
c001b133:	75 12                	jne    c001b147 <sysFormatDisk(regs*)+0x43>
c001b135:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b138:	85 db                	test   ebx,ebx
c001b13a:	75 d7                	jne    c001b113 <sysFormatDisk(regs*)+0xf>
c001b13c:	59                   	pop    ecx
c001b13d:	b8 03 00 00 00       	mov    eax,0x3
c001b142:	31 d2                	xor    edx,edx
c001b144:	5b                   	pop    ebx
c001b145:	5e                   	pop    esi
c001b146:	c3                   	ret    
c001b147:	85 c0                	test   eax,eax
c001b149:	74 1b                	je     c001b166 <sysFormatDisk(regs*)+0x62>
c001b14b:	83 f8 09             	cmp    eax,0x9
c001b14e:	74 0b                	je     c001b15b <sysFormatDisk(regs*)+0x57>
c001b150:	59                   	pop    ecx
c001b151:	b8 02 00 00 00       	mov    eax,0x2
c001b156:	31 d2                	xor    edx,edx
c001b158:	5b                   	pop    ebx
c001b159:	5e                   	pop    esi
c001b15a:	c3                   	ret    
c001b15b:	59                   	pop    ecx
c001b15c:	b8 01 00 00 00       	mov    eax,0x1
c001b161:	31 d2                	xor    edx,edx
c001b163:	5b                   	pop    ebx
c001b164:	5e                   	pop    esi
c001b165:	c3                   	ret    
c001b166:	59                   	pop    ecx
c001b167:	31 c0                	xor    eax,eax
c001b169:	31 d2                	xor    edx,edx
c001b16b:	5b                   	pop    ebx
c001b16c:	5e                   	pop    esi
c001b16d:	c3                   	ret    

c001b16e <sysSetDiskVolumeLabel(regs*)>:
c001b16e:	56                   	push   esi
c001b16f:	53                   	push   ebx
c001b170:	53                   	push   ebx
c001b171:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b175:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b178:	83 f8 19             	cmp    eax,0x19
c001b17b:	77 29                	ja     c001b1a6 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b17d:	8b 0c 85 00 df 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2100]
c001b184:	85 c9                	test   ecx,ecx
c001b186:	74 1e                	je     c001b1a6 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b188:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b18b:	85 d2                	test   edx,edx
c001b18d:	74 17                	je     c001b1a6 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b18f:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b195:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b197:	52                   	push   edx
c001b198:	50                   	push   eax
c001b199:	51                   	push   ecx
c001b19a:	53                   	push   ebx
c001b19b:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b19e:	83 c4 10             	add    esp,0x10
c001b1a1:	99                   	cdq    
c001b1a2:	59                   	pop    ecx
c001b1a3:	5b                   	pop    ebx
c001b1a4:	5e                   	pop    esi
c001b1a5:	c3                   	ret    
c001b1a6:	59                   	pop    ecx
c001b1a7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b1ac:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1b1:	5b                   	pop    ebx
c001b1b2:	5e                   	pop    esi
c001b1b3:	c3                   	ret    

c001b1b4 <sysGetDiskVolumeLabel(regs*)>:
c001b1b4:	57                   	push   edi
c001b1b5:	56                   	push   esi
c001b1b6:	53                   	push   ebx
c001b1b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1bb:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b1be:	83 fa 19             	cmp    edx,0x19
c001b1c1:	77 34                	ja     c001b1f7 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1c3:	8b 0c 95 00 df 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2100]
c001b1ca:	85 c9                	test   ecx,ecx
c001b1cc:	74 29                	je     c001b1f7 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1ce:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b1d1:	85 db                	test   ebx,ebx
c001b1d3:	74 22                	je     c001b1f7 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1d5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b1d8:	85 c0                	test   eax,eax
c001b1da:	74 1b                	je     c001b1f7 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1dc:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b1e2:	83 ec 0c             	sub    esp,0xc
c001b1e5:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b1e7:	50                   	push   eax
c001b1e8:	53                   	push   ebx
c001b1e9:	52                   	push   edx
c001b1ea:	51                   	push   ecx
c001b1eb:	56                   	push   esi
c001b1ec:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b1ef:	83 c4 20             	add    esp,0x20
c001b1f2:	99                   	cdq    
c001b1f3:	5b                   	pop    ebx
c001b1f4:	5e                   	pop    esi
c001b1f5:	5f                   	pop    edi
c001b1f6:	c3                   	ret    
c001b1f7:	5b                   	pop    ebx
c001b1f8:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b1fd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b202:	5e                   	pop    esi
c001b203:	5f                   	pop    edi
c001b204:	c3                   	ret    

c001b205 <sysShutdown(regs*)>:
c001b205:	83 ec 0c             	sub    esp,0xc
c001b208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b20c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b20f:	85 c0                	test   eax,eax
c001b211:	74 18                	je     c001b22b <sysShutdown(regs*)+0x26>
c001b213:	83 f8 01             	cmp    eax,0x1
c001b216:	74 38                	je     c001b250 <sysShutdown(regs*)+0x4b>
c001b218:	83 f8 02             	cmp    eax,0x2
c001b21b:	74 24                	je     c001b241 <sysShutdown(regs*)+0x3c>
c001b21d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b222:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b227:	83 c4 0c             	add    esp,0xc
c001b22a:	c3                   	ret    
c001b22b:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c001b230:	8b 10                	mov    edx,DWORD PTR [eax]
c001b232:	6a 00                	push   0x0
c001b234:	6a 00                	push   0x0
c001b236:	6a 00                	push   0x0
c001b238:	50                   	push   eax
c001b239:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b23c:	83 c4 10             	add    esp,0x10
c001b23f:	eb dc                	jmp    c001b21d <sysShutdown(regs*)+0x18>
c001b241:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c001b246:	8b 10                	mov    edx,DWORD PTR [eax]
c001b248:	6a 00                	push   0x0
c001b24a:	6a 00                	push   0x0
c001b24c:	6a 01                	push   0x1
c001b24e:	eb e8                	jmp    c001b238 <sysShutdown(regs*)+0x33>
c001b250:	a1 a0 ff 02 c0       	mov    eax,ds:0xc002ffa0
c001b255:	85 c0                	test   eax,eax
c001b257:	74 02                	je     c001b25b <sysShutdown(regs*)+0x56>
c001b259:	ff d0                	call   eax
c001b25b:	31 c0                	xor    eax,eax
c001b25d:	31 d2                	xor    edx,edx
c001b25f:	83 c4 0c             	add    esp,0xc
c001b262:	c3                   	ret    

c001b263 <sysCallRealpath(regs*)>:
c001b263:	83 ec 0c             	sub    esp,0xc
c001b266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b26a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b26d:	85 d2                	test   edx,edx
c001b26f:	74 07                	je     c001b278 <sysCallRealpath(regs*)+0x15>
c001b271:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b274:	85 c0                	test   eax,eax
c001b276:	75 0b                	jne    c001b283 <sysCallRealpath(regs*)+0x20>
c001b278:	b8 01 00 00 00       	mov    eax,0x1
c001b27d:	31 d2                	xor    edx,edx
c001b27f:	83 c4 0c             	add    esp,0xc
c001b282:	c3                   	ret    
c001b283:	51                   	push   ecx
c001b284:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b28a:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b28d:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b293:	51                   	push   ecx
c001b294:	52                   	push   edx
c001b295:	50                   	push   eax
c001b296:	e8 e1 77 ff ff       	call   c0012a7c <Fs::standardiseFiles(char*, char const*, char const*)>
c001b29b:	83 c4 10             	add    esp,0x10
c001b29e:	31 c0                	xor    eax,eax
c001b2a0:	31 d2                	xor    edx,edx
c001b2a2:	83 c4 0c             	add    esp,0xc
c001b2a5:	c3                   	ret    

c001b2a6 <sysCallReadDir(regs*)>:
c001b2a6:	53                   	push   ebx
c001b2a7:	83 ec 18             	sub    esp,0x18
c001b2aa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2ae:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b2b1:	83 f8 02             	cmp    eax,0x2
c001b2b4:	76 60                	jbe    c001b316 <sysCallReadDir(regs*)+0x70>
c001b2b6:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b2bd:	77 48                	ja     c001b307 <sysCallReadDir(regs*)+0x61>
c001b2bf:	83 ec 0c             	sub    esp,0xc
c001b2c2:	50                   	push   eax
c001b2c3:	e8 fd 5d ff ff       	call   c00110c5 <getFromFileDescriptor(int)>
c001b2c8:	83 c4 10             	add    esp,0x10
c001b2cb:	85 c0                	test   eax,eax
c001b2cd:	74 38                	je     c001b307 <sysCallReadDir(regs*)+0x61>
c001b2cf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b2d7:	83 ec 0c             	sub    esp,0xc
c001b2da:	8b 10                	mov    edx,DWORD PTR [eax]
c001b2dc:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b2e0:	51                   	push   ecx
c001b2e1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b2e4:	6a 00                	push   0x0
c001b2e6:	68 10 01 00 00       	push   0x110
c001b2eb:	50                   	push   eax
c001b2ec:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b2ef:	83 c4 20             	add    esp,0x20
c001b2f2:	85 c0                	test   eax,eax
c001b2f4:	74 29                	je     c001b31f <sysCallReadDir(regs*)+0x79>
c001b2f6:	83 f8 07             	cmp    eax,0x7
c001b2f9:	74 1b                	je     c001b316 <sysCallReadDir(regs*)+0x70>
c001b2fb:	b8 02 00 00 00       	mov    eax,0x2
c001b300:	31 d2                	xor    edx,edx
c001b302:	83 c4 18             	add    esp,0x18
c001b305:	5b                   	pop    ebx
c001b306:	c3                   	ret    
c001b307:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b30c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b311:	83 c4 18             	add    esp,0x18
c001b314:	5b                   	pop    ebx
c001b315:	c3                   	ret    
c001b316:	b8 01 00 00 00       	mov    eax,0x1
c001b31b:	31 d2                	xor    edx,edx
c001b31d:	eb e3                	jmp    c001b302 <sysCallReadDir(regs*)+0x5c>
c001b31f:	31 c0                	xor    eax,eax
c001b321:	31 d2                	xor    edx,edx
c001b323:	eb dd                	jmp    c001b302 <sysCallReadDir(regs*)+0x5c>

c001b325 <sysCallIsATTY(regs*)>:
c001b325:	83 ec 0c             	sub    esp,0xc
c001b328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b32c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b32f:	83 f8 02             	cmp    eax,0x2
c001b332:	76 07                	jbe    c001b33b <sysCallIsATTY(regs*)+0x16>
c001b334:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b339:	75 26                	jne    c001b361 <sysCallIsATTY(regs*)+0x3c>
c001b33b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b340:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b343:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b349:	85 c0                	test   eax,eax
c001b34b:	74 24                	je     c001b371 <sysCallIsATTY(regs*)+0x4c>
c001b34d:	83 ec 0c             	sub    esp,0xc
c001b350:	8b 10                	mov    edx,DWORD PTR [eax]
c001b352:	50                   	push   eax
c001b353:	ff 12                	call   DWORD PTR [edx]
c001b355:	31 d2                	xor    edx,edx
c001b357:	0f b6 c0             	movzx  eax,al
c001b35a:	83 c4 10             	add    esp,0x10
c001b35d:	83 c4 0c             	add    esp,0xc
c001b360:	c3                   	ret    
c001b361:	83 ec 0c             	sub    esp,0xc
c001b364:	50                   	push   eax
c001b365:	e8 5b 5d ff ff       	call   c00110c5 <getFromFileDescriptor(int)>
c001b36a:	83 c4 10             	add    esp,0x10
c001b36d:	85 c0                	test   eax,eax
c001b36f:	75 dc                	jne    c001b34d <sysCallIsATTY(regs*)+0x28>
c001b371:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b376:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b37b:	83 c4 0c             	add    esp,0xc
c001b37e:	c3                   	ret    

c001b37f <sysCallSeek(regs*)>:
c001b37f:	53                   	push   ebx
c001b380:	83 ec 08             	sub    esp,0x8
c001b383:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b387:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b38a:	8d 50 fd             	lea    edx,[eax-0x3]
c001b38d:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b393:	77 32                	ja     c001b3c7 <sysCallSeek(regs*)+0x48>
c001b395:	83 ec 0c             	sub    esp,0xc
c001b398:	50                   	push   eax
c001b399:	e8 27 5d ff ff       	call   c00110c5 <getFromFileDescriptor(int)>
c001b39e:	83 c4 0c             	add    esp,0xc
c001b3a1:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b3a4:	31 db                	xor    ebx,ebx
c001b3a6:	53                   	push   ebx
c001b3a7:	51                   	push   ecx
c001b3a8:	50                   	push   eax
c001b3a9:	e8 9a 79 ff ff       	call   c0012d48 <File::seek(unsigned long long)>
c001b3ae:	83 c4 10             	add    esp,0x10
c001b3b1:	85 c0                	test   eax,eax
c001b3b3:	0f 95 c0             	setne  al
c001b3b6:	31 d2                	xor    edx,edx
c001b3b8:	0f b6 c0             	movzx  eax,al
c001b3bb:	f7 d8                	neg    eax
c001b3bd:	83 d2 00             	adc    edx,0x0
c001b3c0:	83 c4 08             	add    esp,0x8
c001b3c3:	f7 da                	neg    edx
c001b3c5:	5b                   	pop    ebx
c001b3c6:	c3                   	ret    
c001b3c7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3cc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3d1:	83 c4 08             	add    esp,0x8
c001b3d4:	5b                   	pop    ebx
c001b3d5:	c3                   	ret    

c001b3d6 <sysCallTell(regs*)>:
c001b3d6:	53                   	push   ebx
c001b3d7:	83 ec 08             	sub    esp,0x8
c001b3da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b3de:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3e1:	83 f8 02             	cmp    eax,0x2
c001b3e4:	76 4d                	jbe    c001b433 <sysCallTell(regs*)+0x5d>
c001b3e6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b3eb:	76 19                	jbe    c001b406 <sysCallTell(regs*)+0x30>
c001b3ed:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b3f0:	31 d2                	xor    edx,edx
c001b3f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b3f8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b3ff:	31 c0                	xor    eax,eax
c001b401:	83 c4 08             	add    esp,0x8
c001b404:	5b                   	pop    ebx
c001b405:	c3                   	ret    
c001b406:	83 ec 0c             	sub    esp,0xc
c001b409:	50                   	push   eax
c001b40a:	e8 b6 5c ff ff       	call   c00110c5 <getFromFileDescriptor(int)>
c001b40f:	5a                   	pop    edx
c001b410:	59                   	pop    ecx
c001b411:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b414:	50                   	push   eax
c001b415:	e8 84 79 ff ff       	call   c0012d9e <File::tell(unsigned long long*)>
c001b41a:	83 c4 10             	add    esp,0x10
c001b41d:	85 c0                	test   eax,eax
c001b41f:	0f 95 c0             	setne  al
c001b422:	31 d2                	xor    edx,edx
c001b424:	0f b6 c0             	movzx  eax,al
c001b427:	f7 d8                	neg    eax
c001b429:	83 d2 00             	adc    edx,0x0
c001b42c:	83 c4 08             	add    esp,0x8
c001b42f:	f7 da                	neg    edx
c001b431:	5b                   	pop    ebx
c001b432:	c3                   	ret    
c001b433:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b438:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b43d:	83 c4 08             	add    esp,0x8
c001b440:	5b                   	pop    ebx
c001b441:	c3                   	ret    

c001b442 <sysCallSize(regs*)>:
c001b442:	53                   	push   ebx
c001b443:	83 ec 18             	sub    esp,0x18
c001b446:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b44a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b44d:	83 f8 02             	cmp    eax,0x2
c001b450:	76 53                	jbe    c001b4a5 <sysCallSize(regs*)+0x63>
c001b452:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b457:	76 19                	jbe    c001b472 <sysCallSize(regs*)+0x30>
c001b459:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b45c:	31 d2                	xor    edx,edx
c001b45e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b464:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b46b:	31 c0                	xor    eax,eax
c001b46d:	83 c4 18             	add    esp,0x18
c001b470:	5b                   	pop    ebx
c001b471:	c3                   	ret    
c001b472:	83 ec 0c             	sub    esp,0xc
c001b475:	50                   	push   eax
c001b476:	e8 4a 5c ff ff       	call   c00110c5 <getFromFileDescriptor(int)>
c001b47b:	83 c4 0c             	add    esp,0xc
c001b47e:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b482:	52                   	push   edx
c001b483:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b486:	50                   	push   eax
c001b487:	e8 aa 7a ff ff       	call   c0012f36 <File::stat(unsigned long long*, bool*)>
c001b48c:	83 c4 10             	add    esp,0x10
c001b48f:	85 c0                	test   eax,eax
c001b491:	0f 95 c0             	setne  al
c001b494:	31 d2                	xor    edx,edx
c001b496:	0f b6 c0             	movzx  eax,al
c001b499:	f7 d8                	neg    eax
c001b49b:	83 d2 00             	adc    edx,0x0
c001b49e:	83 c4 18             	add    esp,0x18
c001b4a1:	f7 da                	neg    edx
c001b4a3:	5b                   	pop    ebx
c001b4a4:	c3                   	ret    
c001b4a5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4aa:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4af:	83 c4 18             	add    esp,0x18
c001b4b2:	5b                   	pop    ebx
c001b4b3:	c3                   	ret    

c001b4b4 <sysCallSizeFromFilename(regs*)>:
c001b4b4:	57                   	push   edi
c001b4b5:	56                   	push   esi
c001b4b6:	53                   	push   ebx
c001b4b7:	83 ec 20             	sub    esp,0x20
c001b4ba:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b4be:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b4c1:	83 fb 02             	cmp    ebx,0x2
c001b4c4:	0f 86 88 00 00 00    	jbe    c001b552 <sysCallSizeFromFilename(regs*)+0x9e>
c001b4ca:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b4d0:	76 1b                	jbe    c001b4ed <sysCallSizeFromFilename(regs*)+0x39>
c001b4d2:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b4d5:	31 d2                	xor    edx,edx
c001b4d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b4dd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b4e4:	83 c4 20             	add    esp,0x20
c001b4e7:	31 c0                	xor    eax,eax
c001b4e9:	5b                   	pop    ebx
c001b4ea:	5e                   	pop    esi
c001b4eb:	5f                   	pop    edi
c001b4ec:	c3                   	ret    
c001b4ed:	83 ec 0c             	sub    esp,0xc
c001b4f0:	68 14 01 00 00       	push   0x114
c001b4f5:	e8 9f 40 ff ff       	call   c000f599 <malloc>
c001b4fa:	83 c4 0c             	add    esp,0xc
c001b4fd:	89 c7                	mov    edi,eax
c001b4ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b504:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b507:	53                   	push   ebx
c001b508:	57                   	push   edi
c001b509:	e8 18 77 ff ff       	call   c0012c26 <File::File(char const*, Process*)>
c001b50e:	83 c4 0c             	add    esp,0xc
c001b511:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b515:	50                   	push   eax
c001b516:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b519:	57                   	push   edi
c001b51a:	e8 17 7a ff ff       	call   c0012f36 <File::stat(unsigned long long*, bool*)>
c001b51f:	83 c4 10             	add    esp,0x10
c001b522:	85 ff                	test   edi,edi
c001b524:	74 14                	je     c001b53a <sysCallSizeFromFilename(regs*)+0x86>
c001b526:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b52a:	8b 17                	mov    edx,DWORD PTR [edi]
c001b52c:	83 ec 0c             	sub    esp,0xc
c001b52f:	57                   	push   edi
c001b530:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b533:	83 c4 10             	add    esp,0x10
c001b536:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b53a:	85 c0                	test   eax,eax
c001b53c:	0f 95 c0             	setne  al
c001b53f:	31 d2                	xor    edx,edx
c001b541:	0f b6 c0             	movzx  eax,al
c001b544:	f7 d8                	neg    eax
c001b546:	83 d2 00             	adc    edx,0x0
c001b549:	83 c4 20             	add    esp,0x20
c001b54c:	f7 da                	neg    edx
c001b54e:	5b                   	pop    ebx
c001b54f:	5e                   	pop    esi
c001b550:	5f                   	pop    edi
c001b551:	c3                   	ret    
c001b552:	83 c4 20             	add    esp,0x20
c001b555:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b55a:	5b                   	pop    ebx
c001b55b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b560:	5e                   	pop    esi
c001b561:	5f                   	pop    edi
c001b562:	c3                   	ret    

c001b563 <sysCallClose(regs*)>:
c001b563:	53                   	push   ebx
c001b564:	83 ec 08             	sub    esp,0x8
c001b567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b56b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b56e:	83 f8 02             	cmp    eax,0x2
c001b571:	76 41                	jbe    c001b5b4 <sysCallClose(regs*)+0x51>
c001b573:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b579:	83 fa 01             	cmp    edx,0x1
c001b57c:	76 2d                	jbe    c001b5ab <sysCallClose(regs*)+0x48>
c001b57e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b583:	77 2f                	ja     c001b5b4 <sysCallClose(regs*)+0x51>
c001b585:	83 ec 0c             	sub    esp,0xc
c001b588:	50                   	push   eax
c001b589:	e8 37 5b ff ff       	call   c00110c5 <getFromFileDescriptor(int)>
c001b58e:	89 c3                	mov    ebx,eax
c001b590:	89 04 24             	mov    DWORD PTR [esp],eax
c001b593:	e8 50 77 ff ff       	call   c0012ce8 <File::close()>
c001b598:	83 c4 10             	add    esp,0x10
c001b59b:	85 db                	test   ebx,ebx
c001b59d:	74 0c                	je     c001b5ab <sysCallClose(regs*)+0x48>
c001b59f:	83 ec 0c             	sub    esp,0xc
c001b5a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5a4:	53                   	push   ebx
c001b5a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b5a8:	83 c4 10             	add    esp,0x10
c001b5ab:	31 c0                	xor    eax,eax
c001b5ad:	31 d2                	xor    edx,edx
c001b5af:	83 c4 08             	add    esp,0x8
c001b5b2:	5b                   	pop    ebx
c001b5b3:	c3                   	ret    
c001b5b4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5b9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5be:	83 c4 08             	add    esp,0x8
c001b5c1:	5b                   	pop    ebx
c001b5c2:	c3                   	ret    

c001b5c3 <sysCallOpenDir(regs*)>:
c001b5c3:	56                   	push   esi
c001b5c4:	53                   	push   ebx
c001b5c5:	53                   	push   ebx
c001b5c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5ca:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b5cd:	85 f6                	test   esi,esi
c001b5cf:	74 59                	je     c001b62a <sysCallOpenDir(regs*)+0x67>
c001b5d1:	83 ec 0c             	sub    esp,0xc
c001b5d4:	68 14 01 00 00       	push   0x114
c001b5d9:	e8 bb 3f ff ff       	call   c000f599 <malloc>
c001b5de:	83 c4 0c             	add    esp,0xc
c001b5e1:	89 c6                	mov    esi,eax
c001b5e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5e8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5eb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b5ee:	56                   	push   esi
c001b5ef:	e8 de 7a ff ff       	call   c00130d2 <Directory::Directory(char const*, Process*)>
c001b5f4:	83 c4 10             	add    esp,0x10
c001b5f7:	85 f6                	test   esi,esi
c001b5f9:	74 2f                	je     c001b62a <sysCallOpenDir(regs*)+0x67>
c001b5fb:	83 ec 0c             	sub    esp,0xc
c001b5fe:	56                   	push   esi
c001b5ff:	e8 32 7b ff ff       	call   c0013136 <Directory::open()>
c001b604:	83 c4 10             	add    esp,0x10
c001b607:	85 c0                	test   eax,eax
c001b609:	75 1f                	jne    c001b62a <sysCallOpenDir(regs*)+0x67>
c001b60b:	83 ec 0c             	sub    esp,0xc
c001b60e:	56                   	push   esi
c001b60f:	e8 bc 57 ff ff       	call   c0010dd0 <UnixFile::getFileDescriptor()>
c001b614:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b617:	83 c4 10             	add    esp,0x10
c001b61a:	89 02                	mov    DWORD PTR [edx],eax
c001b61c:	c1 f8 1f             	sar    eax,0x1f
c001b61f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b622:	31 c0                	xor    eax,eax
c001b624:	59                   	pop    ecx
c001b625:	31 d2                	xor    edx,edx
c001b627:	5b                   	pop    ebx
c001b628:	5e                   	pop    esi
c001b629:	c3                   	ret    
c001b62a:	59                   	pop    ecx
c001b62b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b630:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b635:	5b                   	pop    ebx
c001b636:	5e                   	pop    esi
c001b637:	c3                   	ret    

c001b638 <sysCallCloseDir(regs*)>:
c001b638:	53                   	push   ebx
c001b639:	83 ec 08             	sub    esp,0x8
c001b63c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b640:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b643:	8d 50 fd             	lea    edx,[eax-0x3]
c001b646:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b64c:	77 2f                	ja     c001b67d <sysCallCloseDir(regs*)+0x45>
c001b64e:	83 ec 0c             	sub    esp,0xc
c001b651:	50                   	push   eax
c001b652:	e8 6e 5a ff ff       	call   c00110c5 <getFromFileDescriptor(int)>
c001b657:	89 c3                	mov    ebx,eax
c001b659:	89 04 24             	mov    DWORD PTR [esp],eax
c001b65c:	e8 31 7b ff ff       	call   c0013192 <Directory::close()>
c001b661:	83 c4 10             	add    esp,0x10
c001b664:	85 db                	test   ebx,ebx
c001b666:	74 0c                	je     c001b674 <sysCallCloseDir(regs*)+0x3c>
c001b668:	83 ec 0c             	sub    esp,0xc
c001b66b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b66d:	53                   	push   ebx
c001b66e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b671:	83 c4 10             	add    esp,0x10
c001b674:	31 c0                	xor    eax,eax
c001b676:	31 d2                	xor    edx,edx
c001b678:	83 c4 08             	add    esp,0x8
c001b67b:	5b                   	pop    ebx
c001b67c:	c3                   	ret    
c001b67d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b682:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b687:	83 c4 08             	add    esp,0x8
c001b68a:	5b                   	pop    ebx
c001b68b:	c3                   	ret    

c001b68c <sysCallMakeDir(regs*)>:
c001b68c:	56                   	push   esi
c001b68d:	53                   	push   ebx
c001b68e:	83 ec 10             	sub    esp,0x10
c001b691:	68 14 01 00 00       	push   0x114
c001b696:	e8 fe 3e ff ff       	call   c000f599 <malloc>
c001b69b:	83 c4 0c             	add    esp,0xc
c001b69e:	89 c3                	mov    ebx,eax
c001b6a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6a5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b6a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b6ac:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6af:	53                   	push   ebx
c001b6b0:	e8 1d 7a ff ff       	call   c00130d2 <Directory::Directory(char const*, Process*)>
c001b6b5:	83 c4 10             	add    esp,0x10
c001b6b8:	85 db                	test   ebx,ebx
c001b6ba:	74 32                	je     c001b6ee <sysCallMakeDir(regs*)+0x62>
c001b6bc:	83 ec 0c             	sub    esp,0xc
c001b6bf:	53                   	push   ebx
c001b6c0:	e8 51 7c ff ff       	call   c0013316 <Directory::create()>
c001b6c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6c8:	89 c6                	mov    esi,eax
c001b6ca:	e8 c3 7a ff ff       	call   c0013192 <Directory::close()>
c001b6cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6d4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b6d7:	83 c4 10             	add    esp,0x10
c001b6da:	31 c0                	xor    eax,eax
c001b6dc:	59                   	pop    ecx
c001b6dd:	85 f6                	test   esi,esi
c001b6df:	5b                   	pop    ebx
c001b6e0:	0f 95 c0             	setne  al
c001b6e3:	5e                   	pop    esi
c001b6e4:	31 d2                	xor    edx,edx
c001b6e6:	f7 d8                	neg    eax
c001b6e8:	83 d2 00             	adc    edx,0x0
c001b6eb:	f7 da                	neg    edx
c001b6ed:	c3                   	ret    
c001b6ee:	59                   	pop    ecx
c001b6ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6f4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6f9:	5b                   	pop    ebx
c001b6fa:	5e                   	pop    esi
c001b6fb:	c3                   	ret    

c001b6fc <sysCallWait(regs*)>:
c001b6fc:	83 ec 10             	sub    esp,0x10
c001b6ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b703:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b706:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b709:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b70c:	e8 af 24 00 00       	call   c001dbc0 <waitTask(int, int*, int)>
c001b711:	83 c4 1c             	add    esp,0x1c
c001b714:	99                   	cdq    
c001b715:	c3                   	ret    

c001b716 <sysCallNotImpl(regs*)>:
c001b716:	83 ec 18             	sub    esp,0x18
c001b719:	68 79 b8 02 c0       	push   0xc002b879
c001b71e:	e8 10 e7 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c001b723:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b728:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b72d:	83 c4 1c             	add    esp,0x1c
c001b730:	c3                   	ret    

c001b731 <sysPanic(regs*)>:
c001b731:	83 ec 18             	sub    esp,0x18
c001b734:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b738:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b73b:	e8 f3 e6 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c001b740:	b8 01 00 00 00       	mov    eax,0x1
c001b745:	31 d2                	xor    edx,edx
c001b747:	83 c4 1c             	add    esp,0x1c
c001b74a:	c3                   	ret    

c001b74b <sysCallRmdir(regs*)>:
c001b74b:	56                   	push   esi
c001b74c:	53                   	push   ebx
c001b74d:	83 ec 20             	sub    esp,0x20
c001b750:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b754:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b757:	68 14 01 00 00       	push   0x114
c001b75c:	e8 38 3e ff ff       	call   c000f599 <malloc>
c001b761:	83 c4 0c             	add    esp,0xc
c001b764:	89 c3                	mov    ebx,eax
c001b766:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b76b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b76e:	56                   	push   esi
c001b76f:	53                   	push   ebx
c001b770:	e8 b1 74 ff ff       	call   c0012c26 <File::File(char const*, Process*)>
c001b775:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b778:	e8 85 76 ff ff       	call   c0012e02 <File::unlink()>
c001b77d:	83 c4 10             	add    esp,0x10
c001b780:	85 db                	test   ebx,ebx
c001b782:	74 14                	je     c001b798 <sysCallRmdir(regs*)+0x4d>
c001b784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b788:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b78a:	83 ec 0c             	sub    esp,0xc
c001b78d:	53                   	push   ebx
c001b78e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b791:	83 c4 10             	add    esp,0x10
c001b794:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b798:	85 c0                	test   eax,eax
c001b79a:	0f 95 c0             	setne  al
c001b79d:	31 d2                	xor    edx,edx
c001b79f:	0f b6 c0             	movzx  eax,al
c001b7a2:	f7 d8                	neg    eax
c001b7a4:	83 d2 00             	adc    edx,0x0
c001b7a7:	83 c4 14             	add    esp,0x14
c001b7aa:	f7 da                	neg    edx
c001b7ac:	5b                   	pop    ebx
c001b7ad:	5e                   	pop    esi
c001b7ae:	c3                   	ret    

c001b7af <sysCallUnlink(regs*)>:
c001b7af:	56                   	push   esi
c001b7b0:	53                   	push   ebx
c001b7b1:	83 ec 20             	sub    esp,0x20
c001b7b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b7b8:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b7bb:	68 14 01 00 00       	push   0x114
c001b7c0:	e8 d4 3d ff ff       	call   c000f599 <malloc>
c001b7c5:	83 c4 0c             	add    esp,0xc
c001b7c8:	89 c3                	mov    ebx,eax
c001b7ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7cf:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7d2:	56                   	push   esi
c001b7d3:	53                   	push   ebx
c001b7d4:	e8 4d 74 ff ff       	call   c0012c26 <File::File(char const*, Process*)>
c001b7d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b7dc:	e8 21 76 ff ff       	call   c0012e02 <File::unlink()>
c001b7e1:	83 c4 10             	add    esp,0x10
c001b7e4:	85 db                	test   ebx,ebx
c001b7e6:	74 14                	je     c001b7fc <sysCallUnlink(regs*)+0x4d>
c001b7e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7ec:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7ee:	83 ec 0c             	sub    esp,0xc
c001b7f1:	53                   	push   ebx
c001b7f2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b7f5:	83 c4 10             	add    esp,0x10
c001b7f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7fc:	85 c0                	test   eax,eax
c001b7fe:	0f 95 c0             	setne  al
c001b801:	31 d2                	xor    edx,edx
c001b803:	0f b6 c0             	movzx  eax,al
c001b806:	f7 d8                	neg    eax
c001b808:	83 d2 00             	adc    edx,0x0
c001b80b:	83 c4 14             	add    esp,0x14
c001b80e:	f7 da                	neg    edx
c001b810:	5b                   	pop    ebx
c001b811:	5e                   	pop    esi
c001b812:	c3                   	ret    

c001b813 <sysCallGetArgv(regs*)>:
c001b813:	83 ec 0c             	sub    esp,0xc
c001b816:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b81a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b81d:	85 c0                	test   eax,eax
c001b81f:	78 2b                	js     c001b84c <sysCallGetArgv(regs*)+0x39>
c001b821:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b827:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b82a:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b830:	7d 1a                	jge    c001b84c <sysCallGetArgv(regs*)+0x39>
c001b832:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b839:	85 c0                	test   eax,eax
c001b83b:	74 17                	je     c001b854 <sysCallGetArgv(regs*)+0x41>
c001b83d:	83 ec 08             	sub    esp,0x8
c001b840:	50                   	push   eax
c001b841:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b844:	e8 c3 4f fe ff       	call   c000080c <strcpy>
c001b849:	83 c4 10             	add    esp,0x10
c001b84c:	31 c0                	xor    eax,eax
c001b84e:	31 d2                	xor    edx,edx
c001b850:	83 c4 0c             	add    esp,0xc
c001b853:	c3                   	ret    
c001b854:	b8 01 00 00 00       	mov    eax,0x1
c001b859:	31 d2                	xor    edx,edx
c001b85b:	83 c4 0c             	add    esp,0xc
c001b85e:	c3                   	ret    

c001b85f <sysCallTTYName(regs*)>:
c001b85f:	56                   	push   esi
c001b860:	53                   	push   ebx
c001b861:	53                   	push   ebx
c001b862:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b866:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b869:	85 c0                	test   eax,eax
c001b86b:	74 5f                	je     c001b8cc <sysCallTTYName(regs*)+0x6d>
c001b86d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b870:	83 f8 02             	cmp    eax,0x2
c001b873:	77 3e                	ja     c001b8b3 <sysCallTTYName(regs*)+0x54>
c001b875:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b87a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b87d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b883:	85 db                	test   ebx,ebx
c001b885:	74 45                	je     c001b8cc <sysCallTTYName(regs*)+0x6d>
c001b887:	83 ec 0c             	sub    esp,0xc
c001b88a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b88c:	53                   	push   ebx
c001b88d:	ff 10                	call   DWORD PTR [eax]
c001b88f:	83 c4 10             	add    esp,0x10
c001b892:	84 c0                	test   al,al
c001b894:	74 41                	je     c001b8d7 <sysCallTTYName(regs*)+0x78>
c001b896:	83 ec 08             	sub    esp,0x8
c001b899:	81 c3 82 00 00 00    	add    ebx,0x82
c001b89f:	53                   	push   ebx
c001b8a0:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b8a3:	e8 64 4f fe ff       	call   c000080c <strcpy>
c001b8a8:	83 c4 10             	add    esp,0x10
c001b8ab:	31 c0                	xor    eax,eax
c001b8ad:	59                   	pop    ecx
c001b8ae:	31 d2                	xor    edx,edx
c001b8b0:	5b                   	pop    ebx
c001b8b1:	5e                   	pop    esi
c001b8b2:	c3                   	ret    
c001b8b3:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b8b8:	74 bb                	je     c001b875 <sysCallTTYName(regs*)+0x16>
c001b8ba:	83 ec 0c             	sub    esp,0xc
c001b8bd:	50                   	push   eax
c001b8be:	e8 02 58 ff ff       	call   c00110c5 <getFromFileDescriptor(int)>
c001b8c3:	83 c4 10             	add    esp,0x10
c001b8c6:	89 c3                	mov    ebx,eax
c001b8c8:	85 db                	test   ebx,ebx
c001b8ca:	75 bb                	jne    c001b887 <sysCallTTYName(regs*)+0x28>
c001b8cc:	59                   	pop    ecx
c001b8cd:	b8 01 00 00 00       	mov    eax,0x1
c001b8d2:	31 d2                	xor    edx,edx
c001b8d4:	5b                   	pop    ebx
c001b8d5:	5e                   	pop    esi
c001b8d6:	c3                   	ret    
c001b8d7:	59                   	pop    ecx
c001b8d8:	b8 02 00 00 00       	mov    eax,0x2
c001b8dd:	31 d2                	xor    edx,edx
c001b8df:	5b                   	pop    ebx
c001b8e0:	5e                   	pop    esi
c001b8e1:	c3                   	ret    

c001b8e2 <sysCallUSleep(regs*)>:
c001b8e2:	83 ec 14             	sub    esp,0x14
c001b8e5:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b8ea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b8ee:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b8f5:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b8f8:	01 ca                	add    edx,ecx
c001b8fa:	52                   	push   edx
c001b8fb:	50                   	push   eax
c001b8fc:	e8 96 23 00 00       	call   c001dc97 <nanoSleep(unsigned long long)>
c001b901:	31 c0                	xor    eax,eax
c001b903:	31 d2                	xor    edx,edx
c001b905:	83 c4 1c             	add    esp,0x1c
c001b908:	c3                   	ret    

c001b909 <sysCallSpawn(regs*)>:
c001b909:	56                   	push   esi
c001b90a:	53                   	push   ebx
c001b90b:	50                   	push   eax
c001b90c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b910:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b913:	85 c0                	test   eax,eax
c001b915:	75 08                	jne    c001b91f <sysCallSpawn(regs*)+0x16>
c001b917:	59                   	pop    ecx
c001b918:	31 c0                	xor    eax,eax
c001b91a:	31 d2                	xor    edx,edx
c001b91c:	5b                   	pop    ebx
c001b91d:	5e                   	pop    esi
c001b91e:	c3                   	ret    
c001b91f:	83 ec 0c             	sub    esp,0xc
c001b922:	68 3f 07 00 00       	push   0x73f
c001b927:	e8 6d 3c ff ff       	call   c000f599 <malloc>
c001b92c:	83 c4 10             	add    esp,0x10
c001b92f:	89 c6                	mov    esi,eax
c001b931:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b934:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b937:	85 c0                	test   eax,eax
c001b939:	75 32                	jne    c001b96d <sysCallSpawn(regs*)+0x64>
c001b93b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b940:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b943:	52                   	push   edx
c001b944:	50                   	push   eax
c001b945:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b948:	56                   	push   esi
c001b949:	e8 6e 1a 00 00       	call   c001d3bc <Process::Process(char const*, Process*, char**)>
c001b94e:	83 c4 10             	add    esp,0x10
c001b951:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b958:	75 bd                	jne    c001b917 <sysCallSpawn(regs*)+0xe>
c001b95a:	83 ec 0c             	sub    esp,0xc
c001b95d:	56                   	push   esi
c001b95e:	e8 3b 1f 00 00       	call   c001d89e <Process::createUserThread()>
c001b963:	8b 06                	mov    eax,DWORD PTR [esi]
c001b965:	83 c4 10             	add    esp,0x10
c001b968:	99                   	cdq    
c001b969:	59                   	pop    ecx
c001b96a:	5b                   	pop    ebx
c001b96b:	5e                   	pop    esi
c001b96c:	c3                   	ret    
c001b96d:	31 c0                	xor    eax,eax
c001b96f:	eb d2                	jmp    c001b943 <sysCallSpawn(regs*)+0x3a>

c001b971 <sysCallGetEnv(regs*)>:
c001b971:	57                   	push   edi
c001b972:	56                   	push   esi
c001b973:	53                   	push   ebx
c001b974:	83 ec 1c             	sub    esp,0x1c
c001b977:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b97b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b980:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b983:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b986:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b989:	e8 f1 e3 ff ff       	call   c0019d7f <Krnl::getProcessTotalEnvCount(Process*)>
c001b98e:	83 c4 10             	add    esp,0x10
c001b991:	39 c7                	cmp    edi,eax
c001b993:	7c 14                	jl     c001b9a9 <sysCallGetEnv(regs*)+0x38>
c001b995:	85 f6                	test   esi,esi
c001b997:	75 0b                	jne    c001b9a4 <sysCallGetEnv(regs*)+0x33>
c001b999:	83 c4 10             	add    esp,0x10
c001b99c:	31 c0                	xor    eax,eax
c001b99e:	5b                   	pop    ebx
c001b99f:	31 d2                	xor    edx,edx
c001b9a1:	5e                   	pop    esi
c001b9a2:	5f                   	pop    edi
c001b9a3:	c3                   	ret    
c001b9a4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b9a7:	eb f0                	jmp    c001b999 <sysCallGetEnv(regs*)+0x28>
c001b9a9:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b9ad:	52                   	push   edx
c001b9ae:	57                   	push   edi
c001b9af:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b9b5:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b9b8:	50                   	push   eax
c001b9b9:	e8 e1 e3 ff ff       	call   c0019d9f <Krnl::getProcessEnvPair(Process*, int)>
c001b9be:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b9c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9c5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b9c9:	83 c4 0c             	add    esp,0xc
c001b9cc:	85 c9                	test   ecx,ecx
c001b9ce:	75 23                	jne    c001b9f3 <sysCallGetEnv(regs*)+0x82>
c001b9d0:	83 ec 0c             	sub    esp,0xc
c001b9d3:	50                   	push   eax
c001b9d4:	e8 93 4d fe ff       	call   c000076c <strlen>
c001b9d9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b9dc:	89 c3                	mov    ebx,eax
c001b9de:	e8 89 4d fe ff       	call   c000076c <strlen>
c001b9e3:	83 c4 10             	add    esp,0x10
c001b9e6:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b9ea:	83 c4 10             	add    esp,0x10
c001b9ed:	31 d2                	xor    edx,edx
c001b9ef:	5b                   	pop    ebx
c001b9f0:	5e                   	pop    esi
c001b9f1:	5f                   	pop    edi
c001b9f2:	c3                   	ret    
c001b9f3:	83 ec 08             	sub    esp,0x8
c001b9f6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b9f9:	50                   	push   eax
c001b9fa:	56                   	push   esi
c001b9fb:	e8 0c 4e fe ff       	call   c000080c <strcpy>
c001ba00:	58                   	pop    eax
c001ba01:	5a                   	pop    edx
c001ba02:	68 93 b8 02 c0       	push   0xc002b893
c001ba07:	56                   	push   esi
c001ba08:	e8 3f 4f fe ff       	call   c000094c <strcat>
c001ba0d:	59                   	pop    ecx
c001ba0e:	5b                   	pop    ebx
c001ba0f:	57                   	push   edi
c001ba10:	56                   	push   esi
c001ba11:	e8 36 4f fe ff       	call   c000094c <strcat>
c001ba16:	83 c4 10             	add    esp,0x10
c001ba19:	e9 7b ff ff ff       	jmp    c001b999 <sysCallGetEnv(regs*)+0x28>

c001ba1e <sysAppSettings(regs*)>:
c001ba1e:	57                   	push   edi
c001ba1f:	56                   	push   esi
c001ba20:	56                   	push   esi
c001ba21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba25:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ba28:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001ba2e:	25 e0 1f 00 00       	and    eax,0x1fe0
c001ba33:	66 3d c0 09          	cmp    ax,0x9c0
c001ba37:	75 2e                	jne    c001ba67 <sysAppSettings(regs*)+0x49>
c001ba39:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001ba3f:	83 e0 1f             	and    eax,0x1f
c001ba42:	3c 01                	cmp    al,0x1
c001ba44:	74 2c                	je     c001ba72 <sysAppSettings(regs*)+0x54>
c001ba46:	3c 07                	cmp    al,0x7
c001ba48:	0f 84 b3 00 00 00    	je     c001bb01 <sysAppSettings(regs*)+0xe3>
c001ba4e:	84 c0                	test   al,al
c001ba50:	0f 84 d2 00 00 00    	je     c001bb28 <sysAppSettings(regs*)+0x10a>
c001ba56:	3c 08                	cmp    al,0x8
c001ba58:	74 63                	je     c001babd <sysAppSettings(regs*)+0x9f>
c001ba5a:	59                   	pop    ecx
c001ba5b:	0f b6 c0             	movzx  eax,al
c001ba5e:	5e                   	pop    esi
c001ba5f:	05 e8 03 00 00       	add    eax,0x3e8
c001ba64:	5f                   	pop    edi
c001ba65:	99                   	cdq    
c001ba66:	c3                   	ret    
c001ba67:	b8 01 00 00 00       	mov    eax,0x1
c001ba6c:	59                   	pop    ecx
c001ba6d:	31 d2                	xor    edx,edx
c001ba6f:	5e                   	pop    esi
c001ba70:	5f                   	pop    edi
c001ba71:	c3                   	ret    
c001ba72:	50                   	push   eax
c001ba73:	68 00 01 00 00       	push   0x100
c001ba78:	6a 00                	push   0x0
c001ba7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba7f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba82:	83 c0 0c             	add    eax,0xc
c001ba85:	50                   	push   eax
c001ba86:	e8 c5 4c fe ff       	call   c0000750 <memset>
c001ba8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba90:	b9 ff 00 00 00       	mov    ecx,0xff
c001ba95:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001ba98:	83 c7 0c             	add    edi,0xc
c001ba9b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ba9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baa2:	5a                   	pop    edx
c001baa3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001baa6:	59                   	pop    ecx
c001baa7:	8d 50 0c             	lea    edx,[eax+0xc]
c001baaa:	52                   	push   edx
c001baab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bab1:	e8 3a 47 ff ff       	call   c00101f0 <VgaText::setTitle(char*)>
c001bab6:	83 c4 10             	add    esp,0x10
c001bab9:	31 c0                	xor    eax,eax
c001babb:	eb af                	jmp    c001ba6c <sysAppSettings(regs*)+0x4e>
c001babd:	83 ec 08             	sub    esp,0x8
c001bac0:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bac6:	83 e0 0f             	and    eax,0xf
c001bac9:	50                   	push   eax
c001baca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bacf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bad2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bad8:	e8 03 47 ff ff       	call   c00101e0 <VgaText::setTitleColour(VgaColour)>
c001badd:	5f                   	pop    edi
c001bade:	58                   	pop    eax
c001badf:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bae5:	c1 e8 04             	shr    eax,0x4
c001bae8:	83 e0 0f             	and    eax,0xf
c001baeb:	50                   	push   eax
c001baec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baf1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001baf4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bafa:	e8 d1 46 ff ff       	call   c00101d0 <VgaText::setTitleTextColour(VgaColour)>
c001baff:	eb b5                	jmp    c001bab6 <sysAppSettings(regs*)+0x98>
c001bb01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb06:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb09:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bb0f:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001bb15:	c0 e8 06             	shr    al,0x6
c001bb18:	83 e0 01             	and    eax,0x1
c001bb1b:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001bb21:	31 c0                	xor    eax,eax
c001bb23:	e9 44 ff ff ff       	jmp    c001ba6c <sysAppSettings(regs*)+0x4e>
c001bb28:	b8 02 00 00 00       	mov    eax,0x2
c001bb2d:	e9 3a ff ff ff       	jmp    c001ba6c <sysAppSettings(regs*)+0x4e>

c001bb32 <sysSetFatAttrib(regs*)>:
c001bb32:	57                   	push   edi
c001bb33:	56                   	push   esi
c001bb34:	53                   	push   ebx
c001bb35:	83 ec 1c             	sub    esp,0x1c
c001bb38:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bb3c:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bb3f:	68 14 01 00 00       	push   0x114
c001bb44:	e8 50 3a ff ff       	call   c000f599 <malloc>
c001bb49:	83 c4 0c             	add    esp,0xc
c001bb4c:	89 c3                	mov    ebx,eax
c001bb4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb53:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb56:	57                   	push   edi
c001bb57:	53                   	push   ebx
c001bb58:	e8 c9 70 ff ff       	call   c0012c26 <File::File(char const*, Process*)>
c001bb5d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bb60:	83 c4 0c             	add    esp,0xc
c001bb63:	0f b6 d4             	movzx  edx,ah
c001bb66:	0f b6 c0             	movzx  eax,al
c001bb69:	52                   	push   edx
c001bb6a:	50                   	push   eax
c001bb6b:	53                   	push   ebx
c001bb6c:	e8 2b 73 ff ff       	call   c0012e9c <File::chfatattr(unsigned char, unsigned char)>
c001bb71:	83 c4 10             	add    esp,0x10
c001bb74:	85 db                	test   ebx,ebx
c001bb76:	74 14                	je     c001bb8c <sysSetFatAttrib(regs*)+0x5a>
c001bb78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb7c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bb7e:	83 ec 0c             	sub    esp,0xc
c001bb81:	53                   	push   ebx
c001bb82:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb85:	83 c4 10             	add    esp,0x10
c001bb88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb8c:	85 c0                	test   eax,eax
c001bb8e:	0f 95 c0             	setne  al
c001bb91:	31 d2                	xor    edx,edx
c001bb93:	0f b6 c0             	movzx  eax,al
c001bb96:	f7 d8                	neg    eax
c001bb98:	83 d2 00             	adc    edx,0x0
c001bb9b:	83 c4 10             	add    esp,0x10
c001bb9e:	f7 da                	neg    edx
c001bba0:	5b                   	pop    ebx
c001bba1:	5e                   	pop    esi
c001bba2:	5f                   	pop    edi
c001bba3:	c3                   	ret    

c001bba4 <sysPipe(regs*)>:
c001bba4:	57                   	push   edi
c001bba5:	56                   	push   esi
c001bba6:	53                   	push   ebx
c001bba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbab:	83 ec 0c             	sub    esp,0xc
c001bbae:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bbb1:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bbb4:	6a 20                	push   0x20
c001bbb6:	e8 de 39 ff ff       	call   c000f599 <malloc>
c001bbbb:	89 c3                	mov    ebx,eax
c001bbbd:	58                   	pop    eax
c001bbbe:	5a                   	pop    edx
c001bbbf:	68 00 50 00 00       	push   0x5000
c001bbc4:	53                   	push   ebx
c001bbc5:	e8 9e 43 ff ff       	call   c000ff68 <Pipe::Pipe(int)>
c001bbca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbcd:	e8 fe 51 ff ff       	call   c0010dd0 <UnixFile::getFileDescriptor()>
c001bbd2:	89 07                	mov    DWORD PTR [edi],eax
c001bbd4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbd7:	e8 f4 51 ff ff       	call   c0010dd0 <UnixFile::getFileDescriptor()>
c001bbdc:	83 c4 10             	add    esp,0x10
c001bbdf:	89 06                	mov    DWORD PTR [esi],eax
c001bbe1:	31 d2                	xor    edx,edx
c001bbe3:	5b                   	pop    ebx
c001bbe4:	31 c0                	xor    eax,eax
c001bbe6:	5e                   	pop    esi
c001bbe7:	5f                   	pop    edi
c001bbe8:	c3                   	ret    

c001bbe9 <sysGetUnixTime(regs*)>:
c001bbe9:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c001bbee:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bbf4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bbf8:	e9 1b 7a ff ff       	jmp    c0013618 <Clock::timeInSecondsLocal()>

c001bbfd <string_ends_with(char const*, char const*)>:
c001bbfd:	57                   	push   edi
c001bbfe:	56                   	push   esi
c001bbff:	53                   	push   ebx
c001bc00:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc04:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bc08:	83 ec 0c             	sub    esp,0xc
c001bc0b:	53                   	push   ebx
c001bc0c:	e8 5b 4b fe ff       	call   c000076c <strlen>
c001bc11:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bc14:	89 c6                	mov    esi,eax
c001bc16:	e8 51 4b fe ff       	call   c000076c <strlen>
c001bc1b:	83 c4 10             	add    esp,0x10
c001bc1e:	39 c6                	cmp    esi,eax
c001bc20:	7d 06                	jge    c001bc28 <string_ends_with(char const*, char const*)+0x2b>
c001bc22:	5b                   	pop    ebx
c001bc23:	31 c0                	xor    eax,eax
c001bc25:	5e                   	pop    esi
c001bc26:	5f                   	pop    edi
c001bc27:	c3                   	ret    
c001bc28:	83 ec 08             	sub    esp,0x8
c001bc2b:	29 c6                	sub    esi,eax
c001bc2d:	57                   	push   edi
c001bc2e:	01 f3                	add    ebx,esi
c001bc30:	53                   	push   ebx
c001bc31:	e8 62 4c fe ff       	call   c0000898 <strcmp>
c001bc36:	83 c4 10             	add    esp,0x10
c001bc39:	85 c0                	test   eax,eax
c001bc3b:	5b                   	pop    ebx
c001bc3c:	0f 94 c0             	sete   al
c001bc3f:	5e                   	pop    esi
c001bc40:	0f b6 c0             	movzx  eax,al
c001bc43:	5f                   	pop    edi
c001bc44:	c3                   	ret    

c001bc45 <sysCallOpen(regs*)>:
c001bc45:	56                   	push   esi
c001bc46:	53                   	push   ebx
c001bc47:	81 ec 04 01 00 00    	sub    esp,0x104
c001bc4d:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bc54:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bc57:	85 c9                	test   ecx,ecx
c001bc59:	0f 84 ad 01 00 00    	je     c001be0c <sysCallOpen(regs*)+0x1c7>
c001bc5f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bc62:	85 c0                	test   eax,eax
c001bc64:	0f 84 a2 01 00 00    	je     c001be0c <sysCallOpen(regs*)+0x1c7>
c001bc6a:	52                   	push   edx
c001bc6b:	68 95 b8 02 c0       	push   0xc002b895
c001bc70:	50                   	push   eax
c001bc71:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bc75:	56                   	push   esi
c001bc76:	e8 01 6e ff ff       	call   c0012a7c <Fs::standardiseFiles(char*, char const*, char const*)>
c001bc7b:	89 34 24             	mov    DWORD PTR [esp],esi
c001bc7e:	e8 e9 4a fe ff       	call   c000076c <strlen>
c001bc83:	83 c4 10             	add    esp,0x10
c001bc86:	48                   	dec    eax
c001bc87:	74 1d                	je     c001bca6 <sysCallOpen(regs*)+0x61>
c001bc89:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bc8c:	eb 0f                	jmp    c001bc9d <sysCallOpen(regs*)+0x58>
c001bc8e:	80 fa 3a             	cmp    dl,0x3a
c001bc91:	74 0f                	je     c001bca2 <sysCallOpen(regs*)+0x5d>
c001bc93:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bc97:	48                   	dec    eax
c001bc98:	74 0c                	je     c001bca6 <sysCallOpen(regs*)+0x61>
c001bc9a:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bc9d:	80 fa 2e             	cmp    dl,0x2e
c001bca0:	75 ec                	jne    c001bc8e <sysCallOpen(regs*)+0x49>
c001bca2:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bca6:	83 ec 08             	sub    esp,0x8
c001bca9:	68 99 b8 02 c0       	push   0xc002b899
c001bcae:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcb1:	e8 47 ff ff ff       	call   c001bbfd <string_ends_with(char const*, char const*)>
c001bcb6:	83 c4 10             	add    esp,0x10
c001bcb9:	85 c0                	test   eax,eax
c001bcbb:	74 1d                	je     c001bcda <sysCallOpen(regs*)+0x95>
c001bcbd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bcc0:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bcc6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bccd:	81 c4 04 01 00 00    	add    esp,0x104
c001bcd3:	31 c0                	xor    eax,eax
c001bcd5:	31 d2                	xor    edx,edx
c001bcd7:	5b                   	pop    ebx
c001bcd8:	5e                   	pop    esi
c001bcd9:	c3                   	ret    
c001bcda:	83 ec 08             	sub    esp,0x8
c001bcdd:	68 9e b8 02 c0       	push   0xc002b89e
c001bce2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bce5:	e8 13 ff ff ff       	call   c001bbfd <string_ends_with(char const*, char const*)>
c001bcea:	83 c4 10             	add    esp,0x10
c001bced:	85 c0                	test   eax,eax
c001bcef:	75 cc                	jne    c001bcbd <sysCallOpen(regs*)+0x78>
c001bcf1:	83 ec 08             	sub    esp,0x8
c001bcf4:	68 9a b8 02 c0       	push   0xc002b89a
c001bcf9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcfc:	e8 97 4b fe ff       	call   c0000898 <strcmp>
c001bd01:	83 c4 10             	add    esp,0x10
c001bd04:	85 c0                	test   eax,eax
c001bd06:	74 b5                	je     c001bcbd <sysCallOpen(regs*)+0x78>
c001bd08:	83 ec 08             	sub    esp,0x8
c001bd0b:	68 99 b8 02 c0       	push   0xc002b899
c001bd10:	56                   	push   esi
c001bd11:	e8 e7 fe ff ff       	call   c001bbfd <string_ends_with(char const*, char const*)>
c001bd16:	83 c4 10             	add    esp,0x10
c001bd19:	85 c0                	test   eax,eax
c001bd1b:	75 a0                	jne    c001bcbd <sysCallOpen(regs*)+0x78>
c001bd1d:	83 ec 08             	sub    esp,0x8
c001bd20:	68 a3 b8 02 c0       	push   0xc002b8a3
c001bd25:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd28:	e8 d0 fe ff ff       	call   c001bbfd <string_ends_with(char const*, char const*)>
c001bd2d:	83 c4 10             	add    esp,0x10
c001bd30:	85 c0                	test   eax,eax
c001bd32:	0f 85 e7 00 00 00    	jne    c001be1f <sysCallOpen(regs*)+0x1da>
c001bd38:	83 ec 08             	sub    esp,0x8
c001bd3b:	68 a8 b8 02 c0       	push   0xc002b8a8
c001bd40:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd43:	e8 b5 fe ff ff       	call   c001bbfd <string_ends_with(char const*, char const*)>
c001bd48:	83 c4 10             	add    esp,0x10
c001bd4b:	85 c0                	test   eax,eax
c001bd4d:	0f 85 cc 00 00 00    	jne    c001be1f <sysCallOpen(regs*)+0x1da>
c001bd53:	83 ec 08             	sub    esp,0x8
c001bd56:	68 a4 b8 02 c0       	push   0xc002b8a4
c001bd5b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd5e:	e8 35 4b fe ff       	call   c0000898 <strcmp>
c001bd63:	83 c4 10             	add    esp,0x10
c001bd66:	85 c0                	test   eax,eax
c001bd68:	0f 84 b1 00 00 00    	je     c001be1f <sysCallOpen(regs*)+0x1da>
c001bd6e:	83 ec 08             	sub    esp,0x8
c001bd71:	68 a3 b8 02 c0       	push   0xc002b8a3
c001bd76:	56                   	push   esi
c001bd77:	e8 81 fe ff ff       	call   c001bbfd <string_ends_with(char const*, char const*)>
c001bd7c:	83 c4 10             	add    esp,0x10
c001bd7f:	85 c0                	test   eax,eax
c001bd81:	0f 85 98 00 00 00    	jne    c001be1f <sysCallOpen(regs*)+0x1da>
c001bd87:	83 ec 0c             	sub    esp,0xc
c001bd8a:	68 14 01 00 00       	push   0x114
c001bd8f:	e8 05 38 ff ff       	call   c000f599 <malloc>
c001bd94:	83 c4 0c             	add    esp,0xc
c001bd97:	89 c6                	mov    esi,eax
c001bd99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd9e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bda1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bda4:	56                   	push   esi
c001bda5:	e8 7c 6e ff ff       	call   c0012c26 <File::File(char const*, Process*)>
c001bdaa:	83 c4 10             	add    esp,0x10
c001bdad:	85 f6                	test   esi,esi
c001bdaf:	74 5b                	je     c001be0c <sysCallOpen(regs*)+0x1c7>
c001bdb1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bdb4:	0f b6 c2             	movzx  eax,dl
c001bdb7:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bdba:	89 d0                	mov    eax,edx
c001bdbc:	83 e0 01             	and    eax,0x1
c001bdbf:	f6 c2 02             	test   dl,0x2
c001bdc2:	74 03                	je     c001bdc7 <sysCallOpen(regs*)+0x182>
c001bdc4:	83 c8 02             	or     eax,0x2
c001bdc7:	f6 c2 04             	test   dl,0x4
c001bdca:	74 03                	je     c001bdcf <sysCallOpen(regs*)+0x18a>
c001bdcc:	83 c8 04             	or     eax,0x4
c001bdcf:	f6 c2 08             	test   dl,0x8
c001bdd2:	74 03                	je     c001bdd7 <sysCallOpen(regs*)+0x192>
c001bdd4:	83 c8 0a             	or     eax,0xa
c001bdd7:	83 e2 10             	and    edx,0x10
c001bdda:	74 03                	je     c001bddf <sysCallOpen(regs*)+0x19a>
c001bddc:	83 c8 12             	or     eax,0x12
c001bddf:	83 ec 08             	sub    esp,0x8
c001bde2:	50                   	push   eax
c001bde3:	56                   	push   esi
c001bde4:	e8 a1 6e ff ff       	call   c0012c8a <File::open(FileOpenMode)>
c001bde9:	83 c4 10             	add    esp,0x10
c001bdec:	85 c0                	test   eax,eax
c001bdee:	75 1c                	jne    c001be0c <sysCallOpen(regs*)+0x1c7>
c001bdf0:	83 ec 0c             	sub    esp,0xc
c001bdf3:	56                   	push   esi
c001bdf4:	e8 d7 4f ff ff       	call   c0010dd0 <UnixFile::getFileDescriptor()>
c001bdf9:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bdfc:	83 c4 10             	add    esp,0x10
c001bdff:	89 02                	mov    DWORD PTR [edx],eax
c001be01:	c1 f8 1f             	sar    eax,0x1f
c001be04:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001be07:	e9 c1 fe ff ff       	jmp    c001bccd <sysCallOpen(regs*)+0x88>
c001be0c:	81 c4 04 01 00 00    	add    esp,0x104
c001be12:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be17:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be1c:	5b                   	pop    ebx
c001be1d:	5e                   	pop    esi
c001be1e:	c3                   	ret    
c001be1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be22:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001be28:	e9 99 fe ff ff       	jmp    c001bcc6 <sysCallOpen(regs*)+0x81>

c001be2d <Sys::loadSyscalls()>:
c001be2d:	c7 05 60 04 03 c0 9a b0 01 c0 	mov    DWORD PTR ds:0xc0030460,0xc001b09a
c001be37:	c7 05 64 04 03 c0 92 ac 01 c0 	mov    DWORD PTR ds:0xc0030464,0xc001ac92
c001be41:	c7 05 68 04 03 c0 80 ae 01 c0 	mov    DWORD PTR ds:0xc0030468,0xc001ae80
c001be4b:	c7 05 6c 04 03 c0 d0 af 01 c0 	mov    DWORD PTR ds:0xc003046c,0xc001afd0
c001be55:	c7 05 70 04 03 c0 18 ae 01 c0 	mov    DWORD PTR ds:0xc0030470,0xc001ae18
c001be5f:	c7 05 74 04 03 c0 c9 ac 01 c0 	mov    DWORD PTR ds:0xc0030474,0xc001acc9
c001be69:	c7 05 78 04 03 c0 aa ac 01 c0 	mov    DWORD PTR ds:0xc0030478,0xc001acaa
c001be73:	c7 05 7c 04 03 c0 d5 ae 01 c0 	mov    DWORD PTR ds:0xc003047c,0xc001aed5
c001be7d:	c7 05 84 04 03 c0 63 b5 01 c0 	mov    DWORD PTR ds:0xc0030484,0xc001b563
c001be87:	c7 05 80 04 03 c0 45 bc 01 c0 	mov    DWORD PTR ds:0xc0030480,0xc001bc45
c001be91:	c7 05 88 04 03 c0 c3 b5 01 c0 	mov    DWORD PTR ds:0xc0030488,0xc001b5c3
c001be9b:	c7 05 8c 04 03 c0 a6 b2 01 c0 	mov    DWORD PTR ds:0xc003048c,0xc001b2a6
c001bea5:	c7 05 90 04 03 c0 e0 b0 01 c0 	mov    DWORD PTR ds:0xc0030490,0xc001b0e0
c001beaf:	c7 05 94 04 03 c0 e5 b0 01 c0 	mov    DWORD PTR ds:0xc0030494,0xc001b0e5
c001beb9:	c7 05 98 04 03 c0 8c b6 01 c0 	mov    DWORD PTR ds:0xc0030498,0xc001b68c
c001bec3:	c7 05 9c 04 03 c0 38 b6 01 c0 	mov    DWORD PTR ds:0xc003049c,0xc001b638
c001becd:	c7 05 a0 04 03 c0 7f b3 01 c0 	mov    DWORD PTR ds:0xc00304a0,0xc001b37f
c001bed7:	c7 05 a4 04 03 c0 d6 b3 01 c0 	mov    DWORD PTR ds:0xc00304a4,0xc001b3d6
c001bee1:	c7 05 a8 04 03 c0 42 b4 01 c0 	mov    DWORD PTR ds:0xc00304a8,0xc001b442
c001beeb:	c7 05 ac 04 03 c0 ea b0 01 c0 	mov    DWORD PTR ds:0xc00304ac,0xc001b0ea
c001bef5:	c7 05 b0 04 03 c0 fc b6 01 c0 	mov    DWORD PTR ds:0xc00304b0,0xc001b6fc
c001beff:	c7 05 b4 04 03 c0 16 b7 01 c0 	mov    DWORD PTR ds:0xc00304b4,0xc001b716
c001bf09:	c7 05 b8 04 03 c0 16 b7 01 c0 	mov    DWORD PTR ds:0xc00304b8,0xc001b716
c001bf13:	c7 05 bc 04 03 c0 4b b7 01 c0 	mov    DWORD PTR ds:0xc00304bc,0xc001b74b
c001bf1d:	c7 05 c0 04 03 c0 af b7 01 c0 	mov    DWORD PTR ds:0xc00304c0,0xc001b7af
c001bf27:	c7 05 c4 04 03 c0 f4 b0 01 c0 	mov    DWORD PTR ds:0xc00304c4,0xc001b0f4
c001bf31:	c7 05 c8 04 03 c0 13 b8 01 c0 	mov    DWORD PTR ds:0xc00304c8,0xc001b813
c001bf3b:	c7 05 cc 04 03 c0 63 b2 01 c0 	mov    DWORD PTR ds:0xc00304cc,0xc001b263
c001bf45:	c7 05 d0 04 03 c0 5f b8 01 c0 	mov    DWORD PTR ds:0xc00304d0,0xc001b85f
c001bf4f:	c7 05 d4 04 03 c0 25 b3 01 c0 	mov    DWORD PTR ds:0xc00304d4,0xc001b325
c001bf59:	c7 05 d8 04 03 c0 e2 b8 01 c0 	mov    DWORD PTR ds:0xc00304d8,0xc001b8e2
c001bf63:	c7 05 dc 04 03 c0 b4 b4 01 c0 	mov    DWORD PTR ds:0xc00304dc,0xc001b4b4
c001bf6d:	c7 05 e0 04 03 c0 09 b9 01 c0 	mov    DWORD PTR ds:0xc00304e0,0xc001b909
c001bf77:	c7 05 e4 04 03 c0 71 b9 01 c0 	mov    DWORD PTR ds:0xc00304e4,0xc001b971
c001bf81:	c7 05 e8 04 03 c0 1e ba 01 c0 	mov    DWORD PTR ds:0xc00304e8,0xc001ba1e
c001bf8b:	c7 05 ec 04 03 c0 04 b1 01 c0 	mov    DWORD PTR ds:0xc00304ec,0xc001b104
c001bf95:	c7 05 f0 04 03 c0 6e b1 01 c0 	mov    DWORD PTR ds:0xc00304f0,0xc001b16e
c001bf9f:	c7 05 f4 04 03 c0 b4 b1 01 c0 	mov    DWORD PTR ds:0xc00304f4,0xc001b1b4
c001bfa9:	c7 05 f8 04 03 c0 32 bb 01 c0 	mov    DWORD PTR ds:0xc00304f8,0xc001bb32
c001bfb3:	c7 05 fc 04 03 c0 31 b7 01 c0 	mov    DWORD PTR ds:0xc00304fc,0xc001b731
c001bfbd:	c7 05 00 05 03 c0 05 b2 01 c0 	mov    DWORD PTR ds:0xc0030500,0xc001b205
c001bfc7:	c7 05 04 05 03 c0 a4 bb 01 c0 	mov    DWORD PTR ds:0xc0030504,0xc001bba4
c001bfd1:	c7 05 08 05 03 c0 e9 bb 01 c0 	mov    DWORD PTR ds:0xc0030508,0xc001bbe9
c001bfdb:	c7 05 0c 05 03 c0 70 ad 01 c0 	mov    DWORD PTR ds:0xc003050c,0xc001ad70
c001bfe5:	c7 05 10 05 03 c0 f1 ae 01 c0 	mov    DWORD PTR ds:0xc0030510,0xc001aef1
c001bfef:	c7 05 14 05 03 c0 86 af 01 c0 	mov    DWORD PTR ds:0xc0030514,0xc001af86
c001bff9:	c7 05 18 05 03 c0 5c ac 01 c0 	mov    DWORD PTR ds:0xc0030518,0xc001ac5c
c001c003:	c7 05 1c 05 03 c0 38 b0 01 c0 	mov    DWORD PTR ds:0xc003051c,0xc001b038
c001c00d:	c7 05 20 05 03 c0 d5 ac 01 c0 	mov    DWORD PTR ds:0xc0030520,0xc001acd5
c001c017:	c7 05 24 05 03 c0 ec ac 01 c0 	mov    DWORD PTR ds:0xc0030524,0xc001acec
c001c021:	c3                   	ret    

c001c022 <Sys::systemCall(regs*, void*)>:
c001c022:	53                   	push   ebx
c001c023:	83 ec 08             	sub    esp,0x8
c001c026:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c02a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c02d:	83 f8 7f             	cmp    eax,0x7f
c001c030:	77 16                	ja     c001c048 <Sys::systemCall(regs*, void*)+0x26>
c001c032:	8b 14 85 60 04 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfba0]
c001c039:	85 d2                	test   edx,edx
c001c03b:	74 0b                	je     c001c048 <Sys::systemCall(regs*, void*)+0x26>
c001c03d:	83 ec 0c             	sub    esp,0xc
c001c040:	53                   	push   ebx
c001c041:	ff d2                	call   edx
c001c043:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c046:	eb 0d                	jmp    c001c055 <Sys::systemCall(regs*, void*)+0x33>
c001c048:	52                   	push   edx
c001c049:	52                   	push   edx
c001c04a:	50                   	push   eax
c001c04b:	68 ad b8 02 c0       	push   0xc002b8ad
c001c050:	e8 72 66 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001c055:	83 c4 10             	add    esp,0x10
c001c058:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c05d:	31 d2                	xor    edx,edx
c001c05f:	83 c4 08             	add    esp,0x8
c001c062:	5b                   	pop    ebx
c001c063:	c3                   	ret    

c001c064 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c064:	55                   	push   ebp
c001c065:	57                   	push   edi
c001c066:	56                   	push   esi
c001c067:	53                   	push   ebx
c001c068:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c06e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c075:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c07c:	85 c0                	test   eax,eax
c001c07e:	0f 95 c1             	setne  cl
c001c081:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c089:	0f 94 c2             	sete   dl
c001c08c:	84 d1                	test   cl,dl
c001c08e:	74 23                	je     c001c0b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c090:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c096:	74 1b                	je     c001c0b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c098:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c09e:	89 da                	mov    edx,ebx
c001c0a0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c0a6:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c0ac:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c0b3:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c0ba:	05 ff 0f 00 00       	add    eax,0xfff
c001c0bf:	83 ec 0c             	sub    esp,0xc
c001c0c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c0c6:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c0cc:	c1 e8 0c             	shr    eax,0xc
c001c0cf:	89 fe                	mov    esi,edi
c001c0d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c0d5:	c1 ee 0c             	shr    esi,0xc
c001c0d8:	6a 01                	push   0x1
c001c0da:	e8 3c 51 ff ff       	call   c001121b <Virt::allocateKernelVirtualPages(int)>
c001c0df:	89 c5                	mov    ebp,eax
c001c0e1:	58                   	pop    eax
c001c0e2:	5a                   	pop    edx
c001c0e3:	56                   	push   esi
c001c0e4:	68 c1 b8 02 c0       	push   0xc002b8c1
c001c0e9:	e8 d9 65 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001c0ee:	59                   	pop    ecx
c001c0ef:	58                   	pop    eax
c001c0f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c0f4:	68 d3 b8 02 c0       	push   0xc002b8d3
c001c0f9:	e8 c9 65 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001c0fe:	83 c4 10             	add    esp,0x10
c001c101:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c107:	0f 86 31 01 00 00    	jbe    c001c23e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c10d:	c1 e6 0c             	shl    esi,0xc
c001c110:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c113:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c116:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c11a:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c121:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c124:	01 df                	add    edi,ebx
c001c126:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c129:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c12d:	0f 84 08 01 00 00    	je     c001c23b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c133:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c139:	76 05                	jbe    c001c140 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c13b:	bf 00 10 00 00       	mov    edi,0x1000
c001c140:	83 ec 0c             	sub    esp,0xc
c001c143:	31 d2                	xor    edx,edx
c001c145:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c14c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c14e:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c152:	50                   	push   eax
c001c153:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c157:	56                   	push   esi
c001c158:	52                   	push   edx
c001c159:	57                   	push   edi
c001c15a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c161:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c164:	83 c4 20             	add    esp,0x20
c001c167:	85 c0                	test   eax,eax
c001c169:	74 0a                	je     c001c175 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c16b:	53                   	push   ebx
c001c16c:	53                   	push   ebx
c001c16d:	50                   	push   eax
c001c16e:	68 e5 b8 02 c0       	push   0xc002b8e5
c001c173:	eb 0f                	jmp    c001c184 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c175:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c179:	74 20                	je     c001c19b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c17b:	51                   	push   ecx
c001c17c:	51                   	push   ecx
c001c17d:	6a 00                	push   0x0
c001c17f:	68 10 b9 02 c0       	push   0xc002b910
c001c184:	e8 3e 65 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001c189:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c18c:	e8 d0 54 ff ff       	call   c0011661 <Virt::freeKernelVirtualPages(unsigned long)>
c001c191:	83 c4 10             	add    esp,0x10
c001c194:	31 c0                	xor    eax,eax
c001c196:	e9 68 01 00 00       	jmp    c001c303 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c19b:	fa                   	cli    
c001c19c:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c001c1a2:	e8 ca 37 ff ff       	call   c000f971 <Phys::allocatePage()>
c001c1a7:	6a 07                	push   0x7
c001c1a9:	89 c7                	mov    edi,eax
c001c1ab:	55                   	push   ebp
c001c1ac:	50                   	push   eax
c001c1ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1b5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1bb:	e8 18 58 ff ff       	call   c00119d8 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c1c0:	83 c4 0c             	add    esp,0xc
c001c1c3:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c1ca:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1d0:	6a 00                	push   0x0
c001c1d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1d7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1da:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1e0:	e8 4d 56 ff ff       	call   c0011832 <VAS::mapOtherVASIn(bool, VAS*)>
c001c1e5:	58                   	pop    eax
c001c1e6:	5a                   	pop    edx
c001c1e7:	68 07 0c 00 00       	push   0xc07
c001c1ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c1f0:	57                   	push   edi
c001c1f1:	89 ef                	mov    edi,ebp
c001c1f3:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c1fa:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c200:	6a 00                	push   0x0
c001c202:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c207:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c20a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c210:	e8 7f 5b ff ff       	call   c0011d94 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c215:	b9 00 10 00 00       	mov    ecx,0x1000
c001c21a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c21c:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001c221:	83 c4 20             	add    esp,0x20
c001c224:	48                   	dec    eax
c001c225:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001c22a:	85 c0                	test   eax,eax
c001c22c:	75 01                	jne    c001c22f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c22e:	fb                   	sti    
c001c22f:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c236:	e9 df fe ff ff       	jmp    c001c11a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c23b:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c23e:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c246:	0f 86 a9 00 00 00    	jbe    c001c2f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c24c:	fa                   	cli    
c001c24d:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c001c253:	51                   	push   ecx
c001c254:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c25b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c261:	6a 00                	push   0x0
c001c263:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c268:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c26b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c271:	e8 bc 55 ff ff       	call   c0011832 <VAS::mapOtherVASIn(bool, VAS*)>
c001c276:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c27a:	c1 e6 0c             	shl    esi,0xc
c001c27d:	01 de                	add    esi,ebx
c001c27f:	83 c4 10             	add    esp,0x10
c001c282:	39 de                	cmp    esi,ebx
c001c284:	74 61                	je     c001c2e7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c286:	e8 e6 36 ff ff       	call   c000f971 <Phys::allocatePage()>
c001c28b:	6a 07                	push   0x7
c001c28d:	89 c7                	mov    edi,eax
c001c28f:	55                   	push   ebp
c001c290:	50                   	push   eax
c001c291:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c296:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c299:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c29f:	e8 34 57 ff ff       	call   c00119d8 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c2a4:	58                   	pop    eax
c001c2a5:	5a                   	pop    edx
c001c2a6:	68 07 0c 00 00       	push   0xc07
c001c2ab:	53                   	push   ebx
c001c2ac:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c2b2:	57                   	push   edi
c001c2b3:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c2ba:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2c0:	6a 00                	push   0x0
c001c2c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2c7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2ca:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2d0:	e8 bf 5a ff ff       	call   c0011d94 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c2d5:	83 c4 1c             	add    esp,0x1c
c001c2d8:	68 00 10 00 00       	push   0x1000
c001c2dd:	6a 00                	push   0x0
c001c2df:	55                   	push   ebp
c001c2e0:	e8 6b 44 fe ff       	call   c0000750 <memset>
c001c2e5:	eb 98                	jmp    c001c27f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c2e7:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001c2ec:	48                   	dec    eax
c001c2ed:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001c2f2:	75 01                	jne    c001c2f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c2f4:	fb                   	sti    
c001c2f5:	83 ec 0c             	sub    esp,0xc
c001c2f8:	55                   	push   ebp
c001c2f9:	e8 63 53 ff ff       	call   c0011661 <Virt::freeKernelVirtualPages(unsigned long)>
c001c2fe:	83 c4 10             	add    esp,0x10
c001c301:	b0 01                	mov    al,0x1
c001c303:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c309:	5b                   	pop    ebx
c001c30a:	5e                   	pop    esi
c001c30b:	5f                   	pop    edi
c001c30c:	5d                   	pop    ebp
c001c30d:	c3                   	ret    

c001c30e <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c30e:	55                   	push   ebp
c001c30f:	57                   	push   edi
c001c310:	56                   	push   esi
c001c311:	53                   	push   ebx
c001c312:	83 ec 48             	sub    esp,0x48
c001c315:	68 14 01 00 00       	push   0x114
c001c31a:	e8 7a 32 ff ff       	call   c000f599 <malloc>
c001c31f:	83 c4 0c             	add    esp,0xc
c001c322:	89 c6                	mov    esi,eax
c001c324:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c328:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c32c:	50                   	push   eax
c001c32d:	e8 f4 68 ff ff       	call   c0012c26 <File::File(char const*, Process*)>
c001c332:	58                   	pop    eax
c001c333:	5a                   	pop    edx
c001c334:	6a 01                	push   0x1
c001c336:	56                   	push   esi
c001c337:	e8 4e 69 ff ff       	call   c0012c8a <File::open(FileOpenMode)>
c001c33c:	83 c4 10             	add    esp,0x10
c001c33f:	85 c0                	test   eax,eax
c001c341:	0f 85 47 01 00 00    	jne    c001c48e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c347:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c34f:	83 ec 0c             	sub    esp,0xc
c001c352:	6a 34                	push   0x34
c001c354:	e8 40 32 ff ff       	call   c000f599 <malloc>
c001c359:	89 c3                	mov    ebx,eax
c001c35b:	58                   	pop    eax
c001c35c:	8b 06                	mov    eax,DWORD PTR [esi]
c001c35e:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c362:	57                   	push   edi
c001c363:	53                   	push   ebx
c001c364:	6a 00                	push   0x0
c001c366:	6a 34                	push   0x34
c001c368:	56                   	push   esi
c001c369:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c36c:	83 c4 20             	add    esp,0x20
c001c36f:	85 c0                	test   eax,eax
c001c371:	0f 85 17 01 00 00    	jne    c001c48e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c377:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c37d:	0f 85 0b 01 00 00    	jne    c001c48e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c383:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c386:	85 c0                	test   eax,eax
c001c388:	0f 84 00 01 00 00    	je     c001c48e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c38e:	31 d2                	xor    edx,edx
c001c390:	55                   	push   ebp
c001c391:	52                   	push   edx
c001c392:	50                   	push   eax
c001c393:	56                   	push   esi
c001c394:	e8 af 69 ff ff       	call   c0012d48 <File::seek(unsigned long long)>
c001c399:	83 c4 10             	add    esp,0x10
c001c39c:	85 c0                	test   eax,eax
c001c39e:	0f 85 ea 00 00 00    	jne    c001c48e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3a4:	83 ec 0c             	sub    esp,0xc
c001c3a7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c3aa:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c3ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c3b2:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c3b6:	0f af c2             	imul   eax,edx
c001c3b9:	50                   	push   eax
c001c3ba:	e8 da 31 ff ff       	call   c000f599 <malloc>
c001c3bf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c3c1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c3c5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c3cc:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c3d0:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c3d4:	0f af c2             	imul   eax,edx
c001c3d7:	99                   	cdq    
c001c3d8:	52                   	push   edx
c001c3d9:	50                   	push   eax
c001c3da:	56                   	push   esi
c001c3db:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c3de:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c3e1:	83 c4 20             	add    esp,0x20
c001c3e4:	85 c0                	test   eax,eax
c001c3e6:	0f 84 a2 00 00 00    	je     c001c48e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3ec:	31 d2                	xor    edx,edx
c001c3ee:	51                   	push   ecx
c001c3ef:	52                   	push   edx
c001c3f0:	50                   	push   eax
c001c3f1:	56                   	push   esi
c001c3f2:	e8 51 69 ff ff       	call   c0012d48 <File::seek(unsigned long long)>
c001c3f7:	83 c4 10             	add    esp,0x10
c001c3fa:	85 c0                	test   eax,eax
c001c3fc:	0f 85 8c 00 00 00    	jne    c001c48e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c402:	83 ec 0c             	sub    esp,0xc
c001c405:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c409:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c40d:	31 ed                	xor    ebp,ebp
c001c40f:	0f af c2             	imul   eax,edx
c001c412:	50                   	push   eax
c001c413:	e8 81 31 ff ff       	call   c000f599 <malloc>
c001c418:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c41a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c41e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c421:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c425:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c429:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c42d:	0f af c2             	imul   eax,edx
c001c430:	99                   	cdq    
c001c431:	52                   	push   edx
c001c432:	50                   	push   eax
c001c433:	56                   	push   esi
c001c434:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c437:	83 c4 20             	add    esp,0x20
c001c43a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c442:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c446:	0f 86 80 00 00 00    	jbe    c001c4cc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c44c:	0f b7 fd             	movzx  edi,bp
c001c44f:	c1 e7 05             	shl    edi,0x5
c001c452:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c456:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c459:	75 6b                	jne    c001c4c6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c45b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c45e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c462:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c465:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c469:	52                   	push   edx
c001c46a:	31 d2                	xor    edx,edx
c001c46c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c46f:	52                   	push   edx
c001c470:	50                   	push   eax
c001c471:	56                   	push   esi
c001c472:	e8 d1 68 ff ff       	call   c0012d48 <File::seek(unsigned long long)>
c001c477:	83 c4 10             	add    esp,0x10
c001c47a:	85 c0                	test   eax,eax
c001c47c:	74 17                	je     c001c495 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c47e:	83 ec 0c             	sub    esp,0xc
c001c481:	68 3c b9 02 c0       	push   0xc002b93c
c001c486:	e8 3c 62 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001c48b:	83 c4 10             	add    esp,0x10
c001c48e:	31 c0                	xor    eax,eax
c001c490:	e9 87 00 00 00       	jmp    c001c51c <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c495:	83 ec 0c             	sub    esp,0xc
c001c498:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c49b:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c49e:	50                   	push   eax
c001c49f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c4a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c4a7:	56                   	push   esi
c001c4a8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c4ac:	e8 b3 fb ff ff       	call   c001c064 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c4b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c4b5:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c4b9:	83 c4 20             	add    esp,0x20
c001c4bc:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c4c0:	73 04                	jae    c001c4c6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c4c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c4c6:	45                   	inc    ebp
c001c4c7:	e9 76 ff ff ff       	jmp    c001c442 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c4cc:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c4d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c4d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4d8:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c4de:	83 ec 0c             	sub    esp,0xc
c001c4e1:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c4e7:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c4ec:	05 00 10 00 00       	add    eax,0x1000
c001c4f1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c4f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4f8:	e8 ac 30 ff ff       	call   c000f5a9 <free>
c001c4fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c500:	e8 a4 30 ff ff       	call   c000f5a9 <free>
c001c505:	58                   	pop    eax
c001c506:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c50a:	e8 9a 30 ff ff       	call   c000f5a9 <free>
c001c50f:	89 34 24             	mov    DWORD PTR [esp],esi
c001c512:	e8 d1 67 ff ff       	call   c0012ce8 <File::close()>
c001c517:	83 c4 10             	add    esp,0x10
c001c51a:	b0 01                	mov    al,0x1
c001c51c:	83 c4 3c             	add    esp,0x3c
c001c51f:	5b                   	pop    ebx
c001c520:	5e                   	pop    esi
c001c521:	5f                   	pop    edi
c001c522:	5d                   	pop    ebp
c001c523:	c3                   	ret    

c001c524 <Thr::runtimeReferenceHelper()>:
c001c524:	83 ec 18             	sub    esp,0x18
c001c527:	68 44 b9 02 c0       	push   0xc002b944
c001c52c:	e8 96 61 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001c531:	fa                   	cli    
c001c532:	83 c4 10             	add    esp,0x10
c001c535:	eb fe                	jmp    c001c535 <Thr::runtimeReferenceHelper()+0x11>

c001c537 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c537:	57                   	push   edi
c001c538:	56                   	push   esi
c001c539:	53                   	push   ebx
c001c53a:	31 db                	xor    ebx,ebx
c001c53c:	39 1d 00 0e 03 c0    	cmp    DWORD PTR ds:0xc0030e00,ebx
c001c542:	7e 3c                	jle    c001c580 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c544:	8b 34 9d 80 0d 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf280]
c001c54b:	31 ff                	xor    edi,edi
c001c54d:	39 3c 9d 80 0c 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf380],edi
c001c554:	7e 27                	jle    c001c57d <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c556:	50                   	push   eax
c001c557:	50                   	push   eax
c001c558:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c55c:	8b 06                	mov    eax,DWORD PTR [esi]
c001c55e:	03 04 9d 00 0d 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf300]
c001c565:	50                   	push   eax
c001c566:	e8 2d 43 fe ff       	call   c0000898 <strcmp>
c001c56b:	83 c4 10             	add    esp,0x10
c001c56e:	85 c0                	test   eax,eax
c001c570:	75 05                	jne    c001c577 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c572:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c575:	eb 0b                	jmp    c001c582 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c577:	83 c6 10             	add    esi,0x10
c001c57a:	47                   	inc    edi
c001c57b:	eb d0                	jmp    c001c54d <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c57d:	43                   	inc    ebx
c001c57e:	eb bc                	jmp    c001c53c <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c580:	31 c0                	xor    eax,eax
c001c582:	5b                   	pop    ebx
c001c583:	5e                   	pop    esi
c001c584:	5f                   	pop    edi
c001c585:	c3                   	ret    

c001c586 <Thr::loadKernelSymbolTable(char const*)>:
c001c586:	55                   	push   ebp
c001c587:	57                   	push   edi
c001c588:	56                   	push   esi
c001c589:	53                   	push   ebx
c001c58a:	83 ec 68             	sub    esp,0x68
c001c58d:	8b 35 50 0e 03 c0    	mov    esi,DWORD PTR ds:0xc0030e50
c001c593:	68 14 01 00 00       	push   0x114
c001c598:	e8 fc 2f ff ff       	call   c000f599 <malloc>
c001c59d:	83 c4 0c             	add    esp,0xc
c001c5a0:	89 c3                	mov    ebx,eax
c001c5a2:	56                   	push   esi
c001c5a3:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c5a7:	50                   	push   eax
c001c5a8:	e8 79 66 ff ff       	call   c0012c26 <File::File(char const*, Process*)>
c001c5ad:	5e                   	pop    esi
c001c5ae:	5f                   	pop    edi
c001c5af:	6a 01                	push   0x1
c001c5b1:	53                   	push   ebx
c001c5b2:	e8 d3 66 ff ff       	call   c0012c8a <File::open(FileOpenMode)>
c001c5b7:	83 c4 10             	add    esp,0x10
c001c5ba:	85 c0                	test   eax,eax
c001c5bc:	74 0a                	je     c001c5c8 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c5be:	83 ec 0c             	sub    esp,0xc
c001c5c1:	68 66 b9 02 c0       	push   0xc002b966
c001c5c6:	eb 34                	jmp    c001c5fc <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c5c8:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c5d0:	83 ec 0c             	sub    esp,0xc
c001c5d3:	6a 34                	push   0x34
c001c5d5:	e8 bf 2f ff ff       	call   c000f599 <malloc>
c001c5da:	59                   	pop    ecx
c001c5db:	89 c7                	mov    edi,eax
c001c5dd:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c5e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5e3:	56                   	push   esi
c001c5e4:	57                   	push   edi
c001c5e5:	6a 00                	push   0x0
c001c5e7:	6a 34                	push   0x34
c001c5e9:	53                   	push   ebx
c001c5ea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c5ed:	83 c4 20             	add    esp,0x20
c001c5f0:	85 c0                	test   eax,eax
c001c5f2:	74 17                	je     c001c60b <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c5f4:	83 ec 0c             	sub    esp,0xc
c001c5f7:	68 7d b9 02 c0       	push   0xc002b97d
c001c5fc:	e8 32 d8 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c001c601:	83 c4 10             	add    esp,0x10
c001c604:	31 c0                	xor    eax,eax
c001c606:	e9 31 02 00 00       	jmp    c001c83c <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c60b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c611:	75 e1                	jne    c001c5f4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c613:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c616:	85 c0                	test   eax,eax
c001c618:	74 da                	je     c001c5f4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c61a:	52                   	push   edx
c001c61b:	31 d2                	xor    edx,edx
c001c61d:	52                   	push   edx
c001c61e:	50                   	push   eax
c001c61f:	53                   	push   ebx
c001c620:	e8 23 67 ff ff       	call   c0012d48 <File::seek(unsigned long long)>
c001c625:	83 c4 10             	add    esp,0x10
c001c628:	85 c0                	test   eax,eax
c001c62a:	75 c8                	jne    c001c5f4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c62c:	83 ec 0c             	sub    esp,0xc
c001c62f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c633:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c637:	31 ed                	xor    ebp,ebp
c001c639:	0f af c2             	imul   eax,edx
c001c63c:	50                   	push   eax
c001c63d:	e8 57 2f ff ff       	call   c000f599 <malloc>
c001c642:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c644:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c648:	89 34 24             	mov    DWORD PTR [esp],esi
c001c64b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c64f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c653:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c657:	0f af c2             	imul   eax,edx
c001c65a:	99                   	cdq    
c001c65b:	52                   	push   edx
c001c65c:	50                   	push   eax
c001c65d:	53                   	push   ebx
c001c65e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c661:	83 c4 20             	add    esp,0x20
c001c664:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c66c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c674:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c67c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c684:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c688:	0f 86 aa 00 00 00    	jbe    c001c738 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c68e:	0f b7 f5             	movzx  esi,bp
c001c691:	6b f6 28             	imul   esi,esi,0x28
c001c694:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c698:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c69b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c69f:	50                   	push   eax
c001c6a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c6a4:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c6a8:	8b 16                	mov    edx,DWORD PTR [esi]
c001c6aa:	6b c0 28             	imul   eax,eax,0x28
c001c6ad:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c6b1:	89 d0                	mov    eax,edx
c001c6b3:	31 d2                	xor    edx,edx
c001c6b5:	52                   	push   edx
c001c6b6:	50                   	push   eax
c001c6b7:	53                   	push   ebx
c001c6b8:	e8 8b 66 ff ff       	call   c0012d48 <File::seek(unsigned long long)>
c001c6bd:	83 c4 0c             	add    esp,0xc
c001c6c0:	6a 20                	push   0x20
c001c6c2:	6a 00                	push   0x0
c001c6c4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c6c8:	52                   	push   edx
c001c6c9:	e8 82 40 fe ff       	call   c0000750 <memset>
c001c6ce:	58                   	pop    eax
c001c6cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6d1:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c6d5:	51                   	push   ecx
c001c6d6:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c6da:	52                   	push   edx
c001c6db:	6a 00                	push   0x0
c001c6dd:	6a 1f                	push   0x1f
c001c6df:	53                   	push   ebx
c001c6e0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c6e3:	83 c4 18             	add    esp,0x18
c001c6e6:	68 94 b9 02 c0       	push   0xc002b994
c001c6eb:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c6ef:	52                   	push   edx
c001c6f0:	e8 a3 41 fe ff       	call   c0000898 <strcmp>
c001c6f5:	83 c4 10             	add    esp,0x10
c001c6f8:	85 c0                	test   eax,eax
c001c6fa:	75 0f                	jne    c001c70b <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c6fc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c6ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c703:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c707:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c70b:	50                   	push   eax
c001c70c:	50                   	push   eax
c001c70d:	68 9c b9 02 c0       	push   0xc002b99c
c001c712:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c716:	50                   	push   eax
c001c717:	e8 7c 41 fe ff       	call   c0000898 <strcmp>
c001c71c:	83 c4 10             	add    esp,0x10
c001c71f:	85 c0                	test   eax,eax
c001c721:	75 0f                	jne    c001c732 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c723:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c726:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c72a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c72e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c732:	45                   	inc    ebp
c001c733:	e9 4c ff ff ff       	jmp    c001c684 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c738:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c73d:	75 10                	jne    c001c74f <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c73f:	83 ec 0c             	sub    esp,0xc
c001c742:	68 a4 b9 02 c0       	push   0xc002b9a4
c001c747:	e8 e7 d6 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c001c74c:	83 c4 10             	add    esp,0x10
c001c74f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c754:	75 10                	jne    c001c766 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c756:	83 ec 0c             	sub    esp,0xc
c001c759:	68 a4 b9 02 c0       	push   0xc002b9a4
c001c75e:	e8 d0 d6 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c001c763:	83 c4 10             	add    esp,0x10
c001c766:	31 d2                	xor    edx,edx
c001c768:	50                   	push   eax
c001c769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c76d:	52                   	push   edx
c001c76e:	50                   	push   eax
c001c76f:	53                   	push   ebx
c001c770:	e8 d3 65 ff ff       	call   c0012d48 <File::seek(unsigned long long)>
c001c775:	5a                   	pop    edx
c001c776:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c77a:	e8 1a 2e ff ff       	call   c000f599 <malloc>
c001c77f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c783:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c787:	31 c9                	xor    ecx,ecx
c001c789:	5e                   	pop    esi
c001c78a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c78c:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c790:	55                   	push   ebp
c001c791:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c795:	51                   	push   ecx
c001c796:	52                   	push   edx
c001c797:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c79b:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c79f:	53                   	push   ebx
c001c7a0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7a3:	83 c4 14             	add    esp,0x14
c001c7a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c7aa:	e8 ea 2d ff ff       	call   c000f599 <malloc>
c001c7af:	89 c6                	mov    esi,eax
c001c7b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c7b3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c7b6:	56                   	push   esi
c001c7b7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c7bb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c7bf:	51                   	push   ecx
c001c7c0:	52                   	push   edx
c001c7c1:	53                   	push   ebx
c001c7c2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c7c9:	8b 15 00 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030e00
c001c7cf:	83 c4 1c             	add    esp,0x1c
c001c7d2:	c1 e8 04             	shr    eax,0x4
c001c7d5:	89 04 95 80 0c 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf380],eax
c001c7dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c7e0:	31 d2                	xor    edx,edx
c001c7e2:	52                   	push   edx
c001c7e3:	50                   	push   eax
c001c7e4:	53                   	push   ebx
c001c7e5:	e8 5e 65 ff ff       	call   c0012d48 <File::seek(unsigned long long)>
c001c7ea:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c7ec:	31 d2                	xor    edx,edx
c001c7ee:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c7f1:	56                   	push   esi
c001c7f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c7f6:	52                   	push   edx
c001c7f7:	50                   	push   eax
c001c7f8:	53                   	push   ebx
c001c7f9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7fc:	83 c4 14             	add    esp,0x14
c001c7ff:	53                   	push   ebx
c001c800:	e8 e3 64 ff ff       	call   c0012ce8 <File::close()>
c001c805:	5d                   	pop    ebp
c001c806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c80a:	e8 9a 2d ff ff       	call   c000f5a9 <free>
c001c80f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c812:	e8 92 2d ff ff       	call   c000f5a9 <free>
c001c817:	a1 00 0e 03 c0       	mov    eax,ds:0xc0030e00
c001c81c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c820:	8d 50 01             	lea    edx,[eax+0x1]
c001c823:	89 0c 85 80 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf280],ecx
c001c82a:	89 34 85 00 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf300],esi
c001c831:	89 15 00 0e 03 c0    	mov    DWORD PTR ds:0xc0030e00,edx
c001c837:	83 c4 10             	add    esp,0x10
c001c83a:	b0 01                	mov    al,0x1
c001c83c:	83 c4 5c             	add    esp,0x5c
c001c83f:	5b                   	pop    ebx
c001c840:	5e                   	pop    esi
c001c841:	5f                   	pop    edi
c001c842:	5d                   	pop    ebp
c001c843:	c3                   	ret    

c001c844 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c844:	55                   	push   ebp
c001c845:	57                   	push   edi
c001c846:	56                   	push   esi
c001c847:	53                   	push   ebx
c001c848:	81 ec 68 03 00 00    	sub    esp,0x368
c001c84e:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c855:	8b 1d 50 0e 03 c0    	mov    ebx,DWORD PTR ds:0xc0030e50
c001c85b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c85f:	68 14 01 00 00       	push   0x114
c001c864:	e8 30 2d ff ff       	call   c000f599 <malloc>
c001c869:	83 c4 0c             	add    esp,0xc
c001c86c:	89 c5                	mov    ebp,eax
c001c86e:	53                   	push   ebx
c001c86f:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c876:	50                   	push   eax
c001c877:	e8 aa 63 ff ff       	call   c0012c26 <File::File(char const*, Process*)>
c001c87c:	5e                   	pop    esi
c001c87d:	5f                   	pop    edi
c001c87e:	6a 01                	push   0x1
c001c880:	55                   	push   ebp
c001c881:	e8 04 64 ff ff       	call   c0012c8a <File::open(FileOpenMode)>
c001c886:	83 c4 10             	add    esp,0x10
c001c889:	85 c0                	test   eax,eax
c001c88b:	0f 85 a7 06 00 00    	jne    c001cf38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c891:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c899:	83 ec 0c             	sub    esp,0xc
c001c89c:	6a 34                	push   0x34
c001c89e:	e8 f6 2c ff ff       	call   c000f599 <malloc>
c001c8a3:	5b                   	pop    ebx
c001c8a4:	89 c7                	mov    edi,eax
c001c8a6:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c8aa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c8ad:	53                   	push   ebx
c001c8ae:	57                   	push   edi
c001c8af:	6a 00                	push   0x0
c001c8b1:	6a 34                	push   0x34
c001c8b3:	55                   	push   ebp
c001c8b4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c8b7:	83 c4 20             	add    esp,0x20
c001c8ba:	85 c0                	test   eax,eax
c001c8bc:	0f 85 76 06 00 00    	jne    c001cf38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8c2:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c8c8:	0f 85 6a 06 00 00    	jne    c001cf38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8ce:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c8d1:	85 c0                	test   eax,eax
c001c8d3:	0f 84 5f 06 00 00    	je     c001cf38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8d9:	31 d2                	xor    edx,edx
c001c8db:	51                   	push   ecx
c001c8dc:	52                   	push   edx
c001c8dd:	50                   	push   eax
c001c8de:	55                   	push   ebp
c001c8df:	e8 64 64 ff ff       	call   c0012d48 <File::seek(unsigned long long)>
c001c8e4:	83 c4 10             	add    esp,0x10
c001c8e7:	85 c0                	test   eax,eax
c001c8e9:	0f 85 49 06 00 00    	jne    c001cf38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8ef:	83 ec 0c             	sub    esp,0xc
c001c8f2:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c8f5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c8f9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c8fd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c901:	0f af c2             	imul   eax,edx
c001c904:	50                   	push   eax
c001c905:	e8 8f 2c ff ff       	call   c000f599 <malloc>
c001c90a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c90d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c911:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c914:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c918:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c91c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c920:	0f af c2             	imul   eax,edx
c001c923:	99                   	cdq    
c001c924:	52                   	push   edx
c001c925:	50                   	push   eax
c001c926:	55                   	push   ebp
c001c927:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c92a:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c92d:	83 c4 20             	add    esp,0x20
c001c930:	85 c0                	test   eax,eax
c001c932:	0f 84 00 06 00 00    	je     c001cf38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c938:	52                   	push   edx
c001c939:	31 d2                	xor    edx,edx
c001c93b:	52                   	push   edx
c001c93c:	50                   	push   eax
c001c93d:	55                   	push   ebp
c001c93e:	e8 05 64 ff ff       	call   c0012d48 <File::seek(unsigned long long)>
c001c943:	83 c4 10             	add    esp,0x10
c001c946:	85 c0                	test   eax,eax
c001c948:	0f 85 ea 05 00 00    	jne    c001cf38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c94e:	83 ec 0c             	sub    esp,0xc
c001c951:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c955:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c959:	31 f6                	xor    esi,esi
c001c95b:	0f af c2             	imul   eax,edx
c001c95e:	50                   	push   eax
c001c95f:	e8 35 2c ff ff       	call   c000f599 <malloc>
c001c964:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c967:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c96b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c96e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c972:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c976:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c97a:	0f af c2             	imul   eax,edx
c001c97d:	99                   	cdq    
c001c97e:	52                   	push   edx
c001c97f:	50                   	push   eax
c001c980:	55                   	push   ebp
c001c981:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c984:	83 c4 20             	add    esp,0x20
c001c987:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c98b:	0f 86 8a 00 00 00    	jbe    c001ca1b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c991:	0f b7 de             	movzx  ebx,si
c001c994:	c1 e3 05             	shl    ebx,0x5
c001c997:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c99b:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c99e:	75 75                	jne    c001ca15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c9a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c9a3:	31 d2                	xor    edx,edx
c001c9a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c9a9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c9ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c9b0:	50                   	push   eax
c001c9b1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c9b4:	52                   	push   edx
c001c9b5:	50                   	push   eax
c001c9b6:	55                   	push   ebp
c001c9b7:	e8 8c 63 ff ff       	call   c0012d48 <File::seek(unsigned long long)>
c001c9bc:	83 c4 10             	add    esp,0x10
c001c9bf:	85 c0                	test   eax,eax
c001c9c1:	0f 85 71 05 00 00    	jne    c001cf38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c9c7:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c9ce:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c9d1:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c9d5:	31 d2                	xor    edx,edx
c001c9d7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c9db:	83 ec 0c             	sub    esp,0xc
c001c9de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c9e2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c9e9:	50                   	push   eax
c001c9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c9ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9f2:	52                   	push   edx
c001c9f3:	50                   	push   eax
c001c9f4:	55                   	push   ebp
c001c9f5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9f8:	83 c4 1c             	add    esp,0x1c
c001c9fb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c9fe:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ca01:	50                   	push   eax
c001ca02:	6a 00                	push   0x0
c001ca04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca08:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001ca0c:	50                   	push   eax
c001ca0d:	e8 3e 3d fe ff       	call   c0000750 <memset>
c001ca12:	83 c4 10             	add    esp,0x10
c001ca15:	46                   	inc    esi
c001ca16:	e9 6c ff ff ff       	jmp    c001c987 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001ca1b:	53                   	push   ebx
c001ca1c:	31 db                	xor    ebx,ebx
c001ca1e:	68 00 01 00 00       	push   0x100
c001ca23:	6a 00                	push   0x0
c001ca25:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ca29:	50                   	push   eax
c001ca2a:	e8 21 3d fe ff       	call   c0000750 <memset>
c001ca2f:	83 c4 0c             	add    esp,0xc
c001ca32:	68 00 01 00 00       	push   0x100
c001ca37:	6a 00                	push   0x0
c001ca39:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ca40:	50                   	push   eax
c001ca41:	e8 0a 3d fe ff       	call   c0000750 <memset>
c001ca46:	83 c4 10             	add    esp,0x10
c001ca49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ca51:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ca59:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001ca61:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca69:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ca71:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001ca75:	0f 86 30 01 00 00    	jbe    c001cbab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001ca7b:	0f b7 f3             	movzx  esi,bx
c001ca7e:	6b f6 28             	imul   esi,esi,0x28
c001ca81:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ca85:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ca88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ca8c:	52                   	push   edx
c001ca8d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ca91:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001ca95:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca97:	6b d2 28             	imul   edx,edx,0x28
c001ca9a:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001ca9e:	31 d2                	xor    edx,edx
c001caa0:	52                   	push   edx
c001caa1:	50                   	push   eax
c001caa2:	55                   	push   ebp
c001caa3:	e8 a0 62 ff ff       	call   c0012d48 <File::seek(unsigned long long)>
c001caa8:	83 c4 0c             	add    esp,0xc
c001caab:	6a 20                	push   0x20
c001caad:	6a 00                	push   0x0
c001caaf:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cab6:	51                   	push   ecx
c001cab7:	e8 94 3c fe ff       	call   c0000750 <memset>
c001cabc:	59                   	pop    ecx
c001cabd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cac0:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cac4:	52                   	push   edx
c001cac5:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cacc:	51                   	push   ecx
c001cacd:	6a 00                	push   0x0
c001cacf:	6a 1f                	push   0x1f
c001cad1:	55                   	push   ebp
c001cad2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cad5:	83 c4 1c             	add    esp,0x1c
c001cad8:	6a 09                	push   0x9
c001cada:	68 be b9 02 c0       	push   0xc002b9be
c001cadf:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cae6:	51                   	push   ecx
c001cae7:	e8 60 3b fe ff       	call   c000064c <memcmp>
c001caec:	83 c4 10             	add    esp,0x10
c001caef:	85 c0                	test   eax,eax
c001caf1:	75 21                	jne    c001cb14 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001caf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caf7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cafb:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001caff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb03:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb06:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cb0d:	89 d0                	mov    eax,edx
c001cb0f:	40                   	inc    eax
c001cb10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb14:	50                   	push   eax
c001cb15:	6a 09                	push   0x9
c001cb17:	68 c8 b9 02 c0       	push   0xc002b9c8
c001cb1c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb23:	50                   	push   eax
c001cb24:	e8 23 3b fe ff       	call   c000064c <memcmp>
c001cb29:	83 c4 10             	add    esp,0x10
c001cb2c:	85 c0                	test   eax,eax
c001cb2e:	75 21                	jne    c001cb51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cb30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb38:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cb3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb40:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb43:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cb4a:	89 d0                	mov    eax,edx
c001cb4c:	40                   	inc    eax
c001cb4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb51:	50                   	push   eax
c001cb52:	50                   	push   eax
c001cb53:	68 94 b9 02 c0       	push   0xc002b994
c001cb58:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb5f:	50                   	push   eax
c001cb60:	e8 33 3d fe ff       	call   c0000898 <strcmp>
c001cb65:	83 c4 10             	add    esp,0x10
c001cb68:	85 c0                	test   eax,eax
c001cb6a:	75 0f                	jne    c001cb7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cb6c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb7b:	50                   	push   eax
c001cb7c:	50                   	push   eax
c001cb7d:	68 9c b9 02 c0       	push   0xc002b99c
c001cb82:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb89:	50                   	push   eax
c001cb8a:	e8 09 3d fe ff       	call   c0000898 <strcmp>
c001cb8f:	83 c4 10             	add    esp,0x10
c001cb92:	85 c0                	test   eax,eax
c001cb94:	75 0f                	jne    c001cba5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cb96:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb99:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cba1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cba5:	43                   	inc    ebx
c001cba6:	e9 c6 fe ff ff       	jmp    c001ca71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cbab:	31 d2                	xor    edx,edx
c001cbad:	50                   	push   eax
c001cbae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cbb2:	52                   	push   edx
c001cbb3:	50                   	push   eax
c001cbb4:	55                   	push   ebp
c001cbb5:	e8 8e 61 ff ff       	call   c0012d48 <File::seek(unsigned long long)>
c001cbba:	58                   	pop    eax
c001cbbb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cbbf:	e8 d5 29 ff ff       	call   c000f599 <malloc>
c001cbc4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cbc7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cbcb:	31 d2                	xor    edx,edx
c001cbcd:	58                   	pop    eax
c001cbce:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cbd2:	53                   	push   ebx
c001cbd3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cbd7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cbdb:	52                   	push   edx
c001cbdc:	50                   	push   eax
c001cbdd:	55                   	push   ebp
c001cbde:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbe1:	83 c4 14             	add    esp,0x14
c001cbe4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbe8:	e8 ac 29 ff ff       	call   c000f599 <malloc>
c001cbed:	31 d2                	xor    edx,edx
c001cbef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cbf3:	83 c4 0c             	add    esp,0xc
c001cbf6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cbfa:	52                   	push   edx
c001cbfb:	50                   	push   eax
c001cbfc:	55                   	push   ebp
c001cbfd:	e8 46 61 ff ff       	call   c0012d48 <File::seek(unsigned long long)>
c001cc02:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc05:	31 d2                	xor    edx,edx
c001cc07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc0a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cc0e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc12:	52                   	push   edx
c001cc13:	50                   	push   eax
c001cc14:	55                   	push   ebp
c001cc15:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc18:	83 c4 20             	add    esp,0x20
c001cc1b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc23:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cc27:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cc2b:	0f 84 0b 03 00 00    	je     c001cf3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001cc31:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cc38:	31 d2                	xor    edx,edx
c001cc3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc3e:	c1 e8 03             	shr    eax,0x3
c001cc41:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cc45:	51                   	push   ecx
c001cc46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc4a:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cc4e:	52                   	push   edx
c001cc4f:	50                   	push   eax
c001cc50:	55                   	push   ebp
c001cc51:	e8 f2 60 ff ff       	call   c0012d48 <File::seek(unsigned long long)>
c001cc56:	5b                   	pop    ebx
c001cc57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc5b:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cc62:	e8 32 29 ff ff       	call   c000f599 <malloc>
c001cc67:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cc6e:	31 d2                	xor    edx,edx
c001cc70:	5e                   	pop    esi
c001cc71:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cc75:	50                   	push   eax
c001cc76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc7e:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cc85:	52                   	push   edx
c001cc86:	50                   	push   eax
c001cc87:	55                   	push   ebp
c001cc88:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc8b:	83 c4 20             	add    esp,0x20
c001cc8e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cc96:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cc9a:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cc9e:	0f 8d 7c 02 00 00    	jge    c001cf20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001cca4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cca8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccac:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001ccb1:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001ccb4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ccb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccbc:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001ccc0:	89 d8                	mov    eax,ebx
c001ccc2:	c1 e8 08             	shr    eax,0x8
c001ccc5:	89 c6                	mov    esi,eax
c001ccc7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cccb:	c1 e6 04             	shl    esi,0x4
c001ccce:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001ccd2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001ccd5:	85 d2                	test   edx,edx
c001ccd7:	0f 85 bf 00 00 00    	jne    c001cd9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001ccdd:	83 ec 0c             	sub    esp,0xc
c001cce0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cce4:	03 06                	add    eax,DWORD PTR [esi]
c001cce6:	50                   	push   eax
c001cce7:	e8 4b f8 ff ff       	call   c001c537 <Thr::getAddressOfKernelSymbol(char const*)>
c001ccec:	83 c4 10             	add    esp,0x10
c001ccef:	89 c2                	mov    edx,eax
c001ccf1:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001ccf6:	85 c0                	test   eax,eax
c001ccf8:	0f 85 9e 00 00 00    	jne    c001cd9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001ccfe:	83 ec 0c             	sub    esp,0xc
c001cd01:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd05:	03 06                	add    eax,DWORD PTR [esi]
c001cd07:	50                   	push   eax
c001cd08:	e8 32 18 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001cd0d:	83 c4 10             	add    esp,0x10
c001cd10:	89 c2                	mov    edx,eax
c001cd12:	85 c0                	test   eax,eax
c001cd14:	0f 85 82 00 00 00    	jne    c001cd9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd1a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cd1e:	50                   	push   eax
c001cd1f:	50                   	push   eax
c001cd20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd24:	03 06                	add    eax,DWORD PTR [esi]
c001cd26:	50                   	push   eax
c001cd27:	68 d2 b9 02 c0       	push   0xc002b9d2
c001cd2c:	e8 96 59 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001cd31:	58                   	pop    eax
c001cd32:	5a                   	pop    edx
c001cd33:	68 ec b9 02 c0       	push   0xc002b9ec
c001cd38:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd3f:	50                   	push   eax
c001cd40:	e8 c7 3a fe ff       	call   c000080c <strcpy>
c001cd45:	59                   	pop    ecx
c001cd46:	58                   	pop    eax
c001cd47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd4b:	03 06                	add    eax,DWORD PTR [esi]
c001cd4d:	50                   	push   eax
c001cd4e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd55:	50                   	push   eax
c001cd56:	e8 f1 3b fe ff       	call   c000094c <strcat>
c001cd5b:	58                   	pop    eax
c001cd5c:	5a                   	pop    edx
c001cd5d:	68 82 ba 02 c0       	push   0xc002ba82
c001cd62:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd69:	50                   	push   eax
c001cd6a:	e8 dd 3b fe ff       	call   c000094c <strcat>
c001cd6f:	83 c4 10             	add    esp,0x10
c001cd72:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cd77:	0f 84 5d 01 00 00    	je     c001ceda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cd7d:	83 ec 0c             	sub    esp,0xc
c001cd80:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd87:	50                   	push   eax
c001cd88:	e8 a6 d0 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c001cd8d:	83 c4 10             	add    esp,0x10
c001cd90:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cd94:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cd98:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cd9c:	80 fb 01             	cmp    bl,0x1
c001cd9f:	0f 85 88 00 00 00    	jne    c001ce2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001cda5:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cdac:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cdb0:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cdb4:	01 ce                	add    esi,ecx
c001cdb6:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cdbc:	0f 94 c0             	sete   al
c001cdbf:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cdc5:	0f 94 c3             	sete   bl
c001cdc8:	09 c3                	or     ebx,eax
c001cdca:	8b 06                	mov    eax,DWORD PTR [esi]
c001cdcc:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cdd1:	74 41                	je     c001ce14 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001cdd3:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cdd6:	84 db                	test   bl,bl
c001cdd8:	75 15                	jne    c001cdef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001cdda:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdde:	66 83 f8 0c          	cmp    ax,0xc
c001cde2:	76 05                	jbe    c001cde9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001cde4:	b8 0c 00 00 00       	mov    eax,0xc
c001cde9:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cded:	76 37                	jbe    c001ce26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cdef:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cdf3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cdf8:	0f 84 dc 00 00 00    	je     c001ceda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cdfe:	83 ec 0c             	sub    esp,0xc
c001ce01:	68 03 ba 02 c0       	push   0xc002ba03
c001ce06:	e8 28 d0 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c001ce0b:	83 c4 10             	add    esp,0x10
c001ce0e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ce12:	eb 12                	jmp    c001ce26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce14:	01 c1                	add    ecx,eax
c001ce16:	84 db                	test   bl,bl
c001ce18:	75 0c                	jne    c001ce26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce1a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce1e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ce22:	77 02                	ja     c001ce26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce24:	01 d1                	add    ecx,edx
c001ce26:	89 0e                	mov    DWORD PTR [esi],ecx
c001ce28:	e9 ea 00 00 00       	jmp    c001cf17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ce2d:	80 fb 02             	cmp    bl,0x2
c001ce30:	75 7c                	jne    c001ceae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001ce32:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001ce39:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001ce3d:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001ce41:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001ce47:	74 20                	je     c001ce69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001ce49:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ce4f:	74 18                	je     c001ce69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001ce51:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce55:	b9 0a 00 00 00       	mov    ecx,0xa
c001ce5a:	66 83 f8 0e          	cmp    ax,0xe
c001ce5e:	77 03                	ja     c001ce63 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001ce60:	8d 48 fc             	lea    ecx,[eax-0x4]
c001ce63:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001ce67:	76 1f                	jbe    c001ce88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001ce69:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001ce6d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce72:	74 66                	je     c001ceda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ce74:	83 ec 0c             	sub    esp,0xc
c001ce77:	68 1f ba 02 c0       	push   0xc002ba1f
c001ce7c:	e8 b2 cf ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c001ce81:	83 c4 10             	add    esp,0x10
c001ce84:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ce88:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce8a:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ce8f:	74 13                	je     c001cea4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001ce91:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ce95:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001ce9c:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001cea0:	01 c8                	add    eax,ecx
c001cea2:	eb 04                	jmp    c001cea8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001cea4:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001cea8:	01 c2                	add    edx,eax
c001ceaa:	89 16                	mov    DWORD PTR [esi],edx
c001ceac:	eb 69                	jmp    c001cf17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ceae:	0f b6 db             	movzx  ebx,bl
c001ceb1:	50                   	push   eax
c001ceb2:	50                   	push   eax
c001ceb3:	53                   	push   ebx
c001ceb4:	68 3b ba 02 c0       	push   0xc002ba3b
c001ceb9:	e8 09 58 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001cebe:	83 c4 10             	add    esp,0x10
c001cec1:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cec6:	74 12                	je     c001ceda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cec8:	83 ec 0c             	sub    esp,0xc
c001cecb:	68 46 ba 02 c0       	push   0xc002ba46
c001ced0:	e8 5e cf ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c001ced5:	83 c4 10             	add    esp,0x10
c001ced8:	eb 3d                	jmp    c001cf17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ceda:	83 ec 0c             	sub    esp,0xc
c001cedd:	55                   	push   ebp
c001cede:	e8 05 5e ff ff       	call   c0012ce8 <File::close()>
c001cee3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cee6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cee9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ceec:	59                   	pop    ecx
c001ceed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cef1:	e8 b3 26 ff ff       	call   c000f5a9 <free>
c001cef6:	5b                   	pop    ebx
c001cef7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cefb:	e8 a9 26 ff ff       	call   c000f5a9 <free>
c001cf00:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf03:	e8 a1 26 ff ff       	call   c000f5a9 <free>
c001cf08:	5e                   	pop    esi
c001cf09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf0d:	e8 97 26 ff ff       	call   c000f5a9 <free>
c001cf12:	83 c4 10             	add    esp,0x10
c001cf15:	eb 21                	jmp    c001cf38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cf17:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cf1b:	e9 76 fd ff ff       	jmp    c001cc96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cf20:	83 ec 0c             	sub    esp,0xc
c001cf23:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf27:	e8 7d 26 ff ff       	call   c000f5a9 <free>
c001cf2c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cf30:	83 c4 10             	add    esp,0x10
c001cf33:	e9 eb fc ff ff       	jmp    c001cc23 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cf38:	31 c0                	xor    eax,eax
c001cf3a:	eb 33                	jmp    c001cf6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001cf3c:	83 ec 0c             	sub    esp,0xc
c001cf3f:	55                   	push   ebp
c001cf40:	e8 a3 5d ff ff       	call   c0012ce8 <File::close()>
c001cf45:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf48:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf4b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf4e:	58                   	pop    eax
c001cf4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf53:	e8 51 26 ff ff       	call   c000f5a9 <free>
c001cf58:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf5b:	e8 49 26 ff ff       	call   c000f5a9 <free>
c001cf60:	5a                   	pop    edx
c001cf61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf65:	e8 3f 26 ff ff       	call   c000f5a9 <free>
c001cf6a:	83 c4 10             	add    esp,0x10
c001cf6d:	b0 01                	mov    al,0x1
c001cf6f:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cf75:	5b                   	pop    ebx
c001cf76:	5e                   	pop    esi
c001cf77:	5f                   	pop    edi
c001cf78:	5d                   	pop    ebp
c001cf79:	c3                   	ret    

c001cf7a <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cf7a:	56                   	push   esi
c001cf7b:	31 d2                	xor    edx,edx
c001cf7d:	53                   	push   ebx
c001cf7e:	8b 1d 60 06 03 c0    	mov    ebx,DWORD PTR ds:0xc0030660
c001cf84:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cf88:	39 d3                	cmp    ebx,edx
c001cf8a:	7e 1b                	jle    c001cfa7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cf8c:	8b 04 95 80 08 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf780]
c001cf93:	39 c8                	cmp    eax,ecx
c001cf95:	77 0d                	ja     c001cfa4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cf97:	8b 34 95 80 06 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf980]
c001cf9e:	01 c6                	add    esi,eax
c001cfa0:	39 ce                	cmp    esi,ecx
c001cfa2:	77 05                	ja     c001cfa9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cfa4:	42                   	inc    edx
c001cfa5:	eb e1                	jmp    c001cf88 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cfa7:	31 c0                	xor    eax,eax
c001cfa9:	5b                   	pop    ebx
c001cfaa:	5e                   	pop    esi
c001cfab:	c3                   	ret    

c001cfac <Thr::getDriverNameFromAddress(unsigned long)>:
c001cfac:	53                   	push   ebx
c001cfad:	31 c0                	xor    eax,eax
c001cfaf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cfb3:	8b 1d 60 06 03 c0    	mov    ebx,DWORD PTR ds:0xc0030660
c001cfb9:	39 c3                	cmp    ebx,eax
c001cfbb:	7e 22                	jle    c001cfdf <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001cfbd:	8b 14 85 80 08 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf780]
c001cfc4:	39 ca                	cmp    edx,ecx
c001cfc6:	77 14                	ja     c001cfdc <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cfc8:	03 14 85 80 06 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf980]
c001cfcf:	39 ca                	cmp    edx,ecx
c001cfd1:	76 09                	jbe    c001cfdc <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cfd3:	8b 04 85 80 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf580]
c001cfda:	eb 05                	jmp    c001cfe1 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001cfdc:	40                   	inc    eax
c001cfdd:	eb da                	jmp    c001cfb9 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001cfdf:	31 c0                	xor    eax,eax
c001cfe1:	5b                   	pop    ebx
c001cfe2:	c3                   	ret    

c001cfe3 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001cfe3:	53                   	push   ebx
c001cfe4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001cfe8:	53                   	push   ebx
c001cfe9:	e8 8c ff ff ff       	call   c001cf7a <Thr::getDriverBaseFromAddress(unsigned long)>
c001cfee:	5a                   	pop    edx
c001cfef:	31 d2                	xor    edx,edx
c001cff1:	85 c0                	test   eax,eax
c001cff3:	74 04                	je     c001cff9 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001cff5:	89 da                	mov    edx,ebx
c001cff7:	29 c2                	sub    edx,eax
c001cff9:	89 d0                	mov    eax,edx
c001cffb:	5b                   	pop    ebx
c001cffc:	c3                   	ret    

c001cffd <Thr::loadDLL(char const*, bool)>:
c001cffd:	55                   	push   ebp
c001cffe:	57                   	push   edi
c001cfff:	56                   	push   esi
c001d000:	53                   	push   ebx
c001d001:	81 ec 34 01 00 00    	sub    esp,0x134
c001d007:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d00e:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d015:	56                   	push   esi
c001d016:	68 5e ba 02 c0       	push   0xc002ba5e
c001d01b:	e8 a7 56 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001d020:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d027:	e8 6d 25 ff ff       	call   c000f599 <malloc>
c001d02c:	83 c4 0c             	add    esp,0xc
c001d02f:	89 c3                	mov    ebx,eax
c001d031:	ff 35 50 0e 03 c0    	push   DWORD PTR ds:0xc0030e50
c001d037:	56                   	push   esi
c001d038:	50                   	push   eax
c001d039:	e8 e8 5b ff ff       	call   c0012c26 <File::File(char const*, Process*)>
c001d03e:	83 c4 10             	add    esp,0x10
c001d041:	85 db                	test   ebx,ebx
c001d043:	75 3c                	jne    c001d081 <Thr::loadDLL(char const*, bool)+0x84>
c001d045:	89 f8                	mov    eax,edi
c001d047:	84 c0                	test   al,al
c001d049:	0f 84 cc 01 00 00    	je     c001d21b <Thr::loadDLL(char const*, bool)+0x21e>
c001d04f:	55                   	push   ebp
c001d050:	55                   	push   ebp
c001d051:	68 6f ba 02 c0       	push   0xc002ba6f
c001d056:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d05a:	55                   	push   ebp
c001d05b:	e8 ac 37 fe ff       	call   c000080c <strcpy>
c001d060:	58                   	pop    eax
c001d061:	5a                   	pop    edx
c001d062:	56                   	push   esi
c001d063:	55                   	push   ebp
c001d064:	e8 e3 38 fe ff       	call   c000094c <strcat>
c001d069:	59                   	pop    ecx
c001d06a:	58                   	pop    eax
c001d06b:	68 82 ba 02 c0       	push   0xc002ba82
c001d070:	55                   	push   ebp
c001d071:	e8 d6 38 fe ff       	call   c000094c <strcat>
c001d076:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d079:	e8 b5 cd ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c001d07e:	83 c4 10             	add    esp,0x10
c001d081:	51                   	push   ecx
c001d082:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d086:	50                   	push   eax
c001d087:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d08b:	50                   	push   eax
c001d08c:	53                   	push   ebx
c001d08d:	e8 a4 5e ff ff       	call   c0012f36 <File::stat(unsigned long long*, bool*)>
c001d092:	83 c4 10             	add    esp,0x10
c001d095:	85 db                	test   ebx,ebx
c001d097:	74 0c                	je     c001d0a5 <Thr::loadDLL(char const*, bool)+0xa8>
c001d099:	83 ec 0c             	sub    esp,0xc
c001d09c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d09e:	53                   	push   ebx
c001d09f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d0a2:	83 c4 10             	add    esp,0x10
c001d0a5:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d0aa:	75 0a                	jne    c001d0b6 <Thr::loadDLL(char const*, bool)+0xb9>
c001d0ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d0b0:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d0b4:	75 3c                	jne    c001d0f2 <Thr::loadDLL(char const*, bool)+0xf5>
c001d0b6:	89 f8                	mov    eax,edi
c001d0b8:	84 c0                	test   al,al
c001d0ba:	0f 84 43 01 00 00    	je     c001d203 <Thr::loadDLL(char const*, bool)+0x206>
c001d0c0:	51                   	push   ecx
c001d0c1:	51                   	push   ecx
c001d0c2:	68 6f ba 02 c0       	push   0xc002ba6f
c001d0c7:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d0cb:	53                   	push   ebx
c001d0cc:	e8 3b 37 fe ff       	call   c000080c <strcpy>
c001d0d1:	5d                   	pop    ebp
c001d0d2:	58                   	pop    eax
c001d0d3:	56                   	push   esi
c001d0d4:	53                   	push   ebx
c001d0d5:	e8 72 38 fe ff       	call   c000094c <strcat>
c001d0da:	58                   	pop    eax
c001d0db:	5a                   	pop    edx
c001d0dc:	68 82 ba 02 c0       	push   0xc002ba82
c001d0e1:	53                   	push   ebx
c001d0e2:	e8 65 38 fe ff       	call   c000094c <strcat>
c001d0e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0ea:	e8 44 cd ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c001d0ef:	83 c4 10             	add    esp,0x10
c001d0f2:	52                   	push   edx
c001d0f3:	6a 03                	push   0x3
c001d0f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0f9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d0fd:	05 ff 0f 00 00       	add    eax,0xfff
c001d102:	83 d2 00             	adc    edx,0x0
c001d105:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d109:	50                   	push   eax
c001d10a:	ff 35 70 da 02 c0    	push   DWORD PTR ds:0xc002da70
c001d110:	e8 c5 49 ff ff       	call   c0011ada <VAS::allocatePages(int, int)>
c001d115:	59                   	pop    ecx
c001d116:	89 c3                	mov    ebx,eax
c001d118:	5d                   	pop    ebp
c001d119:	50                   	push   eax
c001d11a:	68 62 a0 02 c0       	push   0xc002a062
c001d11f:	e8 a3 55 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001d124:	89 34 24             	mov    DWORD PTR [esp],esi
c001d127:	e8 40 36 fe ff       	call   c000076c <strlen>
c001d12c:	8b 2d 60 06 03 c0    	mov    ebp,DWORD PTR ds:0xc0030660
c001d132:	40                   	inc    eax
c001d133:	89 04 24             	mov    DWORD PTR [esp],eax
c001d136:	e8 5e 24 ff ff       	call   c000f599 <malloc>
c001d13b:	89 04 ad 80 0a 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf580],eax
c001d142:	58                   	pop    eax
c001d143:	a1 60 06 03 c0       	mov    eax,ds:0xc0030660
c001d148:	5a                   	pop    edx
c001d149:	56                   	push   esi
c001d14a:	ff 34 85 80 0a 03 c0 	push   DWORD PTR [eax*4-0x3ffcf580]
c001d151:	e8 b6 36 fe ff       	call   c000080c <strcpy>
c001d156:	a1 60 06 03 c0       	mov    eax,ds:0xc0030660
c001d15b:	8d 50 01             	lea    edx,[eax+0x1]
c001d15e:	89 1c 85 80 08 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf780],ebx
c001d165:	89 15 60 06 03 c0    	mov    DWORD PTR ds:0xc0030660,edx
c001d16b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d16f:	83 c4 0c             	add    esp,0xc
c001d172:	89 14 85 80 06 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf980],edx
c001d179:	6a 01                	push   0x1
c001d17b:	53                   	push   ebx
c001d17c:	56                   	push   esi
c001d17d:	e8 c2 f6 ff ff       	call   c001c844 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d182:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d186:	83 c4 10             	add    esp,0x10
c001d189:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d18e:	0f 85 83 00 00 00    	jne    c001d217 <Thr::loadDLL(char const*, bool)+0x21a>
c001d194:	89 f8                	mov    eax,edi
c001d196:	84 c0                	test   al,al
c001d198:	74 6d                	je     c001d207 <Thr::loadDLL(char const*, bool)+0x20a>
c001d19a:	83 ec 0c             	sub    esp,0xc
c001d19d:	68 84 ba 02 c0       	push   0xc002ba84
c001d1a2:	e8 8c cc ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c001d1a7:	83 c4 10             	add    esp,0x10
c001d1aa:	eb 5b                	jmp    c001d207 <Thr::loadDLL(char const*, bool)+0x20a>
c001d1ac:	89 ee                	mov    esi,ebp
c001d1ae:	50                   	push   eax
c001d1af:	c1 e6 0c             	shl    esi,0xc
c001d1b2:	50                   	push   eax
c001d1b3:	01 de                	add    esi,ebx
c001d1b5:	56                   	push   esi
c001d1b6:	ff 35 70 da 02 c0    	push   DWORD PTR ds:0xc002da70
c001d1bc:	e8 81 44 ff ff       	call   c0011642 <VAS::getPageTableEntry(unsigned long)>
c001d1c1:	83 c4 10             	add    esp,0x10
c001d1c4:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d1c7:	75 0c                	jne    c001d1d5 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d1c9:	83 ec 0c             	sub    esp,0xc
c001d1cc:	56                   	push   esi
c001d1cd:	e8 2e 27 ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c001d1d2:	83 c4 10             	add    esp,0x10
c001d1d5:	45                   	inc    ebp
c001d1d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1de:	05 ff 0f 00 00       	add    eax,0xfff
c001d1e3:	bf 00 00 00 00       	mov    edi,0x0
c001d1e8:	83 d2 00             	adc    edx,0x0
c001d1eb:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d1ef:	c1 ea 0c             	shr    edx,0xc
c001d1f2:	39 c5                	cmp    ebp,eax
c001d1f4:	89 d1                	mov    ecx,edx
c001d1f6:	89 f8                	mov    eax,edi
c001d1f8:	19 c8                	sbb    eax,ecx
c001d1fa:	72 b0                	jb     c001d1ac <Thr::loadDLL(char const*, bool)+0x1af>
c001d1fc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d201:	75 18                	jne    c001d21b <Thr::loadDLL(char const*, bool)+0x21e>
c001d203:	31 db                	xor    ebx,ebx
c001d205:	eb 14                	jmp    c001d21b <Thr::loadDLL(char const*, bool)+0x21e>
c001d207:	83 ec 0c             	sub    esp,0xc
c001d20a:	68 a3 ba 02 c0       	push   0xc002baa3
c001d20f:	e8 1f cc ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c001d214:	83 c4 10             	add    esp,0x10
c001d217:	31 ed                	xor    ebp,ebp
c001d219:	eb bb                	jmp    c001d1d6 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d21b:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d221:	89 d8                	mov    eax,ebx
c001d223:	5b                   	pop    ebx
c001d224:	5e                   	pop    esi
c001d225:	5f                   	pop    edi
c001d226:	5d                   	pop    ebp
c001d227:	c3                   	ret    

c001d228 <Thr::executeDLL(unsigned long, void*)>:
c001d228:	56                   	push   esi
c001d229:	53                   	push   ebx
c001d22a:	52                   	push   edx
c001d22b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d22f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d233:	85 db                	test   ebx,ebx
c001d235:	75 10                	jne    c001d247 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d237:	83 ec 0c             	sub    esp,0xc
c001d23a:	68 bf ba 02 c0       	push   0xc002babf
c001d23f:	e8 ef cb ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c001d244:	83 c4 10             	add    esp,0x10
c001d247:	50                   	push   eax
c001d248:	50                   	push   eax
c001d249:	53                   	push   ebx
c001d24a:	68 e9 ba 02 c0       	push   0xc002bae9
c001d24f:	e8 73 54 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001d254:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d258:	89 d8                	mov    eax,ebx
c001d25a:	83 c4 14             	add    esp,0x14
c001d25d:	5b                   	pop    ebx
c001d25e:	5e                   	pop    esi
c001d25f:	ff e0                	jmp    eax
c001d261:	90                   	nop

c001d262 <userModeEntryPoint(void*)>:
c001d262:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001d267:	48                   	dec    eax
c001d268:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001d26d:	75 01                	jne    c001d270 <userModeEntryPoint(void*)+0xe>
c001d26f:	fb                   	sti    
c001d270:	fb                   	sti    
c001d271:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d276:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d279:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d27f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d283:	e9 a2 30 fe ff       	jmp    c000032a <goToUsermode>

c001d288 <changeTSS>:
c001d288:	83 ec 14             	sub    esp,0x14
c001d28b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d290:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d293:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d298:	c1 e2 15             	shl    edx,0x15
c001d29b:	29 d0                	sub    eax,edx
c001d29d:	50                   	push   eax
c001d29e:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c001d2a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2a9:	05 7c 11 00 00       	add    eax,0x117c
c001d2ae:	50                   	push   eax
c001d2af:	e8 bc 38 ff ff       	call   c0010b70 <TSS::setESP(unsigned long)>
c001d2b4:	83 c4 1c             	add    esp,0x1c
c001d2b7:	c3                   	ret    

c001d2b8 <switchToThread(ThreadControlBlock*)>:
c001d2b8:	57                   	push   edi
c001d2b9:	a1 24 0e 03 c0       	mov    eax,ds:0xc0030e24
c001d2be:	56                   	push   esi
c001d2bf:	85 c0                	test   eax,eax
c001d2c1:	53                   	push   ebx
c001d2c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d2c6:	0f 85 88 00 00 00    	jne    c001d354 <switchToThread(ThreadControlBlock*)+0x9c>
c001d2cc:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d2cf:	3c ff                	cmp    al,0xff
c001d2d1:	74 7d                	je     c001d350 <switchToThread(ThreadControlBlock*)+0x98>
c001d2d3:	0f b6 d0             	movzx  edx,al
c001d2d6:	b8 84 03 00 00       	mov    eax,0x384
c001d2db:	29 d0                	sub    eax,edx
c001d2dd:	c1 e0 10             	shl    eax,0x10
c001d2e0:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d2e3:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d2e6:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c001d2eb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2f1:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d2f8:	74 4a                	je     c001d344 <switchToThread(ThreadControlBlock*)+0x8c>
c001d2fa:	0f 31                	rdtsc  
c001d2fc:	a3 68 0e 03 c0       	mov    ds:0xc0030e68,eax
c001d301:	89 c6                	mov    esi,eax
c001d303:	89 d7                	mov    edi,edx
c001d305:	2b 35 58 0e 03 c0    	sub    esi,DWORD PTR ds:0xc0030e58
c001d30b:	89 15 6c 0e 03 c0    	mov    DWORD PTR ds:0xc0030e6c,edx
c001d311:	1b 3d 5c 0e 03 c0    	sbb    edi,DWORD PTR ds:0xc0030e5c
c001d317:	89 35 60 0e 03 c0    	mov    DWORD PTR ds:0xc0030e60,esi
c001d31d:	a3 58 0e 03 c0       	mov    ds:0xc0030e58,eax
c001d322:	89 3d 64 0e 03 c0    	mov    DWORD PTR ds:0xc0030e64,edi
c001d328:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d32e:	89 15 5c 0e 03 c0    	mov    DWORD PTR ds:0xc0030e5c,edx
c001d334:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d337:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d33a:	01 c6                	add    esi,eax
c001d33c:	11 d7                	adc    edi,edx
c001d33e:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d341:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d344:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d348:	5b                   	pop    ebx
c001d349:	5e                   	pop    esi
c001d34a:	5f                   	pop    edi
c001d34b:	e9 12 30 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d350:	31 c0                	xor    eax,eax
c001d352:	eb 8f                	jmp    c001d2e3 <switchToThread(ThreadControlBlock*)+0x2b>
c001d354:	5b                   	pop    ebx
c001d355:	c7 05 20 0e 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030e20,0x1
c001d35f:	5e                   	pop    esi
c001d360:	5f                   	pop    edi
c001d361:	c3                   	ret    

c001d362 <Process::addArgs(char**)>:
c001d362:	57                   	push   edi
c001d363:	56                   	push   esi
c001d364:	53                   	push   ebx
c001d365:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d369:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d36d:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d377:	85 ff                	test   edi,edi
c001d379:	74 3d                	je     c001d3b8 <Process::addArgs(char**)+0x56>
c001d37b:	8b 07                	mov    eax,DWORD PTR [edi]
c001d37d:	85 c0                	test   eax,eax
c001d37f:	74 37                	je     c001d3b8 <Process::addArgs(char**)+0x56>
c001d381:	31 db                	xor    ebx,ebx
c001d383:	83 ec 0c             	sub    esp,0xc
c001d386:	50                   	push   eax
c001d387:	e8 e0 33 fe ff       	call   c000076c <strlen>
c001d38c:	40                   	inc    eax
c001d38d:	89 04 24             	mov    DWORD PTR [esp],eax
c001d390:	e8 04 22 ff ff       	call   c000f599 <malloc>
c001d395:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d39c:	5a                   	pop    edx
c001d39d:	59                   	pop    ecx
c001d39e:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d3a1:	43                   	inc    ebx
c001d3a2:	50                   	push   eax
c001d3a3:	e8 64 34 fe ff       	call   c000080c <strcpy>
c001d3a8:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d3ae:	83 c4 10             	add    esp,0x10
c001d3b1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d3b4:	85 c0                	test   eax,eax
c001d3b6:	75 cb                	jne    c001d383 <Process::addArgs(char**)+0x21>
c001d3b8:	5b                   	pop    ebx
c001d3b9:	5e                   	pop    esi
c001d3ba:	5f                   	pop    edi
c001d3bb:	c3                   	ret    

c001d3bc <Process::Process(char const*, Process*, char**)>:
c001d3bc:	56                   	push   esi
c001d3bd:	53                   	push   ebx
c001d3be:	83 ec 14             	sub    esp,0x14
c001d3c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3c5:	05 0c 02 00 00       	add    eax,0x20c
c001d3ca:	bb 07 00 00 00       	mov    ebx,0x7
c001d3cf:	89 c6                	mov    esi,eax
c001d3d1:	85 db                	test   ebx,ebx
c001d3d3:	78 12                	js     c001d3e7 <Process::Process(char const*, Process*, char**)+0x2b>
c001d3d5:	83 ec 0c             	sub    esp,0xc
c001d3d8:	56                   	push   esi
c001d3d9:	e8 98 b6 00 00       	call   c0028a76 <ThreadControlBlock::ThreadControlBlock()>
c001d3de:	83 c4 10             	add    esp,0x10
c001d3e1:	83 c6 63             	add    esi,0x63
c001d3e4:	4b                   	dec    ebx
c001d3e5:	eb ea                	jmp    c001d3d1 <Process::Process(char const*, Process*, char**)+0x15>
c001d3e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3eb:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d3f2:	83 ec 0c             	sub    esp,0xc
c001d3f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3f9:	e8 be c8 ff ff       	call   c0019cbc <Krnl::newProcessEnv(Process*)>
c001d3fe:	83 c4 10             	add    esp,0x10
c001d401:	89 c2                	mov    edx,eax
c001d403:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d407:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d40d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d411:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d41a:	a1 90 ce 02 c0       	mov    eax,ds:0xc002ce90
c001d41f:	8d 50 01             	lea    edx,[eax+0x1]
c001d422:	89 15 90 ce 02 c0    	mov    DWORD PTR ds:0xc002ce90,edx
c001d428:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d42c:	89 02                	mov    DWORD PTR [edx],eax
c001d42e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d436:	83 ec 0c             	sub    esp,0xc
c001d439:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d43d:	e8 57 21 ff ff       	call   c000f599 <malloc>
c001d442:	83 c4 10             	add    esp,0x10
c001d445:	89 c3                	mov    ebx,eax
c001d447:	83 ec 08             	sub    esp,0x8
c001d44a:	6a 00                	push   0x0
c001d44c:	53                   	push   ebx
c001d44d:	e8 30 4a ff ff       	call   c0011e82 <VAS::VAS(bool)>
c001d452:	83 c4 10             	add    esp,0x10
c001d455:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d459:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d45f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d463:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d46d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d471:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d475:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d47b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d47f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d485:	85 c0                	test   eax,eax
c001d487:	74 42                	je     c001d4cb <Process::Process(char const*, Process*, char**)+0x10f>
c001d489:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d48d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d493:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d499:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d49d:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d4a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4a7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4ad:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d4b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4b7:	05 0c 01 00 00       	add    eax,0x10c
c001d4bc:	83 ec 08             	sub    esp,0x8
c001d4bf:	52                   	push   edx
c001d4c0:	50                   	push   eax
c001d4c1:	e8 46 33 fe ff       	call   c000080c <strcpy>
c001d4c6:	83 c4 10             	add    esp,0x10
c001d4c9:	eb 63                	jmp    c001d52e <Process::Process(char const*, Process*, char**)+0x172>
c001d4cb:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d4d3:	83 ec 0c             	sub    esp,0xc
c001d4d6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d4da:	e8 ba 20 ff ff       	call   c000f599 <malloc>
c001d4df:	83 c4 10             	add    esp,0x10
c001d4e2:	89 c3                	mov    ebx,eax
c001d4e4:	83 ec 08             	sub    esp,0x8
c001d4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4eb:	53                   	push   ebx
c001d4ec:	e8 93 33 ff ff       	call   c0010884 <VgaText::VgaText(char const*)>
c001d4f1:	83 c4 10             	add    esp,0x10
c001d4f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4f8:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d4fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d502:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d508:	83 ec 0c             	sub    esp,0xc
c001d50b:	50                   	push   eax
c001d50c:	e8 32 2b ff ff       	call   c0010043 <addToTerminalCycle(VgaText*)>
c001d511:	83 c4 10             	add    esp,0x10
c001d514:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d518:	05 0c 01 00 00       	add    eax,0x10c
c001d51d:	83 ec 08             	sub    esp,0x8
c001d520:	68 08 bb 02 c0       	push   0xc002bb08
c001d525:	50                   	push   eax
c001d526:	e8 e1 32 fe ff       	call   c000080c <strcpy>
c001d52b:	83 c4 10             	add    esp,0x10
c001d52e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d532:	83 c0 0c             	add    eax,0xc
c001d535:	83 ec 08             	sub    esp,0x8
c001d538:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d53c:	50                   	push   eax
c001d53d:	e8 ca 32 fe ff       	call   c000080c <strcpy>
c001d542:	83 c4 10             	add    esp,0x10
c001d545:	83 ec 08             	sub    esp,0x8
c001d548:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d54c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d550:	e8 0d fe ff ff       	call   c001d362 <Process::addArgs(char**)>
c001d555:	83 c4 10             	add    esp,0x10
c001d558:	83 ec 08             	sub    esp,0x8
c001d55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d55f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d563:	e8 a6 ed ff ff       	call   c001c30e <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d568:	83 c4 10             	add    esp,0x10
c001d56b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d56f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d573:	83 f0 01             	xor    eax,0x1
c001d576:	88 c2                	mov    dl,al
c001d578:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d57c:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d582:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d587:	83 ec 08             	sub    esp,0x8
c001d58a:	50                   	push   eax
c001d58b:	68 60 bb 02 c0       	push   0xc002bb60
c001d590:	e8 32 51 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001d595:	83 c4 10             	add    esp,0x10
c001d598:	90                   	nop
c001d599:	83 c4 14             	add    esp,0x14
c001d59c:	5b                   	pop    ebx
c001d59d:	5e                   	pop    esi
c001d59e:	c3                   	ret    
c001d59f:	90                   	nop

c001d5a0 <Process::Process(bool, char const*, Process*, char**)>:
c001d5a0:	56                   	push   esi
c001d5a1:	53                   	push   ebx
c001d5a2:	83 ec 24             	sub    esp,0x24
c001d5a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d5a9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d5ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5b1:	05 0c 02 00 00       	add    eax,0x20c
c001d5b6:	bb 07 00 00 00       	mov    ebx,0x7
c001d5bb:	89 c6                	mov    esi,eax
c001d5bd:	85 db                	test   ebx,ebx
c001d5bf:	78 12                	js     c001d5d3 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d5c1:	83 ec 0c             	sub    esp,0xc
c001d5c4:	56                   	push   esi
c001d5c5:	e8 ac b4 00 00       	call   c0028a76 <ThreadControlBlock::ThreadControlBlock()>
c001d5ca:	83 c4 10             	add    esp,0x10
c001d5cd:	83 c6 63             	add    esi,0x63
c001d5d0:	4b                   	dec    ebx
c001d5d1:	eb ea                	jmp    c001d5bd <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d5d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5d7:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d5de:	83 ec 0c             	sub    esp,0xc
c001d5e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d5e5:	e8 d2 c6 ff ff       	call   c0019cbc <Krnl::newProcessEnv(Process*)>
c001d5ea:	83 c4 10             	add    esp,0x10
c001d5ed:	89 c2                	mov    edx,eax
c001d5ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5f3:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d5f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5fd:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d606:	a1 90 ce 02 c0       	mov    eax,ds:0xc002ce90
c001d60b:	8d 50 01             	lea    edx,[eax+0x1]
c001d60e:	89 15 90 ce 02 c0    	mov    DWORD PTR ds:0xc002ce90,edx
c001d614:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d618:	89 02                	mov    DWORD PTR [edx],eax
c001d61a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d622:	83 ec 0c             	sub    esp,0xc
c001d625:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d629:	e8 6b 1f ff ff       	call   c000f599 <malloc>
c001d62e:	83 c4 10             	add    esp,0x10
c001d631:	89 c3                	mov    ebx,eax
c001d633:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d638:	83 ec 08             	sub    esp,0x8
c001d63b:	50                   	push   eax
c001d63c:	53                   	push   ebx
c001d63d:	e8 40 48 ff ff       	call   c0011e82 <VAS::VAS(bool)>
c001d642:	83 c4 10             	add    esp,0x10
c001d645:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d649:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d64f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d653:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d65d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d661:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d665:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d66b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d66f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d675:	85 c0                	test   eax,eax
c001d677:	74 42                	je     c001d6bb <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d679:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d67d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d683:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d689:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d68d:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d693:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d697:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d69d:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d6a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6a7:	05 0c 01 00 00       	add    eax,0x10c
c001d6ac:	83 ec 08             	sub    esp,0x8
c001d6af:	52                   	push   edx
c001d6b0:	50                   	push   eax
c001d6b1:	e8 56 31 fe ff       	call   c000080c <strcpy>
c001d6b6:	83 c4 10             	add    esp,0x10
c001d6b9:	eb 63                	jmp    c001d71e <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d6bb:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d6c3:	83 ec 0c             	sub    esp,0xc
c001d6c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d6ca:	e8 ca 1e ff ff       	call   c000f599 <malloc>
c001d6cf:	83 c4 10             	add    esp,0x10
c001d6d2:	89 c3                	mov    ebx,eax
c001d6d4:	83 ec 08             	sub    esp,0x8
c001d6d7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d6db:	53                   	push   ebx
c001d6dc:	e8 a3 31 ff ff       	call   c0010884 <VgaText::VgaText(char const*)>
c001d6e1:	83 c4 10             	add    esp,0x10
c001d6e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6e8:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d6ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6f2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d6f8:	83 ec 0c             	sub    esp,0xc
c001d6fb:	50                   	push   eax
c001d6fc:	e8 42 29 ff ff       	call   c0010043 <addToTerminalCycle(VgaText*)>
c001d701:	83 c4 10             	add    esp,0x10
c001d704:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d708:	05 0c 01 00 00       	add    eax,0x10c
c001d70d:	83 ec 08             	sub    esp,0x8
c001d710:	68 08 bb 02 c0       	push   0xc002bb08
c001d715:	50                   	push   eax
c001d716:	e8 f1 30 fe ff       	call   c000080c <strcpy>
c001d71b:	83 c4 10             	add    esp,0x10
c001d71e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d722:	83 c0 0c             	add    eax,0xc
c001d725:	83 ec 08             	sub    esp,0x8
c001d728:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d72c:	50                   	push   eax
c001d72d:	e8 da 30 fe ff       	call   c000080c <strcpy>
c001d732:	83 c4 10             	add    esp,0x10
c001d735:	83 ec 08             	sub    esp,0x8
c001d738:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d73c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d740:	e8 1d fc ff ff       	call   c001d362 <Process::addArgs(char**)>
c001d745:	83 c4 10             	add    esp,0x10
c001d748:	90                   	nop
c001d749:	83 c4 24             	add    esp,0x24
c001d74c:	5b                   	pop    ebx
c001d74d:	5e                   	pop    esi
c001d74e:	c3                   	ret    

c001d74f <taskStartupFunction>:
c001d74f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d754:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d757:	c3                   	ret    

c001d758 <Semaphore::Semaphore(int)>:
c001d758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d75c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d760:	89 10                	mov    DWORD PTR [eax],edx
c001d762:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d766:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d76d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d771:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d77c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d783:	90                   	nop
c001d784:	c3                   	ret    
c001d785:	90                   	nop

c001d786 <Mutex::Mutex()>:
c001d786:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d78a:	6a 01                	push   0x1
c001d78c:	50                   	push   eax
c001d78d:	e8 c6 ff ff ff       	call   c001d758 <Semaphore::Semaphore(int)>
c001d792:	83 c4 08             	add    esp,0x8
c001d795:	90                   	nop
c001d796:	c3                   	ret    
c001d797:	90                   	nop

c001d798 <Process::createThread(void (*)(void*), void*, int)>:
c001d798:	55                   	push   ebp
c001d799:	31 c9                	xor    ecx,ecx
c001d79b:	57                   	push   edi
c001d79c:	56                   	push   esi
c001d79d:	53                   	push   ebx
c001d79e:	83 ec 1c             	sub    esp,0x1c
c001d7a1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d7a5:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d7ac:	89 f2                	mov    edx,esi
c001d7ae:	0f b7 c2             	movzx  eax,dx
c001d7b1:	83 e2 01             	and    edx,0x1
c001d7b4:	74 16                	je     c001d7cc <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d7b6:	d1 f8                	sar    eax,1
c001d7b8:	41                   	inc    ecx
c001d7b9:	89 c2                	mov    edx,eax
c001d7bb:	83 f9 10             	cmp    ecx,0x10
c001d7be:	75 ee                	jne    c001d7ae <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d7c0:	83 c4 1c             	add    esp,0x1c
c001d7c3:	31 db                	xor    ebx,ebx
c001d7c5:	89 d8                	mov    eax,ebx
c001d7c7:	5b                   	pop    ebx
c001d7c8:	5e                   	pop    esi
c001d7c9:	5f                   	pop    edi
c001d7ca:	5d                   	pop    ebp
c001d7cb:	c3                   	ret    
c001d7cc:	b8 01 00 00 00       	mov    eax,0x1
c001d7d1:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d7d4:	d3 e0                	shl    eax,cl
c001d7d6:	09 c6                	or     esi,eax
c001d7d8:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d7db:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d7e2:	89 c6                	mov    esi,eax
c001d7e4:	c1 e6 05             	shl    esi,0x5
c001d7e7:	01 f0                	add    eax,esi
c001d7e9:	01 d8                	add    eax,ebx
c001d7eb:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d7f2:	75 0a                	jne    c001d7fe <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d7f4:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d7fe:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d804:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d808:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d80b:	01 ca                	add    edx,ecx
c001d80d:	83 ec 08             	sub    esp,0x8
c001d810:	89 d0                	mov    eax,edx
c001d812:	c1 e0 05             	shl    eax,0x5
c001d815:	01 d0                	add    eax,edx
c001d817:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d81b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d81f:	01 d8                	add    eax,ebx
c001d821:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d827:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d82d:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d833:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d839:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d83f:	89 cd                	mov    ebp,ecx
c001d841:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d845:	f7 dd                	neg    ebp
c001d847:	c1 e5 15             	shl    ebp,0x15
c001d84a:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d850:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d856:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d860:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d866:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d870:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d87a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d87e:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d885:	53                   	push   ebx
c001d886:	68 44 0e 03 c0       	push   0xc0030e44
c001d88b:	e8 a0 af 00 00       	call   c0028830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d890:	89 d8                	mov    eax,ebx
c001d892:	83 c4 10             	add    esp,0x10
c001d895:	83 c4 1c             	add    esp,0x1c
c001d898:	5b                   	pop    ebx
c001d899:	5e                   	pop    esi
c001d89a:	5f                   	pop    edi
c001d89b:	5d                   	pop    ebp
c001d89c:	c3                   	ret    
c001d89d:	90                   	nop

c001d89e <Process::createUserThread()>:
c001d89e:	83 ec 0c             	sub    esp,0xc
c001d8a1:	68 80 00 00 00       	push   0x80
c001d8a6:	6a 00                	push   0x0
c001d8a8:	68 62 d2 01 c0       	push   0xc001d262
c001d8ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d8b1:	e8 e2 fe ff ff       	call   c001d798 <Process::createThread(void (*)(void*), void*, int)>
c001d8b6:	83 c4 1c             	add    esp,0x1c
c001d8b9:	c3                   	ret    

c001d8ba <setupMultitasking(void (*)())>:
c001d8ba:	56                   	push   esi
c001d8bb:	53                   	push   ebx
c001d8bc:	51                   	push   ecx
c001d8bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d8c1:	eb 10                	jmp    c001d8d3 <setupMultitasking(void (*)())+0x19>
c001d8c3:	83 ec 0c             	sub    esp,0xc
c001d8c6:	68 44 0e 03 c0       	push   0xc0030e44
c001d8cb:	e8 b2 ae 00 00       	call   c0028782 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d8d0:	83 c4 10             	add    esp,0x10
c001d8d3:	83 ec 0c             	sub    esp,0xc
c001d8d6:	68 44 0e 03 c0       	push   0xc0030e44
c001d8db:	e8 7e ae 00 00       	call   c002875e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d8e0:	83 c4 10             	add    esp,0x10
c001d8e3:	84 c0                	test   al,al
c001d8e5:	74 dc                	je     c001d8c3 <setupMultitasking(void (*)())+0x9>
c001d8e7:	83 ec 0c             	sub    esp,0xc
c001d8ea:	68 3f 07 00 00       	push   0x73f
c001d8ef:	e8 a5 1c ff ff       	call   c000f599 <malloc>
c001d8f4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d8fb:	89 c3                	mov    ebx,eax
c001d8fd:	6a 00                	push   0x0
c001d8ff:	68 0c bb 02 c0       	push   0xc002bb0c
c001d904:	6a 01                	push   0x1
c001d906:	50                   	push   eax
c001d907:	e8 94 fc ff ff       	call   c001d5a0 <Process::Process(bool, char const*, Process*, char**)>
c001d90c:	83 c4 14             	add    esp,0x14
c001d90f:	89 1d 50 0e 03 c0    	mov    DWORD PTR ds:0xc0030e50,ebx
c001d915:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d91b:	e8 31 2a ff ff       	call   c0010351 <setActiveTerminal(VgaText*)>
c001d920:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d928:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001d932:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d938:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d93b:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d945:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d94b:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d951:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d95b:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d965:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d96f:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d975:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d97f:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d985:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d98f:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d995:	58                   	pop    eax
c001d996:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d99c:	5a                   	pop    edx
c001d99d:	68 08 bb 02 c0       	push   0xc002bb08
c001d9a2:	50                   	push   eax
c001d9a3:	e8 64 2e fe ff       	call   c000080c <strcpy>
c001d9a8:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d9af:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d9b3:	83 c4 14             	add    esp,0x14
c001d9b6:	5b                   	pop    ebx
c001d9b7:	5e                   	pop    esi
c001d9b8:	e9 97 29 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d9bd <schedule()>:
c001d9bd:	a1 24 0e 03 c0       	mov    eax,ds:0xc0030e24
c001d9c2:	85 c0                	test   eax,eax
c001d9c4:	74 0b                	je     c001d9d1 <schedule()+0x14>
c001d9c6:	c7 05 20 0e 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030e20,0x1
c001d9d0:	c3                   	ret    
c001d9d1:	53                   	push   ebx
c001d9d2:	83 ec 14             	sub    esp,0x14
c001d9d5:	68 44 0e 03 c0       	push   0xc0030e44
c001d9da:	e8 7f ad 00 00       	call   c002875e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d9df:	83 c4 10             	add    esp,0x10
c001d9e2:	84 c0                	test   al,al
c001d9e4:	75 38                	jne    c001da1e <schedule()+0x61>
c001d9e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9eb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d9ee:	4a                   	dec    edx
c001d9ef:	74 32                	je     c001da23 <schedule()+0x66>
c001d9f1:	83 ec 0c             	sub    esp,0xc
c001d9f4:	68 44 0e 03 c0       	push   0xc0030e44
c001d9f9:	e8 7c ad 00 00       	call   c002877a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d9fe:	c7 04 24 44 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e44
c001da05:	89 c3                	mov    ebx,eax
c001da07:	e8 76 ad 00 00       	call   c0028782 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001da0c:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001da13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da16:	e8 9d f8 ff ff       	call   c001d2b8 <switchToThread(ThreadControlBlock*)>
c001da1b:	83 c4 10             	add    esp,0x10
c001da1e:	83 c4 08             	add    esp,0x8
c001da21:	5b                   	pop    ebx
c001da22:	c3                   	ret    
c001da23:	83 ec 08             	sub    esp,0x8
c001da26:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001da2d:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001da33:	68 44 0e 03 c0       	push   0xc0030e44
c001da38:	e8 f3 ad 00 00       	call   c0028830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da3d:	83 c4 10             	add    esp,0x10
c001da40:	eb af                	jmp    c001d9f1 <schedule()+0x34>

c001da42 <Semaphore::tryAcquire()>:
c001da42:	53                   	push   ebx
c001da43:	83 ec 08             	sub    esp,0x8
c001da46:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da4a:	fa                   	cli    
c001da4b:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001da50:	8d 50 01             	lea    edx,[eax+0x1]
c001da53:	89 15 28 0e 03 c0    	mov    DWORD PTR ds:0xc0030e28,edx
c001da59:	8b 15 24 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030e24
c001da5f:	8d 5a 01             	lea    ebx,[edx+0x1]
c001da62:	89 1d 24 0e 03 c0    	mov    DWORD PTR ds:0xc0030e24,ebx
c001da68:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001da6b:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001da6d:	7c 2a                	jl     c001da99 <Semaphore::tryAcquire()+0x57>
c001da6f:	89 15 24 0e 03 c0    	mov    DWORD PTR ds:0xc0030e24,edx
c001da75:	85 d2                	test   edx,edx
c001da77:	75 0a                	jne    c001da83 <Semaphore::tryAcquire()+0x41>
c001da79:	8b 15 20 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030e20
c001da7f:	85 d2                	test   edx,edx
c001da81:	75 5b                	jne    c001dade <Semaphore::tryAcquire()+0x9c>
c001da83:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001da88:	85 c0                	test   eax,eax
c001da8a:	74 07                	je     c001da93 <Semaphore::tryAcquire()+0x51>
c001da8c:	31 c0                	xor    eax,eax
c001da8e:	83 c4 08             	add    esp,0x8
c001da91:	5b                   	pop    ebx
c001da92:	c3                   	ret    
c001da93:	fb                   	sti    
c001da94:	83 c4 08             	add    esp,0x8
c001da97:	5b                   	pop    ebx
c001da98:	c3                   	ret    
c001da99:	43                   	inc    ebx
c001da9a:	89 15 24 0e 03 c0    	mov    DWORD PTR ds:0xc0030e24,edx
c001daa0:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001daa3:	85 d2                	test   edx,edx
c001daa5:	75 1f                	jne    c001dac6 <Semaphore::tryAcquire()+0x84>
c001daa7:	8b 0d 20 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030e20
c001daad:	85 c9                	test   ecx,ecx
c001daaf:	74 15                	je     c001dac6 <Semaphore::tryAcquire()+0x84>
c001dab1:	c7 05 20 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e20,0x0
c001dabb:	e8 fd fe ff ff       	call   c001d9bd <schedule()>
c001dac0:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001dac5:	48                   	dec    eax
c001dac6:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001dacb:	85 c0                	test   eax,eax
c001dacd:	75 08                	jne    c001dad7 <Semaphore::tryAcquire()+0x95>
c001dacf:	fb                   	sti    
c001dad0:	b0 01                	mov    al,0x1
c001dad2:	83 c4 08             	add    esp,0x8
c001dad5:	5b                   	pop    ebx
c001dad6:	c3                   	ret    
c001dad7:	b0 01                	mov    al,0x1
c001dad9:	83 c4 08             	add    esp,0x8
c001dadc:	5b                   	pop    ebx
c001dadd:	c3                   	ret    
c001dade:	c7 05 20 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e20,0x0
c001dae8:	e8 d0 fe ff ff       	call   c001d9bd <schedule()>
c001daed:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001daf2:	48                   	dec    eax
c001daf3:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001daf8:	85 c0                	test   eax,eax
c001dafa:	75 90                	jne    c001da8c <Semaphore::tryAcquire()+0x4a>
c001dafc:	eb 95                	jmp    c001da93 <Semaphore::tryAcquire()+0x51>

c001dafe <Semaphore::assertLocked(char const*)>:
c001dafe:	83 ec 0c             	sub    esp,0xc
c001db01:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db05:	fa                   	cli    
c001db06:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c001db0c:	a1 24 0e 03 c0       	mov    eax,ds:0xc0030e24
c001db11:	8d 48 01             	lea    ecx,[eax+0x1]
c001db14:	89 0d 24 0e 03 c0    	mov    DWORD PTR ds:0xc0030e24,ecx
c001db1a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001db1c:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001db1f:	7c 24                	jl     c001db45 <Semaphore::assertLocked(char const*)+0x47>
c001db21:	a3 24 0e 03 c0       	mov    ds:0xc0030e24,eax
c001db26:	85 c0                	test   eax,eax
c001db28:	75 09                	jne    c001db33 <Semaphore::assertLocked(char const*)+0x35>
c001db2a:	a1 20 0e 03 c0       	mov    eax,ds:0xc0030e20
c001db2f:	85 c0                	test   eax,eax
c001db31:	75 29                	jne    c001db5c <Semaphore::assertLocked(char const*)+0x5e>
c001db33:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001db38:	48                   	dec    eax
c001db39:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001db3e:	75 01                	jne    c001db41 <Semaphore::assertLocked(char const*)+0x43>
c001db40:	fb                   	sti    
c001db41:	83 c4 0c             	add    esp,0xc
c001db44:	c3                   	ret    
c001db45:	83 ec 0c             	sub    esp,0xc
c001db48:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001db4c:	e8 e2 c2 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c001db51:	a1 24 0e 03 c0       	mov    eax,ds:0xc0030e24
c001db56:	83 c4 10             	add    esp,0x10
c001db59:	48                   	dec    eax
c001db5a:	eb c5                	jmp    c001db21 <Semaphore::assertLocked(char const*)+0x23>
c001db5c:	c7 05 20 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e20,0x0
c001db66:	e8 52 fe ff ff       	call   c001d9bd <schedule()>
c001db6b:	eb c6                	jmp    c001db33 <Semaphore::assertLocked(char const*)+0x35>

c001db6d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001db6d:	83 ec 0c             	sub    esp,0xc
c001db70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db79:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001db7c:	e8 3c fe ff ff       	call   c001d9bd <schedule()>
c001db81:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001db86:	48                   	dec    eax
c001db87:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001db8c:	75 01                	jne    c001db8f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001db8e:	fb                   	sti    
c001db8f:	83 c4 0c             	add    esp,0xc
c001db92:	c3                   	ret    

c001db93 <blockTask(TaskState)>:
c001db93:	83 ec 0c             	sub    esp,0xc
c001db96:	fa                   	cli    
c001db97:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c001db9d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dba1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dba6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dba9:	e8 0f fe ff ff       	call   c001d9bd <schedule()>
c001dbae:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001dbb3:	48                   	dec    eax
c001dbb4:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001dbb9:	75 01                	jne    c001dbbc <blockTask(TaskState)+0x29>
c001dbbb:	fb                   	sti    
c001dbbc:	83 c4 0c             	add    esp,0xc
c001dbbf:	c3                   	ret    

c001dbc0 <waitTask(int, int*, int)>:
c001dbc0:	83 ec 18             	sub    esp,0x18
c001dbc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbc8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dbcc:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dbcf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dbd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbd8:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001dbdb:	6a 07                	push   0x7
c001dbdd:	e8 b1 ff ff ff       	call   c001db93 <blockTask(TaskState)>
c001dbe2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbe7:	83 c4 10             	add    esp,0x10
c001dbea:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001dbed:	85 d2                	test   edx,edx
c001dbef:	74 0a                	je     c001dbfb <waitTask(int, int*, int)+0x3b>
c001dbf1:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001dbf4:	89 02                	mov    DWORD PTR [edx],eax
c001dbf6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbfb:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dbfe:	83 c4 0c             	add    esp,0xc
c001dc01:	c3                   	ret    

c001dc02 <nanoSleepUntil(unsigned long long)>:
c001dc02:	83 ec 0c             	sub    esp,0xc
c001dc05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc09:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc0d:	3b 05 70 df 02 c0    	cmp    eax,DWORD PTR ds:0xc002df70
c001dc13:	89 d1                	mov    ecx,edx
c001dc15:	1b 0d 74 df 02 c0    	sbb    ecx,DWORD PTR ds:0xc002df74
c001dc1b:	73 04                	jae    c001dc21 <nanoSleepUntil(unsigned long long)+0x1f>
c001dc1d:	83 c4 0c             	add    esp,0xc
c001dc20:	c3                   	ret    
c001dc21:	fa                   	cli    
c001dc22:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c001dc28:	83 ec 08             	sub    esp,0x8
c001dc2b:	ff 05 24 0e 03 c0    	inc    DWORD PTR ds:0xc0030e24
c001dc31:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dc37:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001dc3a:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001dc3d:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dc43:	68 38 0e 03 c0       	push   0xc0030e38
c001dc48:	e8 e3 ab 00 00       	call   c0028830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dc4d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001dc54:	e8 3a ff ff ff       	call   c001db93 <blockTask(TaskState)>
c001dc59:	a1 24 0e 03 c0       	mov    eax,ds:0xc0030e24
c001dc5e:	83 c4 10             	add    esp,0x10
c001dc61:	48                   	dec    eax
c001dc62:	a3 24 0e 03 c0       	mov    ds:0xc0030e24,eax
c001dc67:	85 c0                	test   eax,eax
c001dc69:	75 09                	jne    c001dc74 <nanoSleepUntil(unsigned long long)+0x72>
c001dc6b:	a1 20 0e 03 c0       	mov    eax,ds:0xc0030e20
c001dc70:	85 c0                	test   eax,eax
c001dc72:	75 12                	jne    c001dc86 <nanoSleepUntil(unsigned long long)+0x84>
c001dc74:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001dc79:	48                   	dec    eax
c001dc7a:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001dc7f:	75 9c                	jne    c001dc1d <nanoSleepUntil(unsigned long long)+0x1b>
c001dc81:	fb                   	sti    
c001dc82:	83 c4 0c             	add    esp,0xc
c001dc85:	c3                   	ret    
c001dc86:	c7 05 20 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e20,0x0
c001dc90:	e8 28 fd ff ff       	call   c001d9bd <schedule()>
c001dc95:	eb dd                	jmp    c001dc74 <nanoSleepUntil(unsigned long long)+0x72>

c001dc97 <nanoSleep(unsigned long long)>:
c001dc97:	a1 70 df 02 c0       	mov    eax,ds:0xc002df70
c001dc9c:	8b 15 74 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df74
c001dca2:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dca6:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dcaa:	e9 53 ff ff ff       	jmp    c001dc02 <nanoSleepUntil(unsigned long long)>

c001dcaf <sleep(unsigned long long)>:
c001dcaf:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dcb7:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dcbc:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dcc0:	01 ca                	add    edx,ecx
c001dcc2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dcc6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dcca:	eb cb                	jmp    c001dc97 <nanoSleep(unsigned long long)>

c001dccc <Semaphore::acquire()>:
c001dccc:	83 ec 0c             	sub    esp,0xc
c001dccf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dcd3:	fa                   	cli    
c001dcd4:	a1 24 0e 03 c0       	mov    eax,ds:0xc0030e24
c001dcd9:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c001dcdf:	8d 48 01             	lea    ecx,[eax+0x1]
c001dce2:	89 0d 24 0e 03 c0    	mov    DWORD PTR ds:0xc0030e24,ecx
c001dce8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001dceb:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001dced:	7d 28                	jge    c001dd17 <Semaphore::acquire()+0x4b>
c001dcef:	41                   	inc    ecx
c001dcf0:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001dcf3:	a3 24 0e 03 c0       	mov    ds:0xc0030e24,eax
c001dcf8:	85 c0                	test   eax,eax
c001dcfa:	75 09                	jne    c001dd05 <Semaphore::acquire()+0x39>
c001dcfc:	a1 20 0e 03 c0       	mov    eax,ds:0xc0030e20
c001dd01:	85 c0                	test   eax,eax
c001dd03:	75 4e                	jne    c001dd53 <Semaphore::acquire()+0x87>
c001dd05:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001dd0a:	48                   	dec    eax
c001dd0b:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001dd10:	75 01                	jne    c001dd13 <Semaphore::acquire()+0x47>
c001dd12:	fb                   	sti    
c001dd13:	83 c4 0c             	add    esp,0xc
c001dd16:	c3                   	ret    
c001dd17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd1c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001dd23:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001dd26:	85 c9                	test   ecx,ecx
c001dd28:	74 3a                	je     c001dd64 <Semaphore::acquire()+0x98>
c001dd2a:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001dd2d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dd33:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001dd36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd3b:	83 ec 0c             	sub    esp,0xc
c001dd3e:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001dd41:	6a 05                	push   0x5
c001dd43:	e8 4b fe ff ff       	call   c001db93 <blockTask(TaskState)>
c001dd48:	a1 24 0e 03 c0       	mov    eax,ds:0xc0030e24
c001dd4d:	83 c4 10             	add    esp,0x10
c001dd50:	48                   	dec    eax
c001dd51:	eb a0                	jmp    c001dcf3 <Semaphore::acquire()+0x27>
c001dd53:	c7 05 20 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e20,0x0
c001dd5d:	e8 5b fc ff ff       	call   c001d9bd <schedule()>
c001dd62:	eb a1                	jmp    c001dd05 <Semaphore::acquire()+0x39>
c001dd64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd69:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001dd6c:	eb c8                	jmp    c001dd36 <Semaphore::acquire()+0x6a>

c001dd6e <taskReturned>:
c001dd6e:	83 ec 18             	sub    esp,0x18
c001dd71:	68 88 bb 02 c0       	push   0xc002bb88
c001dd76:	e8 b8 c0 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c001dd7b:	83 c4 10             	add    esp,0x10
c001dd7e:	83 ec 0c             	sub    esp,0xc
c001dd81:	6a 02                	push   0x2
c001dd83:	e8 0b fe ff ff       	call   c001db93 <blockTask(TaskState)>
c001dd88:	fa                   	cli    
c001dd89:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c001dd8f:	e8 29 fc ff ff       	call   c001d9bd <schedule()>
c001dd94:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001dd99:	83 c4 10             	add    esp,0x10
c001dd9c:	48                   	dec    eax
c001dd9d:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001dda2:	85 c0                	test   eax,eax
c001dda4:	75 d8                	jne    c001dd7e <taskReturned+0x10>
c001dda6:	fb                   	sti    
c001dda7:	eb d5                	jmp    c001dd7e <taskReturned+0x10>

c001dda9 <Thr::processFromPID(int)>:
c001dda9:	57                   	push   edi
c001ddaa:	56                   	push   esi
c001ddab:	53                   	push   ebx
c001ddac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ddb0:	fa                   	cli    
c001ddb1:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c001ddb7:	83 ec 0c             	sub    esp,0xc
c001ddba:	68 44 0e 03 c0       	push   0xc0030e44
c001ddbf:	e8 b6 a9 00 00       	call   c002877a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddc4:	83 c4 10             	add    esp,0x10
c001ddc7:	89 c7                	mov    edi,eax
c001ddc9:	eb 14                	jmp    c001dddf <Thr::processFromPID(int)+0x36>
c001ddcb:	83 ec 0c             	sub    esp,0xc
c001ddce:	68 44 0e 03 c0       	push   0xc0030e44
c001ddd3:	e8 a2 a9 00 00       	call   c002877a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddd8:	83 c4 10             	add    esp,0x10
c001dddb:	39 f8                	cmp    eax,edi
c001dddd:	74 49                	je     c001de28 <Thr::processFromPID(int)+0x7f>
c001dddf:	83 ec 0c             	sub    esp,0xc
c001dde2:	68 44 0e 03 c0       	push   0xc0030e44
c001dde7:	e8 8e a9 00 00       	call   c002877a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddec:	c7 04 24 44 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e44
c001ddf3:	89 c3                	mov    ebx,eax
c001ddf5:	e8 88 a9 00 00       	call   c0028782 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ddfa:	58                   	pop    eax
c001ddfb:	5a                   	pop    edx
c001ddfc:	53                   	push   ebx
c001ddfd:	68 44 0e 03 c0       	push   0xc0030e44
c001de02:	e8 29 aa 00 00       	call   c0028830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de07:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de0a:	83 c4 10             	add    esp,0x10
c001de0d:	39 30                	cmp    DWORD PTR [eax],esi
c001de0f:	75 ba                	jne    c001ddcb <Thr::processFromPID(int)+0x22>
c001de11:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001de16:	48                   	dec    eax
c001de17:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001de1c:	74 07                	je     c001de25 <Thr::processFromPID(int)+0x7c>
c001de1e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de21:	5b                   	pop    ebx
c001de22:	5e                   	pop    esi
c001de23:	5f                   	pop    edi
c001de24:	c3                   	ret    
c001de25:	fb                   	sti    
c001de26:	eb f6                	jmp    c001de1e <Thr::processFromPID(int)+0x75>
c001de28:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001de2d:	48                   	dec    eax
c001de2e:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001de33:	75 05                	jne    c001de3a <Thr::processFromPID(int)+0x91>
c001de35:	fb                   	sti    
c001de36:	5b                   	pop    ebx
c001de37:	5e                   	pop    esi
c001de38:	5f                   	pop    edi
c001de39:	c3                   	ret    
c001de3a:	5b                   	pop    ebx
c001de3b:	31 c0                	xor    eax,eax
c001de3d:	5e                   	pop    esi
c001de3e:	5f                   	pop    edi
c001de3f:	c3                   	ret    

c001de40 <unblockTask(ThreadControlBlock*)>:
c001de40:	53                   	push   ebx
c001de41:	83 ec 08             	sub    esp,0x8
c001de44:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de48:	fa                   	cli    
c001de49:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c001de4f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001de52:	85 c0                	test   eax,eax
c001de54:	74 5a                	je     c001deb0 <unblockTask(ThreadControlBlock*)+0x70>
c001de56:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001de59:	48                   	dec    eax
c001de5a:	74 31                	je     c001de8d <unblockTask(ThreadControlBlock*)+0x4d>
c001de5c:	83 ec 0c             	sub    esp,0xc
c001de5f:	68 44 0e 03 c0       	push   0xc0030e44
c001de64:	e8 11 a9 00 00       	call   c002877a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de69:	83 c4 10             	add    esp,0x10
c001de6c:	85 c0                	test   eax,eax
c001de6e:	75 17                	jne    c001de87 <unblockTask(ThreadControlBlock*)+0x47>
c001de70:	eb 50                	jmp    c001dec2 <unblockTask(ThreadControlBlock*)+0x82>
c001de72:	83 ec 08             	sub    esp,0x8
c001de75:	50                   	push   eax
c001de76:	68 44 0e 03 c0       	push   0xc0030e44
c001de7b:	e8 82 ac 00 00       	call   c0028b02 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001de80:	83 c4 10             	add    esp,0x10
c001de83:	85 c0                	test   eax,eax
c001de85:	74 3b                	je     c001dec2 <unblockTask(ThreadControlBlock*)+0x82>
c001de87:	39 c3                	cmp    ebx,eax
c001de89:	75 e7                	jne    c001de72 <unblockTask(ThreadControlBlock*)+0x32>
c001de8b:	eb 10                	jmp    c001de9d <unblockTask(ThreadControlBlock*)+0x5d>
c001de8d:	83 ec 0c             	sub    esp,0xc
c001de90:	68 2a bb 02 c0       	push   0xc002bb2a
c001de95:	e8 2d 48 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001de9a:	83 c4 10             	add    esp,0x10
c001de9d:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001dea2:	48                   	dec    eax
c001dea3:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001dea8:	75 01                	jne    c001deab <unblockTask(ThreadControlBlock*)+0x6b>
c001deaa:	fb                   	sti    
c001deab:	83 c4 08             	add    esp,0x8
c001deae:	5b                   	pop    ebx
c001deaf:	c3                   	ret    
c001deb0:	83 ec 0c             	sub    esp,0xc
c001deb3:	68 13 bb 02 c0       	push   0xc002bb13
c001deb8:	e8 0a 48 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001debd:	83 c4 10             	add    esp,0x10
c001dec0:	eb db                	jmp    c001de9d <unblockTask(ThreadControlBlock*)+0x5d>
c001dec2:	83 ec 08             	sub    esp,0x8
c001dec5:	53                   	push   ebx
c001dec6:	68 44 0e 03 c0       	push   0xc0030e44
c001decb:	e8 60 a9 00 00       	call   c0028830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ded0:	83 c4 10             	add    esp,0x10
c001ded3:	eb c8                	jmp    c001de9d <unblockTask(ThreadControlBlock*)+0x5d>

c001ded5 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001ded5:	55                   	push   ebp
c001ded6:	57                   	push   edi
c001ded7:	56                   	push   esi
c001ded8:	53                   	push   ebx
c001ded9:	83 ec 1c             	sub    esp,0x1c
c001dedc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dee0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dee3:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001dee9:	85 ff                	test   edi,edi
c001deeb:	7e 20                	jle    c001df0d <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001deed:	31 f6                	xor    esi,esi
c001deef:	83 ec 0c             	sub    esp,0xc
c001def2:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001def9:	46                   	inc    esi
c001defa:	e8 aa 16 ff ff       	call   c000f5a9 <free>
c001deff:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df02:	83 c4 10             	add    esp,0x10
c001df05:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001df0b:	7f e2                	jg     c001deef <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001df0d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001df17:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001df1c:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001df1f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001df22:	d3 c0                	rol    eax,cl
c001df24:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001df2b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df2e:	89 f7                	mov    edi,esi
c001df30:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001df38:	0f 85 64 01 00 00    	jne    c001e0a2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001df3e:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001df44:	85 ed                	test   ebp,ebp
c001df46:	74 1b                	je     c001df63 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001df48:	83 ec 0c             	sub    esp,0xc
c001df4b:	55                   	push   ebp
c001df4c:	e8 87 bc ff ff       	call   c0019bd8 <EnvVarContainer::~EnvVarContainer()>
c001df51:	59                   	pop    ecx
c001df52:	5e                   	pop    esi
c001df53:	6a 0c                	push   0xc
c001df55:	55                   	push   ebp
c001df56:	e8 94 46 ff ff       	call   c00125ef <operator delete(void*, unsigned long)>
c001df5b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df5e:	83 c4 10             	add    esp,0x10
c001df61:	89 f7                	mov    edi,esi
c001df63:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001df69:	85 c0                	test   eax,eax
c001df6b:	0f 84 aa 00 00 00    	je     c001e01b <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001df71:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001df74:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001df78:	31 c9                	xor    ecx,ecx
c001df7a:	eb 10                	jmp    c001df8c <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001df7c:	41                   	inc    ecx
c001df7d:	83 f9 10             	cmp    ecx,0x10
c001df80:	0f 84 95 00 00 00    	je     c001e01b <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001df86:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001df8c:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001df93:	d3 fa                	sar    edx,cl
c001df95:	83 e2 01             	and    edx,0x1
c001df98:	74 e2                	je     c001df7c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001df9a:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001df9d:	01 ca                	add    edx,ecx
c001df9f:	89 d5                	mov    ebp,edx
c001dfa1:	c1 e5 05             	shl    ebp,0x5
c001dfa4:	01 ea                	add    edx,ebp
c001dfa6:	01 d0                	add    eax,edx
c001dfa8:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001dfae:	83 fd 07             	cmp    ebp,0x7
c001dfb1:	75 c9                	jne    c001df7c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfb3:	05 40 02 00 00       	add    eax,0x240
c001dfb8:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001dfbb:	83 fd ff             	cmp    ebp,0xffffffff
c001dfbe:	0f 8c e6 00 00 00    	jl     c001e0aa <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001dfc4:	0f 84 97 01 00 00    	je     c001e161 <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001dfca:	85 ed                	test   ebp,ebp
c001dfcc:	0f 84 7e 01 00 00    	je     c001e150 <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001dfd2:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001dfd4:	75 a6                	jne    c001df7c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfd6:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dfdc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dfe0:	01 d0                	add    eax,edx
c001dfe2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001dfe6:	83 ec 0c             	sub    esp,0xc
c001dfe9:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001dfef:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dff2:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dff8:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001dfff:	50                   	push   eax
c001e000:	e8 3b fe ff ff       	call   c001de40 <unblockTask(ThreadControlBlock*)>
c001e005:	83 c4 10             	add    esp,0x10
c001e008:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e00b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e00f:	89 f7                	mov    edi,esi
c001e011:	41                   	inc    ecx
c001e012:	83 f9 10             	cmp    ecx,0x10
c001e015:	0f 85 6b ff ff ff    	jne    c001df86 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e01b:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e021:	85 c0                	test   eax,eax
c001e023:	74 5d                	je     c001e082 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e025:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e02b:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e031:	74 4f                	je     c001e082 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e033:	83 ec 0c             	sub    esp,0xc
c001e036:	68 44 0e 03 c0       	push   0xc0030e44
c001e03b:	e8 3a a7 00 00       	call   c002877a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e040:	c7 04 24 44 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e44
c001e047:	89 c7                	mov    edi,eax
c001e049:	e8 10 a7 00 00       	call   c002875e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e04e:	83 c4 10             	add    esp,0x10
c001e051:	84 c0                	test   al,al
c001e053:	0f 84 c2 00 00 00    	je     c001e11b <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e059:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e05c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e062:	85 d2                	test   edx,edx
c001e064:	74 0f                	je     c001e075 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e066:	83 ec 0c             	sub    esp,0xc
c001e069:	8b 02                	mov    eax,DWORD PTR [edx]
c001e06b:	52                   	push   edx
c001e06c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e06f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e072:	83 c4 10             	add    esp,0x10
c001e075:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e07f:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e082:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e088:	85 db                	test   ebx,ebx
c001e08a:	74 16                	je     c001e0a2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e08c:	83 ec 0c             	sub    esp,0xc
c001e08f:	53                   	push   ebx
c001e090:	e8 c7 37 ff ff       	call   c001185c <VAS::~VAS()>
c001e095:	58                   	pop    eax
c001e096:	5a                   	pop    edx
c001e097:	6a 14                	push   0x14
c001e099:	53                   	push   ebx
c001e09a:	e8 50 45 ff ff       	call   c00125ef <operator delete(void*, unsigned long)>
c001e09f:	83 c4 10             	add    esp,0x10
c001e0a2:	83 c4 1c             	add    esp,0x1c
c001e0a5:	5b                   	pop    ebx
c001e0a6:	5e                   	pop    esi
c001e0a7:	5f                   	pop    edi
c001e0a8:	5d                   	pop    ebp
c001e0a9:	c3                   	ret    
c001e0aa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e0ae:	83 ec 0c             	sub    esp,0xc
c001e0b1:	68 bc bb 02 c0       	push   0xc002bbbc
c001e0b6:	e8 78 bd ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c001e0bb:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e0be:	83 c4 10             	add    esp,0x10
c001e0c1:	89 f7                	mov    edi,esi
c001e0c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e0c7:	e9 b0 fe ff ff       	jmp    c001df7c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e0cc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e0d2:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e0d8:	75 1c                	jne    c001e0f6 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e0da:	83 ec 0c             	sub    esp,0xc
c001e0dd:	68 24 bc 02 c0       	push   0xc002bc24
c001e0e2:	e8 e0 45 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001e0e7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e0ee:	e8 a0 fa ff ff       	call   c001db93 <blockTask(TaskState)>
c001e0f3:	83 c4 10             	add    esp,0x10
c001e0f6:	83 ec 08             	sub    esp,0x8
c001e0f9:	56                   	push   esi
c001e0fa:	68 44 0e 03 c0       	push   0xc0030e44
c001e0ff:	e8 2c a7 00 00       	call   c0028830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e104:	c7 04 24 44 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e44
c001e10b:	e8 6a a6 00 00       	call   c002877a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e110:	83 c4 10             	add    esp,0x10
c001e113:	39 f8                	cmp    eax,edi
c001e115:	0f 84 3e ff ff ff    	je     c001e059 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e11b:	83 ec 0c             	sub    esp,0xc
c001e11e:	68 44 0e 03 c0       	push   0xc0030e44
c001e123:	e8 52 a6 00 00       	call   c002877a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e128:	c7 04 24 44 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e44
c001e12f:	89 c6                	mov    esi,eax
c001e131:	e8 4c a6 00 00       	call   c0028782 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e136:	83 c4 10             	add    esp,0x10
c001e139:	39 f3                	cmp    ebx,esi
c001e13b:	74 b9                	je     c001e0f6 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e13d:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e140:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e143:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e149:	75 ab                	jne    c001e0f6 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e14b:	e9 7c ff ff ff       	jmp    c001e0cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e150:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e154:	83 ec 0c             	sub    esp,0xc
c001e157:	68 f0 bb 02 c0       	push   0xc002bbf0
c001e15c:	e9 55 ff ff ff       	jmp    c001e0b6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e161:	8b 36                	mov    esi,DWORD PTR [esi]
c001e163:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e167:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e16a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e16d:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e173:	01 d7                	add    edi,edx
c001e175:	89 f8                	mov    eax,edi
c001e177:	e9 66 fe ff ff       	jmp    c001dfe2 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e17c <cleanerTaskFunction(void*)>:
c001e17c:	53                   	push   ebx
c001e17d:	83 ec 08             	sub    esp,0x8
c001e180:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001e185:	48                   	dec    eax
c001e186:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001e18b:	75 01                	jne    c001e18e <cleanerTaskFunction(void*)+0x12>
c001e18d:	fb                   	sti    
c001e18e:	fa                   	cli    
c001e18f:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001e194:	80 3d 0c 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030e0c,0x0
c001e19b:	8d 50 01             	lea    edx,[eax+0x1]
c001e19e:	89 15 28 0e 03 c0    	mov    DWORD PTR ds:0xc0030e28,edx
c001e1a4:	0f 84 a1 00 00 00    	je     c001e24b <cleanerTaskFunction(void*)+0xcf>
c001e1aa:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001e1af:	85 c0                	test   eax,eax
c001e1b1:	75 01                	jne    c001e1b4 <cleanerTaskFunction(void*)+0x38>
c001e1b3:	fb                   	sti    
c001e1b4:	c6 05 0c 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030e0c,0x0
c001e1bb:	fa                   	cli    
c001e1bc:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c001e1c2:	ff 05 24 0e 03 c0    	inc    DWORD PTR ds:0xc0030e24
c001e1c8:	fa                   	cli    
c001e1c9:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c001e1cf:	eb 26                	jmp    c001e1f7 <cleanerTaskFunction(void*)+0x7b>
c001e1d1:	83 ec 0c             	sub    esp,0xc
c001e1d4:	68 2c 0e 03 c0       	push   0xc0030e2c
c001e1d9:	e8 9c a5 00 00       	call   c002877a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1de:	c7 04 24 2c 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e2c
c001e1e5:	89 c3                	mov    ebx,eax
c001e1e7:	e8 96 a5 00 00       	call   c0028782 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e1ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1ef:	e8 e1 fc ff ff       	call   c001ded5 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e1f4:	83 c4 10             	add    esp,0x10
c001e1f7:	83 ec 0c             	sub    esp,0xc
c001e1fa:	68 2c 0e 03 c0       	push   0xc0030e2c
c001e1ff:	e8 5a a5 00 00       	call   c002875e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e204:	83 c4 10             	add    esp,0x10
c001e207:	84 c0                	test   al,al
c001e209:	74 c6                	je     c001e1d1 <cleanerTaskFunction(void*)+0x55>
c001e20b:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001e210:	48                   	dec    eax
c001e211:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001e216:	75 01                	jne    c001e219 <cleanerTaskFunction(void*)+0x9d>
c001e218:	fb                   	sti    
c001e219:	a1 24 0e 03 c0       	mov    eax,ds:0xc0030e24
c001e21e:	48                   	dec    eax
c001e21f:	a3 24 0e 03 c0       	mov    ds:0xc0030e24,eax
c001e224:	0f 85 56 ff ff ff    	jne    c001e180 <cleanerTaskFunction(void*)+0x4>
c001e22a:	a1 20 0e 03 c0       	mov    eax,ds:0xc0030e20
c001e22f:	85 c0                	test   eax,eax
c001e231:	0f 84 49 ff ff ff    	je     c001e180 <cleanerTaskFunction(void*)+0x4>
c001e237:	c7 05 20 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e20,0x0
c001e241:	e8 77 f7 ff ff       	call   c001d9bd <schedule()>
c001e246:	e9 35 ff ff ff       	jmp    c001e180 <cleanerTaskFunction(void*)+0x4>
c001e24b:	83 ec 0c             	sub    esp,0xc
c001e24e:	6a 02                	push   0x2
c001e250:	e8 18 f9 ff ff       	call   c001db6d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e255:	83 c4 10             	add    esp,0x10
c001e258:	e9 57 ff ff ff       	jmp    c001e1b4 <cleanerTaskFunction(void*)+0x38>

c001e25d <terminateTask(int)>:
c001e25d:	83 ec 14             	sub    esp,0x14
c001e260:	fa                   	cli    
c001e261:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c001e267:	ff 05 24 0e 03 c0    	inc    DWORD PTR ds:0xc0030e24
c001e26d:	fa                   	cli    
c001e26e:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c001e274:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e278:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e27d:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e280:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e285:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e288:	50                   	push   eax
c001e289:	68 2c 0e 03 c0       	push   0xc0030e2c
c001e28e:	e8 9d a5 00 00       	call   c0028830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e293:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e298:	83 c4 10             	add    esp,0x10
c001e29b:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e2a2:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001e2a7:	85 c0                	test   eax,eax
c001e2a9:	74 53                	je     c001e2fe <terminateTask(int)+0xa1>
c001e2ab:	83 ec 0c             	sub    esp,0xc
c001e2ae:	c6 05 0c 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030e0c,0x1
c001e2b5:	50                   	push   eax
c001e2b6:	e8 85 fb ff ff       	call   c001de40 <unblockTask(ThreadControlBlock*)>
c001e2bb:	83 c4 10             	add    esp,0x10
c001e2be:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001e2c3:	48                   	dec    eax
c001e2c4:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001e2c9:	75 01                	jne    c001e2cc <terminateTask(int)+0x6f>
c001e2cb:	fb                   	sti    
c001e2cc:	a1 24 0e 03 c0       	mov    eax,ds:0xc0030e24
c001e2d1:	48                   	dec    eax
c001e2d2:	a3 24 0e 03 c0       	mov    ds:0xc0030e24,eax
c001e2d7:	75 09                	jne    c001e2e2 <terminateTask(int)+0x85>
c001e2d9:	83 3d 20 0e 03 c0 00 	cmp    DWORD PTR ds:0xc0030e20,0x0
c001e2e0:	75 2e                	jne    c001e310 <terminateTask(int)+0xb3>
c001e2e2:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001e2e7:	48                   	dec    eax
c001e2e8:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001e2ed:	75 01                	jne    c001e2f0 <terminateTask(int)+0x93>
c001e2ef:	fb                   	sti    
c001e2f0:	fa                   	cli    
c001e2f1:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c001e2f7:	e8 c1 f6 ff ff       	call   c001d9bd <schedule()>
c001e2fc:	eb e4                	jmp    c001e2e2 <terminateTask(int)+0x85>
c001e2fe:	83 ec 0c             	sub    esp,0xc
c001e301:	68 41 bb 02 c0       	push   0xc002bb41
c001e306:	e8 bc 43 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001e30b:	83 c4 10             	add    esp,0x10
c001e30e:	eb ae                	jmp    c001e2be <terminateTask(int)+0x61>
c001e310:	c7 05 20 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e20,0x0
c001e31a:	eb db                	jmp    c001e2f7 <terminateTask(int)+0x9a>

c001e31c <Thr::terminateFromIRQ(int)>:
c001e31c:	83 ec 18             	sub    esp,0x18
c001e31f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e323:	e8 35 ff ff ff       	call   c001e25d <terminateTask(int)>

c001e328 <Semaphore::release()>:
c001e328:	83 ec 0c             	sub    esp,0xc
c001e32b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e32f:	fa                   	cli    
c001e330:	a1 24 0e 03 c0       	mov    eax,ds:0xc0030e24
c001e335:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c001e33b:	8d 48 01             	lea    ecx,[eax+0x1]
c001e33e:	89 0d 24 0e 03 c0    	mov    DWORD PTR ds:0xc0030e24,ecx
c001e344:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e347:	85 c9                	test   ecx,ecx
c001e349:	74 3c                	je     c001e387 <Semaphore::release()+0x5f>
c001e34b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e34e:	83 ec 0c             	sub    esp,0xc
c001e351:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e354:	51                   	push   ecx
c001e355:	e8 e6 fa ff ff       	call   c001de40 <unblockTask(ThreadControlBlock*)>
c001e35a:	a1 24 0e 03 c0       	mov    eax,ds:0xc0030e24
c001e35f:	83 c4 10             	add    esp,0x10
c001e362:	48                   	dec    eax
c001e363:	a3 24 0e 03 c0       	mov    ds:0xc0030e24,eax
c001e368:	85 c0                	test   eax,eax
c001e36a:	75 09                	jne    c001e375 <Semaphore::release()+0x4d>
c001e36c:	a1 20 0e 03 c0       	mov    eax,ds:0xc0030e20
c001e371:	85 c0                	test   eax,eax
c001e373:	75 17                	jne    c001e38c <Semaphore::release()+0x64>
c001e375:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001e37a:	48                   	dec    eax
c001e37b:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001e380:	75 01                	jne    c001e383 <Semaphore::release()+0x5b>
c001e382:	fb                   	sti    
c001e383:	83 c4 0c             	add    esp,0xc
c001e386:	c3                   	ret    
c001e387:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e38a:	eb d7                	jmp    c001e363 <Semaphore::release()+0x3b>
c001e38c:	c7 05 20 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e20,0x0
c001e396:	e8 22 f6 ff ff       	call   c001d9bd <schedule()>
c001e39b:	eb d8                	jmp    c001e375 <Semaphore::release()+0x4d>

c001e39d <__static_initialization_and_destruction_0(int, int)>:
c001e39d:	83 ec 0c             	sub    esp,0xc
c001e3a0:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e3a5:	0f 85 88 00 00 00    	jne    c001e433 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e3ab:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e3b3:	75 7e                	jne    c001e433 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e3b5:	83 ec 0c             	sub    esp,0xc
c001e3b8:	68 44 0e 03 c0       	push   0xc0030e44
c001e3bd:	e8 fe a6 00 00       	call   c0028ac0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e3c2:	83 c4 10             	add    esp,0x10
c001e3c5:	83 ec 04             	sub    esp,0x4
c001e3c8:	68 d8 c6 02 c0       	push   0xc002c6d8
c001e3cd:	68 44 0e 03 c0       	push   0xc0030e44
c001e3d2:	68 74 8a 02 c0       	push   0xc0028a74
c001e3d7:	e8 8d 41 ff ff       	call   c0012569 <__cxa_atexit>
c001e3dc:	83 c4 10             	add    esp,0x10
c001e3df:	83 ec 0c             	sub    esp,0xc
c001e3e2:	68 38 0e 03 c0       	push   0xc0030e38
c001e3e7:	e8 d4 a6 00 00       	call   c0028ac0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e3ec:	83 c4 10             	add    esp,0x10
c001e3ef:	83 ec 04             	sub    esp,0x4
c001e3f2:	68 d8 c6 02 c0       	push   0xc002c6d8
c001e3f7:	68 38 0e 03 c0       	push   0xc0030e38
c001e3fc:	68 74 8a 02 c0       	push   0xc0028a74
c001e401:	e8 63 41 ff ff       	call   c0012569 <__cxa_atexit>
c001e406:	83 c4 10             	add    esp,0x10
c001e409:	83 ec 0c             	sub    esp,0xc
c001e40c:	68 2c 0e 03 c0       	push   0xc0030e2c
c001e411:	e8 aa a6 00 00       	call   c0028ac0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e416:	83 c4 10             	add    esp,0x10
c001e419:	83 ec 04             	sub    esp,0x4
c001e41c:	68 d8 c6 02 c0       	push   0xc002c6d8
c001e421:	68 2c 0e 03 c0       	push   0xc0030e2c
c001e426:	68 74 8a 02 c0       	push   0xc0028a74
c001e42b:	e8 39 41 ff ff       	call   c0012569 <__cxa_atexit>
c001e430:	83 c4 10             	add    esp,0x10
c001e433:	90                   	nop
c001e434:	83 c4 0c             	add    esp,0xc
c001e437:	c3                   	ret    

c001e438 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e438:	83 ec 0c             	sub    esp,0xc
c001e43b:	83 ec 08             	sub    esp,0x8
c001e43e:	68 ff ff 00 00       	push   0xffff
c001e443:	6a 01                	push   0x1
c001e445:	e8 53 ff ff ff       	call   c001e39d <__static_initialization_and_destruction_0(int, int)>
c001e44a:	83 c4 10             	add    esp,0x10
c001e44d:	83 c4 0c             	add    esp,0xc
c001e450:	c3                   	ret    

c001e451 <Vm::inbv(unsigned short)>:
c001e451:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e455:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e45a:	75 06                	jne    c001e462 <Vm::inbv(unsigned short)+0x11>
c001e45c:	a0 8c 0e 03 c0       	mov    al,ds:0xc0030e8c
c001e461:	c3                   	ret    
c001e462:	ec                   	in     al,dx
c001e463:	c3                   	ret    

c001e464 <Vm::outbv(unsigned short, unsigned char)>:
c001e464:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e468:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e46c:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e471:	75 25                	jne    c001e498 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e473:	8b 0d 8c 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030e8c
c001e479:	8d 51 01             	lea    edx,[ecx+0x1]
c001e47c:	88 81 a0 0e 03 c0    	mov    BYTE PTR [ecx-0x3ffcf160],al
c001e482:	89 15 8c 0e 03 c0    	mov    DWORD PTR ds:0xc0030e8c,edx
c001e488:	83 fa 20             	cmp    edx,0x20
c001e48b:	75 0c                	jne    c001e499 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e48d:	c7 05 8c 0e 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0030e8c,0x1f
c001e497:	c3                   	ret    
c001e498:	ee                   	out    dx,al
c001e499:	c3                   	ret    

c001e49a <Vm::realToLinear(unsigned short, unsigned short)>:
c001e49a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e49f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e4a4:	c1 e0 04             	shl    eax,0x4
c001e4a7:	01 d0                	add    eax,edx
c001e4a9:	c3                   	ret    

c001e4aa <Vm::getSegment(unsigned int)>:
c001e4aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4ae:	c1 e8 10             	shr    eax,0x10
c001e4b1:	c3                   	ret    

c001e4b2 <Vm::getOffset(unsigned int)>:
c001e4b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4b6:	c3                   	ret    

c001e4b7 <Vm::mainloop2()>:
c001e4b7:	83 ec 18             	sub    esp,0x18
c001e4ba:	fa                   	cli    
c001e4bb:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c001e4c1:	6a 02                	push   0x2
c001e4c3:	c6 05 85 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030e85,0x1
c001e4ca:	e8 9e f6 ff ff       	call   c001db6d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e4cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4d4:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e4d8:	52                   	push   edx
c001e4d9:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e4dd:	52                   	push   edx
c001e4de:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e4e2:	52                   	push   edx
c001e4e3:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e4e7:	50                   	push   eax
c001e4e8:	e8 0d 1e fe ff       	call   c00002fa <goToVM86>
c001e4ed:	83 c4 2c             	add    esp,0x2c
c001e4f0:	c3                   	ret    

c001e4f1 <Vm::mainVm8086Loop(void*)>:
c001e4f1:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001e4f6:	48                   	dec    eax
c001e4f7:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001e4fc:	75 01                	jne    c001e4ff <Vm::mainVm8086Loop(void*)+0xe>
c001e4fe:	fb                   	sti    
c001e4ff:	eb b6                	jmp    c001e4b7 <Vm::mainloop2()>

c001e501 <Vm::mainloop3(unsigned long)>:
c001e501:	83 ec 18             	sub    esp,0x18
c001e504:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e508:	fa                   	cli    
c001e509:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c001e50f:	6a 02                	push   0x2
c001e511:	c6 05 84 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030e84,0x1
c001e518:	a3 80 0e 03 c0       	mov    ds:0xc0030e80,eax
c001e51d:	e8 4b f6 ff ff       	call   c001db6d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e522:	83 c4 1c             	add    esp,0x1c
c001e525:	eb 90                	jmp    c001e4b7 <Vm::mainloop2()>

c001e527 <Vm::initialise8086()>:
c001e527:	83 ec 0c             	sub    esp,0xc
c001e52a:	68 80 00 00 00       	push   0x80
c001e52f:	6a 00                	push   0x0
c001e531:	68 f1 e4 01 c0       	push   0xc001e4f1
c001e536:	ff 35 50 0e 03 c0    	push   DWORD PTR ds:0xc0030e50
c001e53c:	e8 57 f2 ff ff       	call   c001d798 <Process::createThread(void (*)(void*), void*, int)>
c001e541:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e548:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001e54d:	68 00 01 00 00       	push   0x100
c001e552:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c001e557:	6a 00                	push   0x0
c001e559:	6a 00                	push   0x0
c001e55b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e561:	e8 68 37 ff ff       	call   c0011cce <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e566:	83 c4 2c             	add    esp,0x2c
c001e569:	c3                   	ret    

c001e56a <Vm::finish8086()>:
c001e56a:	53                   	push   ebx
c001e56b:	83 ec 08             	sub    esp,0x8
c001e56e:	fa                   	cli    
c001e56f:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c001e575:	80 3d 84 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030e84,0x0
c001e57c:	75 15                	jne    c001e593 <Vm::finish8086()+0x29>
c001e57e:	e8 3a f4 ff ff       	call   c001d9bd <schedule()>
c001e583:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001e588:	48                   	dec    eax
c001e589:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001e58e:	75 de                	jne    c001e56e <Vm::finish8086()+0x4>
c001e590:	fb                   	sti    
c001e591:	eb db                	jmp    c001e56e <Vm::finish8086()+0x4>
c001e593:	83 ec 0c             	sub    esp,0xc
c001e596:	8b 1d 80 0e 03 c0    	mov    ebx,DWORD PTR ds:0xc0030e80
c001e59c:	ff 35 88 0e 03 c0    	push   DWORD PTR ds:0xc0030e88
c001e5a2:	c6 05 84 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030e84,0x0
c001e5a9:	e8 92 f8 ff ff       	call   c001de40 <unblockTask(ThreadControlBlock*)>
c001e5ae:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001e5b3:	83 c4 10             	add    esp,0x10
c001e5b6:	8d 50 ff             	lea    edx,[eax-0x1]
c001e5b9:	89 15 28 0e 03 c0    	mov    DWORD PTR ds:0xc0030e28,edx
c001e5bf:	85 d2                	test   edx,edx
c001e5c1:	75 01                	jne    c001e5c4 <Vm::finish8086()+0x5a>
c001e5c3:	fb                   	sti    
c001e5c4:	89 d8                	mov    eax,ebx
c001e5c6:	83 c4 08             	add    esp,0x8
c001e5c9:	5b                   	pop    ebx
c001e5ca:	c3                   	ret    

c001e5cb <Vm::getOutput8086(unsigned char*)>:
c001e5cb:	57                   	push   edi
c001e5cc:	8b 0d 8c 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030e8c
c001e5d2:	56                   	push   esi
c001e5d3:	be a0 0e 03 c0       	mov    esi,0xc0030ea0
c001e5d8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e5dc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e5de:	a1 8c 0e 03 c0       	mov    eax,ds:0xc0030e8c
c001e5e3:	5e                   	pop    esi
c001e5e4:	c7 05 8c 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e8c,0x0
c001e5ee:	5f                   	pop    edi
c001e5ef:	c3                   	ret    

c001e5f0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e5f0:	55                   	push   ebp
c001e5f1:	57                   	push   edi
c001e5f2:	56                   	push   esi
c001e5f3:	53                   	push   ebx
c001e5f4:	83 ec 2c             	sub    esp,0x2c
c001e5f7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e5fb:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e5ff:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e603:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e607:	fa                   	cli    
c001e608:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c001e60e:	0f b6 35 85 0e 03 c0 	movzx  esi,BYTE PTR ds:0xc0030e85
c001e615:	89 f0                	mov    eax,esi
c001e617:	84 c0                	test   al,al
c001e619:	75 1d                	jne    c001e638 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e61b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e61f:	e8 99 f3 ff ff       	call   c001d9bd <schedule()>
c001e624:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001e629:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e62d:	48                   	dec    eax
c001e62e:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001e633:	75 d2                	jne    c001e607 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e635:	fb                   	sti    
c001e636:	eb cf                	jmp    c001e607 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e638:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001e63d:	c7 05 8c 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e8c,0x0
c001e647:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e64b:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e64f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e653:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e657:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e65b:	50                   	push   eax
c001e65c:	6a 20                	push   0x20
c001e65e:	6a 00                	push   0x0
c001e660:	68 a0 0e 03 c0       	push   0xc0030ea0
c001e665:	e8 e6 20 fe ff       	call   c0000750 <memset>
c001e66a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e671:	e8 23 0f ff ff       	call   c000f599 <malloc>
c001e676:	83 c4 0c             	add    esp,0xc
c001e679:	89 c3                	mov    ebx,eax
c001e67b:	ff 35 50 0e 03 c0    	push   DWORD PTR ds:0xc0030e50
c001e681:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e685:	50                   	push   eax
c001e686:	e8 9b 45 ff ff       	call   c0012c26 <File::File(char const*, Process*)>
c001e68b:	83 c4 10             	add    esp,0x10
c001e68e:	85 db                	test   ebx,ebx
c001e690:	75 0a                	jne    c001e69c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e692:	83 ec 0c             	sub    esp,0xc
c001e695:	68 4c bc 02 c0       	push   0xc002bc4c
c001e69a:	eb 3e                	jmp    c001e6da <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e69c:	50                   	push   eax
c001e69d:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e6a1:	50                   	push   eax
c001e6a2:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e6a6:	50                   	push   eax
c001e6a7:	53                   	push   ebx
c001e6a8:	e8 89 48 ff ff       	call   c0012f36 <File::stat(unsigned long long*, bool*)>
c001e6ad:	83 c4 10             	add    esp,0x10
c001e6b0:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e6b5:	74 0a                	je     c001e6c1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e6b7:	83 ec 0c             	sub    esp,0xc
c001e6ba:	68 60 bc 02 c0       	push   0xc002bc60
c001e6bf:	eb 19                	jmp    c001e6da <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e6c1:	51                   	push   ecx
c001e6c2:	51                   	push   ecx
c001e6c3:	6a 01                	push   0x1
c001e6c5:	53                   	push   ebx
c001e6c6:	e8 bf 45 ff ff       	call   c0012c8a <File::open(FileOpenMode)>
c001e6cb:	83 c4 10             	add    esp,0x10
c001e6ce:	85 c0                	test   eax,eax
c001e6d0:	74 24                	je     c001e6f6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e6d2:	83 ec 0c             	sub    esp,0xc
c001e6d5:	68 79 bc 02 c0       	push   0xc002bc79
c001e6da:	e8 54 b7 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c001e6df:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001e6e4:	83 c4 10             	add    esp,0x10
c001e6e7:	48                   	dec    eax
c001e6e8:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001e6ed:	85 c0                	test   eax,eax
c001e6ef:	75 01                	jne    c001e6f2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e6f1:	fb                   	sti    
c001e6f2:	31 f6                	xor    esi,esi
c001e6f4:	eb 58                	jmp    c001e74e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e6f6:	0f b7 ed             	movzx  ebp,bp
c001e6f9:	50                   	push   eax
c001e6fa:	0f b7 ff             	movzx  edi,di
c001e6fd:	50                   	push   eax
c001e6fe:	55                   	push   ebp
c001e6ff:	57                   	push   edi
c001e700:	e8 95 fd ff ff       	call   c001e49a <Vm::realToLinear(unsigned short, unsigned short)>
c001e705:	5a                   	pop    edx
c001e706:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e708:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e70c:	51                   	push   ecx
c001e70d:	50                   	push   eax
c001e70e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e712:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e716:	53                   	push   ebx
c001e717:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e71a:	83 c4 14             	add    esp,0x14
c001e71d:	53                   	push   ebx
c001e71e:	e8 c5 45 ff ff       	call   c0012ce8 <File::close()>
c001e723:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c001e728:	83 c4 10             	add    esp,0x10
c001e72b:	48                   	dec    eax
c001e72c:	c6 05 85 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030e85,0x0
c001e733:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c001e738:	85 c0                	test   eax,eax
c001e73a:	75 01                	jne    c001e73d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e73c:	fb                   	sti    
c001e73d:	83 ec 0c             	sub    esp,0xc
c001e740:	ff 35 88 0e 03 c0    	push   DWORD PTR ds:0xc0030e88
c001e746:	e8 f5 f6 ff ff       	call   c001de40 <unblockTask(ThreadControlBlock*)>
c001e74b:	83 c4 10             	add    esp,0x10
c001e74e:	83 c4 2c             	add    esp,0x2c
c001e751:	89 f0                	mov    eax,esi
c001e753:	5b                   	pop    ebx
c001e754:	5e                   	pop    esi
c001e755:	5f                   	pop    edi
c001e756:	5d                   	pop    ebp
c001e757:	c3                   	ret    

c001e758 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e758:	57                   	push   edi
c001e759:	56                   	push   esi
c001e75a:	53                   	push   ebx
c001e75b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e75f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e763:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e767:	83 e8 06             	sub    eax,0x6
c001e76a:	0f b7 c0             	movzx  eax,ax
c001e76d:	50                   	push   eax
c001e76e:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e773:	50                   	push   eax
c001e774:	e8 21 fd ff ff       	call   c001e49a <Vm::realToLinear(unsigned short, unsigned short)>
c001e779:	5a                   	pop    edx
c001e77a:	5e                   	pop    esi
c001e77b:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e77e:	8d 56 fa             	lea    edx,[esi-0x6]
c001e781:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e787:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e78a:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e78d:	83 c2 02             	add    edx,0x2
c001e790:	66 89 10             	mov    WORD PTR [eax],dx
c001e793:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e796:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e79a:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e79d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e7a1:	89 d6                	mov    esi,edx
c001e7a3:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e7a9:	66 81 e6 ff fd       	and    si,0xfdff
c001e7ae:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e7b2:	74 07                	je     c001e7bb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e7b4:	89 d6                	mov    esi,edx
c001e7b6:	66 81 ce 00 02       	or     si,0x200
c001e7bb:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e7bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7c4:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e7c8:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e7d0:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e7d3:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e7db:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e7de:	5b                   	pop    ebx
c001e7df:	5e                   	pop    esi
c001e7e0:	5f                   	pop    edi
c001e7e1:	c3                   	ret    

c001e7e2 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e7e2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7e7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7ec:	c1 e0 04             	shl    eax,0x4
c001e7ef:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e7f2:	c3                   	ret    

c001e7f3 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e7f3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7f8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7fd:	c1 e0 04             	shl    eax,0x4
c001e800:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e804:	c3                   	ret    

c001e805 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e805:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e80a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e80f:	c1 e0 04             	shl    eax,0x4
c001e812:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e815:	c3                   	ret    

c001e816 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e816:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e81b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e820:	c1 e0 04             	shl    eax,0x4
c001e823:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e827:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e82a:	c3                   	ret    

c001e82b <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e82b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e830:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e835:	c1 e0 04             	shl    eax,0x4
c001e838:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e83c:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e840:	c3                   	ret    

c001e841 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e841:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e846:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e84b:	c1 e0 04             	shl    eax,0x4
c001e84e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e852:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e855:	c3                   	ret    

c001e856 <Vm::faultHandler(regs*)>:
c001e856:	55                   	push   ebp
c001e857:	57                   	push   edi
c001e858:	56                   	push   esi
c001e859:	53                   	push   ebx
c001e85a:	83 ec 1c             	sub    esp,0x1c
c001e85d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e861:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e864:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e868:	0f b7 f8             	movzx  edi,ax
c001e86b:	52                   	push   edx
c001e86c:	0f b7 c0             	movzx  eax,ax
c001e86f:	50                   	push   eax
c001e870:	e8 25 fc ff ff       	call   c001e49a <Vm::realToLinear(unsigned short, unsigned short)>
c001e875:	5a                   	pop    edx
c001e876:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e879:	59                   	pop    ecx
c001e87a:	89 c1                	mov    ecx,eax
c001e87c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e87f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e883:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e888:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e88c:	0f b7 c5             	movzx  eax,bp
c001e88f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e893:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e897:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e89b:	e8 fa fb ff ff       	call   c001e49a <Vm::realToLinear(unsigned short, unsigned short)>
c001e8a0:	5e                   	pop    esi
c001e8a1:	be 06 00 00 00       	mov    esi,0x6
c001e8a6:	5a                   	pop    edx
c001e8a7:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001e8ac:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001e8b1:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001e8b4:	80 fa 9d             	cmp    dl,0x9d
c001e8b7:	0f 84 2c 02 00 00    	je     c001eae9 <Vm::faultHandler(regs*)+0x293>
c001e8bd:	0f 87 91 00 00 00    	ja     c001e954 <Vm::faultHandler(regs*)+0xfe>
c001e8c3:	80 fa 66             	cmp    dl,0x66
c001e8c6:	0f 84 98 01 00 00    	je     c001ea64 <Vm::faultHandler(regs*)+0x20e>
c001e8cc:	77 47                	ja     c001e915 <Vm::faultHandler(regs*)+0xbf>
c001e8ce:	80 fa 36             	cmp    dl,0x36
c001e8d1:	0f 84 80 01 00 00    	je     c001ea57 <Vm::faultHandler(regs*)+0x201>
c001e8d7:	77 1a                	ja     c001e8f3 <Vm::faultHandler(regs*)+0x9d>
c001e8d9:	80 fa 26             	cmp    dl,0x26
c001e8dc:	0f 84 4e 01 00 00    	je     c001ea30 <Vm::faultHandler(regs*)+0x1da>
c001e8e2:	80 fa 2e             	cmp    dl,0x2e
c001e8e5:	0f 85 e2 05 00 00    	jne    c001eecd <Vm::faultHandler(regs*)+0x677>
c001e8eb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e8ee:	31 f6                	xor    esi,esi
c001e8f0:	41                   	inc    ecx
c001e8f1:	eb be                	jmp    c001e8b1 <Vm::faultHandler(regs*)+0x5b>
c001e8f3:	80 fa 64             	cmp    dl,0x64
c001e8f6:	0f 84 41 01 00 00    	je     c001ea3d <Vm::faultHandler(regs*)+0x1e7>
c001e8fc:	0f 87 48 01 00 00    	ja     c001ea4a <Vm::faultHandler(regs*)+0x1f4>
c001e902:	80 fa 3e             	cmp    dl,0x3e
c001e905:	0f 85 c2 05 00 00    	jne    c001eecd <Vm::faultHandler(regs*)+0x677>
c001e90b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e90e:	be 01 00 00 00       	mov    esi,0x1
c001e913:	eb db                	jmp    c001e8f0 <Vm::faultHandler(regs*)+0x9a>
c001e915:	80 fa 6d             	cmp    dl,0x6d
c001e918:	0f 84 ec 02 00 00    	je     c001ec0a <Vm::faultHandler(regs*)+0x3b4>
c001e91e:	77 17                	ja     c001e937 <Vm::faultHandler(regs*)+0xe1>
c001e920:	80 fa 67             	cmp    dl,0x67
c001e923:	0f 84 48 01 00 00    	je     c001ea71 <Vm::faultHandler(regs*)+0x21b>
c001e929:	80 fa 6c             	cmp    dl,0x6c
c001e92c:	0f 84 69 02 00 00    	je     c001eb9b <Vm::faultHandler(regs*)+0x345>
c001e932:	e9 96 05 00 00       	jmp    c001eecd <Vm::faultHandler(regs*)+0x677>
c001e937:	80 fa 6f             	cmp    dl,0x6f
c001e93a:	0f 84 f4 03 00 00    	je     c001ed34 <Vm::faultHandler(regs*)+0x4de>
c001e940:	0f 82 59 03 00 00    	jb     c001ec9f <Vm::faultHandler(regs*)+0x449>
c001e946:	80 fa 9c             	cmp    dl,0x9c
c001e949:	0f 84 2f 01 00 00    	je     c001ea7e <Vm::faultHandler(regs*)+0x228>
c001e94f:	e9 79 05 00 00       	jmp    c001eecd <Vm::faultHandler(regs*)+0x677>
c001e954:	80 fa ec             	cmp    dl,0xec
c001e957:	0f 84 14 05 00 00    	je     c001ee71 <Vm::faultHandler(regs*)+0x61b>
c001e95d:	77 7b                	ja     c001e9da <Vm::faultHandler(regs*)+0x184>
c001e95f:	80 fa e4             	cmp    dl,0xe4
c001e962:	0f 84 93 04 00 00    	je     c001edfb <Vm::faultHandler(regs*)+0x5a5>
c001e968:	77 53                	ja     c001e9bd <Vm::faultHandler(regs*)+0x167>
c001e96a:	80 fa cd             	cmp    dl,0xcd
c001e96d:	0f 84 d9 01 00 00    	je     c001eb4c <Vm::faultHandler(regs*)+0x2f6>
c001e973:	80 fa cf             	cmp    dl,0xcf
c001e976:	0f 85 51 05 00 00    	jne    c001eecd <Vm::faultHandler(regs*)+0x677>
c001e97c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e97f:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001e982:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001e986:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001e989:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001e98d:	81 ca 00 02 02 00    	or     edx,0x20200
c001e993:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e996:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001e99a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e9a0:	66 c1 e8 09          	shr    ax,0x9
c001e9a4:	83 e0 01             	and    eax,0x1
c001e9a7:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e9aa:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e9ad:	83 c0 06             	add    eax,0x6
c001e9b0:	25 ff ff 00 00       	and    eax,0xffff
c001e9b5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e9b8:	e9 0c 05 00 00       	jmp    c001eec9 <Vm::faultHandler(regs*)+0x673>
c001e9bd:	80 fa e6             	cmp    dl,0xe6
c001e9c0:	0f 84 7f 04 00 00    	je     c001ee45 <Vm::faultHandler(regs*)+0x5ef>
c001e9c6:	0f 82 4b 04 00 00    	jb     c001ee17 <Vm::faultHandler(regs*)+0x5c1>
c001e9cc:	80 fa e7             	cmp    dl,0xe7
c001e9cf:	0f 84 87 04 00 00    	je     c001ee5c <Vm::faultHandler(regs*)+0x606>
c001e9d5:	e9 f3 04 00 00       	jmp    c001eecd <Vm::faultHandler(regs*)+0x677>
c001e9da:	80 fa ef             	cmp    dl,0xef
c001e9dd:	0f 84 d1 04 00 00    	je     c001eeb4 <Vm::faultHandler(regs*)+0x65e>
c001e9e3:	77 28                	ja     c001ea0d <Vm::faultHandler(regs*)+0x1b7>
c001e9e5:	80 fa ed             	cmp    dl,0xed
c001e9e8:	0f 84 9f 04 00 00    	je     c001ee8d <Vm::faultHandler(regs*)+0x637>
c001e9ee:	80 fa ee             	cmp    dl,0xee
c001e9f1:	0f 85 d6 04 00 00    	jne    c001eecd <Vm::faultHandler(regs*)+0x677>
c001e9f7:	50                   	push   eax
c001e9f8:	50                   	push   eax
c001e9f9:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001e9fd:	50                   	push   eax
c001e9fe:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ea02:	50                   	push   eax
c001ea03:	e8 5c fa ff ff       	call   c001e464 <Vm::outbv(unsigned short, unsigned char)>
c001ea08:	e9 9f 04 00 00       	jmp    c001eeac <Vm::faultHandler(regs*)+0x656>
c001ea0d:	80 fa fa             	cmp    dl,0xfa
c001ea10:	0f 84 69 01 00 00    	je     c001eb7f <Vm::faultHandler(regs*)+0x329>
c001ea16:	80 fa fb             	cmp    dl,0xfb
c001ea19:	0f 84 6e 01 00 00    	je     c001eb8d <Vm::faultHandler(regs*)+0x337>
c001ea1f:	80 fa f3             	cmp    dl,0xf3
c001ea22:	0f 85 a5 04 00 00    	jne    c001eecd <Vm::faultHandler(regs*)+0x677>
c001ea28:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea2b:	e9 c0 fe ff ff       	jmp    c001e8f0 <Vm::faultHandler(regs*)+0x9a>
c001ea30:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea33:	be 02 00 00 00       	mov    esi,0x2
c001ea38:	e9 b3 fe ff ff       	jmp    c001e8f0 <Vm::faultHandler(regs*)+0x9a>
c001ea3d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea40:	be 03 00 00 00       	mov    esi,0x3
c001ea45:	e9 a6 fe ff ff       	jmp    c001e8f0 <Vm::faultHandler(regs*)+0x9a>
c001ea4a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea4d:	be 04 00 00 00       	mov    esi,0x4
c001ea52:	e9 99 fe ff ff       	jmp    c001e8f0 <Vm::faultHandler(regs*)+0x9a>
c001ea57:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea5a:	be 05 00 00 00       	mov    esi,0x5
c001ea5f:	e9 8c fe ff ff       	jmp    c001e8f0 <Vm::faultHandler(regs*)+0x9a>
c001ea64:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea67:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001ea6c:	e9 7f fe ff ff       	jmp    c001e8f0 <Vm::faultHandler(regs*)+0x9a>
c001ea71:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea74:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001ea79:	e9 72 fe ff ff       	jmp    c001e8f0 <Vm::faultHandler(regs*)+0x9a>
c001ea7e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ea81:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ea85:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ea8a:	74 30                	je     c001eabc <Vm::faultHandler(regs*)+0x266>
c001ea8c:	83 e9 04             	sub    ecx,0x4
c001ea8f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ea95:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ea9b:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ea9e:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eaa1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eaa7:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eaab:	0f 84 15 04 00 00    	je     c001eec6 <Vm::faultHandler(regs*)+0x670>
c001eab1:	80 ce 02             	or     dh,0x2
c001eab4:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eab7:	e9 0a 04 00 00       	jmp    c001eec6 <Vm::faultHandler(regs*)+0x670>
c001eabc:	83 e9 02             	sub    ecx,0x2
c001eabf:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001eac5:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eac8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eacc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ead2:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001ead6:	74 05                	je     c001eadd <Vm::faultHandler(regs*)+0x287>
c001ead8:	80 ce 02             	or     dh,0x2
c001eadb:	eb 03                	jmp    c001eae0 <Vm::faultHandler(regs*)+0x28a>
c001eadd:	80 e6 fd             	and    dh,0xfd
c001eae0:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eae4:	e9 dd 03 00 00       	jmp    c001eec6 <Vm::faultHandler(regs*)+0x670>
c001eae9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eaee:	74 2a                	je     c001eb1a <Vm::faultHandler(regs*)+0x2c4>
c001eaf0:	8b 10                	mov    edx,DWORD PTR [eax]
c001eaf2:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001eaf8:	81 ca 00 02 02 00    	or     edx,0x20200
c001eafe:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eb01:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb03:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb09:	c1 e8 09             	shr    eax,0x9
c001eb0c:	83 e0 01             	and    eax,0x1
c001eb0f:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eb12:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eb15:	83 c0 04             	add    eax,0x4
c001eb18:	eb 25                	jmp    c001eb3f <Vm::faultHandler(regs*)+0x2e9>
c001eb1a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001eb1d:	81 ca 00 02 02 00    	or     edx,0x20200
c001eb23:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eb26:	66 8b 00             	mov    ax,WORD PTR [eax]
c001eb29:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb2f:	66 c1 e8 09          	shr    ax,0x9
c001eb33:	83 e0 01             	and    eax,0x1
c001eb36:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eb39:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eb3c:	83 c0 02             	add    eax,0x2
c001eb3f:	25 ff ff 00 00       	and    eax,0xffff
c001eb44:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001eb47:	e9 7a 03 00 00       	jmp    c001eec6 <Vm::faultHandler(regs*)+0x670>
c001eb4c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eb50:	3c ee                	cmp    al,0xee
c001eb52:	75 10                	jne    c001eb64 <Vm::faultHandler(regs*)+0x30e>
c001eb54:	83 ec 0c             	sub    esp,0xc
c001eb57:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001eb5a:	e8 a2 f9 ff ff       	call   c001e501 <Vm::mainloop3(unsigned long)>
c001eb5f:	e9 4b 03 00 00       	jmp    c001eeaf <Vm::faultHandler(regs*)+0x659>
c001eb64:	83 ec 0c             	sub    esp,0xc
c001eb67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001eb6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb6f:	51                   	push   ecx
c001eb70:	50                   	push   eax
c001eb71:	53                   	push   ebx
c001eb72:	e8 e1 fb ff ff       	call   c001e758 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001eb77:	83 c4 20             	add    esp,0x20
c001eb7a:	e9 4a 03 00 00       	jmp    c001eec9 <Vm::faultHandler(regs*)+0x673>
c001eb7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb84:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001eb88:	e9 39 03 00 00       	jmp    c001eec6 <Vm::faultHandler(regs*)+0x670>
c001eb8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb92:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001eb96:	e9 2b 03 00 00       	jmp    c001eec6 <Vm::faultHandler(regs*)+0x670>
c001eb9b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001eb9e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eba3:	74 2b                	je     c001ebd0 <Vm::faultHandler(regs*)+0x37a>
c001eba5:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001ebac:	76 22                	jbe    c001ebd0 <Vm::faultHandler(regs*)+0x37a>
c001ebae:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ebb2:	50                   	push   eax
c001ebb3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ebb7:	50                   	push   eax
c001ebb8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ebbc:	50                   	push   eax
c001ebbd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ebc1:	50                   	push   eax
c001ebc2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ebc6:	50                   	push   eax
c001ebc7:	6a 6c                	push   0x6c
c001ebc9:	6a 6c                	push   0x6c
c001ebcb:	e9 b9 01 00 00       	jmp    c001ed89 <Vm::faultHandler(regs*)+0x533>
c001ebd0:	83 ec 0c             	sub    esp,0xc
c001ebd3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ebd7:	0f b7 f6             	movzx  esi,si
c001ebda:	50                   	push   eax
c001ebdb:	e8 71 f8 ff ff       	call   c001e451 <Vm::inbv(unsigned short)>
c001ebe0:	83 c4 0c             	add    esp,0xc
c001ebe3:	0f b6 c0             	movzx  eax,al
c001ebe6:	50                   	push   eax
c001ebe7:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001ebeb:	50                   	push   eax
c001ebec:	56                   	push   esi
c001ebed:	e8 24 fc ff ff       	call   c001e816 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001ebf2:	83 c4 10             	add    esp,0x10
c001ebf5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ebf8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ebfc:	74 03                	je     c001ec01 <Vm::faultHandler(regs*)+0x3ab>
c001ebfe:	48                   	dec    eax
c001ebff:	eb 01                	jmp    c001ec02 <Vm::faultHandler(regs*)+0x3ac>
c001ec01:	40                   	inc    eax
c001ec02:	0f b7 c0             	movzx  eax,ax
c001ec05:	e9 8d 00 00 00       	jmp    c001ec97 <Vm::faultHandler(regs*)+0x441>
c001ec0a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ec0d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec10:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ec15:	74 29                	je     c001ec40 <Vm::faultHandler(regs*)+0x3ea>
c001ec17:	3d ff ff 00 00       	cmp    eax,0xffff
c001ec1c:	76 22                	jbe    c001ec40 <Vm::faultHandler(regs*)+0x3ea>
c001ec1e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ec22:	50                   	push   eax
c001ec23:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ec27:	50                   	push   eax
c001ec28:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ec2c:	50                   	push   eax
c001ec2d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ec31:	50                   	push   eax
c001ec32:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec36:	50                   	push   eax
c001ec37:	6a 6d                	push   0x6d
c001ec39:	6a 6d                	push   0x6d
c001ec3b:	e9 49 01 00 00       	jmp    c001ed89 <Vm::faultHandler(regs*)+0x533>
c001ec40:	0f b7 c8             	movzx  ecx,ax
c001ec43:	0f b7 f6             	movzx  esi,si
c001ec46:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ec49:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ec4e:	74 20                	je     c001ec70 <Vm::faultHandler(regs*)+0x41a>
c001ec50:	ed                   	in     eax,dx
c001ec51:	55                   	push   ebp
c001ec52:	50                   	push   eax
c001ec53:	51                   	push   ecx
c001ec54:	56                   	push   esi
c001ec55:	e8 e7 fb ff ff       	call   c001e841 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ec5a:	83 c4 10             	add    esp,0x10
c001ec5d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec60:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec64:	74 05                	je     c001ec6b <Vm::faultHandler(regs*)+0x415>
c001ec66:	83 e8 04             	sub    eax,0x4
c001ec69:	eb 27                	jmp    c001ec92 <Vm::faultHandler(regs*)+0x43c>
c001ec6b:	83 c0 04             	add    eax,0x4
c001ec6e:	eb 22                	jmp    c001ec92 <Vm::faultHandler(regs*)+0x43c>
c001ec70:	66 ed                	in     ax,dx
c001ec72:	0f b7 c0             	movzx  eax,ax
c001ec75:	57                   	push   edi
c001ec76:	50                   	push   eax
c001ec77:	51                   	push   ecx
c001ec78:	56                   	push   esi
c001ec79:	e8 ad fb ff ff       	call   c001e82b <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ec7e:	83 c4 10             	add    esp,0x10
c001ec81:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec84:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec88:	74 05                	je     c001ec8f <Vm::faultHandler(regs*)+0x439>
c001ec8a:	83 e8 02             	sub    eax,0x2
c001ec8d:	eb 03                	jmp    c001ec92 <Vm::faultHandler(regs*)+0x43c>
c001ec8f:	83 c0 02             	add    eax,0x2
c001ec92:	25 ff ff 00 00       	and    eax,0xffff
c001ec97:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001ec9a:	e9 27 02 00 00       	jmp    c001eec6 <Vm::faultHandler(regs*)+0x670>
c001ec9f:	8d 46 ff             	lea    eax,[esi-0x1]
c001eca2:	3c 05                	cmp    al,0x5
c001eca4:	77 24                	ja     c001ecca <Vm::faultHandler(regs*)+0x474>
c001eca6:	0f b6 c0             	movzx  eax,al
c001eca9:	ff 24 85 ec bc 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4314]
c001ecb0:	0f b7 fd             	movzx  edi,bp
c001ecb3:	eb 15                	jmp    c001ecca <Vm::faultHandler(regs*)+0x474>
c001ecb5:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001ecb9:	eb 0f                	jmp    c001ecca <Vm::faultHandler(regs*)+0x474>
c001ecbb:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001ecbf:	eb 09                	jmp    c001ecca <Vm::faultHandler(regs*)+0x474>
c001ecc1:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001ecc5:	eb 03                	jmp    c001ecca <Vm::faultHandler(regs*)+0x474>
c001ecc7:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001ecca:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001eccd:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ecd2:	74 29                	je     c001ecfd <Vm::faultHandler(regs*)+0x4a7>
c001ecd4:	3d ff ff 00 00       	cmp    eax,0xffff
c001ecd9:	76 22                	jbe    c001ecfd <Vm::faultHandler(regs*)+0x4a7>
c001ecdb:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ecdf:	50                   	push   eax
c001ece0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ece4:	50                   	push   eax
c001ece5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ece9:	50                   	push   eax
c001ecea:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ecee:	50                   	push   eax
c001ecef:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ecf3:	50                   	push   eax
c001ecf4:	6a 6e                	push   0x6e
c001ecf6:	6a 6e                	push   0x6e
c001ecf8:	e9 8c 00 00 00       	jmp    c001ed89 <Vm::faultHandler(regs*)+0x533>
c001ecfd:	0f b7 c0             	movzx  eax,ax
c001ed00:	52                   	push   edx
c001ed01:	52                   	push   edx
c001ed02:	50                   	push   eax
c001ed03:	57                   	push   edi
c001ed04:	e8 d9 fa ff ff       	call   c001e7e2 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ed09:	59                   	pop    ecx
c001ed0a:	0f b6 c0             	movzx  eax,al
c001ed0d:	5e                   	pop    esi
c001ed0e:	50                   	push   eax
c001ed0f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ed13:	50                   	push   eax
c001ed14:	e8 4b f7 ff ff       	call   c001e464 <Vm::outbv(unsigned short, unsigned char)>
c001ed19:	83 c4 10             	add    esp,0x10
c001ed1c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ed1f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ed23:	74 03                	je     c001ed28 <Vm::faultHandler(regs*)+0x4d2>
c001ed25:	48                   	dec    eax
c001ed26:	eb 01                	jmp    c001ed29 <Vm::faultHandler(regs*)+0x4d3>
c001ed28:	40                   	inc    eax
c001ed29:	0f b7 c0             	movzx  eax,ax
c001ed2c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ed2f:	e9 92 01 00 00       	jmp    c001eec6 <Vm::faultHandler(regs*)+0x670>
c001ed34:	8d 46 ff             	lea    eax,[esi-0x1]
c001ed37:	3c 05                	cmp    al,0x5
c001ed39:	77 1f                	ja     c001ed5a <Vm::faultHandler(regs*)+0x504>
c001ed3b:	0f b6 c0             	movzx  eax,al
c001ed3e:	ff 24 85 04 bd 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd42fc]
c001ed45:	89 ef                	mov    edi,ebp
c001ed47:	eb 11                	jmp    c001ed5a <Vm::faultHandler(regs*)+0x504>
c001ed49:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001ed4c:	eb 0c                	jmp    c001ed5a <Vm::faultHandler(regs*)+0x504>
c001ed4e:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001ed51:	eb 07                	jmp    c001ed5a <Vm::faultHandler(regs*)+0x504>
c001ed53:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001ed56:	eb 02                	jmp    c001ed5a <Vm::faultHandler(regs*)+0x504>
c001ed58:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001ed5a:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ed5d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ed62:	74 37                	je     c001ed9b <Vm::faultHandler(regs*)+0x545>
c001ed64:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001ed6a:	76 2f                	jbe    c001ed9b <Vm::faultHandler(regs*)+0x545>
c001ed6c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ed70:	50                   	push   eax
c001ed71:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ed75:	50                   	push   eax
c001ed76:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ed7a:	50                   	push   eax
c001ed7b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ed7f:	50                   	push   eax
c001ed80:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed84:	50                   	push   eax
c001ed85:	6a 6f                	push   0x6f
c001ed87:	6a 6f                	push   0x6f
c001ed89:	68 92 bc 02 c0       	push   0xc002bc92
c001ed8e:	e8 34 39 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001ed93:	83 c4 20             	add    esp,0x20
c001ed96:	e9 86 01 00 00       	jmp    c001ef21 <Vm::faultHandler(regs*)+0x6cb>
c001ed9b:	0f b7 d7             	movzx  edx,di
c001ed9e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001eda1:	0f b7 c6             	movzx  eax,si
c001eda4:	81 e1 00 04 00 00    	and    ecx,0x400
c001edaa:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001edad:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001edb2:	74 1d                	je     c001edd1 <Vm::faultHandler(regs*)+0x57b>
c001edb4:	55                   	push   ebp
c001edb5:	55                   	push   ebp
c001edb6:	50                   	push   eax
c001edb7:	52                   	push   edx
c001edb8:	e8 48 fa ff ff       	call   c001e805 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001edbd:	83 c4 10             	add    esp,0x10
c001edc0:	89 fa                	mov    edx,edi
c001edc2:	ef                   	out    dx,eax
c001edc3:	85 c9                	test   ecx,ecx
c001edc5:	74 05                	je     c001edcc <Vm::faultHandler(regs*)+0x576>
c001edc7:	83 ee 04             	sub    esi,0x4
c001edca:	eb 21                	jmp    c001eded <Vm::faultHandler(regs*)+0x597>
c001edcc:	83 c6 04             	add    esi,0x4
c001edcf:	eb 1c                	jmp    c001eded <Vm::faultHandler(regs*)+0x597>
c001edd1:	55                   	push   ebp
c001edd2:	55                   	push   ebp
c001edd3:	50                   	push   eax
c001edd4:	52                   	push   edx
c001edd5:	e8 19 fa ff ff       	call   c001e7f3 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001edda:	83 c4 10             	add    esp,0x10
c001eddd:	89 fa                	mov    edx,edi
c001eddf:	66 ef                	out    dx,ax
c001ede1:	85 c9                	test   ecx,ecx
c001ede3:	74 05                	je     c001edea <Vm::faultHandler(regs*)+0x594>
c001ede5:	83 ee 02             	sub    esi,0x2
c001ede8:	eb 03                	jmp    c001eded <Vm::faultHandler(regs*)+0x597>
c001edea:	83 c6 02             	add    esi,0x2
c001eded:	81 e6 ff ff 00 00    	and    esi,0xffff
c001edf3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001edf6:	e9 cb 00 00 00       	jmp    c001eec6 <Vm::faultHandler(regs*)+0x670>
c001edfb:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ee02:	83 ec 0c             	sub    esp,0xc
c001ee05:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee09:	50                   	push   eax
c001ee0a:	e8 42 f6 ff ff       	call   c001e451 <Vm::inbv(unsigned short)>
c001ee0f:	0f b6 c0             	movzx  eax,al
c001ee12:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ee15:	eb 3f                	jmp    c001ee56 <Vm::faultHandler(regs*)+0x600>
c001ee17:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee1c:	74 07                	je     c001ee25 <Vm::faultHandler(regs*)+0x5cf>
c001ee1e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee22:	ed                   	in     eax,dx
c001ee23:	eb 14                	jmp    c001ee39 <Vm::faultHandler(regs*)+0x5e3>
c001ee25:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001ee28:	66 31 f6             	xor    si,si
c001ee2b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001ee2e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee32:	66 ed                	in     ax,dx
c001ee34:	0f b7 c0             	movzx  eax,ax
c001ee37:	09 f0                	or     eax,esi
c001ee39:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ee3c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ee40:	e9 84 00 00 00       	jmp    c001eec9 <Vm::faultHandler(regs*)+0x673>
c001ee45:	52                   	push   edx
c001ee46:	52                   	push   edx
c001ee47:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ee4b:	50                   	push   eax
c001ee4c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee50:	50                   	push   eax
c001ee51:	e8 0e f6 ff ff       	call   c001e464 <Vm::outbv(unsigned short, unsigned char)>
c001ee56:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ee5a:	eb 53                	jmp    c001eeaf <Vm::faultHandler(regs*)+0x659>
c001ee5c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ee5f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee63:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee68:	74 03                	je     c001ee6d <Vm::faultHandler(regs*)+0x617>
c001ee6a:	ef                   	out    dx,eax
c001ee6b:	eb cf                	jmp    c001ee3c <Vm::faultHandler(regs*)+0x5e6>
c001ee6d:	66 ef                	out    dx,ax
c001ee6f:	eb cb                	jmp    c001ee3c <Vm::faultHandler(regs*)+0x5e6>
c001ee71:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ee78:	83 ec 0c             	sub    esp,0xc
c001ee7b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ee7f:	50                   	push   eax
c001ee80:	e8 cc f5 ff ff       	call   c001e451 <Vm::inbv(unsigned short)>
c001ee85:	0f b6 c0             	movzx  eax,al
c001ee88:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ee8b:	eb 1f                	jmp    c001eeac <Vm::faultHandler(regs*)+0x656>
c001ee8d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ee90:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee95:	74 03                	je     c001ee9a <Vm::faultHandler(regs*)+0x644>
c001ee97:	ed                   	in     eax,dx
c001ee98:	eb 0d                	jmp    c001eea7 <Vm::faultHandler(regs*)+0x651>
c001ee9a:	66 ed                	in     ax,dx
c001ee9c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001ee9f:	0f b7 c0             	movzx  eax,ax
c001eea2:	66 31 d2             	xor    dx,dx
c001eea5:	09 d0                	or     eax,edx
c001eea7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001eeaa:	eb 1a                	jmp    c001eec6 <Vm::faultHandler(regs*)+0x670>
c001eeac:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eeaf:	83 c4 10             	add    esp,0x10
c001eeb2:	eb 15                	jmp    c001eec9 <Vm::faultHandler(regs*)+0x673>
c001eeb4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001eeb7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001eeba:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eebf:	74 03                	je     c001eec4 <Vm::faultHandler(regs*)+0x66e>
c001eec1:	ef                   	out    dx,eax
c001eec2:	eb 02                	jmp    c001eec6 <Vm::faultHandler(regs*)+0x670>
c001eec4:	66 ef                	out    dx,ax
c001eec6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eec9:	b0 01                	mov    al,0x1
c001eecb:	eb 56                	jmp    c001ef23 <Vm::faultHandler(regs*)+0x6cd>
c001eecd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eed1:	50                   	push   eax
c001eed2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eed6:	50                   	push   eax
c001eed7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eedb:	50                   	push   eax
c001eedc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eee0:	50                   	push   eax
c001eee1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eee5:	50                   	push   eax
c001eee6:	52                   	push   edx
c001eee7:	52                   	push   edx
c001eee8:	68 bf bc 02 c0       	push   0xc002bcbf
c001eeed:	e8 d5 37 ff ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c001eef2:	83 c4 20             	add    esp,0x20
c001eef5:	83 ec 0c             	sub    esp,0xc
c001eef8:	6a 60                	push   0x60
c001eefa:	e8 52 f5 ff ff       	call   c001e451 <Vm::inbv(unsigned short)>
c001eeff:	83 c4 10             	add    esp,0x10
c001ef02:	3c 1c                	cmp    al,0x1c
c001ef04:	74 04                	je     c001ef0a <Vm::faultHandler(regs*)+0x6b4>
c001ef06:	3c 5a                	cmp    al,0x5a
c001ef08:	75 eb                	jne    c001eef5 <Vm::faultHandler(regs*)+0x69f>
c001ef0a:	3c 5a                	cmp    al,0x5a
c001ef0c:	74 04                	je     c001ef12 <Vm::faultHandler(regs*)+0x6bc>
c001ef0e:	3c 1c                	cmp    al,0x1c
c001ef10:	75 0f                	jne    c001ef21 <Vm::faultHandler(regs*)+0x6cb>
c001ef12:	83 ec 0c             	sub    esp,0xc
c001ef15:	6a 60                	push   0x60
c001ef17:	e8 35 f5 ff ff       	call   c001e451 <Vm::inbv(unsigned short)>
c001ef1c:	83 c4 10             	add    esp,0x10
c001ef1f:	eb e9                	jmp    c001ef0a <Vm::faultHandler(regs*)+0x6b4>
c001ef21:	31 c0                	xor    eax,eax
c001ef23:	83 c4 1c             	add    esp,0x1c
c001ef26:	5b                   	pop    ebx
c001ef27:	5e                   	pop    esi
c001ef28:	5f                   	pop    edi
c001ef29:	5d                   	pop    ebp
c001ef2a:	c3                   	ret    

c001ef2b <Vm::fpuInternalTo32(unsigned long long)>:
c001ef2b:	57                   	push   edi
c001ef2c:	56                   	push   esi
c001ef2d:	53                   	push   ebx
c001ef2e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef36:	89 d6                	mov    esi,edx
c001ef38:	89 d7                	mov    edi,edx
c001ef3a:	89 c1                	mov    ecx,eax
c001ef3c:	c1 ef 14             	shr    edi,0x14
c001ef3f:	89 d3                	mov    ebx,edx
c001ef41:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ef47:	31 d2                	xor    edx,edx
c001ef49:	89 f8                	mov    eax,edi
c001ef4b:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ef51:	bf ff 00 00 00       	mov    edi,0xff
c001ef56:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ef5b:	83 d2 ff             	adc    edx,0xffffffff
c001ef5e:	39 c7                	cmp    edi,eax
c001ef60:	bf 00 00 00 00       	mov    edi,0x0
c001ef65:	19 d7                	sbb    edi,edx
c001ef67:	72 15                	jb     c001ef7e <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ef69:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ef6d:	c1 e0 17             	shl    eax,0x17
c001ef70:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ef76:	09 f1                	or     ecx,esi
c001ef78:	09 c1                	or     ecx,eax
c001ef7a:	89 cf                	mov    edi,ecx
c001ef7c:	eb 02                	jmp    c001ef80 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ef7e:	31 ff                	xor    edi,edi
c001ef80:	89 f8                	mov    eax,edi
c001ef82:	5b                   	pop    ebx
c001ef83:	5e                   	pop    esi
c001ef84:	5f                   	pop    edi
c001ef85:	c3                   	ret    

c001ef86 <Vm::fpuInternalTo64(unsigned long long)>:
c001ef86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ef8e:	c3                   	ret    

c001ef8f <Vm::fpu32ToInternal(unsigned int)>:
c001ef8f:	57                   	push   edi
c001ef90:	31 ff                	xor    edi,edi
c001ef92:	56                   	push   esi
c001ef93:	53                   	push   ebx
c001ef94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef98:	89 cb                	mov    ebx,ecx
c001ef9a:	89 ce                	mov    esi,ecx
c001ef9c:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001efa2:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001efa8:	c1 e9 17             	shr    ecx,0x17
c001efab:	89 f0                	mov    eax,esi
c001efad:	0f b6 d1             	movzx  edx,cl
c001efb0:	81 c2 80 03 00 00    	add    edx,0x380
c001efb6:	89 d1                	mov    ecx,edx
c001efb8:	89 fa                	mov    edx,edi
c001efba:	c1 e1 14             	shl    ecx,0x14
c001efbd:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001efc1:	c1 e0 1d             	shl    eax,0x1d
c001efc4:	89 d7                	mov    edi,edx
c001efc6:	89 c6                	mov    esi,eax
c001efc8:	89 ca                	mov    edx,ecx
c001efca:	89 f0                	mov    eax,esi
c001efcc:	09 fa                	or     edx,edi
c001efce:	09 da                	or     edx,ebx
c001efd0:	5b                   	pop    ebx
c001efd1:	5e                   	pop    esi
c001efd2:	5f                   	pop    edi
c001efd3:	c3                   	ret    

c001efd4 <Vm::fpu64ToInternal(unsigned long long)>:
c001efd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001efdc:	c3                   	ret    

c001efdd <Vm::fpuFloatToLong(unsigned long long)>:
c001efdd:	57                   	push   edi
c001efde:	31 c0                	xor    eax,eax
c001efe0:	56                   	push   esi
c001efe1:	31 d2                	xor    edx,edx
c001efe3:	53                   	push   ebx
c001efe4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001efe8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001efec:	89 d9                	mov    ecx,ebx
c001efee:	c1 e9 14             	shr    ecx,0x14
c001eff1:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001eff7:	89 cf                	mov    edi,ecx
c001eff9:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001efff:	78 33                	js     c001f034 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f001:	89 d9                	mov    ecx,ebx
c001f003:	89 f0                	mov    eax,esi
c001f005:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f00b:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f011:	89 ca                	mov    edx,ecx
c001f013:	b9 34 00 00 00       	mov    ecx,0x34
c001f018:	29 f9                	sub    ecx,edi
c001f01a:	0f ad d0             	shrd   eax,edx,cl
c001f01d:	d3 fa                	sar    edx,cl
c001f01f:	f6 c1 20             	test   cl,0x20
c001f022:	74 05                	je     c001f029 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f024:	89 d0                	mov    eax,edx
c001f026:	c1 fa 1f             	sar    edx,0x1f
c001f029:	85 db                	test   ebx,ebx
c001f02b:	79 07                	jns    c001f034 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f02d:	f7 d8                	neg    eax
c001f02f:	83 d2 00             	adc    edx,0x0
c001f032:	f7 da                	neg    edx
c001f034:	5b                   	pop    ebx
c001f035:	5e                   	pop    esi
c001f036:	5f                   	pop    edi
c001f037:	c3                   	ret    

c001f038 <Vm::fpuULongToFloat(unsigned long long)>:
c001f038:	57                   	push   edi
c001f039:	31 c9                	xor    ecx,ecx
c001f03b:	56                   	push   esi
c001f03c:	53                   	push   ebx
c001f03d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f041:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f045:	0f ba e7 14          	bt     edi,0x14
c001f049:	72 07                	jb     c001f052 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f04b:	01 f6                	add    esi,esi
c001f04d:	11 ff                	adc    edi,edi
c001f04f:	41                   	inc    ecx
c001f050:	eb f3                	jmp    c001f045 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f052:	89 fa                	mov    edx,edi
c001f054:	89 f0                	mov    eax,esi
c001f056:	bb 33 04 00 00       	mov    ebx,0x433
c001f05b:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f061:	29 cb                	sub    ebx,ecx
c001f063:	89 d9                	mov    ecx,ebx
c001f065:	5b                   	pop    ebx
c001f066:	c1 e1 14             	shl    ecx,0x14
c001f069:	5e                   	pop    esi
c001f06a:	09 ca                	or     edx,ecx
c001f06c:	5f                   	pop    edi
c001f06d:	c3                   	ret    

c001f06e <Vm::fpuLongToFloat(long long)>:
c001f06e:	56                   	push   esi
c001f06f:	31 c0                	xor    eax,eax
c001f071:	53                   	push   ebx
c001f072:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f076:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f07a:	39 c8                	cmp    eax,ecx
c001f07c:	19 d8                	sbb    eax,ebx
c001f07e:	7d 04                	jge    c001f084 <Vm::fpuLongToFloat(long long)+0x16>
c001f080:	31 f6                	xor    esi,esi
c001f082:	eb 0c                	jmp    c001f090 <Vm::fpuLongToFloat(long long)+0x22>
c001f084:	f7 d9                	neg    ecx
c001f086:	be 01 00 00 00       	mov    esi,0x1
c001f08b:	83 d3 00             	adc    ebx,0x0
c001f08e:	f7 db                	neg    ebx
c001f090:	31 c0                	xor    eax,eax
c001f092:	0f ba e3 14          	bt     ebx,0x14
c001f096:	72 07                	jb     c001f09f <Vm::fpuLongToFloat(long long)+0x31>
c001f098:	01 c9                	add    ecx,ecx
c001f09a:	11 db                	adc    ebx,ebx
c001f09c:	40                   	inc    eax
c001f09d:	eb f3                	jmp    c001f092 <Vm::fpuLongToFloat(long long)+0x24>
c001f09f:	ba 33 04 00 00       	mov    edx,0x433
c001f0a4:	29 c2                	sub    edx,eax
c001f0a6:	89 c8                	mov    eax,ecx
c001f0a8:	c1 e2 14             	shl    edx,0x14
c001f0ab:	89 d9                	mov    ecx,ebx
c001f0ad:	89 f3                	mov    ebx,esi
c001f0af:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f0b5:	09 ca                	or     edx,ecx
c001f0b7:	84 db                	test   bl,bl
c001f0b9:	74 06                	je     c001f0c1 <Vm::fpuLongToFloat(long long)+0x53>
c001f0bb:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f0c1:	5b                   	pop    ebx
c001f0c2:	5e                   	pop    esi
c001f0c3:	c3                   	ret    

c001f0c4 <Vm::fpuGet0()>:
c001f0c4:	31 c0                	xor    eax,eax
c001f0c6:	31 d2                	xor    edx,edx
c001f0c8:	c3                   	ret    

c001f0c9 <Vm::fpuGet1()>:
c001f0c9:	b8 01 00 00 00       	mov    eax,0x1
c001f0ce:	31 d2                	xor    edx,edx
c001f0d0:	c3                   	ret    

c001f0d1 <Vm::fpuGetPi()>:
c001f0d1:	b8 03 00 00 00       	mov    eax,0x3
c001f0d6:	31 d2                	xor    edx,edx
c001f0d8:	c3                   	ret    

c001f0d9 <Vm::fpuGetLog2E()>:
c001f0d9:	83 ec 18             	sub    esp,0x18
c001f0dc:	68 1c bd 02 c0       	push   0xc002bd1c
c001f0e1:	e8 4d ad ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c001f0e6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f0eb:	31 d2                	xor    edx,edx
c001f0ed:	83 c4 1c             	add    esp,0x1c
c001f0f0:	c3                   	ret    

c001f0f1 <Vm::fpuGetLogE2()>:
c001f0f1:	83 ec 18             	sub    esp,0x18
c001f0f4:	68 28 bd 02 c0       	push   0xc002bd28
c001f0f9:	e8 35 ad ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c001f0fe:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f103:	31 d2                	xor    edx,edx
c001f105:	83 c4 1c             	add    esp,0x1c
c001f108:	c3                   	ret    

c001f109 <Vm::fpuGetLog210()>:
c001f109:	83 ec 18             	sub    esp,0x18
c001f10c:	68 34 bd 02 c0       	push   0xc002bd34
c001f111:	e8 1d ad ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c001f116:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f11b:	31 d2                	xor    edx,edx
c001f11d:	83 c4 1c             	add    esp,0x1c
c001f120:	c3                   	ret    

c001f121 <Vm::fpuGetLog102()>:
c001f121:	83 ec 18             	sub    esp,0x18
c001f124:	68 41 bd 02 c0       	push   0xc002bd41
c001f129:	e8 05 ad ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c001f12e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f133:	31 d2                	xor    edx,edx
c001f135:	83 c4 1c             	add    esp,0x1c
c001f138:	c3                   	ret    

c001f139 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f139:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f13d:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f141:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f145:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f149:	0f 92 c0             	setb   al
c001f14c:	c3                   	ret    

c001f14d <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f14d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f155:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f159:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f15d:	09 c2                	or     edx,eax
c001f15f:	0f 94 c0             	sete   al
c001f162:	c3                   	ret    

c001f163 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f163:	57                   	push   edi
c001f164:	56                   	push   esi
c001f165:	53                   	push   ebx
c001f166:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f16a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f16e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f172:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f176:	57                   	push   edi
c001f177:	56                   	push   esi
c001f178:	53                   	push   ebx
c001f179:	51                   	push   ecx
c001f17a:	e8 ce ff ff ff       	call   c001f14d <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f17f:	83 c4 10             	add    esp,0x10
c001f182:	88 c2                	mov    dl,al
c001f184:	31 c0                	xor    eax,eax
c001f186:	84 d2                	test   dl,dl
c001f188:	75 0c                	jne    c001f196 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f18a:	57                   	push   edi
c001f18b:	56                   	push   esi
c001f18c:	53                   	push   ebx
c001f18d:	51                   	push   ecx
c001f18e:	e8 a6 ff ff ff       	call   c001f139 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f193:	83 c4 10             	add    esp,0x10
c001f196:	83 e0 01             	and    eax,0x1
c001f199:	5b                   	pop    ebx
c001f19a:	88 c1                	mov    cl,al
c001f19c:	83 e2 01             	and    edx,0x1
c001f19f:	a0 c1 0e 03 c0       	mov    al,ds:0xc0030ec1
c001f1a4:	c1 e2 06             	shl    edx,0x6
c001f1a7:	83 e0 ba             	and    eax,0xffffffba
c001f1aa:	5e                   	pop    esi
c001f1ab:	09 c8                	or     eax,ecx
c001f1ad:	5f                   	pop    edi
c001f1ae:	09 d0                	or     eax,edx
c001f1b0:	a2 c1 0e 03 c0       	mov    ds:0xc0030ec1,al
c001f1b5:	c3                   	ret    

c001f1b6 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f1b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f1ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1be:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f1c2:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f1c6:	c3                   	ret    

c001f1c7 <Vm::fpuAbs(unsigned long long)>:
c001f1c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f1cf:	c3                   	ret    

c001f1d0 <Vm::fpuChs(unsigned long long)>:
c001f1d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f1d8:	f7 d8                	neg    eax
c001f1da:	83 d2 00             	adc    edx,0x0
c001f1dd:	f7 da                	neg    edx
c001f1df:	c3                   	ret    

c001f1e0 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f1e0:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f1e4:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f1e9:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f1ed:	eb c7                	jmp    c001f1b6 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f1ef <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f1ef:	53                   	push   ebx
c001f1f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f1f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f1fc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f200:	0f af ca             	imul   ecx,edx
c001f203:	0f af d8             	imul   ebx,eax
c001f206:	f7 e2                	mul    edx
c001f208:	01 d9                	add    ecx,ebx
c001f20a:	5b                   	pop    ebx
c001f20b:	01 ca                	add    edx,ecx
c001f20d:	c3                   	ret    

c001f20e <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f20e:	83 ec 0c             	sub    esp,0xc
c001f211:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f215:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f219:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f21d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f221:	e8 de 74 00 00       	call   c0026704 <__udivdi3>
c001f226:	83 c4 1c             	add    esp,0x1c
c001f229:	c3                   	ret    

c001f22a <Vm::fpuSquare(unsigned long long)>:
c001f22a:	50                   	push   eax
c001f22b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f22f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f233:	52                   	push   edx
c001f234:	50                   	push   eax
c001f235:	52                   	push   edx
c001f236:	50                   	push   eax
c001f237:	e8 b3 ff ff ff       	call   c001f1ef <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f23c:	83 c4 14             	add    esp,0x14
c001f23f:	c3                   	ret    

c001f240 <Vm::fpuGetReg(int)>:
c001f240:	83 ec 0c             	sub    esp,0xc
c001f243:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f248:	76 10                	jbe    c001f25a <Vm::fpuGetReg(int)+0x1a>
c001f24a:	83 ec 0c             	sub    esp,0xc
c001f24d:	68 4e bd 02 c0       	push   0xc002bd4e
c001f252:	e8 dc ab ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c001f257:	83 c4 10             	add    esp,0x10
c001f25a:	a0 c1 0e 03 c0       	mov    al,ds:0xc0030ec1
c001f25f:	b9 08 00 00 00       	mov    ecx,0x8
c001f264:	c0 e8 03             	shr    al,0x3
c001f267:	83 e0 07             	and    eax,0x7
c001f26a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f26e:	99                   	cdq    
c001f26f:	f7 f9                	idiv   ecx
c001f271:	8b 04 d5 c4 0e 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcf13c]
c001f278:	8b 14 d5 c8 0e 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcf138]
c001f27f:	83 c4 0c             	add    esp,0xc
c001f282:	c3                   	ret    

c001f283 <Vm::fpuSetReg(int, unsigned long long)>:
c001f283:	57                   	push   edi
c001f284:	56                   	push   esi
c001f285:	52                   	push   edx
c001f286:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f28a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f28e:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f293:	76 10                	jbe    c001f2a5 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f295:	83 ec 0c             	sub    esp,0xc
c001f298:	68 61 bd 02 c0       	push   0xc002bd61
c001f29d:	e8 91 ab ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c001f2a2:	83 c4 10             	add    esp,0x10
c001f2a5:	a0 c1 0e 03 c0       	mov    al,ds:0xc0030ec1
c001f2aa:	b9 08 00 00 00       	mov    ecx,0x8
c001f2af:	c0 e8 03             	shr    al,0x3
c001f2b2:	83 e0 07             	and    eax,0x7
c001f2b5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f2b9:	99                   	cdq    
c001f2ba:	f7 f9                	idiv   ecx
c001f2bc:	89 34 d5 c4 0e 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf13c],esi
c001f2c3:	89 3c d5 c8 0e 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf138],edi
c001f2ca:	58                   	pop    eax
c001f2cb:	5e                   	pop    esi
c001f2cc:	5f                   	pop    edi
c001f2cd:	c3                   	ret    

c001f2ce <Vm::fpuPush(unsigned long long)>:
c001f2ce:	a0 c1 0e 03 c0       	mov    al,ds:0xc0030ec1
c001f2d3:	c0 e8 03             	shr    al,0x3
c001f2d6:	83 e0 07             	and    eax,0x7
c001f2d9:	83 c0 07             	add    eax,0x7
c001f2dc:	88 c2                	mov    dl,al
c001f2de:	83 e0 07             	and    eax,0x7
c001f2e1:	83 e2 07             	and    edx,0x7
c001f2e4:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f2eb:	8a 15 c1 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030ec1
c001f2f1:	83 e2 c7             	and    edx,0xffffffc7
c001f2f4:	09 ca                	or     edx,ecx
c001f2f6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2fa:	88 15 c1 0e 03 c0    	mov    BYTE PTR ds:0xc0030ec1,dl
c001f300:	89 0c c5 c8 0e 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf138],ecx
c001f307:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f30b:	89 14 c5 c4 0e 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf13c],edx
c001f312:	a1 04 0f 03 c0       	mov    eax,ds:0xc0030f04
c001f317:	83 f8 08             	cmp    eax,0x8
c001f31a:	75 08                	jne    c001f324 <Vm::fpuPush(unsigned long long)+0x56>
c001f31c:	80 0d c0 0e 03 c0 40 	or     BYTE PTR ds:0xc0030ec0,0x40
c001f323:	c3                   	ret    
c001f324:	40                   	inc    eax
c001f325:	a3 04 0f 03 c0       	mov    ds:0xc0030f04,eax
c001f32a:	c3                   	ret    

c001f32b <Vm::fpuPop()>:
c001f32b:	8a 0d c1 0e 03 c0    	mov    cl,BYTE PTR ds:0xc0030ec1
c001f331:	53                   	push   ebx
c001f332:	c0 e9 03             	shr    cl,0x3
c001f335:	8a 1d c1 0e 03 c0    	mov    bl,BYTE PTR ds:0xc0030ec1
c001f33b:	83 e1 07             	and    ecx,0x7
c001f33e:	83 e3 c7             	and    ebx,0xffffffc7
c001f341:	8b 04 cd c4 0e 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcf13c]
c001f348:	8b 14 cd c8 0e 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcf138]
c001f34f:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f356:	83 e1 38             	and    ecx,0x38
c001f359:	09 d9                	or     ecx,ebx
c001f35b:	88 0d c1 0e 03 c0    	mov    BYTE PTR ds:0xc0030ec1,cl
c001f361:	8b 0d 04 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f04
c001f367:	85 c9                	test   ecx,ecx
c001f369:	74 09                	je     c001f374 <Vm::fpuPop()+0x49>
c001f36b:	49                   	dec    ecx
c001f36c:	89 0d 04 0f 03 c0    	mov    DWORD PTR ds:0xc0030f04,ecx
c001f372:	eb 07                	jmp    c001f37b <Vm::fpuPop()+0x50>
c001f374:	80 0d c0 0e 03 c0 40 	or     BYTE PTR ds:0xc0030ec0,0x40
c001f37b:	5b                   	pop    ebx
c001f37c:	c3                   	ret    

c001f37d <Vm::x87Handler(regs*)>:
c001f37d:	55                   	push   ebp
c001f37e:	57                   	push   edi
c001f37f:	56                   	push   esi
c001f380:	53                   	push   ebx
c001f381:	83 ec 1c             	sub    esp,0x1c
c001f384:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f388:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f38d:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f390:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f398:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f39c:	50                   	push   eax
c001f39d:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f3a1:	50                   	push   eax
c001f3a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f3a6:	50                   	push   eax
c001f3a7:	53                   	push   ebx
c001f3a8:	e8 9f a1 ff ff       	call   c001954c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f3ad:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f3b0:	83 c4 10             	add    esp,0x10
c001f3b3:	89 c6                	mov    esi,eax
c001f3b5:	80 fa d9             	cmp    dl,0xd9
c001f3b8:	0f 85 52 01 00 00    	jne    c001f510 <Vm::x87Handler(regs*)+0x193>
c001f3be:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3c2:	8d 50 20             	lea    edx,[eax+0x20]
c001f3c5:	80 fa 0e             	cmp    dl,0xe
c001f3c8:	0f 87 86 00 00 00    	ja     c001f454 <Vm::x87Handler(regs*)+0xd7>
c001f3ce:	0f b6 d2             	movzx  edx,dl
c001f3d1:	ff 24 95 74 bd 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd428c]
c001f3d8:	e8 e7 fc ff ff       	call   c001f0c4 <Vm::fpuGet0()>
c001f3dd:	eb 05                	jmp    c001f3e4 <Vm::x87Handler(regs*)+0x67>
c001f3df:	e8 e5 fc ff ff       	call   c001f0c9 <Vm::fpuGet1()>
c001f3e4:	57                   	push   edi
c001f3e5:	57                   	push   edi
c001f3e6:	52                   	push   edx
c001f3e7:	50                   	push   eax
c001f3e8:	e8 e1 fe ff ff       	call   c001f2ce <Vm::fpuPush(unsigned long long)>
c001f3ed:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f3f1:	83 c4 10             	add    esp,0x10
c001f3f4:	b0 01                	mov    al,0x1
c001f3f6:	e9 e3 09 00 00       	jmp    c001fdde <Vm::x87Handler(regs*)+0xa61>
c001f3fb:	83 ec 0c             	sub    esp,0xc
c001f3fe:	6a 00                	push   0x0
c001f400:	e8 3b fe ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f405:	59                   	pop    ecx
c001f406:	5e                   	pop    esi
c001f407:	52                   	push   edx
c001f408:	50                   	push   eax
c001f409:	e8 c2 fd ff ff       	call   c001f1d0 <Vm::fpuChs(unsigned long long)>
c001f40e:	eb 13                	jmp    c001f423 <Vm::x87Handler(regs*)+0xa6>
c001f410:	83 ec 0c             	sub    esp,0xc
c001f413:	6a 00                	push   0x0
c001f415:	e8 26 fe ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f41a:	5f                   	pop    edi
c001f41b:	5d                   	pop    ebp
c001f41c:	52                   	push   edx
c001f41d:	50                   	push   eax
c001f41e:	e8 a4 fd ff ff       	call   c001f1c7 <Vm::fpuAbs(unsigned long long)>
c001f423:	83 c4 0c             	add    esp,0xc
c001f426:	52                   	push   edx
c001f427:	50                   	push   eax
c001f428:	6a 00                	push   0x0
c001f42a:	e8 54 fe ff ff       	call   c001f283 <Vm::fpuSetReg(int, unsigned long long)>
c001f42f:	eb bc                	jmp    c001f3ed <Vm::x87Handler(regs*)+0x70>
c001f431:	e8 d3 fc ff ff       	call   c001f109 <Vm::fpuGetLog210()>
c001f436:	eb ac                	jmp    c001f3e4 <Vm::x87Handler(regs*)+0x67>
c001f438:	e8 9c fc ff ff       	call   c001f0d9 <Vm::fpuGetLog2E()>
c001f43d:	eb a5                	jmp    c001f3e4 <Vm::x87Handler(regs*)+0x67>
c001f43f:	e8 8d fc ff ff       	call   c001f0d1 <Vm::fpuGetPi()>
c001f444:	eb 9e                	jmp    c001f3e4 <Vm::x87Handler(regs*)+0x67>
c001f446:	e8 d6 fc ff ff       	call   c001f121 <Vm::fpuGetLog102()>
c001f44b:	eb 97                	jmp    c001f3e4 <Vm::x87Handler(regs*)+0x67>
c001f44d:	e8 9f fc ff ff       	call   c001f0f1 <Vm::fpuGetLogE2()>
c001f452:	eb 90                	jmp    c001f3e4 <Vm::x87Handler(regs*)+0x67>
c001f454:	8d 50 40             	lea    edx,[eax+0x40]
c001f457:	80 fa 07             	cmp    dl,0x7
c001f45a:	77 15                	ja     c001f471 <Vm::x87Handler(regs*)+0xf4>
c001f45c:	83 ec 0c             	sub    esp,0xc
c001f45f:	2d c0 00 00 00       	sub    eax,0xc0
c001f464:	50                   	push   eax
c001f465:	e8 d6 fd ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f46a:	59                   	pop    ecx
c001f46b:	5e                   	pop    esi
c001f46c:	e9 75 ff ff ff       	jmp    c001f3e6 <Vm::x87Handler(regs*)+0x69>
c001f471:	8d 50 38             	lea    edx,[eax+0x38]
c001f474:	80 fa 07             	cmp    dl,0x7
c001f477:	77 3c                	ja     c001f4b5 <Vm::x87Handler(regs*)+0x138>
c001f479:	83 ec 0c             	sub    esp,0xc
c001f47c:	2d c8 00 00 00       	sub    eax,0xc8
c001f481:	50                   	push   eax
c001f482:	e8 b9 fd ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f487:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f48e:	89 c6                	mov    esi,eax
c001f490:	89 d7                	mov    edi,edx
c001f492:	e8 a9 fd ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f497:	83 c4 0c             	add    esp,0xc
c001f49a:	52                   	push   edx
c001f49b:	50                   	push   eax
c001f49c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4a0:	2d c8 00 00 00       	sub    eax,0xc8
c001f4a5:	50                   	push   eax
c001f4a6:	e8 d8 fd ff ff       	call   c001f283 <Vm::fpuSetReg(int, unsigned long long)>
c001f4ab:	83 c4 0c             	add    esp,0xc
c001f4ae:	57                   	push   edi
c001f4af:	56                   	push   esi
c001f4b0:	e9 73 ff ff ff       	jmp    c001f428 <Vm::x87Handler(regs*)+0xab>
c001f4b5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f4b9:	84 d2                	test   dl,dl
c001f4bb:	75 0f                	jne    c001f4cc <Vm::x87Handler(regs*)+0x14f>
c001f4bd:	83 ec 0c             	sub    esp,0xc
c001f4c0:	ff 36                	push   DWORD PTR [esi]
c001f4c2:	e8 c8 fa ff ff       	call   c001ef8f <Vm::fpu32ToInternal(unsigned int)>
c001f4c7:	e9 bf 00 00 00       	jmp    c001f58b <Vm::x87Handler(regs*)+0x20e>
c001f4cc:	80 fa 03             	cmp    dl,0x3
c001f4cf:	75 13                	jne    c001f4e4 <Vm::x87Handler(regs*)+0x167>
c001f4d1:	e8 55 fe ff ff       	call   c001f32b <Vm::fpuPop()>
c001f4d6:	55                   	push   ebp
c001f4d7:	55                   	push   ebp
c001f4d8:	52                   	push   edx
c001f4d9:	50                   	push   eax
c001f4da:	e8 4c fa ff ff       	call   c001ef2b <Vm::fpuInternalTo32(unsigned long long)>
c001f4df:	e9 88 00 00 00       	jmp    c001f56c <Vm::x87Handler(regs*)+0x1ef>
c001f4e4:	80 fa 05             	cmp    dl,0x5
c001f4e7:	75 0e                	jne    c001f4f7 <Vm::x87Handler(regs*)+0x17a>
c001f4e9:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f4ec:	66 a3 c2 0e 03 c0    	mov    ds:0xc0030ec2,ax
c001f4f2:	e9 df 00 00 00       	jmp    c001f5d6 <Vm::x87Handler(regs*)+0x259>
c001f4f7:	31 c0                	xor    eax,eax
c001f4f9:	80 fa 07             	cmp    dl,0x7
c001f4fc:	0f 85 dc 08 00 00    	jne    c001fdde <Vm::x87Handler(regs*)+0xa61>
c001f502:	66 a1 c2 0e 03 c0    	mov    ax,ds:0xc0030ec2
c001f508:	66 89 06             	mov    WORD PTR [esi],ax
c001f50b:	e9 c6 00 00 00       	jmp    c001f5d6 <Vm::x87Handler(regs*)+0x259>
c001f510:	80 fa d8             	cmp    dl,0xd8
c001f513:	0f 84 c9 00 00 00    	je     c001f5e2 <Vm::x87Handler(regs*)+0x265>
c001f519:	80 fa dc             	cmp    dl,0xdc
c001f51c:	0f 84 0d 02 00 00    	je     c001f72f <Vm::x87Handler(regs*)+0x3b2>
c001f522:	80 fa de             	cmp    dl,0xde
c001f525:	0f 84 cd 02 00 00    	je     c001f7f8 <Vm::x87Handler(regs*)+0x47b>
c001f52b:	80 fa dd             	cmp    dl,0xdd
c001f52e:	0f 84 5f 04 00 00    	je     c001f993 <Vm::x87Handler(regs*)+0x616>
c001f534:	80 fa da             	cmp    dl,0xda
c001f537:	0f 84 24 05 00 00    	je     c001fa61 <Vm::x87Handler(regs*)+0x6e4>
c001f53d:	80 fa df             	cmp    dl,0xdf
c001f540:	0f 84 68 05 00 00    	je     c001faae <Vm::x87Handler(regs*)+0x731>
c001f546:	31 c0                	xor    eax,eax
c001f548:	80 fa db             	cmp    dl,0xdb
c001f54b:	0f 85 8d 08 00 00    	jne    c001fdde <Vm::x87Handler(regs*)+0xa61>
c001f551:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f555:	80 fa 03             	cmp    dl,0x3
c001f558:	0f 85 70 06 00 00    	jne    c001fbce <Vm::x87Handler(regs*)+0x851>
c001f55e:	e8 c8 fd ff ff       	call   c001f32b <Vm::fpuPop()>
c001f563:	55                   	push   ebp
c001f564:	55                   	push   ebp
c001f565:	52                   	push   edx
c001f566:	50                   	push   eax
c001f567:	e8 71 fa ff ff       	call   c001efdd <Vm::fpuFloatToLong(unsigned long long)>
c001f56c:	83 c4 10             	add    esp,0x10
c001f56f:	89 06                	mov    DWORD PTR [esi],eax
c001f571:	eb 63                	jmp    c001f5d6 <Vm::x87Handler(regs*)+0x259>
c001f573:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f577:	84 d2                	test   dl,dl
c001f579:	0f 85 e6 05 00 00    	jne    c001fb65 <Vm::x87Handler(regs*)+0x7e8>
c001f57f:	57                   	push   edi
c001f580:	57                   	push   edi
c001f581:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f584:	ff 36                	push   DWORD PTR [esi]
c001f586:	e8 49 fa ff ff       	call   c001efd4 <Vm::fpu64ToInternal(unsigned long long)>
c001f58b:	5e                   	pop    esi
c001f58c:	5f                   	pop    edi
c001f58d:	52                   	push   edx
c001f58e:	50                   	push   eax
c001f58f:	e8 3a fd ff ff       	call   c001f2ce <Vm::fpuPush(unsigned long long)>
c001f594:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f598:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f59b:	e9 51 fe ff ff       	jmp    c001f3f1 <Vm::x87Handler(regs*)+0x74>
c001f5a0:	80 fa 03             	cmp    dl,0x3
c001f5a3:	0f 85 d7 06 00 00    	jne    c001fc80 <Vm::x87Handler(regs*)+0x903>
c001f5a9:	57                   	push   edi
c001f5aa:	57                   	push   edi
c001f5ab:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f5ae:	ff 36                	push   DWORD PTR [esi]
c001f5b0:	e8 1f fa ff ff       	call   c001efd4 <Vm::fpu64ToInternal(unsigned long long)>
c001f5b5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5bc:	89 c6                	mov    esi,eax
c001f5be:	89 d7                	mov    edi,edx
c001f5c0:	e8 7b fc ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f5c5:	57                   	push   edi
c001f5c6:	56                   	push   esi
c001f5c7:	52                   	push   edx
c001f5c8:	50                   	push   eax
c001f5c9:	e8 95 fb ff ff       	call   c001f163 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f5ce:	83 c4 20             	add    esp,0x20
c001f5d1:	e8 55 fd ff ff       	call   c001f32b <Vm::fpuPop()>
c001f5d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f5da:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f5dd:	e9 12 fe ff ff       	jmp    c001f3f4 <Vm::x87Handler(regs*)+0x77>
c001f5e2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5e6:	8d 50 40             	lea    edx,[eax+0x40]
c001f5e9:	80 fa 07             	cmp    dl,0x7
c001f5ec:	77 29                	ja     c001f617 <Vm::x87Handler(regs*)+0x29a>
c001f5ee:	83 ec 0c             	sub    esp,0xc
c001f5f1:	2d c0 00 00 00       	sub    eax,0xc0
c001f5f6:	50                   	push   eax
c001f5f7:	e8 44 fc ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f5fc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f603:	89 c6                	mov    esi,eax
c001f605:	89 d7                	mov    edi,edx
c001f607:	e8 34 fc ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f60c:	57                   	push   edi
c001f60d:	56                   	push   esi
c001f60e:	52                   	push   edx
c001f60f:	50                   	push   eax
c001f610:	e8 a1 fb ff ff       	call   c001f1b6 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f615:	eb 2f                	jmp    c001f646 <Vm::x87Handler(regs*)+0x2c9>
c001f617:	8d 50 38             	lea    edx,[eax+0x38]
c001f61a:	80 fa 07             	cmp    dl,0x7
c001f61d:	77 2f                	ja     c001f64e <Vm::x87Handler(regs*)+0x2d1>
c001f61f:	83 ec 0c             	sub    esp,0xc
c001f622:	2d c8 00 00 00       	sub    eax,0xc8
c001f627:	50                   	push   eax
c001f628:	e8 13 fc ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f62d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f634:	89 c6                	mov    esi,eax
c001f636:	89 d7                	mov    edi,edx
c001f638:	e8 03 fc ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f63d:	57                   	push   edi
c001f63e:	56                   	push   esi
c001f63f:	52                   	push   edx
c001f640:	50                   	push   eax
c001f641:	e8 a9 fb ff ff       	call   c001f1ef <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f646:	83 c4 1c             	add    esp,0x1c
c001f649:	e9 d8 fd ff ff       	jmp    c001f426 <Vm::x87Handler(regs*)+0xa9>
c001f64e:	8d 50 30             	lea    edx,[eax+0x30]
c001f651:	80 fa 07             	cmp    dl,0x7
c001f654:	77 0d                	ja     c001f663 <Vm::x87Handler(regs*)+0x2e6>
c001f656:	83 ec 0c             	sub    esp,0xc
c001f659:	2d d0 00 00 00       	sub    eax,0xd0
c001f65e:	e9 99 03 00 00       	jmp    c001f9fc <Vm::x87Handler(regs*)+0x67f>
c001f663:	8d 50 28             	lea    edx,[eax+0x28]
c001f666:	80 fa 07             	cmp    dl,0x7
c001f669:	77 0d                	ja     c001f678 <Vm::x87Handler(regs*)+0x2fb>
c001f66b:	83 ec 0c             	sub    esp,0xc
c001f66e:	2d d8 00 00 00       	sub    eax,0xd8
c001f673:	e9 c0 03 00 00       	jmp    c001fa38 <Vm::x87Handler(regs*)+0x6bb>
c001f678:	8d 50 20             	lea    edx,[eax+0x20]
c001f67b:	80 fa 07             	cmp    dl,0x7
c001f67e:	77 1b                	ja     c001f69b <Vm::x87Handler(regs*)+0x31e>
c001f680:	83 ec 0c             	sub    esp,0xc
c001f683:	2d e0 00 00 00       	sub    eax,0xe0
c001f688:	50                   	push   eax
c001f689:	e8 b2 fb ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f68e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f695:	89 c6                	mov    esi,eax
c001f697:	89 d7                	mov    edi,edx
c001f699:	eb 22                	jmp    c001f6bd <Vm::x87Handler(regs*)+0x340>
c001f69b:	8d 50 18             	lea    edx,[eax+0x18]
c001f69e:	80 fa 07             	cmp    dl,0x7
c001f6a1:	77 2d                	ja     c001f6d0 <Vm::x87Handler(regs*)+0x353>
c001f6a3:	83 ec 0c             	sub    esp,0xc
c001f6a6:	6a 00                	push   0x0
c001f6a8:	e8 93 fb ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f6ad:	89 c6                	mov    esi,eax
c001f6af:	89 d7                	mov    edi,edx
c001f6b1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6b5:	2d e8 00 00 00       	sub    eax,0xe8
c001f6ba:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6bd:	e8 7e fb ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f6c2:	57                   	push   edi
c001f6c3:	56                   	push   esi
c001f6c4:	52                   	push   edx
c001f6c5:	50                   	push   eax
c001f6c6:	e8 15 fb ff ff       	call   c001f1e0 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f6cb:	e9 76 ff ff ff       	jmp    c001f646 <Vm::x87Handler(regs*)+0x2c9>
c001f6d0:	8d 50 10             	lea    edx,[eax+0x10]
c001f6d3:	80 fa 07             	cmp    dl,0x7
c001f6d6:	77 1b                	ja     c001f6f3 <Vm::x87Handler(regs*)+0x376>
c001f6d8:	83 ec 0c             	sub    esp,0xc
c001f6db:	2d f0 00 00 00       	sub    eax,0xf0
c001f6e0:	50                   	push   eax
c001f6e1:	e8 5a fb ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f6e6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6ed:	89 c6                	mov    esi,eax
c001f6ef:	89 d7                	mov    edi,edx
c001f6f1:	eb 22                	jmp    c001f715 <Vm::x87Handler(regs*)+0x398>
c001f6f3:	3c f7                	cmp    al,0xf7
c001f6f5:	0f 86 d1 03 00 00    	jbe    c001facc <Vm::x87Handler(regs*)+0x74f>
c001f6fb:	83 ec 0c             	sub    esp,0xc
c001f6fe:	6a 00                	push   0x0
c001f700:	e8 3b fb ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f705:	89 c6                	mov    esi,eax
c001f707:	89 d7                	mov    edi,edx
c001f709:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f70d:	2d f8 00 00 00       	sub    eax,0xf8
c001f712:	89 04 24             	mov    DWORD PTR [esp],eax
c001f715:	e8 26 fb ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f71a:	57                   	push   edi
c001f71b:	56                   	push   esi
c001f71c:	52                   	push   edx
c001f71d:	50                   	push   eax
c001f71e:	e8 eb fa ff ff       	call   c001f20e <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f723:	83 c4 1c             	add    esp,0x1c
c001f726:	52                   	push   edx
c001f727:	50                   	push   eax
c001f728:	6a 00                	push   0x0
c001f72a:	e9 51 02 00 00       	jmp    c001f980 <Vm::x87Handler(regs*)+0x603>
c001f72f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f733:	8d 50 40             	lea    edx,[eax+0x40]
c001f736:	80 fa 07             	cmp    dl,0x7
c001f739:	77 37                	ja     c001f772 <Vm::x87Handler(regs*)+0x3f5>
c001f73b:	83 ec 0c             	sub    esp,0xc
c001f73e:	2d c0 00 00 00       	sub    eax,0xc0
c001f743:	50                   	push   eax
c001f744:	e8 f7 fa ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f749:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f750:	89 c6                	mov    esi,eax
c001f752:	89 d7                	mov    edi,edx
c001f754:	e8 e7 fa ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f759:	57                   	push   edi
c001f75a:	56                   	push   esi
c001f75b:	52                   	push   edx
c001f75c:	50                   	push   eax
c001f75d:	e8 54 fa ff ff       	call   c001f1b6 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f762:	83 c4 1c             	add    esp,0x1c
c001f765:	52                   	push   edx
c001f766:	50                   	push   eax
c001f767:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f76b:	2d c0 00 00 00       	sub    eax,0xc0
c001f770:	eb 3d                	jmp    c001f7af <Vm::x87Handler(regs*)+0x432>
c001f772:	8d 50 38             	lea    edx,[eax+0x38]
c001f775:	80 fa 07             	cmp    dl,0x7
c001f778:	77 3b                	ja     c001f7b5 <Vm::x87Handler(regs*)+0x438>
c001f77a:	83 ec 0c             	sub    esp,0xc
c001f77d:	2d c8 00 00 00       	sub    eax,0xc8
c001f782:	50                   	push   eax
c001f783:	e8 b8 fa ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f788:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f78f:	89 c6                	mov    esi,eax
c001f791:	89 d7                	mov    edi,edx
c001f793:	e8 a8 fa ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f798:	57                   	push   edi
c001f799:	56                   	push   esi
c001f79a:	52                   	push   edx
c001f79b:	50                   	push   eax
c001f79c:	e8 4e fa ff ff       	call   c001f1ef <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f7a1:	83 c4 1c             	add    esp,0x1c
c001f7a4:	52                   	push   edx
c001f7a5:	50                   	push   eax
c001f7a6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7aa:	2d c8 00 00 00       	sub    eax,0xc8
c001f7af:	50                   	push   eax
c001f7b0:	e9 75 fc ff ff       	jmp    c001f42a <Vm::x87Handler(regs*)+0xad>
c001f7b5:	83 c0 18             	add    eax,0x18
c001f7b8:	3c 07                	cmp    al,0x7
c001f7ba:	0f 87 3b 04 00 00    	ja     c001fbfb <Vm::x87Handler(regs*)+0x87e>
c001f7c0:	83 ec 0c             	sub    esp,0xc
c001f7c3:	6a 00                	push   0x0
c001f7c5:	e8 76 fa ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f7ca:	89 c6                	mov    esi,eax
c001f7cc:	89 d7                	mov    edi,edx
c001f7ce:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7d2:	2d e8 00 00 00       	sub    eax,0xe8
c001f7d7:	89 04 24             	mov    DWORD PTR [esp],eax
c001f7da:	e8 61 fa ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f7df:	57                   	push   edi
c001f7e0:	56                   	push   esi
c001f7e1:	52                   	push   edx
c001f7e2:	50                   	push   eax
c001f7e3:	e8 f8 f9 ff ff       	call   c001f1e0 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f7e8:	83 c4 1c             	add    esp,0x1c
c001f7eb:	52                   	push   edx
c001f7ec:	50                   	push   eax
c001f7ed:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7f1:	2d e8 00 00 00       	sub    eax,0xe8
c001f7f6:	eb b7                	jmp    c001f7af <Vm::x87Handler(regs*)+0x432>
c001f7f8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7fc:	8d 50 40             	lea    edx,[eax+0x40]
c001f7ff:	80 fa 07             	cmp    dl,0x7
c001f802:	77 3a                	ja     c001f83e <Vm::x87Handler(regs*)+0x4c1>
c001f804:	83 ec 0c             	sub    esp,0xc
c001f807:	2d c0 00 00 00       	sub    eax,0xc0
c001f80c:	50                   	push   eax
c001f80d:	e8 2e fa ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f812:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f819:	89 c6                	mov    esi,eax
c001f81b:	89 d7                	mov    edi,edx
c001f81d:	e8 1e fa ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f822:	57                   	push   edi
c001f823:	56                   	push   esi
c001f824:	52                   	push   edx
c001f825:	50                   	push   eax
c001f826:	e8 8b f9 ff ff       	call   c001f1b6 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f82b:	83 c4 1c             	add    esp,0x1c
c001f82e:	52                   	push   edx
c001f82f:	50                   	push   eax
c001f830:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f834:	2d c0 00 00 00       	sub    eax,0xc0
c001f839:	e9 9e 01 00 00       	jmp    c001f9dc <Vm::x87Handler(regs*)+0x65f>
c001f83e:	8d 50 20             	lea    edx,[eax+0x20]
c001f841:	80 fa 07             	cmp    dl,0x7
c001f844:	77 3a                	ja     c001f880 <Vm::x87Handler(regs*)+0x503>
c001f846:	83 ec 0c             	sub    esp,0xc
c001f849:	2d e0 00 00 00       	sub    eax,0xe0
c001f84e:	50                   	push   eax
c001f84f:	e8 ec f9 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f854:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f85b:	89 c6                	mov    esi,eax
c001f85d:	89 d7                	mov    edi,edx
c001f85f:	e8 dc f9 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f864:	57                   	push   edi
c001f865:	56                   	push   esi
c001f866:	52                   	push   edx
c001f867:	50                   	push   eax
c001f868:	e8 73 f9 ff ff       	call   c001f1e0 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f86d:	83 c4 1c             	add    esp,0x1c
c001f870:	52                   	push   edx
c001f871:	50                   	push   eax
c001f872:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f876:	2d e0 00 00 00       	sub    eax,0xe0
c001f87b:	e9 5c 01 00 00       	jmp    c001f9dc <Vm::x87Handler(regs*)+0x65f>
c001f880:	8d 50 18             	lea    edx,[eax+0x18]
c001f883:	80 fa 07             	cmp    dl,0x7
c001f886:	77 3b                	ja     c001f8c3 <Vm::x87Handler(regs*)+0x546>
c001f888:	83 ec 0c             	sub    esp,0xc
c001f88b:	6a 00                	push   0x0
c001f88d:	e8 ae f9 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f892:	89 c6                	mov    esi,eax
c001f894:	89 d7                	mov    edi,edx
c001f896:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f89a:	2d e8 00 00 00       	sub    eax,0xe8
c001f89f:	89 04 24             	mov    DWORD PTR [esp],eax
c001f8a2:	e8 99 f9 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f8a7:	57                   	push   edi
c001f8a8:	56                   	push   esi
c001f8a9:	52                   	push   edx
c001f8aa:	50                   	push   eax
c001f8ab:	e8 30 f9 ff ff       	call   c001f1e0 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f8b0:	83 c4 1c             	add    esp,0x1c
c001f8b3:	52                   	push   edx
c001f8b4:	50                   	push   eax
c001f8b5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8b9:	2d e8 00 00 00       	sub    eax,0xe8
c001f8be:	e9 19 01 00 00       	jmp    c001f9dc <Vm::x87Handler(regs*)+0x65f>
c001f8c3:	8d 50 38             	lea    edx,[eax+0x38]
c001f8c6:	80 fa 07             	cmp    dl,0x7
c001f8c9:	77 37                	ja     c001f902 <Vm::x87Handler(regs*)+0x585>
c001f8cb:	83 ec 0c             	sub    esp,0xc
c001f8ce:	2d c8 00 00 00       	sub    eax,0xc8
c001f8d3:	50                   	push   eax
c001f8d4:	e8 67 f9 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f8d9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8e0:	89 c6                	mov    esi,eax
c001f8e2:	89 d7                	mov    edi,edx
c001f8e4:	e8 57 f9 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f8e9:	57                   	push   edi
c001f8ea:	56                   	push   esi
c001f8eb:	52                   	push   edx
c001f8ec:	50                   	push   eax
c001f8ed:	e8 fd f8 ff ff       	call   c001f1ef <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f8f2:	83 c4 1c             	add    esp,0x1c
c001f8f5:	52                   	push   edx
c001f8f6:	50                   	push   eax
c001f8f7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8fb:	2d c8 00 00 00       	sub    eax,0xc8
c001f900:	eb 7d                	jmp    c001f97f <Vm::x87Handler(regs*)+0x602>
c001f902:	3c f7                	cmp    al,0xf7
c001f904:	76 38                	jbe    c001f93e <Vm::x87Handler(regs*)+0x5c1>
c001f906:	83 ec 0c             	sub    esp,0xc
c001f909:	6a 00                	push   0x0
c001f90b:	e8 30 f9 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f910:	89 c6                	mov    esi,eax
c001f912:	89 d7                	mov    edi,edx
c001f914:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f918:	2d f8 00 00 00       	sub    eax,0xf8
c001f91d:	89 04 24             	mov    DWORD PTR [esp],eax
c001f920:	e8 1b f9 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f925:	57                   	push   edi
c001f926:	56                   	push   esi
c001f927:	52                   	push   edx
c001f928:	50                   	push   eax
c001f929:	e8 e0 f8 ff ff       	call   c001f20e <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f92e:	83 c4 1c             	add    esp,0x1c
c001f931:	52                   	push   edx
c001f932:	50                   	push   eax
c001f933:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f937:	2d f8 00 00 00       	sub    eax,0xf8
c001f93c:	eb 41                	jmp    c001f97f <Vm::x87Handler(regs*)+0x602>
c001f93e:	8d 50 10             	lea    edx,[eax+0x10]
c001f941:	80 fa 07             	cmp    dl,0x7
c001f944:	0f 87 5a 01 00 00    	ja     c001faa4 <Vm::x87Handler(regs*)+0x727>
c001f94a:	83 ec 0c             	sub    esp,0xc
c001f94d:	2d f0 00 00 00       	sub    eax,0xf0
c001f952:	50                   	push   eax
c001f953:	e8 e8 f8 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f958:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f95f:	89 c6                	mov    esi,eax
c001f961:	89 d7                	mov    edi,edx
c001f963:	e8 d8 f8 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f968:	57                   	push   edi
c001f969:	56                   	push   esi
c001f96a:	52                   	push   edx
c001f96b:	50                   	push   eax
c001f96c:	e8 9d f8 ff ff       	call   c001f20e <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f971:	83 c4 1c             	add    esp,0x1c
c001f974:	52                   	push   edx
c001f975:	50                   	push   eax
c001f976:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f97a:	2d f0 00 00 00       	sub    eax,0xf0
c001f97f:	50                   	push   eax
c001f980:	e8 fe f8 ff ff       	call   c001f283 <Vm::fpuSetReg(int, unsigned long long)>
c001f985:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f989:	e8 9d f9 ff ff       	call   c001f32b <Vm::fpuPop()>
c001f98e:	e9 5e fa ff ff       	jmp    c001f3f1 <Vm::x87Handler(regs*)+0x74>
c001f993:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f997:	8d 50 30             	lea    edx,[eax+0x30]
c001f99a:	80 fa 07             	cmp    dl,0x7
c001f99d:	77 1d                	ja     c001f9bc <Vm::x87Handler(regs*)+0x63f>
c001f99f:	83 ec 0c             	sub    esp,0xc
c001f9a2:	6a 00                	push   0x0
c001f9a4:	e8 97 f8 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f9a9:	83 c4 0c             	add    esp,0xc
c001f9ac:	52                   	push   edx
c001f9ad:	50                   	push   eax
c001f9ae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9b2:	2d d0 00 00 00       	sub    eax,0xd0
c001f9b7:	e9 f3 fd ff ff       	jmp    c001f7af <Vm::x87Handler(regs*)+0x432>
c001f9bc:	8d 50 28             	lea    edx,[eax+0x28]
c001f9bf:	80 fa 07             	cmp    dl,0x7
c001f9c2:	77 28                	ja     c001f9ec <Vm::x87Handler(regs*)+0x66f>
c001f9c4:	83 ec 0c             	sub    esp,0xc
c001f9c7:	6a 00                	push   0x0
c001f9c9:	e8 72 f8 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001f9ce:	83 c4 0c             	add    esp,0xc
c001f9d1:	52                   	push   edx
c001f9d2:	50                   	push   eax
c001f9d3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9d7:	2d d8 00 00 00       	sub    eax,0xd8
c001f9dc:	50                   	push   eax
c001f9dd:	e8 a1 f8 ff ff       	call   c001f283 <Vm::fpuSetReg(int, unsigned long long)>
c001f9e2:	e8 44 f9 ff ff       	call   c001f32b <Vm::fpuPop()>
c001f9e7:	e9 01 fa ff ff       	jmp    c001f3ed <Vm::x87Handler(regs*)+0x70>
c001f9ec:	8d 50 20             	lea    edx,[eax+0x20]
c001f9ef:	80 fa 07             	cmp    dl,0x7
c001f9f2:	77 30                	ja     c001fa24 <Vm::x87Handler(regs*)+0x6a7>
c001f9f4:	83 ec 0c             	sub    esp,0xc
c001f9f7:	2d e0 00 00 00       	sub    eax,0xe0
c001f9fc:	50                   	push   eax
c001f9fd:	e8 3e f8 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001fa02:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa09:	89 c6                	mov    esi,eax
c001fa0b:	89 d7                	mov    edi,edx
c001fa0d:	e8 2e f8 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001fa12:	57                   	push   edi
c001fa13:	56                   	push   esi
c001fa14:	52                   	push   edx
c001fa15:	50                   	push   eax
c001fa16:	e8 48 f7 ff ff       	call   c001f163 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa1b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa1f:	e9 54 02 00 00       	jmp    c001fc78 <Vm::x87Handler(regs*)+0x8fb>
c001fa24:	8d 50 18             	lea    edx,[eax+0x18]
c001fa27:	80 fa 07             	cmp    dl,0x7
c001fa2a:	0f 87 43 fb ff ff    	ja     c001f573 <Vm::x87Handler(regs*)+0x1f6>
c001fa30:	83 ec 0c             	sub    esp,0xc
c001fa33:	2d e8 00 00 00       	sub    eax,0xe8
c001fa38:	50                   	push   eax
c001fa39:	e8 02 f8 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001fa3e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa45:	89 c6                	mov    esi,eax
c001fa47:	89 d7                	mov    edi,edx
c001fa49:	e8 f2 f7 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001fa4e:	57                   	push   edi
c001fa4f:	56                   	push   esi
c001fa50:	52                   	push   edx
c001fa51:	50                   	push   eax
c001fa52:	e8 0c f7 ff ff       	call   c001f163 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa57:	83 c4 20             	add    esp,0x20
c001fa5a:	e8 cc f8 ff ff       	call   c001f32b <Vm::fpuPop()>
c001fa5f:	eb 62                	jmp    c001fac3 <Vm::x87Handler(regs*)+0x746>
c001fa61:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fa65:	0f 85 0f 01 00 00    	jne    c001fb7a <Vm::x87Handler(regs*)+0x7fd>
c001fa6b:	83 ec 0c             	sub    esp,0xc
c001fa6e:	6a 01                	push   0x1
c001fa70:	e8 cb f7 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001fa75:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa7c:	89 c6                	mov    esi,eax
c001fa7e:	89 d7                	mov    edi,edx
c001fa80:	e8 bb f7 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001fa85:	57                   	push   edi
c001fa86:	56                   	push   esi
c001fa87:	52                   	push   edx
c001fa88:	50                   	push   eax
c001fa89:	e8 d5 f6 ff ff       	call   c001f163 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa8e:	83 c4 20             	add    esp,0x20
c001fa91:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa95:	e8 91 f8 ff ff       	call   c001f32b <Vm::fpuPop()>
c001fa9a:	e8 8c f8 ff ff       	call   c001f32b <Vm::fpuPop()>
c001fa9f:	e9 50 f9 ff ff       	jmp    c001f3f4 <Vm::x87Handler(regs*)+0x77>
c001faa4:	3c d9                	cmp    al,0xd9
c001faa6:	0f 85 b5 02 00 00    	jne    c001fd61 <Vm::x87Handler(regs*)+0x9e4>
c001faac:	eb bd                	jmp    c001fa6b <Vm::x87Handler(regs*)+0x6ee>
c001faae:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fab2:	0f 85 ea 02 00 00    	jne    c001fda2 <Vm::x87Handler(regs*)+0xa25>
c001fab8:	0f b7 05 c0 0e 03 c0 	movzx  eax,WORD PTR ds:0xc0030ec0
c001fabf:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fac3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fac7:	e9 28 f9 ff ff       	jmp    c001f3f4 <Vm::x87Handler(regs*)+0x77>
c001facc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fad0:	84 d2                	test   dl,dl
c001fad2:	75 0f                	jne    c001fae3 <Vm::x87Handler(regs*)+0x766>
c001fad4:	83 ec 0c             	sub    esp,0xc
c001fad7:	ff 36                	push   DWORD PTR [esi]
c001fad9:	e8 b1 f4 ff ff       	call   c001ef8f <Vm::fpu32ToInternal(unsigned int)>
c001fade:	e9 2c 01 00 00       	jmp    c001fc0f <Vm::x87Handler(regs*)+0x892>
c001fae3:	80 fa 01             	cmp    dl,0x1
c001fae6:	75 0f                	jne    c001faf7 <Vm::x87Handler(regs*)+0x77a>
c001fae8:	83 ec 0c             	sub    esp,0xc
c001faeb:	ff 36                	push   DWORD PTR [esi]
c001faed:	e8 9d f4 ff ff       	call   c001ef8f <Vm::fpu32ToInternal(unsigned int)>
c001faf2:	e9 81 02 00 00       	jmp    c001fd78 <Vm::x87Handler(regs*)+0x9fb>
c001faf7:	80 fa 04             	cmp    dl,0x4
c001fafa:	75 0f                	jne    c001fb0b <Vm::x87Handler(regs*)+0x78e>
c001fafc:	83 ec 0c             	sub    esp,0xc
c001faff:	ff 36                	push   DWORD PTR [esi]
c001fb01:	e8 89 f4 ff ff       	call   c001ef8f <Vm::fpu32ToInternal(unsigned int)>
c001fb06:	e9 86 01 00 00       	jmp    c001fc91 <Vm::x87Handler(regs*)+0x914>
c001fb0b:	80 fa 05             	cmp    dl,0x5
c001fb0e:	75 1b                	jne    c001fb2b <Vm::x87Handler(regs*)+0x7ae>
c001fb10:	83 ec 0c             	sub    esp,0xc
c001fb13:	6a 00                	push   0x0
c001fb15:	e8 26 f7 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001fb1a:	89 c7                	mov    edi,eax
c001fb1c:	89 d5                	mov    ebp,edx
c001fb1e:	58                   	pop    eax
c001fb1f:	ff 36                	push   DWORD PTR [esi]
c001fb21:	e8 69 f4 ff ff       	call   c001ef8f <Vm::fpu32ToInternal(unsigned int)>
c001fb26:	e9 a3 01 00 00       	jmp    c001fcce <Vm::x87Handler(regs*)+0x951>
c001fb2b:	80 fa 06             	cmp    dl,0x6
c001fb2e:	75 0f                	jne    c001fb3f <Vm::x87Handler(regs*)+0x7c2>
c001fb30:	83 ec 0c             	sub    esp,0xc
c001fb33:	ff 36                	push   DWORD PTR [esi]
c001fb35:	e8 55 f4 ff ff       	call   c001ef8f <Vm::fpu32ToInternal(unsigned int)>
c001fb3a:	e9 ae 01 00 00       	jmp    c001fced <Vm::x87Handler(regs*)+0x970>
c001fb3f:	31 c0                	xor    eax,eax
c001fb41:	80 fa 07             	cmp    dl,0x7
c001fb44:	0f 85 94 02 00 00    	jne    c001fdde <Vm::x87Handler(regs*)+0xa61>
c001fb4a:	83 ec 0c             	sub    esp,0xc
c001fb4d:	6a 00                	push   0x0
c001fb4f:	e8 ec f6 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001fb54:	89 c7                	mov    edi,eax
c001fb56:	89 d5                	mov    ebp,edx
c001fb58:	58                   	pop    eax
c001fb59:	ff 36                	push   DWORD PTR [esi]
c001fb5b:	e8 2f f4 ff ff       	call   c001ef8f <Vm::fpu32ToInternal(unsigned int)>
c001fb60:	e9 cb 01 00 00       	jmp    c001fd30 <Vm::x87Handler(regs*)+0x9b3>
c001fb65:	80 fa 03             	cmp    dl,0x3
c001fb68:	0f 85 d3 01 00 00    	jne    c001fd41 <Vm::x87Handler(regs*)+0x9c4>
c001fb6e:	e8 b8 f7 ff ff       	call   c001f32b <Vm::fpuPop()>
c001fb73:	51                   	push   ecx
c001fb74:	51                   	push   ecx
c001fb75:	e9 de 01 00 00       	jmp    c001fd58 <Vm::x87Handler(regs*)+0x9db>
c001fb7a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb7e:	80 fa 01             	cmp    dl,0x1
c001fb81:	75 09                	jne    c001fb8c <Vm::x87Handler(regs*)+0x80f>
c001fb83:	57                   	push   edi
c001fb84:	57                   	push   edi
c001fb85:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb87:	e9 e3 01 00 00       	jmp    c001fd6f <Vm::x87Handler(regs*)+0x9f2>
c001fb8c:	80 fa 04             	cmp    dl,0x4
c001fb8f:	75 12                	jne    c001fba3 <Vm::x87Handler(regs*)+0x826>
c001fb91:	31 d2                	xor    edx,edx
c001fb93:	51                   	push   ecx
c001fb94:	51                   	push   ecx
c001fb95:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb97:	52                   	push   edx
c001fb98:	50                   	push   eax
c001fb99:	e8 d0 f4 ff ff       	call   c001f06e <Vm::fpuLongToFloat(long long)>
c001fb9e:	e9 ee 00 00 00       	jmp    c001fc91 <Vm::x87Handler(regs*)+0x914>
c001fba3:	31 c0                	xor    eax,eax
c001fba5:	80 fa 07             	cmp    dl,0x7
c001fba8:	0f 85 30 02 00 00    	jne    c001fdde <Vm::x87Handler(regs*)+0xa61>
c001fbae:	83 ec 0c             	sub    esp,0xc
c001fbb1:	6a 00                	push   0x0
c001fbb3:	e8 88 f6 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001fbb8:	89 c7                	mov    edi,eax
c001fbba:	89 d5                	mov    ebp,edx
c001fbbc:	58                   	pop    eax
c001fbbd:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbbf:	5a                   	pop    edx
c001fbc0:	31 d2                	xor    edx,edx
c001fbc2:	52                   	push   edx
c001fbc3:	50                   	push   eax
c001fbc4:	e8 a5 f4 ff ff       	call   c001f06e <Vm::fpuLongToFloat(long long)>
c001fbc9:	e9 62 01 00 00       	jmp    c001fd30 <Vm::x87Handler(regs*)+0x9b3>
c001fbce:	84 d2                	test   dl,dl
c001fbd0:	75 0d                	jne    c001fbdf <Vm::x87Handler(regs*)+0x862>
c001fbd2:	31 d2                	xor    edx,edx
c001fbd4:	55                   	push   ebp
c001fbd5:	55                   	push   ebp
c001fbd6:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbd8:	52                   	push   edx
c001fbd9:	50                   	push   eax
c001fbda:	e9 d3 01 00 00       	jmp    c001fdb2 <Vm::x87Handler(regs*)+0xa35>
c001fbdf:	31 c0                	xor    eax,eax
c001fbe1:	80 fa 02             	cmp    dl,0x2
c001fbe4:	0f 85 f4 01 00 00    	jne    c001fdde <Vm::x87Handler(regs*)+0xa61>
c001fbea:	83 ec 0c             	sub    esp,0xc
c001fbed:	6a 00                	push   0x0
c001fbef:	e8 4c f6 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001fbf4:	59                   	pop    ecx
c001fbf5:	5f                   	pop    edi
c001fbf6:	e9 6a f9 ff ff       	jmp    c001f565 <Vm::x87Handler(regs*)+0x1e8>
c001fbfb:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbff:	84 d2                	test   dl,dl
c001fc01:	75 2a                	jne    c001fc2d <Vm::x87Handler(regs*)+0x8b0>
c001fc03:	50                   	push   eax
c001fc04:	50                   	push   eax
c001fc05:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc08:	ff 36                	push   DWORD PTR [esi]
c001fc0a:	e8 c5 f3 ff ff       	call   c001efd4 <Vm::fpu64ToInternal(unsigned long long)>
c001fc0f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc16:	89 c6                	mov    esi,eax
c001fc18:	89 d7                	mov    edi,edx
c001fc1a:	e8 21 f6 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001fc1f:	57                   	push   edi
c001fc20:	56                   	push   esi
c001fc21:	52                   	push   edx
c001fc22:	50                   	push   eax
c001fc23:	e8 8e f5 ff ff       	call   c001f1b6 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fc28:	e9 64 01 00 00       	jmp    c001fd91 <Vm::x87Handler(regs*)+0xa14>
c001fc2d:	80 fa 01             	cmp    dl,0x1
c001fc30:	75 11                	jne    c001fc43 <Vm::x87Handler(regs*)+0x8c6>
c001fc32:	50                   	push   eax
c001fc33:	50                   	push   eax
c001fc34:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc37:	ff 36                	push   DWORD PTR [esi]
c001fc39:	e8 96 f3 ff ff       	call   c001efd4 <Vm::fpu64ToInternal(unsigned long long)>
c001fc3e:	e9 35 01 00 00       	jmp    c001fd78 <Vm::x87Handler(regs*)+0x9fb>
c001fc43:	80 fa 02             	cmp    dl,0x2
c001fc46:	0f 85 54 f9 ff ff    	jne    c001f5a0 <Vm::x87Handler(regs*)+0x223>
c001fc4c:	55                   	push   ebp
c001fc4d:	55                   	push   ebp
c001fc4e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc51:	ff 36                	push   DWORD PTR [esi]
c001fc53:	e8 7c f3 ff ff       	call   c001efd4 <Vm::fpu64ToInternal(unsigned long long)>
c001fc58:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc5f:	89 c6                	mov    esi,eax
c001fc61:	89 d7                	mov    edi,edx
c001fc63:	e8 d8 f5 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001fc68:	57                   	push   edi
c001fc69:	56                   	push   esi
c001fc6a:	52                   	push   edx
c001fc6b:	50                   	push   eax
c001fc6c:	e8 f2 f4 ff ff       	call   c001f163 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fc75:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc78:	83 c4 20             	add    esp,0x20
c001fc7b:	e9 74 f7 ff ff       	jmp    c001f3f4 <Vm::x87Handler(regs*)+0x77>
c001fc80:	80 fa 04             	cmp    dl,0x4
c001fc83:	75 2a                	jne    c001fcaf <Vm::x87Handler(regs*)+0x932>
c001fc85:	51                   	push   ecx
c001fc86:	51                   	push   ecx
c001fc87:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc8a:	ff 36                	push   DWORD PTR [esi]
c001fc8c:	e8 43 f3 ff ff       	call   c001efd4 <Vm::fpu64ToInternal(unsigned long long)>
c001fc91:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc98:	89 c6                	mov    esi,eax
c001fc9a:	89 d7                	mov    edi,edx
c001fc9c:	e8 9f f5 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001fca1:	57                   	push   edi
c001fca2:	56                   	push   esi
c001fca3:	52                   	push   edx
c001fca4:	50                   	push   eax
c001fca5:	e8 36 f5 ff ff       	call   c001f1e0 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fcaa:	e9 e2 00 00 00       	jmp    c001fd91 <Vm::x87Handler(regs*)+0xa14>
c001fcaf:	80 fa 05             	cmp    dl,0x5
c001fcb2:	75 28                	jne    c001fcdc <Vm::x87Handler(regs*)+0x95f>
c001fcb4:	83 ec 0c             	sub    esp,0xc
c001fcb7:	6a 00                	push   0x0
c001fcb9:	e8 82 f5 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001fcbe:	89 c7                	mov    edi,eax
c001fcc0:	89 d5                	mov    ebp,edx
c001fcc2:	58                   	pop    eax
c001fcc3:	5a                   	pop    edx
c001fcc4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcc7:	ff 36                	push   DWORD PTR [esi]
c001fcc9:	e8 06 f3 ff ff       	call   c001efd4 <Vm::fpu64ToInternal(unsigned long long)>
c001fcce:	83 c4 10             	add    esp,0x10
c001fcd1:	55                   	push   ebp
c001fcd2:	57                   	push   edi
c001fcd3:	52                   	push   edx
c001fcd4:	50                   	push   eax
c001fcd5:	e8 06 f5 ff ff       	call   c001f1e0 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fcda:	eb 60                	jmp    c001fd3c <Vm::x87Handler(regs*)+0x9bf>
c001fcdc:	80 fa 06             	cmp    dl,0x6
c001fcdf:	75 2a                	jne    c001fd0b <Vm::x87Handler(regs*)+0x98e>
c001fce1:	51                   	push   ecx
c001fce2:	51                   	push   ecx
c001fce3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fce6:	ff 36                	push   DWORD PTR [esi]
c001fce8:	e8 e7 f2 ff ff       	call   c001efd4 <Vm::fpu64ToInternal(unsigned long long)>
c001fced:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcf4:	89 c6                	mov    esi,eax
c001fcf6:	89 d7                	mov    edi,edx
c001fcf8:	e8 43 f5 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001fcfd:	57                   	push   edi
c001fcfe:	56                   	push   esi
c001fcff:	52                   	push   edx
c001fd00:	50                   	push   eax
c001fd01:	e8 08 f5 ff ff       	call   c001f20e <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd06:	e9 86 00 00 00       	jmp    c001fd91 <Vm::x87Handler(regs*)+0xa14>
c001fd0b:	31 c0                	xor    eax,eax
c001fd0d:	80 fa 07             	cmp    dl,0x7
c001fd10:	0f 85 c8 00 00 00    	jne    c001fdde <Vm::x87Handler(regs*)+0xa61>
c001fd16:	83 ec 0c             	sub    esp,0xc
c001fd19:	6a 00                	push   0x0
c001fd1b:	e8 20 f5 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001fd20:	89 c7                	mov    edi,eax
c001fd22:	89 d5                	mov    ebp,edx
c001fd24:	58                   	pop    eax
c001fd25:	5a                   	pop    edx
c001fd26:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd29:	ff 36                	push   DWORD PTR [esi]
c001fd2b:	e8 a4 f2 ff ff       	call   c001efd4 <Vm::fpu64ToInternal(unsigned long long)>
c001fd30:	83 c4 10             	add    esp,0x10
c001fd33:	55                   	push   ebp
c001fd34:	57                   	push   edi
c001fd35:	52                   	push   edx
c001fd36:	50                   	push   eax
c001fd37:	e8 d2 f4 ff ff       	call   c001f20e <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd3c:	83 c4 0c             	add    esp,0xc
c001fd3f:	eb 53                	jmp    c001fd94 <Vm::x87Handler(regs*)+0xa17>
c001fd41:	31 c0                	xor    eax,eax
c001fd43:	80 fa 02             	cmp    dl,0x2
c001fd46:	0f 85 92 00 00 00    	jne    c001fdde <Vm::x87Handler(regs*)+0xa61>
c001fd4c:	83 ec 0c             	sub    esp,0xc
c001fd4f:	6a 00                	push   0x0
c001fd51:	e8 ea f4 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001fd56:	59                   	pop    ecx
c001fd57:	5f                   	pop    edi
c001fd58:	52                   	push   edx
c001fd59:	50                   	push   eax
c001fd5a:	e8 27 f2 ff ff       	call   c001ef86 <Vm::fpuInternalTo64(unsigned long long)>
c001fd5f:	eb 70                	jmp    c001fdd1 <Vm::x87Handler(regs*)+0xa54>
c001fd61:	31 c0                	xor    eax,eax
c001fd63:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fd68:	75 74                	jne    c001fdde <Vm::x87Handler(regs*)+0xa61>
c001fd6a:	50                   	push   eax
c001fd6b:	50                   	push   eax
c001fd6c:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fd6f:	31 d2                	xor    edx,edx
c001fd71:	52                   	push   edx
c001fd72:	50                   	push   eax
c001fd73:	e8 f6 f2 ff ff       	call   c001f06e <Vm::fpuLongToFloat(long long)>
c001fd78:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd7f:	89 c6                	mov    esi,eax
c001fd81:	89 d7                	mov    edi,edx
c001fd83:	e8 b8 f4 ff ff       	call   c001f240 <Vm::fpuGetReg(int)>
c001fd88:	57                   	push   edi
c001fd89:	56                   	push   esi
c001fd8a:	52                   	push   edx
c001fd8b:	50                   	push   eax
c001fd8c:	e8 5e f4 ff ff       	call   c001f1ef <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd91:	83 c4 1c             	add    esp,0x1c
c001fd94:	52                   	push   edx
c001fd95:	50                   	push   eax
c001fd96:	6a 00                	push   0x0
c001fd98:	e8 e6 f4 ff ff       	call   c001f283 <Vm::fpuSetReg(int, unsigned long long)>
c001fd9d:	e9 f2 f7 ff ff       	jmp    c001f594 <Vm::x87Handler(regs*)+0x217>
c001fda2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fda6:	80 fa 05             	cmp    dl,0x5
c001fda9:	75 11                	jne    c001fdbc <Vm::x87Handler(regs*)+0xa3f>
c001fdab:	55                   	push   ebp
c001fdac:	55                   	push   ebp
c001fdad:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fdb0:	ff 36                	push   DWORD PTR [esi]
c001fdb2:	e8 81 f2 ff ff       	call   c001f038 <Vm::fpuULongToFloat(unsigned long long)>
c001fdb7:	e9 cf f7 ff ff       	jmp    c001f58b <Vm::x87Handler(regs*)+0x20e>
c001fdbc:	31 c0                	xor    eax,eax
c001fdbe:	80 fa 07             	cmp    dl,0x7
c001fdc1:	75 1b                	jne    c001fdde <Vm::x87Handler(regs*)+0xa61>
c001fdc3:	e8 63 f5 ff ff       	call   c001f32b <Vm::fpuPop()>
c001fdc8:	51                   	push   ecx
c001fdc9:	51                   	push   ecx
c001fdca:	52                   	push   edx
c001fdcb:	50                   	push   eax
c001fdcc:	e8 0c f2 ff ff       	call   c001efdd <Vm::fpuFloatToLong(unsigned long long)>
c001fdd1:	83 c4 10             	add    esp,0x10
c001fdd4:	89 06                	mov    DWORD PTR [esi],eax
c001fdd6:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fdd9:	e9 f8 f7 ff ff       	jmp    c001f5d6 <Vm::x87Handler(regs*)+0x259>
c001fdde:	83 c4 1c             	add    esp,0x1c
c001fde1:	5b                   	pop    ebx
c001fde2:	5e                   	pop    esi
c001fde3:	5f                   	pop    edi
c001fde4:	5d                   	pop    ebp
c001fde5:	c3                   	ret    

c001fde6 <__static_initialization_and_destruction_0(int, int)>:
c001fde6:	83 ec 0c             	sub    esp,0xc
c001fde9:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fdee:	75 1a                	jne    c001fe0a <__static_initialization_and_destruction_0(int, int)+0x24>
c001fdf0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fdf8:	75 10                	jne    c001fe0a <__static_initialization_and_destruction_0(int, int)+0x24>
c001fdfa:	83 ec 0c             	sub    esp,0xc
c001fdfd:	68 c0 0e 03 c0       	push   0xc0030ec0
c001fe02:	e8 03 8d 00 00       	call   c0028b0a <Vm::_FPUState::_FPUState()>
c001fe07:	83 c4 10             	add    esp,0x10
c001fe0a:	90                   	nop
c001fe0b:	83 c4 0c             	add    esp,0xc
c001fe0e:	c3                   	ret    

c001fe0f <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fe0f:	83 ec 0c             	sub    esp,0xc
c001fe12:	83 ec 08             	sub    esp,0x8
c001fe15:	68 ff ff 00 00       	push   0xffff
c001fe1a:	6a 01                	push   0x1
c001fe1c:	e8 c5 ff ff ff       	call   c001fde6 <__static_initialization_and_destruction_0(int, int)>
c001fe21:	83 c4 10             	add    esp,0x10
c001fe24:	83 c4 0c             	add    esp,0xc
c001fe27:	c3                   	ret    

c001fe28 <FAT::getName()>:
c001fe28:	b8 b0 bd 02 c0       	mov    eax,0xc002bdb0
c001fe2d:	c3                   	ret    

c001fe2e <FAT::tell(void*, unsigned long long*)>:
c001fe2e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe33:	75 06                	jne    c001fe3b <FAT::tell(void*, unsigned long long*)+0xd>
c001fe35:	b8 04 00 00 00       	mov    eax,0x4
c001fe3a:	c3                   	ret    
c001fe3b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe40:	75 06                	jne    c001fe48 <FAT::tell(void*, unsigned long long*)+0x1a>
c001fe42:	b8 04 00 00 00       	mov    eax,0x4
c001fe47:	c3                   	ret    
c001fe48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe4c:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fe4f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fe52:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe56:	89 01                	mov    DWORD PTR [ecx],eax
c001fe58:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe5b:	b8 00 00 00 00       	mov    eax,0x0
c001fe60:	c3                   	ret    
c001fe61:	90                   	nop

c001fe62 <FAT::stat(void*, unsigned long long*)>:
c001fe62:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe67:	75 06                	jne    c001fe6f <FAT::stat(void*, unsigned long long*)+0xd>
c001fe69:	b8 04 00 00 00       	mov    eax,0x4
c001fe6e:	c3                   	ret    
c001fe6f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe74:	75 06                	jne    c001fe7c <FAT::stat(void*, unsigned long long*)+0x1a>
c001fe76:	b8 04 00 00 00       	mov    eax,0x4
c001fe7b:	c3                   	ret    
c001fe7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe80:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fe83:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fe86:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe8a:	89 01                	mov    DWORD PTR [ecx],eax
c001fe8c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe8f:	b8 00 00 00 00       	mov    eax,0x0
c001fe94:	c3                   	ret    
c001fe95:	90                   	nop

c001fe96 <FAT::~FAT()>:
c001fe96:	83 ec 0c             	sub    esp,0xc
c001fe99:	ba fc bd 02 c0       	mov    edx,0xc002bdfc
c001fe9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea2:	89 10                	mov    DWORD PTR [eax],edx
c001fea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea8:	83 ec 0c             	sub    esp,0xc
c001feab:	50                   	push   eax
c001feac:	e8 45 2b ff ff       	call   c00129f6 <Filesystem::~Filesystem()>
c001feb1:	83 c4 10             	add    esp,0x10
c001feb4:	90                   	nop
c001feb5:	83 c4 0c             	add    esp,0xc
c001feb8:	c3                   	ret    
c001feb9:	90                   	nop

c001feba <FAT::~FAT()>:
c001feba:	83 ec 0c             	sub    esp,0xc
c001febd:	83 ec 0c             	sub    esp,0xc
c001fec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fec4:	e8 cd ff ff ff       	call   c001fe96 <FAT::~FAT()>
c001fec9:	83 c4 10             	add    esp,0x10
c001fecc:	83 ec 08             	sub    esp,0x8
c001fecf:	6a 08                	push   0x8
c001fed1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fed5:	e8 15 27 ff ff       	call   c00125ef <operator delete(void*, unsigned long)>
c001feda:	83 c4 10             	add    esp,0x10
c001fedd:	83 c4 0c             	add    esp,0xc
c001fee0:	c3                   	ret    
c001fee1:	90                   	nop

c001fee2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001fee2:	83 ec 1c             	sub    esp,0x1c
c001fee5:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001feec:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fef1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fef5:	8b 04 85 40 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0c0]
c001fefc:	83 f8 ff             	cmp    eax,0xffffffff
c001feff:	75 34                	jne    c001ff35 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001ff01:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ff05:	88 c2                	mov    dl,al
c001ff07:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c001ff0c:	01 d0                	add    eax,edx
c001ff0e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ff12:	8b 15 20 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f20
c001ff18:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff1c:	89 14 85 40 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0c0],edx
c001ff23:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c001ff28:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ff2c:	89 14 85 c0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf040],edx
c001ff33:	eb 17                	jmp    c001ff4c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001ff35:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ff39:	88 c2                	mov    dl,al
c001ff3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff3f:	8b 04 85 40 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0c0]
c001ff46:	01 d0                	add    eax,edx
c001ff48:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ff4c:	83 ec 04             	sub    esp,0x4
c001ff4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff57:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ff5b:	50                   	push   eax
c001ff5c:	e8 9d 6d fe ff       	call   c0006cfe <f_getlabel>
c001ff61:	83 c4 10             	add    esp,0x10
c001ff64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff68:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ff6d:	75 07                	jne    c001ff76 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001ff6f:	b8 00 00 00 00       	mov    eax,0x0
c001ff74:	eb 05                	jmp    c001ff7b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001ff76:	b8 01 00 00 00       	mov    eax,0x1
c001ff7b:	83 c4 1c             	add    esp,0x1c
c001ff7e:	c3                   	ret    
c001ff7f:	90                   	nop

c001ff80 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001ff80:	57                   	push   edi
c001ff81:	83 ec 58             	sub    esp,0x58
c001ff84:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001ff8c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ff90:	b9 0f 00 00 00       	mov    ecx,0xf
c001ff95:	b8 00 00 00 00       	mov    eax,0x0
c001ff9a:	fc                   	cld    
c001ff9b:	89 d7                	mov    edi,edx
c001ff9d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ff9f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ffa3:	8b 04 85 40 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0c0]
c001ffaa:	83 f8 ff             	cmp    eax,0xffffffff
c001ffad:	75 34                	jne    c001ffe3 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001ffaf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ffb3:	88 c2                	mov    dl,al
c001ffb5:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c001ffba:	01 d0                	add    eax,edx
c001ffbc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ffc0:	8b 15 20 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f20
c001ffc6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ffca:	89 14 85 40 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0c0],edx
c001ffd1:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c001ffd6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001ffda:	89 14 85 c0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf040],edx
c001ffe1:	eb 17                	jmp    c001fffa <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001ffe3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ffe7:	88 c2                	mov    dl,al
c001ffe9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ffed:	8b 04 85 40 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0c0]
c001fff4:	01 d0                	add    eax,edx
c001fff6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fffa:	83 ec 08             	sub    esp,0x8
c001fffd:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020001:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020005:	50                   	push   eax
c0020006:	e8 41 09 fe ff       	call   c000094c <strcat>
c002000b:	83 c4 10             	add    esp,0x10
c002000e:	83 ec 0c             	sub    esp,0xc
c0020011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020015:	50                   	push   eax
c0020016:	e8 d1 6e fe ff       	call   c0006eec <f_setlabel>
c002001b:	83 c4 10             	add    esp,0x10
c002001e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020022:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020027:	75 07                	jne    c0020030 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020029:	b8 00 00 00 00       	mov    eax,0x0
c002002e:	eb 05                	jmp    c0020035 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020030:	b8 01 00 00 00       	mov    eax,0x1
c0020035:	83 c4 58             	add    esp,0x58
c0020038:	5f                   	pop    edi
c0020039:	c3                   	ret    

c002003a <FAT::format(LogicalDisk*, int, char const*, int)>:
c002003a:	83 ec 2c             	sub    esp,0x2c
c002003d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020045:	83 ec 08             	sub    esp,0x8
c0020048:	68 d4 bd 02 c0       	push   0xc002bdd4
c002004d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020051:	e8 42 08 fe ff       	call   c0000898 <strcmp>
c0020056:	83 c4 10             	add    esp,0x10
c0020059:	85 c0                	test   eax,eax
c002005b:	0f 94 c0             	sete   al
c002005e:	84 c0                	test   al,al
c0020060:	74 0d                	je     c002006f <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020062:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002006a:	e9 a6 00 00 00       	jmp    c0020115 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002006f:	83 ec 08             	sub    esp,0x8
c0020072:	68 c6 bd 02 c0       	push   0xc002bdc6
c0020077:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002007b:	e8 18 08 fe ff       	call   c0000898 <strcmp>
c0020080:	83 c4 10             	add    esp,0x10
c0020083:	85 c0                	test   eax,eax
c0020085:	0f 94 c0             	sete   al
c0020088:	84 c0                	test   al,al
c002008a:	74 0a                	je     c0020096 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002008c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020094:	eb 7f                	jmp    c0020115 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020096:	83 ec 08             	sub    esp,0x8
c0020099:	68 cc bd 02 c0       	push   0xc002bdcc
c002009e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200a2:	e8 f1 07 fe ff       	call   c0000898 <strcmp>
c00200a7:	83 c4 10             	add    esp,0x10
c00200aa:	85 c0                	test   eax,eax
c00200ac:	0f 94 c0             	sete   al
c00200af:	84 c0                	test   al,al
c00200b1:	74 0a                	je     c00200bd <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00200b3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00200bb:	eb 58                	jmp    c0020115 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200bd:	83 ec 08             	sub    esp,0x8
c00200c0:	68 6c 92 02 c0       	push   0xc002926c
c00200c5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200c9:	e8 ca 07 fe ff       	call   c0000898 <strcmp>
c00200ce:	83 c4 10             	add    esp,0x10
c00200d1:	85 c0                	test   eax,eax
c00200d3:	0f 94 c0             	sete   al
c00200d6:	84 c0                	test   al,al
c00200d8:	74 0a                	je     c00200e4 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00200da:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00200e2:	eb 31                	jmp    c0020115 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200e4:	83 ec 08             	sub    esp,0x8
c00200e7:	68 d2 bd 02 c0       	push   0xc002bdd2
c00200ec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200f0:	e8 a3 07 fe ff       	call   c0000898 <strcmp>
c00200f5:	83 c4 10             	add    esp,0x10
c00200f8:	85 c0                	test   eax,eax
c00200fa:	0f 94 c0             	sete   al
c00200fd:	84 c0                	test   al,al
c00200ff:	74 0a                	je     c002010b <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020101:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020109:	eb 0a                	jmp    c0020115 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002010b:	b8 08 00 00 00       	mov    eax,0x8
c0020110:	e9 df 00 00 00       	jmp    c00201f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020115:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002011c:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020121:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020125:	8b 04 85 40 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0c0]
c002012c:	83 f8 ff             	cmp    eax,0xffffffff
c002012f:	75 34                	jne    c0020165 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020131:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020135:	88 c2                	mov    dl,al
c0020137:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c002013c:	01 d0                	add    eax,edx
c002013e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020142:	8b 15 20 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f20
c0020148:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002014c:	89 14 85 40 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0c0],edx
c0020153:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c0020158:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002015c:	89 14 85 c0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf040],edx
c0020163:	eb 17                	jmp    c002017c <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020165:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020169:	88 c2                	mov    dl,al
c002016b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002016f:	8b 04 85 40 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0c0]
c0020176:	01 d0                	add    eax,edx
c0020178:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002017c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020180:	88 04 24             	mov    BYTE PTR [esp],al
c0020183:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002018b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020193:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020198:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00201a0:	83 ec 0c             	sub    esp,0xc
c00201a3:	68 00 20 00 00       	push   0x2000
c00201a8:	e8 ec f3 fe ff       	call   c000f599 <malloc>
c00201ad:	83 c4 10             	add    esp,0x10
c00201b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00201b4:	68 00 20 00 00       	push   0x2000
c00201b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201bd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00201c1:	50                   	push   eax
c00201c2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00201c6:	50                   	push   eax
c00201c7:	e8 6b 71 fe ff       	call   c0007337 <f_mkfs>
c00201cc:	83 c4 10             	add    esp,0x10
c00201cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00201d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00201d8:	75 07                	jne    c00201e1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00201da:	b8 00 00 00 00       	mov    eax,0x0
c00201df:	eb 13                	jmp    c00201f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00201e1:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00201e6:	75 07                	jne    c00201ef <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c00201e8:	b8 09 00 00 00       	mov    eax,0x9
c00201ed:	eb 05                	jmp    c00201f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00201ef:	b8 01 00 00 00       	mov    eax,0x1
c00201f4:	83 c4 2c             	add    esp,0x2c
c00201f7:	c3                   	ret    

c00201f8 <FAT::tryMount(LogicalDisk*, int)>:
c00201f8:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00201fe:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c0020203:	83 f8 14             	cmp    eax,0x14
c0020206:	75 17                	jne    c002021f <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020208:	83 ec 0c             	sub    esp,0xc
c002020b:	68 d8 bd 02 c0       	push   0xc002bdd8
c0020210:	e8 1e 9c ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c0020215:	83 c4 10             	add    esp,0x10
c0020218:	b0 00                	mov    al,0x0
c002021a:	e9 d7 01 00 00       	jmp    c00203f6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002021f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020226:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002022c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020232:	3d 00 02 00 00       	cmp    eax,0x200
c0020237:	74 07                	je     c0020240 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020239:	b0 00                	mov    al,0x0
c002023b:	e9 b6 01 00 00       	jmp    c00203f6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020240:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020248:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002024f:	8b 04 85 40 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0c0]
c0020256:	83 f8 ff             	cmp    eax,0xffffffff
c0020259:	74 07                	je     c0020262 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002025b:	b0 01                	mov    al,0x1
c002025d:	e9 94 01 00 00       	jmp    c00203f6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020262:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c002026c:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020274:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002027b:	88 c2                	mov    dl,al
c002027d:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c0020282:	01 d0                	add    eax,edx
c0020284:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002028b:	8b 15 20 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f20
c0020291:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020298:	89 14 85 40 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0c0],edx
c002029f:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c00202a4:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00202ab:	89 14 85 c0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf040],edx
c00202b2:	83 ec 0c             	sub    esp,0xc
c00202b5:	68 54 02 00 00       	push   0x254
c00202ba:	e8 da f2 fe ff       	call   c000f599 <malloc>
c00202bf:	83 c4 10             	add    esp,0x10
c00202c2:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00202c9:	83 ec 04             	sub    esp,0x4
c00202cc:	6a 00                	push   0x0
c00202ce:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00202d5:	50                   	push   eax
c00202d6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00202dd:	e8 13 4c fe ff       	call   c0004ef5 <f_mount>
c00202e2:	83 c4 10             	add    esp,0x10
c00202e5:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00202ec:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00202f4:	74 19                	je     c002030f <FAT::tryMount(LogicalDisk*, int)+0x117>
c00202f6:	83 ec 0c             	sub    esp,0xc
c00202f9:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020300:	e8 b4 f2 fe ff       	call   c000f5b9 <rfree>
c0020305:	83 c4 10             	add    esp,0x10
c0020308:	b0 00                	mov    al,0x0
c002030a:	e9 e7 00 00 00       	jmp    c00203f6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002030f:	83 ec 04             	sub    esp,0x4
c0020312:	68 00 01 00 00       	push   0x100
c0020317:	6a 00                	push   0x0
c0020319:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020320:	50                   	push   eax
c0020321:	e8 2a 04 fe ff       	call   c0000750 <memset>
c0020326:	83 c4 10             	add    esp,0x10
c0020329:	83 ec 08             	sub    esp,0x8
c002032c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020333:	50                   	push   eax
c0020334:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002033b:	50                   	push   eax
c002033c:	e8 0b 06 fe ff       	call   c000094c <strcat>
c0020341:	83 c4 10             	add    esp,0x10
c0020344:	83 ec 08             	sub    esp,0x8
c0020347:	68 e6 bd 02 c0       	push   0xc002bde6
c002034c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020353:	50                   	push   eax
c0020354:	e8 f3 05 fe ff       	call   c000094c <strcat>
c0020359:	83 c4 10             	add    esp,0x10
c002035c:	83 ec 04             	sub    esp,0x4
c002035f:	6a 01                	push   0x1
c0020361:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020368:	50                   	push   eax
c0020369:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002036d:	50                   	push   eax
c002036e:	e8 e4 4b fe ff       	call   c0004f57 <f_open>
c0020373:	83 c4 10             	add    esp,0x10
c0020376:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002037d:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020384:	85 c0                	test   eax,eax
c0020386:	74 0a                	je     c0020392 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020388:	78 2d                	js     c00203b7 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002038a:	83 e8 04             	sub    eax,0x4
c002038d:	83 f8 01             	cmp    eax,0x1
c0020390:	77 25                	ja     c00203b7 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020392:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c002039a:	83 ec 0c             	sub    esp,0xc
c002039d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00203a1:	50                   	push   eax
c00203a2:	e8 02 57 fe ff       	call   c0005aa9 <f_close>
c00203a7:	83 c4 10             	add    esp,0x10
c00203aa:	90                   	nop
c00203ab:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00203b3:	74 3a                	je     c00203ef <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00203b5:	eb 2d                	jmp    c00203e4 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00203b7:	83 ec 0c             	sub    esp,0xc
c00203ba:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00203c1:	e8 f3 f1 fe ff       	call   c000f5b9 <rfree>
c00203c6:	83 c4 10             	add    esp,0x10
c00203c9:	83 ec 04             	sub    esp,0x4
c00203cc:	6a 00                	push   0x0
c00203ce:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00203d5:	50                   	push   eax
c00203d6:	6a 00                	push   0x0
c00203d8:	e8 18 4b fe ff       	call   c0004ef5 <f_mount>
c00203dd:	83 c4 10             	add    esp,0x10
c00203e0:	b0 00                	mov    al,0x0
c00203e2:	eb 12                	jmp    c00203f6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00203e4:	a1 20 0f 03 c0       	mov    eax,ds:0xc0030f20
c00203e9:	40                   	inc    eax
c00203ea:	a3 20 0f 03 c0       	mov    ds:0xc0030f20,eax
c00203ef:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00203f6:	81 c4 6c 03 00 00    	add    esp,0x36c
c00203fc:	c3                   	ret    
c00203fd:	90                   	nop

c00203fe <FAT::getFileFirstSector(char const*)>:
c00203fe:	53                   	push   ebx
c00203ff:	83 ec 28             	sub    esp,0x28
c0020402:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c002040a:	83 ec 0c             	sub    esp,0xc
c002040d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020411:	e8 83 f1 fe ff       	call   c000f599 <malloc>
c0020416:	83 c4 10             	add    esp,0x10
c0020419:	89 c3                	mov    ebx,eax
c002041b:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0020420:	83 ec 04             	sub    esp,0x4
c0020423:	50                   	push   eax
c0020424:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020428:	53                   	push   ebx
c0020429:	e8 f8 27 ff ff       	call   c0012c26 <File::File(char const*, Process*)>
c002042e:	83 c4 10             	add    esp,0x10
c0020431:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020435:	83 ec 08             	sub    esp,0x8
c0020438:	6a 01                	push   0x1
c002043a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002043e:	e8 47 28 ff ff       	call   c0012c8a <File::open(FileOpenMode)>
c0020443:	83 c4 10             	add    esp,0x10
c0020446:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002044a:	8b 00                	mov    eax,DWORD PTR [eax]
c002044c:	83 c0 0c             	add    eax,0xc
c002044f:	8b 00                	mov    eax,DWORD PTR [eax]
c0020451:	83 ec 0c             	sub    esp,0xc
c0020454:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020458:	52                   	push   edx
c0020459:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002045d:	52                   	push   edx
c002045e:	6a 00                	push   0x0
c0020460:	6a 04                	push   0x4
c0020462:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020466:	ff d0                	call   eax
c0020468:	83 c4 20             	add    esp,0x20
c002046b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002046f:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020475:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020479:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002047d:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020480:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020483:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020487:	83 ec 0c             	sub    esp,0xc
c002048a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002048e:	e8 55 28 ff ff       	call   c0012ce8 <File::close()>
c0020493:	83 c4 10             	add    esp,0x10
c0020496:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002049a:	ba 00 00 00 00       	mov    edx,0x0
c002049f:	83 c4 28             	add    esp,0x28
c00204a2:	5b                   	pop    ebx
c00204a3:	c3                   	ret    

c00204a4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00204a4:	57                   	push   edi
c00204a5:	56                   	push   esi
c00204a6:	53                   	push   ebx
c00204a7:	81 ec 50 02 00 00    	sub    esp,0x250
c00204ad:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00204b5:	74 0a                	je     c00204c1 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c00204b7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00204bf:	75 0a                	jne    c00204cb <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c00204c1:	b8 04 00 00 00       	mov    eax,0x4
c00204c6:	e9 29 01 00 00       	jmp    c00205f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00204cb:	83 ec 08             	sub    esp,0x8
c00204ce:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00204d5:	50                   	push   eax
c00204d6:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00204dd:	e8 d1 5b fe ff       	call   c00060b3 <f_readdir>
c00204e2:	83 c4 10             	add    esp,0x10
c00204e5:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00204ec:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c00204f3:	83 ec 0c             	sub    esp,0xc
c00204f6:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00204fd:	83 c0 1a             	add    eax,0x1a
c0020500:	50                   	push   eax
c0020501:	e8 66 02 fe ff       	call   c000076c <strlen>
c0020506:	83 c4 10             	add    esp,0x10
c0020509:	ba 00 00 00 00       	mov    edx,0x0
c002050e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020512:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020516:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c002051d:	0f b6 c0             	movzx  eax,al
c0020520:	83 e0 10             	and    eax,0x10
c0020523:	74 07                	je     c002052c <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020525:	b8 02 00 00 00       	mov    eax,0x2
c002052a:	eb 05                	jmp    c0020531 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c002052c:	b8 01 00 00 00       	mov    eax,0x1
c0020531:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020535:	83 ec 08             	sub    esp,0x8
c0020538:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c002053f:	83 c0 1a             	add    eax,0x1a
c0020542:	50                   	push   eax
c0020543:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020547:	83 c0 10             	add    eax,0x10
c002054a:	50                   	push   eax
c002054b:	e8 bc 02 fe ff       	call   c000080c <strcpy>
c0020550:	83 c4 10             	add    esp,0x10
c0020553:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c002055a:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020561:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020565:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c002056c:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020573:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c002057a:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020581:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020588:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c002058f:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020596:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c002059d:	89 c6                	mov    esi,eax
c002059f:	89 d7                	mov    edi,edx
c00205a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00205a3:	89 c8                	mov    eax,ecx
c00205a5:	89 fa                	mov    edx,edi
c00205a7:	89 f3                	mov    ebx,esi
c00205a9:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00205b0:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00205b7:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00205be:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00205c5:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00205cb:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00205d2:	84 c0                	test   al,al
c00205d4:	75 07                	jne    c00205dd <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c00205d6:	b8 07 00 00 00       	mov    eax,0x7
c00205db:	eb 17                	jmp    c00205f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00205dd:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00205e4:	85 c0                	test   eax,eax
c00205e6:	75 07                	jne    c00205ef <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c00205e8:	b8 00 00 00 00       	mov    eax,0x0
c00205ed:	eb 05                	jmp    c00205f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00205ef:	b8 01 00 00 00       	mov    eax,0x1
c00205f4:	81 c4 50 02 00 00    	add    esp,0x250
c00205fa:	5b                   	pop    ebx
c00205fb:	5e                   	pop    esi
c00205fc:	5f                   	pop    edi
c00205fd:	c3                   	ret    

c00205fe <FAT::read(void*, unsigned long, void*, int*)>:
c00205fe:	83 ec 1c             	sub    esp,0x1c
c0020601:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020606:	74 07                	je     c002060f <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020608:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002060d:	75 07                	jne    c0020616 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c002060f:	b8 04 00 00 00       	mov    eax,0x4
c0020614:	eb 3d                	jmp    c0020653 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020616:	8d 44 24 08          	lea    eax,[esp+0x8]
c002061a:	50                   	push   eax
c002061b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002061f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020623:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020627:	e8 67 4d fe ff       	call   c0005393 <f_read>
c002062c:	83 c4 10             	add    esp,0x10
c002062f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020633:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020637:	89 c2                	mov    edx,eax
c0020639:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002063d:	89 10                	mov    DWORD PTR [eax],edx
c002063f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020643:	85 c0                	test   eax,eax
c0020645:	75 07                	jne    c002064e <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020647:	b8 00 00 00 00       	mov    eax,0x0
c002064c:	eb 05                	jmp    c0020653 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002064e:	b8 01 00 00 00       	mov    eax,0x1
c0020653:	83 c4 1c             	add    esp,0x1c
c0020656:	c3                   	ret    
c0020657:	90                   	nop

c0020658 <FAT::write(void*, unsigned long, void*, int*)>:
c0020658:	83 ec 1c             	sub    esp,0x1c
c002065b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020660:	74 07                	je     c0020669 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020662:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020667:	75 07                	jne    c0020670 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020669:	b8 04 00 00 00       	mov    eax,0x4
c002066e:	eb 3d                	jmp    c00206ad <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020670:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020674:	50                   	push   eax
c0020675:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020679:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002067d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020681:	e8 8d 4f fe ff       	call   c0005613 <f_write>
c0020686:	83 c4 10             	add    esp,0x10
c0020689:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002068d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020691:	89 c2                	mov    edx,eax
c0020693:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020697:	89 10                	mov    DWORD PTR [eax],edx
c0020699:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002069d:	85 c0                	test   eax,eax
c002069f:	75 07                	jne    c00206a8 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00206a1:	b8 00 00 00 00       	mov    eax,0x0
c00206a6:	eb 05                	jmp    c00206ad <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00206a8:	b8 01 00 00 00       	mov    eax,0x1
c00206ad:	83 c4 1c             	add    esp,0x1c
c00206b0:	c3                   	ret    
c00206b1:	90                   	nop

c00206b2 <FAT::close(void*)>:
c00206b2:	83 ec 1c             	sub    esp,0x1c
c00206b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00206ba:	75 07                	jne    c00206c3 <FAT::close(void*)+0x11>
c00206bc:	b8 04 00 00 00       	mov    eax,0x4
c00206c1:	eb 36                	jmp    c00206f9 <FAT::close(void*)+0x47>
c00206c3:	83 ec 0c             	sub    esp,0xc
c00206c6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206ca:	e8 da 53 fe ff       	call   c0005aa9 <f_close>
c00206cf:	83 c4 10             	add    esp,0x10
c00206d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206d6:	83 ec 0c             	sub    esp,0xc
c00206d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206dd:	e8 c7 ee fe ff       	call   c000f5a9 <free>
c00206e2:	83 c4 10             	add    esp,0x10
c00206e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00206e9:	85 c0                	test   eax,eax
c00206eb:	75 07                	jne    c00206f4 <FAT::close(void*)+0x42>
c00206ed:	b8 00 00 00 00       	mov    eax,0x0
c00206f2:	eb 05                	jmp    c00206f9 <FAT::close(void*)+0x47>
c00206f4:	b8 01 00 00 00       	mov    eax,0x1
c00206f9:	83 c4 1c             	add    esp,0x1c
c00206fc:	c3                   	ret    
c00206fd:	90                   	nop

c00206fe <FAT::closeDir(void*)>:
c00206fe:	83 ec 1c             	sub    esp,0x1c
c0020701:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020706:	75 07                	jne    c002070f <FAT::closeDir(void*)+0x11>
c0020708:	b8 04 00 00 00       	mov    eax,0x4
c002070d:	eb 36                	jmp    c0020745 <FAT::closeDir(void*)+0x47>
c002070f:	83 ec 0c             	sub    esp,0xc
c0020712:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020716:	e8 76 59 fe ff       	call   c0006091 <f_closedir>
c002071b:	83 c4 10             	add    esp,0x10
c002071e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020722:	83 ec 0c             	sub    esp,0xc
c0020725:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020729:	e8 7b ee fe ff       	call   c000f5a9 <free>
c002072e:	83 c4 10             	add    esp,0x10
c0020731:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020735:	85 c0                	test   eax,eax
c0020737:	75 07                	jne    c0020740 <FAT::closeDir(void*)+0x42>
c0020739:	b8 00 00 00 00       	mov    eax,0x0
c002073e:	eb 05                	jmp    c0020745 <FAT::closeDir(void*)+0x47>
c0020740:	b8 01 00 00 00       	mov    eax,0x1
c0020745:	83 c4 1c             	add    esp,0x1c
c0020748:	c3                   	ret    
c0020749:	90                   	nop

c002074a <FAT::seek(void*, unsigned long long)>:
c002074a:	83 ec 2c             	sub    esp,0x2c
c002074d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020751:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020755:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020759:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002075d:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020762:	75 07                	jne    c002076b <FAT::seek(void*, unsigned long long)+0x21>
c0020764:	b8 04 00 00 00       	mov    eax,0x4
c0020769:	eb 2f                	jmp    c002079a <FAT::seek(void*, unsigned long long)+0x50>
c002076b:	83 ec 04             	sub    esp,0x4
c002076e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020772:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020776:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002077a:	e8 59 53 fe ff       	call   c0005ad8 <f_lseek>
c002077f:	83 c4 10             	add    esp,0x10
c0020782:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020786:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002078a:	85 c0                	test   eax,eax
c002078c:	75 07                	jne    c0020795 <FAT::seek(void*, unsigned long long)+0x4b>
c002078e:	b8 00 00 00 00       	mov    eax,0x0
c0020793:	eb 05                	jmp    c002079a <FAT::seek(void*, unsigned long long)+0x50>
c0020795:	b8 01 00 00 00       	mov    eax,0x1
c002079a:	83 c4 2c             	add    esp,0x2c
c002079d:	c3                   	ret    

c002079e <fatWrapperReadDisk>:
c002079e:	83 ec 1c             	sub    esp,0x1c
c00207a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207a5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207ad:	89 04 24             	mov    DWORD PTR [esp],eax
c00207b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00207b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00207b8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00207bd:	8b 04 85 00 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2100]
c00207c4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00207c8:	83 ec 0c             	sub    esp,0xc
c00207cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00207cf:	52                   	push   edx
c00207d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00207d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00207d8:	50                   	push   eax
c00207d9:	e8 3e 58 ff ff       	call   c001601c <LogicalDisk::read(unsigned long long, int, void*)>
c00207de:	83 c4 20             	add    esp,0x20
c00207e1:	83 c4 1c             	add    esp,0x1c
c00207e4:	c3                   	ret    

c00207e5 <fatWrapperWriteDisk>:
c00207e5:	83 ec 1c             	sub    esp,0x1c
c00207e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207ec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00207f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00207fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00207ff:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020804:	8b 04 85 00 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2100]
c002080b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002080f:	83 ec 0c             	sub    esp,0xc
c0020812:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020816:	52                   	push   edx
c0020817:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002081b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002081f:	50                   	push   eax
c0020820:	e8 63 58 ff ff       	call   c0016088 <LogicalDisk::write(unsigned long long, int, void*)>
c0020825:	83 c4 20             	add    esp,0x20
c0020828:	83 c4 1c             	add    esp,0x1c
c002082b:	c3                   	ret    

c002082c <fatWrapperIoctl>:
c002082c:	53                   	push   ebx
c002082d:	83 ec 28             	sub    esp,0x28
c0020830:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020834:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020838:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002083c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020840:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020845:	75 31                	jne    c0020878 <fatWrapperIoctl+0x4c>
c0020847:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002084b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002084f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020854:	8b 04 85 00 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2100]
c002085b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020861:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020867:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002086b:	66 89 02             	mov    WORD PTR [edx],ax
c002086e:	b8 00 00 00 00       	mov    eax,0x0
c0020873:	e9 b2 00 00 00       	jmp    c002092a <fatWrapperIoctl+0xfe>
c0020878:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c002087d:	75 6a                	jne    c00208e9 <fatWrapperIoctl+0xbd>
c002087f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020883:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020887:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002088c:	8b 04 85 00 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2100]
c0020893:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020899:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c002089f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00208a5:	89 c8                	mov    eax,ecx
c00208a7:	89 da                	mov    edx,ebx
c00208a9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00208ad:	c1 e0 0a             	shl    eax,0xa
c00208b0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00208b5:	8b 0c 8d 00 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2100]
c00208bc:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00208c2:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00208c8:	89 cb                	mov    ebx,ecx
c00208ca:	c1 fb 1f             	sar    ebx,0x1f
c00208cd:	53                   	push   ebx
c00208ce:	51                   	push   ecx
c00208cf:	52                   	push   edx
c00208d0:	50                   	push   eax
c00208d1:	e8 2e 5e 00 00       	call   c0026704 <__udivdi3>
c00208d6:	83 c4 10             	add    esp,0x10
c00208d9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00208dd:	89 01                	mov    DWORD PTR [ecx],eax
c00208df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00208e2:	b8 00 00 00 00       	mov    eax,0x0
c00208e7:	eb 41                	jmp    c002092a <fatWrapperIoctl+0xfe>
c00208e9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00208ee:	75 07                	jne    c00208f7 <fatWrapperIoctl+0xcb>
c00208f0:	b8 00 00 00 00       	mov    eax,0x0
c00208f5:	eb 33                	jmp    c002092a <fatWrapperIoctl+0xfe>
c00208f7:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00208fc:	75 19                	jne    c0020917 <fatWrapperIoctl+0xeb>
c00208fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020902:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020906:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002090a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020910:	b8 00 00 00 00       	mov    eax,0x0
c0020915:	eb 13                	jmp    c002092a <fatWrapperIoctl+0xfe>
c0020917:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002091c:	75 07                	jne    c0020925 <fatWrapperIoctl+0xf9>
c002091e:	b8 00 00 00 00       	mov    eax,0x0
c0020923:	eb 05                	jmp    c002092a <fatWrapperIoctl+0xfe>
c0020925:	b8 04 00 00 00       	mov    eax,0x4
c002092a:	83 c4 28             	add    esp,0x28
c002092d:	5b                   	pop    ebx
c002092e:	c3                   	ret    
c002092f:	90                   	nop

c0020930 <FAT::FAT()>:
c0020930:	83 ec 1c             	sub    esp,0x1c
c0020933:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020937:	83 ec 0c             	sub    esp,0xc
c002093a:	50                   	push   eax
c002093b:	e8 92 20 ff ff       	call   c00129d2 <Filesystem::Filesystem()>
c0020940:	83 c4 10             	add    esp,0x10
c0020943:	ba fc bd 02 c0       	mov    edx,0xc002bdfc
c0020948:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002094c:	89 10                	mov    DWORD PTR [eax],edx
c002094e:	c7 05 20 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f20,0x0
c0020958:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020960:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020965:	7f 15                	jg     c002097c <FAT::FAT()+0x4c>
c0020967:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002096b:	c7 04 85 40 0f 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcf0c0],0xffffffff
c0020976:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002097a:	eb e4                	jmp    c0020960 <FAT::FAT()+0x30>
c002097c:	90                   	nop
c002097d:	83 c4 1c             	add    esp,0x1c
c0020980:	c3                   	ret    
c0020981:	90                   	nop

c0020982 <FAT::fixFilepath(char*)>:
c0020982:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020986:	8a 00                	mov    al,BYTE PTR [eax]
c0020988:	3c 40                	cmp    al,0x40
c002098a:	7e 2c                	jle    c00209b8 <FAT::fixFilepath(char*)+0x36>
c002098c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020990:	8a 00                	mov    al,BYTE PTR [eax]
c0020992:	83 e8 41             	sub    eax,0x41
c0020995:	88 c2                	mov    dl,al
c0020997:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002099b:	88 10                	mov    BYTE PTR [eax],dl
c002099d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209a1:	8a 00                	mov    al,BYTE PTR [eax]
c00209a3:	0f be c0             	movsx  eax,al
c00209a6:	8b 04 85 40 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0c0]
c00209ad:	83 c0 30             	add    eax,0x30
c00209b0:	88 c2                	mov    dl,al
c00209b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209b6:	88 10                	mov    BYTE PTR [eax],dl
c00209b8:	90                   	nop
c00209b9:	c3                   	ret    

c00209ba <FAT::open(char const*, void**, FileOpenMode)>:
c00209ba:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00209c0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00209c8:	74 0a                	je     c00209d4 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00209ca:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00209d2:	75 0a                	jne    c00209de <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00209d4:	b8 04 00 00 00       	mov    eax,0x4
c00209d9:	e9 fd 00 00 00       	jmp    c0020adb <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00209de:	83 ec 08             	sub    esp,0x8
c00209e1:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00209e8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00209ec:	50                   	push   eax
c00209ed:	e8 1a fe fd ff       	call   c000080c <strcpy>
c00209f2:	83 c4 10             	add    esp,0x10
c00209f5:	83 ec 08             	sub    esp,0x8
c00209f8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00209fc:	50                   	push   eax
c00209fd:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a04:	e8 79 ff ff ff       	call   c0020982 <FAT::fixFilepath(char*)>
c0020a09:	83 c4 10             	add    esp,0x10
c0020a0c:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020a14:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a1b:	83 e0 01             	and    eax,0x1
c0020a1e:	74 08                	je     c0020a28 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020a20:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020a28:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a2f:	83 e0 04             	and    eax,0x4
c0020a32:	74 10                	je     c0020a44 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020a34:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020a3c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020a44:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a4b:	83 e0 02             	and    eax,0x2
c0020a4e:	74 08                	je     c0020a58 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020a50:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020a58:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a5f:	83 e0 08             	and    eax,0x8
c0020a62:	74 08                	je     c0020a6c <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020a64:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020a6c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a73:	83 e0 10             	and    eax,0x10
c0020a76:	74 08                	je     c0020a80 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020a78:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020a80:	83 ec 0c             	sub    esp,0xc
c0020a83:	68 50 02 00 00       	push   0x250
c0020a88:	e8 0c eb fe ff       	call   c000f599 <malloc>
c0020a8d:	83 c4 10             	add    esp,0x10
c0020a90:	89 c2                	mov    edx,eax
c0020a92:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020a99:	89 10                	mov    DWORD PTR [eax],edx
c0020a9b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020aa3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020aaa:	8b 00                	mov    eax,DWORD PTR [eax]
c0020aac:	83 ec 04             	sub    esp,0x4
c0020aaf:	52                   	push   edx
c0020ab0:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020ab4:	52                   	push   edx
c0020ab5:	50                   	push   eax
c0020ab6:	e8 9c 44 fe ff       	call   c0004f57 <f_open>
c0020abb:	83 c4 10             	add    esp,0x10
c0020abe:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020ac5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020acd:	74 07                	je     c0020ad6 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020acf:	b8 01 00 00 00       	mov    eax,0x1
c0020ad4:	eb 05                	jmp    c0020adb <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020ad6:	b8 00 00 00 00       	mov    eax,0x0
c0020adb:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020ae1:	c3                   	ret    

c0020ae2 <FAT::openDir(char const*, void**)>:
c0020ae2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020ae8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020af0:	74 0a                	je     c0020afc <FAT::openDir(char const*, void**)+0x1a>
c0020af2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020afa:	75 07                	jne    c0020b03 <FAT::openDir(char const*, void**)+0x21>
c0020afc:	b8 04 00 00 00       	mov    eax,0x4
c0020b01:	eb 7d                	jmp    c0020b80 <FAT::openDir(char const*, void**)+0x9e>
c0020b03:	83 ec 08             	sub    esp,0x8
c0020b06:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b0d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020b11:	50                   	push   eax
c0020b12:	e8 f5 fc fd ff       	call   c000080c <strcpy>
c0020b17:	83 c4 10             	add    esp,0x10
c0020b1a:	83 ec 08             	sub    esp,0x8
c0020b1d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020b21:	50                   	push   eax
c0020b22:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b29:	e8 54 fe ff ff       	call   c0020982 <FAT::fixFilepath(char*)>
c0020b2e:	83 c4 10             	add    esp,0x10
c0020b31:	83 ec 0c             	sub    esp,0xc
c0020b34:	6a 4c                	push   0x4c
c0020b36:	e8 5e ea fe ff       	call   c000f599 <malloc>
c0020b3b:	83 c4 10             	add    esp,0x10
c0020b3e:	89 c2                	mov    edx,eax
c0020b40:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b47:	89 10                	mov    DWORD PTR [eax],edx
c0020b49:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b50:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b52:	83 ec 08             	sub    esp,0x8
c0020b55:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020b59:	52                   	push   edx
c0020b5a:	50                   	push   eax
c0020b5b:	e8 2f 54 fe ff       	call   c0005f8f <f_opendir>
c0020b60:	83 c4 10             	add    esp,0x10
c0020b63:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020b6a:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020b72:	74 07                	je     c0020b7b <FAT::openDir(char const*, void**)+0x99>
c0020b74:	b8 01 00 00 00       	mov    eax,0x1
c0020b79:	eb 05                	jmp    c0020b80 <FAT::openDir(char const*, void**)+0x9e>
c0020b7b:	b8 00 00 00 00       	mov    eax,0x0
c0020b80:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020b86:	c3                   	ret    
c0020b87:	90                   	nop

c0020b88 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020b88:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020b8e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020b96:	75 0a                	jne    c0020ba2 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020b98:	b8 04 00 00 00       	mov    eax,0x4
c0020b9d:	e9 c9 00 00 00       	jmp    c0020c6b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020ba2:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020baa:	75 0a                	jne    c0020bb6 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020bac:	b8 04 00 00 00       	mov    eax,0x4
c0020bb1:	e9 b5 00 00 00       	jmp    c0020c6b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020bb6:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020bbe:	75 0a                	jne    c0020bca <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020bc0:	b8 04 00 00 00       	mov    eax,0x4
c0020bc5:	e9 a1 00 00 00       	jmp    c0020c6b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020bca:	83 ec 08             	sub    esp,0x8
c0020bcd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020bd4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020bdb:	50                   	push   eax
c0020bdc:	e8 2b fc fd ff       	call   c000080c <strcpy>
c0020be1:	83 c4 10             	add    esp,0x10
c0020be4:	83 ec 08             	sub    esp,0x8
c0020be7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020bee:	50                   	push   eax
c0020bef:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020bf6:	e8 87 fd ff ff       	call   c0020982 <FAT::fixFilepath(char*)>
c0020bfb:	83 c4 10             	add    esp,0x10
c0020bfe:	83 ec 08             	sub    esp,0x8
c0020c01:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c05:	50                   	push   eax
c0020c06:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020c0d:	50                   	push   eax
c0020c0e:	e8 3b 55 fe ff       	call   c000614e <f_stat>
c0020c13:	83 c4 10             	add    esp,0x10
c0020c16:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020c1d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020c24:	85 c0                	test   eax,eax
c0020c26:	74 07                	je     c0020c2f <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020c28:	83 f8 04             	cmp    eax,0x4
c0020c2b:	74 32                	je     c0020c5f <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020c2d:	eb 37                	jmp    c0020c66 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020c2f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020c33:	0f b6 c0             	movzx  eax,al
c0020c36:	83 e0 10             	and    eax,0x10
c0020c39:	0f 95 c2             	setne  dl
c0020c3c:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020c43:	88 10                	mov    BYTE PTR [eax],dl
c0020c45:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020c48:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020c4c:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020c53:	89 01                	mov    DWORD PTR [ecx],eax
c0020c55:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020c58:	b8 00 00 00 00       	mov    eax,0x0
c0020c5d:	eb 0c                	jmp    c0020c6b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c5f:	b8 02 00 00 00       	mov    eax,0x2
c0020c64:	eb 05                	jmp    c0020c6b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c66:	b8 01 00 00 00       	mov    eax,0x1
c0020c6b:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020c71:	c3                   	ret    

c0020c72 <FAT::unlink(char const*)>:
c0020c72:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020c78:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020c80:	75 07                	jne    c0020c89 <FAT::unlink(char const*)+0x17>
c0020c82:	b8 04 00 00 00       	mov    eax,0x4
c0020c87:	eb 5c                	jmp    c0020ce5 <FAT::unlink(char const*)+0x73>
c0020c89:	83 ec 08             	sub    esp,0x8
c0020c8c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c93:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020c97:	50                   	push   eax
c0020c98:	e8 6f fb fd ff       	call   c000080c <strcpy>
c0020c9d:	83 c4 10             	add    esp,0x10
c0020ca0:	83 ec 08             	sub    esp,0x8
c0020ca3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ca7:	50                   	push   eax
c0020ca8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020caf:	e8 ce fc ff ff       	call   c0020982 <FAT::fixFilepath(char*)>
c0020cb4:	83 c4 10             	add    esp,0x10
c0020cb7:	83 ec 0c             	sub    esp,0xc
c0020cba:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020cbe:	50                   	push   eax
c0020cbf:	e8 dc 57 fe ff       	call   c00064a0 <f_unlink>
c0020cc4:	83 c4 10             	add    esp,0x10
c0020cc7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020cce:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020cd5:	85 c0                	test   eax,eax
c0020cd7:	75 07                	jne    c0020ce0 <FAT::unlink(char const*)+0x6e>
c0020cd9:	b8 00 00 00 00       	mov    eax,0x0
c0020cde:	eb 05                	jmp    c0020ce5 <FAT::unlink(char const*)+0x73>
c0020ce0:	b8 01 00 00 00       	mov    eax,0x1
c0020ce5:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020ceb:	c3                   	ret    

c0020cec <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020cec:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020cf2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020cf9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020d00:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020d04:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020d08:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020d10:	75 0a                	jne    c0020d1c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020d12:	b8 04 00 00 00       	mov    eax,0x4
c0020d17:	e9 1c 01 00 00       	jmp    c0020e38 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020d1c:	83 ec 08             	sub    esp,0x8
c0020d1f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020d26:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020d2a:	50                   	push   eax
c0020d2b:	e8 dc fa fd ff       	call   c000080c <strcpy>
c0020d30:	83 c4 10             	add    esp,0x10
c0020d33:	83 ec 08             	sub    esp,0x8
c0020d36:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020d3a:	50                   	push   eax
c0020d3b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020d42:	e8 3b fc ff ff       	call   c0020982 <FAT::fixFilepath(char*)>
c0020d47:	83 c4 10             	add    esp,0x10
c0020d4a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020d52:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020d5a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d5f:	83 e0 01             	and    eax,0x1
c0020d62:	74 08                	je     c0020d6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020d64:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020d6c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d71:	83 e0 02             	and    eax,0x2
c0020d74:	74 08                	je     c0020d7e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020d76:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020d7e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d83:	83 e0 04             	and    eax,0x4
c0020d86:	74 08                	je     c0020d90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020d88:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020d90:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d95:	83 e0 08             	and    eax,0x8
c0020d98:	74 08                	je     c0020da2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020d9a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020da2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020da7:	83 e0 01             	and    eax,0x1
c0020daa:	74 08                	je     c0020db4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020dac:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020db4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020db9:	83 e0 02             	and    eax,0x2
c0020dbc:	74 08                	je     c0020dc6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020dbe:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020dc6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dcb:	83 e0 04             	and    eax,0x4
c0020dce:	74 08                	je     c0020dd8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020dd0:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020dd8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ddd:	83 e0 08             	and    eax,0x8
c0020de0:	74 08                	je     c0020dea <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020de2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020dea:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020df1:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020df8:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020e00:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020e08:	83 ec 04             	sub    esp,0x4
c0020e0b:	52                   	push   edx
c0020e0c:	50                   	push   eax
c0020e0d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020e11:	50                   	push   eax
c0020e12:	e8 2b 5d fe ff       	call   c0006b42 <f_chmod>
c0020e17:	83 c4 10             	add    esp,0x10
c0020e1a:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020e21:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020e28:	85 c0                	test   eax,eax
c0020e2a:	75 07                	jne    c0020e33 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020e2c:	b8 00 00 00 00       	mov    eax,0x0
c0020e31:	eb 05                	jmp    c0020e38 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020e33:	b8 01 00 00 00       	mov    eax,0x1
c0020e38:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020e3e:	c3                   	ret    
c0020e3f:	90                   	nop

c0020e40 <FAT::rename(char const*, char const*)>:
c0020e40:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020e46:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020e4e:	74 0a                	je     c0020e5a <FAT::rename(char const*, char const*)+0x1a>
c0020e50:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020e58:	75 0a                	jne    c0020e64 <FAT::rename(char const*, char const*)+0x24>
c0020e5a:	b8 04 00 00 00       	mov    eax,0x4
c0020e5f:	e9 98 00 00 00       	jmp    c0020efc <FAT::rename(char const*, char const*)+0xbc>
c0020e64:	83 ec 08             	sub    esp,0x8
c0020e67:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020e6e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020e75:	50                   	push   eax
c0020e76:	e8 91 f9 fd ff       	call   c000080c <strcpy>
c0020e7b:	83 c4 10             	add    esp,0x10
c0020e7e:	83 ec 08             	sub    esp,0x8
c0020e81:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020e88:	50                   	push   eax
c0020e89:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020e90:	e8 ed fa ff ff       	call   c0020982 <FAT::fixFilepath(char*)>
c0020e95:	83 c4 10             	add    esp,0x10
c0020e98:	83 ec 08             	sub    esp,0x8
c0020e9b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020ea2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ea6:	50                   	push   eax
c0020ea7:	e8 60 f9 fd ff       	call   c000080c <strcpy>
c0020eac:	83 c4 10             	add    esp,0x10
c0020eaf:	83 ec 08             	sub    esp,0x8
c0020eb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020eb6:	50                   	push   eax
c0020eb7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020ebe:	e8 bf fa ff ff       	call   c0020982 <FAT::fixFilepath(char*)>
c0020ec3:	83 c4 10             	add    esp,0x10
c0020ec6:	83 ec 08             	sub    esp,0x8
c0020ec9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ecd:	50                   	push   eax
c0020ece:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020ed5:	50                   	push   eax
c0020ed6:	e8 74 59 fe ff       	call   c000684f <f_rename>
c0020edb:	83 c4 10             	add    esp,0x10
c0020ede:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020ee5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020eec:	85 c0                	test   eax,eax
c0020eee:	75 07                	jne    c0020ef7 <FAT::rename(char const*, char const*)+0xb7>
c0020ef0:	b8 00 00 00 00       	mov    eax,0x0
c0020ef5:	eb 05                	jmp    c0020efc <FAT::rename(char const*, char const*)+0xbc>
c0020ef7:	b8 01 00 00 00       	mov    eax,0x1
c0020efc:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020f02:	c3                   	ret    
c0020f03:	90                   	nop

c0020f04 <FAT::mkdir(char const*)>:
c0020f04:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020f0a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020f12:	75 07                	jne    c0020f1b <FAT::mkdir(char const*)+0x17>
c0020f14:	b8 04 00 00 00       	mov    eax,0x4
c0020f19:	eb 5c                	jmp    c0020f77 <FAT::mkdir(char const*)+0x73>
c0020f1b:	83 ec 08             	sub    esp,0x8
c0020f1e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f25:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f29:	50                   	push   eax
c0020f2a:	e8 dd f8 fd ff       	call   c000080c <strcpy>
c0020f2f:	83 c4 10             	add    esp,0x10
c0020f32:	83 ec 08             	sub    esp,0x8
c0020f35:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f39:	50                   	push   eax
c0020f3a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f41:	e8 3c fa ff ff       	call   c0020982 <FAT::fixFilepath(char*)>
c0020f46:	83 c4 10             	add    esp,0x10
c0020f49:	83 ec 0c             	sub    esp,0xc
c0020f4c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f50:	50                   	push   eax
c0020f51:	e8 cd 56 fe ff       	call   c0006623 <f_mkdir>
c0020f56:	83 c4 10             	add    esp,0x10
c0020f59:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020f60:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020f67:	85 c0                	test   eax,eax
c0020f69:	75 07                	jne    c0020f72 <FAT::mkdir(char const*)+0x6e>
c0020f6b:	b8 00 00 00 00       	mov    eax,0x0
c0020f70:	eb 05                	jmp    c0020f77 <FAT::mkdir(char const*)+0x73>
c0020f72:	b8 01 00 00 00       	mov    eax,0x1
c0020f77:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020f7d:	c3                   	ret    

c0020f7e <FAT::exists(char const*)>:
c0020f7e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020f84:	83 ec 08             	sub    esp,0x8
c0020f87:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020f8e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020f92:	50                   	push   eax
c0020f93:	e8 74 f8 fd ff       	call   c000080c <strcpy>
c0020f98:	83 c4 10             	add    esp,0x10
c0020f9b:	83 ec 08             	sub    esp,0x8
c0020f9e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020fa2:	50                   	push   eax
c0020fa3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020faa:	e8 d3 f9 ff ff       	call   c0020982 <FAT::fixFilepath(char*)>
c0020faf:	83 c4 10             	add    esp,0x10
c0020fb2:	83 ec 08             	sub    esp,0x8
c0020fb5:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020fbc:	50                   	push   eax
c0020fbd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020fc1:	50                   	push   eax
c0020fc2:	e8 87 51 fe ff       	call   c000614e <f_stat>
c0020fc7:	83 c4 10             	add    esp,0x10
c0020fca:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020fd1:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020fd8:	85 c0                	test   eax,eax
c0020fda:	75 04                	jne    c0020fe0 <FAT::exists(char const*)+0x62>
c0020fdc:	b0 01                	mov    al,0x1
c0020fde:	eb 02                	jmp    c0020fe2 <FAT::exists(char const*)+0x64>
c0020fe0:	b0 00                	mov    al,0x0
c0020fe2:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020fe8:	c3                   	ret    
c0020fe9:	90                   	nop

c0020fea <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020fea:	b8 08 00 00 00       	mov    eax,0x8
c0020fef:	c3                   	ret    

c0020ff0 <ISO9660::seek(void*, unsigned long long)>:
c0020ff0:	53                   	push   ebx
c0020ff1:	b8 04 00 00 00       	mov    eax,0x4
c0020ff6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020ffa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020ffe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021002:	85 d2                	test   edx,edx
c0021004:	74 17                	je     c002101d <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021006:	89 c8                	mov    eax,ecx
c0021008:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002100b:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002100e:	b8 01 00 00 00       	mov    eax,0x1
c0021013:	73 08                	jae    c002101d <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021015:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021018:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002101b:	31 c0                	xor    eax,eax
c002101d:	5b                   	pop    ebx
c002101e:	c3                   	ret    
c002101f:	90                   	nop

c0021020 <ISO9660::tell(void*, unsigned long long*)>:
c0021020:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021024:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021028:	85 d2                	test   edx,edx
c002102a:	74 12                	je     c002103e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002102c:	85 c0                	test   eax,eax
c002102e:	74 0e                	je     c002103e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021030:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021033:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021036:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021039:	89 10                	mov    DWORD PTR [eax],edx
c002103b:	31 c0                	xor    eax,eax
c002103d:	c3                   	ret    
c002103e:	b8 04 00 00 00       	mov    eax,0x4
c0021043:	c3                   	ret    

c0021044 <ISO9660::getName()>:
c0021044:	b8 5c be 02 c0       	mov    eax,0xc002be5c
c0021049:	c3                   	ret    

c002104a <ISO9660::stat(void*, unsigned long long*)>:
c002104a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002104e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021052:	85 d2                	test   edx,edx
c0021054:	74 12                	je     c0021068 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021056:	85 c0                	test   eax,eax
c0021058:	74 0e                	je     c0021068 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002105a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002105d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021060:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021063:	89 10                	mov    DWORD PTR [eax],edx
c0021065:	31 c0                	xor    eax,eax
c0021067:	c3                   	ret    
c0021068:	b8 04 00 00 00       	mov    eax,0x4
c002106d:	c3                   	ret    

c002106e <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002106e:	b8 01 00 00 00       	mov    eax,0x1
c0021073:	c3                   	ret    

c0021074 <ISO9660::unlink(char const*)>:
c0021074:	b8 01 00 00 00       	mov    eax,0x1
c0021079:	c3                   	ret    

c002107a <ISO9660::write(void*, unsigned long, void*, int*)>:
c002107a:	b8 01 00 00 00       	mov    eax,0x1
c002107f:	c3                   	ret    

c0021080 <ISO9660::rename(char const*, char const*)>:
c0021080:	b8 01 00 00 00       	mov    eax,0x1
c0021085:	c3                   	ret    

c0021086 <ISO9660::mkdir(char const*)>:
c0021086:	b8 01 00 00 00       	mov    eax,0x1
c002108b:	c3                   	ret    

c002108c <ISO9660::close(void*)>:
c002108c:	83 ec 0c             	sub    esp,0xc
c002108f:	b8 04 00 00 00       	mov    eax,0x4
c0021094:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021098:	85 d2                	test   edx,edx
c002109a:	74 0e                	je     c00210aa <ISO9660::close(void*)+0x1e>
c002109c:	83 ec 0c             	sub    esp,0xc
c002109f:	52                   	push   edx
c00210a0:	e8 04 e5 fe ff       	call   c000f5a9 <free>
c00210a5:	83 c4 10             	add    esp,0x10
c00210a8:	31 c0                	xor    eax,eax
c00210aa:	83 c4 0c             	add    esp,0xc
c00210ad:	c3                   	ret    

c00210ae <ISO9660::closeDir(void*)>:
c00210ae:	83 ec 0c             	sub    esp,0xc
c00210b1:	b8 04 00 00 00       	mov    eax,0x4
c00210b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00210ba:	85 d2                	test   edx,edx
c00210bc:	74 0e                	je     c00210cc <ISO9660::closeDir(void*)+0x1e>
c00210be:	83 ec 0c             	sub    esp,0xc
c00210c1:	52                   	push   edx
c00210c2:	e8 e2 e4 fe ff       	call   c000f5a9 <free>
c00210c7:	83 c4 10             	add    esp,0x10
c00210ca:	31 c0                	xor    eax,eax
c00210cc:	83 c4 0c             	add    esp,0xc
c00210cf:	c3                   	ret    

c00210d0 <ISO9660::~ISO9660()>:
c00210d0:	83 ec 0c             	sub    esp,0xc
c00210d3:	ba 80 be 02 c0       	mov    edx,0xc002be80
c00210d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210dc:	89 10                	mov    DWORD PTR [eax],edx
c00210de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210e2:	83 ec 0c             	sub    esp,0xc
c00210e5:	50                   	push   eax
c00210e6:	e8 0b 19 ff ff       	call   c00129f6 <Filesystem::~Filesystem()>
c00210eb:	83 c4 10             	add    esp,0x10
c00210ee:	90                   	nop
c00210ef:	83 c4 0c             	add    esp,0xc
c00210f2:	c3                   	ret    
c00210f3:	90                   	nop

c00210f4 <ISO9660::~ISO9660()>:
c00210f4:	83 ec 0c             	sub    esp,0xc
c00210f7:	83 ec 0c             	sub    esp,0xc
c00210fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00210fe:	e8 cd ff ff ff       	call   c00210d0 <ISO9660::~ISO9660()>
c0021103:	83 c4 10             	add    esp,0x10
c0021106:	83 ec 08             	sub    esp,0x8
c0021109:	6a 08                	push   0x8
c002110b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002110f:	e8 db 14 ff ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0021114:	83 c4 10             	add    esp,0x10
c0021117:	83 c4 0c             	add    esp,0xc
c002111a:	c3                   	ret    

c002111b <__memmem(unsigned char*, int, unsigned char*, int)>:
c002111b:	55                   	push   ebp
c002111c:	31 c9                	xor    ecx,ecx
c002111e:	57                   	push   edi
c002111f:	56                   	push   esi
c0021120:	53                   	push   ebx
c0021121:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021125:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021129:	89 eb                	mov    ebx,ebp
c002112b:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002112f:	39 ce                	cmp    esi,ecx
c0021131:	7e 17                	jle    c002114a <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021133:	31 d2                	xor    edx,edx
c0021135:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021139:	7d 13                	jge    c002114e <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002113b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002113f:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021142:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021145:	75 0d                	jne    c0021154 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021147:	42                   	inc    edx
c0021148:	eb eb                	jmp    c0021135 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c002114a:	31 c0                	xor    eax,eax
c002114c:	eb 0a                	jmp    c0021158 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002114e:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021152:	eb 04                	jmp    c0021158 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021154:	41                   	inc    ecx
c0021155:	43                   	inc    ebx
c0021156:	eb d7                	jmp    c002112f <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021158:	5b                   	pop    ebx
c0021159:	5e                   	pop    esi
c002115a:	5f                   	pop    edi
c002115b:	5d                   	pop    ebp
c002115c:	c3                   	ret    

c002115d <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002115d:	57                   	push   edi
c002115e:	56                   	push   esi
c002115f:	53                   	push   ebx
c0021160:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021164:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021168:	39 0d 20 10 03 c0    	cmp    DWORD PTR ds:0xc0031020,ecx
c002116e:	75 08                	jne    c0021178 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0021170:	38 05 94 ce 02 c0    	cmp    BYTE PTR ds:0xc002ce94,al
c0021176:	74 2b                	je     c00211a3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021178:	83 ec 0c             	sub    esp,0xc
c002117b:	a2 94 ce 02 c0       	mov    ds:0xc002ce94,al
c0021180:	68 40 10 03 c0       	push   0xc0031040
c0021185:	0f be c0             	movsx  eax,al
c0021188:	6a 01                	push   0x1
c002118a:	89 0d 20 10 03 c0    	mov    DWORD PTR ds:0xc0031020,ecx
c0021190:	31 db                	xor    ebx,ebx
c0021192:	53                   	push   ebx
c0021193:	51                   	push   ecx
c0021194:	ff 34 85 fc dd 02 c0 	push   DWORD PTR [eax*4-0x3ffd2204]
c002119b:	e8 7c 4e ff ff       	call   c001601c <LogicalDisk::read(unsigned long long, int, void*)>
c00211a0:	83 c4 20             	add    esp,0x20
c00211a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00211a7:	be 40 10 03 c0       	mov    esi,0xc0031040
c00211ac:	b9 00 08 00 00       	mov    ecx,0x800
c00211b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00211b3:	5b                   	pop    ebx
c00211b4:	5e                   	pop    esi
c00211b5:	5f                   	pop    edi
c00211b6:	c3                   	ret    
c00211b7:	90                   	nop

c00211b8 <ISO9660::tryMount(LogicalDisk*, int)>:
c00211b8:	81 ec 10 08 00 00    	sub    esp,0x810
c00211be:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00211c5:	83 c0 41             	add    eax,0x41
c00211c8:	0f be c0             	movsx  eax,al
c00211cb:	50                   	push   eax
c00211cc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00211d0:	50                   	push   eax
c00211d1:	6a 10                	push   0x10
c00211d3:	e8 85 ff ff ff       	call   c002115d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00211d8:	83 c4 10             	add    esp,0x10
c00211db:	31 c0                	xor    eax,eax
c00211dd:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00211e2:	75 1d                	jne    c0021201 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211e4:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00211e9:	75 16                	jne    c0021201 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211eb:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00211f0:	75 0f                	jne    c0021201 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211f2:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00211f7:	75 08                	jne    c0021201 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211f9:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00211fe:	0f 94 c0             	sete   al
c0021201:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021207:	c3                   	ret    

c0021208 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021208:	55                   	push   ebp
c0021209:	57                   	push   edi
c002120a:	56                   	push   esi
c002120b:	53                   	push   ebx
c002120c:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021212:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021219:	85 ed                	test   ebp,ebp
c002121b:	0f 84 da 01 00 00    	je     c00213fb <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021221:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021229:	0f 84 cc 01 00 00    	je     c00213fb <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002122f:	b8 01 00 00 00       	mov    eax,0x1
c0021234:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021238:	0f 85 c2 01 00 00    	jne    c0021400 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c002123e:	31 d2                	xor    edx,edx
c0021240:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021247:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002124a:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c002124d:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021250:	89 04 24             	mov    DWORD PTR [esp],eax
c0021253:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021257:	01 c8                	add    eax,ecx
c0021259:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002125c:	11 da                	adc    edx,ebx
c002125e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021262:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021266:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002126a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002126e:	19 d7                	sbb    edi,edx
c0021270:	72 11                	jb     c0021283 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021272:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021275:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002127d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021281:	eb 0c                	jmp    c002128f <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021283:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021287:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002128b:	29 ce                	sub    esi,ecx
c002128d:	19 df                	sbb    edi,ebx
c002128f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021292:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021295:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021299:	c1 e0 0b             	shl    eax,0xb
c002129c:	01 c8                	add    eax,ecx
c002129e:	11 da                	adc    edx,ebx
c00212a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00212a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00212a7:	51                   	push   ecx
c00212a8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00212ac:	50                   	push   eax
c00212ad:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00212b1:	53                   	push   ebx
c00212b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00212b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212ba:	0f ac d0 0b          	shrd   eax,edx,0xb
c00212be:	50                   	push   eax
c00212bf:	e8 99 fe ff ff       	call   c002115d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00212c4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00212c7:	b8 00 08 00 00       	mov    eax,0x800
c00212cc:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00212d2:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c00212d6:	29 d0                	sub    eax,edx
c00212d8:	83 c4 10             	add    esp,0x10
c00212db:	89 f9                	mov    ecx,edi
c00212dd:	39 c6                	cmp    esi,eax
c00212df:	83 d9 00             	sbb    ecx,0x0
c00212e2:	7d 1b                	jge    c00212ff <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c00212e4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00212e9:	75 12                	jne    c00212fd <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c00212eb:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00212f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00212f8:	e9 fa 00 00 00       	jmp    c00213f7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00212fd:	89 f0                	mov    eax,esi
c00212ff:	01 d3                	add    ebx,edx
c0021301:	31 d2                	xor    edx,edx
c0021303:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021307:	39 c2                	cmp    edx,eax
c0021309:	7d 14                	jge    c002131f <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c002130b:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021312:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021316:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021319:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002131c:	42                   	inc    edx
c002131d:	eb e8                	jmp    c0021307 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c002131f:	89 c2                	mov    edx,eax
c0021321:	85 c0                	test   eax,eax
c0021323:	79 02                	jns    c0021327 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021325:	31 d2                	xor    edx,edx
c0021327:	01 c2                	add    edx,eax
c0021329:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c002132c:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021333:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021337:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002133b:	99                   	cdq    
c002133c:	01 c1                	add    ecx,eax
c002133e:	11 d3                	adc    ebx,edx
c0021340:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021344:	29 c6                	sub    esi,eax
c0021346:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002134a:	19 d7                	sbb    edi,edx
c002134c:	89 34 24             	mov    DWORD PTR [esp],esi
c002134f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021353:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021358:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002135b:	b8 00 00 00 00       	mov    eax,0x0
c0021360:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021364:	7d 43                	jge    c00213a9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021366:	52                   	push   edx
c0021367:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002136b:	50                   	push   eax
c002136c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021370:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021374:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021378:	0f ac d0 0b          	shrd   eax,edx,0xb
c002137c:	50                   	push   eax
c002137d:	e8 db fd ff ff       	call   c002115d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021382:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c002138a:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c002138f:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021397:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002139f:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00213a4:	83 c4 10             	add    esp,0x10
c00213a7:	eb aa                	jmp    c0021353 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c00213a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213ad:	0b 04 24             	or     eax,DWORD PTR [esp]
c00213b0:	74 2a                	je     c00213dc <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c00213b2:	50                   	push   eax
c00213b3:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00213b7:	50                   	push   eax
c00213b8:	8d 74 24 28          	lea    esi,[esp+0x28]
c00213bc:	56                   	push   esi
c00213bd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00213c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00213c5:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c00213c9:	51                   	push   ecx
c00213ca:	e8 8e fd ff ff       	call   c002115d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00213cf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00213d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00213d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00213d9:	83 c4 10             	add    esp,0x10
c00213dc:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00213e3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00213e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00213eb:	89 18                	mov    DWORD PTR [eax],ebx
c00213ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213f1:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00213f4:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00213f7:	31 c0                	xor    eax,eax
c00213f9:	eb 05                	jmp    c0021400 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00213fb:	b8 04 00 00 00       	mov    eax,0x4
c0021400:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021406:	5b                   	pop    ebx
c0021407:	5e                   	pop    esi
c0021408:	5f                   	pop    edi
c0021409:	5d                   	pop    ebp
c002140a:	c3                   	ret    
c002140b:	90                   	nop

c002140c <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002140c:	55                   	push   ebp
c002140d:	57                   	push   edi
c002140e:	56                   	push   esi
c002140f:	53                   	push   ebx
c0021410:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021416:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c002141d:	85 ed                	test   ebp,ebp
c002141f:	0f 84 51 02 00 00    	je     c0021676 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021425:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c002142d:	0f 84 43 02 00 00    	je     c0021676 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021433:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021436:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021439:	75 0a                	jne    c0021445 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c002143b:	b8 07 00 00 00       	mov    eax,0x7
c0021440:	e9 36 02 00 00       	jmp    c002167b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021445:	50                   	push   eax
c0021446:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002144a:	50                   	push   eax
c002144b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021452:	53                   	push   ebx
c0021453:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021456:	c1 e0 0b             	shl    eax,0xb
c0021459:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c002145c:	c1 e8 0b             	shr    eax,0xb
c002145f:	50                   	push   eax
c0021460:	e8 f8 fc ff ff       	call   c002115d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021465:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021468:	83 c4 10             	add    esp,0x10
c002146b:	89 c1                	mov    ecx,eax
c002146d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021470:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021476:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021479:	84 db                	test   bl,bl
c002147b:	0f 85 8b 00 00 00    	jne    c002150c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021481:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021487:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002148a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021490:	29 c6                	sub    esi,eax
c0021492:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021496:	89 f3                	mov    ebx,esi
c0021498:	89 f1                	mov    ecx,esi
c002149a:	c1 fb 1f             	sar    ebx,0x1f
c002149d:	01 f0                	add    eax,esi
c002149f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00214a2:	11 da                	adc    edx,ebx
c00214a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00214a7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00214ab:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00214ae:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00214b1:	89 d8                	mov    eax,ebx
c00214b3:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c00214b7:	ba 00 00 00 00       	mov    edx,0x0
c00214bc:	19 f8                	sbb    eax,edi
c00214be:	b8 00 00 00 00       	mov    eax,0x0
c00214c3:	73 08                	jae    c00214cd <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c00214c5:	89 f0                	mov    eax,esi
c00214c7:	89 fa                	mov    edx,edi
c00214c9:	29 c8                	sub    eax,ecx
c00214cb:	19 da                	sbb    edx,ebx
c00214cd:	89 d7                	mov    edi,edx
c00214cf:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00214d2:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00214d5:	09 c7                	or     edi,eax
c00214d7:	0f 84 5e ff ff ff    	je     c002143b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00214dd:	57                   	push   edi
c00214de:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00214e2:	50                   	push   eax
c00214e3:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00214ea:	53                   	push   ebx
c00214eb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00214ee:	c1 e0 0b             	shl    eax,0xb
c00214f1:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00214f5:	c1 e8 0b             	shr    eax,0xb
c00214f8:	50                   	push   eax
c00214f9:	e8 5f fc ff ff       	call   c002115d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00214fe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021501:	83 c4 10             	add    esp,0x10
c0021504:	25 ff 07 00 00       	and    eax,0x7ff
c0021509:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c002150c:	31 ff                	xor    edi,edi
c002150e:	56                   	push   esi
c002150f:	6a 28                	push   0x28
c0021511:	6a 00                	push   0x0
c0021513:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021517:	50                   	push   eax
c0021518:	e8 33 f2 fd ff       	call   c0000750 <memset>
c002151d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021520:	25 ff 07 00 00       	and    eax,0x7ff
c0021525:	89 c6                	mov    esi,eax
c0021527:	83 c6 21             	add    esi,0x21
c002152a:	83 d7 00             	adc    edi,0x0
c002152d:	83 c4 10             	add    esp,0x10
c0021530:	31 c9                	xor    ecx,ecx
c0021532:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021539:	83 f9 28             	cmp    ecx,0x28
c002153c:	88 04 24             	mov    BYTE PTR [esp],al
c002153f:	0f 94 c2             	sete   dl
c0021542:	88 d0                	mov    al,dl
c0021544:	ba ff 07 00 00       	mov    edx,0x7ff
c0021549:	39 f2                	cmp    edx,esi
c002154b:	ba 00 00 00 00       	mov    edx,0x0
c0021550:	19 fa                	sbb    edx,edi
c0021552:	0f 92 c2             	setb   dl
c0021555:	09 c2                	or     edx,eax
c0021557:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c002155b:	0f 94 c0             	sete   al
c002155e:	08 d0                	or     al,dl
c0021560:	75 16                	jne    c0021578 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021562:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021566:	74 10                	je     c0021578 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021568:	8a 04 24             	mov    al,BYTE PTR [esp]
c002156b:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c002156f:	41                   	inc    ecx
c0021570:	83 c6 01             	add    esi,0x1
c0021573:	83 d7 00             	adc    edi,0x0
c0021576:	eb ba                	jmp    c0021532 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021578:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c002157f:	83 ec 0c             	sub    esp,0xc
c0021582:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021586:	56                   	push   esi
c0021587:	e8 e0 f1 fd ff       	call   c000076c <strlen>
c002158c:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021593:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021597:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c002159f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00215a2:	5a                   	pop    edx
c00215a3:	25 ff 07 00 00       	and    eax,0x7ff
c00215a8:	59                   	pop    ecx
c00215a9:	01 f8                	add    eax,edi
c00215ab:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00215b1:	83 e0 02             	and    eax,0x2
c00215b4:	3c 01                	cmp    al,0x1
c00215b6:	19 c0                	sbb    eax,eax
c00215b8:	83 c0 02             	add    eax,0x2
c00215bb:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00215bf:	56                   	push   esi
c00215c0:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00215c4:	50                   	push   eax
c00215c5:	e8 42 f2 fd ff       	call   c000080c <strcpy>
c00215ca:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00215ce:	83 c4 10             	add    esp,0x10
c00215d1:	84 c0                	test   al,al
c00215d3:	75 21                	jne    c00215f6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c00215d5:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00215dd:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00215e5:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00215ed:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c00215f4:	eb 28                	jmp    c002161e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00215f6:	fe c8                	dec    al
c00215f8:	75 24                	jne    c002161e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00215fa:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021602:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002160a:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021612:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021619:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c002161e:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021622:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021629:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021630:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021632:	0f b6 f3             	movzx  esi,bl
c0021635:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c002163c:	31 db                	xor    ebx,ebx
c002163e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021644:	89 df                	mov    edi,ebx
c0021646:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002164c:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c002164f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021652:	39 c6                	cmp    esi,eax
c0021654:	19 d7                	sbb    edi,edx
c0021656:	72 10                	jb     c0021668 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021658:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c002165f:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021666:	eb 0a                	jmp    c0021672 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021668:	29 f0                	sub    eax,esi
c002166a:	19 da                	sbb    edx,ebx
c002166c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c002166f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021672:	31 c0                	xor    eax,eax
c0021674:	eb 05                	jmp    c002167b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021676:	b8 04 00 00 00       	mov    eax,0x4
c002167b:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021681:	5b                   	pop    ebx
c0021682:	5e                   	pop    esi
c0021683:	5f                   	pop    edi
c0021684:	5d                   	pop    ebp
c0021685:	c3                   	ret    

c0021686 <readRoot(unsigned int*, unsigned int*, char)>:
c0021686:	57                   	push   edi
c0021687:	56                   	push   esi
c0021688:	81 ec 38 08 00 00    	sub    esp,0x838
c002168e:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021696:	50                   	push   eax
c0021697:	8d 44 24 38          	lea    eax,[esp+0x38]
c002169b:	50                   	push   eax
c002169c:	6a 10                	push   0x10
c002169e:	e8 ba fa ff ff       	call   c002115d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216a3:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c00216aa:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c00216ae:	b9 22 00 00 00       	mov    ecx,0x22
c00216b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00216b5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00216bc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00216c0:	89 10                	mov    DWORD PTR [eax],edx
c00216c2:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00216c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00216cd:	89 10                	mov    DWORD PTR [eax],edx
c00216cf:	81 c4 44 08 00 00    	add    esp,0x844
c00216d5:	b0 01                	mov    al,0x1
c00216d7:	5e                   	pop    esi
c00216d8:	5f                   	pop    edi
c00216d9:	c3                   	ret    

c00216da <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00216da:	55                   	push   ebp
c00216db:	57                   	push   edi
c00216dc:	56                   	push   esi
c00216dd:	53                   	push   ebx
c00216de:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00216e4:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00216eb:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00216f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00216f6:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c00216fa:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00216fe:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021702:	75 03                	jne    c0021707 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021704:	83 c3 02             	add    ebx,0x2
c0021707:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c002170a:	75 03                	jne    c002170f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c002170c:	43                   	inc    ebx
c002170d:	eb f8                	jmp    c0021707 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002170f:	51                   	push   ecx
c0021710:	68 00 01 00 00       	push   0x100
c0021715:	6a 00                	push   0x0
c0021717:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002171b:	50                   	push   eax
c002171c:	e8 2f f0 fd ff       	call   c0000750 <memset>
c0021721:	83 c4 10             	add    esp,0x10
c0021724:	31 d2                	xor    edx,edx
c0021726:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021729:	84 c0                	test   al,al
c002172b:	74 21                	je     c002174e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c002172d:	3c 2f                	cmp    al,0x2f
c002172f:	75 0b                	jne    c002173c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021731:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021735:	bd 01 00 00 00       	mov    ebp,0x1
c002173a:	eb 14                	jmp    c0021750 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c002173c:	8d 48 9f             	lea    ecx,[eax-0x61]
c002173f:	80 f9 19             	cmp    cl,0x19
c0021742:	77 03                	ja     c0021747 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021744:	83 e8 20             	sub    eax,0x20
c0021747:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c002174b:	42                   	inc    edx
c002174c:	eb d8                	jmp    c0021726 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c002174e:	31 ed                	xor    ebp,ebp
c0021750:	83 ec 0c             	sub    esp,0xc
c0021753:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c002175a:	e8 3a de fe ff       	call   c000f599 <malloc>
c002175f:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021766:	89 c6                	mov    esi,eax
c0021768:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c002176e:	c1 ef 0b             	shr    edi,0xb
c0021771:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021778:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c002177c:	83 c4 10             	add    esp,0x10
c002177f:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021784:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021788:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c002178f:	74 28                	je     c00217b9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021791:	52                   	push   edx
c0021792:	57                   	push   edi
c0021793:	50                   	push   eax
c0021794:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021798:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c002179f:	e8 b9 f9 ff ff       	call   c002115d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00217a8:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00217af:	05 00 08 00 00       	add    eax,0x800
c00217b4:	83 c4 10             	add    esp,0x10
c00217b7:	eb cb                	jmp    c0021784 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00217b9:	83 ec 0c             	sub    esp,0xc
c00217bc:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00217c0:	57                   	push   edi
c00217c1:	e8 a6 ef fd ff       	call   c000076c <strlen>
c00217c6:	50                   	push   eax
c00217c7:	57                   	push   edi
c00217c8:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00217cf:	56                   	push   esi
c00217d0:	e8 46 f9 ff ff       	call   c002111b <__memmem(unsigned char*, int, unsigned char*, int)>
c00217d5:	83 c4 20             	add    esp,0x20
c00217d8:	85 c0                	test   eax,eax
c00217da:	75 13                	jne    c00217ef <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00217dc:	83 ec 0c             	sub    esp,0xc
c00217df:	56                   	push   esi
c00217e0:	e8 c4 dd fe ff       	call   c000f5a9 <free>
c00217e5:	83 c4 10             	add    esp,0x10
c00217e8:	31 c0                	xor    eax,eax
c00217ea:	e9 b3 00 00 00       	jmp    c00218a2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00217ef:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00217f3:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00217f7:	c1 e7 08             	shl    edi,0x8
c00217fa:	c1 e2 10             	shl    edx,0x10
c00217fd:	09 d7                	or     edi,edx
c00217ff:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021803:	09 d7                	or     edi,edx
c0021805:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021809:	c1 e2 18             	shl    edx,0x18
c002180c:	09 d7                	or     edi,edx
c002180e:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021812:	89 d1                	mov    ecx,edx
c0021814:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021818:	c1 e1 08             	shl    ecx,0x8
c002181b:	c1 e2 10             	shl    edx,0x10
c002181e:	09 ca                	or     edx,ecx
c0021820:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021824:	09 ca                	or     edx,ecx
c0021826:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002182a:	c1 e1 18             	shl    ecx,0x18
c002182d:	09 ca                	or     edx,ecx
c002182f:	89 e9                	mov    ecx,ebp
c0021831:	84 c9                	test   cl,cl
c0021833:	74 3c                	je     c0021871 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021835:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021839:	83 ec 0c             	sub    esp,0xc
c002183c:	56                   	push   esi
c002183d:	e8 67 dd fe ff       	call   c000f5a9 <free>
c0021842:	83 c4 0c             	add    esp,0xc
c0021845:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002184c:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021851:	50                   	push   eax
c0021852:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021859:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021860:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021864:	52                   	push   edx
c0021865:	57                   	push   edi
c0021866:	53                   	push   ebx
c0021867:	e8 6e fe ff ff       	call   c00216da <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002186c:	83 c4 20             	add    esp,0x20
c002186f:	eb 31                	jmp    c00218a2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021871:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021874:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c002187b:	d0 e8                	shr    al,1
c002187d:	89 3b                	mov    DWORD PTR [ebx],edi
c002187f:	83 e0 01             	and    eax,0x1
c0021882:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021889:	83 ec 0c             	sub    esp,0xc
c002188c:	89 13                	mov    DWORD PTR [ebx],edx
c002188e:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021895:	89 03                	mov    DWORD PTR [ebx],eax
c0021897:	56                   	push   esi
c0021898:	e8 0c dd fe ff       	call   c000f5a9 <free>
c002189d:	83 c4 10             	add    esp,0x10
c00218a0:	b0 01                	mov    al,0x1
c00218a2:	81 c4 1c 01 00 00    	add    esp,0x11c
c00218a8:	5b                   	pop    ebx
c00218a9:	5e                   	pop    esi
c00218aa:	5f                   	pop    edi
c00218ab:	5d                   	pop    ebp
c00218ac:	c3                   	ret    

c00218ad <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00218ad:	55                   	push   ebp
c00218ae:	57                   	push   edi
c00218af:	56                   	push   esi
c00218b0:	53                   	push   ebx
c00218b1:	83 ec 20             	sub    esp,0x20
c00218b4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00218b8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00218bc:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00218c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00218c8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00218d0:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00218d5:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00218db:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00218e1:	57                   	push   edi
c00218e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00218e6:	50                   	push   eax
c00218e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00218eb:	50                   	push   eax
c00218ec:	e8 95 fd ff ff       	call   c0021686 <readRoot(unsigned int*, unsigned int*, char)>
c00218f1:	5a                   	pop    edx
c00218f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00218f6:	e8 71 ee fd ff       	call   c000076c <strlen>
c00218fb:	83 c4 10             	add    esp,0x10
c00218fe:	83 f8 03             	cmp    eax,0x3
c0021901:	77 17                	ja     c002191a <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021903:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021907:	89 03                	mov    DWORD PTR [ebx],eax
c0021909:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002190d:	89 06                	mov    DWORD PTR [esi],eax
c002190f:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021916:	b0 01                	mov    al,0x1
c0021918:	eb 19                	jmp    c0021933 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002191a:	50                   	push   eax
c002191b:	55                   	push   ebp
c002191c:	57                   	push   edi
c002191d:	56                   	push   esi
c002191e:	53                   	push   ebx
c002191f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021923:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021927:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002192b:	e8 aa fd ff ff       	call   c00216da <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021930:	83 c4 20             	add    esp,0x20
c0021933:	83 c4 1c             	add    esp,0x1c
c0021936:	5b                   	pop    ebx
c0021937:	5e                   	pop    esi
c0021938:	5f                   	pop    edi
c0021939:	5d                   	pop    ebp
c002193a:	c3                   	ret    
c002193b:	90                   	nop

c002193c <ISO9660::open(char const*, void**, FileOpenMode)>:
c002193c:	57                   	push   edi
c002193d:	56                   	push   esi
c002193e:	53                   	push   ebx
c002193f:	83 ec 10             	sub    esp,0x10
c0021942:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021946:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002194a:	85 ff                	test   edi,edi
c002194c:	0f 84 8b 00 00 00    	je     c00219dd <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021952:	85 f6                	test   esi,esi
c0021954:	0f 84 83 00 00 00    	je     c00219dd <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c002195a:	b8 03 00 00 00       	mov    eax,0x3
c002195f:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021964:	75 7c                	jne    c00219e2 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021966:	83 ec 0c             	sub    esp,0xc
c0021969:	6a 1c                	push   0x1c
c002196b:	e8 29 dc fe ff       	call   c000f599 <malloc>
c0021970:	89 07                	mov    DWORD PTR [edi],eax
c0021972:	89 c3                	mov    ebx,eax
c0021974:	58                   	pop    eax
c0021975:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021979:	50                   	push   eax
c002197a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002197d:	50                   	push   eax
c002197e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021982:	50                   	push   eax
c0021983:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021987:	50                   	push   eax
c0021988:	56                   	push   esi
c0021989:	e8 1f ff ff ff       	call   c00218ad <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002198e:	83 c4 20             	add    esp,0x20
c0021991:	84 c0                	test   al,al
c0021993:	74 07                	je     c002199c <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0021995:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002199a:	74 0b                	je     c00219a7 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c002199c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00219a0:	b8 01 00 00 00       	mov    eax,0x1
c00219a5:	eb 3b                	jmp    c00219e2 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00219a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219ab:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00219af:	89 03                	mov    DWORD PTR [ebx],eax
c00219b1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00219b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219bc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00219c3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00219ca:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00219cd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00219d4:	8a 06                	mov    al,BYTE PTR [esi]
c00219d6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00219d9:	31 c0                	xor    eax,eax
c00219db:	eb 05                	jmp    c00219e2 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00219dd:	b8 04 00 00 00       	mov    eax,0x4
c00219e2:	83 c4 10             	add    esp,0x10
c00219e5:	5b                   	pop    ebx
c00219e6:	5e                   	pop    esi
c00219e7:	5f                   	pop    edi
c00219e8:	c3                   	ret    
c00219e9:	90                   	nop

c00219ea <ISO9660::exists(char const*)>:
c00219ea:	83 ec 28             	sub    esp,0x28
c00219ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00219f1:	8d 54 24 18          	lea    edx,[esp+0x18]
c00219f5:	52                   	push   edx
c00219f6:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00219f9:	52                   	push   edx
c00219fa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00219fe:	52                   	push   edx
c00219ff:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021a03:	52                   	push   edx
c0021a04:	50                   	push   eax
c0021a05:	e8 a3 fe ff ff       	call   c00218ad <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a0a:	83 c4 3c             	add    esp,0x3c
c0021a0d:	c3                   	ret    

c0021a0e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021a0e:	56                   	push   esi
c0021a0f:	53                   	push   ebx
c0021a10:	83 ec 14             	sub    esp,0x14
c0021a13:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021a17:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021a1b:	85 db                	test   ebx,ebx
c0021a1d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021a21:	0f 94 c2             	sete   dl
c0021a24:	85 f6                	test   esi,esi
c0021a26:	0f 94 c0             	sete   al
c0021a29:	08 c2                	or     dl,al
c0021a2b:	75 68                	jne    c0021a95 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021a2d:	85 c9                	test   ecx,ecx
c0021a2f:	74 64                	je     c0021a95 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021a31:	83 ec 0c             	sub    esp,0xc
c0021a34:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021a37:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a3b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021a41:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a48:	50                   	push   eax
c0021a49:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021a4c:	50                   	push   eax
c0021a4d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a51:	50                   	push   eax
c0021a52:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a56:	50                   	push   eax
c0021a57:	51                   	push   ecx
c0021a58:	e8 50 fe ff ff       	call   c00218ad <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a5d:	83 c4 20             	add    esp,0x20
c0021a60:	ba 01 00 00 00       	mov    edx,0x1
c0021a65:	84 c0                	test   al,al
c0021a67:	74 31                	je     c0021a9a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a6d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a74:	89 03                	mov    DWORD PTR [ebx],eax
c0021a76:	ba 00 00 00 00       	mov    edx,0x0
c0021a7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a7f:	85 c0                	test   eax,eax
c0021a81:	0f 95 06             	setne  BYTE PTR [esi]
c0021a84:	74 14                	je     c0021a9a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a86:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021a8c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a93:	eb 05                	jmp    c0021a9a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a95:	ba 04 00 00 00       	mov    edx,0x4
c0021a9a:	83 c4 14             	add    esp,0x14
c0021a9d:	89 d0                	mov    eax,edx
c0021a9f:	5b                   	pop    ebx
c0021aa0:	5e                   	pop    esi
c0021aa1:	c3                   	ret    

c0021aa2 <ISO9660::openDir(char const*, void**)>:
c0021aa2:	57                   	push   edi
c0021aa3:	56                   	push   esi
c0021aa4:	53                   	push   ebx
c0021aa5:	83 ec 10             	sub    esp,0x10
c0021aa8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021aac:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021ab0:	85 ff                	test   edi,edi
c0021ab2:	74 7b                	je     c0021b2f <ISO9660::openDir(char const*, void**)+0x8d>
c0021ab4:	85 f6                	test   esi,esi
c0021ab6:	74 77                	je     c0021b2f <ISO9660::openDir(char const*, void**)+0x8d>
c0021ab8:	83 ec 0c             	sub    esp,0xc
c0021abb:	6a 1c                	push   0x1c
c0021abd:	e8 d7 da fe ff       	call   c000f599 <malloc>
c0021ac2:	89 07                	mov    DWORD PTR [edi],eax
c0021ac4:	89 c3                	mov    ebx,eax
c0021ac6:	58                   	pop    eax
c0021ac7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021acb:	50                   	push   eax
c0021acc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021acf:	50                   	push   eax
c0021ad0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ad4:	50                   	push   eax
c0021ad5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ad9:	50                   	push   eax
c0021ada:	56                   	push   esi
c0021adb:	e8 cd fd ff ff       	call   c00218ad <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021ae0:	83 c4 20             	add    esp,0x20
c0021ae3:	84 c0                	test   al,al
c0021ae5:	74 07                	je     c0021aee <ISO9660::openDir(char const*, void**)+0x4c>
c0021ae7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021aec:	75 0b                	jne    c0021af9 <ISO9660::openDir(char const*, void**)+0x57>
c0021aee:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021af2:	b8 01 00 00 00       	mov    eax,0x1
c0021af7:	eb 3b                	jmp    c0021b34 <ISO9660::openDir(char const*, void**)+0x92>
c0021af9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021afd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021b01:	89 03                	mov    DWORD PTR [ebx],eax
c0021b03:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021b0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021b15:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b1c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021b1f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021b26:	8a 06                	mov    al,BYTE PTR [esi]
c0021b28:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021b2b:	31 c0                	xor    eax,eax
c0021b2d:	eb 05                	jmp    c0021b34 <ISO9660::openDir(char const*, void**)+0x92>
c0021b2f:	b8 04 00 00 00       	mov    eax,0x4
c0021b34:	83 c4 10             	add    esp,0x10
c0021b37:	5b                   	pop    ebx
c0021b38:	5e                   	pop    esi
c0021b39:	5f                   	pop    edi
c0021b3a:	c3                   	ret    
c0021b3b:	90                   	nop

c0021b3c <ISO9660::ISO9660()>:
c0021b3c:	83 ec 0c             	sub    esp,0xc
c0021b3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b43:	83 ec 0c             	sub    esp,0xc
c0021b46:	50                   	push   eax
c0021b47:	e8 86 0e ff ff       	call   c00129d2 <Filesystem::Filesystem()>
c0021b4c:	83 c4 10             	add    esp,0x10
c0021b4f:	ba 80 be 02 c0       	mov    edx,0xc002be80
c0021b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b58:	89 10                	mov    DWORD PTR [eax],edx
c0021b5a:	90                   	nop
c0021b5b:	83 c4 0c             	add    esp,0xc
c0021b5e:	c3                   	ret    
c0021b5f:	90                   	nop

c0021b60 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021b60:	83 ec 1c             	sub    esp,0x1c
c0021b63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b67:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021b6b:	89 10                	mov    DWORD PTR [eax],edx
c0021b6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b71:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021b75:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021b78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b7c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021b80:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021b83:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021b88:	75 23                	jne    c0021bad <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b8e:	8b 10                	mov    edx,DWORD PTR [eax]
c0021b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b97:	0f af c2             	imul   eax,edx
c0021b9a:	85 c0                	test   eax,eax
c0021b9c:	79 03                	jns    c0021ba1 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021b9e:	83 c0 03             	add    eax,0x3
c0021ba1:	c1 f8 02             	sar    eax,0x2
c0021ba4:	05 a0 0f 00 00       	add    eax,0xfa0
c0021ba9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021bad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bb1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021bb5:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021bb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bbc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021bc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bc7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021bce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bd2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021bd5:	c1 e0 02             	shl    eax,0x2
c0021bd8:	83 ec 0c             	sub    esp,0xc
c0021bdb:	50                   	push   eax
c0021bdc:	e8 b8 d9 fe ff       	call   c000f599 <malloc>
c0021be1:	83 c4 10             	add    esp,0x10
c0021be4:	89 c2                	mov    edx,eax
c0021be6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021bed:	83 ec 04             	sub    esp,0x4
c0021bf0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021bf4:	50                   	push   eax
c0021bf5:	6a 01                	push   0x1
c0021bf7:	6a 04                	push   0x4
c0021bf9:	e8 67 6f fe ff       	call   c0008b65 <src_new>
c0021bfe:	83 c4 10             	add    esp,0x10
c0021c01:	89 c2                	mov    edx,eax
c0021c03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c07:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021c0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c0e:	85 c0                	test   eax,eax
c0021c10:	74 10                	je     c0021c22 <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021c12:	83 ec 0c             	sub    esp,0xc
c0021c15:	68 e0 be 02 c0       	push   0xc002bee0
c0021c1a:	e8 14 82 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c0021c1f:	83 c4 10             	add    esp,0x10
c0021c22:	a0 40 1c 03 c0       	mov    al,ds:0xc0031c40
c0021c27:	83 f0 01             	xor    eax,0x1
c0021c2a:	84 c0                	test   al,al
c0021c2c:	74 57                	je     c0021c85 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021c2e:	a1 fc be 02 c0       	mov    eax,ds:0xc002befc
c0021c33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021c37:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c3f:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021c47:	7f 35                	jg     c0021c7e <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021c49:	83 ec 0c             	sub    esp,0xc
c0021c4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021c50:	e8 da 53 00 00       	call   c002702f <__floatsisf>
c0021c55:	83 c4 10             	add    esp,0x10
c0021c58:	8b 15 fc be 02 c0    	mov    edx,DWORD PTR ds:0xc002befc
c0021c5e:	83 ec 08             	sub    esp,0x8
c0021c61:	52                   	push   edx
c0021c62:	50                   	push   eax
c0021c63:	e8 d9 4f 00 00       	call   c0026c41 <__mulsf3>
c0021c68:	83 c4 10             	add    esp,0x10
c0021c6b:	89 c2                	mov    edx,eax
c0021c6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021c71:	89 14 85 40 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce7c0],edx
c0021c78:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021c7c:	eb c1                	jmp    c0021c3f <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021c7e:	c6 05 40 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031c40,0x1
c0021c85:	90                   	nop
c0021c86:	83 c4 1c             	add    esp,0x1c
c0021c89:	c3                   	ret    

c0021c8a <SoundChannel::~SoundChannel()>:
c0021c8a:	83 ec 0c             	sub    esp,0xc
c0021c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c91:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021c94:	83 ec 0c             	sub    esp,0xc
c0021c97:	50                   	push   eax
c0021c98:	e8 0c d9 fe ff       	call   c000f5a9 <free>
c0021c9d:	83 c4 10             	add    esp,0x10
c0021ca0:	90                   	nop
c0021ca1:	83 c4 0c             	add    esp,0xc
c0021ca4:	c3                   	ret    
c0021ca5:	90                   	nop

c0021ca6 <SoundChannel::getSampleRate()>:
c0021ca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021caa:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cac:	c3                   	ret    
c0021cad:	90                   	nop

c0021cae <SoundChannel::getBits()>:
c0021cae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021cb5:	c3                   	ret    

c0021cb6 <SoundChannel::getBufferUsed()>:
c0021cb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cba:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021cbd:	c3                   	ret    

c0021cbe <SoundChannel::getBufferSize()>:
c0021cbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cc2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021cc5:	c3                   	ret    

c0021cc6 <SoundChannel::unbuffer(float*, int, int)>:
c0021cc6:	56                   	push   esi
c0021cc7:	53                   	push   ebx
c0021cc8:	83 ec 40             	sub    esp,0x40
c0021ccb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021ccf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021cd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021cd6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021cd9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021cdd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021ce1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021ce5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021ce9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021ced:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021cf1:	e8 39 53 00 00       	call   c002702f <__floatsisf>
c0021cf6:	5a                   	pop    edx
c0021cf7:	89 c6                	mov    esi,eax
c0021cf9:	ff 33                	push   DWORD PTR [ebx]
c0021cfb:	e8 2f 53 00 00       	call   c002702f <__floatsisf>
c0021d00:	59                   	pop    ecx
c0021d01:	5a                   	pop    edx
c0021d02:	50                   	push   eax
c0021d03:	56                   	push   esi
c0021d04:	e8 fb 50 00 00       	call   c0026e04 <__divsf3>
c0021d09:	89 04 24             	mov    DWORD PTR [esp],eax
c0021d0c:	e8 ee 65 00 00       	call   c00282ff <__extendsfdf2>
c0021d11:	59                   	pop    ecx
c0021d12:	5e                   	pop    esi
c0021d13:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021d17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021d1b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021d23:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021d27:	50                   	push   eax
c0021d28:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021d2b:	e8 2a 6a fe ff       	call   c000875a <src_process>
c0021d30:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021d34:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021d37:	83 c4 0c             	add    esp,0xc
c0021d3a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021d3d:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021d40:	29 d0                	sub    eax,edx
c0021d42:	c1 e0 02             	shl    eax,0x2
c0021d45:	50                   	push   eax
c0021d46:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021d49:	50                   	push   eax
c0021d4a:	51                   	push   ecx
c0021d4b:	e8 38 e9 fd ff       	call   c0000688 <memmove>
c0021d50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021d54:	83 c4 44             	add    esp,0x44
c0021d57:	5b                   	pop    ebx
c0021d58:	5e                   	pop    esi
c0021d59:	c3                   	ret    

c0021d5a <SoundChannel::buffer16(short*, int)>:
c0021d5a:	55                   	push   ebp
c0021d5b:	57                   	push   edi
c0021d5c:	56                   	push   esi
c0021d5d:	53                   	push   ebx
c0021d5e:	83 ec 1c             	sub    esp,0x1c
c0021d61:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021d65:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021d68:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021d6b:	0f 84 d2 00 00 00    	je     c0021e43 <SoundChannel::buffer16(short*, int)+0xe9>
c0021d71:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021d75:	85 ed                	test   ebp,ebp
c0021d77:	0f 8e c6 00 00 00    	jle    c0021e43 <SoundChannel::buffer16(short*, int)+0xe9>
c0021d7d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021d81:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021d86:	83 ec 0c             	sub    esp,0xc
c0021d89:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021d8c:	50                   	push   eax
c0021d8d:	e8 9d 52 00 00       	call   c002702f <__floatsisf>
c0021d92:	59                   	pop    ecx
c0021d93:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021d96:	5f                   	pop    edi
c0021d97:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021d9a:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021d9d:	55                   	push   ebp
c0021d9e:	50                   	push   eax
c0021d9f:	e8 9d 4e 00 00       	call   c0026c41 <__mulsf3>
c0021da4:	83 c4 10             	add    esp,0x10
c0021da7:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021daa:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021dad:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021db0:	0f 84 99 00 00 00    	je     c0021e4f <SoundChannel::buffer16(short*, int)+0xf5>
c0021db6:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021dbb:	74 78                	je     c0021e35 <SoundChannel::buffer16(short*, int)+0xdb>
c0021dbd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021dc1:	83 ec 0c             	sub    esp,0xc
c0021dc4:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021dc8:	50                   	push   eax
c0021dc9:	e8 61 52 00 00       	call   c002702f <__floatsisf>
c0021dce:	5f                   	pop    edi
c0021dcf:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021dd2:	5a                   	pop    edx
c0021dd3:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021dd6:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021dd9:	55                   	push   ebp
c0021dda:	50                   	push   eax
c0021ddb:	e8 61 4e 00 00       	call   c0026c41 <__mulsf3>
c0021de0:	83 c4 10             	add    esp,0x10
c0021de3:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021de6:	be 02 00 00 00       	mov    esi,0x2
c0021deb:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021dee:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021df1:	74 46                	je     c0021e39 <SoundChannel::buffer16(short*, int)+0xdf>
c0021df3:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021df7:	eb 36                	jmp    c0021e2f <SoundChannel::buffer16(short*, int)+0xd5>
c0021df9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021dfd:	83 ec 0c             	sub    esp,0xc
c0021e00:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021e04:	46                   	inc    esi
c0021e05:	50                   	push   eax
c0021e06:	e8 24 52 00 00       	call   c002702f <__floatsisf>
c0021e0b:	5a                   	pop    edx
c0021e0c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021e0f:	59                   	pop    ecx
c0021e10:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021e13:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e1a:	50                   	push   eax
c0021e1b:	e8 21 4e 00 00       	call   c0026c41 <__mulsf3>
c0021e20:	83 c4 10             	add    esp,0x10
c0021e23:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021e27:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021e2a:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021e2d:	74 0a                	je     c0021e39 <SoundChannel::buffer16(short*, int)+0xdf>
c0021e2f:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021e33:	75 c4                	jne    c0021df9 <SoundChannel::buffer16(short*, int)+0x9f>
c0021e35:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021e39:	83 c4 1c             	add    esp,0x1c
c0021e3c:	89 f0                	mov    eax,esi
c0021e3e:	5b                   	pop    ebx
c0021e3f:	5e                   	pop    esi
c0021e40:	5f                   	pop    edi
c0021e41:	5d                   	pop    ebp
c0021e42:	c3                   	ret    
c0021e43:	83 c4 1c             	add    esp,0x1c
c0021e46:	31 f6                	xor    esi,esi
c0021e48:	5b                   	pop    ebx
c0021e49:	89 f0                	mov    eax,esi
c0021e4b:	5e                   	pop    esi
c0021e4c:	5f                   	pop    edi
c0021e4d:	5d                   	pop    ebp
c0021e4e:	c3                   	ret    
c0021e4f:	be 01 00 00 00       	mov    esi,0x1
c0021e54:	eb e3                	jmp    c0021e39 <SoundChannel::buffer16(short*, int)+0xdf>

c0021e56 <SoundChannel::buffer8(unsigned char*, int)>:
c0021e56:	55                   	push   ebp
c0021e57:	57                   	push   edi
c0021e58:	56                   	push   esi
c0021e59:	53                   	push   ebx
c0021e5a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e5e:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021e62:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021e65:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021e69:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021e6c:	74 7a                	je     c0021ee8 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021e6e:	85 ff                	test   edi,edi
c0021e70:	7e 76                	jle    c0021ee8 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021e72:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021e76:	8d 70 01             	lea    esi,[eax+0x1]
c0021e79:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021e7c:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021e7f:	8b 1c 9d 40 18 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce7c0]
c0021e86:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021e89:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021e8c:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021e8f:	74 5e                	je     c0021eef <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021e91:	83 ff 01             	cmp    edi,0x1
c0021e94:	74 4b                	je     c0021ee1 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021e96:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021e9a:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021e9d:	8d 70 01             	lea    esi,[eax+0x1]
c0021ea0:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021ea3:	8b 1c 9d 40 18 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce7c0]
c0021eaa:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021ead:	b8 02 00 00 00       	mov    eax,0x2
c0021eb2:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021eb5:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021eb8:	75 23                	jne    c0021edd <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021eba:	eb 27                	jmp    c0021ee3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021ebc:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021ec1:	8d 71 01             	lea    esi,[ecx+0x1]
c0021ec4:	40                   	inc    eax
c0021ec5:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021ec8:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021ecb:	8b 1c 9d 40 18 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce7c0]
c0021ed2:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021ed5:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021ed8:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021edb:	74 06                	je     c0021ee3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021edd:	39 c7                	cmp    edi,eax
c0021edf:	75 db                	jne    c0021ebc <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021ee1:	89 f8                	mov    eax,edi
c0021ee3:	5b                   	pop    ebx
c0021ee4:	5e                   	pop    esi
c0021ee5:	5f                   	pop    edi
c0021ee6:	5d                   	pop    ebp
c0021ee7:	c3                   	ret    
c0021ee8:	5b                   	pop    ebx
c0021ee9:	31 c0                	xor    eax,eax
c0021eeb:	5e                   	pop    esi
c0021eec:	5f                   	pop    edi
c0021eed:	5d                   	pop    ebp
c0021eee:	c3                   	ret    
c0021eef:	b8 01 00 00 00       	mov    eax,0x1
c0021ef4:	eb ed                	jmp    c0021ee3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021ef6 <SoundDevice::SoundDevice(char const*)>:
c0021ef6:	83 ec 1c             	sub    esp,0x1c
c0021ef9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021efd:	83 ec 08             	sub    esp,0x8
c0021f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021f04:	50                   	push   eax
c0021f05:	e8 fa 1d ff ff       	call   c0013d04 <Device::Device(char const*)>
c0021f0a:	83 c4 10             	add    esp,0x10
c0021f0d:	ba 08 bf 02 c0       	mov    edx,0xc002bf08
c0021f12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f16:	89 10                	mov    DWORD PTR [eax],edx
c0021f18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f1c:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021f26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f2a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021f34:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f3c:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021f41:	7f 19                	jg     c0021f5c <SoundDevice::SoundDevice(char const*)+0x66>
c0021f43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f4b:	83 c2 54             	add    edx,0x54
c0021f4e:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021f56:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021f5a:	eb e0                	jmp    c0021f3c <SoundDevice::SoundDevice(char const*)+0x46>
c0021f5c:	90                   	nop
c0021f5d:	83 c4 1c             	add    esp,0x1c
c0021f60:	c3                   	ret    
c0021f61:	90                   	nop

c0021f62 <SoundDevice::~SoundDevice()>:
c0021f62:	53                   	push   ebx
c0021f63:	83 ec 18             	sub    esp,0x18
c0021f66:	ba 08 bf 02 c0       	mov    edx,0xc002bf08
c0021f6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f6f:	89 10                	mov    DWORD PTR [eax],edx
c0021f71:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f79:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021f7e:	7f 46                	jg     c0021fc6 <SoundDevice::~SoundDevice()+0x64>
c0021f80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f88:	83 c2 54             	add    edx,0x54
c0021f8b:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021f8f:	85 c0                	test   eax,eax
c0021f91:	74 2d                	je     c0021fc0 <SoundDevice::~SoundDevice()+0x5e>
c0021f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f9b:	83 c2 54             	add    edx,0x54
c0021f9e:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021fa2:	85 db                	test   ebx,ebx
c0021fa4:	74 1a                	je     c0021fc0 <SoundDevice::~SoundDevice()+0x5e>
c0021fa6:	83 ec 0c             	sub    esp,0xc
c0021fa9:	53                   	push   ebx
c0021faa:	e8 db fc ff ff       	call   c0021c8a <SoundChannel::~SoundChannel()>
c0021faf:	83 c4 10             	add    esp,0x10
c0021fb2:	83 ec 08             	sub    esp,0x8
c0021fb5:	6a 2c                	push   0x2c
c0021fb7:	53                   	push   ebx
c0021fb8:	e8 32 06 ff ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0021fbd:	83 c4 10             	add    esp,0x10
c0021fc0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021fc4:	eb b3                	jmp    c0021f79 <SoundDevice::~SoundDevice()+0x17>
c0021fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fca:	83 ec 0c             	sub    esp,0xc
c0021fcd:	50                   	push   eax
c0021fce:	e8 fb 19 ff ff       	call   c00139ce <Device::~Device()>
c0021fd3:	83 c4 10             	add    esp,0x10
c0021fd6:	90                   	nop
c0021fd7:	83 c4 18             	add    esp,0x18
c0021fda:	5b                   	pop    ebx
c0021fdb:	c3                   	ret    

c0021fdc <SoundDevice::~SoundDevice()>:
c0021fdc:	83 ec 0c             	sub    esp,0xc
c0021fdf:	83 ec 0c             	sub    esp,0xc
c0021fe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fe6:	e8 77 ff ff ff       	call   c0021f62 <SoundDevice::~SoundDevice()>
c0021feb:	83 c4 10             	add    esp,0x10
c0021fee:	83 ec 08             	sub    esp,0x8
c0021ff1:	68 e4 01 00 00       	push   0x1e4
c0021ff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ffa:	e8 f0 05 ff ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0021fff:	83 c4 10             	add    esp,0x10
c0022002:	83 c4 0c             	add    esp,0xc
c0022005:	c3                   	ret    

c0022006 <SoundDevice::getFreeChannelNum()>:
c0022006:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002200a:	31 c0                	xor    eax,eax
c002200c:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022014:	74 09                	je     c002201f <SoundDevice::getFreeChannelNum()+0x19>
c0022016:	40                   	inc    eax
c0022017:	83 f8 20             	cmp    eax,0x20
c002201a:	75 f0                	jne    c002200c <SoundDevice::getFreeChannelNum()+0x6>
c002201c:	83 c8 ff             	or     eax,0xffffffff
c002201f:	c3                   	ret    

c0022020 <SoundDevice::addChannel(SoundChannel*)>:
c0022020:	56                   	push   esi
c0022021:	53                   	push   ebx
c0022022:	51                   	push   ecx
c0022023:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022027:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002202b:	53                   	push   ebx
c002202c:	e8 d5 ff ff ff       	call   c0022006 <SoundDevice::getFreeChannelNum()>
c0022031:	5a                   	pop    edx
c0022032:	83 f8 ff             	cmp    eax,0xffffffff
c0022035:	74 51                	je     c0022088 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022037:	85 f6                	test   esi,esi
c0022039:	74 4d                	je     c0022088 <SoundDevice::addChannel(SoundChannel*)+0x68>
c002203b:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022042:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022049:	75 30                	jne    c002207b <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002204b:	83 ec 0c             	sub    esp,0xc
c002204e:	56                   	push   esi
c002204f:	e8 52 fc ff ff       	call   c0021ca6 <SoundChannel::getSampleRate()>
c0022054:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002205a:	89 34 24             	mov    DWORD PTR [esp],esi
c002205d:	e8 4c fc ff ff       	call   c0021cae <SoundChannel::getBits()>
c0022062:	83 c4 0c             	add    esp,0xc
c0022065:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002206b:	8b 13                	mov    edx,DWORD PTR [ebx]
c002206d:	50                   	push   eax
c002206e:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022074:	53                   	push   ebx
c0022075:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0022078:	83 c4 10             	add    esp,0x10
c002207b:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022081:	b8 01 00 00 00       	mov    eax,0x1
c0022086:	eb 03                	jmp    c002208b <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022088:	83 c8 ff             	or     eax,0xffffffff
c002208b:	5a                   	pop    edx
c002208c:	5b                   	pop    ebx
c002208d:	5e                   	pop    esi
c002208e:	c3                   	ret    
c002208f:	90                   	nop

c0022090 <SoundDevice::removeChannel(int)>:
c0022090:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022098:	83 fa 1f             	cmp    edx,0x1f
c002209b:	77 23                	ja     c00220c0 <SoundDevice::removeChannel(int)+0x30>
c002209d:	8d 14 90             	lea    edx,[eax+edx*4]
c00220a0:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00220a7:	74 17                	je     c00220c0 <SoundDevice::removeChannel(int)+0x30>
c00220a9:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00220b3:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00220b9:	75 05                	jne    c00220c0 <SoundDevice::removeChannel(int)+0x30>
c00220bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00220bd:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c00220c0:	c3                   	ret    
c00220c1:	90                   	nop

c00220c2 <SoundDevice::floatTo16(float*, short*, int)>:
c00220c2:	57                   	push   edi
c00220c3:	56                   	push   esi
c00220c4:	53                   	push   ebx
c00220c5:	31 db                	xor    ebx,ebx
c00220c7:	83 ec 10             	sub    esp,0x10
c00220ca:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00220ce:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00220d2:	0f 8d d0 00 00 00    	jge    c00221a8 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c00220d8:	83 ec 0c             	sub    esp,0xc
c00220db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00220df:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00220e2:	e8 18 62 00 00       	call   c00282ff <__extendsfdf2>
c00220e7:	83 c4 10             	add    esp,0x10
c00220ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00220ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00220f2:	68 00 00 f0 3f       	push   0x3ff00000
c00220f7:	6a 00                	push   0x0
c00220f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022101:	e8 85 51 00 00       	call   c002728b <__adddf3>
c0022106:	83 c4 10             	add    esp,0x10
c0022109:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002210d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022111:	68 00 00 e0 3f       	push   0x3fe00000
c0022116:	6a 00                	push   0x0
c0022118:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002211c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022120:	e8 e3 57 00 00       	call   c0027908 <__muldf3>
c0022125:	83 c4 10             	add    esp,0x10
c0022128:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002212c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022130:	68 c0 ff df 40       	push   0x40dfffc0
c0022135:	6a 00                	push   0x0
c0022137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002213b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002213f:	e8 c4 57 00 00       	call   c0027908 <__muldf3>
c0022144:	59                   	pop    ecx
c0022145:	5f                   	pop    edi
c0022146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002214a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002214e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022152:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022156:	e8 80 60 00 00       	call   c00281db <__truncdfsf2>
c002215b:	5a                   	pop    edx
c002215c:	89 c7                	mov    edi,eax
c002215e:	59                   	pop    ecx
c002215f:	68 00 fe ff 46       	push   0x46fffe00
c0022164:	50                   	push   eax
c0022165:	e8 1b 51 00 00       	call   c0027285 <__gesf2>
c002216a:	83 c4 10             	add    esp,0x10
c002216d:	85 c0                	test   eax,eax
c002216f:	78 08                	js     c0022179 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0022171:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0022177:	eb 29                	jmp    c00221a2 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022179:	50                   	push   eax
c002217a:	50                   	push   eax
c002217b:	6a 00                	push   0x0
c002217d:	57                   	push   edi
c002217e:	e8 06 51 00 00       	call   c0027289 <__lesf2>
c0022183:	83 c4 10             	add    esp,0x10
c0022186:	85 c0                	test   eax,eax
c0022188:	7f 08                	jg     c0022192 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c002218a:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0022190:	eb 10                	jmp    c00221a2 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022192:	83 ec 0c             	sub    esp,0xc
c0022195:	57                   	push   edi
c0022196:	e8 01 62 00 00       	call   c002839c <lrintf>
c002219b:	83 c4 10             	add    esp,0x10
c002219e:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00221a2:	43                   	inc    ebx
c00221a3:	e9 26 ff ff ff       	jmp    c00220ce <SoundDevice::floatTo16(float*, short*, int)+0xc>
c00221a8:	83 c4 10             	add    esp,0x10
c00221ab:	5b                   	pop    ebx
c00221ac:	5e                   	pop    esi
c00221ad:	5f                   	pop    edi
c00221ae:	c3                   	ret    
c00221af:	90                   	nop

c00221b0 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00221b0:	57                   	push   edi
c00221b1:	56                   	push   esi
c00221b2:	53                   	push   ebx
c00221b3:	31 db                	xor    ebx,ebx
c00221b5:	83 ec 10             	sub    esp,0x10
c00221b8:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00221bc:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00221c0:	0f 8d cb 00 00 00    	jge    c0022291 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00221c6:	83 ec 0c             	sub    esp,0xc
c00221c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00221cd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00221d0:	e8 2a 61 00 00       	call   c00282ff <__extendsfdf2>
c00221d5:	83 c4 10             	add    esp,0x10
c00221d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221e0:	68 00 00 f0 3f       	push   0x3ff00000
c00221e5:	6a 00                	push   0x0
c00221e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221ef:	e8 97 50 00 00       	call   c002728b <__adddf3>
c00221f4:	83 c4 10             	add    esp,0x10
c00221f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221ff:	68 00 00 e0 3f       	push   0x3fe00000
c0022204:	6a 00                	push   0x0
c0022206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002220a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002220e:	e8 f5 56 00 00       	call   c0027908 <__muldf3>
c0022213:	83 c4 10             	add    esp,0x10
c0022216:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002221a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002221e:	68 00 00 60 40       	push   0x40600000
c0022223:	6a 00                	push   0x0
c0022225:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022229:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002222d:	e8 d6 56 00 00       	call   c0027908 <__muldf3>
c0022232:	59                   	pop    ecx
c0022233:	5f                   	pop    edi
c0022234:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022238:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002223c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022244:	e8 92 5f 00 00       	call   c00281db <__truncdfsf2>
c0022249:	5a                   	pop    edx
c002224a:	89 c7                	mov    edi,eax
c002224c:	59                   	pop    ecx
c002224d:	68 00 00 fe 42       	push   0x42fe0000
c0022252:	50                   	push   eax
c0022253:	e8 2d 50 00 00       	call   c0027285 <__gesf2>
c0022258:	83 c4 10             	add    esp,0x10
c002225b:	85 c0                	test   eax,eax
c002225d:	78 06                	js     c0022265 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002225f:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022263:	eb 26                	jmp    c002228b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022265:	50                   	push   eax
c0022266:	50                   	push   eax
c0022267:	6a 00                	push   0x0
c0022269:	57                   	push   edi
c002226a:	e8 1a 50 00 00       	call   c0027289 <__lesf2>
c002226f:	83 c4 10             	add    esp,0x10
c0022272:	85 c0                	test   eax,eax
c0022274:	7f 06                	jg     c002227c <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022276:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002227a:	eb 0f                	jmp    c002228b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002227c:	83 ec 0c             	sub    esp,0xc
c002227f:	57                   	push   edi
c0022280:	e8 17 61 00 00       	call   c002839c <lrintf>
c0022285:	83 c4 10             	add    esp,0x10
c0022288:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002228b:	43                   	inc    ebx
c002228c:	e9 2b ff ff ff       	jmp    c00221bc <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022291:	83 c4 10             	add    esp,0x10
c0022294:	5b                   	pop    ebx
c0022295:	5e                   	pop    esi
c0022296:	5f                   	pop    edi
c0022297:	c3                   	ret    

c0022298 <SoundDevice::getAudio(int, float*, float*)>:
c0022298:	55                   	push   ebp
c0022299:	31 ed                	xor    ebp,ebp
c002229b:	57                   	push   edi
c002229c:	56                   	push   esi
c002229d:	31 f6                	xor    esi,esi
c002229f:	53                   	push   ebx
c00222a0:	83 ec 20             	sub    esp,0x20
c00222a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00222a7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00222ab:	c1 e0 02             	shl    eax,0x2
c00222ae:	50                   	push   eax
c00222af:	6a 00                	push   0x0
c00222b1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00222b5:	e8 96 e4 fd ff       	call   c0000750 <memset>
c00222ba:	83 c4 10             	add    esp,0x10
c00222bd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00222c5:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c00222cc:	85 c9                	test   ecx,ecx
c00222ce:	74 52                	je     c0022322 <SoundDevice::getAudio(int, float*, float*)+0x8a>
c00222d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00222d4:	99                   	cdq    
c00222d5:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c00222db:	50                   	push   eax
c00222dc:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00222e2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00222e6:	51                   	push   ecx
c00222e7:	e8 da f9 ff ff       	call   c0021cc6 <SoundChannel::unbuffer(float*, int, int)>
c00222ec:	31 d2                	xor    edx,edx
c00222ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00222f2:	83 c4 10             	add    esp,0x10
c00222f5:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00222f9:	7d 1e                	jge    c0022319 <SoundDevice::getAudio(int, float*, float*)+0x81>
c00222fb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00222ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022303:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0022306:	89 cf                	mov    edi,ecx
c0022308:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c002230e:	0f af ca             	imul   ecx,edx
c0022311:	42                   	inc    edx
c0022312:	01 e9                	add    ecx,ebp
c0022314:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c0022317:	eb dc                	jmp    c00222f5 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c0022319:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c002231d:	45                   	inc    ebp
c002231e:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c0022322:	46                   	inc    esi
c0022323:	83 fe 20             	cmp    esi,0x20
c0022326:	75 9d                	jne    c00222c5 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c0022328:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002232c:	83 c4 1c             	add    esp,0x1c
c002232f:	5b                   	pop    ebx
c0022330:	5e                   	pop    esi
c0022331:	5f                   	pop    edi
c0022332:	5d                   	pop    ebp
c0022333:	c3                   	ret    

c0022334 <PCI::open(int, int, void*)>:
c0022334:	83 ec 18             	sub    esp,0x18
c0022337:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002233b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002233f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022345:	8b 10                	mov    edx,DWORD PTR [eax]
c0022347:	50                   	push   eax
c0022348:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002234b:	31 c0                	xor    eax,eax
c002234d:	83 c4 1c             	add    esp,0x1c
c0022350:	c3                   	ret    
c0022351:	90                   	nop

c0022352 <PCI::close(int, int, void*)>:
c0022352:	31 c0                	xor    eax,eax
c0022354:	c3                   	ret    
c0022355:	90                   	nop

c0022356 <PCI::PCI()>:
c0022356:	83 ec 0c             	sub    esp,0xc
c0022359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002235d:	83 ec 08             	sub    esp,0x8
c0022360:	68 38 bf 02 c0       	push   0xc002bf38
c0022365:	50                   	push   eax
c0022366:	e8 fd 0f ff ff       	call   c0013368 <Bus::Bus(char const*)>
c002236b:	83 c4 10             	add    esp,0x10
c002236e:	ba 24 c0 02 c0       	mov    edx,0xc002c024
c0022373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022377:	89 10                	mov    DWORD PTR [eax],edx
c0022379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002237d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002238b:	a3 44 1c 03 c0       	mov    ds:0xc0031c44,eax
c0022390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022394:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002239a:	0f b6 d0             	movzx  edx,al
c002239d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223a1:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00223a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223ac:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223b2:	0f b6 d0             	movzx  edx,al
c00223b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223b9:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00223be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223c2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223c8:	8d 50 01             	lea    edx,[eax+0x1]
c00223cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00223cf:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00223d5:	0f b6 d0             	movzx  edx,al
c00223d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223dc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00223e0:	83 c9 c0             	or     ecx,0xffffffc0
c00223e3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00223e7:	90                   	nop
c00223e8:	83 c4 0c             	add    esp,0xc
c00223eb:	c3                   	ret    

c00223ec <PCI::readBAR8(unsigned int, int)>:
c00223ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00223f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223f4:	f6 c2 01             	test   dl,0x1
c00223f7:	74 07                	je     c0022400 <PCI::readBAR8(unsigned int, int)+0x14>
c00223f9:	83 e2 fc             	and    edx,0xfffffffc
c00223fc:	01 c2                	add    edx,eax
c00223fe:	ec                   	in     al,dx
c00223ff:	c3                   	ret    
c0022400:	83 e2 f0             	and    edx,0xfffffff0
c0022403:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022406:	c3                   	ret    
c0022407:	90                   	nop

c0022408 <PCI::readBAR16(unsigned int, int)>:
c0022408:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002240c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022410:	f6 c2 01             	test   dl,0x1
c0022413:	74 08                	je     c002241d <PCI::readBAR16(unsigned int, int)+0x15>
c0022415:	83 e2 fc             	and    edx,0xfffffffc
c0022418:	01 c2                	add    edx,eax
c002241a:	66 ed                	in     ax,dx
c002241c:	c3                   	ret    
c002241d:	83 e2 f0             	and    edx,0xfffffff0
c0022420:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022424:	c3                   	ret    
c0022425:	90                   	nop

c0022426 <PCI::readBAR32(unsigned int, int)>:
c0022426:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002242a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002242e:	f6 c2 01             	test   dl,0x1
c0022431:	74 07                	je     c002243a <PCI::readBAR32(unsigned int, int)+0x14>
c0022433:	83 e2 fc             	and    edx,0xfffffffc
c0022436:	01 c2                	add    edx,eax
c0022438:	ed                   	in     eax,dx
c0022439:	c3                   	ret    
c002243a:	83 e2 f0             	and    edx,0xfffffff0
c002243d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022440:	c3                   	ret    
c0022441:	90                   	nop

c0022442 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022442:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022446:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002244a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002244e:	f6 c2 01             	test   dl,0x1
c0022451:	74 07                	je     c002245a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022453:	83 e2 fc             	and    edx,0xfffffffc
c0022456:	01 ca                	add    edx,ecx
c0022458:	ee                   	out    dx,al
c0022459:	c3                   	ret    
c002245a:	83 e2 f0             	and    edx,0xfffffff0
c002245d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022460:	c3                   	ret    
c0022461:	90                   	nop

c0022462 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022462:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022466:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002246a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002246e:	f6 c2 01             	test   dl,0x1
c0022471:	74 08                	je     c002247b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0022473:	83 e2 fc             	and    edx,0xfffffffc
c0022476:	01 ca                	add    edx,ecx
c0022478:	66 ef                	out    dx,ax
c002247a:	c3                   	ret    
c002247b:	83 e2 f0             	and    edx,0xfffffff0
c002247e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0022482:	c3                   	ret    
c0022483:	90                   	nop

c0022484 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022484:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022488:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002248c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022490:	f6 c2 01             	test   dl,0x1
c0022493:	74 07                	je     c002249c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022495:	83 e2 fc             	and    edx,0xfffffffc
c0022498:	01 ca                	add    edx,ecx
c002249a:	ef                   	out    dx,eax
c002249b:	c3                   	ret    
c002249c:	83 e2 f0             	and    edx,0xfffffff0
c002249f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00224a2:	c3                   	ret    
c00224a3:	90                   	nop

c00224a4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00224a4:	55                   	push   ebp
c00224a5:	57                   	push   edi
c00224a6:	56                   	push   esi
c00224a7:	53                   	push   ebx
c00224a8:	83 ec 0c             	sub    esp,0xc
c00224ab:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00224af:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00224b3:	89 f0                	mov    eax,esi
c00224b5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00224b9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00224bd:	3c 07                	cmp    al,0x7
c00224bf:	76 10                	jbe    c00224d1 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00224c1:	83 ec 0c             	sub    esp,0xc
c00224c4:	68 40 bf 02 c0       	push   0xc002bf40
c00224c9:	e8 65 79 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c00224ce:	83 c4 10             	add    esp,0x10
c00224d1:	80 fb 0f             	cmp    bl,0xf
c00224d4:	76 10                	jbe    c00224e6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00224d6:	83 ec 0c             	sub    esp,0xc
c00224d9:	68 70 bf 02 c0       	push   0xc002bf70
c00224de:	e8 50 79 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c00224e3:	83 c4 10             	add    esp,0x10
c00224e6:	8d 04 36             	lea    eax,[esi+esi*1]
c00224e9:	ba f8 0c 00 00       	mov    edx,0xcf8
c00224ee:	83 c8 f0             	or     eax,0xfffffff0
c00224f1:	ee                   	out    dx,al
c00224f2:	ba fa 0c 00 00       	mov    edx,0xcfa
c00224f7:	89 e8                	mov    eax,ebp
c00224f9:	ee                   	out    dx,al
c00224fa:	83 c4 0c             	add    esp,0xc
c00224fd:	89 d8                	mov    eax,ebx
c00224ff:	66 81 e7 fc 00       	and    di,0xfc
c0022504:	5b                   	pop    ebx
c0022505:	c1 e0 08             	shl    eax,0x8
c0022508:	5e                   	pop    esi
c0022509:	09 f8                	or     eax,edi
c002250b:	5f                   	pop    edi
c002250c:	66 0d 00 c0          	or     ax,0xc000
c0022510:	5d                   	pop    ebp
c0022511:	c3                   	ret    

c0022512 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022512:	57                   	push   edi
c0022513:	56                   	push   esi
c0022514:	53                   	push   ebx
c0022515:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022519:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002251d:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022523:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022527:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002252b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002252f:	83 ff 01             	cmp    edi,0x1
c0022532:	75 3e                	jne    c0022572 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022534:	89 de                	mov    esi,ebx
c0022536:	0f b6 c0             	movzx  eax,al
c0022539:	81 e6 fc 00 00 00    	and    esi,0xfc
c002253f:	c1 e0 10             	shl    eax,0x10
c0022542:	0f b6 c9             	movzx  ecx,cl
c0022545:	09 f0                	or     eax,esi
c0022547:	c1 e1 08             	shl    ecx,0x8
c002254a:	0f b6 d2             	movzx  edx,dl
c002254d:	09 c8                	or     eax,ecx
c002254f:	c1 e2 0b             	shl    edx,0xb
c0022552:	09 d0                	or     eax,edx
c0022554:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022559:	0d 00 00 00 80       	or     eax,0x80000000
c002255e:	ef                   	out    dx,eax
c002255f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022564:	ed                   	in     eax,dx
c0022565:	83 e3 02             	and    ebx,0x2
c0022568:	0f b6 cb             	movzx  ecx,bl
c002256b:	c1 e1 03             	shl    ecx,0x3
c002256e:	d3 e8                	shr    eax,cl
c0022570:	eb 43                	jmp    c00225b5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022572:	83 ff 02             	cmp    edi,0x2
c0022575:	75 2c                	jne    c00225a3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022577:	83 ec 0c             	sub    esp,0xc
c002257a:	0f b6 c9             	movzx  ecx,cl
c002257d:	0f b6 d2             	movzx  edx,dl
c0022580:	0f b6 fb             	movzx  edi,bl
c0022583:	0f b6 c0             	movzx  eax,al
c0022586:	57                   	push   edi
c0022587:	51                   	push   ecx
c0022588:	52                   	push   edx
c0022589:	50                   	push   eax
c002258a:	56                   	push   esi
c002258b:	e8 14 ff ff ff       	call   c00224a4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022590:	89 c2                	mov    edx,eax
c0022592:	ed                   	in     eax,dx
c0022593:	83 e3 02             	and    ebx,0x2
c0022596:	83 c4 20             	add    esp,0x20
c0022599:	0f b6 cb             	movzx  ecx,bl
c002259c:	c1 e1 03             	shl    ecx,0x3
c002259f:	d3 e8                	shr    eax,cl
c00225a1:	eb 12                	jmp    c00225b5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00225a3:	83 ec 0c             	sub    esp,0xc
c00225a6:	68 a0 bf 02 c0       	push   0xc002bfa0
c00225ab:	e8 83 78 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c00225b0:	83 c4 10             	add    esp,0x10
c00225b3:	31 c0                	xor    eax,eax
c00225b5:	5b                   	pop    ebx
c00225b6:	5e                   	pop    esi
c00225b7:	5f                   	pop    edi
c00225b8:	c3                   	ret    
c00225b9:	90                   	nop

c00225ba <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00225ba:	83 ec 18             	sub    esp,0x18
c00225bd:	6a 00                	push   0x0
c00225bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225c4:	50                   	push   eax
c00225c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225ca:	50                   	push   eax
c00225cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225d0:	50                   	push   eax
c00225d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225d5:	e8 38 ff ff ff       	call   c0022512 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225da:	83 c4 2c             	add    esp,0x2c
c00225dd:	c3                   	ret    

c00225de <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00225de:	83 ec 18             	sub    esp,0x18
c00225e1:	6a 0e                	push   0xe
c00225e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225e8:	50                   	push   eax
c00225e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225ee:	50                   	push   eax
c00225ef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225f4:	50                   	push   eax
c00225f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225f9:	e8 14 ff ff ff       	call   c0022512 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225fe:	83 c4 2c             	add    esp,0x2c
c0022601:	0f b6 c0             	movzx  eax,al
c0022604:	c3                   	ret    
c0022605:	90                   	nop

c0022606 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022606:	55                   	push   ebp
c0022607:	57                   	push   edi
c0022608:	56                   	push   esi
c0022609:	53                   	push   ebx
c002260a:	83 ec 18             	sub    esp,0x18
c002260d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022612:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022617:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002261c:	6a 0a                	push   0xa
c002261e:	56                   	push   esi
c002261f:	55                   	push   ebp
c0022620:	57                   	push   edi
c0022621:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022625:	e8 e8 fe ff ff       	call   c0022512 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002262a:	83 c4 14             	add    esp,0x14
c002262d:	89 c3                	mov    ebx,eax
c002262f:	6a 0a                	push   0xa
c0022631:	0f b6 db             	movzx  ebx,bl
c0022634:	56                   	push   esi
c0022635:	55                   	push   ebp
c0022636:	57                   	push   edi
c0022637:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002263b:	e8 d2 fe ff ff       	call   c0022512 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022640:	83 c4 2c             	add    esp,0x2c
c0022643:	25 00 ff 00 00       	and    eax,0xff00
c0022648:	09 d8                	or     eax,ebx
c002264a:	5b                   	pop    ebx
c002264b:	5e                   	pop    esi
c002264c:	5f                   	pop    edi
c002264d:	5d                   	pop    ebp
c002264e:	c3                   	ret    
c002264f:	90                   	nop

c0022650 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022650:	83 ec 18             	sub    esp,0x18
c0022653:	6a 08                	push   0x8
c0022655:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002265a:	50                   	push   eax
c002265b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022660:	50                   	push   eax
c0022661:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022666:	50                   	push   eax
c0022667:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002266b:	e8 a2 fe ff ff       	call   c0022512 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022670:	83 c4 2c             	add    esp,0x2c
c0022673:	0f b6 c4             	movzx  eax,ah
c0022676:	c3                   	ret    
c0022677:	90                   	nop

c0022678 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022678:	83 ec 18             	sub    esp,0x18
c002267b:	6a 08                	push   0x8
c002267d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022682:	50                   	push   eax
c0022683:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022688:	50                   	push   eax
c0022689:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002268e:	50                   	push   eax
c002268f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022693:	e8 7a fe ff ff       	call   c0022512 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022698:	83 c4 2c             	add    esp,0x2c
c002269b:	c3                   	ret    

c002269c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002269c:	83 ec 18             	sub    esp,0x18
c002269f:	6a 3c                	push   0x3c
c00226a1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226a6:	50                   	push   eax
c00226a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226ac:	50                   	push   eax
c00226ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226b2:	50                   	push   eax
c00226b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226b7:	e8 56 fe ff ff       	call   c0022512 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226bc:	83 c4 2c             	add    esp,0x2c
c00226bf:	c3                   	ret    

c00226c0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00226c0:	83 ec 18             	sub    esp,0x18
c00226c3:	6a 18                	push   0x18
c00226c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226ca:	50                   	push   eax
c00226cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226d0:	50                   	push   eax
c00226d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226d6:	50                   	push   eax
c00226d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226db:	e8 32 fe ff ff       	call   c0022512 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226e0:	83 c4 2c             	add    esp,0x2c
c00226e3:	0f b6 c4             	movzx  eax,ah
c00226e6:	c3                   	ret    
c00226e7:	90                   	nop

c00226e8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00226e8:	55                   	push   ebp
c00226e9:	57                   	push   edi
c00226ea:	56                   	push   esi
c00226eb:	53                   	push   ebx
c00226ec:	83 ec 28             	sub    esp,0x28
c00226ef:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00226f3:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00226f8:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00226fd:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022702:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022709:	8d 43 12             	lea    eax,[ebx+0x12]
c002270c:	83 c3 10             	add    ebx,0x10
c002270f:	0f b6 c0             	movzx  eax,al
c0022712:	0f b6 db             	movzx  ebx,bl
c0022715:	50                   	push   eax
c0022716:	51                   	push   ecx
c0022717:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002271b:	57                   	push   edi
c002271c:	55                   	push   ebp
c002271d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022721:	e8 ec fd ff ff       	call   c0022512 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022726:	83 c4 14             	add    esp,0x14
c0022729:	89 c6                	mov    esi,eax
c002272b:	53                   	push   ebx
c002272c:	c1 e6 10             	shl    esi,0x10
c002272f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022733:	51                   	push   ecx
c0022734:	57                   	push   edi
c0022735:	55                   	push   ebp
c0022736:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002273a:	e8 d3 fd ff ff       	call   c0022512 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002273f:	83 c4 3c             	add    esp,0x3c
c0022742:	0f b7 c0             	movzx  eax,ax
c0022745:	5b                   	pop    ebx
c0022746:	09 f0                	or     eax,esi
c0022748:	5e                   	pop    esi
c0022749:	5f                   	pop    edi
c002274a:	5d                   	pop    ebp
c002274b:	c3                   	ret    

c002274c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002274c:	55                   	push   ebp
c002274d:	57                   	push   edi
c002274e:	56                   	push   esi
c002274f:	53                   	push   ebx
c0022750:	83 ec 0c             	sub    esp,0xc
c0022753:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022757:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002275b:	89 f5                	mov    ebp,esi
c002275d:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022763:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022767:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002276b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002276f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022773:	83 f9 01             	cmp    ecx,0x1
c0022776:	75 5d                	jne    c00227d5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0022778:	0f b6 c8             	movzx  ecx,al
c002277b:	0f b6 d2             	movzx  edx,dl
c002277e:	c1 e1 10             	shl    ecx,0x10
c0022781:	c1 e2 0b             	shl    edx,0xb
c0022784:	89 f0                	mov    eax,esi
c0022786:	25 fc 00 00 00       	and    eax,0xfc
c002278b:	09 c1                	or     ecx,eax
c002278d:	89 e8                	mov    eax,ebp
c002278f:	0f b6 c0             	movzx  eax,al
c0022792:	c1 e0 08             	shl    eax,0x8
c0022795:	09 c1                	or     ecx,eax
c0022797:	09 d1                	or     ecx,edx
c0022799:	ba f8 0c 00 00       	mov    edx,0xcf8
c002279e:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00227a4:	89 c8                	mov    eax,ecx
c00227a6:	ef                   	out    dx,eax
c00227a7:	ba fc 0c 00 00       	mov    edx,0xcfc
c00227ac:	ed                   	in     eax,dx
c00227ad:	0f b7 db             	movzx  ebx,bx
c00227b0:	83 e6 02             	and    esi,0x2
c00227b3:	74 0a                	je     c00227bf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00227b5:	0f b7 d0             	movzx  edx,ax
c00227b8:	c1 e3 10             	shl    ebx,0x10
c00227bb:	09 d3                	or     ebx,edx
c00227bd:	eb 05                	jmp    c00227c4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00227bf:	66 31 c0             	xor    ax,ax
c00227c2:	09 c3                	or     ebx,eax
c00227c4:	ba f8 0c 00 00       	mov    edx,0xcf8
c00227c9:	89 c8                	mov    eax,ecx
c00227cb:	ef                   	out    dx,eax
c00227cc:	ba fc 0c 00 00       	mov    edx,0xcfc
c00227d1:	89 d8                	mov    eax,ebx
c00227d3:	eb 41                	jmp    c0022816 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00227d5:	83 f9 02             	cmp    ecx,0x2
c00227d8:	75 45                	jne    c002281f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00227da:	83 ec 0c             	sub    esp,0xc
c00227dd:	0f b6 d2             	movzx  edx,dl
c00227e0:	89 f1                	mov    ecx,esi
c00227e2:	0f b6 c0             	movzx  eax,al
c00227e5:	0f b6 f1             	movzx  esi,cl
c00227e8:	89 e9                	mov    ecx,ebp
c00227ea:	56                   	push   esi
c00227eb:	0f b6 c9             	movzx  ecx,cl
c00227ee:	51                   	push   ecx
c00227ef:	52                   	push   edx
c00227f0:	50                   	push   eax
c00227f1:	57                   	push   edi
c00227f2:	e8 ad fc ff ff       	call   c00224a4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00227f7:	89 c2                	mov    edx,eax
c00227f9:	ed                   	in     eax,dx
c00227fa:	83 c4 20             	add    esp,0x20
c00227fd:	0f b7 db             	movzx  ebx,bx
c0022800:	f6 c2 02             	test   dl,0x2
c0022803:	74 0c                	je     c0022811 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022805:	0f b7 c8             	movzx  ecx,ax
c0022808:	89 d8                	mov    eax,ebx
c002280a:	c1 e0 10             	shl    eax,0x10
c002280d:	09 c8                	or     eax,ecx
c002280f:	eb 05                	jmp    c0022816 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022811:	66 31 c0             	xor    ax,ax
c0022814:	09 d8                	or     eax,ebx
c0022816:	ef                   	out    dx,eax
c0022817:	83 c4 0c             	add    esp,0xc
c002281a:	5b                   	pop    ebx
c002281b:	5e                   	pop    esi
c002281c:	5f                   	pop    edi
c002281d:	5d                   	pop    ebp
c002281e:	c3                   	ret    
c002281f:	c7 44 24 20 a0 bf 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bfa0
c0022827:	83 c4 0c             	add    esp,0xc
c002282a:	5b                   	pop    ebx
c002282b:	5e                   	pop    esi
c002282c:	5f                   	pop    edi
c002282d:	5d                   	pop    ebp
c002282e:	e9 00 76 ff ff       	jmp    c0019e33 <Krnl::panic(char const*)>
c0022833:	90                   	nop

c0022834 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022834:	55                   	push   ebp
c0022835:	57                   	push   edi
c0022836:	56                   	push   esi
c0022837:	53                   	push   ebx
c0022838:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002283e:	80 3d 50 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031c50,0x0
c0022845:	0f 85 84 00 00 00    	jne    c00228cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c002284b:	83 ec 0c             	sub    esp,0xc
c002284e:	68 14 01 00 00       	push   0x114
c0022853:	e8 41 cd fe ff       	call   c000f599 <malloc>
c0022858:	83 c4 0c             	add    esp,0xc
c002285b:	89 c3                	mov    ebx,eax
c002285d:	ff 35 50 0e 03 c0    	push   DWORD PTR ds:0xc0030e50
c0022863:	68 a6 bf 02 c0       	push   0xc002bfa6
c0022868:	50                   	push   eax
c0022869:	e8 b8 03 ff ff       	call   c0012c26 <File::File(char const*, Process*)>
c002286e:	5a                   	pop    edx
c002286f:	59                   	pop    ecx
c0022870:	6a 01                	push   0x1
c0022872:	53                   	push   ebx
c0022873:	e8 12 04 ff ff       	call   c0012c8a <File::open(FileOpenMode)>
c0022878:	83 c4 0c             	add    esp,0xc
c002287b:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c002287f:	50                   	push   eax
c0022880:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022884:	50                   	push   eax
c0022885:	53                   	push   ebx
c0022886:	e8 ab 06 ff ff       	call   c0012f36 <File::stat(unsigned long long*, bool*)>
c002288b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002288f:	40                   	inc    eax
c0022890:	89 04 24             	mov    DWORD PTR [esp],eax
c0022893:	e8 01 cd fe ff       	call   c000f599 <malloc>
c0022898:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002289c:	a3 4c 1c 03 c0       	mov    ds:0xc0031c4c,eax
c00228a1:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00228a5:	5e                   	pop    esi
c00228a6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00228a8:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00228ac:	51                   	push   ecx
c00228ad:	50                   	push   eax
c00228ae:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00228b2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00228b6:	53                   	push   ebx
c00228b7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00228ba:	83 c4 14             	add    esp,0x14
c00228bd:	53                   	push   ebx
c00228be:	e8 25 04 ff ff       	call   c0012ce8 <File::close()>
c00228c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00228c7:	83 c4 10             	add    esp,0x10
c00228ca:	a3 48 1c 03 c0       	mov    ds:0xc0031c48,eax
c00228cf:	a1 48 1c 03 c0       	mov    eax,ds:0xc0031c48
c00228d4:	8b 15 4c 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c4c
c00228da:	89 04 24             	mov    DWORD PTR [esp],eax
c00228dd:	31 ff                	xor    edi,edi
c00228df:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00228e7:	31 f6                	xor    esi,esi
c00228e9:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00228ee:	31 db                	xor    ebx,ebx
c00228f0:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00228f8:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00228fd:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022904:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0022908:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c002290f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0022913:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022916:	0f 8e 6b 01 00 00    	jle    c0022a87 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c002291c:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c002291f:	d4 40                	aam    0x40
c0022921:	d5 39                	aad    0x39
c0022923:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022927:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c002292b:	d4 40                	aam    0x40
c002292d:	d5 39                	aad    0x39
c002292f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022933:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022937:	d4 40                	aam    0x40
c0022939:	d5 39                	aad    0x39
c002293b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c002293f:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022943:	d4 40                	aam    0x40
c0022945:	d5 39                	aad    0x39
c0022947:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002294b:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c002294f:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022953:	3c 56                	cmp    al,0x56
c0022955:	74 45                	je     c002299c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022957:	d4 40                	aam    0x40
c0022959:	d5 39                	aad    0x39
c002295b:	8d 48 d0             	lea    ecx,[eax-0x30]
c002295e:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022962:	0f b6 c9             	movzx  ecx,cl
c0022965:	c1 e1 04             	shl    ecx,0x4
c0022968:	d4 40                	aam    0x40
c002296a:	d5 39                	aad    0x39
c002296c:	8d 58 d0             	lea    ebx,[eax-0x30]
c002296f:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022973:	0f b6 db             	movzx  ebx,bl
c0022976:	09 cb                	or     ebx,ecx
c0022978:	c1 e3 04             	shl    ebx,0x4
c002297b:	d4 40                	aam    0x40
c002297d:	d5 39                	aad    0x39
c002297f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022982:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0022986:	0f b6 c9             	movzx  ecx,cl
c0022989:	09 cb                	or     ebx,ecx
c002298b:	c1 e3 04             	shl    ebx,0x4
c002298e:	89 d9                	mov    ecx,ebx
c0022990:	d4 40                	aam    0x40
c0022992:	d5 39                	aad    0x39
c0022994:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022997:	0f b6 db             	movzx  ebx,bl
c002299a:	09 cb                	or     ebx,ecx
c002299c:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c00229a0:	80 f9 44             	cmp    cl,0x44
c00229a3:	74 47                	je     c00229ec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c00229a5:	88 c8                	mov    al,cl
c00229a7:	d4 40                	aam    0x40
c00229a9:	d5 39                	aad    0x39
c00229ab:	83 e8 30             	sub    eax,0x30
c00229ae:	0f b6 e8             	movzx  ebp,al
c00229b1:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c00229b5:	c1 e5 04             	shl    ebp,0x4
c00229b8:	d4 40                	aam    0x40
c00229ba:	d5 39                	aad    0x39
c00229bc:	83 e8 30             	sub    eax,0x30
c00229bf:	0f b6 f0             	movzx  esi,al
c00229c2:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00229c6:	09 ee                	or     esi,ebp
c00229c8:	c1 e6 04             	shl    esi,0x4
c00229cb:	d4 40                	aam    0x40
c00229cd:	d5 39                	aad    0x39
c00229cf:	83 e8 30             	sub    eax,0x30
c00229d2:	0f b6 e8             	movzx  ebp,al
c00229d5:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c00229d9:	09 ee                	or     esi,ebp
c00229db:	c1 e6 04             	shl    esi,0x4
c00229de:	89 f5                	mov    ebp,esi
c00229e0:	d4 40                	aam    0x40
c00229e2:	d5 39                	aad    0x39
c00229e4:	83 e8 30             	sub    eax,0x30
c00229e7:	0f b6 f0             	movzx  esi,al
c00229ea:	09 ee                	or     esi,ebp
c00229ec:	83 c7 10             	add    edi,0x10
c00229ef:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c00229f3:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00229f6:	3c 0a                	cmp    al,0xa
c00229f8:	74 09                	je     c0022a03 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c00229fa:	45                   	inc    ebp
c00229fb:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00229fe:	75 16                	jne    c0022a16 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022a00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022a03:	3c 0a                	cmp    al,0xa
c0022a05:	0f 94 c0             	sete   al
c0022a08:	0f b6 c0             	movzx  eax,al
c0022a0b:	01 c7                	add    edi,eax
c0022a0d:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0022a12:	75 0c                	jne    c0022a20 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022a14:	eb 15                	jmp    c0022a2b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022a16:	47                   	inc    edi
c0022a17:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0022a1a:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022a1e:	eb d3                	jmp    c00229f3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022a20:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022a25:	0f 85 e8 fe ff ff    	jne    c0022913 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a2b:	80 f9 44             	cmp    cl,0x44
c0022a2e:	74 0b                	je     c0022a3b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022a30:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022a35:	0f 85 d8 fe ff ff    	jne    c0022913 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a3b:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022a3f:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022a43:	c1 e1 04             	shl    ecx,0x4
c0022a46:	83 e8 30             	sub    eax,0x30
c0022a49:	09 c8                	or     eax,ecx
c0022a4b:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022a4f:	0f 85 be fe ff ff    	jne    c0022913 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a55:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022a59:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022a5d:	c1 e1 04             	shl    ecx,0x4
c0022a60:	83 e8 30             	sub    eax,0x30
c0022a63:	09 c8                	or     eax,ecx
c0022a65:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022a69:	0f 85 a4 fe ff ff    	jne    c0022913 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a6f:	50                   	push   eax
c0022a70:	50                   	push   eax
c0022a71:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022a75:	50                   	push   eax
c0022a76:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0022a7d:	e8 8a dd fd ff       	call   c000080c <strcpy>
c0022a82:	83 c4 10             	add    esp,0x10
c0022a85:	eb 15                	jmp    c0022a9c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022a87:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022a8e:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022a99:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022a9c:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022aa3:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022aa9:	5b                   	pop    ebx
c0022aaa:	5e                   	pop    esi
c0022aab:	5f                   	pop    edi
c0022aac:	5d                   	pop    ebp
c0022aad:	c3                   	ret    

c0022aae <PCI::checkBus(unsigned char)>:
c0022aae:	56                   	push   esi
c0022aaf:	53                   	push   ebx
c0022ab0:	31 db                	xor    ebx,ebx
c0022ab2:	51                   	push   ecx
c0022ab3:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022ab8:	52                   	push   edx
c0022ab9:	53                   	push   ebx
c0022aba:	43                   	inc    ebx
c0022abb:	56                   	push   esi
c0022abc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ac0:	e8 37 03 00 00       	call   c0022dfc <PCI::checkDevice(unsigned char, unsigned char)>
c0022ac5:	83 c4 10             	add    esp,0x10
c0022ac8:	83 fb 20             	cmp    ebx,0x20
c0022acb:	75 eb                	jne    c0022ab8 <PCI::checkBus(unsigned char)+0xa>
c0022acd:	58                   	pop    eax
c0022ace:	5b                   	pop    ebx
c0022acf:	5e                   	pop    esi
c0022ad0:	c3                   	ret    
c0022ad1:	90                   	nop

c0022ad2 <PCI::foundDevice(PCIDeviceInfo)>:
c0022ad2:	55                   	push   ebp
c0022ad3:	57                   	push   edi
c0022ad4:	56                   	push   esi
c0022ad5:	53                   	push   ebx
c0022ad6:	83 ec 1c             	sub    esp,0x1c
c0022ad9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022add:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022ae3:	0f 84 52 01 00 00    	je     c0022c3b <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022ae9:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022aed:	66 81 f9 06 04       	cmp    cx,0x406
c0022af2:	75 2c                	jne    c0022b20 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022af4:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022af9:	50                   	push   eax
c0022afa:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022aff:	50                   	push   eax
c0022b00:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022b05:	50                   	push   eax
c0022b06:	56                   	push   esi
c0022b07:	e8 b4 fb ff ff       	call   c00226c0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022b0c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022b10:	0f b6 c0             	movzx  eax,al
c0022b13:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022b17:	83 c4 2c             	add    esp,0x2c
c0022b1a:	5b                   	pop    ebx
c0022b1b:	5e                   	pop    esi
c0022b1c:	5f                   	pop    edi
c0022b1d:	5d                   	pop    ebp
c0022b1e:	eb 8e                	jmp    c0022aae <PCI::checkBus(unsigned char)>
c0022b20:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022b24:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022b2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b2e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022b32:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022b36:	88 d3                	mov    bl,dl
c0022b38:	85 c0                	test   eax,eax
c0022b3a:	74 33                	je     c0022b6f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022b3c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022b3f:	85 d2                	test   edx,edx
c0022b41:	74 28                	je     c0022b6b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b43:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022b49:	31 ef                	xor    edi,ebp
c0022b4b:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022b51:	75 18                	jne    c0022b6b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b53:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022b57:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022b5d:	75 0c                	jne    c0022b6b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b5f:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022b65:	0f 84 d0 00 00 00    	je     c0022c3b <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b6d:	eb c9                	jmp    c0022b38 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022b6f:	66 81 f9 01 06       	cmp    cx,0x601
c0022b74:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022b78:	75 19                	jne    c0022b93 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022b7a:	83 ec 0c             	sub    esp,0xc
c0022b7d:	68 64 01 00 00       	push   0x164
c0022b82:	e8 12 ca fe ff       	call   c000f599 <malloc>
c0022b87:	89 c5                	mov    ebp,eax
c0022b89:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b8c:	e8 85 0e 00 00       	call   c0023a16 <SATABus::SATABus()>
c0022b91:	eb 1e                	jmp    c0022bb1 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022b93:	66 81 f9 01 01       	cmp    cx,0x101
c0022b98:	75 60                	jne    c0022bfa <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022b9a:	83 ec 0c             	sub    esp,0xc
c0022b9d:	68 70 02 00 00       	push   0x270
c0022ba2:	e8 f2 c9 fe ff       	call   c000f599 <malloc>
c0022ba7:	89 c5                	mov    ebp,eax
c0022ba9:	89 04 24             	mov    DWORD PTR [esp],eax
c0022bac:	e8 0f 03 00 00       	call   c0022ec0 <IDE::IDE()>
c0022bb1:	58                   	pop    eax
c0022bb2:	5a                   	pop    edx
c0022bb3:	55                   	push   ebp
c0022bb4:	56                   	push   esi
c0022bb5:	e8 46 0f ff ff       	call   c0013b00 <Device::addChild(Device*)>
c0022bba:	83 ec 1c             	sub    esp,0x1c
c0022bbd:	b9 09 00 00 00       	mov    ecx,0x9
c0022bc2:	fc                   	cld    
c0022bc3:	89 e7                	mov    edi,esp
c0022bc5:	89 de                	mov    esi,ebx
c0022bc7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022bc9:	55                   	push   ebp
c0022bca:	e8 43 0e ff ff       	call   c0013a12 <Device::preOpenPCI(PCIDeviceInfo)>
c0022bcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022bd2:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022bd6:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022bde:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022be6:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022bee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022bf1:	83 c4 4c             	add    esp,0x4c
c0022bf4:	5b                   	pop    ebx
c0022bf5:	5e                   	pop    esi
c0022bf6:	5f                   	pop    edi
c0022bf7:	5d                   	pop    ebp
c0022bf8:	ff e0                	jmp    eax
c0022bfa:	83 ec 0c             	sub    esp,0xc
c0022bfd:	68 58 01 00 00       	push   0x158
c0022c02:	e8 92 c9 fe ff       	call   c000f599 <malloc>
c0022c07:	89 c5                	mov    ebp,eax
c0022c09:	58                   	pop    eax
c0022c0a:	5a                   	pop    edx
c0022c0b:	68 bf bf 02 c0       	push   0xc002bfbf
c0022c10:	55                   	push   ebp
c0022c11:	e8 f4 11 ff ff       	call   c0013e0a <DriverlessDevice::DriverlessDevice(char const*)>
c0022c16:	59                   	pop    ecx
c0022c17:	5f                   	pop    edi
c0022c18:	55                   	push   ebp
c0022c19:	56                   	push   esi
c0022c1a:	e8 e1 0e ff ff       	call   c0013b00 <Device::addChild(Device*)>
c0022c1f:	b9 09 00 00 00       	mov    ecx,0x9
c0022c24:	fc                   	cld    
c0022c25:	89 df                	mov    edi,ebx
c0022c27:	89 de                	mov    esi,ebx
c0022c29:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c2b:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022c2f:	83 c4 2c             	add    esp,0x2c
c0022c32:	5b                   	pop    ebx
c0022c33:	5e                   	pop    esi
c0022c34:	5f                   	pop    edi
c0022c35:	5d                   	pop    ebp
c0022c36:	e9 d7 0d ff ff       	jmp    c0013a12 <Device::preOpenPCI(PCIDeviceInfo)>
c0022c3b:	83 c4 1c             	add    esp,0x1c
c0022c3e:	5b                   	pop    ebx
c0022c3f:	5e                   	pop    esi
c0022c40:	5f                   	pop    edi
c0022c41:	5d                   	pop    ebp
c0022c42:	c3                   	ret    
c0022c43:	90                   	nop

c0022c44 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022c44:	55                   	push   ebp
c0022c45:	57                   	push   edi
c0022c46:	56                   	push   esi
c0022c47:	53                   	push   ebx
c0022c48:	83 ec 68             	sub    esp,0x68
c0022c4b:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022c4f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022c56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022c5a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022c61:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022c66:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022c6a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022c71:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022c76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022c7a:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022c7f:	6a 0c                	push   0xc
c0022c81:	57                   	push   edi
c0022c82:	53                   	push   ebx
c0022c83:	56                   	push   esi
c0022c84:	55                   	push   ebp
c0022c85:	e8 88 f8 ff ff       	call   c0022512 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c8a:	83 c4 20             	add    esp,0x20
c0022c8d:	57                   	push   edi
c0022c8e:	53                   	push   ebx
c0022c8f:	56                   	push   esi
c0022c90:	55                   	push   ebp
c0022c91:	e8 70 f9 ff ff       	call   c0022606 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022c96:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022c9b:	57                   	push   edi
c0022c9c:	53                   	push   ebx
c0022c9d:	56                   	push   esi
c0022c9e:	55                   	push   ebp
c0022c9f:	e8 f8 f9 ff ff       	call   c002269c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022ca4:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022ca8:	83 c4 14             	add    esp,0x14
c0022cab:	6a 3c                	push   0x3c
c0022cad:	57                   	push   edi
c0022cae:	53                   	push   ebx
c0022caf:	56                   	push   esi
c0022cb0:	55                   	push   ebp
c0022cb1:	e8 5c f8 ff ff       	call   c0022512 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cb6:	0f b6 c4             	movzx  eax,ah
c0022cb9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022cbd:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022cc1:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022cc5:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0022cca:	83 c4 20             	add    esp,0x20
c0022ccd:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022cd3:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022cda:	74 7c                	je     c0022d58 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022cdc:	31 c0                	xor    eax,eax
c0022cde:	8b 15 08 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d908
c0022ce4:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022cea:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022cf0:	7e 66                	jle    c0022d58 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022cf2:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022cf5:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022cfc:	39 cb                	cmp    ebx,ecx
c0022cfe:	75 55                	jne    c0022d55 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022d00:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022d07:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022d0b:	75 48                	jne    c0022d55 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022d0d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022d11:	83 ec 0c             	sub    esp,0xc
c0022d14:	68 d9 bf 02 c0       	push   0xc002bfd9
c0022d19:	e8 a9 f9 fe ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0022d1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022d22:	8b 15 08 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d908
c0022d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022d2c:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d32:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022d3a:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022d3e:	52                   	push   edx
c0022d3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d43:	53                   	push   ebx
c0022d44:	68 fe bf 02 c0       	push   0xc002bffe
c0022d49:	e8 79 f9 fe ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0022d4e:	83 c4 20             	add    esp,0x20
c0022d51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d55:	40                   	inc    eax
c0022d56:	eb 86                	jmp    c0022cde <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022d58:	31 d2                	xor    edx,edx
c0022d5a:	83 ec 0c             	sub    esp,0xc
c0022d5d:	57                   	push   edi
c0022d5e:	53                   	push   ebx
c0022d5f:	56                   	push   esi
c0022d60:	52                   	push   edx
c0022d61:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022d65:	55                   	push   ebp
c0022d66:	e8 7d f9 ff ff       	call   c00226e8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d6b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022d6f:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022d73:	42                   	inc    edx
c0022d74:	83 c4 20             	add    esp,0x20
c0022d77:	83 fa 06             	cmp    edx,0x6
c0022d7a:	75 de                	jne    c0022d5a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022d7c:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022d81:	83 ec 0c             	sub    esp,0xc
c0022d84:	86 e0                	xchg   al,ah
c0022d86:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022d8b:	6a 02                	push   0x2
c0022d8d:	57                   	push   edi
c0022d8e:	53                   	push   ebx
c0022d8f:	56                   	push   esi
c0022d90:	55                   	push   ebp
c0022d91:	e8 7c f7 ff ff       	call   c0022512 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d96:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022d9b:	83 c4 20             	add    esp,0x20
c0022d9e:	57                   	push   edi
c0022d9f:	53                   	push   ebx
c0022da0:	56                   	push   esi
c0022da1:	55                   	push   ebp
c0022da2:	e8 a9 f8 ff ff       	call   c0022650 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022da7:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022dab:	57                   	push   edi
c0022dac:	53                   	push   ebx
c0022dad:	56                   	push   esi
c0022dae:	55                   	push   ebp
c0022daf:	e8 06 f8 ff ff       	call   c00225ba <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022db4:	b9 09 00 00 00       	mov    ecx,0x9
c0022db9:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022dbe:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022dc2:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022dc6:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022dca:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022dce:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022dd2:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022dd6:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022dda:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022dde:	83 ec 0c             	sub    esp,0xc
c0022de1:	fc                   	cld    
c0022de2:	89 e7                	mov    edi,esp
c0022de4:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022de8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022dea:	55                   	push   ebp
c0022deb:	e8 e2 fc ff ff       	call   c0022ad2 <PCI::foundDevice(PCIDeviceInfo)>
c0022df0:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022df6:	5b                   	pop    ebx
c0022df7:	5e                   	pop    esi
c0022df8:	5f                   	pop    edi
c0022df9:	5d                   	pop    ebp
c0022dfa:	c3                   	ret    
c0022dfb:	90                   	nop

c0022dfc <PCI::checkDevice(unsigned char, unsigned char)>:
c0022dfc:	55                   	push   ebp
c0022dfd:	57                   	push   edi
c0022dfe:	56                   	push   esi
c0022dff:	53                   	push   ebx
c0022e00:	83 ec 0c             	sub    esp,0xc
c0022e03:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022e07:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022e0c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022e11:	6a 00                	push   0x0
c0022e13:	56                   	push   esi
c0022e14:	57                   	push   edi
c0022e15:	55                   	push   ebp
c0022e16:	e8 9f f7 ff ff       	call   c00225ba <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e1b:	6a 00                	push   0x0
c0022e1d:	56                   	push   esi
c0022e1e:	57                   	push   edi
c0022e1f:	55                   	push   ebp
c0022e20:	e8 1f fe ff ff       	call   c0022c44 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e25:	83 c4 20             	add    esp,0x20
c0022e28:	6a 00                	push   0x0
c0022e2a:	56                   	push   esi
c0022e2b:	57                   	push   edi
c0022e2c:	55                   	push   ebp
c0022e2d:	e8 ac f7 ff ff       	call   c00225de <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e32:	83 c4 10             	add    esp,0x10
c0022e35:	84 c0                	test   al,al
c0022e37:	79 27                	jns    c0022e60 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022e39:	bb 01 00 00 00       	mov    ebx,0x1
c0022e3e:	53                   	push   ebx
c0022e3f:	56                   	push   esi
c0022e40:	57                   	push   edi
c0022e41:	55                   	push   ebp
c0022e42:	e8 73 f7 ff ff       	call   c00225ba <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e47:	83 c4 10             	add    esp,0x10
c0022e4a:	66 40                	inc    ax
c0022e4c:	74 0c                	je     c0022e5a <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022e4e:	53                   	push   ebx
c0022e4f:	56                   	push   esi
c0022e50:	57                   	push   edi
c0022e51:	55                   	push   ebp
c0022e52:	e8 ed fd ff ff       	call   c0022c44 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e57:	83 c4 10             	add    esp,0x10
c0022e5a:	43                   	inc    ebx
c0022e5b:	83 fb 08             	cmp    ebx,0x8
c0022e5e:	75 de                	jne    c0022e3e <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022e60:	83 c4 0c             	add    esp,0xc
c0022e63:	5b                   	pop    ebx
c0022e64:	5e                   	pop    esi
c0022e65:	5f                   	pop    edi
c0022e66:	5d                   	pop    ebp
c0022e67:	c3                   	ret    

c0022e68 <PCI::detect()>:
c0022e68:	56                   	push   esi
c0022e69:	53                   	push   ebx
c0022e6a:	53                   	push   ebx
c0022e6b:	31 db                	xor    ebx,ebx
c0022e6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022e71:	6a 00                	push   0x0
c0022e73:	6a 00                	push   0x0
c0022e75:	6a 00                	push   0x0
c0022e77:	56                   	push   esi
c0022e78:	e8 61 f7 ff ff       	call   c00225de <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e7d:	83 c4 10             	add    esp,0x10
c0022e80:	a8 80                	test   al,0x80
c0022e82:	75 21                	jne    c0022ea5 <PCI::detect()+0x3d>
c0022e84:	51                   	push   ecx
c0022e85:	51                   	push   ecx
c0022e86:	6a 00                	push   0x0
c0022e88:	56                   	push   esi
c0022e89:	e8 20 fc ff ff       	call   c0022aae <PCI::checkBus(unsigned char)>
c0022e8e:	83 c4 10             	add    esp,0x10
c0022e91:	eb 24                	jmp    c0022eb7 <PCI::detect()+0x4f>
c0022e93:	52                   	push   edx
c0022e94:	52                   	push   edx
c0022e95:	53                   	push   ebx
c0022e96:	43                   	inc    ebx
c0022e97:	56                   	push   esi
c0022e98:	e8 11 fc ff ff       	call   c0022aae <PCI::checkBus(unsigned char)>
c0022e9d:	83 c4 10             	add    esp,0x10
c0022ea0:	83 fb 08             	cmp    ebx,0x8
c0022ea3:	74 12                	je     c0022eb7 <PCI::detect()+0x4f>
c0022ea5:	53                   	push   ebx
c0022ea6:	6a 00                	push   0x0
c0022ea8:	6a 00                	push   0x0
c0022eaa:	56                   	push   esi
c0022eab:	e8 0a f7 ff ff       	call   c00225ba <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022eb0:	83 c4 10             	add    esp,0x10
c0022eb3:	66 40                	inc    ax
c0022eb5:	74 dc                	je     c0022e93 <PCI::detect()+0x2b>
c0022eb7:	58                   	pop    eax
c0022eb8:	5b                   	pop    ebx
c0022eb9:	5e                   	pop    esi
c0022eba:	c3                   	ret    
c0022ebb:	90                   	nop

c0022ebc <IDE::close(int, int, void*)>:
c0022ebc:	83 c8 ff             	or     eax,0xffffffff
c0022ebf:	c3                   	ret    

c0022ec0 <IDE::IDE()>:
c0022ec0:	83 ec 0c             	sub    esp,0xc
c0022ec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ec7:	83 ec 08             	sub    esp,0x8
c0022eca:	68 48 c0 02 c0       	push   0xc002c048
c0022ecf:	50                   	push   eax
c0022ed0:	e8 d9 0f ff ff       	call   c0013eae <HardDiskController::HardDiskController(char const*)>
c0022ed5:	83 c4 10             	add    esp,0x10
c0022ed8:	ba d8 c0 02 c0       	mov    edx,0xc002c0d8
c0022edd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ee1:	89 10                	mov    DWORD PTR [eax],edx
c0022ee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ee7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022eee:	90                   	nop
c0022eef:	83 c4 0c             	add    esp,0xc
c0022ef2:	c3                   	ret    
c0022ef3:	90                   	nop

c0022ef4 <IDE::prepareInterrupt(unsigned char)>:
c0022ef4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022ef9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022efd:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022f05:	c3                   	ret    

c0022f06 <selectDrive(unsigned char, unsigned char)>:
c0022f06:	c3                   	ret    
c0022f07:	90                   	nop

c0022f08 <IDE::getBase(unsigned char)>:
c0022f08:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022f0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f11:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022f19:	c3                   	ret    

c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022f1a:	55                   	push   ebp
c0022f1b:	57                   	push   edi
c0022f1c:	56                   	push   esi
c0022f1d:	53                   	push   ebx
c0022f1e:	83 ec 1c             	sub    esp,0x1c
c0022f21:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022f25:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022f29:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022f2c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022f30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022f34:	80 f9 03             	cmp    cl,0x3
c0022f37:	77 51                	ja     c0022f8a <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022f39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022f3d:	0f b6 f2             	movzx  esi,dl
c0022f40:	0f b6 db             	movzx  ebx,bl
c0022f43:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022f46:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022f4a:	83 ca 80             	or     edx,0xffffff80
c0022f4d:	0f b6 d2             	movzx  edx,dl
c0022f50:	52                   	push   edx
c0022f51:	6a 0c                	push   0xc
c0022f53:	56                   	push   esi
c0022f54:	57                   	push   edi
c0022f55:	e8 c0 ff ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f5a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022f5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f63:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022f67:	ee                   	out    dx,al
c0022f68:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022f6d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022f71:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022f75:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022f79:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022f81:	83 c4 2c             	add    esp,0x2c
c0022f84:	5b                   	pop    ebx
c0022f85:	5e                   	pop    esi
c0022f86:	5f                   	pop    edi
c0022f87:	5d                   	pop    ebp
c0022f88:	eb 90                	jmp    c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f8a:	80 fb 07             	cmp    bl,0x7
c0022f8d:	77 12                	ja     c0022fa1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022f8f:	0f b6 d2             	movzx  edx,dl
c0022f92:	0f b6 db             	movzx  ebx,bl
c0022f95:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022f9d:	89 da                	mov    edx,ebx
c0022f9f:	eb 2f                	jmp    c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022fa1:	80 fb 0d             	cmp    bl,0xd
c0022fa4:	77 13                	ja     c0022fb9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022fa6:	0f b6 d2             	movzx  edx,dl
c0022fa9:	0f b6 db             	movzx  ebx,bl
c0022fac:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022fb3:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022fb7:	eb 17                	jmp    c0022fd0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022fb9:	80 fb 15             	cmp    bl,0x15
c0022fbc:	77 13                	ja     c0022fd1 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022fbe:	0f b6 d2             	movzx  edx,dl
c0022fc1:	0f b6 db             	movzx  ebx,bl
c0022fc4:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022fcc:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022fd0:	ee                   	out    dx,al
c0022fd1:	83 c4 1c             	add    esp,0x1c
c0022fd4:	5b                   	pop    ebx
c0022fd5:	5e                   	pop    esi
c0022fd6:	5f                   	pop    edi
c0022fd7:	5d                   	pop    ebp
c0022fd8:	c3                   	ret    
c0022fd9:	90                   	nop

c0022fda <IDE::read(unsigned char, unsigned char)>:
c0022fda:	55                   	push   ebp
c0022fdb:	57                   	push   edi
c0022fdc:	56                   	push   esi
c0022fdd:	53                   	push   ebx
c0022fde:	83 ec 1c             	sub    esp,0x1c
c0022fe1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022fe5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022fe9:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022fec:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022ff0:	3c 03                	cmp    al,0x3
c0022ff2:	77 43                	ja     c0023037 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022ff4:	0f b6 f2             	movzx  esi,dl
c0022ff7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022ffa:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022ffe:	83 c8 80             	or     eax,0xffffff80
c0023001:	0f b6 c0             	movzx  eax,al
c0023004:	50                   	push   eax
c0023005:	6a 0c                	push   0xc
c0023007:	56                   	push   esi
c0023008:	57                   	push   edi
c0023009:	e8 0c ff ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002300e:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023013:	0f b6 c3             	movzx  eax,bl
c0023016:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c002301a:	ec                   	in     al,dx
c002301b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002301f:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023024:	52                   	push   edx
c0023025:	6a 0c                	push   0xc
c0023027:	56                   	push   esi
c0023028:	57                   	push   edi
c0023029:	e8 ec fe ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002302e:	83 c4 20             	add    esp,0x20
c0023031:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023035:	eb 49                	jmp    c0023080 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023037:	80 fb 07             	cmp    bl,0x7
c002303a:	77 12                	ja     c002304e <IDE::read(unsigned char, unsigned char)+0x74>
c002303c:	0f b6 d2             	movzx  edx,dl
c002303f:	0f b6 c3             	movzx  eax,bl
c0023042:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c002304a:	89 c2                	mov    edx,eax
c002304c:	eb 31                	jmp    c002307f <IDE::read(unsigned char, unsigned char)+0xa5>
c002304e:	80 fb 0d             	cmp    bl,0xd
c0023051:	77 13                	ja     c0023066 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023053:	0f b6 d2             	movzx  edx,dl
c0023056:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c002305d:	0f b6 d3             	movzx  edx,bl
c0023060:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023064:	eb 19                	jmp    c002307f <IDE::read(unsigned char, unsigned char)+0xa5>
c0023066:	31 c0                	xor    eax,eax
c0023068:	80 fb 15             	cmp    bl,0x15
c002306b:	77 13                	ja     c0023080 <IDE::read(unsigned char, unsigned char)+0xa6>
c002306d:	0f b6 d2             	movzx  edx,dl
c0023070:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023078:	0f b6 d3             	movzx  edx,bl
c002307b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002307f:	ec                   	in     al,dx
c0023080:	83 c4 1c             	add    esp,0x1c
c0023083:	5b                   	pop    ebx
c0023084:	5e                   	pop    esi
c0023085:	5f                   	pop    edi
c0023086:	5d                   	pop    ebp
c0023087:	c3                   	ret    

c0023088 <IDE::waitInterrupt(unsigned char)>:
c0023088:	55                   	push   ebp
c0023089:	57                   	push   edi
c002308a:	56                   	push   esi
c002308b:	53                   	push   ebx
c002308c:	31 db                	xor    ebx,ebx
c002308e:	83 ec 0c             	sub    esp,0xc
c0023091:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023095:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002309a:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00230a2:	89 e8                	mov    eax,ebp
c00230a4:	84 c0                	test   al,al
c00230a6:	75 34                	jne    c00230dc <IDE::waitInterrupt(unsigned char)+0x54>
c00230a8:	52                   	push   edx
c00230a9:	6a 0c                	push   0xc
c00230ab:	56                   	push   esi
c00230ac:	57                   	push   edi
c00230ad:	e8 28 ff ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c00230b2:	83 c4 10             	add    esp,0x10
c00230b5:	a8 01                	test   al,0x1
c00230b7:	75 2b                	jne    c00230e4 <IDE::waitInterrupt(unsigned char)+0x5c>
c00230b9:	f6 c3 04             	test   bl,0x4
c00230bc:	75 16                	jne    c00230d4 <IDE::waitInterrupt(unsigned char)+0x4c>
c00230be:	83 fb 32             	cmp    ebx,0x32
c00230c1:	7e 11                	jle    c00230d4 <IDE::waitInterrupt(unsigned char)+0x4c>
c00230c3:	50                   	push   eax
c00230c4:	50                   	push   eax
c00230c5:	6a 00                	push   0x0
c00230c7:	68 80 96 98 00       	push   0x989680
c00230cc:	e8 c6 ab ff ff       	call   c001dc97 <nanoSleep(unsigned long long)>
c00230d1:	83 c4 10             	add    esp,0x10
c00230d4:	83 fb 3c             	cmp    ebx,0x3c
c00230d7:	74 0b                	je     c00230e4 <IDE::waitInterrupt(unsigned char)+0x5c>
c00230d9:	43                   	inc    ebx
c00230da:	eb be                	jmp    c002309a <IDE::waitInterrupt(unsigned char)+0x12>
c00230dc:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00230e4:	83 c4 0c             	add    esp,0xc
c00230e7:	89 e8                	mov    eax,ebp
c00230e9:	5b                   	pop    ebx
c00230ea:	5e                   	pop    esi
c00230eb:	5f                   	pop    edi
c00230ec:	5d                   	pop    ebp
c00230ed:	c3                   	ret    

c00230ee <ideChannel0IRQHandler(regs*, void*)>:
c00230ee:	83 ec 10             	sub    esp,0x10
c00230f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00230f5:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00230fc:	6a 07                	push   0x7
c00230fe:	6a 00                	push   0x0
c0023100:	50                   	push   eax
c0023101:	e8 d4 fe ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c0023106:	83 c4 1c             	add    esp,0x1c
c0023109:	c3                   	ret    

c002310a <ideChannel1IRQHandler(regs*, void*)>:
c002310a:	83 ec 10             	sub    esp,0x10
c002310d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023111:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023118:	6a 07                	push   0x7
c002311a:	6a 01                	push   0x1
c002311c:	50                   	push   eax
c002311d:	e8 b8 fe ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c0023122:	83 c4 1c             	add    esp,0x1c
c0023125:	c3                   	ret    

c0023126 <IDE::enableIRQs(unsigned char, bool)>:
c0023126:	57                   	push   edi
c0023127:	56                   	push   esi
c0023128:	be 04 00 00 00       	mov    esi,0x4
c002312d:	53                   	push   ebx
c002312e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023137:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002313c:	0f 94 c0             	sete   al
c002313f:	d1 e0                	shl    eax,1
c0023141:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023148:	0f b6 c0             	movzx  eax,al
c002314b:	50                   	push   eax
c002314c:	6a 0c                	push   0xc
c002314e:	57                   	push   edi
c002314f:	53                   	push   ebx
c0023150:	e8 c5 fd ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023155:	83 c4 10             	add    esp,0x10
c0023158:	50                   	push   eax
c0023159:	6a 0c                	push   0xc
c002315b:	57                   	push   edi
c002315c:	53                   	push   ebx
c002315d:	e8 78 fe ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c0023162:	83 c4 10             	add    esp,0x10
c0023165:	4e                   	dec    esi
c0023166:	75 f0                	jne    c0023158 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023168:	5b                   	pop    ebx
c0023169:	5e                   	pop    esi
c002316a:	5f                   	pop    edi
c002316b:	c3                   	ret    

c002316c <IDE::open(int, int, void*)>:
c002316c:	55                   	push   ebp
c002316d:	57                   	push   edi
c002316e:	56                   	push   esi
c002316f:	53                   	push   ebx
c0023170:	83 ec 1c             	sub    esp,0x1c
c0023173:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023177:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023180:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023189:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023190:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023197:	0f 85 b0 02 00 00    	jne    c002344d <IDE::open(int, int, void*)+0x2e1>
c002319d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00231a3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00231a7:	83 e0 7f             	and    eax,0x7f
c00231aa:	3c 05                	cmp    al,0x5
c00231ac:	74 04                	je     c00231b2 <IDE::open(int, int, void*)+0x46>
c00231ae:	3c 0f                	cmp    al,0xf
c00231b0:	75 32                	jne    c00231e4 <IDE::open(int, int, void*)+0x78>
c00231b2:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00231b8:	83 e0 fc             	and    eax,0xfffffffc
c00231bb:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00231c2:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00231c8:	83 e0 fc             	and    eax,0xfffffffc
c00231cb:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00231d2:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00231d8:	83 e0 fc             	and    eax,0xfffffffc
c00231db:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00231e2:	eb 14                	jmp    c00231f8 <IDE::open(int, int, void*)+0x8c>
c00231e4:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00231ee:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00231f8:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00231ff:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023206:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002320a:	89 c6                	mov    esi,eax
c002320c:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023211:	c1 e6 10             	shl    esi,0x10
c0023214:	89 e8                	mov    eax,ebp
c0023216:	89 fa                	mov    edx,edi
c0023218:	c1 e0 0b             	shl    eax,0xb
c002321b:	09 f0                	or     eax,esi
c002321d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023224:	c1 e6 08             	shl    esi,0x8
c0023227:	09 c6                	or     esi,eax
c0023229:	89 f0                	mov    eax,esi
c002322b:	0d 08 00 00 80       	or     eax,0x80000008
c0023230:	ef                   	out    dx,eax
c0023231:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023236:	89 ca                	mov    edx,ecx
c0023238:	ed                   	in     eax,dx
c0023239:	c1 e8 10             	shr    eax,0x10
c002323c:	3d ff ff 00 00       	cmp    eax,0xffff
c0023241:	0f 84 f5 00 00 00    	je     c002333c <IDE::open(int, int, void*)+0x1d0>
c0023247:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002324d:	89 fa                	mov    edx,edi
c002324f:	89 f0                	mov    eax,esi
c0023251:	ef                   	out    dx,eax
c0023252:	b0 fe                	mov    al,0xfe
c0023254:	89 ca                	mov    edx,ecx
c0023256:	ee                   	out    dx,al
c0023257:	89 f0                	mov    eax,esi
c0023259:	89 fa                	mov    edx,edi
c002325b:	ef                   	out    dx,eax
c002325c:	89 ca                	mov    edx,ecx
c002325e:	ed                   	in     eax,dx
c002325f:	3c fe                	cmp    al,0xfe
c0023261:	0f 85 a9 00 00 00    	jne    c0023310 <IDE::open(int, int, void*)+0x1a4>
c0023267:	8b 15 08 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d908
c002326d:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023274:	74 33                	je     c00232a9 <IDE::open(int, int, void*)+0x13d>
c0023276:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002327c:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023280:	40                   	inc    eax
c0023281:	83 ec 0c             	sub    esp,0xc
c0023284:	0f b6 c0             	movzx  eax,al
c0023287:	50                   	push   eax
c0023288:	55                   	push   ebp
c0023289:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002328d:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023293:	51                   	push   ecx
c0023294:	e8 53 48 ff ff       	call   c0017aec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023299:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002329e:	83 c4 1c             	add    esp,0x1c
c00232a1:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00232a7:	eb 0a                	jmp    c00232b3 <IDE::open(int, int, void*)+0x147>
c00232a9:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00232b3:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00232ba:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00232c1:	c1 e1 10             	shl    ecx,0x10
c00232c4:	c1 e0 08             	shl    eax,0x8
c00232c7:	bf f8 0c 00 00       	mov    edi,0xcf8
c00232cc:	09 c1                	or     ecx,eax
c00232ce:	89 fa                	mov    edx,edi
c00232d0:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00232d7:	c1 e0 0b             	shl    eax,0xb
c00232da:	09 c1                	or     ecx,eax
c00232dc:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00232e2:	89 c8                	mov    eax,ecx
c00232e4:	ef                   	out    dx,eax
c00232e5:	be fc 0c 00 00       	mov    esi,0xcfc
c00232ea:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00232f0:	89 f2                	mov    edx,esi
c00232f2:	ee                   	out    dx,al
c00232f3:	89 c8                	mov    eax,ecx
c00232f5:	89 fa                	mov    edx,edi
c00232f7:	ef                   	out    dx,eax
c00232f8:	89 f2                	mov    edx,esi
c00232fa:	ed                   	in     eax,dx
c00232fb:	0f b6 c0             	movzx  eax,al
c00232fe:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023304:	74 46                	je     c002334c <IDE::open(int, int, void*)+0x1e0>
c0023306:	83 ec 0c             	sub    esp,0xc
c0023309:	68 60 c0 02 c0       	push   0xc002c060
c002330e:	eb 34                	jmp    c0023344 <IDE::open(int, int, void*)+0x1d8>
c0023310:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023319:	75 17                	jne    c0023332 <IDE::open(int, int, void*)+0x1c6>
c002331b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023320:	74 07                	je     c0023329 <IDE::open(int, int, void*)+0x1bd>
c0023322:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023327:	75 09                	jne    c0023332 <IDE::open(int, int, void*)+0x1c6>
c0023329:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023330:	eb 1a                	jmp    c002334c <IDE::open(int, int, void*)+0x1e0>
c0023332:	83 ec 0c             	sub    esp,0xc
c0023335:	68 68 c0 02 c0       	push   0xc002c068
c002333a:	eb 08                	jmp    c0023344 <IDE::open(int, int, void*)+0x1d8>
c002333c:	83 ec 0c             	sub    esp,0xc
c002333f:	68 99 c0 02 c0       	push   0xc002c099
c0023344:	e8 ea 6a ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c0023349:	83 c4 10             	add    esp,0x10
c002334c:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023353:	79 1a                	jns    c002336f <IDE::open(int, int, void*)+0x203>
c0023355:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002335b:	83 e0 fc             	and    eax,0xfffffffc
c002335e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023365:	83 c0 08             	add    eax,0x8
c0023368:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002336f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023375:	89 c2                	mov    edx,eax
c0023377:	83 e2 0f             	and    edx,0xf
c002337a:	66 83 fa 08          	cmp    dx,0x8
c002337e:	75 0a                	jne    c002338a <IDE::open(int, int, void*)+0x21e>
c0023380:	83 e8 02             	sub    eax,0x2
c0023383:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002338a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023390:	89 c2                	mov    edx,eax
c0023392:	83 e2 0f             	and    edx,0xf
c0023395:	66 83 fa 08          	cmp    dx,0x8
c0023399:	75 0a                	jne    c00233a5 <IDE::open(int, int, void*)+0x239>
c002339b:	83 e8 02             	sub    eax,0x2
c002339e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00233a5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00233ac:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00233b3:	89 d0                	mov    eax,edx
c00233b5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233b8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233bc:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00233c0:	8d 4a 01             	lea    ecx,[edx+0x1]
c00233c3:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00233c8:	0f b6 c9             	movzx  ecx,cl
c00233cb:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00233d2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00233d5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00233d9:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00233dd:	8d 50 02             	lea    edx,[eax+0x2]
c00233e0:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00233e5:	0f b6 d2             	movzx  edx,dl
c00233e8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00233ee:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233f1:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233f5:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00233f9:	8d 48 03             	lea    ecx,[eax+0x3]
c00233fc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023401:	0f b6 c9             	movzx  ecx,cl
c0023404:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002340a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002340d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023411:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023415:	8d 50 04             	lea    edx,[eax+0x4]
c0023418:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002341e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023423:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002342a:	66 85 f6             	test   si,si
c002342d:	74 5b                	je     c002348a <IDE::open(int, int, void*)+0x31e>
c002342f:	0f b6 d2             	movzx  edx,dl
c0023432:	83 c0 05             	add    eax,0x5
c0023435:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023438:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002343c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023440:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023446:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002344b:	eb 3d                	jmp    c002348a <IDE::open(int, int, void*)+0x31e>
c002344d:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0023453:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002345a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023461:	66 05 06 02          	add    ax,0x206
c0023465:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002346c:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0023473:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002347a:	66 05 06 02          	add    ax,0x206
c002347e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023485:	e9 e5 fe ff ff       	jmp    c002336f <IDE::open(int, int, void*)+0x203>
c002348a:	50                   	push   eax
c002348b:	50                   	push   eax
c002348c:	6a 00                	push   0x0
c002348e:	53                   	push   ebx
c002348f:	e8 60 fa ff ff       	call   c0022ef4 <IDE::prepareInterrupt(unsigned char)>
c0023494:	5a                   	pop    edx
c0023495:	59                   	pop    ecx
c0023496:	6a 01                	push   0x1
c0023498:	53                   	push   ebx
c0023499:	e8 56 fa ff ff       	call   c0022ef4 <IDE::prepareInterrupt(unsigned char)>
c002349e:	83 c4 0c             	add    esp,0xc
c00234a1:	6a 00                	push   0x0
c00234a3:	6a 00                	push   0x0
c00234a5:	53                   	push   ebx
c00234a6:	e8 7b fc ff ff       	call   c0023126 <IDE::enableIRQs(unsigned char, bool)>
c00234ab:	83 c4 0c             	add    esp,0xc
c00234ae:	6a 00                	push   0x0
c00234b0:	6a 01                	push   0x1
c00234b2:	53                   	push   ebx
c00234b3:	e8 6e fc ff ff       	call   c0023126 <IDE::enableIRQs(unsigned char, bool)>
c00234b8:	83 c4 10             	add    esp,0x10
c00234bb:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00234c2:	74 34                	je     c00234f8 <IDE::open(int, int, void*)+0x38c>
c00234c4:	83 ec 0c             	sub    esp,0xc
c00234c7:	53                   	push   ebx
c00234c8:	6a 01                	push   0x1
c00234ca:	68 ee 30 02 c0       	push   0xc00230ee
c00234cf:	6a 0e                	push   0xe
c00234d1:	53                   	push   ebx
c00234d2:	e8 a1 05 ff ff       	call   c0013a78 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234d7:	83 c4 14             	add    esp,0x14
c00234da:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00234e0:	53                   	push   ebx
c00234e1:	6a 01                	push   0x1
c00234e3:	68 0a 31 02 c0       	push   0xc002310a
c00234e8:	6a 0f                	push   0xf
c00234ea:	53                   	push   ebx
c00234eb:	e8 88 05 ff ff       	call   c0013a78 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234f0:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00234f6:	eb 38                	jmp    c0023530 <IDE::open(int, int, void*)+0x3c4>
c00234f8:	83 ec 0c             	sub    esp,0xc
c00234fb:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023505:	53                   	push   ebx
c0023506:	6a 00                	push   0x0
c0023508:	68 ee 30 02 c0       	push   0xc00230ee
c002350d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023513:	53                   	push   ebx
c0023514:	e8 5f 05 ff ff       	call   c0013a78 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023519:	83 c4 14             	add    esp,0x14
c002351c:	53                   	push   ebx
c002351d:	6a 00                	push   0x0
c002351f:	68 0a 31 02 c0       	push   0xc002310a
c0023524:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002352a:	53                   	push   ebx
c002352b:	e8 48 05 ff ff       	call   c0013a78 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023530:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023532:	83 c4 20             	add    esp,0x20
c0023535:	83 ec 0c             	sub    esp,0xc
c0023538:	53                   	push   ebx
c0023539:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002353c:	83 c4 0c             	add    esp,0xc
c002353f:	6a 07                	push   0x7
c0023541:	6a 00                	push   0x0
c0023543:	53                   	push   ebx
c0023544:	e8 91 fa ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c0023549:	83 c4 0c             	add    esp,0xc
c002354c:	6a 07                	push   0x7
c002354e:	6a 01                	push   0x1
c0023550:	53                   	push   ebx
c0023551:	e8 84 fa ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c0023556:	83 c4 0c             	add    esp,0xc
c0023559:	6a 01                	push   0x1
c002355b:	6a 00                	push   0x0
c002355d:	53                   	push   ebx
c002355e:	e8 c3 fb ff ff       	call   c0023126 <IDE::enableIRQs(unsigned char, bool)>
c0023563:	83 c4 0c             	add    esp,0xc
c0023566:	6a 01                	push   0x1
c0023568:	6a 01                	push   0x1
c002356a:	53                   	push   ebx
c002356b:	e8 b6 fb ff ff       	call   c0023126 <IDE::enableIRQs(unsigned char, bool)>
c0023570:	83 c4 2c             	add    esp,0x2c
c0023573:	31 c0                	xor    eax,eax
c0023575:	5b                   	pop    ebx
c0023576:	5e                   	pop    esi
c0023577:	5f                   	pop    edi
c0023578:	5d                   	pop    ebp
c0023579:	c3                   	ret    

c002357a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002357a:	55                   	push   ebp
c002357b:	57                   	push   edi
c002357c:	56                   	push   esi
c002357d:	53                   	push   ebx
c002357e:	83 ec 1c             	sub    esp,0x1c
c0023581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023585:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023589:	8d 50 f8             	lea    edx,[eax-0x8]
c002358c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023590:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023594:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023598:	80 fa 03             	cmp    dl,0x3
c002359b:	77 5d                	ja     c00235fa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002359d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00235a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00235a5:	0f b6 db             	movzx  ebx,bl
c00235a8:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00235ab:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00235af:	83 ca 80             	or     edx,0xffffff80
c00235b2:	0f b6 d2             	movzx  edx,dl
c00235b5:	52                   	push   edx
c00235b6:	6a 0c                	push   0xc
c00235b8:	53                   	push   ebx
c00235b9:	56                   	push   esi
c00235ba:	e8 5b f9 ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235bf:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00235c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00235c8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00235cc:	0f b6 c0             	movzx  eax,al
c00235cf:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00235d3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00235d5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00235da:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00235de:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00235e2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00235e6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00235ee:	83 c4 2c             	add    esp,0x2c
c00235f1:	5b                   	pop    ebx
c00235f2:	5e                   	pop    esi
c00235f3:	5f                   	pop    edi
c00235f4:	5d                   	pop    ebp
c00235f5:	e9 20 f9 ff ff       	jmp    c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235fa:	3c 07                	cmp    al,0x7
c00235fc:	77 10                	ja     c002360e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00235fe:	0f b6 db             	movzx  ebx,bl
c0023601:	0f b6 d0             	movzx  edx,al
c0023604:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002360c:	eb 2d                	jmp    c002363b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002360e:	3c 0d                	cmp    al,0xd
c0023610:	77 13                	ja     c0023625 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023612:	0f b6 db             	movzx  ebx,bl
c0023615:	0f b6 c0             	movzx  eax,al
c0023618:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002361f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023623:	eb 16                	jmp    c002363b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023625:	3c 15                	cmp    al,0x15
c0023627:	77 14                	ja     c002363d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023629:	0f b6 db             	movzx  ebx,bl
c002362c:	0f b6 c0             	movzx  eax,al
c002362f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023637:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002363b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002363d:	83 c4 1c             	add    esp,0x1c
c0023640:	5b                   	pop    ebx
c0023641:	5e                   	pop    esi
c0023642:	5f                   	pop    edi
c0023643:	5d                   	pop    ebp
c0023644:	c3                   	ret    
c0023645:	90                   	nop

c0023646 <IDE::detect()>:
c0023646:	55                   	push   ebp
c0023647:	57                   	push   edi
c0023648:	56                   	push   esi
c0023649:	53                   	push   ebx
c002364a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023650:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023657:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002365e:	0f 85 9d 02 00 00    	jne    c0023901 <IDE::detect()+0x2bb>
c0023664:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002366b:	31 f6                	xor    esi,esi
c002366d:	31 ed                	xor    ebp,ebp
c002366f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023677:	89 e8                	mov    eax,ebp
c0023679:	c1 e0 06             	shl    eax,0x6
c002367c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023684:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023688:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002368c:	c1 e0 04             	shl    eax,0x4
c002368f:	83 c8 a0             	or     eax,0xffffffa0
c0023692:	0f b6 c0             	movzx  eax,al
c0023695:	50                   	push   eax
c0023696:	6a 06                	push   0x6
c0023698:	56                   	push   esi
c0023699:	53                   	push   ebx
c002369a:	e8 7b f8 ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002369f:	83 c4 0c             	add    esp,0xc
c00236a2:	6a 0c                	push   0xc
c00236a4:	56                   	push   esi
c00236a5:	53                   	push   ebx
c00236a6:	e8 2f f9 ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c00236ab:	83 c4 0c             	add    esp,0xc
c00236ae:	6a 0c                	push   0xc
c00236b0:	56                   	push   esi
c00236b1:	53                   	push   ebx
c00236b2:	e8 23 f9 ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c00236b7:	83 c4 0c             	add    esp,0xc
c00236ba:	6a 0c                	push   0xc
c00236bc:	56                   	push   esi
c00236bd:	53                   	push   ebx
c00236be:	e8 17 f9 ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c00236c3:	83 c4 0c             	add    esp,0xc
c00236c6:	6a 0c                	push   0xc
c00236c8:	56                   	push   esi
c00236c9:	53                   	push   ebx
c00236ca:	e8 0b f9 ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c00236cf:	68 ec 00 00 00       	push   0xec
c00236d4:	6a 07                	push   0x7
c00236d6:	56                   	push   esi
c00236d7:	53                   	push   ebx
c00236d8:	e8 3d f8 ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236dd:	83 c4 1c             	add    esp,0x1c
c00236e0:	6a 0c                	push   0xc
c00236e2:	56                   	push   esi
c00236e3:	53                   	push   ebx
c00236e4:	e8 f1 f8 ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c00236e9:	83 c4 0c             	add    esp,0xc
c00236ec:	6a 0c                	push   0xc
c00236ee:	56                   	push   esi
c00236ef:	53                   	push   ebx
c00236f0:	e8 e5 f8 ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c00236f5:	83 c4 0c             	add    esp,0xc
c00236f8:	6a 0c                	push   0xc
c00236fa:	56                   	push   esi
c00236fb:	53                   	push   ebx
c00236fc:	e8 d9 f8 ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c0023701:	83 c4 0c             	add    esp,0xc
c0023704:	6a 0c                	push   0xc
c0023706:	56                   	push   esi
c0023707:	53                   	push   ebx
c0023708:	e8 cd f8 ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c002370d:	83 c4 0c             	add    esp,0xc
c0023710:	6a 0c                	push   0xc
c0023712:	56                   	push   esi
c0023713:	53                   	push   ebx
c0023714:	e8 c1 f8 ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c0023719:	83 c4 10             	add    esp,0x10
c002371c:	84 c0                	test   al,al
c002371e:	0f 84 63 01 00 00    	je     c0023887 <IDE::detect()+0x241>
c0023724:	31 ff                	xor    edi,edi
c0023726:	50                   	push   eax
c0023727:	6a 0c                	push   0xc
c0023729:	56                   	push   esi
c002372a:	53                   	push   ebx
c002372b:	e8 aa f8 ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c0023730:	83 c4 10             	add    esp,0x10
c0023733:	a8 01                	test   al,0x1
c0023735:	0f 85 6d 01 00 00    	jne    c00238a8 <IDE::detect()+0x262>
c002373b:	84 c0                	test   al,al
c002373d:	78 04                	js     c0023743 <IDE::detect()+0xfd>
c002373f:	a8 08                	test   al,0x8
c0023741:	75 27                	jne    c002376a <IDE::detect()+0x124>
c0023743:	47                   	inc    edi
c0023744:	81 ff 17 01 00 00    	cmp    edi,0x117
c002374a:	7e da                	jle    c0023726 <IDE::detect()+0xe0>
c002374c:	50                   	push   eax
c002374d:	50                   	push   eax
c002374e:	6a 00                	push   0x0
c0023750:	68 40 4b 4c 00       	push   0x4c4b40
c0023755:	e8 3d a5 ff ff       	call   c001dc97 <nanoSleep(unsigned long long)>
c002375a:	83 c4 10             	add    esp,0x10
c002375d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023763:	75 c1                	jne    c0023726 <IDE::detect()+0xe0>
c0023765:	e9 3e 01 00 00       	jmp    c00238a8 <IDE::detect()+0x262>
c002376a:	31 c9                	xor    ecx,ecx
c002376c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023770:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023774:	83 ec 0c             	sub    esp,0xc
c0023777:	68 80 00 00 00       	push   0x80
c002377c:	57                   	push   edi
c002377d:	6a 00                	push   0x0
c002377f:	56                   	push   esi
c0023780:	53                   	push   ebx
c0023781:	e8 f4 fd ff ff       	call   c002357a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023786:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002378b:	89 e8                	mov    eax,ebp
c002378d:	89 d1                	mov    ecx,edx
c002378f:	c1 e0 06             	shl    eax,0x6
c0023792:	01 d8                	add    eax,ebx
c0023794:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002379b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00237a2:	89 f2                	mov    edx,esi
c00237a4:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00237aa:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00237ae:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00237b4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00237b8:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00237bf:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00237c7:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00237ce:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00237d6:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00237dc:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00237e3:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00237e9:	8d 54 24 58          	lea    edx,[esp+0x58]
c00237ed:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00237f1:	83 c4 20             	add    esp,0x20
c00237f4:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00237f7:	83 c0 02             	add    eax,0x2
c00237fa:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023800:	83 c7 02             	add    edi,0x2
c0023803:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023806:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002380c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023810:	75 e2                	jne    c00237f4 <IDE::detect()+0x1ae>
c0023812:	89 e8                	mov    eax,ebp
c0023814:	c1 e0 06             	shl    eax,0x6
c0023817:	01 d8                	add    eax,ebx
c0023819:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002381f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023826:	66 c1 ea 09          	shr    dx,0x9
c002382a:	83 e2 01             	and    edx,0x1
c002382d:	84 c9                	test   cl,cl
c002382f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023835:	75 22                	jne    c0023859 <IDE::detect()+0x213>
c0023837:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002383e:	74 46                	je     c0023886 <IDE::detect()+0x240>
c0023840:	83 ec 0c             	sub    esp,0xc
c0023843:	68 7c 01 00 00       	push   0x17c
c0023848:	e8 4c bd fe ff       	call   c000f599 <malloc>
c002384d:	89 c7                	mov    edi,eax
c002384f:	89 04 24             	mov    DWORD PTR [esp],eax
c0023852:	e8 15 05 00 00       	call   c0023d6c <ATA::ATA()>
c0023857:	eb 17                	jmp    c0023870 <IDE::detect()+0x22a>
c0023859:	83 ec 0c             	sub    esp,0xc
c002385c:	68 80 01 00 00       	push   0x180
c0023861:	e8 33 bd fe ff       	call   c000f599 <malloc>
c0023866:	89 c7                	mov    edi,eax
c0023868:	89 04 24             	mov    DWORD PTR [esp],eax
c002386b:	e8 04 0b 00 00       	call   c0024374 <ATAPI::ATAPI()>
c0023870:	5a                   	pop    edx
c0023871:	59                   	pop    ecx
c0023872:	57                   	push   edi
c0023873:	53                   	push   ebx
c0023874:	e8 87 02 ff ff       	call   c0013b00 <Device::addChild(Device*)>
c0023879:	8b 07                	mov    eax,DWORD PTR [edi]
c002387b:	53                   	push   ebx
c002387c:	55                   	push   ebp
c002387d:	6a 00                	push   0x0
c002387f:	57                   	push   edi
c0023880:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023883:	83 c4 20             	add    esp,0x20
c0023886:	45                   	inc    ebp
c0023887:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002388c:	74 0d                	je     c002389b <IDE::detect()+0x255>
c002388e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0023896:	e9 dc fd ff ff       	jmp    c0023677 <IDE::detect()+0x31>
c002389b:	4e                   	dec    esi
c002389c:	74 63                	je     c0023901 <IDE::detect()+0x2bb>
c002389e:	be 01 00 00 00       	mov    esi,0x1
c00238a3:	e9 c7 fd ff ff       	jmp    c002366f <IDE::detect()+0x29>
c00238a8:	50                   	push   eax
c00238a9:	6a 04                	push   0x4
c00238ab:	56                   	push   esi
c00238ac:	53                   	push   ebx
c00238ad:	e8 28 f7 ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c00238b2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00238b6:	83 c4 0c             	add    esp,0xc
c00238b9:	6a 05                	push   0x5
c00238bb:	56                   	push   esi
c00238bc:	53                   	push   ebx
c00238bd:	e8 18 f7 ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c00238c2:	83 c4 10             	add    esp,0x10
c00238c5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00238c9:	80 fa 14             	cmp    dl,0x14
c00238cc:	75 04                	jne    c00238d2 <IDE::detect()+0x28c>
c00238ce:	3c eb                	cmp    al,0xeb
c00238d0:	eb 07                	jmp    c00238d9 <IDE::detect()+0x293>
c00238d2:	3c 96                	cmp    al,0x96
c00238d4:	75 b1                	jne    c0023887 <IDE::detect()+0x241>
c00238d6:	80 fa 69             	cmp    dl,0x69
c00238d9:	75 ac                	jne    c0023887 <IDE::detect()+0x241>
c00238db:	68 a1 00 00 00       	push   0xa1
c00238e0:	6a 07                	push   0x7
c00238e2:	56                   	push   esi
c00238e3:	53                   	push   ebx
c00238e4:	e8 31 f6 ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238e9:	5f                   	pop    edi
c00238ea:	58                   	pop    eax
c00238eb:	6a 00                	push   0x0
c00238ed:	68 40 42 0f 00       	push   0xf4240
c00238f2:	e8 a0 a3 ff ff       	call   c001dc97 <nanoSleep(unsigned long long)>
c00238f7:	83 c4 10             	add    esp,0x10
c00238fa:	b1 01                	mov    cl,0x1
c00238fc:	e9 6b fe ff ff       	jmp    c002376c <IDE::detect()+0x126>
c0023901:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023907:	5b                   	pop    ebx
c0023908:	5e                   	pop    esi
c0023909:	5f                   	pop    edi
c002390a:	5d                   	pop    ebp
c002390b:	c3                   	ret    

c002390c <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002390c:	55                   	push   ebp
c002390d:	57                   	push   edi
c002390e:	56                   	push   esi
c002390f:	53                   	push   ebx
c0023910:	83 ec 1c             	sub    esp,0x1c
c0023913:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023917:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002391b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002391f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023923:	88 c3                	mov    bl,al
c0023925:	84 c0                	test   al,al
c0023927:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002392b:	0f 84 81 00 00 00    	je     c00239b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023931:	83 ec 0c             	sub    esp,0xc
c0023934:	68 c3 c0 02 c0       	push   0xc002c0c3
c0023939:	e8 89 ed fe ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c002393e:	83 c4 10             	add    esp,0x10
c0023941:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023945:	3c 01                	cmp    al,0x1
c0023947:	74 63                	je     c00239ac <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023949:	3c 02                	cmp    al,0x2
c002394b:	75 53                	jne    c00239a0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002394d:	d1 e6                	shl    esi,1
c002394f:	09 ee                	or     esi,ebp
c0023951:	50                   	push   eax
c0023952:	89 f0                	mov    eax,esi
c0023954:	6a 01                	push   0x1
c0023956:	0f b6 f0             	movzx  esi,al
c0023959:	c1 e6 06             	shl    esi,0x6
c002395c:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023964:	50                   	push   eax
c0023965:	57                   	push   edi
c0023966:	e8 6f f6 ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c002396b:	83 c4 10             	add    esp,0x10
c002396e:	a8 01                	test   al,0x1
c0023970:	74 02                	je     c0023974 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023972:	b3 07                	mov    bl,0x7
c0023974:	a8 02                	test   al,0x2
c0023976:	74 02                	je     c002397a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0023978:	b3 03                	mov    bl,0x3
c002397a:	a8 04                	test   al,0x4
c002397c:	74 02                	je     c0023980 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c002397e:	b3 14                	mov    bl,0x14
c0023980:	a8 08                	test   al,0x8
c0023982:	74 02                	je     c0023986 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023984:	b3 03                	mov    bl,0x3
c0023986:	a8 10                	test   al,0x10
c0023988:	74 02                	je     c002398c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c002398a:	b3 15                	mov    bl,0x15
c002398c:	a8 20                	test   al,0x20
c002398e:	74 02                	je     c0023992 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0023990:	b3 03                	mov    bl,0x3
c0023992:	a8 40                	test   al,0x40
c0023994:	74 02                	je     c0023998 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0023996:	b3 16                	mov    bl,0x16
c0023998:	84 c0                	test   al,al
c002399a:	79 16                	jns    c00239b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002399c:	b3 0d                	mov    bl,0xd
c002399e:	eb 12                	jmp    c00239b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239a0:	3c 03                	cmp    al,0x3
c00239a2:	74 0c                	je     c00239b0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c00239a4:	3c 04                	cmp    al,0x4
c00239a6:	75 0a                	jne    c00239b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239a8:	b3 08                	mov    bl,0x8
c00239aa:	eb 06                	jmp    c00239b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239ac:	b3 13                	mov    bl,0x13
c00239ae:	eb 02                	jmp    c00239b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239b0:	b3 17                	mov    bl,0x17
c00239b2:	83 c4 1c             	add    esp,0x1c
c00239b5:	88 d8                	mov    al,bl
c00239b7:	5b                   	pop    ebx
c00239b8:	5e                   	pop    esi
c00239b9:	5f                   	pop    edi
c00239ba:	5d                   	pop    ebp
c00239bb:	c3                   	ret    

c00239bc <IDE::polling(unsigned char, unsigned int)>:
c00239bc:	57                   	push   edi
c00239bd:	56                   	push   esi
c00239be:	53                   	push   ebx
c00239bf:	bb 04 00 00 00       	mov    ebx,0x4
c00239c4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00239c8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00239cd:	52                   	push   edx
c00239ce:	6a 0c                	push   0xc
c00239d0:	56                   	push   esi
c00239d1:	57                   	push   edi
c00239d2:	e8 03 f6 ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c00239d7:	83 c4 10             	add    esp,0x10
c00239da:	4b                   	dec    ebx
c00239db:	75 f0                	jne    c00239cd <IDE::polling(unsigned char, unsigned int)+0x11>
c00239dd:	bb a0 86 01 00       	mov    ebx,0x186a0
c00239e2:	50                   	push   eax
c00239e3:	6a 0c                	push   0xc
c00239e5:	56                   	push   esi
c00239e6:	57                   	push   edi
c00239e7:	e8 ee f5 ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c00239ec:	83 c4 10             	add    esp,0x10
c00239ef:	a8 01                	test   al,0x1
c00239f1:	75 17                	jne    c0023a0a <IDE::polling(unsigned char, unsigned int)+0x4e>
c00239f3:	a8 20                	test   al,0x20
c00239f5:	75 0f                	jne    c0023a06 <IDE::polling(unsigned char, unsigned int)+0x4a>
c00239f7:	4b                   	dec    ebx
c00239f8:	74 10                	je     c0023a0a <IDE::polling(unsigned char, unsigned int)+0x4e>
c00239fa:	84 c0                	test   al,al
c00239fc:	78 e4                	js     c00239e2 <IDE::polling(unsigned char, unsigned int)+0x26>
c00239fe:	a8 08                	test   al,0x8
c0023a00:	74 e0                	je     c00239e2 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023a02:	31 c0                	xor    eax,eax
c0023a04:	eb 06                	jmp    c0023a0c <IDE::polling(unsigned char, unsigned int)+0x50>
c0023a06:	b0 01                	mov    al,0x1
c0023a08:	eb 02                	jmp    c0023a0c <IDE::polling(unsigned char, unsigned int)+0x50>
c0023a0a:	b0 02                	mov    al,0x2
c0023a0c:	5b                   	pop    ebx
c0023a0d:	5e                   	pop    esi
c0023a0e:	5f                   	pop    edi
c0023a0f:	c3                   	ret    

c0023a10 <SATABus::close(int, int, void*)>:
c0023a10:	31 c0                	xor    eax,eax
c0023a12:	c3                   	ret    
c0023a13:	90                   	nop

c0023a14 <SATABus::detect()>:
c0023a14:	c3                   	ret    
c0023a15:	90                   	nop

c0023a16 <SATABus::SATABus()>:
c0023a16:	83 ec 0c             	sub    esp,0xc
c0023a19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a1d:	83 ec 08             	sub    esp,0x8
c0023a20:	68 fc c0 02 c0       	push   0xc002c0fc
c0023a25:	50                   	push   eax
c0023a26:	e8 83 04 ff ff       	call   c0013eae <HardDiskController::HardDiskController(char const*)>
c0023a2b:	83 c4 10             	add    esp,0x10
c0023a2e:	ba 50 c1 02 c0       	mov    edx,0xc002c150
c0023a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a37:	89 10                	mov    DWORD PTR [eax],edx
c0023a39:	83 ec 0c             	sub    esp,0xc
c0023a3c:	6a 50                	push   0x50
c0023a3e:	e8 21 c0 fe ff       	call   c000fa64 <Phys::allocateContiguousPages(int)>
c0023a43:	83 c4 10             	add    esp,0x10
c0023a46:	89 c2                	mov    edx,eax
c0023a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a4c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023a52:	83 ec 0c             	sub    esp,0xc
c0023a55:	6a 50                	push   0x50
c0023a57:	e8 bf d7 fe ff       	call   c001121b <Virt::allocateKernelVirtualPages(int)>
c0023a5c:	83 c4 10             	add    esp,0x10
c0023a5f:	89 c2                	mov    edx,eax
c0023a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a65:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023a6b:	a1 70 da 02 c0       	mov    eax,ds:0xc002da70
c0023a70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023a74:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023a7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023a7e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023a84:	83 ec 0c             	sub    esp,0xc
c0023a87:	6a 03                	push   0x3
c0023a89:	6a 50                	push   0x50
c0023a8b:	51                   	push   ecx
c0023a8c:	52                   	push   edx
c0023a8d:	50                   	push   eax
c0023a8e:	e8 3b e2 fe ff       	call   c0011cce <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023a93:	83 c4 20             	add    esp,0x20
c0023a96:	90                   	nop
c0023a97:	83 c4 0c             	add    esp,0xc
c0023a9a:	c3                   	ret    
c0023a9b:	90                   	nop

c0023a9c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023a9c:	83 ec 0c             	sub    esp,0xc
c0023a9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023aa3:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023aa6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023aa9:	09 c2                	or     edx,eax
c0023aab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023aaf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023ab5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023ab7:	31 c0                	xor    eax,eax
c0023ab9:	c1 e9 08             	shr    ecx,0x8
c0023abc:	83 e1 0f             	and    ecx,0xf
c0023abf:	39 c8                	cmp    eax,ecx
c0023ac1:	74 0a                	je     c0023acd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023ac3:	f6 c2 01             	test   dl,0x1
c0023ac6:	74 18                	je     c0023ae0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023ac8:	d1 ea                	shr    edx,1
c0023aca:	40                   	inc    eax
c0023acb:	eb f2                	jmp    c0023abf <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023acd:	83 ec 0c             	sub    esp,0xc
c0023ad0:	68 20 c1 02 c0       	push   0xc002c120
c0023ad5:	e8 59 63 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c0023ada:	83 c4 10             	add    esp,0x10
c0023add:	83 c8 ff             	or     eax,0xffffffff
c0023ae0:	83 c4 0c             	add    esp,0xc
c0023ae3:	c3                   	ret    

c0023ae4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023ae4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023ae8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023aeb:	89 c2                	mov    edx,eax
c0023aed:	c1 ea 08             	shr    edx,0x8
c0023af0:	83 e2 0f             	and    edx,0xf
c0023af3:	fe ca                	dec    dl
c0023af5:	75 31                	jne    c0023b28 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023af7:	83 e0 0f             	and    eax,0xf
c0023afa:	3c 03                	cmp    al,0x3
c0023afc:	75 2a                	jne    c0023b28 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023afe:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023b01:	b8 02 00 00 00       	mov    eax,0x2
c0023b06:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023b0c:	74 1c                	je     c0023b2a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023b0e:	b8 04 00 00 00       	mov    eax,0x4
c0023b13:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023b19:	74 0f                	je     c0023b2a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023b1b:	31 c0                	xor    eax,eax
c0023b1d:	83 fa 03             	cmp    edx,0x3
c0023b20:	0f 94 c0             	sete   al
c0023b23:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023b27:	c3                   	ret    
c0023b28:	31 c0                	xor    eax,eax
c0023b2a:	c3                   	ret    
c0023b2b:	90                   	nop

c0023b2c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023b2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023b30:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b33:	0f ba e2 0f          	bt     edx,0xf
c0023b37:	72 f7                	jb     c0023b30 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023b39:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b3c:	83 ca 10             	or     edx,0x10
c0023b3f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b42:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b45:	83 ca 01             	or     edx,0x1
c0023b48:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b4b:	c3                   	ret    

c0023b4c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023b4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023b50:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b53:	83 e2 fe             	and    edx,0xfffffffe
c0023b56:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b59:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b5c:	83 e2 ef             	and    edx,0xffffffef
c0023b5f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b62:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b65:	0f ba e2 0e          	bt     edx,0xe
c0023b69:	72 f7                	jb     c0023b62 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023b6b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b6e:	0f ba e2 0f          	bt     edx,0xf
c0023b72:	72 ee                	jb     c0023b62 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023b74:	c3                   	ret    
c0023b75:	90                   	nop

c0023b76 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023b76:	55                   	push   ebp
c0023b77:	57                   	push   edi
c0023b78:	56                   	push   esi
c0023b79:	53                   	push   ebx
c0023b7a:	83 ec 1c             	sub    esp,0x1c
c0023b7d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023b81:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023b85:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023b89:	53                   	push   ebx
c0023b8a:	89 fd                	mov    ebp,edi
c0023b8c:	56                   	push   esi
c0023b8d:	c1 e5 0a             	shl    ebp,0xa
c0023b90:	e8 b7 ff ff ff       	call   c0023b4c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023b95:	83 ec 0c             	sub    esp,0xc
c0023b98:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023b9e:	01 e8                	add    eax,ebp
c0023ba0:	89 03                	mov    DWORD PTR [ebx],eax
c0023ba2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023ba4:	68 00 04 00 00       	push   0x400
c0023ba9:	6a 00                	push   0x0
c0023bab:	50                   	push   eax
c0023bac:	e8 9f cb fd ff       	call   c0000750 <memset>
c0023bb1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023bb7:	89 fa                	mov    edx,edi
c0023bb9:	01 e8                	add    eax,ebp
c0023bbb:	c1 e7 0d             	shl    edi,0xd
c0023bbe:	89 03                	mov    DWORD PTR [ebx],eax
c0023bc0:	c1 e2 08             	shl    edx,0x8
c0023bc3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023bca:	81 c2 00 80 00 00    	add    edx,0x8000
c0023bd0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023bd4:	89 d0                	mov    eax,edx
c0023bd6:	83 c4 1c             	add    esp,0x1c
c0023bd9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023bdf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023be2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023be5:	68 00 01 00 00       	push   0x100
c0023bea:	6a 00                	push   0x0
c0023bec:	50                   	push   eax
c0023bed:	e8 5e cb fd ff       	call   c0000750 <memset>
c0023bf2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023bf6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023bfc:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023c02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023c06:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023c09:	83 c4 10             	add    esp,0x10
c0023c0c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023c13:	31 ff                	xor    edi,edi
c0023c15:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023c1b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023c21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023c25:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023c2b:	83 c5 20             	add    ebp,0x20
c0023c2e:	01 f8                	add    eax,edi
c0023c30:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023c33:	52                   	push   edx
c0023c34:	68 00 01 00 00       	push   0x100
c0023c39:	6a 00                	push   0x0
c0023c3b:	50                   	push   eax
c0023c3c:	e8 0f cb fd ff       	call   c0000750 <memset>
c0023c41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023c45:	83 c4 10             	add    esp,0x10
c0023c48:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023c4e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023c55:	01 f8                	add    eax,edi
c0023c57:	81 c7 00 01 00 00    	add    edi,0x100
c0023c5d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023c60:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023c66:	75 b3                	jne    c0023c1b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023c68:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023c6c:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023c70:	83 c4 1c             	add    esp,0x1c
c0023c73:	5b                   	pop    ebx
c0023c74:	5e                   	pop    esi
c0023c75:	5f                   	pop    edi
c0023c76:	5d                   	pop    ebp
c0023c77:	e9 b0 fe ff ff       	jmp    c0023b2c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023c7c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023c7c:	55                   	push   ebp
c0023c7d:	57                   	push   edi
c0023c7e:	56                   	push   esi
c0023c7f:	53                   	push   ebx
c0023c80:	31 db                	xor    ebx,ebx
c0023c82:	83 ec 0c             	sub    esp,0xc
c0023c85:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023c89:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023c8d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023c90:	f7 c7 01 00 00 00    	test   edi,0x1
c0023c96:	74 7a                	je     c0023d12 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023c98:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023c9c:	89 d8                	mov    eax,ebx
c0023c9e:	c1 e0 07             	shl    eax,0x7
c0023ca1:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023ca8:	55                   	push   ebp
c0023ca9:	56                   	push   esi
c0023caa:	e8 35 fe ff ff       	call   c0023ae4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023caf:	5a                   	pop    edx
c0023cb0:	83 f8 01             	cmp    eax,0x1
c0023cb3:	59                   	pop    ecx
c0023cb4:	75 21                	jne    c0023cd7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023cb6:	50                   	push   eax
c0023cb7:	53                   	push   ebx
c0023cb8:	55                   	push   ebp
c0023cb9:	56                   	push   esi
c0023cba:	e8 b7 fe ff ff       	call   c0023b76 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023cbf:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023cc6:	e8 ce b8 fe ff       	call   c000f599 <malloc>
c0023ccb:	89 c5                	mov    ebp,eax
c0023ccd:	89 04 24             	mov    DWORD PTR [esp],eax
c0023cd0:	e8 03 0d 00 00       	call   c00249d8 <SATA::SATA()>
c0023cd5:	eb 24                	jmp    c0023cfb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023cd7:	83 f8 04             	cmp    eax,0x4
c0023cda:	75 36                	jne    c0023d12 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023cdc:	51                   	push   ecx
c0023cdd:	53                   	push   ebx
c0023cde:	55                   	push   ebp
c0023cdf:	56                   	push   esi
c0023ce0:	e8 91 fe ff ff       	call   c0023b76 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ce5:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023cec:	e8 a8 b8 fe ff       	call   c000f599 <malloc>
c0023cf1:	89 c5                	mov    ebp,eax
c0023cf3:	89 04 24             	mov    DWORD PTR [esp],eax
c0023cf6:	e8 53 10 00 00       	call   c0024d4e <SATAPI::SATAPI()>
c0023cfb:	58                   	pop    eax
c0023cfc:	5a                   	pop    edx
c0023cfd:	55                   	push   ebp
c0023cfe:	56                   	push   esi
c0023cff:	e8 fc fd fe ff       	call   c0013b00 <Device::addChild(Device*)>
c0023d04:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023d07:	56                   	push   esi
c0023d08:	6a 00                	push   0x0
c0023d0a:	53                   	push   ebx
c0023d0b:	55                   	push   ebp
c0023d0c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023d0f:	83 c4 20             	add    esp,0x20
c0023d12:	d1 ef                	shr    edi,1
c0023d14:	43                   	inc    ebx
c0023d15:	83 fb 20             	cmp    ebx,0x20
c0023d18:	0f 85 72 ff ff ff    	jne    c0023c90 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023d1e:	83 c4 0c             	add    esp,0xc
c0023d21:	5b                   	pop    ebx
c0023d22:	5e                   	pop    esi
c0023d23:	5f                   	pop    edi
c0023d24:	5d                   	pop    ebp
c0023d25:	c3                   	ret    

c0023d26 <SATABus::open(int, int, void*)>:
c0023d26:	83 ec 14             	sub    esp,0x14
c0023d29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023d2d:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023d33:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023d39:	52                   	push   edx
c0023d3a:	50                   	push   eax
c0023d3b:	e8 3c ff ff ff       	call   c0023c7c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023d40:	31 c0                	xor    eax,eax
c0023d42:	83 c4 1c             	add    esp,0x1c
c0023d45:	c3                   	ret    

c0023d46 <ATA::close(int, int, void*)>:
c0023d46:	83 ec 0c             	sub    esp,0xc
c0023d49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d4d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023d53:	85 c0                	test   eax,eax
c0023d55:	74 0c                	je     c0023d63 <ATA::close(int, int, void*)+0x1d>
c0023d57:	83 ec 0c             	sub    esp,0xc
c0023d5a:	8b 10                	mov    edx,DWORD PTR [eax]
c0023d5c:	50                   	push   eax
c0023d5d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023d60:	83 c4 10             	add    esp,0x10
c0023d63:	31 c0                	xor    eax,eax
c0023d65:	83 c4 0c             	add    esp,0xc
c0023d68:	c3                   	ret    
c0023d69:	90                   	nop

c0023d6a <ATA::powerSaving(PowerSavingLevel)>:
c0023d6a:	c3                   	ret    
c0023d6b:	90                   	nop

c0023d6c <ATA::ATA()>:
c0023d6c:	83 ec 0c             	sub    esp,0xc
c0023d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d73:	83 ec 04             	sub    esp,0x4
c0023d76:	68 00 02 00 00       	push   0x200
c0023d7b:	68 19 c2 02 c0       	push   0xc002c219
c0023d80:	50                   	push   eax
c0023d81:	e8 b0 01 ff ff       	call   c0013f36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023d86:	83 c4 10             	add    esp,0x10
c0023d89:	ba 9c c1 02 c0       	mov    edx,0xc002c19c
c0023d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d92:	89 10                	mov    DWORD PTR [eax],edx
c0023d94:	90                   	nop
c0023d95:	83 c4 0c             	add    esp,0xc
c0023d98:	c3                   	ret    
c0023d99:	90                   	nop

c0023d9a <ATA::flush(bool)>:
c0023d9a:	53                   	push   ebx
c0023d9b:	83 ec 08             	sub    esp,0x8
c0023d9e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023da3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023da7:	19 c0                	sbb    eax,eax
c0023da9:	83 e0 fd             	and    eax,0xfffffffd
c0023dac:	05 ea 00 00 00       	add    eax,0xea
c0023db1:	50                   	push   eax
c0023db2:	6a 07                	push   0x7
c0023db4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023dbb:	50                   	push   eax
c0023dbc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023dc2:	e8 53 f1 ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023dc7:	83 c4 0c             	add    esp,0xc
c0023dca:	6a 00                	push   0x0
c0023dcc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023dd3:	50                   	push   eax
c0023dd4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023dda:	e8 dd fb ff ff       	call   c00239bc <IDE::polling(unsigned char, unsigned int)>
c0023ddf:	83 c4 18             	add    esp,0x18
c0023de2:	5b                   	pop    ebx
c0023de3:	c3                   	ret    

c0023de4 <ATA::readyForCommand()>:
c0023de4:	56                   	push   esi
c0023de5:	53                   	push   ebx
c0023de6:	31 db                	xor    ebx,ebx
c0023de8:	50                   	push   eax
c0023de9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023ded:	50                   	push   eax
c0023dee:	6a 0c                	push   0xc
c0023df0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023df7:	50                   	push   eax
c0023df8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023dfe:	e8 d7 f1 ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c0023e03:	83 c4 10             	add    esp,0x10
c0023e06:	a8 88                	test   al,0x88
c0023e08:	74 23                	je     c0023e2d <ATA::readyForCommand()+0x49>
c0023e0a:	43                   	inc    ebx
c0023e0b:	83 fb 63             	cmp    ebx,0x63
c0023e0e:	7e dd                	jle    c0023ded <ATA::readyForCommand()+0x9>
c0023e10:	51                   	push   ecx
c0023e11:	51                   	push   ecx
c0023e12:	6a 00                	push   0x0
c0023e14:	68 40 42 0f 00       	push   0xf4240
c0023e19:	e8 79 9e ff ff       	call   c001dc97 <nanoSleep(unsigned long long)>
c0023e1e:	83 c4 10             	add    esp,0x10
c0023e21:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023e27:	75 c4                	jne    c0023ded <ATA::readyForCommand()+0x9>
c0023e29:	31 c0                	xor    eax,eax
c0023e2b:	eb 02                	jmp    c0023e2f <ATA::readyForCommand()+0x4b>
c0023e2d:	b0 01                	mov    al,0x1
c0023e2f:	5a                   	pop    edx
c0023e30:	5b                   	pop    ebx
c0023e31:	5e                   	pop    esi
c0023e32:	c3                   	ret    
c0023e33:	90                   	nop

c0023e34 <ATA::access(unsigned long long, int, void*, bool)>:
c0023e34:	55                   	push   ebp
c0023e35:	57                   	push   edi
c0023e36:	56                   	push   esi
c0023e37:	53                   	push   ebx
c0023e38:	83 ec 2c             	sub    esp,0x2c
c0023e3b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023e3f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023e43:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023e47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023e4b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023e4f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023e53:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023e57:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023e5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023e61:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023e67:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023e6b:	c1 e0 06             	shl    eax,0x6
c0023e6e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023e76:	74 5d                	je     c0023ed5 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023e78:	89 fa                	mov    edx,edi
c0023e7a:	89 f0                	mov    eax,esi
c0023e7c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023e80:	c1 ea 1c             	shr    edx,0x1c
c0023e83:	89 d1                	mov    ecx,edx
c0023e85:	09 c1                	or     ecx,eax
c0023e87:	74 25                	je     c0023eae <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023e89:	31 ed                	xor    ebp,ebp
c0023e8b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023e92:	89 fa                	mov    edx,edi
c0023e94:	89 f0                	mov    eax,esi
c0023e96:	0f ad d0             	shrd   eax,edx,cl
c0023e99:	d3 ea                	shr    edx,cl
c0023e9b:	f6 c1 20             	test   cl,0x20
c0023e9e:	74 02                	je     c0023ea2 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023ea0:	89 d0                	mov    eax,edx
c0023ea2:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023ea6:	45                   	inc    ebp
c0023ea7:	83 fd 06             	cmp    ebp,0x6
c0023eaa:	75 df                	jne    c0023e8b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023eac:	eb 76                	jmp    c0023f24 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023eae:	89 f0                	mov    eax,esi
c0023eb0:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023eb5:	89 fa                	mov    edx,edi
c0023eb7:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023ebe:	0f ac d0 10          	shrd   eax,edx,0x10
c0023ec2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023ec7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023ecb:	c1 ee 18             	shr    esi,0x18
c0023ece:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023ed3:	eb 56                	jmp    c0023f2b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023ed5:	6a 00                	push   0x0
c0023ed7:	6a 3f                	push   0x3f
c0023ed9:	57                   	push   edi
c0023eda:	56                   	push   esi
c0023edb:	e8 24 29 00 00       	call   c0026804 <__umoddi3>
c0023ee0:	83 c4 10             	add    esp,0x10
c0023ee3:	40                   	inc    eax
c0023ee4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023ee8:	6a 00                	push   0x0
c0023eea:	68 f0 03 00 00       	push   0x3f0
c0023eef:	57                   	push   edi
c0023ef0:	56                   	push   esi
c0023ef1:	e8 0e 28 00 00       	call   c0026704 <__udivdi3>
c0023ef6:	83 c4 10             	add    esp,0x10
c0023ef9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023efe:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023f05:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023f0a:	6a 00                	push   0x0
c0023f0c:	6a 3f                	push   0x3f
c0023f0e:	57                   	push   edi
c0023f0f:	56                   	push   esi
c0023f10:	e8 ef 27 00 00       	call   c0026704 <__udivdi3>
c0023f15:	83 c4 10             	add    esp,0x10
c0023f18:	89 c6                	mov    esi,eax
c0023f1a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023f1f:	83 e6 0f             	and    esi,0xf
c0023f22:	eb 07                	jmp    c0023f2b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023f24:	31 f6                	xor    esi,esi
c0023f26:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023f2b:	bf 01 00 00 00       	mov    edi,0x1
c0023f30:	50                   	push   eax
c0023f31:	6a 00                	push   0x0
c0023f33:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f3a:	50                   	push   eax
c0023f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023f3f:	e8 e2 f1 ff ff       	call   c0023126 <IDE::enableIRQs(unsigned char, bool)>
c0023f44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f47:	e8 98 fe ff ff       	call   c0023de4 <ATA::readyForCommand()>
c0023f4c:	83 c4 10             	add    esp,0x10
c0023f4f:	84 c0                	test   al,al
c0023f51:	0f 84 5a 02 00 00    	je     c00241b1 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023f57:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023f5d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023f63:	c1 e0 04             	shl    eax,0x4
c0023f66:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023f6d:	09 c6                	or     esi,eax
c0023f6f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023f74:	75 05                	jne    c0023f7b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023f76:	83 ce a0             	or     esi,0xffffffa0
c0023f79:	eb 03                	jmp    c0023f7e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023f7b:	83 ce e0             	or     esi,0xffffffe0
c0023f7e:	89 f0                	mov    eax,esi
c0023f80:	0f b6 f0             	movzx  esi,al
c0023f83:	56                   	push   esi
c0023f84:	6a 06                	push   0x6
c0023f86:	51                   	push   ecx
c0023f87:	52                   	push   edx
c0023f88:	e8 8d ef ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f8d:	83 c4 10             	add    esp,0x10
c0023f90:	6a 00                	push   0x0
c0023f92:	6a 01                	push   0x1
c0023f94:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f9b:	50                   	push   eax
c0023f9c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fa2:	e8 73 ef ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fa7:	83 c4 10             	add    esp,0x10
c0023faa:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023faf:	75 6e                	jne    c002401f <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023fb1:	6a 00                	push   0x0
c0023fb3:	6a 08                	push   0x8
c0023fb5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fbc:	50                   	push   eax
c0023fbd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fc3:	e8 52 ef ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fc8:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023fcd:	50                   	push   eax
c0023fce:	6a 09                	push   0x9
c0023fd0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fd7:	50                   	push   eax
c0023fd8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fde:	e8 37 ef ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fe3:	83 c4 20             	add    esp,0x20
c0023fe6:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023feb:	50                   	push   eax
c0023fec:	6a 0a                	push   0xa
c0023fee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ff5:	50                   	push   eax
c0023ff6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ffc:	e8 19 ef ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024001:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024006:	50                   	push   eax
c0024007:	6a 0b                	push   0xb
c0024009:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024010:	50                   	push   eax
c0024011:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024017:	e8 fe ee ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002401c:	83 c4 20             	add    esp,0x20
c002401f:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024024:	50                   	push   eax
c0024025:	6a 02                	push   0x2
c0024027:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002402e:	50                   	push   eax
c002402f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024035:	e8 e0 ee ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002403a:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002403f:	50                   	push   eax
c0024040:	6a 03                	push   0x3
c0024042:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024049:	50                   	push   eax
c002404a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024050:	e8 c5 ee ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024055:	83 c4 20             	add    esp,0x20
c0024058:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002405d:	50                   	push   eax
c002405e:	6a 04                	push   0x4
c0024060:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024067:	50                   	push   eax
c0024068:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002406e:	e8 a7 ee ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024073:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024078:	50                   	push   eax
c0024079:	6a 05                	push   0x5
c002407b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024082:	50                   	push   eax
c0024083:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024089:	e8 8c ee ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002408e:	83 c4 20             	add    esp,0x20
c0024091:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024096:	0f 94 c0             	sete   al
c0024099:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002409e:	74 09                	je     c00240a9 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00240a0:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00240a7:	eb 07                	jmp    c00240b0 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00240a9:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00240b0:	0f b6 c0             	movzx  eax,al
c00240b3:	50                   	push   eax
c00240b4:	6a 07                	push   0x7
c00240b6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240bd:	50                   	push   eax
c00240be:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240c4:	e8 51 ee ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240c9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00240cd:	83 c4 10             	add    esp,0x10
c00240d0:	85 f6                	test   esi,esi
c00240d2:	0f 84 ba 00 00 00    	je     c0024192 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00240d8:	50                   	push   eax
c00240d9:	6a 01                	push   0x1
c00240db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240e2:	50                   	push   eax
c00240e3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240e9:	e8 ce f8 ff ff       	call   c00239bc <IDE::polling(unsigned char, unsigned int)>
c00240ee:	83 c4 10             	add    esp,0x10
c00240f1:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00240f7:	84 c0                	test   al,al
c00240f9:	74 2c                	je     c0024127 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00240fb:	0f b6 f8             	movzx  edi,al
c00240fe:	0f b6 d2             	movzx  edx,dl
c0024101:	57                   	push   edi
c0024102:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024109:	50                   	push   eax
c002410a:	52                   	push   edx
c002410b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024111:	e8 f6 f7 ff ff       	call   c002390c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024116:	c7 04 24 74 c1 02 c0 	mov    DWORD PTR [esp],0xc002c174
c002411d:	e8 a5 e5 fe ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0024122:	e9 87 00 00 00       	jmp    c00241ae <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024127:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002412c:	74 33                	je     c0024161 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c002412e:	31 ed                	xor    ebp,ebp
c0024130:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024134:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024138:	50                   	push   eax
c0024139:	50                   	push   eax
c002413a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024141:	50                   	push   eax
c0024142:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024148:	e8 bb ed ff ff       	call   c0022f08 <IDE::getBase(unsigned char)>
c002414d:	89 c2                	mov    edx,eax
c002414f:	89 f8                	mov    eax,edi
c0024151:	66 ef                	out    dx,ax
c0024153:	45                   	inc    ebp
c0024154:	83 c4 10             	add    esp,0x10
c0024157:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002415d:	75 d1                	jne    c0024130 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002415f:	eb 23                	jmp    c0024184 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024161:	0f b6 d2             	movzx  edx,dl
c0024164:	51                   	push   ecx
c0024165:	51                   	push   ecx
c0024166:	52                   	push   edx
c0024167:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002416d:	e8 96 ed ff ff       	call   c0022f08 <IDE::getBase(unsigned char)>
c0024172:	b9 00 01 00 00       	mov    ecx,0x100
c0024177:	89 c2                	mov    edx,eax
c0024179:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002417d:	fc                   	cld    
c002417e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024181:	83 c4 10             	add    esp,0x10
c0024184:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002418c:	4e                   	dec    esi
c002418d:	e9 3e ff ff ff       	jmp    c00240d0 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024192:	31 ff                	xor    edi,edi
c0024194:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024199:	74 16                	je     c00241b1 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002419b:	50                   	push   eax
c002419c:	50                   	push   eax
c002419d:	31 c0                	xor    eax,eax
c002419f:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00241a4:	0f 94 c0             	sete   al
c00241a7:	50                   	push   eax
c00241a8:	53                   	push   ebx
c00241a9:	e8 ec fb ff ff       	call   c0023d9a <ATA::flush(bool)>
c00241ae:	83 c4 10             	add    esp,0x10
c00241b1:	83 c4 2c             	add    esp,0x2c
c00241b4:	89 f8                	mov    eax,edi
c00241b6:	5b                   	pop    ebx
c00241b7:	5e                   	pop    esi
c00241b8:	5f                   	pop    edi
c00241b9:	5d                   	pop    ebp
c00241ba:	c3                   	ret    
c00241bb:	90                   	nop

c00241bc <ATA::read(unsigned long long, int, void*)>:
c00241bc:	57                   	push   edi
c00241bd:	b8 04 00 00 00       	mov    eax,0x4
c00241c2:	56                   	push   esi
c00241c3:	53                   	push   ebx
c00241c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00241c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00241cc:	8d 7a ff             	lea    edi,[edx-0x1]
c00241cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00241d3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00241d7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00241dd:	77 25                	ja     c0024204 <ATA::read(unsigned long long, int, void*)+0x48>
c00241df:	b8 06 00 00 00       	mov    eax,0x6
c00241e4:	85 f6                	test   esi,esi
c00241e6:	74 1c                	je     c0024204 <ATA::read(unsigned long long, int, void*)+0x48>
c00241e8:	50                   	push   eax
c00241e9:	50                   	push   eax
c00241ea:	6a 00                	push   0x0
c00241ec:	56                   	push   esi
c00241ed:	52                   	push   edx
c00241ee:	53                   	push   ebx
c00241ef:	51                   	push   ecx
c00241f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00241f4:	e8 3b fc ff ff       	call   c0023e34 <ATA::access(unsigned long long, int, void*, bool)>
c00241f9:	83 c4 20             	add    esp,0x20
c00241fc:	85 c0                	test   eax,eax
c00241fe:	0f 95 c0             	setne  al
c0024201:	0f b6 c0             	movzx  eax,al
c0024204:	5b                   	pop    ebx
c0024205:	5e                   	pop    esi
c0024206:	5f                   	pop    edi
c0024207:	c3                   	ret    

c0024208 <ATA::write(unsigned long long, int, void*)>:
c0024208:	57                   	push   edi
c0024209:	b8 04 00 00 00       	mov    eax,0x4
c002420e:	56                   	push   esi
c002420f:	53                   	push   ebx
c0024210:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024214:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024218:	8d 7a ff             	lea    edi,[edx-0x1]
c002421b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002421f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024223:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024229:	77 25                	ja     c0024250 <ATA::write(unsigned long long, int, void*)+0x48>
c002422b:	b8 06 00 00 00       	mov    eax,0x6
c0024230:	85 f6                	test   esi,esi
c0024232:	74 1c                	je     c0024250 <ATA::write(unsigned long long, int, void*)+0x48>
c0024234:	50                   	push   eax
c0024235:	50                   	push   eax
c0024236:	6a 01                	push   0x1
c0024238:	56                   	push   esi
c0024239:	52                   	push   edx
c002423a:	53                   	push   ebx
c002423b:	51                   	push   ecx
c002423c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024240:	e8 ef fb ff ff       	call   c0023e34 <ATA::access(unsigned long long, int, void*, bool)>
c0024245:	83 c4 20             	add    esp,0x20
c0024248:	85 c0                	test   eax,eax
c002424a:	0f 95 c0             	setne  al
c002424d:	0f b6 c0             	movzx  eax,al
c0024250:	5b                   	pop    ebx
c0024251:	5e                   	pop    esi
c0024252:	5f                   	pop    edi
c0024253:	c3                   	ret    

c0024254 <ATA::detectCHS()>:
c0024254:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024258:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002425e:	c1 e0 06             	shl    eax,0x6
c0024261:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024267:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024271:	c7 44 24 04 7f c1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c17f
c0024279:	e9 b5 5b ff ff       	jmp    c0019e33 <Krnl::panic(char const*)>

c002427e <ATA::open(int, int, void*)>:
c002427e:	53                   	push   ebx
c002427f:	83 ec 08             	sub    esp,0x8
c0024282:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024286:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002428a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002428e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024294:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002429a:	c1 e0 06             	shl    eax,0x6
c002429d:	01 d0                	add    eax,edx
c002429f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00242a6:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00242ac:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00242b3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00242bd:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00242c3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00242ca:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00242d1:	75 0c                	jne    c00242df <ATA::open(int, int, void*)+0x61>
c00242d3:	83 ec 0c             	sub    esp,0xc
c00242d6:	53                   	push   ebx
c00242d7:	e8 78 ff ff ff       	call   c0024254 <ATA::detectCHS()>
c00242dc:	83 c4 10             	add    esp,0x10
c00242df:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00242e5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00242eb:	c1 e0 06             	shl    eax,0x6
c00242ee:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00242f5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00242ff:	d1 e8                	shr    eax,1
c0024301:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024307:	6a 04                	push   0x4
c0024309:	6a 0c                	push   0xc
c002430b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024312:	50                   	push   eax
c0024313:	52                   	push   edx
c0024314:	e8 01 ec ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024319:	90                   	nop
c002431a:	90                   	nop
c002431b:	6a 00                	push   0x0
c002431d:	6a 0c                	push   0xc
c002431f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024326:	50                   	push   eax
c0024327:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002432d:	e8 e8 eb ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024332:	83 c4 14             	add    esp,0x14
c0024335:	53                   	push   ebx
c0024336:	e8 63 fc fe ff       	call   c0013f9e <PhysicalDisk::startCache()>
c002433b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002433e:	e8 dd 1e ff ff       	call   c0016220 <createPartitionsForDisk(PhysicalDisk*)>
c0024343:	31 c0                	xor    eax,eax
c0024345:	83 c4 18             	add    esp,0x18
c0024348:	5b                   	pop    ebx
c0024349:	c3                   	ret    

c002434a <ATAPI::write(unsigned long long, int, void*)>:
c002434a:	b8 03 00 00 00       	mov    eax,0x3
c002434f:	c3                   	ret    

c0024350 <ATAPI::close(int, int, void*)>:
c0024350:	83 ec 0c             	sub    esp,0xc
c0024353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024357:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002435d:	85 c0                	test   eax,eax
c002435f:	74 0c                	je     c002436d <ATAPI::close(int, int, void*)+0x1d>
c0024361:	83 ec 0c             	sub    esp,0xc
c0024364:	8b 10                	mov    edx,DWORD PTR [eax]
c0024366:	50                   	push   eax
c0024367:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002436a:	83 c4 10             	add    esp,0x10
c002436d:	31 c0                	xor    eax,eax
c002436f:	83 c4 0c             	add    esp,0xc
c0024372:	c3                   	ret    
c0024373:	90                   	nop

c0024374 <ATAPI::ATAPI()>:
c0024374:	83 ec 0c             	sub    esp,0xc
c0024377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002437b:	83 ec 04             	sub    esp,0x4
c002437e:	68 00 08 00 00       	push   0x800
c0024383:	68 b9 c2 02 c0       	push   0xc002c2b9
c0024388:	50                   	push   eax
c0024389:	e8 a8 fb fe ff       	call   c0013f36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002438e:	83 c4 10             	add    esp,0x10
c0024391:	ba d4 c1 02 c0       	mov    edx,0xc002c1d4
c0024396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002439a:	89 10                	mov    DWORD PTR [eax],edx
c002439c:	90                   	nop
c002439d:	83 c4 0c             	add    esp,0xc
c00243a0:	c3                   	ret    
c00243a1:	90                   	nop

c00243a2 <ATAPI::readyForCommand()>:
c00243a2:	56                   	push   esi
c00243a3:	53                   	push   ebx
c00243a4:	31 db                	xor    ebx,ebx
c00243a6:	50                   	push   eax
c00243a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00243ab:	50                   	push   eax
c00243ac:	6a 0c                	push   0xc
c00243ae:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00243b5:	50                   	push   eax
c00243b6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00243bc:	e8 19 ec ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c00243c1:	83 c4 10             	add    esp,0x10
c00243c4:	a8 88                	test   al,0x88
c00243c6:	74 23                	je     c00243eb <ATAPI::readyForCommand()+0x49>
c00243c8:	43                   	inc    ebx
c00243c9:	83 fb 63             	cmp    ebx,0x63
c00243cc:	7e dd                	jle    c00243ab <ATAPI::readyForCommand()+0x9>
c00243ce:	51                   	push   ecx
c00243cf:	51                   	push   ecx
c00243d0:	6a 00                	push   0x0
c00243d2:	68 40 42 0f 00       	push   0xf4240
c00243d7:	e8 bb 98 ff ff       	call   c001dc97 <nanoSleep(unsigned long long)>
c00243dc:	83 c4 10             	add    esp,0x10
c00243df:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00243e5:	75 c4                	jne    c00243ab <ATAPI::readyForCommand()+0x9>
c00243e7:	31 c0                	xor    eax,eax
c00243e9:	eb 02                	jmp    c00243ed <ATAPI::readyForCommand()+0x4b>
c00243eb:	b0 01                	mov    al,0x1
c00243ed:	5a                   	pop    edx
c00243ee:	5b                   	pop    ebx
c00243ef:	5e                   	pop    esi
c00243f0:	c3                   	ret    
c00243f1:	90                   	nop

c00243f2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00243f2:	55                   	push   ebp
c00243f3:	57                   	push   edi
c00243f4:	56                   	push   esi
c00243f5:	53                   	push   ebx
c00243f6:	83 ec 20             	sub    esp,0x20
c00243f9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00243fd:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024401:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024405:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024409:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002440d:	6a 01                	push   0x1
c002440f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024416:	50                   	push   eax
c0024417:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002441d:	e8 04 ed ff ff       	call   c0023126 <IDE::enableIRQs(unsigned char, bool)>
c0024422:	5e                   	pop    esi
c0024423:	58                   	pop    eax
c0024424:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002442b:	50                   	push   eax
c002442c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024432:	e8 bd ea ff ff       	call   c0022ef4 <IDE::prepareInterrupt(unsigned char)>
c0024437:	89 3c 24             	mov    DWORD PTR [esp],edi
c002443a:	e8 63 ff ff ff       	call   c00243a2 <ATAPI::readyForCommand()>
c002443f:	83 c4 10             	add    esp,0x10
c0024442:	84 c0                	test   al,al
c0024444:	75 0a                	jne    c0024450 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024446:	bb 01 00 00 00       	mov    ebx,0x1
c002444b:	e9 57 02 00 00       	jmp    c00246a7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024450:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024456:	c1 e0 04             	shl    eax,0x4
c0024459:	0f b6 c0             	movzx  eax,al
c002445c:	50                   	push   eax
c002445d:	6a 06                	push   0x6
c002445f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024466:	50                   	push   eax
c0024467:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002446d:	e8 a8 ea ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024472:	6a 00                	push   0x0
c0024474:	6a 01                	push   0x1
c0024476:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002447d:	50                   	push   eax
c002447e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024484:	e8 91 ea ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024489:	83 c4 20             	add    esp,0x20
c002448c:	0f b6 c3             	movzx  eax,bl
c002448f:	0f b6 df             	movzx  ebx,bh
c0024492:	50                   	push   eax
c0024493:	6a 04                	push   0x4
c0024495:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002449c:	50                   	push   eax
c002449d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244a3:	e8 72 ea ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244a8:	53                   	push   ebx
c00244a9:	6a 05                	push   0x5
c00244ab:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244b2:	50                   	push   eax
c00244b3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244b9:	e8 5c ea ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244be:	83 c4 20             	add    esp,0x20
c00244c1:	68 a0 00 00 00       	push   0xa0
c00244c6:	6a 07                	push   0x7
c00244c8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244cf:	50                   	push   eax
c00244d0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244d6:	e8 3f ea ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244db:	83 c4 0c             	add    esp,0xc
c00244de:	6a 01                	push   0x1
c00244e0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244e7:	50                   	push   eax
c00244e8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244ee:	e8 c9 f4 ff ff       	call   c00239bc <IDE::polling(unsigned char, unsigned int)>
c00244f3:	83 c4 10             	add    esp,0x10
c00244f6:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00244fc:	84 c0                	test   al,al
c00244fe:	74 23                	je     c0024523 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024500:	0f b6 d8             	movzx  ebx,al
c0024503:	0f b6 d2             	movzx  edx,dl
c0024506:	53                   	push   ebx
c0024507:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002450e:	50                   	push   eax
c002450f:	52                   	push   edx
c0024510:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024516:	e8 f1 f3 ff ff       	call   c002390c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002451b:	83 c4 10             	add    esp,0x10
c002451e:	e9 84 01 00 00       	jmp    c00246a7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024523:	0f b6 d2             	movzx  edx,dl
c0024526:	53                   	push   ebx
c0024527:	53                   	push   ebx
c0024528:	52                   	push   edx
c0024529:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002452f:	e8 d4 e9 ff ff       	call   c0022f08 <IDE::getBase(unsigned char)>
c0024534:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024538:	b9 06 00 00 00       	mov    ecx,0x6
c002453d:	89 c2                	mov    edx,eax
c002453f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024542:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024546:	83 c4 10             	add    esp,0x10
c0024549:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002454f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024556:	85 db                	test   ebx,ebx
c0024558:	0f 84 ec 00 00 00    	je     c002464a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002455e:	51                   	push   ecx
c002455f:	51                   	push   ecx
c0024560:	52                   	push   edx
c0024561:	50                   	push   eax
c0024562:	e8 21 eb ff ff       	call   c0023088 <IDE::waitInterrupt(unsigned char)>
c0024567:	83 c4 10             	add    esp,0x10
c002456a:	84 c0                	test   al,al
c002456c:	0f 84 d4 fe ff ff    	je     c0024446 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024572:	56                   	push   esi
c0024573:	56                   	push   esi
c0024574:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002457b:	50                   	push   eax
c002457c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024582:	e8 6d e9 ff ff       	call   c0022ef4 <IDE::prepareInterrupt(unsigned char)>
c0024587:	83 c4 0c             	add    esp,0xc
c002458a:	6a 04                	push   0x4
c002458c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024593:	50                   	push   eax
c0024594:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002459a:	e8 3b ea ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c002459f:	83 c4 0c             	add    esp,0xc
c00245a2:	89 c6                	mov    esi,eax
c00245a4:	6a 05                	push   0x5
c00245a6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245ad:	50                   	push   eax
c00245ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245b4:	e8 21 ea ff ff       	call   c0022fda <IDE::read(unsigned char, unsigned char)>
c00245b9:	89 f1                	mov    ecx,esi
c00245bb:	0f b6 c0             	movzx  eax,al
c00245be:	0f b6 f1             	movzx  esi,cl
c00245c1:	c1 e0 08             	shl    eax,0x8
c00245c4:	09 c6                	or     esi,eax
c00245c6:	d1 fe                	sar    esi,1
c00245c8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00245cc:	83 c4 10             	add    esp,0x10
c00245cf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00245d4:	74 41                	je     c0024617 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00245d6:	31 c9                	xor    ecx,ecx
c00245d8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00245de:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00245e5:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00245e9:	75 0a                	jne    c00245f5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00245eb:	01 c9                	add    ecx,ecx
c00245ed:	01 cd                	add    ebp,ecx
c00245ef:	4b                   	dec    ebx
c00245f0:	e9 54 ff ff ff       	jmp    c0024549 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00245f5:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00245fa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00245fe:	51                   	push   ecx
c00245ff:	51                   	push   ecx
c0024600:	52                   	push   edx
c0024601:	50                   	push   eax
c0024602:	e8 01 e9 ff ff       	call   c0022f08 <IDE::getBase(unsigned char)>
c0024607:	89 c2                	mov    edx,eax
c0024609:	89 f0                	mov    eax,esi
c002460b:	66 ef                	out    dx,ax
c002460d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024611:	83 c4 10             	add    esp,0x10
c0024614:	41                   	inc    ecx
c0024615:	eb c1                	jmp    c00245d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024617:	31 f6                	xor    esi,esi
c0024619:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002461f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024626:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002462a:	75 06                	jne    c0024632 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002462c:	01 f6                	add    esi,esi
c002462e:	01 f5                	add    ebp,esi
c0024630:	eb bd                	jmp    c00245ef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024632:	51                   	push   ecx
c0024633:	51                   	push   ecx
c0024634:	52                   	push   edx
c0024635:	50                   	push   eax
c0024636:	e8 cd e8 ff ff       	call   c0022f08 <IDE::getBase(unsigned char)>
c002463b:	89 c2                	mov    edx,eax
c002463d:	66 ed                	in     ax,dx
c002463f:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024644:	83 c4 10             	add    esp,0x10
c0024647:	46                   	inc    esi
c0024648:	eb cf                	jmp    c0024619 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002464a:	51                   	push   ecx
c002464b:	51                   	push   ecx
c002464c:	52                   	push   edx
c002464d:	50                   	push   eax
c002464e:	e8 35 ea ff ff       	call   c0023088 <IDE::waitInterrupt(unsigned char)>
c0024653:	83 c4 10             	add    esp,0x10
c0024656:	84 c0                	test   al,al
c0024658:	0f 84 e8 fd ff ff    	je     c0024446 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002465e:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024663:	52                   	push   edx
c0024664:	52                   	push   edx
c0024665:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002466c:	50                   	push   eax
c002466d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024673:	e8 7c e8 ff ff       	call   c0022ef4 <IDE::prepareInterrupt(unsigned char)>
c0024678:	83 c4 10             	add    esp,0x10
c002467b:	50                   	push   eax
c002467c:	50                   	push   eax
c002467d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024684:	50                   	push   eax
c0024685:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002468b:	e8 78 e8 ff ff       	call   c0022f08 <IDE::getBase(unsigned char)>
c0024690:	8d 50 07             	lea    edx,[eax+0x7]
c0024693:	ec                   	in     al,dx
c0024694:	83 c4 10             	add    esp,0x10
c0024697:	a8 88                	test   al,0x88
c0024699:	74 0a                	je     c00246a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002469b:	4b                   	dec    ebx
c002469c:	75 dd                	jne    c002467b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002469e:	bb 02 00 00 00       	mov    ebx,0x2
c00246a3:	eb 02                	jmp    c00246a7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00246a5:	31 db                	xor    ebx,ebx
c00246a7:	83 c4 1c             	add    esp,0x1c
c00246aa:	89 d8                	mov    eax,ebx
c00246ac:	5b                   	pop    ebx
c00246ad:	5e                   	pop    esi
c00246ae:	5f                   	pop    edi
c00246af:	5d                   	pop    ebp
c00246b0:	c3                   	ret    
c00246b1:	90                   	nop

c00246b2 <ATAPI::diskRemoved()>:
c00246b2:	83 ec 18             	sub    esp,0x18
c00246b5:	68 c5 c2 02 c0       	push   0xc002c2c5
c00246ba:	e8 08 e0 fe ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c00246bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00246c3:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00246ca:	83 c4 1c             	add    esp,0x1c
c00246cd:	c3                   	ret    

c00246ce <ATAPI::eject()>:
c00246ce:	57                   	push   edi
c00246cf:	b9 03 00 00 00       	mov    ecx,0x3
c00246d4:	53                   	push   ebx
c00246d5:	83 ec 14             	sub    esp,0x14
c00246d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00246dc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00246e0:	fc                   	cld    
c00246e1:	31 c0                	xor    eax,eax
c00246e3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00246e5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00246ea:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00246ef:	50                   	push   eax
c00246f0:	50                   	push   eax
c00246f1:	6a 00                	push   0x0
c00246f3:	6a 00                	push   0x0
c00246f5:	6a 00                	push   0x0
c00246f7:	6a 02                	push   0x2
c00246f9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00246fd:	50                   	push   eax
c00246fe:	53                   	push   ebx
c00246ff:	e8 ee fc ff ff       	call   c00243f2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024704:	83 c4 14             	add    esp,0x14
c0024707:	53                   	push   ebx
c0024708:	e8 a5 ff ff ff       	call   c00246b2 <ATAPI::diskRemoved()>
c002470d:	83 c4 24             	add    esp,0x24
c0024710:	31 c0                	xor    eax,eax
c0024712:	5b                   	pop    ebx
c0024713:	5f                   	pop    edi
c0024714:	c3                   	ret    
c0024715:	90                   	nop

c0024716 <ATAPI::diskInserted()>:
c0024716:	53                   	push   ebx
c0024717:	83 ec 14             	sub    esp,0x14
c002471a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002471e:	68 dc c2 02 c0       	push   0xc002c2dc
c0024723:	e8 9f df fe ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0024728:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002472f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024732:	e8 67 f8 fe ff       	call   c0013f9e <PhysicalDisk::startCache()>
c0024737:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002473b:	83 c4 18             	add    esp,0x18
c002473e:	5b                   	pop    ebx
c002473f:	e9 dc 1a ff ff       	jmp    c0016220 <createPartitionsForDisk(PhysicalDisk*)>

c0024744 <ATAPI::detectMedia()>:
c0024744:	56                   	push   esi
c0024745:	53                   	push   ebx
c0024746:	83 ec 28             	sub    esp,0x28
c0024749:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002474d:	6a 0c                	push   0xc
c002474f:	6a 00                	push   0x0
c0024751:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024755:	56                   	push   esi
c0024756:	e8 f5 bf fd ff       	call   c0000750 <memset>
c002475b:	58                   	pop    eax
c002475c:	5a                   	pop    edx
c002475d:	6a 00                	push   0x0
c002475f:	6a 00                	push   0x0
c0024761:	6a 00                	push   0x0
c0024763:	6a 00                	push   0x0
c0024765:	56                   	push   esi
c0024766:	53                   	push   ebx
c0024767:	e8 86 fc ff ff       	call   c00243f2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002476c:	83 c4 1c             	add    esp,0x1c
c002476f:	6a 0c                	push   0xc
c0024771:	6a 00                	push   0x0
c0024773:	56                   	push   esi
c0024774:	e8 d7 bf fd ff       	call   c0000750 <memset>
c0024779:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002477e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024783:	59                   	pop    ecx
c0024784:	58                   	pop    eax
c0024785:	6a 01                	push   0x1
c0024787:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002478b:	50                   	push   eax
c002478c:	6a 00                	push   0x0
c002478e:	6a 12                	push   0x12
c0024790:	56                   	push   esi
c0024791:	53                   	push   ebx
c0024792:	e8 5b fc ff ff       	call   c00243f2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024797:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002479b:	83 c4 20             	add    esp,0x20
c002479e:	83 e0 7f             	and    eax,0x7f
c00247a1:	3c 70                	cmp    al,0x70
c00247a3:	74 15                	je     c00247ba <ATAPI::detectMedia()+0x76>
c00247a5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00247ac:	75 0c                	jne    c00247ba <ATAPI::detectMedia()+0x76>
c00247ae:	83 ec 0c             	sub    esp,0xc
c00247b1:	53                   	push   ebx
c00247b2:	e8 5f ff ff ff       	call   c0024716 <ATAPI::diskInserted()>
c00247b7:	83 c4 10             	add    esp,0x10
c00247ba:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00247be:	83 e0 0f             	and    eax,0xf
c00247c1:	3c 02                	cmp    al,0x2
c00247c3:	75 1b                	jne    c00247e0 <ATAPI::detectMedia()+0x9c>
c00247c5:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00247ca:	75 2d                	jne    c00247f9 <ATAPI::detectMedia()+0xb5>
c00247cc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00247d3:	74 24                	je     c00247f9 <ATAPI::detectMedia()+0xb5>
c00247d5:	83 ec 0c             	sub    esp,0xc
c00247d8:	53                   	push   ebx
c00247d9:	e8 d4 fe ff ff       	call   c00246b2 <ATAPI::diskRemoved()>
c00247de:	eb 16                	jmp    c00247f6 <ATAPI::detectMedia()+0xb2>
c00247e0:	84 c0                	test   al,al
c00247e2:	75 15                	jne    c00247f9 <ATAPI::detectMedia()+0xb5>
c00247e4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00247eb:	75 0c                	jne    c00247f9 <ATAPI::detectMedia()+0xb5>
c00247ed:	83 ec 0c             	sub    esp,0xc
c00247f0:	53                   	push   ebx
c00247f1:	e8 20 ff ff ff       	call   c0024716 <ATAPI::diskInserted()>
c00247f6:	83 c4 10             	add    esp,0x10
c00247f9:	83 c4 24             	add    esp,0x24
c00247fc:	5b                   	pop    ebx
c00247fd:	5e                   	pop    esi
c00247fe:	c3                   	ret    
c00247ff:	90                   	nop

c0024800 <ATAPI::open(int, int, void*)>:
c0024800:	53                   	push   ebx
c0024801:	83 ec 08             	sub    esp,0x8
c0024804:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024808:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002480c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024810:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024816:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002481c:	c1 e0 06             	shl    eax,0x6
c002481f:	01 d0                	add    eax,edx
c0024821:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024828:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002482e:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024835:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002483f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024845:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002484c:	6a 04                	push   0x4
c002484e:	6a 0c                	push   0xc
c0024850:	51                   	push   ecx
c0024851:	52                   	push   edx
c0024852:	e8 c3 e6 ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024857:	90                   	nop
c0024858:	90                   	nop
c0024859:	6a 00                	push   0x0
c002485b:	6a 0c                	push   0xc
c002485d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024864:	50                   	push   eax
c0024865:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002486b:	e8 aa e6 ff ff       	call   c0022f1a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024870:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024877:	83 c4 14             	add    esp,0x14
c002487a:	53                   	push   ebx
c002487b:	e8 c4 fe ff ff       	call   c0024744 <ATAPI::detectMedia()>
c0024880:	31 c0                	xor    eax,eax
c0024882:	83 c4 18             	add    esp,0x18
c0024885:	5b                   	pop    ebx
c0024886:	c3                   	ret    
c0024887:	90                   	nop

c0024888 <ATAPI::read(unsigned long long, int, void*)>:
c0024888:	55                   	push   ebp
c0024889:	57                   	push   edi
c002488a:	56                   	push   esi
c002488b:	53                   	push   ebx
c002488c:	83 ec 1c             	sub    esp,0x1c
c002488f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024893:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024897:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002489b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00248a2:	74 41                	je     c00248e5 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00248a4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00248a8:	b9 03 00 00 00       	mov    ecx,0x3
c00248ad:	fc                   	cld    
c00248ae:	31 c0                	xor    eax,eax
c00248b0:	86 fb                	xchg   bl,bh
c00248b2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00248b4:	c1 c3 10             	rol    ebx,0x10
c00248b7:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00248bc:	89 e8                	mov    eax,ebp
c00248be:	86 fb                	xchg   bl,bh
c00248c0:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00248c4:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00248c8:	50                   	push   eax
c00248c9:	50                   	push   eax
c00248ca:	55                   	push   ebp
c00248cb:	c1 e5 0b             	shl    ebp,0xb
c00248ce:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00248d2:	6a 00                	push   0x0
c00248d4:	55                   	push   ebp
c00248d5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00248d9:	50                   	push   eax
c00248da:	56                   	push   esi
c00248db:	e8 12 fb ff ff       	call   c00243f2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00248e0:	83 c4 20             	add    esp,0x20
c00248e3:	eb 1a                	jmp    c00248ff <ATAPI::read(unsigned long long, int, void*)+0x77>
c00248e5:	83 ec 0c             	sub    esp,0xc
c00248e8:	56                   	push   esi
c00248e9:	e8 56 fe ff ff       	call   c0024744 <ATAPI::detectMedia()>
c00248ee:	83 c4 10             	add    esp,0x10
c00248f1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00248f8:	75 aa                	jne    c00248a4 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00248fa:	b8 02 00 00 00       	mov    eax,0x2
c00248ff:	83 c4 1c             	add    esp,0x1c
c0024902:	5b                   	pop    ebx
c0024903:	5e                   	pop    esi
c0024904:	5f                   	pop    edi
c0024905:	5d                   	pop    ebp
c0024906:	c3                   	ret    
c0024907:	90                   	nop

c0024908 <SATA::close(int, int, void*)>:
c0024908:	83 ec 0c             	sub    esp,0xc
c002490b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002490f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024915:	85 c0                	test   eax,eax
c0024917:	74 0c                	je     c0024925 <SATA::close(int, int, void*)+0x1d>
c0024919:	83 ec 0c             	sub    esp,0xc
c002491c:	8b 10                	mov    edx,DWORD PTR [eax]
c002491e:	50                   	push   eax
c002491f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024922:	83 c4 10             	add    esp,0x10
c0024925:	31 c0                	xor    eax,eax
c0024927:	83 c4 0c             	add    esp,0xc
c002492a:	c3                   	ret    
c002492b:	90                   	nop

c002492c <SATA::powerSaving(PowerSavingLevel)>:
c002492c:	c3                   	ret    
c002492d:	90                   	nop

c002492e <SATA::open(int, int, void*)>:
c002492e:	56                   	push   esi
c002492f:	53                   	push   ebx
c0024930:	50                   	push   eax
c0024931:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024935:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024939:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024943:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024949:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024953:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024957:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024961:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024967:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002496e:	e8 fe af fe ff       	call   c000f971 <Phys::allocatePage()>
c0024973:	89 c6                	mov    esi,eax
c0024975:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002497b:	81 c6 00 10 00 00    	add    esi,0x1000
c0024981:	e8 eb af fe ff       	call   c000f971 <Phys::allocatePage()>
c0024986:	39 c6                	cmp    esi,eax
c0024988:	74 10                	je     c002499a <SATA::open(int, int, void*)+0x6c>
c002498a:	83 ec 0c             	sub    esp,0xc
c002498d:	68 04 c2 02 c0       	push   0xc002c204
c0024992:	e8 9c 54 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c0024997:	83 c4 10             	add    esp,0x10
c002499a:	83 ec 0c             	sub    esp,0xc
c002499d:	6a 02                	push   0x2
c002499f:	e8 77 c8 fe ff       	call   c001121b <Virt::allocateKernelVirtualPages(int)>
c00249a4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00249aa:	6a 03                	push   0x3
c00249ac:	50                   	push   eax
c00249ad:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00249b3:	ff 35 70 da 02 c0    	push   DWORD PTR ds:0xc002da70
c00249b9:	e8 1a d0 fe ff       	call   c00119d8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00249be:	83 c4 14             	add    esp,0x14
c00249c1:	53                   	push   ebx
c00249c2:	e8 d7 f5 fe ff       	call   c0013f9e <PhysicalDisk::startCache()>
c00249c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249ca:	e8 51 18 ff ff       	call   c0016220 <createPartitionsForDisk(PhysicalDisk*)>
c00249cf:	83 c4 14             	add    esp,0x14
c00249d2:	31 c0                	xor    eax,eax
c00249d4:	5b                   	pop    ebx
c00249d5:	5e                   	pop    esi
c00249d6:	c3                   	ret    
c00249d7:	90                   	nop

c00249d8 <SATA::SATA()>:
c00249d8:	83 ec 0c             	sub    esp,0xc
c00249db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249df:	83 ec 04             	sub    esp,0x4
c00249e2:	68 00 02 00 00       	push   0x200
c00249e7:	68 18 c2 02 c0       	push   0xc002c218
c00249ec:	50                   	push   eax
c00249ed:	e8 44 f5 fe ff       	call   c0013f36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00249f2:	83 c4 10             	add    esp,0x10
c00249f5:	ba 88 c2 02 c0       	mov    edx,0xc002c288
c00249fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249fe:	89 10                	mov    DWORD PTR [eax],edx
c0024a00:	90                   	nop
c0024a01:	83 c4 0c             	add    esp,0xc
c0024a04:	c3                   	ret    
c0024a05:	90                   	nop

c0024a06 <SATA::access(unsigned long long, int, void*, bool)>:
c0024a06:	55                   	push   ebp
c0024a07:	57                   	push   edi
c0024a08:	56                   	push   esi
c0024a09:	53                   	push   ebx
c0024a0a:	83 ec 2c             	sub    esp,0x2c
c0024a0d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024a11:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024a15:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024a19:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024a1d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024a21:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024a26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024a2a:	7e 10                	jle    c0024a3c <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024a2c:	83 ec 0c             	sub    esp,0xc
c0024a2f:	68 28 c2 02 c0       	push   0xc002c228
c0024a34:	e8 fa 53 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c0024a39:	83 c4 10             	add    esp,0x10
c0024a3c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024a42:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024a48:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024a4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024a52:	89 d0                	mov    eax,edx
c0024a54:	c1 e0 07             	shl    eax,0x7
c0024a57:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024a5b:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024a65:	51                   	push   ecx
c0024a66:	8d 42 02             	lea    eax,[edx+0x2]
c0024a69:	51                   	push   ecx
c0024a6a:	c1 e0 07             	shl    eax,0x7
c0024a6d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024a71:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024a75:	50                   	push   eax
c0024a76:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024a7c:	e8 1b f0 ff ff       	call   c0023a9c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024a85:	83 c4 10             	add    esp,0x10
c0024a88:	b8 01 00 00 00       	mov    eax,0x1
c0024a8d:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024a92:	0f 84 cb 01 00 00    	je     c0024c63 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024a98:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024a9c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024aa0:	c1 e0 09             	shl    eax,0x9
c0024aa3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024aa8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024aac:	74 0e                	je     c0024abc <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0024aae:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0024ab4:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024ab8:	89 c1                	mov    ecx,eax
c0024aba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024abc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024ac0:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024ac6:	8d 42 02             	lea    eax,[edx+0x2]
c0024ac9:	c1 e0 07             	shl    eax,0x7
c0024acc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024ad0:	8b 00                	mov    eax,DWORD PTR [eax]
c0024ad2:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024ad8:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024ade:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024ae2:	c1 e1 05             	shl    ecx,0x5
c0024ae5:	01 c8                	add    eax,ecx
c0024ae7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024aeb:	83 e1 01             	and    ecx,0x1
c0024aee:	89 ce                	mov    esi,ecx
c0024af0:	8a 08                	mov    cl,BYTE PTR [eax]
c0024af2:	c1 e6 06             	shl    esi,0x6
c0024af5:	83 e1 bf             	and    ecx,0xffffffbf
c0024af8:	09 f1                	or     ecx,esi
c0024afa:	88 08                	mov    BYTE PTR [eax],cl
c0024afc:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024afe:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024b04:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024b0a:	89 08                	mov    DWORD PTR [eax],ecx
c0024b0c:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024b12:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024b18:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024b1e:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024b21:	50                   	push   eax
c0024b22:	68 90 00 00 00       	push   0x90
c0024b27:	6a 00                	push   0x0
c0024b29:	56                   	push   esi
c0024b2a:	e8 21 bc fd ff       	call   c0000750 <memset>
c0024b2f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024b35:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024b39:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024b3f:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024b43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024b47:	83 c4 10             	add    esp,0x10
c0024b4a:	48                   	dec    eax
c0024b4b:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024b50:	89 c1                	mov    ecx,eax
c0024b52:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024b58:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024b5d:	09 c8                	or     eax,ecx
c0024b5f:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024b65:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024b68:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024b6f:	66 25 00 7f          	and    ax,0x7f00
c0024b73:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b77:	66 0d 27 80          	or     ax,0x8027
c0024b7b:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024b80:	66 89 06             	mov    WORD PTR [esi],ax
c0024b83:	19 c0                	sbb    eax,eax
c0024b85:	83 e0 f0             	and    eax,0xfffffff0
c0024b88:	83 c0 35             	add    eax,0x35
c0024b8b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024b8e:	89 e8                	mov    eax,ebp
c0024b90:	c1 e8 10             	shr    eax,0x10
c0024b93:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0024b96:	89 e8                	mov    eax,ebp
c0024b98:	c1 e8 18             	shr    eax,0x18
c0024b9b:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024b9e:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024ba2:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024ba5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024ba9:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024bac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024bb0:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024bb4:	89 d6                	mov    esi,edx
c0024bb6:	31 c0                	xor    eax,eax
c0024bb8:	c1 e6 07             	shl    esi,0x7
c0024bbb:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024bbf:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024bc5:	80 e1 88             	and    cl,0x88
c0024bc8:	74 0a                	je     c0024bd4 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024bca:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024bcf:	74 0a                	je     c0024bdb <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024bd1:	40                   	inc    eax
c0024bd2:	eb eb                	jmp    c0024bbf <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024bd4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024bd9:	75 0a                	jne    c0024be5 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024bdb:	83 ec 0c             	sub    esp,0xc
c0024bde:	68 61 c2 02 c0       	push   0xc002c261
c0024be3:	eb 56                	jmp    c0024c3b <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024be5:	b8 01 00 00 00       	mov    eax,0x1
c0024bea:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024bee:	c1 e2 07             	shl    edx,0x7
c0024bf1:	d3 e0                	shl    eax,cl
c0024bf3:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024bf7:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024bfd:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024c03:	85 c8                	test   eax,ecx
c0024c05:	74 20                	je     c0024c27 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024c07:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024c0d:	0f ba e1 1e          	bt     ecx,0x1e
c0024c11:	73 ea                	jae    c0024bfd <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024c13:	83 ec 0c             	sub    esp,0xc
c0024c16:	68 6f c2 02 c0       	push   0xc002c26f
c0024c1b:	e8 13 52 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c0024c20:	83 c4 10             	add    esp,0x10
c0024c23:	31 c0                	xor    eax,eax
c0024c25:	eb 3c                	jmp    c0024c63 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c27:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024c2d:	0f ba e0 1e          	bt     eax,0x1e
c0024c31:	73 17                	jae    c0024c4a <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024c33:	83 ec 0c             	sub    esp,0xc
c0024c36:	68 6f c2 02 c0       	push   0xc002c26f
c0024c3b:	e8 f3 51 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c0024c40:	83 c4 10             	add    esp,0x10
c0024c43:	b8 01 00 00 00       	mov    eax,0x1
c0024c48:	eb 19                	jmp    c0024c63 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c4a:	31 c0                	xor    eax,eax
c0024c4c:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024c51:	75 10                	jne    c0024c63 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c53:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024c59:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024c5d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c61:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024c63:	83 c4 2c             	add    esp,0x2c
c0024c66:	5b                   	pop    ebx
c0024c67:	5e                   	pop    esi
c0024c68:	5f                   	pop    edi
c0024c69:	5d                   	pop    ebp
c0024c6a:	c3                   	ret    
c0024c6b:	90                   	nop

c0024c6c <SATA::read(unsigned long long, int, void*)>:
c0024c6c:	57                   	push   edi
c0024c6d:	b8 04 00 00 00       	mov    eax,0x4
c0024c72:	56                   	push   esi
c0024c73:	53                   	push   ebx
c0024c74:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024c78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c7c:	8d 7a ff             	lea    edi,[edx-0x1]
c0024c7f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024c83:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024c87:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024c8d:	77 25                	ja     c0024cb4 <SATA::read(unsigned long long, int, void*)+0x48>
c0024c8f:	b8 06 00 00 00       	mov    eax,0x6
c0024c94:	85 f6                	test   esi,esi
c0024c96:	74 1c                	je     c0024cb4 <SATA::read(unsigned long long, int, void*)+0x48>
c0024c98:	50                   	push   eax
c0024c99:	50                   	push   eax
c0024c9a:	6a 00                	push   0x0
c0024c9c:	56                   	push   esi
c0024c9d:	52                   	push   edx
c0024c9e:	53                   	push   ebx
c0024c9f:	51                   	push   ecx
c0024ca0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024ca4:	e8 5d fd ff ff       	call   c0024a06 <SATA::access(unsigned long long, int, void*, bool)>
c0024ca9:	83 c4 20             	add    esp,0x20
c0024cac:	85 c0                	test   eax,eax
c0024cae:	0f 95 c0             	setne  al
c0024cb1:	0f b6 c0             	movzx  eax,al
c0024cb4:	5b                   	pop    ebx
c0024cb5:	5e                   	pop    esi
c0024cb6:	5f                   	pop    edi
c0024cb7:	c3                   	ret    

c0024cb8 <SATA::write(unsigned long long, int, void*)>:
c0024cb8:	55                   	push   ebp
c0024cb9:	b8 04 00 00 00       	mov    eax,0x4
c0024cbe:	57                   	push   edi
c0024cbf:	56                   	push   esi
c0024cc0:	53                   	push   ebx
c0024cc1:	83 ec 0c             	sub    esp,0xc
c0024cc4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024cc8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024ccc:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024ccf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024cd3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024cd7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024cdd:	77 3d                	ja     c0024d1c <SATA::write(unsigned long long, int, void*)+0x64>
c0024cdf:	b8 06 00 00 00       	mov    eax,0x6
c0024ce4:	85 ed                	test   ebp,ebp
c0024ce6:	74 34                	je     c0024d1c <SATA::write(unsigned long long, int, void*)+0x64>
c0024ce8:	c1 e3 09             	shl    ebx,0x9
c0024ceb:	01 eb                	add    ebx,ebp
c0024ced:	89 d6                	mov    esi,edx
c0024cef:	89 cf                	mov    edi,ecx
c0024cf1:	83 c6 01             	add    esi,0x1
c0024cf4:	83 d7 00             	adc    edi,0x0
c0024cf7:	50                   	push   eax
c0024cf8:	50                   	push   eax
c0024cf9:	6a 01                	push   0x1
c0024cfb:	55                   	push   ebp
c0024cfc:	81 c5 00 02 00 00    	add    ebp,0x200
c0024d02:	6a 01                	push   0x1
c0024d04:	51                   	push   ecx
c0024d05:	52                   	push   edx
c0024d06:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024d0a:	e8 f7 fc ff ff       	call   c0024a06 <SATA::access(unsigned long long, int, void*, bool)>
c0024d0f:	83 c4 20             	add    esp,0x20
c0024d12:	89 f2                	mov    edx,esi
c0024d14:	89 f9                	mov    ecx,edi
c0024d16:	39 dd                	cmp    ebp,ebx
c0024d18:	75 d3                	jne    c0024ced <SATA::write(unsigned long long, int, void*)+0x35>
c0024d1a:	31 c0                	xor    eax,eax
c0024d1c:	83 c4 0c             	add    esp,0xc
c0024d1f:	5b                   	pop    ebx
c0024d20:	5e                   	pop    esi
c0024d21:	5f                   	pop    edi
c0024d22:	5d                   	pop    ebp
c0024d23:	c3                   	ret    

c0024d24 <SATAPI::write(unsigned long long, int, void*)>:
c0024d24:	b8 03 00 00 00       	mov    eax,0x3
c0024d29:	c3                   	ret    

c0024d2a <SATAPI::close(int, int, void*)>:
c0024d2a:	83 ec 0c             	sub    esp,0xc
c0024d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d31:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024d37:	85 c0                	test   eax,eax
c0024d39:	74 0c                	je     c0024d47 <SATAPI::close(int, int, void*)+0x1d>
c0024d3b:	83 ec 0c             	sub    esp,0xc
c0024d3e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024d40:	50                   	push   eax
c0024d41:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024d44:	83 c4 10             	add    esp,0x10
c0024d47:	31 c0                	xor    eax,eax
c0024d49:	83 c4 0c             	add    esp,0xc
c0024d4c:	c3                   	ret    
c0024d4d:	90                   	nop

c0024d4e <SATAPI::SATAPI()>:
c0024d4e:	83 ec 0c             	sub    esp,0xc
c0024d51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d55:	83 ec 04             	sub    esp,0x4
c0024d58:	68 00 08 00 00       	push   0x800
c0024d5d:	68 b8 c2 02 c0       	push   0xc002c2b8
c0024d62:	50                   	push   eax
c0024d63:	e8 ce f1 fe ff       	call   c0013f36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024d68:	83 c4 10             	add    esp,0x10
c0024d6b:	ba 64 c3 02 c0       	mov    edx,0xc002c364
c0024d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d74:	89 10                	mov    DWORD PTR [eax],edx
c0024d76:	90                   	nop
c0024d77:	83 c4 0c             	add    esp,0xc
c0024d7a:	c3                   	ret    
c0024d7b:	90                   	nop

c0024d7c <SATAPI::diskRemoved()>:
c0024d7c:	83 ec 18             	sub    esp,0x18
c0024d7f:	68 c4 c2 02 c0       	push   0xc002c2c4
c0024d84:	e8 3e d9 fe ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0024d89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d8d:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024d94:	83 c4 1c             	add    esp,0x1c
c0024d97:	c3                   	ret    

c0024d98 <SATAPI::diskInserted()>:
c0024d98:	53                   	push   ebx
c0024d99:	83 ec 14             	sub    esp,0x14
c0024d9c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024da0:	68 db c2 02 c0       	push   0xc002c2db
c0024da5:	e8 1d d9 fe ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0024daa:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024db1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024db4:	e8 e5 f1 fe ff       	call   c0013f9e <PhysicalDisk::startCache()>
c0024db9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024dbd:	83 c4 18             	add    esp,0x18
c0024dc0:	5b                   	pop    ebx
c0024dc1:	e9 5a 14 ff ff       	jmp    c0016220 <createPartitionsForDisk(PhysicalDisk*)>

c0024dc6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024dc6:	55                   	push   ebp
c0024dc7:	57                   	push   edi
c0024dc8:	56                   	push   esi
c0024dc9:	53                   	push   ebx
c0024dca:	83 ec 34             	sub    esp,0x34
c0024dcd:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024dd1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024dd5:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024dd9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024ddd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024de1:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024de7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024ded:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024df1:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024df7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024dfb:	c1 e0 07             	shl    eax,0x7
c0024dfe:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024e02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024e06:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024e10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e14:	8d 58 02             	lea    ebx,[eax+0x2]
c0024e17:	c1 e3 07             	shl    ebx,0x7
c0024e1a:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024e1e:	53                   	push   ebx
c0024e1f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024e25:	e8 72 ec ff ff       	call   c0023a9c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024e2a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024e2e:	83 c4 10             	add    esp,0x10
c0024e31:	b8 01 00 00 00       	mov    eax,0x1
c0024e36:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024e3b:	0f 84 85 01 00 00    	je     c0024fc6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024e41:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e47:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024e49:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024e4f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024e55:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024e59:	c1 e1 05             	shl    ecx,0x5
c0024e5c:	01 c8                	add    eax,ecx
c0024e5e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024e60:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024e66:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024e6c:	89 08                	mov    DWORD PTR [eax],ecx
c0024e6e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e74:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024e7a:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024e80:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024e83:	8d 7b 40             	lea    edi,[ebx+0x40]
c0024e86:	50                   	push   eax
c0024e87:	68 90 00 00 00       	push   0x90
c0024e8c:	6a 00                	push   0x0
c0024e8e:	53                   	push   ebx
c0024e8f:	e8 bc b8 fd ff       	call   c0000750 <memset>
c0024e94:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0024e98:	b9 0c 00 00 00       	mov    ecx,0xc
c0024e9d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024e9f:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0024ea5:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024ea9:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024eaf:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024eb3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024eb7:	48                   	dec    eax
c0024eb8:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024ebd:	89 c1                	mov    ecx,eax
c0024ebf:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024ec5:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024eca:	09 c8                	or     eax,ecx
c0024ecc:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024ed2:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024ed5:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024edc:	66 25 00 7f          	and    ax,0x7f00
c0024ee0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024ee4:	66 0d 27 80          	or     ax,0x8027
c0024ee8:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024eec:	66 89 03             	mov    WORD PTR [ebx],ax
c0024eef:	89 d0                	mov    eax,edx
c0024ef1:	c1 ea 18             	shr    edx,0x18
c0024ef4:	c1 e8 10             	shr    eax,0x10
c0024ef7:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024efa:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024efd:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024f01:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024f04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024f08:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024f0b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024f0f:	83 c4 10             	add    esp,0x10
c0024f12:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024f16:	31 c0                	xor    eax,eax
c0024f18:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024f1c:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0024f22:	80 e2 88             	and    dl,0x88
c0024f25:	74 0a                	je     c0024f31 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024f27:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f2c:	74 0a                	je     c0024f38 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0024f2e:	40                   	inc    eax
c0024f2f:	eb eb                	jmp    c0024f1c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0024f31:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f36:	75 0f                	jne    c0024f47 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0024f38:	83 ec 0c             	sub    esp,0xc
c0024f3b:	68 61 c2 02 c0       	push   0xc002c261
c0024f40:	e8 ee 4e ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c0024f45:	eb 3f                	jmp    c0024f86 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0024f47:	ba 01 00 00 00       	mov    edx,0x1
c0024f4c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024f50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f54:	d3 e2                	shl    edx,cl
c0024f56:	c1 e0 07             	shl    eax,0x7
c0024f59:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0024f5f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024f63:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0024f69:	85 ca                	test   edx,ecx
c0024f6b:	74 23                	je     c0024f90 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0024f6d:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0024f73:	0f ba e1 1e          	bt     ecx,0x1e
c0024f77:	73 ea                	jae    c0024f63 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0024f79:	83 ec 0c             	sub    esp,0xc
c0024f7c:	68 f3 c2 02 c0       	push   0xc002c2f3
c0024f81:	e8 41 d7 fe ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0024f86:	83 c4 10             	add    esp,0x10
c0024f89:	b8 01 00 00 00       	mov    eax,0x1
c0024f8e:	eb 36                	jmp    c0024fc6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024f90:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0024f96:	0f ba e0 1e          	bt     eax,0x1e
c0024f9a:	73 0a                	jae    c0024fa6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0024f9c:	83 ec 0c             	sub    esp,0xc
c0024f9f:	68 06 c3 02 c0       	push   0xc002c306
c0024fa4:	eb db                	jmp    c0024f81 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0024fa6:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0024fab:	74 17                	je     c0024fc4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024fad:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0024fb2:	74 10                	je     c0024fc4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024fb4:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0024fba:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024fbe:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0024fc2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024fc4:	31 c0                	xor    eax,eax
c0024fc6:	83 c4 2c             	add    esp,0x2c
c0024fc9:	5b                   	pop    ebx
c0024fca:	5e                   	pop    esi
c0024fcb:	5f                   	pop    edi
c0024fcc:	5d                   	pop    ebp
c0024fcd:	c3                   	ret    

c0024fce <SATAPI::eject()>:
c0024fce:	57                   	push   edi
c0024fcf:	b9 03 00 00 00       	mov    ecx,0x3
c0024fd4:	53                   	push   ebx
c0024fd5:	83 ec 14             	sub    esp,0x14
c0024fd8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024fdc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024fe0:	fc                   	cld    
c0024fe1:	31 c0                	xor    eax,eax
c0024fe3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024fe5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024fea:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024fef:	50                   	push   eax
c0024ff0:	6a 00                	push   0x0
c0024ff2:	6a 00                	push   0x0
c0024ff4:	6a 00                	push   0x0
c0024ff6:	6a 00                	push   0x0
c0024ff8:	6a 02                	push   0x2
c0024ffa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024ffe:	50                   	push   eax
c0024fff:	53                   	push   ebx
c0025000:	e8 c1 fd ff ff       	call   c0024dc6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025005:	83 c4 14             	add    esp,0x14
c0025008:	53                   	push   ebx
c0025009:	e8 6e fd ff ff       	call   c0024d7c <SATAPI::diskRemoved()>
c002500e:	83 c4 24             	add    esp,0x24
c0025011:	31 c0                	xor    eax,eax
c0025013:	5b                   	pop    ebx
c0025014:	5f                   	pop    edi
c0025015:	c3                   	ret    

c0025016 <SATAPI::detectMedia()>:
c0025016:	56                   	push   esi
c0025017:	53                   	push   ebx
c0025018:	83 ec 28             	sub    esp,0x28
c002501b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002501f:	6a 0c                	push   0xc
c0025021:	6a 00                	push   0x0
c0025023:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025027:	56                   	push   esi
c0025028:	e8 23 b7 fd ff       	call   c0000750 <memset>
c002502d:	83 c4 0c             	add    esp,0xc
c0025030:	6a 00                	push   0x0
c0025032:	6a 00                	push   0x0
c0025034:	6a 00                	push   0x0
c0025036:	6a 00                	push   0x0
c0025038:	6a 00                	push   0x0
c002503a:	56                   	push   esi
c002503b:	53                   	push   ebx
c002503c:	e8 85 fd ff ff       	call   c0024dc6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025041:	83 c4 1c             	add    esp,0x1c
c0025044:	6a 0c                	push   0xc
c0025046:	6a 00                	push   0x0
c0025048:	56                   	push   esi
c0025049:	e8 02 b7 fd ff       	call   c0000750 <memset>
c002504e:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025053:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025058:	83 c4 0c             	add    esp,0xc
c002505b:	6a 01                	push   0x1
c002505d:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025061:	50                   	push   eax
c0025062:	6a 00                	push   0x0
c0025064:	6a 00                	push   0x0
c0025066:	6a 12                	push   0x12
c0025068:	56                   	push   esi
c0025069:	53                   	push   ebx
c002506a:	e8 57 fd ff ff       	call   c0024dc6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002506f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025073:	83 c4 20             	add    esp,0x20
c0025076:	83 e0 7f             	and    eax,0x7f
c0025079:	3c 70                	cmp    al,0x70
c002507b:	74 15                	je     c0025092 <SATAPI::detectMedia()+0x7c>
c002507d:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025084:	75 0c                	jne    c0025092 <SATAPI::detectMedia()+0x7c>
c0025086:	83 ec 0c             	sub    esp,0xc
c0025089:	53                   	push   ebx
c002508a:	e8 09 fd ff ff       	call   c0024d98 <SATAPI::diskInserted()>
c002508f:	83 c4 10             	add    esp,0x10
c0025092:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025096:	83 e0 0f             	and    eax,0xf
c0025099:	3c 02                	cmp    al,0x2
c002509b:	75 1b                	jne    c00250b8 <SATAPI::detectMedia()+0xa2>
c002509d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00250a2:	75 2d                	jne    c00250d1 <SATAPI::detectMedia()+0xbb>
c00250a4:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00250ab:	74 24                	je     c00250d1 <SATAPI::detectMedia()+0xbb>
c00250ad:	83 ec 0c             	sub    esp,0xc
c00250b0:	53                   	push   ebx
c00250b1:	e8 c6 fc ff ff       	call   c0024d7c <SATAPI::diskRemoved()>
c00250b6:	eb 16                	jmp    c00250ce <SATAPI::detectMedia()+0xb8>
c00250b8:	84 c0                	test   al,al
c00250ba:	75 15                	jne    c00250d1 <SATAPI::detectMedia()+0xbb>
c00250bc:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00250c3:	75 0c                	jne    c00250d1 <SATAPI::detectMedia()+0xbb>
c00250c5:	83 ec 0c             	sub    esp,0xc
c00250c8:	53                   	push   ebx
c00250c9:	e8 ca fc ff ff       	call   c0024d98 <SATAPI::diskInserted()>
c00250ce:	83 c4 10             	add    esp,0x10
c00250d1:	83 c4 24             	add    esp,0x24
c00250d4:	5b                   	pop    ebx
c00250d5:	5e                   	pop    esi
c00250d6:	c3                   	ret    
c00250d7:	90                   	nop

c00250d8 <SATAPI::open(int, int, void*)>:
c00250d8:	56                   	push   esi
c00250d9:	53                   	push   ebx
c00250da:	50                   	push   eax
c00250db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00250df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00250e3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00250ed:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00250f3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00250fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025101:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002510b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025111:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025118:	e8 54 a8 fe ff       	call   c000f971 <Phys::allocatePage()>
c002511d:	89 c6                	mov    esi,eax
c002511f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025125:	81 c6 00 10 00 00    	add    esi,0x1000
c002512b:	e8 41 a8 fe ff       	call   c000f971 <Phys::allocatePage()>
c0025130:	39 c6                	cmp    esi,eax
c0025132:	74 10                	je     c0025144 <SATAPI::open(int, int, void*)+0x6c>
c0025134:	83 ec 0c             	sub    esp,0xc
c0025137:	68 1b c3 02 c0       	push   0xc002c31b
c002513c:	e8 f2 4c ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c0025141:	83 c4 10             	add    esp,0x10
c0025144:	83 ec 0c             	sub    esp,0xc
c0025147:	6a 02                	push   0x2
c0025149:	e8 cd c0 fe ff       	call   c001121b <Virt::allocateKernelVirtualPages(int)>
c002514e:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025154:	6a 03                	push   0x3
c0025156:	50                   	push   eax
c0025157:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002515d:	ff 35 70 da 02 c0    	push   DWORD PTR ds:0xc002da70
c0025163:	e8 70 c8 fe ff       	call   c00119d8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025168:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002516f:	83 c4 14             	add    esp,0x14
c0025172:	53                   	push   ebx
c0025173:	e8 9e fe ff ff       	call   c0025016 <SATAPI::detectMedia()>
c0025178:	83 c4 14             	add    esp,0x14
c002517b:	31 c0                	xor    eax,eax
c002517d:	5b                   	pop    ebx
c002517e:	5e                   	pop    esi
c002517f:	c3                   	ret    

c0025180 <SATAPI::read(unsigned long long, int, void*)>:
c0025180:	55                   	push   ebp
c0025181:	57                   	push   edi
c0025182:	56                   	push   esi
c0025183:	53                   	push   ebx
c0025184:	83 ec 1c             	sub    esp,0x1c
c0025187:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002518b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002518f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025193:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002519a:	74 19                	je     c00251b5 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002519c:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00251a1:	7e 2e                	jle    c00251d1 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00251a3:	83 ec 0c             	sub    esp,0xc
c00251a6:	68 31 c3 02 c0       	push   0xc002c331
c00251ab:	e8 83 4c ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c00251b0:	83 c4 10             	add    esp,0x10
c00251b3:	eb 1c                	jmp    c00251d1 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00251b5:	83 ec 0c             	sub    esp,0xc
c00251b8:	55                   	push   ebp
c00251b9:	e8 58 fe ff ff       	call   c0025016 <SATAPI::detectMedia()>
c00251be:	83 c4 10             	add    esp,0x10
c00251c1:	b8 02 00 00 00       	mov    eax,0x2
c00251c6:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00251cd:	75 cd                	jne    c002519c <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00251cf:	eb 49                	jmp    c002521a <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00251d1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00251d5:	b9 03 00 00 00       	mov    ecx,0x3
c00251da:	fc                   	cld    
c00251db:	31 c0                	xor    eax,eax
c00251dd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00251df:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00251e4:	89 d8                	mov    eax,ebx
c00251e6:	86 e0                	xchg   al,ah
c00251e8:	c1 c0 10             	rol    eax,0x10
c00251eb:	86 e0                	xchg   al,ah
c00251ed:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00251f1:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00251f5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00251f9:	50                   	push   eax
c00251fa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00251fe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025202:	56                   	push   esi
c0025203:	53                   	push   ebx
c0025204:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025208:	c1 e0 0b             	shl    eax,0xb
c002520b:	50                   	push   eax
c002520c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025210:	50                   	push   eax
c0025211:	55                   	push   ebp
c0025212:	e8 af fb ff ff       	call   c0024dc6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025217:	83 c4 20             	add    esp,0x20
c002521a:	83 c4 1c             	add    esp,0x1c
c002521d:	5b                   	pop    ebx
c002521e:	5e                   	pop    esi
c002521f:	5f                   	pop    edi
c0025220:	5d                   	pop    ebp
c0025221:	c3                   	ret    

c0025222 <AVX::open(int, int, void*)>:
c0025222:	83 ec 0c             	sub    esp,0xc
c0025225:	e8 3e 11 00 00       	call   c0026368 <avxInit>
c002522a:	b8 00 00 00 00       	mov    eax,0x0
c002522f:	83 c4 0c             	add    esp,0xc
c0025232:	c3                   	ret    
c0025233:	90                   	nop

c0025234 <AVX::close(int, int, void*)>:
c0025234:	83 ec 0c             	sub    esp,0xc
c0025237:	e8 2d 11 00 00       	call   c0026369 <avxClose>
c002523c:	b8 00 00 00 00       	mov    eax,0x0
c0025241:	83 c4 0c             	add    esp,0xc
c0025244:	c3                   	ret    
c0025245:	90                   	nop

c0025246 <AVX::available()>:
c0025246:	83 ec 0c             	sub    esp,0xc
c0025249:	e8 12 11 00 00       	call   c0026360 <avxDetect>
c002524e:	85 c0                	test   eax,eax
c0025250:	0f 95 c0             	setne  al
c0025253:	83 c4 0c             	add    esp,0xc
c0025256:	c3                   	ret    
c0025257:	90                   	nop

c0025258 <AVX::save(void*)>:
c0025258:	83 ec 0c             	sub    esp,0xc
c002525b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002525f:	83 ec 0c             	sub    esp,0xc
c0025262:	50                   	push   eax
c0025263:	e8 fe 10 00 00       	call   c0026366 <avxSave>
c0025268:	83 c4 10             	add    esp,0x10
c002526b:	90                   	nop
c002526c:	83 c4 0c             	add    esp,0xc
c002526f:	c3                   	ret    

c0025270 <AVX::load(void*)>:
c0025270:	83 ec 0c             	sub    esp,0xc
c0025273:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025277:	83 ec 0c             	sub    esp,0xc
c002527a:	50                   	push   eax
c002527b:	e8 e7 10 00 00       	call   c0026367 <avxLoad>
c0025280:	83 c4 10             	add    esp,0x10
c0025283:	90                   	nop
c0025284:	83 c4 0c             	add    esp,0xc
c0025287:	c3                   	ret    

c0025288 <AVX::AVX()>:
c0025288:	83 ec 0c             	sub    esp,0xc
c002528b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002528f:	83 ec 08             	sub    esp,0x8
c0025292:	68 94 c3 02 c0       	push   0xc002c394
c0025297:	50                   	push   eax
c0025298:	e8 77 ed fe ff       	call   c0014014 <FPU::FPU(char const*)>
c002529d:	83 c4 10             	add    esp,0x10
c00252a0:	ba a4 c3 02 c0       	mov    edx,0xc002c3a4
c00252a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252a9:	89 10                	mov    DWORD PTR [eax],edx
c00252ab:	90                   	nop
c00252ac:	83 c4 0c             	add    esp,0xc
c00252af:	c3                   	ret    

c00252b0 <MMX::available()>:
c00252b0:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c00252b5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00252bb:	83 e0 20             	and    eax,0x20
c00252be:	84 c0                	test   al,al
c00252c0:	0f 95 c0             	setne  al
c00252c3:	c3                   	ret    

c00252c4 <MMX::open(int, int, void*)>:
c00252c4:	83 ec 0c             	sub    esp,0xc
c00252c7:	e8 26 11 00 00       	call   c00263f2 <x87Init>
c00252cc:	b8 00 00 00 00       	mov    eax,0x0
c00252d1:	83 c4 0c             	add    esp,0xc
c00252d4:	c3                   	ret    
c00252d5:	90                   	nop

c00252d6 <MMX::close(int, int, void*)>:
c00252d6:	83 ec 0c             	sub    esp,0xc
c00252d9:	e8 2e 11 00 00       	call   c002640c <x87Close>
c00252de:	b8 00 00 00 00       	mov    eax,0x0
c00252e3:	83 c4 0c             	add    esp,0xc
c00252e6:	c3                   	ret    
c00252e7:	90                   	nop

c00252e8 <MMX::save(void*)>:
c00252e8:	83 ec 0c             	sub    esp,0xc
c00252eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252ef:	83 ec 0c             	sub    esp,0xc
c00252f2:	50                   	push   eax
c00252f3:	e8 e9 10 00 00       	call   c00263e1 <x87Save>
c00252f8:	83 c4 10             	add    esp,0x10
c00252fb:	90                   	nop
c00252fc:	83 c4 0c             	add    esp,0xc
c00252ff:	c3                   	ret    

c0025300 <MMX::load(void*)>:
c0025300:	83 ec 0c             	sub    esp,0xc
c0025303:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025307:	83 ec 0c             	sub    esp,0xc
c002530a:	50                   	push   eax
c002530b:	e8 da 10 00 00       	call   c00263ea <x87Load>
c0025310:	83 c4 10             	add    esp,0x10
c0025313:	90                   	nop
c0025314:	83 c4 0c             	add    esp,0xc
c0025317:	c3                   	ret    

c0025318 <MMX::MMX()>:
c0025318:	83 ec 0c             	sub    esp,0xc
c002531b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002531f:	83 ec 08             	sub    esp,0x8
c0025322:	68 d4 c3 02 c0       	push   0xc002c3d4
c0025327:	50                   	push   eax
c0025328:	e8 e7 ec fe ff       	call   c0014014 <FPU::FPU(char const*)>
c002532d:	83 c4 10             	add    esp,0x10
c0025330:	ba e4 c3 02 c0       	mov    edx,0xc002c3e4
c0025335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025339:	89 10                	mov    DWORD PTR [eax],edx
c002533b:	90                   	nop
c002533c:	83 c4 0c             	add    esp,0xc
c002533f:	c3                   	ret    

c0025340 <SSE::open(int, int, void*)>:
c0025340:	83 ec 0c             	sub    esp,0xc
c0025343:	e8 5c 10 00 00       	call   c00263a4 <sseInit>
c0025348:	b8 00 00 00 00       	mov    eax,0x0
c002534d:	83 c4 0c             	add    esp,0xc
c0025350:	c3                   	ret    
c0025351:	90                   	nop

c0025352 <SSE::close(int, int, void*)>:
c0025352:	83 ec 0c             	sub    esp,0xc
c0025355:	e8 5a 10 00 00       	call   c00263b4 <sseClose>
c002535a:	b8 00 00 00 00       	mov    eax,0x0
c002535f:	83 c4 0c             	add    esp,0xc
c0025362:	c3                   	ret    
c0025363:	90                   	nop

c0025364 <SSE::available()>:
c0025364:	83 ec 1c             	sub    esp,0x1c
c0025367:	e8 14 10 00 00       	call   c0026380 <absolutelyNoChanceInHell>
c002536c:	85 c0                	test   eax,eax
c002536e:	0f 95 c0             	setne  al
c0025371:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025375:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025379:	83 c4 1c             	add    esp,0x1c
c002537c:	c3                   	ret    
c002537d:	90                   	nop

c002537e <SSE::save(void*)>:
c002537e:	83 ec 0c             	sub    esp,0xc
c0025381:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025385:	83 ec 0c             	sub    esp,0xc
c0025388:	50                   	push   eax
c0025389:	e8 0a 10 00 00       	call   c0026398 <sseSave>
c002538e:	83 c4 10             	add    esp,0x10
c0025391:	90                   	nop
c0025392:	83 c4 0c             	add    esp,0xc
c0025395:	c3                   	ret    

c0025396 <SSE::load(void*)>:
c0025396:	83 ec 0c             	sub    esp,0xc
c0025399:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002539d:	83 ec 0c             	sub    esp,0xc
c00253a0:	50                   	push   eax
c00253a1:	e8 f8 0f 00 00       	call   c002639e <sseLoad>
c00253a6:	83 c4 10             	add    esp,0x10
c00253a9:	90                   	nop
c00253aa:	83 c4 0c             	add    esp,0xc
c00253ad:	c3                   	ret    

c00253ae <SSE::SSE()>:
c00253ae:	83 ec 0c             	sub    esp,0xc
c00253b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253b5:	83 ec 08             	sub    esp,0x8
c00253b8:	68 14 c4 02 c0       	push   0xc002c414
c00253bd:	50                   	push   eax
c00253be:	e8 51 ec fe ff       	call   c0014014 <FPU::FPU(char const*)>
c00253c3:	83 c4 10             	add    esp,0x10
c00253c6:	ba 24 c4 02 c0       	mov    edx,0xc002c424
c00253cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253cf:	89 10                	mov    DWORD PTR [eax],edx
c00253d1:	90                   	nop
c00253d2:	83 c4 0c             	add    esp,0xc
c00253d5:	c3                   	ret    

c00253d6 <x87::open(int, int, void*)>:
c00253d6:	83 ec 0c             	sub    esp,0xc
c00253d9:	e8 14 10 00 00       	call   c00263f2 <x87Init>
c00253de:	b8 00 00 00 00       	mov    eax,0x0
c00253e3:	83 c4 0c             	add    esp,0xc
c00253e6:	c3                   	ret    
c00253e7:	90                   	nop

c00253e8 <x87::close(int, int, void*)>:
c00253e8:	83 ec 0c             	sub    esp,0xc
c00253eb:	e8 1c 10 00 00       	call   c002640c <x87Close>
c00253f0:	b8 00 00 00 00       	mov    eax,0x0
c00253f5:	83 c4 0c             	add    esp,0xc
c00253f8:	c3                   	ret    
c00253f9:	90                   	nop

c00253fa <x87::available()>:
c00253fa:	83 ec 0c             	sub    esp,0xc
c00253fd:	e8 c4 0f 00 00       	call   c00263c6 <x87Detect>
c0025402:	85 c0                	test   eax,eax
c0025404:	0f 95 c0             	setne  al
c0025407:	83 c4 0c             	add    esp,0xc
c002540a:	c3                   	ret    
c002540b:	90                   	nop

c002540c <x87::save(void*)>:
c002540c:	83 ec 0c             	sub    esp,0xc
c002540f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025413:	83 ec 0c             	sub    esp,0xc
c0025416:	50                   	push   eax
c0025417:	e8 c5 0f 00 00       	call   c00263e1 <x87Save>
c002541c:	83 c4 10             	add    esp,0x10
c002541f:	90                   	nop
c0025420:	83 c4 0c             	add    esp,0xc
c0025423:	c3                   	ret    

c0025424 <x87::load(void*)>:
c0025424:	83 ec 0c             	sub    esp,0xc
c0025427:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002542b:	83 ec 0c             	sub    esp,0xc
c002542e:	50                   	push   eax
c002542f:	e8 b6 0f 00 00       	call   c00263ea <x87Load>
c0025434:	83 c4 10             	add    esp,0x10
c0025437:	90                   	nop
c0025438:	83 c4 0c             	add    esp,0xc
c002543b:	c3                   	ret    

c002543c <x87::x87()>:
c002543c:	83 ec 0c             	sub    esp,0xc
c002543f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025443:	83 ec 08             	sub    esp,0x8
c0025446:	68 54 c4 02 c0       	push   0xc002c454
c002544b:	50                   	push   eax
c002544c:	e8 c3 eb fe ff       	call   c0014014 <FPU::FPU(char const*)>
c0025451:	83 c4 10             	add    esp,0x10
c0025454:	ba 64 c4 02 c0       	mov    edx,0xc002c464
c0025459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002545d:	89 10                	mov    DWORD PTR [eax],edx
c002545f:	90                   	nop
c0025460:	83 c4 0c             	add    esp,0xc
c0025463:	c3                   	ret    

c0025464 <APIC::disable()>:
c0025464:	90                   	nop
c0025465:	c3                   	ret    

c0025466 <APIC::close(int, int, void*)>:
c0025466:	55                   	push   ebp
c0025467:	89 e5                	mov    ebp,esp
c0025469:	83 ec 08             	sub    esp,0x8
c002546c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002546f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025471:	83 c0 3c             	add    eax,0x3c
c0025474:	8b 00                	mov    eax,DWORD PTR [eax]
c0025476:	83 ec 0c             	sub    esp,0xc
c0025479:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002547c:	ff d0                	call   eax
c002547e:	83 c4 10             	add    esp,0x10
c0025481:	b8 00 00 00 00       	mov    eax,0x0
c0025486:	c9                   	leave  
c0025487:	c3                   	ret    

c0025488 <IOAPIC::close(int, int, void*)>:
c0025488:	b8 00 00 00 00       	mov    eax,0x0
c002548d:	c3                   	ret    

c002548e <APIC::io_wait()>:
c002548e:	eb 00                	jmp    c0025490 <APIC::io_wait()+0x2>
c0025490:	eb 00                	jmp    c0025492 <APIC::io_wait()+0x4>
c0025492:	90                   	nop
c0025493:	c3                   	ret    

c0025494 <APIC::getBase()>:
c0025494:	55                   	push   ebp
c0025495:	89 e5                	mov    ebp,esp
c0025497:	83 ec 18             	sub    esp,0x18
c002549a:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c002549f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00254a5:	83 e0 08             	and    eax,0x8
c00254a8:	84 c0                	test   al,al
c00254aa:	75 07                	jne    c00254b3 <APIC::getBase()+0x1f>
c00254ac:	b8 00 00 00 00       	mov    eax,0x0
c00254b1:	eb 21                	jmp    c00254d4 <APIC::getBase()+0x40>
c00254b3:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c00254b8:	83 ec 08             	sub    esp,0x8
c00254bb:	6a 1b                	push   0x1b
c00254bd:	50                   	push   eax
c00254be:	e8 7d 96 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00254c3:	83 c4 10             	add    esp,0x10
c00254c6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00254c9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00254cc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00254cf:	25 00 f0 ff ff       	and    eax,0xfffff000
c00254d4:	c9                   	leave  
c00254d5:	c3                   	ret    

c00254d6 <APIC::eoi(unsigned char)>:
c00254d6:	55                   	push   ebp
c00254d7:	89 e5                	mov    ebp,esp
c00254d9:	83 ec 28             	sub    esp,0x28
c00254dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00254df:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00254e2:	83 ec 0c             	sub    esp,0xc
c00254e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254e8:	e8 a7 ff ff ff       	call   c0025494 <APIC::getBase()>
c00254ed:	83 c4 10             	add    esp,0x10
c00254f0:	05 b0 00 00 00       	add    eax,0xb0
c00254f5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00254f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00254fb:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025501:	90                   	nop
c0025502:	c9                   	leave  
c0025503:	c3                   	ret    

c0025504 <APIC::open(int, int, void*)>:
c0025504:	55                   	push   ebp
c0025505:	89 e5                	mov    ebp,esp
c0025507:	57                   	push   edi
c0025508:	56                   	push   esi
c0025509:	53                   	push   ebx
c002550a:	83 ec 2c             	sub    esp,0x2c
c002550d:	83 ec 0c             	sub    esp,0xc
c0025510:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025513:	e8 7c ff ff ff       	call   c0025494 <APIC::getBase()>
c0025518:	83 c4 10             	add    esp,0x10
c002551b:	89 c2                	mov    edx,eax
c002551d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025520:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025526:	0f b6 f8             	movzx  edi,al
c0025529:	89 d0                	mov    eax,edx
c002552b:	ba 00 00 00 00       	mov    edx,0x0
c0025530:	89 c1                	mov    ecx,eax
c0025532:	80 e5 ff             	and    ch,0xff
c0025535:	89 cb                	mov    ebx,ecx
c0025537:	0f b6 f2             	movzx  esi,dl
c002553a:	89 d8                	mov    eax,ebx
c002553c:	89 f2                	mov    edx,esi
c002553e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025541:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025544:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025548:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002554c:	83 e0 00             	and    eax,0x0
c002554f:	09 d0                	or     eax,edx
c0025551:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025558:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002555e:	8d 50 01             	lea    edx,[eax+0x1]
c0025561:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025564:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002556a:	0f b6 d0             	movzx  edx,al
c002556d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025570:	83 c2 08             	add    edx,0x8
c0025573:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025577:	0f b6 c9             	movzx  ecx,cl
c002557a:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025580:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025584:	83 ec 0c             	sub    esp,0xc
c0025587:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002558a:	e8 05 ff ff ff       	call   c0025494 <APIC::getBase()>
c002558f:	83 c4 10             	add    esp,0x10
c0025592:	05 f0 00 00 00       	add    eax,0xf0
c0025597:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002559a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002559d:	8b 00                	mov    eax,DWORD PTR [eax]
c002559f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00255a2:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00255a9:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00255b0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00255b3:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00255b6:	89 10                	mov    DWORD PTR [eax],edx
c00255b8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00255bf:	a1 d0 01 03 c0       	mov    eax,ds:0xc00301d0
c00255c4:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00255c7:	7d 7c                	jge    c0025645 <APIC::open(int, int, void*)+0x141>
c00255c9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00255cc:	8b 04 85 e0 01 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfe20]
c00255d3:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00255d6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00255d9:	8b 04 85 e0 01 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfe20]
c00255e0:	c1 e8 08             	shr    eax,0x8
c00255e3:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00255e7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00255ea:	8b 04 85 e0 01 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfe20]
c00255f1:	c1 e8 18             	shr    eax,0x18
c00255f4:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00255f7:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00255fb:	75 40                	jne    c002563d <APIC::open(int, int, void*)+0x139>
c00255fd:	83 ec 0c             	sub    esp,0xc
c0025600:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025603:	e8 8c fe ff ff       	call   c0025494 <APIC::getBase()>
c0025608:	83 c4 10             	add    esp,0x10
c002560b:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002560f:	75 07                	jne    c0025618 <APIC::open(int, int, void*)+0x114>
c0025611:	ba 60 03 00 00       	mov    edx,0x360
c0025616:	eb 05                	jmp    c002561d <APIC::open(int, int, void*)+0x119>
c0025618:	ba 50 03 00 00       	mov    edx,0x350
c002561d:	01 d0                	add    eax,edx
c002561f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025622:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025625:	8b 00                	mov    eax,DWORD PTR [eax]
c0025627:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002562a:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025631:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025635:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025638:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002563b:	89 10                	mov    DWORD PTR [eax],edx
c002563d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025640:	e9 7a ff ff ff       	jmp    c00255bf <APIC::open(int, int, void*)+0xbb>
c0025645:	b8 00 00 00 00       	mov    eax,0x0
c002564a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002564d:	5b                   	pop    ebx
c002564e:	5e                   	pop    esi
c002564f:	5f                   	pop    edi
c0025650:	5d                   	pop    ebp
c0025651:	c3                   	ret    

c0025652 <IOAPIC::IOAPIC()>:
c0025652:	83 ec 0c             	sub    esp,0xc
c0025655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025659:	83 ec 08             	sub    esp,0x8
c002565c:	68 94 c4 02 c0       	push   0xc002c494
c0025661:	50                   	push   eax
c0025662:	e8 9d e6 fe ff       	call   c0013d04 <Device::Device(char const*)>
c0025667:	83 c4 10             	add    esp,0x10
c002566a:	ba bc c5 02 c0       	mov    edx,0xc002c5bc
c002566f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025673:	89 10                	mov    DWORD PTR [eax],edx
c0025675:	90                   	nop
c0025676:	83 c4 0c             	add    esp,0xc
c0025679:	c3                   	ret    

c002567a <APIC::APIC()>:
c002567a:	53                   	push   ebx
c002567b:	83 ec 18             	sub    esp,0x18
c002567e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025682:	83 ec 08             	sub    esp,0x8
c0025685:	68 9c c4 02 c0       	push   0xc002c49c
c002568a:	50                   	push   eax
c002568b:	e8 de ed fe ff       	call   c001446e <InterruptController::InterruptController(char const*)>
c0025690:	83 c4 10             	add    esp,0x10
c0025693:	ba 74 c5 02 c0       	mov    edx,0xc002c574
c0025698:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002569c:	89 10                	mov    DWORD PTR [eax],edx
c002569e:	a0 a0 1c 03 c0       	mov    al,ds:0xc0031ca0
c00256a3:	83 f0 01             	xor    eax,0x1
c00256a6:	84 c0                	test   al,al
c00256a8:	0f 84 a1 00 00 00    	je     c002574f <APIC::APIC()+0xd5>
c00256ae:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00256b3:	a0 80 02 03 c0       	mov    al,ds:0xc0030280
c00256b8:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00256bc:	0f 83 86 00 00 00    	jae    c0025748 <APIC::APIC()+0xce>
c00256c2:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00256ca:	83 ec 0c             	sub    esp,0xc
c00256cd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00256d1:	e8 c3 9e fe ff       	call   c000f599 <malloc>
c00256d6:	83 c4 10             	add    esp,0x10
c00256d9:	89 c3                	mov    ebx,eax
c00256db:	83 ec 0c             	sub    esp,0xc
c00256de:	53                   	push   ebx
c00256df:	e8 6e ff ff ff       	call   c0025652 <IOAPIC::IOAPIC()>
c00256e4:	83 c4 10             	add    esp,0x10
c00256e7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00256eb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00256f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00256f4:	89 14 85 80 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce380],edx
c00256fb:	a1 60 1c 03 c0       	mov    eax,ds:0xc0031c60
c0025700:	40                   	inc    eax
c0025701:	a3 60 1c 03 c0       	mov    ds:0xc0031c60,eax
c0025706:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c002570b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025711:	83 ec 08             	sub    esp,0x8
c0025714:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025718:	50                   	push   eax
c0025719:	e8 e2 e3 fe ff       	call   c0013b00 <Device::addChild(Device*)>
c002571e:	83 c4 10             	add    esp,0x10
c0025721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025725:	8b 00                	mov    eax,DWORD PTR [eax]
c0025727:	83 c0 08             	add    eax,0x8
c002572a:	8b 00                	mov    eax,DWORD PTR [eax]
c002572c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025731:	6a 00                	push   0x0
c0025733:	6a 00                	push   0x0
c0025735:	52                   	push   edx
c0025736:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002573a:	ff d0                	call   eax
c002573c:	83 c4 10             	add    esp,0x10
c002573f:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025743:	e9 6b ff ff ff       	jmp    c00256b3 <APIC::APIC()+0x39>
c0025748:	c6 05 a0 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031ca0,0x1
c002574f:	90                   	nop
c0025750:	83 c4 18             	add    esp,0x18
c0025753:	5b                   	pop    ebx
c0025754:	c3                   	ret    
c0025755:	90                   	nop

c0025756 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025756:	55                   	push   ebp
c0025757:	89 e5                	mov    ebp,esp
c0025759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002575c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025762:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025765:	72 1d                	jb     c0025784 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025767:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002576a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025773:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025779:	01 d0                	add    eax,edx
c002577b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002577e:	73 04                	jae    c0025784 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025780:	b0 01                	mov    al,0x1
c0025782:	eb 02                	jmp    c0025786 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025784:	b0 00                	mov    al,0x0
c0025786:	5d                   	pop    ebp
c0025787:	c3                   	ret    

c0025788 <IOAPIC::read(int)>:
c0025788:	55                   	push   ebp
c0025789:	89 e5                	mov    ebp,esp
c002578b:	83 ec 10             	sub    esp,0x10
c002578e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025791:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025797:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002579a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002579d:	0f b6 d0             	movzx  edx,al
c00257a0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257a3:	89 10                	mov    DWORD PTR [eax],edx
c00257a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257a8:	83 c0 10             	add    eax,0x10
c00257ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00257ad:	c9                   	leave  
c00257ae:	c3                   	ret    
c00257af:	90                   	nop

c00257b0 <IOAPIC::open(int, int, void*)>:
c00257b0:	55                   	push   ebp
c00257b1:	89 e5                	mov    ebp,esp
c00257b3:	57                   	push   edi
c00257b4:	56                   	push   esi
c00257b5:	53                   	push   ebx
c00257b6:	83 ec 0c             	sub    esp,0xc
c00257b9:	83 ec 0c             	sub    esp,0xc
c00257bc:	68 c7 c4 02 c0       	push   0xc002c4c7
c00257c1:	e8 01 cf fe ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c00257c6:	83 c4 10             	add    esp,0x10
c00257c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257cc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00257cf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00257d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257d8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00257de:	8b 14 85 c0 02 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfd40]
c00257e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257e8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00257ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257f1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00257f7:	8b 14 85 40 03 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfcc0]
c00257fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025801:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025807:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002580a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025810:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025813:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025819:	0f b6 f8             	movzx  edi,al
c002581c:	89 d0                	mov    eax,edx
c002581e:	ba 00 00 00 00       	mov    edx,0x0
c0025823:	89 c1                	mov    ecx,eax
c0025825:	80 e5 ff             	and    ch,0xff
c0025828:	89 cb                	mov    ebx,ecx
c002582a:	0f b6 f2             	movzx  esi,dl
c002582d:	89 d8                	mov    eax,ebx
c002582f:	89 f2                	mov    edx,esi
c0025831:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025834:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025837:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002583b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002583f:	83 e0 00             	and    eax,0x0
c0025842:	09 d0                	or     eax,edx
c0025844:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002584b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025851:	8d 50 01             	lea    edx,[eax+0x1]
c0025854:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025857:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002585d:	0f b6 d0             	movzx  edx,al
c0025860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025863:	83 c2 08             	add    edx,0x8
c0025866:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002586a:	0f b6 c9             	movzx  ecx,cl
c002586d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025873:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025877:	83 ec 08             	sub    esp,0x8
c002587a:	6a 01                	push   0x1
c002587c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002587f:	e8 04 ff ff ff       	call   c0025788 <IOAPIC::read(int)>
c0025884:	83 c4 10             	add    esp,0x10
c0025887:	c1 f8 10             	sar    eax,0x10
c002588a:	0f b6 c0             	movzx  eax,al
c002588d:	8d 50 01             	lea    edx,[eax+0x1]
c0025890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025893:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025899:	b8 00 00 00 00       	mov    eax,0x0
c002589e:	8d 65 f4             	lea    esp,[ebp-0xc]
c00258a1:	5b                   	pop    ebx
c00258a2:	5e                   	pop    esi
c00258a3:	5f                   	pop    edi
c00258a4:	5d                   	pop    ebp
c00258a5:	c3                   	ret    

c00258a6 <IOAPIC::write(int, int)>:
c00258a6:	55                   	push   ebp
c00258a7:	89 e5                	mov    ebp,esp
c00258a9:	83 ec 10             	sub    esp,0x10
c00258ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258af:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00258b5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00258b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258bb:	0f b6 d0             	movzx  edx,al
c00258be:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00258c1:	89 10                	mov    DWORD PTR [eax],edx
c00258c3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00258c6:	8d 50 10             	lea    edx,[eax+0x10]
c00258c9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00258cc:	89 02                	mov    DWORD PTR [edx],eax
c00258ce:	90                   	nop
c00258cf:	c9                   	leave  
c00258d0:	c3                   	ret    
c00258d1:	90                   	nop

c00258d2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00258d2:	55                   	push   ebp
c00258d3:	89 e5                	mov    ebp,esp
c00258d5:	53                   	push   ebx
c00258d6:	83 ec 2c             	sub    esp,0x2c
c00258d9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258dc:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00258df:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00258e2:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00258e5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00258e8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00258eb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00258ee:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00258f1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00258f4:	88 d8                	mov    al,bl
c00258f6:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00258f9:	88 c8                	mov    al,cl
c00258fb:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00258fe:	88 d0                	mov    al,dl
c0025900:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025903:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025907:	83 c0 08             	add    eax,0x8
c002590a:	01 c0                	add    eax,eax
c002590c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002590f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025913:	83 c0 08             	add    eax,0x8
c0025916:	01 c0                	add    eax,eax
c0025918:	40                   	inc    eax
c0025919:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002591c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002591f:	50                   	push   eax
c0025920:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025923:	e8 60 fe ff ff       	call   c0025788 <IOAPIC::read(int)>
c0025928:	83 c4 08             	add    esp,0x8
c002592b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002592e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025935:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025938:	c1 e0 18             	shl    eax,0x18
c002593b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002593e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025941:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025944:	52                   	push   edx
c0025945:	50                   	push   eax
c0025946:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025949:	e8 58 ff ff ff       	call   c00258a6 <IOAPIC::write(int, int)>
c002594e:	83 c4 0c             	add    esp,0xc
c0025951:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025954:	50                   	push   eax
c0025955:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025958:	e8 2b fe ff ff       	call   c0025788 <IOAPIC::read(int)>
c002595d:	83 c4 08             	add    esp,0x8
c0025960:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025963:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002596a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025971:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025978:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002597c:	74 09                	je     c0025987 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002597e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025985:	eb 07                	jmp    c002598e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025987:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002598e:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025992:	74 09                	je     c002599d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025994:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002599b:	eb 07                	jmp    c00259a4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002599d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00259a4:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00259ab:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00259af:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00259b2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00259b5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00259b8:	52                   	push   edx
c00259b9:	50                   	push   eax
c00259ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259bd:	e8 e4 fe ff ff       	call   c00258a6 <IOAPIC::write(int, int)>
c00259c2:	83 c4 0c             	add    esp,0xc
c00259c5:	90                   	nop
c00259c6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00259c9:	c9                   	leave  
c00259ca:	c3                   	ret    
c00259cb:	90                   	nop

c00259cc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00259cc:	55                   	push   ebp
c00259cd:	89 e5                	mov    ebp,esp
c00259cf:	57                   	push   edi
c00259d0:	56                   	push   esi
c00259d1:	53                   	push   ebx
c00259d2:	83 ec 2c             	sub    esp,0x2c
c00259d5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00259d8:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00259db:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00259df:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00259e3:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00259e7:	74 5a                	je     c0025a43 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00259e9:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00259ed:	7f 44                	jg     c0025a33 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00259ef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259f2:	05 60 cb 02 c0       	add    eax,0xc002cb60
c00259f7:	8a 00                	mov    al,BYTE PTR [eax]
c00259f9:	0f b6 c0             	movzx  eax,al
c00259fc:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00259ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a02:	66 8b 84 00 60 02 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfda0]
c0025a0a:	0f b7 c0             	movzx  eax,ax
c0025a0d:	83 e0 02             	and    eax,0x2
c0025a10:	85 c0                	test   eax,eax
c0025a12:	74 04                	je     c0025a18 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025a14:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025a18:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a1b:	66 8b 84 00 60 02 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfda0]
c0025a23:	0f b7 c0             	movzx  eax,ax
c0025a26:	83 e0 08             	and    eax,0x8
c0025a29:	85 c0                	test   eax,eax
c0025a2b:	74 16                	je     c0025a43 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a2d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025a31:	eb 10                	jmp    c0025a43 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a33:	83 ec 0c             	sub    esp,0xc
c0025a36:	68 d8 c4 02 c0       	push   0xc002c4d8
c0025a3b:	e8 f3 43 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c0025a40:	83 c4 10             	add    esp,0x10
c0025a43:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025a47:	a1 60 1c 03 c0       	mov    eax,ds:0xc0031c60
c0025a4c:	83 ec 08             	sub    esp,0x8
c0025a4f:	50                   	push   eax
c0025a50:	68 10 c5 02 c0       	push   0xc002c510
c0025a55:	e8 6d cc fe ff       	call   c00126c7 <Dbg::kprintf(char const*, ...)>
c0025a5a:	83 c4 10             	add    esp,0x10
c0025a5d:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025a64:	a1 60 1c 03 c0       	mov    eax,ds:0xc0031c60
c0025a69:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025a6c:	7d 67                	jge    c0025ad5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025a6e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025a71:	8b 04 85 80 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce380]
c0025a78:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a7b:	83 ec 08             	sub    esp,0x8
c0025a7e:	52                   	push   edx
c0025a7f:	50                   	push   eax
c0025a80:	e8 d1 fc ff ff       	call   c0025756 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025a85:	83 c4 10             	add    esp,0x10
c0025a88:	84 c0                	test   al,al
c0025a8a:	74 44                	je     c0025ad0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025a8c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025a8f:	8b 1c 85 80 1c 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce380]
c0025a96:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025a9a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025a9d:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025aa1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025aa4:	83 c0 20             	add    eax,0x20
c0025aa7:	0f b6 f0             	movzx  esi,al
c0025aaa:	b8 00 00 00 00       	mov    eax,0x0
c0025aaf:	99                   	cdq    
c0025ab0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025ab3:	0f b6 c9             	movzx  ecx,cl
c0025ab6:	83 ec 04             	sub    esp,0x4
c0025ab9:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025abc:	57                   	push   edi
c0025abd:	56                   	push   esi
c0025abe:	52                   	push   edx
c0025abf:	50                   	push   eax
c0025ac0:	51                   	push   ecx
c0025ac1:	53                   	push   ebx
c0025ac2:	e8 0b fe ff ff       	call   c00258d2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025ac7:	83 c4 20             	add    esp,0x20
c0025aca:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025ace:	eb 05                	jmp    c0025ad5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025ad0:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025ad3:	eb 8f                	jmp    c0025a64 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025ad5:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025ad8:	83 f0 01             	xor    eax,0x1
c0025adb:	84 c0                	test   al,al
c0025add:	74 10                	je     c0025aef <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025adf:	83 ec 0c             	sub    esp,0xc
c0025ae2:	68 27 c5 02 c0       	push   0xc002c527
c0025ae7:	e8 47 43 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c0025aec:	83 c4 10             	add    esp,0x10
c0025aef:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025af3:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025afa:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025afe:	7f 65                	jg     c0025b65 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025b00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b03:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b06:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b0d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b10:	01 ca                	add    edx,ecx
c0025b12:	83 c2 54             	add    edx,0x54
c0025b15:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025b19:	85 c0                	test   eax,eax
c0025b1b:	75 43                	jne    c0025b60 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025b1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b20:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b23:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b2a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b2d:	01 ca                	add    edx,ecx
c0025b2f:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025b32:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025b35:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b3c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b3f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b46:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b49:	01 ca                	add    edx,ecx
c0025b4b:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025b51:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025b54:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025b58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b5b:	83 e8 20             	sub    eax,0x20
c0025b5e:	eb 1a                	jmp    c0025b7a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025b60:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025b63:	eb 95                	jmp    c0025afa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025b65:	83 ec 0c             	sub    esp,0xc
c0025b68:	68 34 c5 02 c0       	push   0xc002c534
c0025b6d:	e8 c1 42 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c0025b72:	83 c4 10             	add    esp,0x10
c0025b75:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025b7a:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b7d:	5b                   	pop    ebx
c0025b7e:	5e                   	pop    esi
c0025b7f:	5f                   	pop    edi
c0025b80:	5d                   	pop    ebp
c0025b81:	c3                   	ret    

c0025b82 <PIC::disable()>:
c0025b82:	55                   	push   ebp
c0025b83:	89 e5                	mov    ebp,esp
c0025b85:	83 ec 10             	sub    esp,0x10
c0025b88:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025b8e:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025b92:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025b95:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025b99:	ee                   	out    dx,al
c0025b9a:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025ba0:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025ba4:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025ba7:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025bab:	ee                   	out    dx,al
c0025bac:	90                   	nop
c0025bad:	c9                   	leave  
c0025bae:	c3                   	ret    
c0025baf:	90                   	nop

c0025bb0 <PIC::close(int, int, void*)>:
c0025bb0:	55                   	push   ebp
c0025bb1:	89 e5                	mov    ebp,esp
c0025bb3:	83 ec 08             	sub    esp,0x8
c0025bb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bbb:	83 c0 3c             	add    eax,0x3c
c0025bbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bc0:	83 ec 0c             	sub    esp,0xc
c0025bc3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bc6:	ff d0                	call   eax
c0025bc8:	83 c4 10             	add    esp,0x10
c0025bcb:	b8 00 00 00 00       	mov    eax,0x0
c0025bd0:	c9                   	leave  
c0025bd1:	c3                   	ret    

c0025bd2 <PIC::PIC()>:
c0025bd2:	83 ec 0c             	sub    esp,0xc
c0025bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bd9:	83 ec 08             	sub    esp,0x8
c0025bdc:	68 e0 c5 02 c0       	push   0xc002c5e0
c0025be1:	50                   	push   eax
c0025be2:	e8 87 e8 fe ff       	call   c001446e <InterruptController::InterruptController(char const*)>
c0025be7:	83 c4 10             	add    esp,0x10
c0025bea:	ba 0c c6 02 c0       	mov    edx,0xc002c60c
c0025bef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bf3:	89 10                	mov    DWORD PTR [eax],edx
c0025bf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bf9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025bff:	0f b6 d0             	movzx  edx,al
c0025c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c06:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025c0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c11:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c17:	0f b6 d0             	movzx  edx,al
c0025c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c1e:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025c23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c27:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c2d:	8d 50 01             	lea    edx,[eax+0x1]
c0025c30:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025c34:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025c3a:	0f b6 d0             	movzx  edx,al
c0025c3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c41:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025c45:	83 e1 3f             	and    ecx,0x3f
c0025c48:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c50:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c56:	0f b6 d0             	movzx  edx,al
c0025c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c5d:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c68:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c6e:	0f b6 d0             	movzx  edx,al
c0025c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c75:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c7e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c84:	8d 50 01             	lea    edx,[eax+0x1]
c0025c87:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025c8b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025c91:	0f b6 d0             	movzx  edx,al
c0025c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c98:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025c9c:	83 e1 3f             	and    ecx,0x3f
c0025c9f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025ca3:	90                   	nop
c0025ca4:	83 c4 0c             	add    esp,0xc
c0025ca7:	c3                   	ret    

c0025ca8 <PIC::ioWait()>:
c0025ca8:	eb 00                	jmp    c0025caa <PIC::ioWait()+0x2>
c0025caa:	eb 00                	jmp    c0025cac <PIC::ioWait()+0x4>
c0025cac:	90                   	nop
c0025cad:	c3                   	ret    

c0025cae <PIC::getIRQReg(int)>:
c0025cae:	55                   	push   ebp
c0025caf:	89 e5                	mov    ebp,esp
c0025cb1:	83 ec 10             	sub    esp,0x10
c0025cb4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cb7:	0f b6 c0             	movzx  eax,al
c0025cba:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025cc0:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025cc3:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025cc6:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025cca:	ee                   	out    dx,al
c0025ccb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cce:	0f b6 c0             	movzx  eax,al
c0025cd1:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025cd7:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025cda:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025cdd:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025ce1:	ee                   	out    dx,al
c0025ce2:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025ce8:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025cec:	89 c2                	mov    edx,eax
c0025cee:	ec                   	in     al,dx
c0025cef:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025cf2:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025cf5:	0f b6 c0             	movzx  eax,al
c0025cf8:	c1 e0 08             	shl    eax,0x8
c0025cfb:	89 c1                	mov    ecx,eax
c0025cfd:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025d03:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025d07:	89 c2                	mov    edx,eax
c0025d09:	ec                   	in     al,dx
c0025d0a:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025d0d:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025d10:	0f b6 c0             	movzx  eax,al
c0025d13:	09 c8                	or     eax,ecx
c0025d15:	c9                   	leave  
c0025d16:	c3                   	ret    
c0025d17:	90                   	nop

c0025d18 <PIC::eoi(unsigned char)>:
c0025d18:	55                   	push   ebp
c0025d19:	89 e5                	mov    ebp,esp
c0025d1b:	83 ec 14             	sub    esp,0x14
c0025d1e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d21:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025d24:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025d28:	75 1e                	jne    c0025d48 <PIC::eoi(unsigned char)+0x30>
c0025d2a:	6a 0b                	push   0xb
c0025d2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d2f:	e8 7a ff ff ff       	call   c0025cae <PIC::getIRQReg(int)>
c0025d34:	83 c4 08             	add    esp,0x8
c0025d37:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025d3b:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025d3f:	25 80 00 00 00       	and    eax,0x80
c0025d44:	85 c0                	test   eax,eax
c0025d46:	74 5f                	je     c0025da7 <PIC::eoi(unsigned char)+0x8f>
c0025d48:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025d4c:	75 2d                	jne    c0025d7b <PIC::eoi(unsigned char)+0x63>
c0025d4e:	6a 0b                	push   0xb
c0025d50:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d53:	e8 56 ff ff ff       	call   c0025cae <PIC::getIRQReg(int)>
c0025d58:	83 c4 08             	add    esp,0x8
c0025d5b:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025d5f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025d62:	66 85 c0             	test   ax,ax
c0025d65:	78 14                	js     c0025d7b <PIC::eoi(unsigned char)+0x63>
c0025d67:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025d6d:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025d71:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025d74:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025d78:	ee                   	out    dx,al
c0025d79:	eb 2d                	jmp    c0025da8 <PIC::eoi(unsigned char)+0x90>
c0025d7b:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025d7f:	76 12                	jbe    c0025d93 <PIC::eoi(unsigned char)+0x7b>
c0025d81:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025d87:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025d8b:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025d8e:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025d92:	ee                   	out    dx,al
c0025d93:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025d99:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025d9d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025da0:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025da4:	ee                   	out    dx,al
c0025da5:	eb 01                	jmp    c0025da8 <PIC::eoi(unsigned char)+0x90>
c0025da7:	90                   	nop
c0025da8:	c9                   	leave  
c0025da9:	c3                   	ret    

c0025daa <PIC::remap()>:
c0025daa:	55                   	push   ebp
c0025dab:	89 e5                	mov    ebp,esp
c0025dad:	83 ec 48             	sub    esp,0x48
c0025db0:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025db7:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025dbe:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025dc4:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025dc7:	89 c2                	mov    edx,eax
c0025dc9:	ec                   	in     al,dx
c0025dca:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025dcd:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025dd0:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025dd3:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025dd9:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025ddc:	89 c2                	mov    edx,eax
c0025dde:	ec                   	in     al,dx
c0025ddf:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025de2:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025de5:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025de8:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025dee:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025df2:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025df5:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025df8:	ee                   	out    dx,al
c0025df9:	83 ec 0c             	sub    esp,0xc
c0025dfc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025dff:	e8 a4 fe ff ff       	call   c0025ca8 <PIC::ioWait()>
c0025e04:	83 c4 10             	add    esp,0x10
c0025e07:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025e0d:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025e11:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025e14:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025e17:	ee                   	out    dx,al
c0025e18:	83 ec 0c             	sub    esp,0xc
c0025e1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e1e:	e8 85 fe ff ff       	call   c0025ca8 <PIC::ioWait()>
c0025e23:	83 c4 10             	add    esp,0x10
c0025e26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025e29:	0f b6 c0             	movzx  eax,al
c0025e2c:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025e32:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025e35:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025e38:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025e3b:	ee                   	out    dx,al
c0025e3c:	83 ec 0c             	sub    esp,0xc
c0025e3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e42:	e8 61 fe ff ff       	call   c0025ca8 <PIC::ioWait()>
c0025e47:	83 c4 10             	add    esp,0x10
c0025e4a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025e4d:	0f b6 c0             	movzx  eax,al
c0025e50:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025e56:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025e59:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025e5c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025e5f:	ee                   	out    dx,al
c0025e60:	83 ec 0c             	sub    esp,0xc
c0025e63:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e66:	e8 3d fe ff ff       	call   c0025ca8 <PIC::ioWait()>
c0025e6b:	83 c4 10             	add    esp,0x10
c0025e6e:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025e74:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025e78:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025e7b:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025e7e:	ee                   	out    dx,al
c0025e7f:	83 ec 0c             	sub    esp,0xc
c0025e82:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e85:	e8 1e fe ff ff       	call   c0025ca8 <PIC::ioWait()>
c0025e8a:	83 c4 10             	add    esp,0x10
c0025e8d:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025e93:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025e97:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025e9a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e9d:	ee                   	out    dx,al
c0025e9e:	83 ec 0c             	sub    esp,0xc
c0025ea1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ea4:	e8 ff fd ff ff       	call   c0025ca8 <PIC::ioWait()>
c0025ea9:	83 c4 10             	add    esp,0x10
c0025eac:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025eb2:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025eb6:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025eb9:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025ebc:	ee                   	out    dx,al
c0025ebd:	83 ec 0c             	sub    esp,0xc
c0025ec0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ec3:	e8 e0 fd ff ff       	call   c0025ca8 <PIC::ioWait()>
c0025ec8:	83 c4 10             	add    esp,0x10
c0025ecb:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025ed1:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025ed5:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025ed8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025edb:	ee                   	out    dx,al
c0025edc:	83 ec 0c             	sub    esp,0xc
c0025edf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ee2:	e8 c1 fd ff ff       	call   c0025ca8 <PIC::ioWait()>
c0025ee7:	83 c4 10             	add    esp,0x10
c0025eea:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025eee:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025ef4:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025ef7:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025efa:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025efd:	ee                   	out    dx,al
c0025efe:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025f02:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025f08:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025f0b:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025f0e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025f11:	ee                   	out    dx,al
c0025f12:	90                   	nop
c0025f13:	c9                   	leave  
c0025f14:	c3                   	ret    
c0025f15:	90                   	nop

c0025f16 <PIC::open(int, int, void*)>:
c0025f16:	55                   	push   ebp
c0025f17:	89 e5                	mov    ebp,esp
c0025f19:	83 ec 18             	sub    esp,0x18
c0025f1c:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025f22:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025f26:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f29:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f2d:	ee                   	out    dx,al
c0025f2e:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025f34:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025f38:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f3b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f3f:	ee                   	out    dx,al
c0025f40:	83 ec 0c             	sub    esp,0xc
c0025f43:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f46:	e8 5f fe ff ff       	call   c0025daa <PIC::remap()>
c0025f4b:	83 c4 10             	add    esp,0x10
c0025f4e:	b8 00 00 00 00       	mov    eax,0x0
c0025f53:	c9                   	leave  
c0025f54:	c3                   	ret    
c0025f55:	90                   	nop

c0025f56 <APICTimer::close(int, int, void*)>:
c0025f56:	b8 00 00 00 00       	mov    eax,0x0
c0025f5b:	c3                   	ret    

c0025f5c <apicTimerHandler(regs*, void*)>:
c0025f5c:	83 ec 0c             	sub    esp,0xc
c0025f5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f63:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f65:	99                   	cdq    
c0025f66:	52                   	push   edx
c0025f67:	50                   	push   eax
c0025f68:	6a 00                	push   0x0
c0025f6a:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025f6f:	e8 90 07 00 00       	call   c0026704 <__udivdi3>
c0025f74:	83 c4 10             	add    esp,0x10
c0025f77:	83 ec 08             	sub    esp,0x8
c0025f7a:	52                   	push   edx
c0025f7b:	50                   	push   eax
c0025f7c:	e8 44 06 ff ff       	call   c00165c5 <timerHandler(unsigned long long)>
c0025f81:	83 c4 10             	add    esp,0x10
c0025f84:	90                   	nop
c0025f85:	83 c4 0c             	add    esp,0xc
c0025f88:	c3                   	ret    
c0025f89:	90                   	nop

c0025f8a <APICTimer::write(int)>:
c0025f8a:	53                   	push   ebx
c0025f8b:	83 ec 28             	sub    esp,0x28
c0025f8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025f92:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025f96:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025f9c:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c0025fa1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025fa7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025fad:	83 ec 0c             	sub    esp,0xc
c0025fb0:	50                   	push   eax
c0025fb1:	e8 de f4 ff ff       	call   c0025494 <APIC::getBase()>
c0025fb6:	83 c4 10             	add    esp,0x10
c0025fb9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025fbd:	a1 70 df 02 c0       	mov    eax,ds:0xc002df70
c0025fc2:	8b 15 74 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df74
c0025fc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025fcc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fd4:	05 e0 03 00 00       	add    eax,0x3e0
c0025fd9:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025fdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fe3:	05 80 03 00 00       	add    eax,0x380
c0025fe8:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025fee:	fb                   	sti    
c0025fef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ff3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025ff7:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025ffc:	83 d2 00             	adc    edx,0x0
c0025fff:	89 c1                	mov    ecx,eax
c0026001:	89 d3                	mov    ebx,edx
c0026003:	a1 70 df 02 c0       	mov    eax,ds:0xc002df70
c0026008:	8b 15 74 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df74
c002600e:	39 c8                	cmp    eax,ecx
c0026010:	89 d0                	mov    eax,edx
c0026012:	19 d8                	sbb    eax,ebx
c0026014:	73 02                	jae    c0026018 <APICTimer::write(int)+0x8e>
c0026016:	eb d7                	jmp    c0025fef <APICTimer::write(int)+0x65>
c0026018:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002601c:	05 20 03 00 00       	add    eax,0x320
c0026021:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002602b:	05 90 03 00 00       	add    eax,0x390
c0026030:	8b 00                	mov    eax,DWORD PTR [eax]
c0026032:	f7 d0                	not    eax
c0026034:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026038:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002603c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026040:	ba 00 00 00 00       	mov    edx,0x0
c0026045:	f7 f3                	div    ebx
c0026047:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002604b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002604f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026055:	0d 00 00 02 00       	or     eax,0x20000
c002605a:	89 c2                	mov    edx,eax
c002605c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026060:	05 20 03 00 00       	add    eax,0x320
c0026065:	89 10                	mov    DWORD PTR [eax],edx
c0026067:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002606b:	05 e0 03 00 00       	add    eax,0x3e0
c0026070:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026076:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002607a:	05 80 03 00 00       	add    eax,0x380
c002607f:	89 c2                	mov    edx,eax
c0026081:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026085:	89 02                	mov    DWORD PTR [edx],eax
c0026087:	90                   	nop
c0026088:	83 c4 28             	add    esp,0x28
c002608b:	5b                   	pop    ebx
c002608c:	c3                   	ret    
c002608d:	90                   	nop

c002608e <APICTimer::open(int, int, void*)>:
c002608e:	57                   	push   edi
c002608f:	56                   	push   esi
c0026090:	53                   	push   ebx
c0026091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026095:	8b 00                	mov    eax,DWORD PTR [eax]
c0026097:	83 c0 24             	add    eax,0x24
c002609a:	8b 00                	mov    eax,DWORD PTR [eax]
c002609c:	83 ec 08             	sub    esp,0x8
c002609f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260a7:	ff d0                	call   eax
c00260a9:	83 c4 10             	add    esp,0x10
c00260ac:	a1 08 d9 02 c0       	mov    eax,ds:0xc002d908
c00260b1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00260b7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00260bd:	83 ec 0c             	sub    esp,0xc
c00260c0:	50                   	push   eax
c00260c1:	e8 ce f3 ff ff       	call   c0025494 <APIC::getBase()>
c00260c6:	83 c4 10             	add    esp,0x10
c00260c9:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00260cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260d3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00260d9:	0f b6 f8             	movzx  edi,al
c00260dc:	89 d0                	mov    eax,edx
c00260de:	ba 00 00 00 00       	mov    edx,0x0
c00260e3:	89 c1                	mov    ecx,eax
c00260e5:	80 e5 ff             	and    ch,0xff
c00260e8:	89 cb                	mov    ebx,ecx
c00260ea:	0f b6 f2             	movzx  esi,dl
c00260ed:	89 d8                	mov    eax,ebx
c00260ef:	89 f2                	mov    edx,esi
c00260f1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00260f5:	8d 5f 08             	lea    ebx,[edi+0x8]
c00260f8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00260fc:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026100:	83 e0 00             	and    eax,0x0
c0026103:	09 d0                	or     eax,edx
c0026105:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002610d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026113:	8d 50 01             	lea    edx,[eax+0x1]
c0026116:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002611a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026120:	0f b6 d0             	movzx  edx,al
c0026123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026127:	83 c2 08             	add    edx,0x8
c002612a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002612e:	0f b6 c9             	movzx  ecx,cl
c0026131:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026137:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002613b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002613f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026143:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002614d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026151:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026157:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002615b:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026161:	83 ec 0c             	sub    esp,0xc
c0026164:	51                   	push   ecx
c0026165:	6a 01                	push   0x1
c0026167:	68 5c 5f 02 c0       	push   0xc0025f5c
c002616c:	52                   	push   edx
c002616d:	50                   	push   eax
c002616e:	e8 05 d9 fe ff       	call   c0013a78 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026173:	83 c4 20             	add    esp,0x20
c0026176:	89 c2                	mov    edx,eax
c0026178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002617c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026182:	b8 00 00 00 00       	mov    eax,0x0
c0026187:	5b                   	pop    ebx
c0026188:	5e                   	pop    esi
c0026189:	5f                   	pop    edi
c002618a:	c3                   	ret    
c002618b:	90                   	nop

c002618c <APICTimer::APICTimer()>:
c002618c:	83 ec 0c             	sub    esp,0xc
c002618f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026193:	83 ec 08             	sub    esp,0x8
c0026196:	68 4c c6 02 c0       	push   0xc002c64c
c002619b:	50                   	push   eax
c002619c:	e8 95 03 ff ff       	call   c0016536 <Timer::Timer(char const*)>
c00261a1:	83 c4 10             	add    esp,0x10
c00261a4:	ba 60 c6 02 c0       	mov    edx,0xc002c660
c00261a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261ad:	89 10                	mov    DWORD PTR [eax],edx
c00261af:	90                   	nop
c00261b0:	83 c4 0c             	add    esp,0xc
c00261b3:	c3                   	ret    

c00261b4 <PIT::write(int)>:
c00261b4:	83 ec 10             	sub    esp,0x10
c00261b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00261bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00261bf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00261c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00261c9:	a3 a4 1c 03 c0       	mov    ds:0xc0031ca4,eax
c00261ce:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00261d3:	99                   	cdq    
c00261d4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00261d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00261dc:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00261e3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00261e8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00261ec:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00261f1:	ee                   	out    dx,al
c00261f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00261f6:	0f b6 c0             	movzx  eax,al
c00261f9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026200:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026204:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026208:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002620d:	ee                   	out    dx,al
c002620e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026212:	c1 f8 08             	sar    eax,0x8
c0026215:	0f b6 c0             	movzx  eax,al
c0026218:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002621f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026223:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026227:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002622c:	ee                   	out    dx,al
c002622d:	90                   	nop
c002622e:	83 c4 10             	add    esp,0x10
c0026231:	c3                   	ret    

c0026232 <pitHandler(regs*, void*)>:
c0026232:	83 ec 0c             	sub    esp,0xc
c0026235:	a1 a4 1c 03 c0       	mov    eax,ds:0xc0031ca4
c002623a:	99                   	cdq    
c002623b:	52                   	push   edx
c002623c:	50                   	push   eax
c002623d:	6a 00                	push   0x0
c002623f:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026244:	e8 bb 04 00 00       	call   c0026704 <__udivdi3>
c0026249:	83 c4 10             	add    esp,0x10
c002624c:	83 ec 08             	sub    esp,0x8
c002624f:	52                   	push   edx
c0026250:	50                   	push   eax
c0026251:	e8 6f 03 ff ff       	call   c00165c5 <timerHandler(unsigned long long)>
c0026256:	83 c4 10             	add    esp,0x10
c0026259:	90                   	nop
c002625a:	83 c4 0c             	add    esp,0xc
c002625d:	c3                   	ret    

c002625e <PIT::open(int, int, void*)>:
c002625e:	83 ec 0c             	sub    esp,0xc
c0026261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026265:	8b 00                	mov    eax,DWORD PTR [eax]
c0026267:	83 c0 24             	add    eax,0x24
c002626a:	8b 00                	mov    eax,DWORD PTR [eax]
c002626c:	83 ec 08             	sub    esp,0x8
c002626f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026273:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026277:	ff d0                	call   eax
c0026279:	83 c4 10             	add    esp,0x10
c002627c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026280:	83 ec 0c             	sub    esp,0xc
c0026283:	6a 00                	push   0x0
c0026285:	6a 01                	push   0x1
c0026287:	68 32 62 02 c0       	push   0xc0026232
c002628c:	6a 00                	push   0x0
c002628e:	50                   	push   eax
c002628f:	e8 e4 d7 fe ff       	call   c0013a78 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026294:	83 c4 20             	add    esp,0x20
c0026297:	89 c2                	mov    edx,eax
c0026299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002629d:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00262a3:	b8 00 00 00 00       	mov    eax,0x0
c00262a8:	83 c4 0c             	add    esp,0xc
c00262ab:	c3                   	ret    

c00262ac <PIT::close(int, int, void*)>:
c00262ac:	83 ec 0c             	sub    esp,0xc
c00262af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262b3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00262bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262c1:	6a 01                	push   0x1
c00262c3:	68 32 62 02 c0       	push   0xc0026232
c00262c8:	6a 00                	push   0x0
c00262ca:	50                   	push   eax
c00262cb:	e8 f2 d7 fe ff       	call   c0013ac2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00262d0:	83 c4 10             	add    esp,0x10
c00262d3:	b8 00 00 00 00       	mov    eax,0x0
c00262d8:	83 c4 0c             	add    esp,0xc
c00262db:	c3                   	ret    

c00262dc <PIT::PIT()>:
c00262dc:	83 ec 0c             	sub    esp,0xc
c00262df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262e3:	83 ec 08             	sub    esp,0x8
c00262e6:	68 88 c6 02 c0       	push   0xc002c688
c00262eb:	50                   	push   eax
c00262ec:	e8 45 02 ff ff       	call   c0016536 <Timer::Timer(char const*)>
c00262f1:	83 c4 10             	add    esp,0x10
c00262f4:	ba b0 c6 02 c0       	mov    edx,0xc002c6b0
c00262f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262fd:	89 10                	mov    DWORD PTR [eax],edx
c00262ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026303:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026309:	0f b6 d0             	movzx  edx,al
c002630c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026310:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002631b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026321:	0f b6 d0             	movzx  edx,al
c0026324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026328:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002632d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026331:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026337:	8d 50 01             	lea    edx,[eax+0x1]
c002633a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002633e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026344:	0f b6 d0             	movzx  edx,al
c0026347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002634b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002634f:	83 e1 3f             	and    ecx,0x3f
c0026352:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026356:	90                   	nop
c0026357:	83 c4 0c             	add    esp,0xc
c002635a:	c3                   	ret    
c002635b:	66 90                	xchg   ax,ax
c002635d:	66 90                	xchg   ax,ax
c002635f:	90                   	nop

c0026360 <avxDetect>:
c0026360:	b8 00 00 00 00       	mov    eax,0x0
c0026365:	c3                   	ret    

c0026366 <avxSave>:
c0026366:	c3                   	ret    

c0026367 <avxLoad>:
c0026367:	c3                   	ret    

c0026368 <avxInit>:
c0026368:	c3                   	ret    

c0026369 <avxClose>:
c0026369:	c3                   	ret    

c002636a <wouldSheSayYes>:
c002636a:	c3                   	ret    
c002636b:	49                   	dec    ecx
c002636c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026370:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026374:	75 20                	jne    c0026396 <sseDetect.noSSE+0x1>
c0026376:	4e                   	dec    esi
c0026377:	79 61                	jns    c00263da <x87Detect+0x14>
c0026379:	68 2e 2e 2e 00       	push   0x2e2e2e
c002637e:	66 90                	xchg   ax,ax

c0026380 <absolutelyNoChanceInHell>:
c0026380:	b8 01 00 00 00       	mov    eax,0x1
c0026385:	0f a2                	cpuid  
c0026387:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002638d:	74 06                	je     c0026395 <sseDetect.noSSE>
c002638f:	b8 01 00 00 00       	mov    eax,0x1
c0026394:	c3                   	ret    

c0026395 <sseDetect.noSSE>:
c0026395:	31 c0                	xor    eax,eax
c0026397:	c3                   	ret    

c0026398 <sseSave>:
c0026398:	0f ae 44 24 04       	fxsave [esp+0x4]
c002639d:	c3                   	ret    

c002639e <sseLoad>:
c002639e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00263a3:	c3                   	ret    

c00263a4 <sseInit>:
c00263a4:	e8 49 00 00 00       	call   c00263f2 <x87Init>
c00263a9:	0f 20 e0             	mov    eax,cr4
c00263ac:	66 0d 00 06          	or     ax,0x600
c00263b0:	0f 22 e0             	mov    cr4,eax
c00263b3:	c3                   	ret    

c00263b4 <sseClose>:
c00263b4:	c3                   	ret    
c00263b5:	66 90                	xchg   ax,ax
c00263b7:	66 90                	xchg   ax,ax
c00263b9:	66 90                	xchg   ax,ax
c00263bb:	66 90                	xchg   ax,ax
c00263bd:	66 90                	xchg   ax,ax
c00263bf:	90                   	nop

c00263c0 <value_37F>:
c00263c0:	7f 03                	jg     c00263c5 <value_37A+0x1>

c00263c2 <value_37E>:
c00263c2:	7e 03                	jle    c00263c7 <x87Detect+0x1>

c00263c4 <value_37A>:
c00263c4:	7a 03                	jp     c00263c9 <x87Detect+0x3>

c00263c6 <x87Detect>:
c00263c6:	b8 01 00 00 00       	mov    eax,0x1
c00263cb:	0f a2                	cpuid  
c00263cd:	f7 c2 01 00 00 00    	test   edx,0x1
c00263d3:	74 06                	je     c00263db <x87Detect.nox87>
c00263d5:	b8 01 00 00 00       	mov    eax,0x1
c00263da:	c3                   	ret    

c00263db <x87Detect.nox87>:
c00263db:	b8 00 00 00 00       	mov    eax,0x0
c00263e0:	c3                   	ret    

c00263e1 <x87Save>:
c00263e1:	55                   	push   ebp
c00263e2:	89 e5                	mov    ebp,esp
c00263e4:	9b dd 75 08          	fsave  [ebp+0x8]
c00263e8:	c9                   	leave  
c00263e9:	c3                   	ret    

c00263ea <x87Load>:
c00263ea:	55                   	push   ebp
c00263eb:	89 e5                	mov    ebp,esp
c00263ed:	dd 65 08             	frstor [ebp+0x8]
c00263f0:	c9                   	leave  
c00263f1:	c3                   	ret    

c00263f2 <x87Init>:
c00263f2:	9b db e3             	finit  
c00263f5:	0f 20 c0             	mov    eax,cr0
c00263f8:	66 25 fb ff          	and    ax,0xfffb
c00263fc:	66 0d 22 00          	or     ax,0x22
c0026400:	0f 22 c0             	mov    cr0,eax
c0026403:	0f 06                	clts   
c0026405:	d9 2d c4 63 02 c0    	fldcw  WORD PTR ds:0xc00263c4
c002640b:	c3                   	ret    

c002640c <x87Close>:
c002640c:	c3                   	ret    
c002640d:	66 90                	xchg   ax,ax
c002640f:	90                   	nop

c0026410 <__do_global_ctors_aux>:
c0026410:	a1 04 90 02 c0       	mov    eax,ds:0xc0029004
c0026415:	83 f8 ff             	cmp    eax,0xffffffff
c0026418:	74 1a                	je     c0026434 <__do_global_ctors_aux+0x24>
c002641a:	55                   	push   ebp
c002641b:	89 e5                	mov    ebp,esp
c002641d:	53                   	push   ebx
c002641e:	52                   	push   edx
c002641f:	bb 04 90 02 c0       	mov    ebx,0xc0029004
c0026424:	ff d0                	call   eax
c0026426:	83 eb 04             	sub    ebx,0x4
c0026429:	8b 03                	mov    eax,DWORD PTR [ebx]
c002642b:	83 f8 ff             	cmp    eax,0xffffffff
c002642e:	75 f4                	jne    c0026424 <__do_global_ctors_aux+0x14>
c0026430:	58                   	pop    eax
c0026431:	5b                   	pop    ebx
c0026432:	5d                   	pop    ebp
c0026433:	c3                   	ret    
c0026434:	c3                   	ret    
c0026435:	66 90                	xchg   ax,ax
c0026437:	90                   	nop

c0026438 <__divdi3>:
c0026438:	55                   	push   ebp
c0026439:	57                   	push   edi
c002643a:	56                   	push   esi
c002643b:	53                   	push   ebx
c002643c:	83 ec 1c             	sub    esp,0x1c
c002643f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026443:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026447:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002644a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002644e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026452:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026456:	85 db                	test   ebx,ebx
c0026458:	0f 88 8e 00 00 00    	js     c00264ec <__divdi3+0xb4>
c002645e:	89 dd                	mov    ebp,ebx
c0026460:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026468:	89 d3                	mov    ebx,edx
c002646a:	85 d2                	test   edx,edx
c002646c:	79 0d                	jns    c002647b <__divdi3+0x43>
c002646e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026472:	f7 d8                	neg    eax
c0026474:	83 d2 00             	adc    edx,0x0
c0026477:	f7 da                	neg    edx
c0026479:	89 d3                	mov    ebx,edx
c002647b:	89 c7                	mov    edi,eax
c002647d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026480:	85 db                	test   ebx,ebx
c0026482:	75 48                	jne    c00264cc <__divdi3+0x94>
c0026484:	39 ef                	cmp    edi,ebp
c0026486:	76 24                	jbe    c00264ac <__divdi3+0x74>
c0026488:	89 ea                	mov    edx,ebp
c002648a:	f7 f7                	div    edi
c002648c:	89 c1                	mov    ecx,eax
c002648e:	31 f6                	xor    esi,esi
c0026490:	89 c8                	mov    eax,ecx
c0026492:	89 f2                	mov    edx,esi
c0026494:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026498:	85 c9                	test   ecx,ecx
c002649a:	74 07                	je     c00264a3 <__divdi3+0x6b>
c002649c:	f7 d8                	neg    eax
c002649e:	83 d2 00             	adc    edx,0x0
c00264a1:	f7 da                	neg    edx
c00264a3:	83 c4 1c             	add    esp,0x1c
c00264a6:	5b                   	pop    ebx
c00264a7:	5e                   	pop    esi
c00264a8:	5f                   	pop    edi
c00264a9:	5d                   	pop    ebp
c00264aa:	c3                   	ret    
c00264ab:	90                   	nop
c00264ac:	85 ff                	test   edi,edi
c00264ae:	75 0b                	jne    c00264bb <__divdi3+0x83>
c00264b0:	b8 01 00 00 00       	mov    eax,0x1
c00264b5:	31 d2                	xor    edx,edx
c00264b7:	f7 f3                	div    ebx
c00264b9:	89 c7                	mov    edi,eax
c00264bb:	31 d2                	xor    edx,edx
c00264bd:	89 e8                	mov    eax,ebp
c00264bf:	f7 f7                	div    edi
c00264c1:	89 c6                	mov    esi,eax
c00264c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00264c6:	f7 f7                	div    edi
c00264c8:	89 c1                	mov    ecx,eax
c00264ca:	eb c4                	jmp    c0026490 <__divdi3+0x58>
c00264cc:	39 eb                	cmp    ebx,ebp
c00264ce:	77 3c                	ja     c002650c <__divdi3+0xd4>
c00264d0:	0f bd f3             	bsr    esi,ebx
c00264d3:	83 f6 1f             	xor    esi,0x1f
c00264d6:	75 40                	jne    c0026518 <__divdi3+0xe0>
c00264d8:	39 eb                	cmp    ebx,ebp
c00264da:	72 09                	jb     c00264e5 <__divdi3+0xad>
c00264dc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00264df:	0f 87 97 00 00 00    	ja     c002657c <__divdi3+0x144>
c00264e5:	b9 01 00 00 00       	mov    ecx,0x1
c00264ea:	eb a4                	jmp    c0026490 <__divdi3+0x58>
c00264ec:	f7 d9                	neg    ecx
c00264ee:	83 d3 00             	adc    ebx,0x0
c00264f1:	f7 db                	neg    ebx
c00264f3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00264f6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00264fa:	89 dd                	mov    ebp,ebx
c00264fc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026504:	e9 5f ff ff ff       	jmp    c0026468 <__divdi3+0x30>
c0026509:	8d 76 00             	lea    esi,[esi+0x0]
c002650c:	31 f6                	xor    esi,esi
c002650e:	31 c9                	xor    ecx,ecx
c0026510:	e9 7b ff ff ff       	jmp    c0026490 <__divdi3+0x58>
c0026515:	8d 76 00             	lea    esi,[esi+0x0]
c0026518:	b8 20 00 00 00       	mov    eax,0x20
c002651d:	29 f0                	sub    eax,esi
c002651f:	89 f1                	mov    ecx,esi
c0026521:	d3 e3                	shl    ebx,cl
c0026523:	89 fa                	mov    edx,edi
c0026525:	88 c1                	mov    cl,al
c0026527:	d3 ea                	shr    edx,cl
c0026529:	09 da                	or     edx,ebx
c002652b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002652f:	89 f1                	mov    ecx,esi
c0026531:	d3 e7                	shl    edi,cl
c0026533:	89 eb                	mov    ebx,ebp
c0026535:	88 c1                	mov    cl,al
c0026537:	d3 eb                	shr    ebx,cl
c0026539:	89 f1                	mov    ecx,esi
c002653b:	d3 e5                	shl    ebp,cl
c002653d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026540:	88 c1                	mov    cl,al
c0026542:	d3 ea                	shr    edx,cl
c0026544:	09 d5                	or     ebp,edx
c0026546:	89 e8                	mov    eax,ebp
c0026548:	89 da                	mov    edx,ebx
c002654a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002654e:	89 d3                	mov    ebx,edx
c0026550:	89 c5                	mov    ebp,eax
c0026552:	f7 e7                	mul    edi
c0026554:	39 d3                	cmp    ebx,edx
c0026556:	72 18                	jb     c0026570 <__divdi3+0x138>
c0026558:	74 0a                	je     c0026564 <__divdi3+0x12c>
c002655a:	89 e9                	mov    ecx,ebp
c002655c:	31 f6                	xor    esi,esi
c002655e:	e9 2d ff ff ff       	jmp    c0026490 <__divdi3+0x58>
c0026563:	90                   	nop
c0026564:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026567:	89 f1                	mov    ecx,esi
c0026569:	d3 e7                	shl    edi,cl
c002656b:	39 c7                	cmp    edi,eax
c002656d:	73 eb                	jae    c002655a <__divdi3+0x122>
c002656f:	90                   	nop
c0026570:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026573:	31 f6                	xor    esi,esi
c0026575:	e9 16 ff ff ff       	jmp    c0026490 <__divdi3+0x58>
c002657a:	66 90                	xchg   ax,ax
c002657c:	31 c9                	xor    ecx,ecx
c002657e:	e9 0d ff ff ff       	jmp    c0026490 <__divdi3+0x58>
c0026583:	90                   	nop

c0026584 <__moddi3>:
c0026584:	55                   	push   ebp
c0026585:	57                   	push   edi
c0026586:	56                   	push   esi
c0026587:	53                   	push   ebx
c0026588:	83 ec 2c             	sub    esp,0x2c
c002658b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002658f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026593:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026597:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002659b:	85 db                	test   ebx,ebx
c002659d:	0f 88 85 00 00 00    	js     c0026628 <__moddi3+0xa4>
c00265a3:	89 de                	mov    esi,ebx
c00265a5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00265ad:	89 d7                	mov    edi,edx
c00265af:	85 d2                	test   edx,edx
c00265b1:	79 09                	jns    c00265bc <__moddi3+0x38>
c00265b3:	f7 d8                	neg    eax
c00265b5:	83 d2 00             	adc    edx,0x0
c00265b8:	f7 da                	neg    edx
c00265ba:	89 d7                	mov    edi,edx
c00265bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00265c0:	89 cd                	mov    ebp,ecx
c00265c2:	85 ff                	test   edi,edi
c00265c4:	75 52                	jne    c0026618 <__moddi3+0x94>
c00265c6:	89 c3                	mov    ebx,eax
c00265c8:	39 f0                	cmp    eax,esi
c00265ca:	76 24                	jbe    c00265f0 <__moddi3+0x6c>
c00265cc:	89 c8                	mov    eax,ecx
c00265ce:	89 f2                	mov    edx,esi
c00265d0:	f7 f3                	div    ebx
c00265d2:	89 d6                	mov    esi,edx
c00265d4:	89 f0                	mov    eax,esi
c00265d6:	31 d2                	xor    edx,edx
c00265d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00265dc:	85 c9                	test   ecx,ecx
c00265de:	74 07                	je     c00265e7 <__moddi3+0x63>
c00265e0:	f7 d8                	neg    eax
c00265e2:	83 d2 00             	adc    edx,0x0
c00265e5:	f7 da                	neg    edx
c00265e7:	83 c4 2c             	add    esp,0x2c
c00265ea:	5b                   	pop    ebx
c00265eb:	5e                   	pop    esi
c00265ec:	5f                   	pop    edi
c00265ed:	5d                   	pop    ebp
c00265ee:	c3                   	ret    
c00265ef:	90                   	nop
c00265f0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00265f4:	85 db                	test   ebx,ebx
c00265f6:	75 0d                	jne    c0026605 <__moddi3+0x81>
c00265f8:	b8 01 00 00 00       	mov    eax,0x1
c00265fd:	31 d2                	xor    edx,edx
c00265ff:	f7 f7                	div    edi
c0026601:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026605:	89 f0                	mov    eax,esi
c0026607:	31 d2                	xor    edx,edx
c0026609:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002660d:	f7 f7                	div    edi
c002660f:	89 e8                	mov    eax,ebp
c0026611:	f7 f7                	div    edi
c0026613:	89 d6                	mov    esi,edx
c0026615:	eb bd                	jmp    c00265d4 <__moddi3+0x50>
c0026617:	90                   	nop
c0026618:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002661c:	39 f7                	cmp    edi,esi
c002661e:	76 20                	jbe    c0026640 <__moddi3+0xbc>
c0026620:	89 c8                	mov    eax,ecx
c0026622:	89 f2                	mov    edx,esi
c0026624:	eb b2                	jmp    c00265d8 <__moddi3+0x54>
c0026626:	66 90                	xchg   ax,ax
c0026628:	f7 d9                	neg    ecx
c002662a:	83 d3 00             	adc    ebx,0x0
c002662d:	f7 db                	neg    ebx
c002662f:	89 de                	mov    esi,ebx
c0026631:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026639:	e9 6f ff ff ff       	jmp    c00265ad <__moddi3+0x29>
c002663e:	66 90                	xchg   ax,ax
c0026640:	0f bd c7             	bsr    eax,edi
c0026643:	83 f0 1f             	xor    eax,0x1f
c0026646:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002664a:	75 24                	jne    c0026670 <__moddi3+0xec>
c002664c:	39 f7                	cmp    edi,esi
c002664e:	72 06                	jb     c0026656 <__moddi3+0xd2>
c0026650:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026654:	77 0c                	ja     c0026662 <__moddi3+0xde>
c0026656:	89 e9                	mov    ecx,ebp
c0026658:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002665c:	19 fe                	sbb    esi,edi
c002665e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026662:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026666:	89 f2                	mov    edx,esi
c0026668:	e9 6b ff ff ff       	jmp    c00265d8 <__moddi3+0x54>
c002666d:	8d 76 00             	lea    esi,[esi+0x0]
c0026670:	b8 20 00 00 00       	mov    eax,0x20
c0026675:	89 c2                	mov    edx,eax
c0026677:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002667b:	29 da                	sub    edx,ebx
c002667d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026681:	88 d9                	mov    cl,bl
c0026683:	d3 e7                	shl    edi,cl
c0026685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026689:	88 d1                	mov    cl,dl
c002668b:	d3 e8                	shr    eax,cl
c002668d:	09 c7                	or     edi,eax
c002668f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026693:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026697:	89 d8                	mov    eax,ebx
c0026699:	88 d9                	mov    cl,bl
c002669b:	d3 e7                	shl    edi,cl
c002669d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00266a1:	89 f3                	mov    ebx,esi
c00266a3:	88 d1                	mov    cl,dl
c00266a5:	d3 eb                	shr    ebx,cl
c00266a7:	89 c7                	mov    edi,eax
c00266a9:	88 c1                	mov    cl,al
c00266ab:	d3 e6                	shl    esi,cl
c00266ad:	89 e8                	mov    eax,ebp
c00266af:	88 d1                	mov    cl,dl
c00266b1:	d3 e8                	shr    eax,cl
c00266b3:	09 f0                	or     eax,esi
c00266b5:	89 f9                	mov    ecx,edi
c00266b7:	d3 e5                	shl    ebp,cl
c00266b9:	89 da                	mov    edx,ebx
c00266bb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00266bf:	89 d3                	mov    ebx,edx
c00266c1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00266c5:	89 c6                	mov    esi,eax
c00266c7:	89 d1                	mov    ecx,edx
c00266c9:	39 d3                	cmp    ebx,edx
c00266cb:	72 27                	jb     c00266f4 <__moddi3+0x170>
c00266cd:	74 21                	je     c00266f0 <__moddi3+0x16c>
c00266cf:	29 f5                	sub    ebp,esi
c00266d1:	19 cb                	sbb    ebx,ecx
c00266d3:	89 de                	mov    esi,ebx
c00266d5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00266d9:	d3 e6                	shl    esi,cl
c00266db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00266df:	89 f9                	mov    ecx,edi
c00266e1:	d3 ed                	shr    ebp,cl
c00266e3:	09 ee                	or     esi,ebp
c00266e5:	89 f0                	mov    eax,esi
c00266e7:	d3 eb                	shr    ebx,cl
c00266e9:	89 da                	mov    edx,ebx
c00266eb:	e9 e8 fe ff ff       	jmp    c00265d8 <__moddi3+0x54>
c00266f0:	39 c5                	cmp    ebp,eax
c00266f2:	73 db                	jae    c00266cf <__moddi3+0x14b>
c00266f4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00266f8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00266fc:	89 d1                	mov    ecx,edx
c00266fe:	89 c6                	mov    esi,eax
c0026700:	eb cd                	jmp    c00266cf <__moddi3+0x14b>
c0026702:	66 90                	xchg   ax,ax

c0026704 <__udivdi3>:
c0026704:	55                   	push   ebp
c0026705:	57                   	push   edi
c0026706:	56                   	push   esi
c0026707:	53                   	push   ebx
c0026708:	83 ec 1c             	sub    esp,0x1c
c002670b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002670f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026713:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026717:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002671b:	85 d2                	test   edx,edx
c002671d:	75 41                	jne    c0026760 <__udivdi3+0x5c>
c002671f:	39 f7                	cmp    edi,esi
c0026721:	76 15                	jbe    c0026738 <__udivdi3+0x34>
c0026723:	89 e8                	mov    eax,ebp
c0026725:	89 f2                	mov    edx,esi
c0026727:	f7 f7                	div    edi
c0026729:	31 db                	xor    ebx,ebx
c002672b:	89 da                	mov    edx,ebx
c002672d:	83 c4 1c             	add    esp,0x1c
c0026730:	5b                   	pop    ebx
c0026731:	5e                   	pop    esi
c0026732:	5f                   	pop    edi
c0026733:	5d                   	pop    ebp
c0026734:	c3                   	ret    
c0026735:	8d 76 00             	lea    esi,[esi+0x0]
c0026738:	89 f9                	mov    ecx,edi
c002673a:	85 ff                	test   edi,edi
c002673c:	75 0b                	jne    c0026749 <__udivdi3+0x45>
c002673e:	b8 01 00 00 00       	mov    eax,0x1
c0026743:	31 d2                	xor    edx,edx
c0026745:	f7 f7                	div    edi
c0026747:	89 c1                	mov    ecx,eax
c0026749:	31 d2                	xor    edx,edx
c002674b:	89 f0                	mov    eax,esi
c002674d:	f7 f1                	div    ecx
c002674f:	89 c3                	mov    ebx,eax
c0026751:	89 e8                	mov    eax,ebp
c0026753:	f7 f1                	div    ecx
c0026755:	89 da                	mov    edx,ebx
c0026757:	83 c4 1c             	add    esp,0x1c
c002675a:	5b                   	pop    ebx
c002675b:	5e                   	pop    esi
c002675c:	5f                   	pop    edi
c002675d:	5d                   	pop    ebp
c002675e:	c3                   	ret    
c002675f:	90                   	nop
c0026760:	39 f2                	cmp    edx,esi
c0026762:	77 1c                	ja     c0026780 <__udivdi3+0x7c>
c0026764:	0f bd da             	bsr    ebx,edx
c0026767:	83 f3 1f             	xor    ebx,0x1f
c002676a:	75 24                	jne    c0026790 <__udivdi3+0x8c>
c002676c:	39 f2                	cmp    edx,esi
c002676e:	72 08                	jb     c0026778 <__udivdi3+0x74>
c0026770:	39 ef                	cmp    edi,ebp
c0026772:	0f 87 84 00 00 00    	ja     c00267fc <__udivdi3+0xf8>
c0026778:	b8 01 00 00 00       	mov    eax,0x1
c002677d:	eb ac                	jmp    c002672b <__udivdi3+0x27>
c002677f:	90                   	nop
c0026780:	31 db                	xor    ebx,ebx
c0026782:	31 c0                	xor    eax,eax
c0026784:	89 da                	mov    edx,ebx
c0026786:	83 c4 1c             	add    esp,0x1c
c0026789:	5b                   	pop    ebx
c002678a:	5e                   	pop    esi
c002678b:	5f                   	pop    edi
c002678c:	5d                   	pop    ebp
c002678d:	c3                   	ret    
c002678e:	66 90                	xchg   ax,ax
c0026790:	b8 20 00 00 00       	mov    eax,0x20
c0026795:	29 d8                	sub    eax,ebx
c0026797:	88 d9                	mov    cl,bl
c0026799:	d3 e2                	shl    edx,cl
c002679b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002679f:	89 fa                	mov    edx,edi
c00267a1:	88 c1                	mov    cl,al
c00267a3:	d3 ea                	shr    edx,cl
c00267a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00267a9:	09 d1                	or     ecx,edx
c00267ab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00267af:	88 d9                	mov    cl,bl
c00267b1:	d3 e7                	shl    edi,cl
c00267b3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00267b7:	89 f7                	mov    edi,esi
c00267b9:	88 c1                	mov    cl,al
c00267bb:	d3 ef                	shr    edi,cl
c00267bd:	88 d9                	mov    cl,bl
c00267bf:	d3 e6                	shl    esi,cl
c00267c1:	89 ea                	mov    edx,ebp
c00267c3:	88 c1                	mov    cl,al
c00267c5:	d3 ea                	shr    edx,cl
c00267c7:	09 d6                	or     esi,edx
c00267c9:	89 f0                	mov    eax,esi
c00267cb:	89 fa                	mov    edx,edi
c00267cd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00267d1:	89 d7                	mov    edi,edx
c00267d3:	89 c6                	mov    esi,eax
c00267d5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00267d9:	39 d7                	cmp    edi,edx
c00267db:	72 13                	jb     c00267f0 <__udivdi3+0xec>
c00267dd:	74 09                	je     c00267e8 <__udivdi3+0xe4>
c00267df:	89 f0                	mov    eax,esi
c00267e1:	31 db                	xor    ebx,ebx
c00267e3:	e9 43 ff ff ff       	jmp    c002672b <__udivdi3+0x27>
c00267e8:	88 d9                	mov    cl,bl
c00267ea:	d3 e5                	shl    ebp,cl
c00267ec:	39 c5                	cmp    ebp,eax
c00267ee:	73 ef                	jae    c00267df <__udivdi3+0xdb>
c00267f0:	8d 46 ff             	lea    eax,[esi-0x1]
c00267f3:	31 db                	xor    ebx,ebx
c00267f5:	e9 31 ff ff ff       	jmp    c002672b <__udivdi3+0x27>
c00267fa:	66 90                	xchg   ax,ax
c00267fc:	31 c0                	xor    eax,eax
c00267fe:	e9 28 ff ff ff       	jmp    c002672b <__udivdi3+0x27>
c0026803:	90                   	nop

c0026804 <__umoddi3>:
c0026804:	55                   	push   ebp
c0026805:	57                   	push   edi
c0026806:	56                   	push   esi
c0026807:	53                   	push   ebx
c0026808:	83 ec 1c             	sub    esp,0x1c
c002680b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002680f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026813:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026817:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002681b:	89 da                	mov    edx,ebx
c002681d:	85 c0                	test   eax,eax
c002681f:	75 37                	jne    c0026858 <__umoddi3+0x54>
c0026821:	39 df                	cmp    edi,ebx
c0026823:	76 13                	jbe    c0026838 <__umoddi3+0x34>
c0026825:	89 f0                	mov    eax,esi
c0026827:	f7 f7                	div    edi
c0026829:	89 d0                	mov    eax,edx
c002682b:	31 d2                	xor    edx,edx
c002682d:	83 c4 1c             	add    esp,0x1c
c0026830:	5b                   	pop    ebx
c0026831:	5e                   	pop    esi
c0026832:	5f                   	pop    edi
c0026833:	5d                   	pop    ebp
c0026834:	c3                   	ret    
c0026835:	8d 76 00             	lea    esi,[esi+0x0]
c0026838:	89 fd                	mov    ebp,edi
c002683a:	85 ff                	test   edi,edi
c002683c:	75 0b                	jne    c0026849 <__umoddi3+0x45>
c002683e:	b8 01 00 00 00       	mov    eax,0x1
c0026843:	31 d2                	xor    edx,edx
c0026845:	f7 f7                	div    edi
c0026847:	89 c5                	mov    ebp,eax
c0026849:	89 d8                	mov    eax,ebx
c002684b:	31 d2                	xor    edx,edx
c002684d:	f7 f5                	div    ebp
c002684f:	89 f0                	mov    eax,esi
c0026851:	f7 f5                	div    ebp
c0026853:	89 d0                	mov    eax,edx
c0026855:	eb d4                	jmp    c002682b <__umoddi3+0x27>
c0026857:	90                   	nop
c0026858:	89 f1                	mov    ecx,esi
c002685a:	39 d8                	cmp    eax,ebx
c002685c:	76 0a                	jbe    c0026868 <__umoddi3+0x64>
c002685e:	89 f0                	mov    eax,esi
c0026860:	83 c4 1c             	add    esp,0x1c
c0026863:	5b                   	pop    ebx
c0026864:	5e                   	pop    esi
c0026865:	5f                   	pop    edi
c0026866:	5d                   	pop    ebp
c0026867:	c3                   	ret    
c0026868:	0f bd e8             	bsr    ebp,eax
c002686b:	83 f5 1f             	xor    ebp,0x1f
c002686e:	75 1c                	jne    c002688c <__umoddi3+0x88>
c0026870:	39 d8                	cmp    eax,ebx
c0026872:	72 04                	jb     c0026878 <__umoddi3+0x74>
c0026874:	39 f7                	cmp    edi,esi
c0026876:	77 08                	ja     c0026880 <__umoddi3+0x7c>
c0026878:	89 da                	mov    edx,ebx
c002687a:	29 fe                	sub    esi,edi
c002687c:	19 c2                	sbb    edx,eax
c002687e:	89 f1                	mov    ecx,esi
c0026880:	89 c8                	mov    eax,ecx
c0026882:	83 c4 1c             	add    esp,0x1c
c0026885:	5b                   	pop    ebx
c0026886:	5e                   	pop    esi
c0026887:	5f                   	pop    edi
c0026888:	5d                   	pop    ebp
c0026889:	c3                   	ret    
c002688a:	66 90                	xchg   ax,ax
c002688c:	ba 20 00 00 00       	mov    edx,0x20
c0026891:	29 ea                	sub    edx,ebp
c0026893:	89 e9                	mov    ecx,ebp
c0026895:	d3 e0                	shl    eax,cl
c0026897:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002689b:	89 f8                	mov    eax,edi
c002689d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00268a1:	88 d1                	mov    cl,dl
c00268a3:	d3 e8                	shr    eax,cl
c00268a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00268a9:	09 c1                	or     ecx,eax
c00268ab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00268af:	89 e9                	mov    ecx,ebp
c00268b1:	d3 e7                	shl    edi,cl
c00268b3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00268b7:	89 d8                	mov    eax,ebx
c00268b9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00268bd:	88 d1                	mov    cl,dl
c00268bf:	d3 e8                	shr    eax,cl
c00268c1:	89 c7                	mov    edi,eax
c00268c3:	89 e9                	mov    ecx,ebp
c00268c5:	d3 e3                	shl    ebx,cl
c00268c7:	89 f0                	mov    eax,esi
c00268c9:	88 d1                	mov    cl,dl
c00268cb:	d3 e8                	shr    eax,cl
c00268cd:	09 d8                	or     eax,ebx
c00268cf:	89 e9                	mov    ecx,ebp
c00268d1:	d3 e6                	shl    esi,cl
c00268d3:	89 f3                	mov    ebx,esi
c00268d5:	89 fa                	mov    edx,edi
c00268d7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00268db:	89 d1                	mov    ecx,edx
c00268dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00268e1:	89 c6                	mov    esi,eax
c00268e3:	89 d7                	mov    edi,edx
c00268e5:	39 d1                	cmp    ecx,edx
c00268e7:	72 27                	jb     c0026910 <__umoddi3+0x10c>
c00268e9:	74 21                	je     c002690c <__umoddi3+0x108>
c00268eb:	89 ca                	mov    edx,ecx
c00268ed:	29 f3                	sub    ebx,esi
c00268ef:	19 fa                	sbb    edx,edi
c00268f1:	89 d0                	mov    eax,edx
c00268f3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00268f7:	d3 e0                	shl    eax,cl
c00268f9:	89 e9                	mov    ecx,ebp
c00268fb:	d3 eb                	shr    ebx,cl
c00268fd:	09 d8                	or     eax,ebx
c00268ff:	d3 ea                	shr    edx,cl
c0026901:	83 c4 1c             	add    esp,0x1c
c0026904:	5b                   	pop    ebx
c0026905:	5e                   	pop    esi
c0026906:	5f                   	pop    edi
c0026907:	5d                   	pop    ebp
c0026908:	c3                   	ret    
c0026909:	8d 76 00             	lea    esi,[esi+0x0]
c002690c:	39 c3                	cmp    ebx,eax
c002690e:	73 db                	jae    c00268eb <__umoddi3+0xe7>
c0026910:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026914:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026918:	89 d7                	mov    edi,edx
c002691a:	89 c6                	mov    esi,eax
c002691c:	eb cd                	jmp    c00268eb <__umoddi3+0xe7>

c002691e <__addsf3>:
c002691e:	55                   	push   ebp
c002691f:	89 e5                	mov    ebp,esp
c0026921:	57                   	push   edi
c0026922:	56                   	push   esi
c0026923:	53                   	push   ebx
c0026924:	83 ec 08             	sub    esp,0x8
c0026927:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002692a:	89 fa                	mov    edx,edi
c002692c:	89 f8                	mov    eax,edi
c002692e:	c1 f8 17             	sar    eax,0x17
c0026931:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026934:	c1 e2 08             	shl    edx,0x8
c0026937:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002693d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026940:	89 de                	mov    esi,ebx
c0026942:	c1 fe 17             	sar    esi,0x17
c0026945:	c1 e3 08             	shl    ebx,0x8
c0026948:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002694e:	31 f0                	xor    eax,esi
c0026950:	0f 88 3b 01 00 00    	js     c0026a91 <__addsf3+0x173>
c0026956:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026959:	29 f1                	sub    ecx,esi
c002695b:	85 c9                	test   ecx,ecx
c002695d:	7e 54                	jle    c00269b3 <__addsf3+0x95>
c002695f:	89 f0                	mov    eax,esi
c0026961:	84 c0                	test   al,al
c0026963:	75 10                	jne    c0026975 <__addsf3+0x57>
c0026965:	85 db                	test   ebx,ebx
c0026967:	0f 84 aa 02 00 00    	je     c0026c17 <__addsf3+0x2f9>
c002696d:	49                   	dec    ecx
c002696e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026971:	74 38                	je     c00269ab <__addsf3+0x8d>
c0026973:	eb 13                	jmp    c0026988 <__addsf3+0x6a>
c0026975:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026978:	f7 d0                	not    eax
c002697a:	84 c0                	test   al,al
c002697c:	0f 84 95 02 00 00    	je     c0026c17 <__addsf3+0x2f9>
c0026982:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026988:	83 f9 1f             	cmp    ecx,0x1f
c002698b:	0f 8f 86 02 00 00    	jg     c0026c17 <__addsf3+0x2f9>
c0026991:	89 de                	mov    esi,ebx
c0026993:	d3 ee                	shr    esi,cl
c0026995:	b8 20 00 00 00       	mov    eax,0x20
c002699a:	29 c8                	sub    eax,ecx
c002699c:	89 c1                	mov    ecx,eax
c002699e:	d3 e3                	shl    ebx,cl
c00269a0:	31 c0                	xor    eax,eax
c00269a2:	85 db                	test   ebx,ebx
c00269a4:	0f 95 c0             	setne  al
c00269a7:	09 f0                	or     eax,esi
c00269a9:	01 d0                	add    eax,edx
c00269ab:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00269ae:	e9 b6 00 00 00       	jmp    c0026a69 <__addsf3+0x14b>
c00269b3:	74 5c                	je     c0026a11 <__addsf3+0xf3>
c00269b5:	89 f1                	mov    ecx,esi
c00269b7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00269ba:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00269bd:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00269c1:	75 14                	jne    c00269d7 <__addsf3+0xb9>
c00269c3:	85 d2                	test   edx,edx
c00269c5:	0f 84 4c 02 00 00    	je     c0026c17 <__addsf3+0x2f9>
c00269cb:	49                   	dec    ecx
c00269cc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00269cf:	0f 84 94 00 00 00    	je     c0026a69 <__addsf3+0x14b>
c00269d5:	eb 12                	jmp    c00269e9 <__addsf3+0xcb>
c00269d7:	89 f0                	mov    eax,esi
c00269d9:	f7 d0                	not    eax
c00269db:	84 c0                	test   al,al
c00269dd:	0f 84 34 02 00 00    	je     c0026c17 <__addsf3+0x2f9>
c00269e3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00269e9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00269ec:	83 f9 1f             	cmp    ecx,0x1f
c00269ef:	0f 8f 22 02 00 00    	jg     c0026c17 <__addsf3+0x2f9>
c00269f5:	89 d7                	mov    edi,edx
c00269f7:	d3 ef                	shr    edi,cl
c00269f9:	b8 20 00 00 00       	mov    eax,0x20
c00269fe:	29 c8                	sub    eax,ecx
c0026a00:	89 c1                	mov    ecx,eax
c0026a02:	d3 e2                	shl    edx,cl
c0026a04:	31 c0                	xor    eax,eax
c0026a06:	85 d2                	test   edx,edx
c0026a08:	0f 95 c0             	setne  al
c0026a0b:	09 f8                	or     eax,edi
c0026a0d:	01 d8                	add    eax,ebx
c0026a0f:	eb 58                	jmp    c0026a69 <__addsf3+0x14b>
c0026a11:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a14:	8d 70 01             	lea    esi,[eax+0x1]
c0026a17:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026a1d:	75 32                	jne    c0026a51 <__addsf3+0x133>
c0026a1f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026a23:	75 1f                	jne    c0026a44 <__addsf3+0x126>
c0026a25:	85 d2                	test   edx,edx
c0026a27:	0f 84 e0 01 00 00    	je     c0026c0d <__addsf3+0x2ef>
c0026a2d:	85 db                	test   ebx,ebx
c0026a2f:	0f 84 e2 01 00 00    	je     c0026c17 <__addsf3+0x2f9>
c0026a35:	89 d0                	mov    eax,edx
c0026a37:	01 d8                	add    eax,ebx
c0026a39:	0f 89 a9 01 00 00    	jns    c0026be8 <__addsf3+0x2ca>
c0026a3f:	e9 9d 01 00 00       	jmp    c0026be1 <__addsf3+0x2c3>
c0026a44:	85 d2                	test   edx,edx
c0026a46:	0f 85 cb 01 00 00    	jne    c0026c17 <__addsf3+0x2f9>
c0026a4c:	e9 bc 01 00 00       	jmp    c0026c0d <__addsf3+0x2ef>
c0026a51:	31 c0                	xor    eax,eax
c0026a53:	89 f1                	mov    ecx,esi
c0026a55:	f7 d1                	not    ecx
c0026a57:	84 c9                	test   cl,cl
c0026a59:	0f 84 90 01 00 00    	je     c0026bef <__addsf3+0x2d1>
c0026a5f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026a62:	d1 e8                	shr    eax,1
c0026a64:	e9 86 01 00 00       	jmp    c0026bef <__addsf3+0x2d1>
c0026a69:	85 c0                	test   eax,eax
c0026a6b:	0f 89 7e 01 00 00    	jns    c0026bef <__addsf3+0x2d1>
c0026a71:	46                   	inc    esi
c0026a72:	89 f2                	mov    edx,esi
c0026a74:	f7 d2                	not    edx
c0026a76:	84 d2                	test   dl,dl
c0026a78:	0f 84 6f 01 00 00    	je     c0026bed <__addsf3+0x2cf>
c0026a7e:	89 c2                	mov    edx,eax
c0026a80:	83 e2 01             	and    edx,0x1
c0026a83:	d1 e8                	shr    eax,1
c0026a85:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026a8a:	09 d0                	or     eax,edx
c0026a8c:	e9 5e 01 00 00       	jmp    c0026bef <__addsf3+0x2d1>
c0026a91:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026a95:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026a98:	89 f0                	mov    eax,esi
c0026a9a:	0f b6 c0             	movzx  eax,al
c0026a9d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026aa0:	29 c1                	sub    ecx,eax
c0026aa2:	85 c9                	test   ecx,ecx
c0026aa4:	7e 55                	jle    c0026afb <__addsf3+0x1dd>
c0026aa6:	85 c0                	test   eax,eax
c0026aa8:	75 11                	jne    c0026abb <__addsf3+0x19d>
c0026aaa:	85 db                	test   ebx,ebx
c0026aac:	0f 84 65 01 00 00    	je     c0026c17 <__addsf3+0x2f9>
c0026ab2:	49                   	dec    ecx
c0026ab3:	75 19                	jne    c0026ace <__addsf3+0x1b0>
c0026ab5:	89 d0                	mov    eax,edx
c0026ab7:	29 d8                	sub    eax,ebx
c0026ab9:	eb 38                	jmp    c0026af3 <__addsf3+0x1d5>
c0026abb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026abe:	f7 d0                	not    eax
c0026ac0:	84 c0                	test   al,al
c0026ac2:	0f 84 4f 01 00 00    	je     c0026c17 <__addsf3+0x2f9>
c0026ac8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026ace:	83 f9 1f             	cmp    ecx,0x1f
c0026ad1:	0f 8f 40 01 00 00    	jg     c0026c17 <__addsf3+0x2f9>
c0026ad7:	89 de                	mov    esi,ebx
c0026ad9:	d3 ee                	shr    esi,cl
c0026adb:	b8 20 00 00 00       	mov    eax,0x20
c0026ae0:	29 c8                	sub    eax,ecx
c0026ae2:	89 c1                	mov    ecx,eax
c0026ae4:	d3 e3                	shl    ebx,cl
c0026ae6:	31 c0                	xor    eax,eax
c0026ae8:	85 db                	test   ebx,ebx
c0026aea:	0f 95 c0             	setne  al
c0026aed:	09 f0                	or     eax,esi
c0026aef:	29 c2                	sub    edx,eax
c0026af1:	89 d0                	mov    eax,edx
c0026af3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026af6:	e9 af 00 00 00       	jmp    c0026baa <__addsf3+0x28c>
c0026afb:	74 5c                	je     c0026b59 <__addsf3+0x23b>
c0026afd:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026b00:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b03:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026b07:	75 14                	jne    c0026b1d <__addsf3+0x1ff>
c0026b09:	85 d2                	test   edx,edx
c0026b0b:	0f 84 06 01 00 00    	je     c0026c17 <__addsf3+0x2f9>
c0026b11:	48                   	dec    eax
c0026b12:	75 1b                	jne    c0026b2f <__addsf3+0x211>
c0026b14:	89 d8                	mov    eax,ebx
c0026b16:	29 d0                	sub    eax,edx
c0026b18:	e9 8d 00 00 00       	jmp    c0026baa <__addsf3+0x28c>
c0026b1d:	89 f1                	mov    ecx,esi
c0026b1f:	f7 d1                	not    ecx
c0026b21:	84 c9                	test   cl,cl
c0026b23:	0f 84 ee 00 00 00    	je     c0026c17 <__addsf3+0x2f9>
c0026b29:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b2f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b32:	83 f8 1f             	cmp    eax,0x1f
c0026b35:	0f 8f dc 00 00 00    	jg     c0026c17 <__addsf3+0x2f9>
c0026b3b:	89 d7                	mov    edi,edx
c0026b3d:	88 c1                	mov    cl,al
c0026b3f:	d3 ef                	shr    edi,cl
c0026b41:	b9 20 00 00 00       	mov    ecx,0x20
c0026b46:	29 c1                	sub    ecx,eax
c0026b48:	d3 e2                	shl    edx,cl
c0026b4a:	31 c0                	xor    eax,eax
c0026b4c:	85 d2                	test   edx,edx
c0026b4e:	0f 95 c0             	setne  al
c0026b51:	09 f8                	or     eax,edi
c0026b53:	29 c3                	sub    ebx,eax
c0026b55:	89 d8                	mov    eax,ebx
c0026b57:	eb 51                	jmp    c0026baa <__addsf3+0x28c>
c0026b59:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b5c:	40                   	inc    eax
c0026b5d:	a8 fe                	test   al,0xfe
c0026b5f:	75 3d                	jne    c0026b9e <__addsf3+0x280>
c0026b61:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026b65:	0f 85 a7 00 00 00    	jne    c0026c12 <__addsf3+0x2f4>
c0026b6b:	85 d2                	test   edx,edx
c0026b6d:	75 12                	jne    c0026b81 <__addsf3+0x263>
c0026b6f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b72:	85 db                	test   ebx,ebx
c0026b74:	0f 85 9d 00 00 00    	jne    c0026c17 <__addsf3+0x2f9>
c0026b7a:	31 ff                	xor    edi,edi
c0026b7c:	e9 96 00 00 00       	jmp    c0026c17 <__addsf3+0x2f9>
c0026b81:	85 db                	test   ebx,ebx
c0026b83:	0f 84 8e 00 00 00    	je     c0026c17 <__addsf3+0x2f9>
c0026b89:	89 d0                	mov    eax,edx
c0026b8b:	29 d8                	sub    eax,ebx
c0026b8d:	79 06                	jns    c0026b95 <__addsf3+0x277>
c0026b8f:	89 d8                	mov    eax,ebx
c0026b91:	29 d0                	sub    eax,edx
c0026b93:	eb 5a                	jmp    c0026bef <__addsf3+0x2d1>
c0026b95:	bf 00 00 00 00       	mov    edi,0x0
c0026b9a:	74 7b                	je     c0026c17 <__addsf3+0x2f9>
c0026b9c:	eb 4a                	jmp    c0026be8 <__addsf3+0x2ca>
c0026b9e:	89 d0                	mov    eax,edx
c0026ba0:	29 d8                	sub    eax,ebx
c0026ba2:	79 12                	jns    c0026bb6 <__addsf3+0x298>
c0026ba4:	89 d8                	mov    eax,ebx
c0026ba6:	29 d0                	sub    eax,edx
c0026ba8:	eb 09                	jmp    c0026bb3 <__addsf3+0x295>
c0026baa:	85 c0                	test   eax,eax
c0026bac:	79 41                	jns    c0026bef <__addsf3+0x2d1>
c0026bae:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026bb3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026bb6:	31 f6                	xor    esi,esi
c0026bb8:	85 c0                	test   eax,eax
c0026bba:	74 33                	je     c0026bef <__addsf3+0x2d1>
c0026bbc:	0f bd c8             	bsr    ecx,eax
c0026bbf:	83 f1 1f             	xor    ecx,0x1f
c0026bc2:	d3 e0                	shl    eax,cl
c0026bc4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026bc8:	39 ca                	cmp    edx,ecx
c0026bca:	7f 10                	jg     c0026bdc <__addsf3+0x2be>
c0026bcc:	29 d1                	sub    ecx,edx
c0026bce:	41                   	inc    ecx
c0026bcf:	d3 e8                	shr    eax,cl
c0026bd1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026bd4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026bda:	eb 13                	jmp    c0026bef <__addsf3+0x2d1>
c0026bdc:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026bdf:	29 ce                	sub    esi,ecx
c0026be1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026be6:	eb 07                	jmp    c0026bef <__addsf3+0x2d1>
c0026be8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026beb:	eb 02                	jmp    c0026bef <__addsf3+0x2d1>
c0026bed:	31 c0                	xor    eax,eax
c0026bef:	89 c2                	mov    edx,eax
c0026bf1:	c1 ea 08             	shr    edx,0x8
c0026bf4:	a8 7f                	test   al,0x7f
c0026bf6:	0f 95 c1             	setne  cl
c0026bf9:	09 d1                	or     ecx,edx
c0026bfb:	83 e1 01             	and    ecx,0x1
c0026bfe:	c1 e8 07             	shr    eax,0x7
c0026c01:	21 c8                	and    eax,ecx
c0026c03:	c1 e6 17             	shl    esi,0x17
c0026c06:	09 d6                	or     esi,edx
c0026c08:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026c0b:	eb 0a                	jmp    c0026c17 <__addsf3+0x2f9>
c0026c0d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c10:	eb 05                	jmp    c0026c17 <__addsf3+0x2f9>
c0026c12:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026c17:	89 f8                	mov    eax,edi
c0026c19:	5a                   	pop    edx
c0026c1a:	59                   	pop    ecx
c0026c1b:	5b                   	pop    ebx
c0026c1c:	5e                   	pop    esi
c0026c1d:	5f                   	pop    edi
c0026c1e:	5d                   	pop    ebp
c0026c1f:	c3                   	ret    

c0026c20 <__subsf3>:
c0026c20:	55                   	push   ebp
c0026c21:	89 e5                	mov    ebp,esp
c0026c23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c26:	05 00 00 00 80       	add    eax,0x80000000
c0026c2b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026c2e:	5d                   	pop    ebp
c0026c2f:	e9 ea fc ff ff       	jmp    c002691e <__addsf3>

c0026c34 <__negsf2>:
c0026c34:	55                   	push   ebp
c0026c35:	89 e5                	mov    ebp,esp
c0026c37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026c3a:	05 00 00 00 80       	add    eax,0x80000000
c0026c3f:	5d                   	pop    ebp
c0026c40:	c3                   	ret    

c0026c41 <__mulsf3>:
c0026c41:	55                   	push   ebp
c0026c42:	89 e5                	mov    ebp,esp
c0026c44:	57                   	push   edi
c0026c45:	56                   	push   esi
c0026c46:	53                   	push   ebx
c0026c47:	83 ec 1c             	sub    esp,0x1c
c0026c4a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026c4d:	89 f0                	mov    eax,esi
c0026c4f:	89 f1                	mov    ecx,esi
c0026c51:	c1 f9 17             	sar    ecx,0x17
c0026c54:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026c57:	c1 e0 08             	shl    eax,0x8
c0026c5a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026c5f:	89 c1                	mov    ecx,eax
c0026c61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c64:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026c67:	89 c7                	mov    edi,eax
c0026c69:	c1 ff 17             	sar    edi,0x17
c0026c6c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026c70:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026c73:	89 f8                	mov    eax,edi
c0026c75:	0f b6 c0             	movzx  eax,al
c0026c78:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026c7b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026c7f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026c82:	42                   	inc    edx
c0026c83:	80 e2 fe             	and    dl,0xfe
c0026c86:	75 7b                	jne    c0026d03 <__mulsf3+0xc2>
c0026c88:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026c8c:	74 54                	je     c0026ce2 <__mulsf3+0xa1>
c0026c8e:	85 c9                	test   ecx,ecx
c0026c90:	0f 85 64 01 00 00    	jne    c0026dfa <__mulsf3+0x1b9>
c0026c96:	8d 57 01             	lea    edx,[edi+0x1]
c0026c99:	80 e2 fe             	and    dl,0xfe
c0026c9c:	75 1f                	jne    c0026cbd <__mulsf3+0x7c>
c0026c9e:	85 c0                	test   eax,eax
c0026ca0:	b8 00 00 00 00       	mov    eax,0x0
c0026ca5:	74 29                	je     c0026cd0 <__mulsf3+0x8f>
c0026ca7:	53                   	push   ebx
c0026ca8:	53                   	push   ebx
c0026ca9:	50                   	push   eax
c0026caa:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026cad:	e8 96 05 00 00       	call   c0027248 <__nesf2>
c0026cb2:	83 c4 10             	add    esp,0x10
c0026cb5:	85 c0                	test   eax,eax
c0026cb7:	0f 85 3a 01 00 00    	jne    c0026df7 <__mulsf3+0x1b6>
c0026cbd:	85 ff                	test   edi,edi
c0026cbf:	0f 89 35 01 00 00    	jns    c0026dfa <__mulsf3+0x1b9>
c0026cc5:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026ccb:	e9 2a 01 00 00       	jmp    c0026dfa <__mulsf3+0x1b9>
c0026cd0:	51                   	push   ecx
c0026cd1:	51                   	push   ecx
c0026cd2:	50                   	push   eax
c0026cd3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026cd6:	e8 6d 05 00 00       	call   c0027248 <__nesf2>
c0026cdb:	83 c4 10             	add    esp,0x10
c0026cde:	85 c0                	test   eax,eax
c0026ce0:	eb 15                	jmp    c0026cf7 <__mulsf3+0xb6>
c0026ce2:	85 c9                	test   ecx,ecx
c0026ce4:	74 0b                	je     c0026cf1 <__mulsf3+0xb0>
c0026ce6:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026ce9:	01 c9                	add    ecx,ecx
c0026ceb:	78 16                	js     c0026d03 <__mulsf3+0xc2>
c0026ced:	89 d3                	mov    ebx,edx
c0026cef:	eb f5                	jmp    c0026ce6 <__mulsf3+0xa5>
c0026cf1:	89 f8                	mov    eax,edi
c0026cf3:	f7 d0                	not    eax
c0026cf5:	84 c0                	test   al,al
c0026cf7:	75 c4                	jne    c0026cbd <__mulsf3+0x7c>
c0026cf9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026cfe:	e9 f7 00 00 00       	jmp    c0026dfa <__mulsf3+0x1b9>
c0026d03:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026d06:	c1 e6 08             	shl    esi,0x8
c0026d09:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026d0f:	8d 57 01             	lea    edx,[edi+0x1]
c0026d12:	80 e2 fe             	and    dl,0xfe
c0026d15:	75 63                	jne    c0026d7a <__mulsf3+0x139>
c0026d17:	85 c0                	test   eax,eax
c0026d19:	74 2f                	je     c0026d4a <__mulsf3+0x109>
c0026d1b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026d1f:	0f 89 d2 00 00 00    	jns    c0026df7 <__mulsf3+0x1b6>
c0026d25:	52                   	push   edx
c0026d26:	52                   	push   edx
c0026d27:	6a 00                	push   0x0
c0026d29:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d2c:	e8 dc 04 00 00       	call   c002720d <__eqsf2>
c0026d31:	83 c4 10             	add    esp,0x10
c0026d34:	85 c0                	test   eax,eax
c0026d36:	0f 85 bb 00 00 00    	jne    c0026df7 <__mulsf3+0x1b6>
c0026d3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d3f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026d45:	e9 b0 00 00 00       	jmp    c0026dfa <__mulsf3+0x1b9>
c0026d4a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026d4d:	50                   	push   eax
c0026d4e:	50                   	push   eax
c0026d4f:	6a 00                	push   0x0
c0026d51:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d54:	e8 b4 04 00 00       	call   c002720d <__eqsf2>
c0026d59:	83 c4 10             	add    esp,0x10
c0026d5c:	85 c0                	test   eax,eax
c0026d5e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026d61:	75 0c                	jne    c0026d6f <__mulsf3+0x12e>
c0026d63:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026d67:	0f 89 8a 00 00 00    	jns    c0026df7 <__mulsf3+0x1b6>
c0026d6d:	eb cd                	jmp    c0026d3c <__mulsf3+0xfb>
c0026d6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026d72:	01 f6                	add    esi,esi
c0026d74:	78 04                	js     c0026d7a <__mulsf3+0x139>
c0026d76:	89 c3                	mov    ebx,eax
c0026d78:	eb f5                	jmp    c0026d6f <__mulsf3+0x12e>
c0026d7a:	89 c8                	mov    eax,ecx
c0026d7c:	0d 00 00 00 80       	or     eax,0x80000000
c0026d81:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026d87:	f7 e6                	mul    esi
c0026d89:	85 c0                	test   eax,eax
c0026d8b:	0f 95 c0             	setne  al
c0026d8e:	0f b6 c0             	movzx  eax,al
c0026d91:	09 c2                	or     edx,eax
c0026d93:	78 03                	js     c0026d98 <__mulsf3+0x157>
c0026d95:	01 d2                	add    edx,edx
c0026d97:	4b                   	dec    ebx
c0026d98:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026d9e:	7f 22                	jg     c0026dc2 <__mulsf3+0x181>
c0026da0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026da6:	85 db                	test   ebx,ebx
c0026da8:	7f 23                	jg     c0026dcd <__mulsf3+0x18c>
c0026daa:	83 fb e9             	cmp    ebx,0xffffffe9
c0026dad:	7c 1a                	jl     c0026dc9 <__mulsf3+0x188>
c0026daf:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026db5:	b9 01 00 00 00       	mov    ecx,0x1
c0026dba:	29 d9                	sub    ecx,ebx
c0026dbc:	d3 ea                	shr    edx,cl
c0026dbe:	31 db                	xor    ebx,ebx
c0026dc0:	eb 0b                	jmp    c0026dcd <__mulsf3+0x18c>
c0026dc2:	bb ff 00 00 00       	mov    ebx,0xff
c0026dc7:	eb 02                	jmp    c0026dcb <__mulsf3+0x18a>
c0026dc9:	31 db                	xor    ebx,ebx
c0026dcb:	31 d2                	xor    edx,edx
c0026dcd:	89 d0                	mov    eax,edx
c0026dcf:	c1 e8 08             	shr    eax,0x8
c0026dd2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026dd5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026ddb:	09 fb                	or     ebx,edi
c0026ddd:	c1 e3 17             	shl    ebx,0x17
c0026de0:	09 c3                	or     ebx,eax
c0026de2:	f6 c2 7f             	test   dl,0x7f
c0026de5:	0f 95 c1             	setne  cl
c0026de8:	09 c8                	or     eax,ecx
c0026dea:	83 e0 01             	and    eax,0x1
c0026ded:	c1 ea 07             	shr    edx,0x7
c0026df0:	21 c2                	and    edx,eax
c0026df2:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026df5:	eb 03                	jmp    c0026dfa <__mulsf3+0x1b9>
c0026df7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026dfa:	89 f0                	mov    eax,esi
c0026dfc:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026dff:	5b                   	pop    ebx
c0026e00:	5e                   	pop    esi
c0026e01:	5f                   	pop    edi
c0026e02:	5d                   	pop    ebp
c0026e03:	c3                   	ret    

c0026e04 <__divsf3>:
c0026e04:	55                   	push   ebp
c0026e05:	89 e5                	mov    ebp,esp
c0026e07:	57                   	push   edi
c0026e08:	56                   	push   esi
c0026e09:	53                   	push   ebx
c0026e0a:	83 ec 1c             	sub    esp,0x1c
c0026e0d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026e10:	89 d8                	mov    eax,ebx
c0026e12:	89 d9                	mov    ecx,ebx
c0026e14:	c1 f9 17             	sar    ecx,0x17
c0026e17:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026e1a:	c1 e0 08             	shl    eax,0x8
c0026e1d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026e22:	89 c1                	mov    ecx,eax
c0026e24:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e27:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026e2a:	89 c7                	mov    edi,eax
c0026e2c:	c1 ff 17             	sar    edi,0x17
c0026e2f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026e33:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026e36:	89 f8                	mov    eax,edi
c0026e38:	0f b6 c0             	movzx  eax,al
c0026e3b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026e3e:	29 c6                	sub    esi,eax
c0026e40:	83 c6 7f             	add    esi,0x7f
c0026e43:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026e46:	42                   	inc    edx
c0026e47:	80 e2 fe             	and    dl,0xfe
c0026e4a:	0f 85 9c 00 00 00    	jne    c0026eec <__divsf3+0xe8>
c0026e50:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026e54:	74 33                	je     c0026e89 <__divsf3+0x85>
c0026e56:	85 c9                	test   ecx,ecx
c0026e58:	0f 85 c7 01 00 00    	jne    c0027025 <__divsf3+0x221>
c0026e5e:	8d 57 01             	lea    edx,[edi+0x1]
c0026e61:	80 e2 fe             	and    dl,0xfe
c0026e64:	75 2f                	jne    c0026e95 <__divsf3+0x91>
c0026e66:	85 c0                	test   eax,eax
c0026e68:	74 2b                	je     c0026e95 <__divsf3+0x91>
c0026e6a:	51                   	push   ecx
c0026e6b:	51                   	push   ecx
c0026e6c:	6a 00                	push   0x0
c0026e6e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e71:	e8 d2 03 00 00       	call   c0027248 <__nesf2>
c0026e76:	83 c4 10             	add    esp,0x10
c0026e79:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026e7c:	85 c0                	test   eax,eax
c0026e7e:	0f 85 a1 01 00 00    	jne    c0027025 <__divsf3+0x221>
c0026e84:	e9 92 01 00 00       	jmp    c002701b <__divsf3+0x217>
c0026e89:	85 c9                	test   ecx,ecx
c0026e8b:	75 1b                	jne    c0026ea8 <__divsf3+0xa4>
c0026e8d:	8d 57 01             	lea    edx,[edi+0x1]
c0026e90:	80 e2 fe             	and    dl,0xfe
c0026e93:	74 1e                	je     c0026eb3 <__divsf3+0xaf>
c0026e95:	85 ff                	test   edi,edi
c0026e97:	0f 89 88 01 00 00    	jns    c0027025 <__divsf3+0x221>
c0026e9d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026ea3:	e9 7d 01 00 00       	jmp    c0027025 <__divsf3+0x221>
c0026ea8:	8d 56 ff             	lea    edx,[esi-0x1]
c0026eab:	01 c9                	add    ecx,ecx
c0026ead:	78 3d                	js     c0026eec <__divsf3+0xe8>
c0026eaf:	89 d6                	mov    esi,edx
c0026eb1:	eb f5                	jmp    c0026ea8 <__divsf3+0xa4>
c0026eb3:	85 c0                	test   eax,eax
c0026eb5:	b8 00 00 00 00       	mov    eax,0x0
c0026eba:	74 18                	je     c0026ed4 <__divsf3+0xd0>
c0026ebc:	52                   	push   edx
c0026ebd:	52                   	push   edx
c0026ebe:	50                   	push   eax
c0026ebf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ec2:	e8 81 03 00 00       	call   c0027248 <__nesf2>
c0026ec7:	83 c4 10             	add    esp,0x10
c0026eca:	85 c0                	test   eax,eax
c0026ecc:	0f 85 50 01 00 00    	jne    c0027022 <__divsf3+0x21e>
c0026ed2:	eb c1                	jmp    c0026e95 <__divsf3+0x91>
c0026ed4:	56                   	push   esi
c0026ed5:	56                   	push   esi
c0026ed6:	50                   	push   eax
c0026ed7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026eda:	e8 69 03 00 00       	call   c0027248 <__nesf2>
c0026edf:	83 c4 10             	add    esp,0x10
c0026ee2:	85 c0                	test   eax,eax
c0026ee4:	0f 84 31 01 00 00    	je     c002701b <__divsf3+0x217>
c0026eea:	eb a9                	jmp    c0026e95 <__divsf3+0x91>
c0026eec:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026eef:	c1 e3 08             	shl    ebx,0x8
c0026ef2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026ef8:	8d 57 01             	lea    edx,[edi+0x1]
c0026efb:	80 e2 fe             	and    dl,0xfe
c0026efe:	75 71                	jne    c0026f71 <__divsf3+0x16d>
c0026f00:	85 c0                	test   eax,eax
c0026f02:	ba 00 00 00 00       	mov    edx,0x0
c0026f07:	74 2f                	je     c0026f38 <__divsf3+0x134>
c0026f09:	51                   	push   ecx
c0026f0a:	51                   	push   ecx
c0026f0b:	52                   	push   edx
c0026f0c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f0f:	e8 f9 02 00 00       	call   c002720d <__eqsf2>
c0026f14:	83 c4 10             	add    esp,0x10
c0026f17:	85 c0                	test   eax,eax
c0026f19:	0f 85 03 01 00 00    	jne    c0027022 <__divsf3+0x21e>
c0026f1f:	31 d2                	xor    edx,edx
c0026f21:	89 d3                	mov    ebx,edx
c0026f23:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026f26:	31 f8                	xor    eax,edi
c0026f28:	0f 89 f7 00 00 00    	jns    c0027025 <__divsf3+0x221>
c0026f2e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026f33:	e9 ed 00 00 00       	jmp    c0027025 <__divsf3+0x221>
c0026f38:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026f3b:	50                   	push   eax
c0026f3c:	50                   	push   eax
c0026f3d:	52                   	push   edx
c0026f3e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f41:	e8 c7 02 00 00       	call   c002720d <__eqsf2>
c0026f46:	83 c4 10             	add    esp,0x10
c0026f49:	85 c0                	test   eax,eax
c0026f4b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026f4e:	75 16                	jne    c0026f66 <__divsf3+0x162>
c0026f50:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026f53:	31 fb                	xor    ebx,edi
c0026f55:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026f5b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026f61:	e9 bf 00 00 00       	jmp    c0027025 <__divsf3+0x221>
c0026f66:	8d 46 01             	lea    eax,[esi+0x1]
c0026f69:	01 db                	add    ebx,ebx
c0026f6b:	78 04                	js     c0026f71 <__divsf3+0x16d>
c0026f6d:	89 c6                	mov    esi,eax
c0026f6f:	eb f5                	jmp    c0026f66 <__divsf3+0x162>
c0026f71:	89 c8                	mov    eax,ecx
c0026f73:	0d 00 00 00 80       	or     eax,0x80000000
c0026f78:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026f7e:	31 d2                	xor    edx,edx
c0026f80:	39 d8                	cmp    eax,ebx
c0026f82:	72 07                	jb     c0026f8b <__divsf3+0x187>
c0026f84:	29 d8                	sub    eax,ebx
c0026f86:	ba 01 00 00 00       	mov    edx,0x1
c0026f8b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026f92:	01 d2                	add    edx,edx
c0026f94:	89 c1                	mov    ecx,eax
c0026f96:	01 c0                	add    eax,eax
c0026f98:	85 c9                	test   ecx,ecx
c0026f9a:	78 04                	js     c0026fa0 <__divsf3+0x19c>
c0026f9c:	39 c3                	cmp    ebx,eax
c0026f9e:	77 05                	ja     c0026fa5 <__divsf3+0x1a1>
c0026fa0:	29 d8                	sub    eax,ebx
c0026fa2:	83 ca 01             	or     edx,0x1
c0026fa5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026fa8:	75 e8                	jne    c0026f92 <__divsf3+0x18e>
c0026faa:	85 c0                	test   eax,eax
c0026fac:	0f 95 c0             	setne  al
c0026faf:	0f b6 c0             	movzx  eax,al
c0026fb2:	c1 e2 06             	shl    edx,0x6
c0026fb5:	09 c2                	or     edx,eax
c0026fb7:	78 03                	js     c0026fbc <__divsf3+0x1b8>
c0026fb9:	01 d2                	add    edx,edx
c0026fbb:	4e                   	dec    esi
c0026fbc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026fc2:	7f 22                	jg     c0026fe6 <__divsf3+0x1e2>
c0026fc4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026fca:	85 f6                	test   esi,esi
c0026fcc:	7f 23                	jg     c0026ff1 <__divsf3+0x1ed>
c0026fce:	83 fe e9             	cmp    esi,0xffffffe9
c0026fd1:	7c 1a                	jl     c0026fed <__divsf3+0x1e9>
c0026fd3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026fd9:	b9 01 00 00 00       	mov    ecx,0x1
c0026fde:	29 f1                	sub    ecx,esi
c0026fe0:	d3 ea                	shr    edx,cl
c0026fe2:	31 f6                	xor    esi,esi
c0026fe4:	eb 0b                	jmp    c0026ff1 <__divsf3+0x1ed>
c0026fe6:	be ff 00 00 00       	mov    esi,0xff
c0026feb:	eb 02                	jmp    c0026fef <__divsf3+0x1eb>
c0026fed:	31 f6                	xor    esi,esi
c0026fef:	31 d2                	xor    edx,edx
c0026ff1:	89 d0                	mov    eax,edx
c0026ff3:	c1 e8 08             	shr    eax,0x8
c0026ff6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026ff9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026fff:	09 fe                	or     esi,edi
c0027001:	c1 e6 17             	shl    esi,0x17
c0027004:	09 c6                	or     esi,eax
c0027006:	f6 c2 7f             	test   dl,0x7f
c0027009:	0f 95 c1             	setne  cl
c002700c:	09 c8                	or     eax,ecx
c002700e:	83 e0 01             	and    eax,0x1
c0027011:	c1 ea 07             	shr    edx,0x7
c0027014:	21 c2                	and    edx,eax
c0027016:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027019:	eb 0a                	jmp    c0027025 <__divsf3+0x221>
c002701b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027020:	eb 03                	jmp    c0027025 <__divsf3+0x221>
c0027022:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027025:	89 d8                	mov    eax,ebx
c0027027:	8d 65 f4             	lea    esp,[ebp-0xc]
c002702a:	5b                   	pop    ebx
c002702b:	5e                   	pop    esi
c002702c:	5f                   	pop    edi
c002702d:	5d                   	pop    ebp
c002702e:	c3                   	ret    

c002702f <__floatsisf>:
c002702f:	55                   	push   ebp
c0027030:	89 e5                	mov    ebp,esp
c0027032:	53                   	push   ebx
c0027033:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027036:	85 d2                	test   edx,edx
c0027038:	7e 2b                	jle    c0027065 <__floatsisf+0x36>
c002703a:	0f bd ca             	bsr    ecx,edx
c002703d:	83 f1 1f             	xor    ecx,0x1f
c0027040:	d3 e2                	shl    edx,cl
c0027042:	89 d0                	mov    eax,edx
c0027044:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027049:	89 c3                	mov    ebx,eax
c002704b:	c1 eb 08             	shr    ebx,0x8
c002704e:	80 e2 7f             	and    dl,0x7f
c0027051:	0f 95 c2             	setne  dl
c0027054:	09 da                	or     edx,ebx
c0027056:	83 e2 01             	and    edx,0x1
c0027059:	c1 e8 07             	shr    eax,0x7
c002705c:	21 c2                	and    edx,eax
c002705e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027063:	eb 32                	jmp    c0027097 <__floatsisf+0x68>
c0027065:	b8 00 00 00 00       	mov    eax,0x0
c002706a:	74 34                	je     c00270a0 <__floatsisf+0x71>
c002706c:	f7 da                	neg    edx
c002706e:	0f bd ca             	bsr    ecx,edx
c0027071:	83 f1 1f             	xor    ecx,0x1f
c0027074:	d3 e2                	shl    edx,cl
c0027076:	89 d0                	mov    eax,edx
c0027078:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002707d:	89 c3                	mov    ebx,eax
c002707f:	c1 eb 08             	shr    ebx,0x8
c0027082:	80 e2 7f             	and    dl,0x7f
c0027085:	0f 95 c2             	setne  dl
c0027088:	09 da                	or     edx,ebx
c002708a:	83 e2 01             	and    edx,0x1
c002708d:	c1 e8 07             	shr    eax,0x7
c0027090:	21 c2                	and    edx,eax
c0027092:	b8 9e 01 00 00       	mov    eax,0x19e
c0027097:	29 c8                	sub    eax,ecx
c0027099:	c1 e0 17             	shl    eax,0x17
c002709c:	09 d8                	or     eax,ebx
c002709e:	01 d0                	add    eax,edx
c00270a0:	5b                   	pop    ebx
c00270a1:	5d                   	pop    ebp
c00270a2:	c3                   	ret    

c00270a3 <__floatunsisf>:
c00270a3:	55                   	push   ebp
c00270a4:	89 e5                	mov    ebp,esp
c00270a6:	53                   	push   ebx
c00270a7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00270aa:	31 c0                	xor    eax,eax
c00270ac:	85 d2                	test   edx,edx
c00270ae:	74 32                	je     c00270e2 <__floatunsisf+0x3f>
c00270b0:	0f bd ca             	bsr    ecx,edx
c00270b3:	83 f1 1f             	xor    ecx,0x1f
c00270b6:	d3 e2                	shl    edx,cl
c00270b8:	89 d0                	mov    eax,edx
c00270ba:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00270bf:	89 c3                	mov    ebx,eax
c00270c1:	c1 eb 08             	shr    ebx,0x8
c00270c4:	80 e2 7f             	and    dl,0x7f
c00270c7:	0f 95 c2             	setne  dl
c00270ca:	09 da                	or     edx,ebx
c00270cc:	83 e2 01             	and    edx,0x1
c00270cf:	c1 e8 07             	shr    eax,0x7
c00270d2:	21 c2                	and    edx,eax
c00270d4:	b8 9e 00 00 00       	mov    eax,0x9e
c00270d9:	29 c8                	sub    eax,ecx
c00270db:	c1 e0 17             	shl    eax,0x17
c00270de:	09 d8                	or     eax,ebx
c00270e0:	01 d0                	add    eax,edx
c00270e2:	5b                   	pop    ebx
c00270e3:	5d                   	pop    ebp
c00270e4:	c3                   	ret    

c00270e5 <__fixsfsi>:
c00270e5:	55                   	push   ebp
c00270e6:	89 e5                	mov    ebp,esp
c00270e8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00270eb:	89 d1                	mov    ecx,edx
c00270ed:	c1 e1 08             	shl    ecx,0x8
c00270f0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00270f6:	c1 fa 17             	sar    edx,0x17
c00270f9:	78 1c                	js     c0027117 <__fixsfsi+0x32>
c00270fb:	83 ea 7f             	sub    edx,0x7f
c00270fe:	31 c0                	xor    eax,eax
c0027100:	83 fa 1e             	cmp    edx,0x1e
c0027103:	77 40                	ja     c0027145 <__fixsfsi+0x60>
c0027105:	89 c8                	mov    eax,ecx
c0027107:	0d 00 00 00 80       	or     eax,0x80000000
c002710c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027111:	29 d1                	sub    ecx,edx
c0027113:	d3 e8                	shr    eax,cl
c0027115:	eb 2e                	jmp    c0027145 <__fixsfsi+0x60>
c0027117:	31 c0                	xor    eax,eax
c0027119:	81 c2 81 00 00 00    	add    edx,0x81
c002711f:	78 24                	js     c0027145 <__fixsfsi+0x60>
c0027121:	83 fa 1e             	cmp    edx,0x1e
c0027124:	7e 09                	jle    c002712f <__fixsfsi+0x4a>
c0027126:	83 fa 1f             	cmp    edx,0x1f
c0027129:	75 18                	jne    c0027143 <__fixsfsi+0x5e>
c002712b:	85 c9                	test   ecx,ecx
c002712d:	75 14                	jne    c0027143 <__fixsfsi+0x5e>
c002712f:	89 c8                	mov    eax,ecx
c0027131:	0d 00 00 00 80       	or     eax,0x80000000
c0027136:	b9 1f 00 00 00       	mov    ecx,0x1f
c002713b:	29 d1                	sub    ecx,edx
c002713d:	d3 e8                	shr    eax,cl
c002713f:	f7 d8                	neg    eax
c0027141:	eb 02                	jmp    c0027145 <__fixsfsi+0x60>
c0027143:	31 c0                	xor    eax,eax
c0027145:	5d                   	pop    ebp
c0027146:	c3                   	ret    

c0027147 <__fixunssfsi>:
c0027147:	55                   	push   ebp
c0027148:	89 e5                	mov    ebp,esp
c002714a:	53                   	push   ebx
c002714b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002714e:	89 d3                	mov    ebx,edx
c0027150:	c1 fb 17             	sar    ebx,0x17
c0027153:	83 eb 7f             	sub    ebx,0x7f
c0027156:	31 c0                	xor    eax,eax
c0027158:	83 fb 1f             	cmp    ebx,0x1f
c002715b:	77 18                	ja     c0027175 <__fixunssfsi+0x2e>
c002715d:	89 d0                	mov    eax,edx
c002715f:	c1 e0 08             	shl    eax,0x8
c0027162:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027167:	0d 00 00 00 80       	or     eax,0x80000000
c002716c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027171:	29 d9                	sub    ecx,ebx
c0027173:	d3 e8                	shr    eax,cl
c0027175:	5b                   	pop    ebx
c0027176:	5d                   	pop    ebp
c0027177:	c3                   	ret    

c0027178 <__cmpsf2>:
c0027178:	55                   	push   ebp
c0027179:	89 e5                	mov    ebp,esp
c002717b:	57                   	push   edi
c002717c:	56                   	push   esi
c002717d:	53                   	push   ebx
c002717e:	83 ec 24             	sub    esp,0x24
c0027181:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027184:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027187:	e8 4f 10 00 00       	call   c00281db <__truncdfsf2>
c002718c:	5a                   	pop    edx
c002718d:	59                   	pop    ecx
c002718e:	89 c3                	mov    ebx,eax
c0027190:	c1 e8 17             	shr    eax,0x17
c0027193:	0f b6 f0             	movzx  esi,al
c0027196:	89 d8                	mov    eax,ebx
c0027198:	c1 e8 1f             	shr    eax,0x1f
c002719b:	31 c6                	xor    esi,eax
c002719d:	c1 e3 08             	shl    ebx,0x8
c00271a0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00271a3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00271a6:	e8 30 10 00 00       	call   c00281db <__truncdfsf2>
c00271ab:	83 c4 10             	add    esp,0x10
c00271ae:	89 c1                	mov    ecx,eax
c00271b0:	c1 e9 17             	shr    ecx,0x17
c00271b3:	0f b6 c9             	movzx  ecx,cl
c00271b6:	89 c7                	mov    edi,eax
c00271b8:	c1 ef 1f             	shr    edi,0x1f
c00271bb:	89 ca                	mov    edx,ecx
c00271bd:	31 fa                	xor    edx,edi
c00271bf:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00271c2:	c1 e0 08             	shl    eax,0x8
c00271c5:	89 c2                	mov    edx,eax
c00271c7:	89 d8                	mov    eax,ebx
c00271c9:	09 d0                	or     eax,edx
c00271cb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00271d0:	09 f0                	or     eax,esi
c00271d2:	75 08                	jne    c00271dc <__cmpsf2+0x64>
c00271d4:	31 c0                	xor    eax,eax
c00271d6:	39 f9                	cmp    ecx,edi
c00271d8:	75 0c                	jne    c00271e6 <__cmpsf2+0x6e>
c00271da:	eb 29                	jmp    c0027205 <__cmpsf2+0x8d>
c00271dc:	b8 01 00 00 00       	mov    eax,0x1
c00271e1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00271e4:	7f 1f                	jg     c0027205 <__cmpsf2+0x8d>
c00271e6:	83 c8 ff             	or     eax,0xffffffff
c00271e9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00271ec:	7c 17                	jl     c0027205 <__cmpsf2+0x8d>
c00271ee:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00271f4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00271fa:	b8 01 00 00 00       	mov    eax,0x1
c00271ff:	39 d3                	cmp    ebx,edx
c0027201:	77 02                	ja     c0027205 <__cmpsf2+0x8d>
c0027203:	19 c0                	sbb    eax,eax
c0027205:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027208:	5b                   	pop    ebx
c0027209:	5e                   	pop    esi
c002720a:	5f                   	pop    edi
c002720b:	5d                   	pop    ebp
c002720c:	c3                   	ret    

c002720d <__eqsf2>:
c002720d:	55                   	push   ebp
c002720e:	89 e5                	mov    ebp,esp
c0027210:	83 ec 24             	sub    esp,0x24
c0027213:	6a 01                	push   0x1
c0027215:	83 ec 0c             	sub    esp,0xc
c0027218:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002721b:	e8 df 10 00 00       	call   c00282ff <__extendsfdf2>
c0027220:	83 c4 10             	add    esp,0x10
c0027223:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027226:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027229:	52                   	push   edx
c002722a:	50                   	push   eax
c002722b:	50                   	push   eax
c002722c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002722f:	e8 cb 10 00 00       	call   c00282ff <__extendsfdf2>
c0027234:	59                   	pop    ecx
c0027235:	59                   	pop    ecx
c0027236:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027239:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002723c:	52                   	push   edx
c002723d:	50                   	push   eax
c002723e:	e8 35 ff ff ff       	call   c0027178 <__cmpsf2>
c0027243:	83 c4 20             	add    esp,0x20
c0027246:	c9                   	leave  
c0027247:	c3                   	ret    

c0027248 <__nesf2>:
c0027248:	eb c3                	jmp    c002720d <__eqsf2>

c002724a <__gtsf2>:
c002724a:	55                   	push   ebp
c002724b:	89 e5                	mov    ebp,esp
c002724d:	83 ec 24             	sub    esp,0x24
c0027250:	6a ff                	push   0xffffffff
c0027252:	83 ec 0c             	sub    esp,0xc
c0027255:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027258:	e8 a2 10 00 00       	call   c00282ff <__extendsfdf2>
c002725d:	83 c4 10             	add    esp,0x10
c0027260:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027263:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027266:	52                   	push   edx
c0027267:	50                   	push   eax
c0027268:	50                   	push   eax
c0027269:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002726c:	e8 8e 10 00 00       	call   c00282ff <__extendsfdf2>
c0027271:	59                   	pop    ecx
c0027272:	59                   	pop    ecx
c0027273:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027276:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027279:	52                   	push   edx
c002727a:	50                   	push   eax
c002727b:	e8 f8 fe ff ff       	call   c0027178 <__cmpsf2>
c0027280:	83 c4 20             	add    esp,0x20
c0027283:	c9                   	leave  
c0027284:	c3                   	ret    

c0027285 <__gesf2>:
c0027285:	eb c3                	jmp    c002724a <__gtsf2>

c0027287 <__ltsf2>:
c0027287:	eb 84                	jmp    c002720d <__eqsf2>

c0027289 <__lesf2>:
c0027289:	eb 82                	jmp    c002720d <__eqsf2>

c002728b <__adddf3>:
c002728b:	55                   	push   ebp
c002728c:	89 e5                	mov    ebp,esp
c002728e:	57                   	push   edi
c002728f:	56                   	push   esi
c0027290:	53                   	push   ebx
c0027291:	83 ec 24             	sub    esp,0x24
c0027294:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027297:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002729a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002729d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00272a0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00272a3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00272a6:	89 c8                	mov    eax,ecx
c00272a8:	89 ce                	mov    esi,ecx
c00272aa:	c1 fe 14             	sar    esi,0x14
c00272ad:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00272b0:	89 fb                	mov    ebx,edi
c00272b2:	89 fa                	mov    edx,edi
c00272b4:	c1 e2 0b             	shl    edx,0xb
c00272b7:	c1 e0 0b             	shl    eax,0xb
c00272ba:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00272bf:	c1 eb 15             	shr    ebx,0x15
c00272c2:	09 d8                	or     eax,ebx
c00272c4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00272c7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00272ca:	c1 fe 14             	sar    esi,0x14
c00272cd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00272d0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00272d3:	89 f3                	mov    ebx,esi
c00272d5:	c1 e3 0b             	shl    ebx,0xb
c00272d8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00272db:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00272de:	c1 e3 0b             	shl    ebx,0xb
c00272e1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00272e7:	c1 ee 15             	shr    esi,0x15
c00272ea:	09 f3                	or     ebx,esi
c00272ec:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00272ef:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00272f2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00272f5:	0f 88 5f 02 00 00    	js     c002755a <__adddf3+0x2cf>
c00272fb:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00272fe:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027301:	85 db                	test   ebx,ebx
c0027303:	0f 8e c7 00 00 00    	jle    c00273d0 <__adddf3+0x145>
c0027309:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027310:	75 1a                	jne    c002732c <__adddf3+0xa1>
c0027312:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027315:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027318:	0f 84 b2 05 00 00    	je     c00278d0 <__adddf3+0x645>
c002731e:	4b                   	dec    ebx
c002731f:	75 23                	jne    c0027344 <__adddf3+0xb9>
c0027321:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027324:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027327:	e9 99 00 00 00       	jmp    c00273c5 <__adddf3+0x13a>
c002732c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002732f:	f7 d6                	not    esi
c0027331:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027337:	0f 84 93 05 00 00    	je     c00278d0 <__adddf3+0x645>
c002733d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027344:	83 fb 1f             	cmp    ebx,0x1f
c0027347:	7e 42                	jle    c002738b <__adddf3+0x100>
c0027349:	83 fb 3f             	cmp    ebx,0x3f
c002734c:	0f 8f 7e 05 00 00    	jg     c00278d0 <__adddf3+0x645>
c0027352:	83 e3 1f             	and    ebx,0x1f
c0027355:	89 d9                	mov    ecx,ebx
c0027357:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002735a:	d3 ef                	shr    edi,cl
c002735c:	31 db                	xor    ebx,ebx
c002735e:	85 c9                	test   ecx,ecx
c0027360:	74 15                	je     c0027377 <__adddf3+0xec>
c0027362:	be 20 00 00 00       	mov    esi,0x20
c0027367:	29 ce                	sub    esi,ecx
c0027369:	89 f1                	mov    ecx,esi
c002736b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002736e:	d3 e6                	shl    esi,cl
c0027370:	31 db                	xor    ebx,ebx
c0027372:	85 f6                	test   esi,esi
c0027374:	0f 95 c3             	setne  bl
c0027377:	31 c9                	xor    ecx,ecx
c0027379:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002737d:	0f 95 c1             	setne  cl
c0027380:	09 cf                	or     edi,ecx
c0027382:	09 fb                	or     ebx,edi
c0027384:	01 da                	add    edx,ebx
c0027386:	83 d0 00             	adc    eax,0x0
c0027389:	eb 3a                	jmp    c00273c5 <__adddf3+0x13a>
c002738b:	bf 20 00 00 00       	mov    edi,0x20
c0027390:	29 df                	sub    edi,ebx
c0027392:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027395:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027398:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002739b:	d3 e6                	shl    esi,cl
c002739d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00273a0:	88 d9                	mov    cl,bl
c00273a2:	d3 ef                	shr    edi,cl
c00273a4:	09 fe                	or     esi,edi
c00273a6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00273a9:	88 d9                	mov    cl,bl
c00273ab:	d3 ef                	shr    edi,cl
c00273ad:	89 fb                	mov    ebx,edi
c00273af:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00273b2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00273b5:	d3 e7                	shl    edi,cl
c00273b7:	85 ff                	test   edi,edi
c00273b9:	0f 95 c1             	setne  cl
c00273bc:	0f b6 c9             	movzx  ecx,cl
c00273bf:	09 ce                	or     esi,ecx
c00273c1:	01 f2                	add    edx,esi
c00273c3:	11 d8                	adc    eax,ebx
c00273c5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00273c8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00273cb:	e9 52 01 00 00       	jmp    c0027522 <__adddf3+0x297>
c00273d0:	0f 84 d5 00 00 00    	je     c00274ab <__adddf3+0x220>
c00273d6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00273d9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00273dc:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00273df:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00273e2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00273e9:	75 20                	jne    c002740b <__adddf3+0x180>
c00273eb:	89 d6                	mov    esi,edx
c00273ed:	09 c6                	or     esi,eax
c00273ef:	0f 84 db 04 00 00    	je     c00278d0 <__adddf3+0x645>
c00273f5:	4b                   	dec    ebx
c00273f6:	75 29                	jne    c0027421 <__adddf3+0x196>
c00273f8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00273fb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00273fe:	01 d1                	add    ecx,edx
c0027400:	11 c6                	adc    esi,eax
c0027402:	89 f0                	mov    eax,esi
c0027404:	89 ca                	mov    edx,ecx
c0027406:	e9 17 01 00 00       	jmp    c0027522 <__adddf3+0x297>
c002740b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002740e:	f7 d6                	not    esi
c0027410:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027416:	0f 84 b4 04 00 00    	je     c00278d0 <__adddf3+0x645>
c002741c:	0d 00 00 00 80       	or     eax,0x80000000
c0027421:	83 fb 1f             	cmp    ebx,0x1f
c0027424:	7e 48                	jle    c002746e <__adddf3+0x1e3>
c0027426:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027429:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002742c:	83 fb 3f             	cmp    ebx,0x3f
c002742f:	0f 8f 9b 04 00 00    	jg     c00278d0 <__adddf3+0x645>
c0027435:	83 e3 1f             	and    ebx,0x1f
c0027438:	89 d9                	mov    ecx,ebx
c002743a:	89 c7                	mov    edi,eax
c002743c:	d3 ef                	shr    edi,cl
c002743e:	31 db                	xor    ebx,ebx
c0027440:	85 c9                	test   ecx,ecx
c0027442:	74 12                	je     c0027456 <__adddf3+0x1cb>
c0027444:	be 20 00 00 00       	mov    esi,0x20
c0027449:	29 ce                	sub    esi,ecx
c002744b:	89 f1                	mov    ecx,esi
c002744d:	d3 e0                	shl    eax,cl
c002744f:	31 db                	xor    ebx,ebx
c0027451:	85 c0                	test   eax,eax
c0027453:	0f 95 c3             	setne  bl
c0027456:	31 c0                	xor    eax,eax
c0027458:	85 d2                	test   edx,edx
c002745a:	0f 95 c0             	setne  al
c002745d:	09 c7                	or     edi,eax
c002745f:	09 fb                	or     ebx,edi
c0027461:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027464:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027467:	01 da                	add    edx,ebx
c0027469:	83 d6 00             	adc    esi,0x0
c002746c:	eb 39                	jmp    c00274a7 <__adddf3+0x21c>
c002746e:	be 20 00 00 00       	mov    esi,0x20
c0027473:	29 de                	sub    esi,ebx
c0027475:	89 c7                	mov    edi,eax
c0027477:	89 f1                	mov    ecx,esi
c0027479:	d3 e7                	shl    edi,cl
c002747b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002747e:	89 d7                	mov    edi,edx
c0027480:	88 d9                	mov    cl,bl
c0027482:	d3 ef                	shr    edi,cl
c0027484:	89 f9                	mov    ecx,edi
c0027486:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027489:	09 cf                	or     edi,ecx
c002748b:	88 d9                	mov    cl,bl
c002748d:	d3 e8                	shr    eax,cl
c002748f:	89 f1                	mov    ecx,esi
c0027491:	d3 e2                	shl    edx,cl
c0027493:	85 d2                	test   edx,edx
c0027495:	0f 95 c2             	setne  dl
c0027498:	0f b6 d2             	movzx  edx,dl
c002749b:	09 d7                	or     edi,edx
c002749d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274a0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00274a3:	01 fa                	add    edx,edi
c00274a5:	11 c6                	adc    esi,eax
c00274a7:	89 f0                	mov    eax,esi
c00274a9:	eb 77                	jmp    c0027522 <__adddf3+0x297>
c00274ab:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00274ae:	46                   	inc    esi
c00274af:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00274b2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00274b8:	75 41                	jne    c00274fb <__adddf3+0x270>
c00274ba:	89 d3                	mov    ebx,edx
c00274bc:	09 c3                	or     ebx,eax
c00274be:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00274c5:	75 27                	jne    c00274ee <__adddf3+0x263>
c00274c7:	85 db                	test   ebx,ebx
c00274c9:	0f 84 fb 03 00 00    	je     c00278ca <__adddf3+0x63f>
c00274cf:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00274d2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00274d5:	0f 84 f5 03 00 00    	je     c00278d0 <__adddf3+0x645>
c00274db:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00274de:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00274e1:	85 c0                	test   eax,eax
c00274e3:	0f 89 91 03 00 00    	jns    c002787a <__adddf3+0x5ef>
c00274e9:	e9 85 03 00 00       	jmp    c0027873 <__adddf3+0x5e8>
c00274ee:	85 db                	test   ebx,ebx
c00274f0:	0f 85 da 03 00 00    	jne    c00278d0 <__adddf3+0x645>
c00274f6:	e9 cf 03 00 00       	jmp    c00278ca <__adddf3+0x63f>
c00274fb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00274fe:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027501:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027504:	f7 d1                	not    ecx
c0027506:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002750c:	0f 84 70 03 00 00    	je     c0027882 <__adddf3+0x5f7>
c0027512:	d1 ea                	shr    edx,1
c0027514:	89 c1                	mov    ecx,eax
c0027516:	c1 e1 1f             	shl    ecx,0x1f
c0027519:	09 ca                	or     edx,ecx
c002751b:	d1 e8                	shr    eax,1
c002751d:	e9 6f 03 00 00       	jmp    c0027891 <__adddf3+0x606>
c0027522:	85 c0                	test   eax,eax
c0027524:	0f 89 67 03 00 00    	jns    c0027891 <__adddf3+0x606>
c002752a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002752d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027530:	f7 d1                	not    ecx
c0027532:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027538:	0f 84 44 03 00 00    	je     c0027882 <__adddf3+0x5f7>
c002753e:	89 d1                	mov    ecx,edx
c0027540:	d1 e9                	shr    ecx,1
c0027542:	83 e2 01             	and    edx,0x1
c0027545:	09 ca                	or     edx,ecx
c0027547:	89 c1                	mov    ecx,eax
c0027549:	c1 e1 1f             	shl    ecx,0x1f
c002754c:	09 ca                	or     edx,ecx
c002754e:	d1 e8                	shr    eax,1
c0027550:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027555:	e9 37 03 00 00       	jmp    c0027891 <__adddf3+0x606>
c002755a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002755d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027563:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027566:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027569:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002756f:	29 de                	sub    esi,ebx
c0027571:	85 f6                	test   esi,esi
c0027573:	0f 8e bd 00 00 00    	jle    c0027636 <__adddf3+0x3ab>
c0027579:	85 db                	test   ebx,ebx
c002757b:	75 17                	jne    c0027594 <__adddf3+0x309>
c002757d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027580:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027583:	0f 84 47 03 00 00    	je     c00278d0 <__adddf3+0x645>
c0027589:	4e                   	dec    esi
c002758a:	75 20                	jne    c00275ac <__adddf3+0x321>
c002758c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002758f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027592:	eb 5b                	jmp    c00275ef <__adddf3+0x364>
c0027594:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027597:	f7 d3                	not    ebx
c0027599:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002759f:	0f 84 2b 03 00 00    	je     c00278d0 <__adddf3+0x645>
c00275a5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00275ac:	83 fe 1f             	cmp    esi,0x1f
c00275af:	7e 49                	jle    c00275fa <__adddf3+0x36f>
c00275b1:	83 fe 3f             	cmp    esi,0x3f
c00275b4:	0f 8f 16 03 00 00    	jg     c00278d0 <__adddf3+0x645>
c00275ba:	83 e6 1f             	and    esi,0x1f
c00275bd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00275c0:	89 f1                	mov    ecx,esi
c00275c2:	d3 ef                	shr    edi,cl
c00275c4:	31 db                	xor    ebx,ebx
c00275c6:	85 f6                	test   esi,esi
c00275c8:	74 13                	je     c00275dd <__adddf3+0x352>
c00275ca:	b9 20 00 00 00       	mov    ecx,0x20
c00275cf:	29 f1                	sub    ecx,esi
c00275d1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275d4:	d3 e6                	shl    esi,cl
c00275d6:	31 db                	xor    ebx,ebx
c00275d8:	85 f6                	test   esi,esi
c00275da:	0f 95 c3             	setne  bl
c00275dd:	31 c9                	xor    ecx,ecx
c00275df:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00275e3:	0f 95 c1             	setne  cl
c00275e6:	09 cf                	or     edi,ecx
c00275e8:	09 fb                	or     ebx,edi
c00275ea:	29 da                	sub    edx,ebx
c00275ec:	83 d8 00             	sbb    eax,0x0
c00275ef:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00275f2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00275f5:	e9 aa 01 00 00       	jmp    c00277a4 <__adddf3+0x519>
c00275fa:	bf 20 00 00 00       	mov    edi,0x20
c00275ff:	29 f7                	sub    edi,esi
c0027601:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027604:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027607:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002760a:	d3 e3                	shl    ebx,cl
c002760c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002760f:	89 f1                	mov    ecx,esi
c0027611:	d3 ef                	shr    edi,cl
c0027613:	09 fb                	or     ebx,edi
c0027615:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027618:	89 f1                	mov    ecx,esi
c002761a:	d3 ef                	shr    edi,cl
c002761c:	89 fe                	mov    esi,edi
c002761e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027621:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027624:	d3 e7                	shl    edi,cl
c0027626:	85 ff                	test   edi,edi
c0027628:	0f 95 c1             	setne  cl
c002762b:	0f b6 c9             	movzx  ecx,cl
c002762e:	09 cb                	or     ebx,ecx
c0027630:	29 da                	sub    edx,ebx
c0027632:	19 f0                	sbb    eax,esi
c0027634:	eb b9                	jmp    c00275ef <__adddf3+0x364>
c0027636:	0f 84 cd 00 00 00    	je     c0027709 <__adddf3+0x47e>
c002763c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002763f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027642:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027645:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027649:	75 1b                	jne    c0027666 <__adddf3+0x3db>
c002764b:	89 d6                	mov    esi,edx
c002764d:	09 c6                	or     esi,eax
c002764f:	0f 84 7b 02 00 00    	je     c00278d0 <__adddf3+0x645>
c0027655:	4b                   	dec    ebx
c0027656:	75 24                	jne    c002767c <__adddf3+0x3f1>
c0027658:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002765b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002765e:	29 d1                	sub    ecx,edx
c0027660:	19 c6                	sbb    esi,eax
c0027662:	89 ca                	mov    edx,ecx
c0027664:	eb 61                	jmp    c00276c7 <__adddf3+0x43c>
c0027666:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027669:	f7 d6                	not    esi
c002766b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027671:	0f 84 59 02 00 00    	je     c00278d0 <__adddf3+0x645>
c0027677:	0d 00 00 00 80       	or     eax,0x80000000
c002767c:	83 fb 1f             	cmp    ebx,0x1f
c002767f:	7e 4d                	jle    c00276ce <__adddf3+0x443>
c0027681:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027684:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027687:	83 fb 3f             	cmp    ebx,0x3f
c002768a:	0f 8f 40 02 00 00    	jg     c00278d0 <__adddf3+0x645>
c0027690:	83 e3 1f             	and    ebx,0x1f
c0027693:	89 d9                	mov    ecx,ebx
c0027695:	89 c7                	mov    edi,eax
c0027697:	d3 ef                	shr    edi,cl
c0027699:	31 db                	xor    ebx,ebx
c002769b:	85 c9                	test   ecx,ecx
c002769d:	74 12                	je     c00276b1 <__adddf3+0x426>
c002769f:	be 20 00 00 00       	mov    esi,0x20
c00276a4:	29 ce                	sub    esi,ecx
c00276a6:	89 f1                	mov    ecx,esi
c00276a8:	d3 e0                	shl    eax,cl
c00276aa:	31 db                	xor    ebx,ebx
c00276ac:	85 c0                	test   eax,eax
c00276ae:	0f 95 c3             	setne  bl
c00276b1:	31 c0                	xor    eax,eax
c00276b3:	85 d2                	test   edx,edx
c00276b5:	0f 95 c0             	setne  al
c00276b8:	09 c7                	or     edi,eax
c00276ba:	09 fb                	or     ebx,edi
c00276bc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276bf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00276c2:	29 da                	sub    edx,ebx
c00276c4:	83 de 00             	sbb    esi,0x0
c00276c7:	89 f0                	mov    eax,esi
c00276c9:	e9 d6 00 00 00       	jmp    c00277a4 <__adddf3+0x519>
c00276ce:	be 20 00 00 00       	mov    esi,0x20
c00276d3:	29 de                	sub    esi,ebx
c00276d5:	89 c7                	mov    edi,eax
c00276d7:	89 f1                	mov    ecx,esi
c00276d9:	d3 e7                	shl    edi,cl
c00276db:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00276de:	89 d7                	mov    edi,edx
c00276e0:	88 d9                	mov    cl,bl
c00276e2:	d3 ef                	shr    edi,cl
c00276e4:	89 f9                	mov    ecx,edi
c00276e6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276e9:	09 cf                	or     edi,ecx
c00276eb:	88 d9                	mov    cl,bl
c00276ed:	d3 e8                	shr    eax,cl
c00276ef:	89 f1                	mov    ecx,esi
c00276f1:	d3 e2                	shl    edx,cl
c00276f3:	85 d2                	test   edx,edx
c00276f5:	0f 95 c2             	setne  dl
c00276f8:	0f b6 d2             	movzx  edx,dl
c00276fb:	09 d7                	or     edi,edx
c00276fd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027700:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027703:	29 fa                	sub    edx,edi
c0027705:	19 c6                	sbb    esi,eax
c0027707:	eb be                	jmp    c00276c7 <__adddf3+0x43c>
c0027709:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002770c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002770f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027715:	75 6a                	jne    c0027781 <__adddf3+0x4f6>
c0027717:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002771b:	75 58                	jne    c0027775 <__adddf3+0x4ea>
c002771d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027720:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027723:	89 d6                	mov    esi,edx
c0027725:	09 c6                	or     esi,eax
c0027727:	75 17                	jne    c0027740 <__adddf3+0x4b5>
c0027729:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002772c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002772f:	85 db                	test   ebx,ebx
c0027731:	0f 85 99 01 00 00    	jne    c00278d0 <__adddf3+0x645>
c0027737:	31 ff                	xor    edi,edi
c0027739:	31 c9                	xor    ecx,ecx
c002773b:	e9 90 01 00 00       	jmp    c00278d0 <__adddf3+0x645>
c0027740:	85 db                	test   ebx,ebx
c0027742:	0f 84 88 01 00 00    	je     c00278d0 <__adddf3+0x645>
c0027748:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002774b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002774e:	85 c0                	test   eax,eax
c0027750:	79 10                	jns    c0027762 <__adddf3+0x4d7>
c0027752:	31 c9                	xor    ecx,ecx
c0027754:	f7 da                	neg    edx
c0027756:	0f 95 c1             	setne  cl
c0027759:	01 c8                	add    eax,ecx
c002775b:	f7 d8                	neg    eax
c002775d:	e9 2f 01 00 00       	jmp    c0027891 <__adddf3+0x606>
c0027762:	31 ff                	xor    edi,edi
c0027764:	31 c9                	xor    ecx,ecx
c0027766:	89 c3                	mov    ebx,eax
c0027768:	09 d3                	or     ebx,edx
c002776a:	0f 84 60 01 00 00    	je     c00278d0 <__adddf3+0x645>
c0027770:	e9 05 01 00 00       	jmp    c002787a <__adddf3+0x5ef>
c0027775:	31 ff                	xor    edi,edi
c0027777:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002777c:	e9 4f 01 00 00       	jmp    c00278d0 <__adddf3+0x645>
c0027781:	89 c1                	mov    ecx,eax
c0027783:	89 d0                	mov    eax,edx
c0027785:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027788:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002778b:	89 ca                	mov    edx,ecx
c002778d:	85 c9                	test   ecx,ecx
c002778f:	79 2c                	jns    c00277bd <__adddf3+0x532>
c0027791:	31 c9                	xor    ecx,ecx
c0027793:	f7 d8                	neg    eax
c0027795:	0f 95 c1             	setne  cl
c0027798:	01 ca                	add    edx,ecx
c002779a:	f7 da                	neg    edx
c002779c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002779f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00277a2:	eb 19                	jmp    c00277bd <__adddf3+0x532>
c00277a4:	85 c0                	test   eax,eax
c00277a6:	0f 89 e5 00 00 00    	jns    c0027891 <__adddf3+0x606>
c00277ac:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00277b1:	89 c1                	mov    ecx,eax
c00277b3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00277b6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00277b9:	89 d0                	mov    eax,edx
c00277bb:	89 ca                	mov    edx,ecx
c00277bd:	85 d2                	test   edx,edx
c00277bf:	74 59                	je     c002781a <__adddf3+0x58f>
c00277c1:	0f bd da             	bsr    ebx,edx
c00277c4:	83 f3 1f             	xor    ebx,0x1f
c00277c7:	88 d9                	mov    cl,bl
c00277c9:	d3 e2                	shl    edx,cl
c00277cb:	bf 20 00 00 00       	mov    edi,0x20
c00277d0:	89 f9                	mov    ecx,edi
c00277d2:	29 d9                	sub    ecx,ebx
c00277d4:	89 c6                	mov    esi,eax
c00277d6:	d3 ee                	shr    esi,cl
c00277d8:	09 d6                	or     esi,edx
c00277da:	88 d9                	mov    cl,bl
c00277dc:	d3 e0                	shl    eax,cl
c00277de:	89 c2                	mov    edx,eax
c00277e0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00277e3:	25 ff 07 00 00       	and    eax,0x7ff
c00277e8:	39 d8                	cmp    eax,ebx
c00277ea:	7f 22                	jg     c002780e <__adddf3+0x583>
c00277ec:	29 c3                	sub    ebx,eax
c00277ee:	43                   	inc    ebx
c00277ef:	88 d9                	mov    cl,bl
c00277f1:	d3 ea                	shr    edx,cl
c00277f3:	29 df                	sub    edi,ebx
c00277f5:	89 f9                	mov    ecx,edi
c00277f7:	89 f0                	mov    eax,esi
c00277f9:	d3 e0                	shl    eax,cl
c00277fb:	09 c2                	or     edx,eax
c00277fd:	89 f0                	mov    eax,esi
c00277ff:	88 d9                	mov    cl,bl
c0027801:	d3 e8                	shr    eax,cl
c0027803:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027806:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002780c:	eb 6f                	jmp    c002787d <__adddf3+0x5f2>
c002780e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027811:	29 d8                	sub    eax,ebx
c0027813:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027816:	89 f0                	mov    eax,esi
c0027818:	eb 59                	jmp    c0027873 <__adddf3+0x5e8>
c002781a:	85 c0                	test   eax,eax
c002781c:	74 6a                	je     c0027888 <__adddf3+0x5fd>
c002781e:	0f bd c8             	bsr    ecx,eax
c0027821:	83 f1 1f             	xor    ecx,0x1f
c0027824:	d3 e0                	shl    eax,cl
c0027826:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027829:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002782f:	83 c1 20             	add    ecx,0x20
c0027832:	39 cb                	cmp    ebx,ecx
c0027834:	7f 35                	jg     c002786b <__adddf3+0x5e0>
c0027836:	29 d9                	sub    ecx,ebx
c0027838:	8d 71 01             	lea    esi,[ecx+0x1]
c002783b:	83 fe 1f             	cmp    esi,0x1f
c002783e:	7e 09                	jle    c0027849 <__adddf3+0x5be>
c0027840:	83 e9 1f             	sub    ecx,0x1f
c0027843:	d3 e8                	shr    eax,cl
c0027845:	89 c3                	mov    ebx,eax
c0027847:	eb 11                	jmp    c002785a <__adddf3+0x5cf>
c0027849:	b9 20 00 00 00       	mov    ecx,0x20
c002784e:	29 f1                	sub    ecx,esi
c0027850:	89 c3                	mov    ebx,eax
c0027852:	d3 e3                	shl    ebx,cl
c0027854:	89 f1                	mov    ecx,esi
c0027856:	d3 e8                	shr    eax,cl
c0027858:	89 c2                	mov    edx,eax
c002785a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002785d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027862:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027865:	89 d0                	mov    eax,edx
c0027867:	89 da                	mov    edx,ebx
c0027869:	eb 26                	jmp    c0027891 <__adddf3+0x606>
c002786b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002786e:	29 cf                	sub    edi,ecx
c0027870:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027873:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027878:	eb 17                	jmp    c0027891 <__adddf3+0x606>
c002787a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002787d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027880:	eb 0f                	jmp    c0027891 <__adddf3+0x606>
c0027882:	31 d2                	xor    edx,edx
c0027884:	31 c0                	xor    eax,eax
c0027886:	eb 09                	jmp    c0027891 <__adddf3+0x606>
c0027888:	89 c2                	mov    edx,eax
c002788a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027891:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027894:	c1 e1 14             	shl    ecx,0x14
c0027897:	89 c3                	mov    ebx,eax
c0027899:	c1 eb 0b             	shr    ebx,0xb
c002789c:	09 d9                	or     ecx,ebx
c002789e:	89 d3                	mov    ebx,edx
c00278a0:	c1 eb 0b             	shr    ebx,0xb
c00278a3:	c1 e0 15             	shl    eax,0x15
c00278a6:	09 d8                	or     eax,ebx
c00278a8:	89 c7                	mov    edi,eax
c00278aa:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00278b0:	0f 95 c0             	setne  al
c00278b3:	89 c6                	mov    esi,eax
c00278b5:	09 f3                	or     ebx,esi
c00278b7:	83 e3 01             	and    ebx,0x1
c00278ba:	c1 ea 0a             	shr    edx,0xa
c00278bd:	21 da                	and    edx,ebx
c00278bf:	89 f8                	mov    eax,edi
c00278c1:	01 d0                	add    eax,edx
c00278c3:	83 d1 00             	adc    ecx,0x0
c00278c6:	89 c7                	mov    edi,eax
c00278c8:	eb 06                	jmp    c00278d0 <__adddf3+0x645>
c00278ca:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278cd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278d0:	89 f8                	mov    eax,edi
c00278d2:	89 ca                	mov    edx,ecx
c00278d4:	83 c4 24             	add    esp,0x24
c00278d7:	5b                   	pop    ebx
c00278d8:	5e                   	pop    esi
c00278d9:	5f                   	pop    edi
c00278da:	5d                   	pop    ebp
c00278db:	c3                   	ret    

c00278dc <__subdf3>:
c00278dc:	55                   	push   ebp
c00278dd:	89 e5                	mov    ebp,esp
c00278df:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00278e2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00278e5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00278eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00278ee:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00278f1:	5d                   	pop    ebp
c00278f2:	e9 94 f9 ff ff       	jmp    c002728b <__adddf3>

c00278f7 <__negdf2>:
c00278f7:	55                   	push   ebp
c00278f8:	89 e5                	mov    ebp,esp
c00278fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00278fd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027900:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027906:	5d                   	pop    ebp
c0027907:	c3                   	ret    

c0027908 <__muldf3>:
c0027908:	55                   	push   ebp
c0027909:	89 e5                	mov    ebp,esp
c002790b:	57                   	push   edi
c002790c:	56                   	push   esi
c002790d:	53                   	push   ebx
c002790e:	83 ec 24             	sub    esp,0x24
c0027911:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027914:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027917:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002791a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002791d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027920:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027923:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027926:	89 c8                	mov    eax,ecx
c0027928:	c1 f8 14             	sar    eax,0x14
c002792b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002792e:	89 f8                	mov    eax,edi
c0027930:	89 fb                	mov    ebx,edi
c0027932:	c1 e3 0b             	shl    ebx,0xb
c0027935:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027938:	c1 e1 0b             	shl    ecx,0xb
c002793b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027941:	c1 e8 15             	shr    eax,0x15
c0027944:	09 c1                	or     ecx,eax
c0027946:	89 d6                	mov    esi,edx
c0027948:	89 d0                	mov    eax,edx
c002794a:	c1 f8 14             	sar    eax,0x14
c002794d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027950:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027953:	89 c3                	mov    ebx,eax
c0027955:	c1 e3 0b             	shl    ebx,0xb
c0027958:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002795b:	c1 e6 0b             	shl    esi,0xb
c002795e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027964:	c1 e8 15             	shr    eax,0x15
c0027967:	09 c6                	or     esi,eax
c0027969:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002796c:	25 ff 07 00 00       	and    eax,0x7ff
c0027971:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027974:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027977:	25 ff 07 00 00       	and    eax,0x7ff
c002797c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002797f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027982:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027985:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002798c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002798f:	40                   	inc    eax
c0027990:	a9 fe 07 00 00       	test   eax,0x7fe
c0027995:	0f 85 8d 00 00 00    	jne    c0027a28 <__muldf3+0x120>
c002799b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002799e:	09 c8                	or     eax,ecx
c00279a0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00279a4:	74 44                	je     c00279ea <__muldf3+0xe2>
c00279a6:	85 c0                	test   eax,eax
c00279a8:	0f 85 31 02 00 00    	jne    c0027bdf <__muldf3+0x2d7>
c00279ae:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00279b1:	40                   	inc    eax
c00279b2:	a9 fe 07 00 00       	test   eax,0x7fe
c00279b7:	75 13                	jne    c00279cc <__muldf3+0xc4>
c00279b9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00279bc:	09 f1                	or     ecx,esi
c00279be:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279c2:	74 22                	je     c00279e6 <__muldf3+0xde>
c00279c4:	85 c9                	test   ecx,ecx
c00279c6:	0f 85 0d 02 00 00    	jne    c0027bd9 <__muldf3+0x2d1>
c00279cc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00279d0:	0f 89 09 02 00 00    	jns    c0027bdf <__muldf3+0x2d7>
c00279d6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00279d9:	05 00 00 00 80       	add    eax,0x80000000
c00279de:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279e1:	e9 f9 01 00 00       	jmp    c0027bdf <__muldf3+0x2d7>
c00279e6:	85 c9                	test   ecx,ecx
c00279e8:	eb 2e                	jmp    c0027a18 <__muldf3+0x110>
c00279ea:	85 c0                	test   eax,eax
c00279ec:	74 20                	je     c0027a0e <__muldf3+0x106>
c00279ee:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00279f1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279f4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279f7:	c1 ef 1f             	shr    edi,0x1f
c00279fa:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00279fd:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027a00:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027a03:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a06:	09 f9                	or     ecx,edi
c0027a08:	78 1e                	js     c0027a28 <__muldf3+0x120>
c0027a0a:	89 c3                	mov    ebx,eax
c0027a0c:	eb e0                	jmp    c00279ee <__muldf3+0xe6>
c0027a0e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a11:	f7 d0                	not    eax
c0027a13:	a9 ff 07 00 00       	test   eax,0x7ff
c0027a18:	75 b2                	jne    c00279cc <__muldf3+0xc4>
c0027a1a:	31 ff                	xor    edi,edi
c0027a1c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027a23:	e9 b7 01 00 00       	jmp    c0027bdf <__muldf3+0x2d7>
c0027a28:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a2b:	40                   	inc    eax
c0027a2c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027a31:	75 57                	jne    c0027a8a <__muldf3+0x182>
c0027a33:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027a36:	09 f0                	or     eax,esi
c0027a38:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a3c:	74 23                	je     c0027a61 <__muldf3+0x159>
c0027a3e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027a42:	0f 89 91 01 00 00    	jns    c0027bd9 <__muldf3+0x2d1>
c0027a48:	85 c0                	test   eax,eax
c0027a4a:	0f 85 89 01 00 00    	jne    c0027bd9 <__muldf3+0x2d1>
c0027a50:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027a53:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027a59:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a5c:	e9 7e 01 00 00       	jmp    c0027bdf <__muldf3+0x2d7>
c0027a61:	85 c0                	test   eax,eax
c0027a63:	75 0c                	jne    c0027a71 <__muldf3+0x169>
c0027a65:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027a69:	0f 89 6a 01 00 00    	jns    c0027bd9 <__muldf3+0x2d1>
c0027a6f:	eb df                	jmp    c0027a50 <__muldf3+0x148>
c0027a71:	01 f6                	add    esi,esi
c0027a73:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a76:	c1 ea 1f             	shr    edx,0x1f
c0027a79:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027a7c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027a7f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027a82:	09 d6                	or     esi,edx
c0027a84:	78 04                	js     c0027a8a <__muldf3+0x182>
c0027a86:	89 c3                	mov    ebx,eax
c0027a88:	eb e7                	jmp    c0027a71 <__muldf3+0x169>
c0027a8a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027a90:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027a96:	89 c8                	mov    eax,ecx
c0027a98:	f7 e6                	mul    esi
c0027a9a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027a9d:	89 c7                	mov    edi,eax
c0027a9f:	89 c8                	mov    eax,ecx
c0027aa1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027aa4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027aa7:	89 c1                	mov    ecx,eax
c0027aa9:	89 f0                	mov    eax,esi
c0027aab:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027aae:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027ab1:	89 c6                	mov    esi,eax
c0027ab3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ab6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027ab9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027abc:	31 c0                	xor    eax,eax
c0027abe:	01 f1                	add    ecx,esi
c0027ac0:	0f 92 c0             	setb   al
c0027ac3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027ac6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027ac9:	83 d6 00             	adc    esi,0x0
c0027acc:	01 c7                	add    edi,eax
c0027ace:	83 d6 00             	adc    esi,0x0
c0027ad1:	01 ca                	add    edx,ecx
c0027ad3:	0f 92 c1             	setb   cl
c0027ad6:	0f b6 c9             	movzx  ecx,cl
c0027ad9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027adc:	83 d6 00             	adc    esi,0x0
c0027adf:	01 cf                	add    edi,ecx
c0027ae1:	83 d6 00             	adc    esi,0x0
c0027ae4:	31 c9                	xor    ecx,ecx
c0027ae6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027ae9:	0f 95 c1             	setne  cl
c0027aec:	09 cf                	or     edi,ecx
c0027aee:	85 f6                	test   esi,esi
c0027af0:	78 0c                	js     c0027afe <__muldf3+0x1f6>
c0027af2:	01 f6                	add    esi,esi
c0027af4:	89 f8                	mov    eax,edi
c0027af6:	c1 e8 1f             	shr    eax,0x1f
c0027af9:	09 c6                	or     esi,eax
c0027afb:	01 ff                	add    edi,edi
c0027afd:	4b                   	dec    ebx
c0027afe:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027b04:	0f 8f 85 00 00 00    	jg     c0027b8f <__muldf3+0x287>
c0027b0a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027b10:	85 db                	test   ebx,ebx
c0027b12:	0f 8f 84 00 00 00    	jg     c0027b9c <__muldf3+0x294>
c0027b18:	83 fb cc             	cmp    ebx,0xffffffcc
c0027b1b:	7c 79                	jl     c0027b96 <__muldf3+0x28e>
c0027b1d:	ba 01 00 00 00       	mov    edx,0x1
c0027b22:	29 da                	sub    edx,ebx
c0027b24:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027b2a:	83 fa 1f             	cmp    edx,0x1f
c0027b2d:	7e 30                	jle    c0027b5f <__muldf3+0x257>
c0027b2f:	83 fa 20             	cmp    edx,0x20
c0027b32:	75 0b                	jne    c0027b3f <__muldf3+0x237>
c0027b34:	31 c0                	xor    eax,eax
c0027b36:	85 ff                	test   edi,edi
c0027b38:	0f 95 c0             	setne  al
c0027b3b:	89 c7                	mov    edi,eax
c0027b3d:	eb 1a                	jmp    c0027b59 <__muldf3+0x251>
c0027b3f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027b42:	89 f0                	mov    eax,esi
c0027b44:	d3 e0                	shl    eax,cl
c0027b46:	09 f8                	or     eax,edi
c0027b48:	0f 95 c0             	setne  al
c0027b4b:	0f b6 c0             	movzx  eax,al
c0027b4e:	89 c7                	mov    edi,eax
c0027b50:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027b55:	29 d9                	sub    ecx,ebx
c0027b57:	d3 ee                	shr    esi,cl
c0027b59:	09 f7                	or     edi,esi
c0027b5b:	31 db                	xor    ebx,ebx
c0027b5d:	eb 3b                	jmp    c0027b9a <__muldf3+0x292>
c0027b5f:	83 c3 1f             	add    ebx,0x1f
c0027b62:	89 f0                	mov    eax,esi
c0027b64:	88 d9                	mov    cl,bl
c0027b66:	d3 e0                	shl    eax,cl
c0027b68:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b6b:	89 f8                	mov    eax,edi
c0027b6d:	88 d1                	mov    cl,dl
c0027b6f:	d3 e8                	shr    eax,cl
c0027b71:	89 c1                	mov    ecx,eax
c0027b73:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b76:	09 c8                	or     eax,ecx
c0027b78:	88 d9                	mov    cl,bl
c0027b7a:	d3 e7                	shl    edi,cl
c0027b7c:	31 db                	xor    ebx,ebx
c0027b7e:	85 ff                	test   edi,edi
c0027b80:	0f 95 c3             	setne  bl
c0027b83:	89 df                	mov    edi,ebx
c0027b85:	09 c7                	or     edi,eax
c0027b87:	88 d1                	mov    cl,dl
c0027b89:	d3 ee                	shr    esi,cl
c0027b8b:	31 db                	xor    ebx,ebx
c0027b8d:	eb 0d                	jmp    c0027b9c <__muldf3+0x294>
c0027b8f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027b94:	eb 02                	jmp    c0027b98 <__muldf3+0x290>
c0027b96:	31 db                	xor    ebx,ebx
c0027b98:	31 ff                	xor    edi,edi
c0027b9a:	31 f6                	xor    esi,esi
c0027b9c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b9f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027ba2:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027ba7:	09 c3                	or     ebx,eax
c0027ba9:	c1 e3 14             	shl    ebx,0x14
c0027bac:	89 f0                	mov    eax,esi
c0027bae:	c1 e8 0b             	shr    eax,0xb
c0027bb1:	09 c3                	or     ebx,eax
c0027bb3:	89 f8                	mov    eax,edi
c0027bb5:	c1 e8 0b             	shr    eax,0xb
c0027bb8:	c1 e6 15             	shl    esi,0x15
c0027bbb:	09 c6                	or     esi,eax
c0027bbd:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027bc3:	0f 95 c1             	setne  cl
c0027bc6:	09 c8                	or     eax,ecx
c0027bc8:	83 e0 01             	and    eax,0x1
c0027bcb:	c1 ef 0a             	shr    edi,0xa
c0027bce:	21 c7                	and    edi,eax
c0027bd0:	01 f7                	add    edi,esi
c0027bd2:	83 d3 00             	adc    ebx,0x0
c0027bd5:	89 da                	mov    edx,ebx
c0027bd7:	eb 03                	jmp    c0027bdc <__muldf3+0x2d4>
c0027bd9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027bdc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027bdf:	89 f8                	mov    eax,edi
c0027be1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027be4:	83 c4 24             	add    esp,0x24
c0027be7:	5b                   	pop    ebx
c0027be8:	5e                   	pop    esi
c0027be9:	5f                   	pop    edi
c0027bea:	5d                   	pop    ebp
c0027beb:	c3                   	ret    

c0027bec <__divdf3>:
c0027bec:	55                   	push   ebp
c0027bed:	89 e5                	mov    ebp,esp
c0027bef:	57                   	push   edi
c0027bf0:	56                   	push   esi
c0027bf1:	53                   	push   ebx
c0027bf2:	83 ec 2c             	sub    esp,0x2c
c0027bf5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027bf8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027bfb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027bfe:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c01:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027c04:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c07:	89 ce                	mov    esi,ecx
c0027c09:	89 c8                	mov    eax,ecx
c0027c0b:	c1 f8 14             	sar    eax,0x14
c0027c0e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c11:	89 f8                	mov    eax,edi
c0027c13:	89 fb                	mov    ebx,edi
c0027c15:	c1 e3 0b             	shl    ebx,0xb
c0027c18:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027c1b:	c1 e6 0b             	shl    esi,0xb
c0027c1e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c24:	c1 e8 15             	shr    eax,0x15
c0027c27:	09 c6                	or     esi,eax
c0027c29:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027c2c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c2f:	89 c2                	mov    edx,eax
c0027c31:	c1 fa 14             	sar    edx,0x14
c0027c34:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027c37:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c3a:	89 de                	mov    esi,ebx
c0027c3c:	c1 e6 0b             	shl    esi,0xb
c0027c3f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027c42:	c1 e0 0b             	shl    eax,0xb
c0027c45:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027c4a:	c1 eb 15             	shr    ebx,0x15
c0027c4d:	09 d8                	or     eax,ebx
c0027c4f:	89 c2                	mov    edx,eax
c0027c51:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c54:	25 ff 07 00 00       	and    eax,0x7ff
c0027c59:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027c5c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027c5f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c65:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027c68:	29 d8                	sub    eax,ebx
c0027c6a:	05 ff 03 00 00       	add    eax,0x3ff
c0027c6f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027c72:	46                   	inc    esi
c0027c73:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027c79:	0f 85 a5 00 00 00    	jne    c0027d24 <__divdf3+0x138>
c0027c7f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027c82:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027c85:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027c89:	74 2a                	je     c0027cb5 <__divdf3+0xc9>
c0027c8b:	85 f6                	test   esi,esi
c0027c8d:	0f 85 cc 02 00 00    	jne    c0027f5f <__divdf3+0x373>
c0027c93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c96:	40                   	inc    eax
c0027c97:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c9c:	75 26                	jne    c0027cc4 <__divdf3+0xd8>
c0027c9e:	85 db                	test   ebx,ebx
c0027ca0:	74 22                	je     c0027cc4 <__divdf3+0xd8>
c0027ca2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027ca5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027ca8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cab:	09 d0                	or     eax,edx
c0027cad:	0f 85 ac 02 00 00    	jne    c0027f5f <__divdf3+0x373>
c0027cb3:	eb 63                	jmp    c0027d18 <__divdf3+0x12c>
c0027cb5:	85 f6                	test   esi,esi
c0027cb7:	75 22                	jne    c0027cdb <__divdf3+0xef>
c0027cb9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027cbc:	40                   	inc    eax
c0027cbd:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cc2:	74 36                	je     c0027cfa <__divdf3+0x10e>
c0027cc4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027cc8:	0f 89 91 02 00 00    	jns    c0027f5f <__divdf3+0x373>
c0027cce:	89 f8                	mov    eax,edi
c0027cd0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027cd6:	e9 80 02 00 00       	jmp    c0027f5b <__divdf3+0x36f>
c0027cdb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027cde:	01 f6                	add    esi,esi
c0027ce0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027ce3:	c1 ef 1f             	shr    edi,0x1f
c0027ce6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027ce9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027cec:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027cef:	09 f7                	or     edi,esi
c0027cf1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027cf4:	78 2e                	js     c0027d24 <__divdf3+0x138>
c0027cf6:	89 c8                	mov    eax,ecx
c0027cf8:	eb e1                	jmp    c0027cdb <__divdf3+0xef>
c0027cfa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cfd:	09 d0                	or     eax,edx
c0027cff:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027d03:	74 0f                	je     c0027d14 <__divdf3+0x128>
c0027d05:	85 c0                	test   eax,eax
c0027d07:	74 bb                	je     c0027cc4 <__divdf3+0xd8>
c0027d09:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027d0c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027d0f:	e9 4b 02 00 00       	jmp    c0027f5f <__divdf3+0x373>
c0027d14:	85 c0                	test   eax,eax
c0027d16:	75 ac                	jne    c0027cc4 <__divdf3+0xd8>
c0027d18:	31 ff                	xor    edi,edi
c0027d1a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027d1f:	e9 3b 02 00 00       	jmp    c0027f5f <__divdf3+0x373>
c0027d24:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d27:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027d2a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027d30:	75 6b                	jne    c0027d9d <__divdf3+0x1b1>
c0027d32:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d35:	09 d6                	or     esi,edx
c0027d37:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027d3b:	74 28                	je     c0027d65 <__divdf3+0x179>
c0027d3d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027d40:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027d43:	85 f6                	test   esi,esi
c0027d45:	0f 85 14 02 00 00    	jne    c0027f5f <__divdf3+0x373>
c0027d4b:	31 ff                	xor    edi,edi
c0027d4d:	31 c9                	xor    ecx,ecx
c0027d4f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d52:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027d55:	0f 89 04 02 00 00    	jns    c0027f5f <__divdf3+0x373>
c0027d5b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027d60:	e9 fa 01 00 00       	jmp    c0027f5f <__divdf3+0x373>
c0027d65:	85 f6                	test   esi,esi
c0027d67:	75 1b                	jne    c0027d84 <__divdf3+0x198>
c0027d69:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d6c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027d6f:	25 00 00 00 80       	and    eax,0x80000000
c0027d74:	31 c9                	xor    ecx,ecx
c0027d76:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027d7b:	89 cf                	mov    edi,ecx
c0027d7d:	89 c1                	mov    ecx,eax
c0027d7f:	e9 db 01 00 00       	jmp    c0027f5f <__divdf3+0x373>
c0027d84:	01 d2                	add    edx,edx
c0027d86:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027d89:	c1 eb 1f             	shr    ebx,0x1f
c0027d8c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d8f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027d92:	8d 48 01             	lea    ecx,[eax+0x1]
c0027d95:	09 da                	or     edx,ebx
c0027d97:	78 04                	js     c0027d9d <__divdf3+0x1b1>
c0027d99:	89 c8                	mov    eax,ecx
c0027d9b:	eb e7                	jmp    c0027d84 <__divdf3+0x198>
c0027d9d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027da0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027da6:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027dac:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027daf:	39 d6                	cmp    esi,edx
c0027db1:	77 0d                	ja     c0027dc0 <__divdf3+0x1d4>
c0027db3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027db6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027db9:	72 1b                	jb     c0027dd6 <__divdf3+0x1ea>
c0027dbb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027dbe:	75 16                	jne    c0027dd6 <__divdf3+0x1ea>
c0027dc0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027dc3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027dc6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027dc9:	83 de 00             	sbb    esi,0x0
c0027dcc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027dcf:	ba 01 00 00 00       	mov    edx,0x1
c0027dd4:	eb 02                	jmp    c0027dd8 <__divdf3+0x1ec>
c0027dd6:	31 d2                	xor    edx,edx
c0027dd8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027ddf:	31 ff                	xor    edi,edi
c0027de1:	01 ff                	add    edi,edi
c0027de3:	89 d1                	mov    ecx,edx
c0027de5:	c1 e9 1f             	shr    ecx,0x1f
c0027de8:	09 cf                	or     edi,ecx
c0027dea:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027ded:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027df0:	89 da                	mov    edx,ebx
c0027df2:	89 f3                	mov    ebx,esi
c0027df4:	8d 34 36             	lea    esi,[esi+esi*1]
c0027df7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027dfa:	c1 e9 1f             	shr    ecx,0x1f
c0027dfd:	09 ce                	or     esi,ecx
c0027dff:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e02:	01 c9                	add    ecx,ecx
c0027e04:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027e07:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027e0a:	85 db                	test   ebx,ebx
c0027e0c:	78 29                	js     c0027e37 <__divdf3+0x24b>
c0027e0e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027e11:	72 07                	jb     c0027e1a <__divdf3+0x22e>
c0027e13:	75 3c                	jne    c0027e51 <__divdf3+0x265>
c0027e15:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027e18:	77 37                	ja     c0027e51 <__divdf3+0x265>
c0027e1a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e1d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027e20:	31 d2                	xor    edx,edx
c0027e22:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027e25:	0f 97 c2             	seta   dl
c0027e28:	29 d6                	sub    esi,edx
c0027e2a:	89 d9                	mov    ecx,ebx
c0027e2c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027e2f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027e32:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027e35:	eb 17                	jmp    c0027e4e <__divdf3+0x262>
c0027e37:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e3a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e3d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027e40:	0f 97 c1             	seta   cl
c0027e43:	0f b6 c9             	movzx  ecx,cl
c0027e46:	29 ce                	sub    esi,ecx
c0027e48:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027e4b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027e4e:	83 ca 01             	or     edx,0x1
c0027e51:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027e54:	75 8b                	jne    c0027de1 <__divdf3+0x1f5>
c0027e56:	c1 e7 09             	shl    edi,0x9
c0027e59:	89 d1                	mov    ecx,edx
c0027e5b:	c1 e9 17             	shr    ecx,0x17
c0027e5e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e61:	09 f3                	or     ebx,esi
c0027e63:	0f 95 c3             	setne  bl
c0027e66:	0f b6 db             	movzx  ebx,bl
c0027e69:	c1 e2 09             	shl    edx,0x9
c0027e6c:	09 d3                	or     ebx,edx
c0027e6e:	89 ca                	mov    edx,ecx
c0027e70:	09 fa                	or     edx,edi
c0027e72:	78 0c                	js     c0027e80 <__divdf3+0x294>
c0027e74:	01 d2                	add    edx,edx
c0027e76:	89 d9                	mov    ecx,ebx
c0027e78:	c1 e9 1f             	shr    ecx,0x1f
c0027e7b:	09 ca                	or     edx,ecx
c0027e7d:	01 db                	add    ebx,ebx
c0027e7f:	48                   	dec    eax
c0027e80:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027e85:	0f 8f 83 00 00 00    	jg     c0027f0e <__divdf3+0x322>
c0027e8b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027e91:	85 c0                	test   eax,eax
c0027e93:	0f 8f 82 00 00 00    	jg     c0027f1b <__divdf3+0x32f>
c0027e99:	83 f8 cc             	cmp    eax,0xffffffcc
c0027e9c:	7c 77                	jl     c0027f15 <__divdf3+0x329>
c0027e9e:	be 01 00 00 00       	mov    esi,0x1
c0027ea3:	29 c6                	sub    esi,eax
c0027ea5:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027eab:	83 fe 1f             	cmp    esi,0x1f
c0027eae:	7e 2f                	jle    c0027edf <__divdf3+0x2f3>
c0027eb0:	83 fe 20             	cmp    esi,0x20
c0027eb3:	75 0a                	jne    c0027ebf <__divdf3+0x2d3>
c0027eb5:	85 db                	test   ebx,ebx
c0027eb7:	0f 95 c3             	setne  bl
c0027eba:	0f b6 db             	movzx  ebx,bl
c0027ebd:	eb 1a                	jmp    c0027ed9 <__divdf3+0x2ed>
c0027ebf:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027ec2:	89 d7                	mov    edi,edx
c0027ec4:	d3 e7                	shl    edi,cl
c0027ec6:	89 f9                	mov    ecx,edi
c0027ec8:	09 d9                	or     ecx,ebx
c0027eca:	0f 95 c3             	setne  bl
c0027ecd:	0f b6 db             	movzx  ebx,bl
c0027ed0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027ed5:	29 c1                	sub    ecx,eax
c0027ed7:	d3 ea                	shr    edx,cl
c0027ed9:	09 d3                	or     ebx,edx
c0027edb:	31 c0                	xor    eax,eax
c0027edd:	eb 3a                	jmp    c0027f19 <__divdf3+0x32d>
c0027edf:	83 c0 1f             	add    eax,0x1f
c0027ee2:	89 d7                	mov    edi,edx
c0027ee4:	88 c1                	mov    cl,al
c0027ee6:	d3 e7                	shl    edi,cl
c0027ee8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027eeb:	89 df                	mov    edi,ebx
c0027eed:	89 f1                	mov    ecx,esi
c0027eef:	d3 ef                	shr    edi,cl
c0027ef1:	89 f9                	mov    ecx,edi
c0027ef3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027ef6:	09 cf                	or     edi,ecx
c0027ef8:	88 c1                	mov    cl,al
c0027efa:	d3 e3                	shl    ebx,cl
c0027efc:	85 db                	test   ebx,ebx
c0027efe:	0f 95 c3             	setne  bl
c0027f01:	0f b6 db             	movzx  ebx,bl
c0027f04:	09 fb                	or     ebx,edi
c0027f06:	89 f1                	mov    ecx,esi
c0027f08:	d3 ea                	shr    edx,cl
c0027f0a:	31 c0                	xor    eax,eax
c0027f0c:	eb 0d                	jmp    c0027f1b <__divdf3+0x32f>
c0027f0e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027f13:	eb 02                	jmp    c0027f17 <__divdf3+0x32b>
c0027f15:	31 c0                	xor    eax,eax
c0027f17:	31 db                	xor    ebx,ebx
c0027f19:	31 d2                	xor    edx,edx
c0027f1b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027f1e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027f21:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027f27:	09 c8                	or     eax,ecx
c0027f29:	c1 e0 14             	shl    eax,0x14
c0027f2c:	89 d1                	mov    ecx,edx
c0027f2e:	c1 e9 0b             	shr    ecx,0xb
c0027f31:	09 c8                	or     eax,ecx
c0027f33:	89 c6                	mov    esi,eax
c0027f35:	89 d9                	mov    ecx,ebx
c0027f37:	c1 e9 0b             	shr    ecx,0xb
c0027f3a:	c1 e2 15             	shl    edx,0x15
c0027f3d:	09 ca                	or     edx,ecx
c0027f3f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027f45:	0f 95 c0             	setne  al
c0027f48:	09 c1                	or     ecx,eax
c0027f4a:	83 e1 01             	and    ecx,0x1
c0027f4d:	c1 eb 0a             	shr    ebx,0xa
c0027f50:	21 cb                	and    ebx,ecx
c0027f52:	01 d3                	add    ebx,edx
c0027f54:	89 d8                	mov    eax,ebx
c0027f56:	83 d6 00             	adc    esi,0x0
c0027f59:	89 f2                	mov    edx,esi
c0027f5b:	89 c7                	mov    edi,eax
c0027f5d:	89 d1                	mov    ecx,edx
c0027f5f:	89 f8                	mov    eax,edi
c0027f61:	89 ca                	mov    edx,ecx
c0027f63:	83 c4 2c             	add    esp,0x2c
c0027f66:	5b                   	pop    ebx
c0027f67:	5e                   	pop    esi
c0027f68:	5f                   	pop    edi
c0027f69:	5d                   	pop    ebp
c0027f6a:	c3                   	ret    

c0027f6b <__floatsidf>:
c0027f6b:	55                   	push   ebp
c0027f6c:	89 e5                	mov    ebp,esp
c0027f6e:	56                   	push   esi
c0027f6f:	53                   	push   ebx
c0027f70:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027f73:	85 db                	test   ebx,ebx
c0027f75:	7e 15                	jle    c0027f8c <__floatsidf+0x21>
c0027f77:	0f bd cb             	bsr    ecx,ebx
c0027f7a:	83 f1 1f             	xor    ecx,0x1f
c0027f7d:	d3 e3                	shl    ebx,cl
c0027f7f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027f85:	b8 1e 04 00 00       	mov    eax,0x41e
c0027f8a:	eb 21                	jmp    c0027fad <__floatsidf+0x42>
c0027f8c:	b8 00 00 00 00       	mov    eax,0x0
c0027f91:	ba 00 00 00 00       	mov    edx,0x0
c0027f96:	74 2a                	je     c0027fc2 <__floatsidf+0x57>
c0027f98:	f7 db                	neg    ebx
c0027f9a:	0f bd cb             	bsr    ecx,ebx
c0027f9d:	83 f1 1f             	xor    ecx,0x1f
c0027fa0:	d3 e3                	shl    ebx,cl
c0027fa2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027fa8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027fad:	29 c8                	sub    eax,ecx
c0027faf:	c1 e0 14             	shl    eax,0x14
c0027fb2:	89 c1                	mov    ecx,eax
c0027fb4:	89 de                	mov    esi,ebx
c0027fb6:	c1 ee 0b             	shr    esi,0xb
c0027fb9:	09 f1                	or     ecx,esi
c0027fbb:	89 ca                	mov    edx,ecx
c0027fbd:	c1 e3 15             	shl    ebx,0x15
c0027fc0:	89 d8                	mov    eax,ebx
c0027fc2:	5b                   	pop    ebx
c0027fc3:	5e                   	pop    esi
c0027fc4:	5d                   	pop    ebp
c0027fc5:	c3                   	ret    

c0027fc6 <__floatunsidf>:
c0027fc6:	55                   	push   ebp
c0027fc7:	89 e5                	mov    ebp,esp
c0027fc9:	56                   	push   esi
c0027fca:	53                   	push   ebx
c0027fcb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027fce:	85 db                	test   ebx,ebx
c0027fd0:	74 2a                	je     c0027ffc <__floatunsidf+0x36>
c0027fd2:	0f bd cb             	bsr    ecx,ebx
c0027fd5:	83 f1 1f             	xor    ecx,0x1f
c0027fd8:	d3 e3                	shl    ebx,cl
c0027fda:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027fe0:	b8 1e 04 00 00       	mov    eax,0x41e
c0027fe5:	29 c8                	sub    eax,ecx
c0027fe7:	c1 e0 14             	shl    eax,0x14
c0027fea:	89 c1                	mov    ecx,eax
c0027fec:	89 de                	mov    esi,ebx
c0027fee:	c1 ee 0b             	shr    esi,0xb
c0027ff1:	09 f1                	or     ecx,esi
c0027ff3:	89 ca                	mov    edx,ecx
c0027ff5:	c1 e3 15             	shl    ebx,0x15
c0027ff8:	89 d8                	mov    eax,ebx
c0027ffa:	eb 04                	jmp    c0028000 <__floatunsidf+0x3a>
c0027ffc:	31 c0                	xor    eax,eax
c0027ffe:	31 d2                	xor    edx,edx
c0028000:	5b                   	pop    ebx
c0028001:	5e                   	pop    esi
c0028002:	5d                   	pop    ebp
c0028003:	c3                   	ret    

c0028004 <__fixdfsi>:
c0028004:	55                   	push   ebp
c0028005:	89 e5                	mov    ebp,esp
c0028007:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002800a:	89 d1                	mov    ecx,edx
c002800c:	c1 e1 0b             	shl    ecx,0xb
c002800f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028018:	c1 e8 15             	shr    eax,0x15
c002801b:	09 c1                	or     ecx,eax
c002801d:	c1 fa 14             	sar    edx,0x14
c0028020:	78 1f                	js     c0028041 <__fixdfsi+0x3d>
c0028022:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028028:	31 c0                	xor    eax,eax
c002802a:	83 fa 1e             	cmp    edx,0x1e
c002802d:	77 40                	ja     c002806f <__fixdfsi+0x6b>
c002802f:	89 c8                	mov    eax,ecx
c0028031:	0d 00 00 00 80       	or     eax,0x80000000
c0028036:	b9 1f 00 00 00       	mov    ecx,0x1f
c002803b:	29 d1                	sub    ecx,edx
c002803d:	d3 e8                	shr    eax,cl
c002803f:	eb 2e                	jmp    c002806f <__fixdfsi+0x6b>
c0028041:	31 c0                	xor    eax,eax
c0028043:	81 c2 01 04 00 00    	add    edx,0x401
c0028049:	78 24                	js     c002806f <__fixdfsi+0x6b>
c002804b:	83 fa 1e             	cmp    edx,0x1e
c002804e:	7e 09                	jle    c0028059 <__fixdfsi+0x55>
c0028050:	83 fa 1f             	cmp    edx,0x1f
c0028053:	75 18                	jne    c002806d <__fixdfsi+0x69>
c0028055:	85 c9                	test   ecx,ecx
c0028057:	75 14                	jne    c002806d <__fixdfsi+0x69>
c0028059:	89 c8                	mov    eax,ecx
c002805b:	0d 00 00 00 80       	or     eax,0x80000000
c0028060:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028065:	29 d1                	sub    ecx,edx
c0028067:	d3 e8                	shr    eax,cl
c0028069:	f7 d8                	neg    eax
c002806b:	eb 02                	jmp    c002806f <__fixdfsi+0x6b>
c002806d:	31 c0                	xor    eax,eax
c002806f:	5d                   	pop    ebp
c0028070:	c3                   	ret    

c0028071 <__fixunsdfsi>:
c0028071:	55                   	push   ebp
c0028072:	89 e5                	mov    ebp,esp
c0028074:	53                   	push   ebx
c0028075:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028078:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002807b:	89 d3                	mov    ebx,edx
c002807d:	c1 fb 14             	sar    ebx,0x14
c0028080:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028086:	31 c0                	xor    eax,eax
c0028088:	83 fb 1f             	cmp    ebx,0x1f
c002808b:	77 1d                	ja     c00280aa <__fixunsdfsi+0x39>
c002808d:	89 d0                	mov    eax,edx
c002808f:	c1 e0 0b             	shl    eax,0xb
c0028092:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028097:	c1 e9 15             	shr    ecx,0x15
c002809a:	09 c8                	or     eax,ecx
c002809c:	0d 00 00 00 80       	or     eax,0x80000000
c00280a1:	b9 1f 00 00 00       	mov    ecx,0x1f
c00280a6:	29 d9                	sub    ecx,ebx
c00280a8:	d3 e8                	shr    eax,cl
c00280aa:	5b                   	pop    ebx
c00280ab:	5d                   	pop    ebp
c00280ac:	c3                   	ret    

c00280ad <__cmpdf2>:
c00280ad:	55                   	push   ebp
c00280ae:	89 e5                	mov    ebp,esp
c00280b0:	57                   	push   edi
c00280b1:	56                   	push   esi
c00280b2:	53                   	push   ebx
c00280b3:	83 ec 0c             	sub    esp,0xc
c00280b6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00280b9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00280bc:	89 ca                	mov    edx,ecx
c00280be:	c1 ea 14             	shr    edx,0x14
c00280c1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00280c7:	89 cb                	mov    ebx,ecx
c00280c9:	c1 fb 1f             	sar    ebx,0x1f
c00280cc:	31 da                	xor    edx,ebx
c00280ce:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00280d1:	89 df                	mov    edi,ebx
c00280d3:	c1 e7 0b             	shl    edi,0xb
c00280d6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280d9:	c1 e1 0b             	shl    ecx,0xb
c00280dc:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00280e2:	c1 eb 15             	shr    ebx,0x15
c00280e5:	09 d9                	or     ecx,ebx
c00280e7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00280ea:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00280ed:	89 ce                	mov    esi,ecx
c00280ef:	c1 ee 14             	shr    esi,0x14
c00280f2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00280f8:	89 cb                	mov    ebx,ecx
c00280fa:	c1 fb 1f             	sar    ebx,0x1f
c00280fd:	31 de                	xor    esi,ebx
c00280ff:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028102:	89 df                	mov    edi,ebx
c0028104:	c1 e7 0b             	shl    edi,0xb
c0028107:	c1 e1 0b             	shl    ecx,0xb
c002810a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028110:	c1 eb 15             	shr    ebx,0x15
c0028113:	09 d9                	or     ecx,ebx
c0028115:	89 d3                	mov    ebx,edx
c0028117:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002811d:	43                   	inc    ebx
c002811e:	83 fb 01             	cmp    ebx,0x1
c0028121:	77 08                	ja     c002812b <__cmpdf2+0x7e>
c0028123:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028126:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028129:	75 68                	jne    c0028193 <__cmpdf2+0xe6>
c002812b:	89 f3                	mov    ebx,esi
c002812d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028133:	43                   	inc    ebx
c0028134:	83 fb 01             	cmp    ebx,0x1
c0028137:	77 06                	ja     c002813f <__cmpdf2+0x92>
c0028139:	89 fb                	mov    ebx,edi
c002813b:	09 cb                	or     ebx,ecx
c002813d:	75 54                	jne    c0028193 <__cmpdf2+0xe6>
c002813f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028142:	09 f8                	or     eax,edi
c0028144:	09 c8                	or     eax,ecx
c0028146:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028149:	75 12                	jne    c002815d <__cmpdf2+0xb0>
c002814b:	8d 42 01             	lea    eax,[edx+0x1]
c002814e:	83 f8 01             	cmp    eax,0x1
c0028151:	77 0a                	ja     c002815d <__cmpdf2+0xb0>
c0028153:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028156:	31 c0                	xor    eax,eax
c0028158:	83 fb 01             	cmp    ebx,0x1
c002815b:	76 36                	jbe    c0028193 <__cmpdf2+0xe6>
c002815d:	b8 01 00 00 00       	mov    eax,0x1
c0028162:	39 f2                	cmp    edx,esi
c0028164:	7f 2d                	jg     c0028193 <__cmpdf2+0xe6>
c0028166:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002816b:	7c 26                	jl     c0028193 <__cmpdf2+0xe6>
c002816d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028170:	77 07                	ja     c0028179 <__cmpdf2+0xcc>
c0028172:	72 16                	jb     c002818a <__cmpdf2+0xdd>
c0028174:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028177:	76 0a                	jbe    c0028183 <__cmpdf2+0xd6>
c0028179:	89 d0                	mov    eax,edx
c002817b:	c1 f8 1f             	sar    eax,0x1f
c002817e:	83 c8 01             	or     eax,0x1
c0028181:	eb 10                	jmp    c0028193 <__cmpdf2+0xe6>
c0028183:	b8 00 00 00 00       	mov    eax,0x0
c0028188:	73 09                	jae    c0028193 <__cmpdf2+0xe6>
c002818a:	89 d0                	mov    eax,edx
c002818c:	c1 f8 1f             	sar    eax,0x1f
c002818f:	83 e0 02             	and    eax,0x2
c0028192:	48                   	dec    eax
c0028193:	83 c4 0c             	add    esp,0xc
c0028196:	5b                   	pop    ebx
c0028197:	5e                   	pop    esi
c0028198:	5f                   	pop    edi
c0028199:	5d                   	pop    ebp
c002819a:	c3                   	ret    

c002819b <__eqdf2>:
c002819b:	55                   	push   ebp
c002819c:	89 e5                	mov    ebp,esp
c002819e:	50                   	push   eax
c002819f:	6a 01                	push   0x1
c00281a1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00281a4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00281a7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00281aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00281ad:	e8 fb fe ff ff       	call   c00280ad <__cmpdf2>
c00281b2:	83 c4 18             	add    esp,0x18
c00281b5:	c9                   	leave  
c00281b6:	c3                   	ret    

c00281b7 <__nedf2>:
c00281b7:	eb e2                	jmp    c002819b <__eqdf2>

c00281b9 <__gtdf2>:
c00281b9:	55                   	push   ebp
c00281ba:	89 e5                	mov    ebp,esp
c00281bc:	50                   	push   eax
c00281bd:	6a ff                	push   0xffffffff
c00281bf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00281c2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00281c5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00281c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00281cb:	e8 dd fe ff ff       	call   c00280ad <__cmpdf2>
c00281d0:	83 c4 18             	add    esp,0x18
c00281d3:	c9                   	leave  
c00281d4:	c3                   	ret    

c00281d5 <__gedf2>:
c00281d5:	eb e2                	jmp    c00281b9 <__gtdf2>

c00281d7 <__ltdf2>:
c00281d7:	eb c2                	jmp    c002819b <__eqdf2>

c00281d9 <__ledf2>:
c00281d9:	eb c0                	jmp    c002819b <__eqdf2>

c00281db <__truncdfsf2>:
c00281db:	55                   	push   ebp
c00281dc:	89 e5                	mov    ebp,esp
c00281de:	57                   	push   edi
c00281df:	56                   	push   esi
c00281e0:	53                   	push   ebx
c00281e1:	83 ec 0c             	sub    esp,0xc
c00281e4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00281e7:	89 d1                	mov    ecx,edx
c00281e9:	c1 f9 14             	sar    ecx,0x14
c00281ec:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00281ef:	89 df                	mov    edi,ebx
c00281f1:	c1 e7 0b             	shl    edi,0xb
c00281f4:	89 d0                	mov    eax,edx
c00281f6:	c1 e0 0b             	shl    eax,0xb
c00281f9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00281fe:	c1 eb 15             	shr    ebx,0x15
c0028201:	09 d8                	or     eax,ebx
c0028203:	89 cb                	mov    ebx,ecx
c0028205:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002820b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028211:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028217:	0f 86 9e 00 00 00    	jbe    c00282bb <__truncdfsf2+0xe0>
c002821d:	85 db                	test   ebx,ebx
c002821f:	75 0a                	jne    c002822b <__truncdfsf2+0x50>
c0028221:	c1 fa 17             	sar    edx,0x17
c0028224:	30 d2                	xor    dl,dl
c0028226:	e9 84 00 00 00       	jmp    c00282af <__truncdfsf2+0xd4>
c002822b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028231:	83 fe 83             	cmp    esi,0xffffff83
c0028234:	7d 4b                	jge    c0028281 <__truncdfsf2+0xa6>
c0028236:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002823b:	29 f1                	sub    ecx,esi
c002823d:	83 f9 1f             	cmp    ecx,0x1f
c0028240:	7f 6b                	jg     c00282ad <__truncdfsf2+0xd2>
c0028242:	0d 00 00 00 80       	or     eax,0x80000000
c0028247:	89 c3                	mov    ebx,eax
c0028249:	d3 eb                	shr    ebx,cl
c002824b:	be 01 00 00 00       	mov    esi,0x1
c0028250:	d3 e6                	shl    esi,cl
c0028252:	4e                   	dec    esi
c0028253:	21 f0                	and    eax,esi
c0028255:	09 f8                	or     eax,edi
c0028257:	0f 95 c0             	setne  al
c002825a:	0f b6 c0             	movzx  eax,al
c002825d:	09 c3                	or     ebx,eax
c002825f:	89 d9                	mov    ecx,ebx
c0028261:	c1 e9 08             	shr    ecx,0x8
c0028264:	f6 c3 7f             	test   bl,0x7f
c0028267:	0f 95 c0             	setne  al
c002826a:	09 c8                	or     eax,ecx
c002826c:	83 e0 01             	and    eax,0x1
c002826f:	c1 eb 07             	shr    ebx,0x7
c0028272:	21 c3                	and    ebx,eax
c0028274:	81 e2 00 00 00 80    	and    edx,0x80000000
c002827a:	09 d1                	or     ecx,edx
c002827c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002827f:	eb 76                	jmp    c00282f7 <__truncdfsf2+0x11c>
c0028281:	83 c6 80             	add    esi,0xffffff80
c0028284:	7e 1d                	jle    c00282a3 <__truncdfsf2+0xc8>
c0028286:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002828c:	75 0b                	jne    c0028299 <__truncdfsf2+0xbe>
c002828e:	09 f8                	or     eax,edi
c0028290:	74 09                	je     c002829b <__truncdfsf2+0xc0>
c0028292:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028297:	eb 02                	jmp    c002829b <__truncdfsf2+0xc0>
c0028299:	31 c0                	xor    eax,eax
c002829b:	c1 fa 17             	sar    edx,0x17
c002829e:	80 ca ff             	or     dl,0xff
c00282a1:	eb 0e                	jmp    c00282b1 <__truncdfsf2+0xd6>
c00282a3:	c1 fa 1f             	sar    edx,0x1f
c00282a6:	c1 e2 08             	shl    edx,0x8
c00282a9:	09 ca                	or     edx,ecx
c00282ab:	eb 04                	jmp    c00282b1 <__truncdfsf2+0xd6>
c00282ad:	31 d2                	xor    edx,edx
c00282af:	31 c0                	xor    eax,eax
c00282b1:	c1 e2 17             	shl    edx,0x17
c00282b4:	c1 e8 08             	shr    eax,0x8
c00282b7:	09 d0                	or     eax,edx
c00282b9:	eb 3c                	jmp    c00282f7 <__truncdfsf2+0x11c>
c00282bb:	81 e9 80 03 00 00    	sub    ecx,0x380
c00282c1:	89 ca                	mov    edx,ecx
c00282c3:	c1 fa 0b             	sar    edx,0xb
c00282c6:	c1 e2 08             	shl    edx,0x8
c00282c9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00282cc:	31 db                	xor    ebx,ebx
c00282ce:	85 ff                	test   edi,edi
c00282d0:	0f 95 c3             	setne  bl
c00282d3:	09 d8                	or     eax,ebx
c00282d5:	89 c3                	mov    ebx,eax
c00282d7:	c1 eb 08             	shr    ebx,0x8
c00282da:	a8 7f                	test   al,0x7f
c00282dc:	0f 95 c2             	setne  dl
c00282df:	89 d6                	mov    esi,edx
c00282e1:	09 de                	or     esi,ebx
c00282e3:	83 e6 01             	and    esi,0x1
c00282e6:	c1 e8 07             	shr    eax,0x7
c00282e9:	21 f0                	and    eax,esi
c00282eb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00282ee:	09 ca                	or     edx,ecx
c00282f0:	c1 e2 17             	shl    edx,0x17
c00282f3:	09 da                	or     edx,ebx
c00282f5:	01 d0                	add    eax,edx
c00282f7:	83 c4 0c             	add    esp,0xc
c00282fa:	5b                   	pop    ebx
c00282fb:	5e                   	pop    esi
c00282fc:	5f                   	pop    edi
c00282fd:	5d                   	pop    ebp
c00282fe:	c3                   	ret    

c00282ff <__extendsfdf2>:
c00282ff:	55                   	push   ebp
c0028300:	89 e5                	mov    ebp,esp
c0028302:	57                   	push   edi
c0028303:	56                   	push   esi
c0028304:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028307:	89 d1                	mov    ecx,edx
c0028309:	c1 f9 17             	sar    ecx,0x17
c002830c:	c1 e2 08             	shl    edx,0x8
c002830f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028315:	89 c8                	mov    eax,ecx
c0028317:	80 e4 f8             	and    ah,0xf8
c002831a:	8d 71 01             	lea    esi,[ecx+0x1]
c002831d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028323:	75 27                	jne    c002834c <__extendsfdf2+0x4d>
c0028325:	81 e1 ff 00 00 00    	and    ecx,0xff
c002832b:	75 18                	jne    c0028345 <__extendsfdf2+0x46>
c002832d:	85 d2                	test   edx,edx
c002832f:	74 20                	je     c0028351 <__extendsfdf2+0x52>
c0028331:	41                   	inc    ecx
c0028332:	01 d2                	add    edx,edx
c0028334:	79 fb                	jns    c0028331 <__extendsfdf2+0x32>
c0028336:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002833c:	29 c8                	sub    eax,ecx
c002833e:	05 81 03 00 00       	add    eax,0x381
c0028343:	eb 0c                	jmp    c0028351 <__extendsfdf2+0x52>
c0028345:	05 00 07 00 00       	add    eax,0x700
c002834a:	eb 05                	jmp    c0028351 <__extendsfdf2+0x52>
c002834c:	05 80 03 00 00       	add    eax,0x380
c0028351:	c1 e0 14             	shl    eax,0x14
c0028354:	89 c1                	mov    ecx,eax
c0028356:	89 d0                	mov    eax,edx
c0028358:	c1 e8 0b             	shr    eax,0xb
c002835b:	09 c1                	or     ecx,eax
c002835d:	c1 e2 15             	shl    edx,0x15
c0028360:	89 d0                	mov    eax,edx
c0028362:	89 ca                	mov    edx,ecx
c0028364:	5e                   	pop    esi
c0028365:	5f                   	pop    edi
c0028366:	5d                   	pop    ebp
c0028367:	c3                   	ret    
c0028368:	66 90                	xchg   ax,ax
c002836a:	66 90                	xchg   ax,ax
c002836c:	66 90                	xchg   ax,ax
c002836e:	66 90                	xchg   ax,ax

c0028370 <fabs>:
c0028370:	83 ec 0c             	sub    esp,0xc
c0028373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028377:	89 04 24             	mov    DWORD PTR [esp],eax
c002837a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002837e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028383:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028387:	dd 04 24             	fld    QWORD PTR [esp]
c002838a:	83 c4 0c             	add    esp,0xc
c002838d:	c3                   	ret    
c002838e:	66 90                	xchg   ax,ax

c0028390 <lrint>:
c0028390:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028394:	83 ec 04             	sub    esp,0x4
c0028397:	db 1c 24             	fistp  DWORD PTR [esp]
c002839a:	58                   	pop    eax
c002839b:	c3                   	ret    

c002839c <lrintf>:
c002839c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00283a0:	83 ec 04             	sub    esp,0x4
c00283a3:	db 1c 24             	fistp  DWORD PTR [esp]
c00283a6:	58                   	pop    eax
c00283a7:	c3                   	ret    

Disassembly of section .init:

c00283a8 <_init>:
c00283a8:	55                   	push   ebp
c00283a9:	89 e5                	mov    ebp,esp
c00283ab:	e8 68 7d fd ff       	call   c0000118 <frame_dummy>
c00283b0:	e8 5b e0 ff ff       	call   c0026410 <__do_global_ctors_aux>
c00283b5:	5d                   	pop    ebp
c00283b6:	c3                   	ret    

Disassembly of section .fini:

c00283b7 <_fini>:
c00283b7:	55                   	push   ebp
c00283b8:	89 e5                	mov    ebp,esp
c00283ba:	e8 e9 7c fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00283bf:	5d                   	pop    ebp
c00283c0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00283c2 <Computer::~Computer()>:
c00283c2:	83 ec 0c             	sub    esp,0xc
c00283c5:	ba 3c 9f 02 c0       	mov    edx,0xc0029f3c
c00283ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283ce:	89 10                	mov    DWORD PTR [eax],edx
c00283d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283d4:	83 ec 0c             	sub    esp,0xc
c00283d7:	50                   	push   eax
c00283d8:	e8 f1 b5 fe ff       	call   c00139ce <Device::~Device()>
c00283dd:	83 c4 10             	add    esp,0x10
c00283e0:	90                   	nop
c00283e1:	83 c4 0c             	add    esp,0xc
c00283e4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00283e6 <Computer::~Computer()>:
c00283e6:	83 ec 0c             	sub    esp,0xc
c00283e9:	83 ec 0c             	sub    esp,0xc
c00283ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00283f0:	e8 cd ff ff ff       	call   c00283c2 <Computer::~Computer()>
c00283f5:	83 c4 10             	add    esp,0x10
c00283f8:	83 ec 08             	sub    esp,0x8
c00283fb:	68 ec 01 00 00       	push   0x1ec
c0028400:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028404:	e8 e6 a1 fe ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0028409:	83 c4 10             	add    esp,0x10
c002840c:	83 c4 0c             	add    esp,0xc
c002840f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028410 <idleCommon()>:
c0028410:	83 ec 0c             	sub    esp,0xc
c0028413:	fa                   	cli    
c0028414:	ff 05 28 0e 03 c0    	inc    DWORD PTR ds:0xc0030e28
c002841a:	e8 9e 55 ff ff       	call   c001d9bd <schedule()>
c002841f:	a1 28 0e 03 c0       	mov    eax,ds:0xc0030e28
c0028424:	48                   	dec    eax
c0028425:	a3 28 0e 03 c0       	mov    ds:0xc0030e28,eax
c002842a:	75 01                	jne    c002842d <idleCommon()+0x1d>
c002842c:	fb                   	sti    
c002842d:	83 c4 0c             	add    esp,0xc
c0028430:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028432 <LinkedList<UnixFile>::~LinkedList()>:
c0028432:	90                   	nop
c0028433:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028434 <LinkedList<UnixFile>::LinkedList()>:
c0028434:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028438:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002843e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028442:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028449:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002844d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028454:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028458:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002845e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028462:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028469:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002846d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028474:	90                   	nop
c0028475:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028476 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028476:	83 ec 0c             	sub    esp,0xc
c0028479:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002847e:	75 10                	jne    c0028490 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028480:	83 ec 0c             	sub    esp,0xc
c0028483:	68 78 a1 02 c0       	push   0xc002a178
c0028488:	e8 a6 19 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c002848d:	83 c4 10             	add    esp,0x10
c0028490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028494:	8b 00                	mov    eax,DWORD PTR [eax]
c0028496:	85 c0                	test   eax,eax
c0028498:	74 34                	je     c00284ce <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002849a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002849e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284a1:	85 c0                	test   eax,eax
c00284a3:	74 29                	je     c00284ce <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00284a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284b0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00284b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284bb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00284be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284c5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00284cc:	eb 65                	jmp    c0028533 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00284ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00284d4:	85 c0                	test   eax,eax
c00284d6:	75 4b                	jne    c0028523 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00284d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284df:	85 c0                	test   eax,eax
c00284e1:	75 40                	jne    c0028523 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00284e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284eb:	89 10                	mov    DWORD PTR [eax],edx
c00284ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284f5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00284f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002850a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002850d:	85 c0                	test   eax,eax
c002850f:	74 22                	je     c0028533 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028511:	83 ec 0c             	sub    esp,0xc
c0028514:	68 9a a1 02 c0       	push   0xc002a19a
c0028519:	e8 15 19 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c002851e:	83 c4 10             	add    esp,0x10
c0028521:	eb 10                	jmp    c0028533 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028523:	83 ec 0c             	sub    esp,0xc
c0028526:	68 a4 a1 02 c0       	push   0xc002a1a4
c002852b:	e8 03 19 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c0028530:	83 c4 10             	add    esp,0x10
c0028533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028537:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002853a:	8d 50 01             	lea    edx,[eax+0x1]
c002853d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028541:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028544:	90                   	nop
c0028545:	83 c4 0c             	add    esp,0xc
c0028548:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002854a <LinkedList<UnixFile>::getFirstElement()>:
c002854a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002854e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028550:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028552 <LinkedList<UnixFile>::removeFirst()>:
c0028552:	83 ec 0c             	sub    esp,0xc
c0028555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028559:	8b 00                	mov    eax,DWORD PTR [eax]
c002855b:	85 c0                	test   eax,eax
c002855d:	75 12                	jne    c0028571 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002855f:	83 ec 0c             	sub    esp,0xc
c0028562:	68 b0 a1 02 c0       	push   0xc002a1b0
c0028567:	e8 c7 18 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c002856c:	83 c4 10             	add    esp,0x10
c002856f:	eb 7e                	jmp    c00285ef <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028575:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028578:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002857b:	85 c0                	test   eax,eax
c002857d:	74 10                	je     c002858f <LinkedList<UnixFile>::removeFirst()+0x3d>
c002857f:	83 ec 0c             	sub    esp,0xc
c0028582:	68 fb a1 02 c0       	push   0xc002a1fb
c0028587:	e8 a7 18 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c002858c:	83 c4 10             	add    esp,0x10
c002858f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028593:	8b 00                	mov    eax,DWORD PTR [eax]
c0028595:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028598:	85 c0                	test   eax,eax
c002859a:	75 33                	jne    c00285cf <LinkedList<UnixFile>::removeFirst()+0x7d>
c002859c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285b8:	83 f8 01             	cmp    eax,0x1
c00285bb:	74 21                	je     c00285de <LinkedList<UnixFile>::removeFirst()+0x8c>
c00285bd:	83 ec 0c             	sub    esp,0xc
c00285c0:	68 d4 a1 02 c0       	push   0xc002a1d4
c00285c5:	e8 69 18 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c00285ca:	83 c4 10             	add    esp,0x10
c00285cd:	eb 0f                	jmp    c00285de <LinkedList<UnixFile>::removeFirst()+0x8c>
c00285cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00285d5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00285d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285dc:	89 10                	mov    DWORD PTR [eax],edx
c00285de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285e5:	8d 50 ff             	lea    edx,[eax-0x1]
c00285e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ec:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00285ef:	83 c4 0c             	add    esp,0xc
c00285f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00285f4 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00285f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00285f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285fb:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00285fc <DriverlessDevice::~DriverlessDevice()>:
c00285fc:	ba 3c aa 02 c0       	mov    edx,0xc002aa3c
c0028601:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028605:	89 10                	mov    DWORD PTR [eax],edx
c0028607:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002860b:	50                   	push   eax
c002860c:	e8 bd b3 fe ff       	call   c00139ce <Device::~Device()>
c0028611:	83 c4 04             	add    esp,0x4
c0028614:	90                   	nop
c0028615:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028616 <DriverlessDevice::~DriverlessDevice()>:
c0028616:	83 ec 0c             	sub    esp,0xc
c0028619:	83 ec 0c             	sub    esp,0xc
c002861c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028620:	e8 d7 ff ff ff       	call   c00285fc <DriverlessDevice::~DriverlessDevice()>
c0028625:	83 c4 10             	add    esp,0x10
c0028628:	83 ec 08             	sub    esp,0x8
c002862b:	68 58 01 00 00       	push   0x158
c0028630:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028634:	e8 b6 9f fe ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0028639:	83 c4 10             	add    esp,0x10
c002863c:	83 c4 0c             	add    esp,0xc
c002863f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028640 <LinkedList<Device>::addElement(Device*)>:
c0028640:	83 ec 0c             	sub    esp,0xc
c0028643:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028648:	75 10                	jne    c002865a <LinkedList<Device>::addElement(Device*)+0x1a>
c002864a:	83 ec 0c             	sub    esp,0xc
c002864d:	68 78 a1 02 c0       	push   0xc002a178
c0028652:	e8 dc 17 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c0028657:	83 c4 10             	add    esp,0x10
c002865a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002865e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028660:	85 c0                	test   eax,eax
c0028662:	74 3a                	je     c002869e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028668:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002866b:	85 c0                	test   eax,eax
c002866d:	74 2f                	je     c002869e <LinkedList<Device>::addElement(Device*)+0x5e>
c002866f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028673:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028676:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002867a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028684:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028688:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002868b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002868f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028692:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002869c:	eb 68                	jmp    c0028706 <LinkedList<Device>::addElement(Device*)+0xc6>
c002869e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00286a4:	85 c0                	test   eax,eax
c00286a6:	75 4e                	jne    c00286f6 <LinkedList<Device>::addElement(Device*)+0xb6>
c00286a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286af:	85 c0                	test   eax,eax
c00286b1:	75 43                	jne    c00286f6 <LinkedList<Device>::addElement(Device*)+0xb6>
c00286b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286bb:	89 10                	mov    DWORD PTR [eax],edx
c00286bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286c5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286cf:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00286d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286dd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286e0:	85 c0                	test   eax,eax
c00286e2:	74 22                	je     c0028706 <LinkedList<Device>::addElement(Device*)+0xc6>
c00286e4:	83 ec 0c             	sub    esp,0xc
c00286e7:	68 9a a1 02 c0       	push   0xc002a19a
c00286ec:	e8 42 17 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c00286f1:	83 c4 10             	add    esp,0x10
c00286f4:	eb 10                	jmp    c0028706 <LinkedList<Device>::addElement(Device*)+0xc6>
c00286f6:	83 ec 0c             	sub    esp,0xc
c00286f9:	68 a4 a1 02 c0       	push   0xc002a1a4
c00286fe:	e8 30 17 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c0028703:	83 c4 10             	add    esp,0x10
c0028706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002870a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002870d:	8d 50 01             	lea    edx,[eax+0x1]
c0028710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028714:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028717:	90                   	nop
c0028718:	83 c4 0c             	add    esp,0xc
c002871b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002871c <LinkedList<Device>::LinkedList()>:
c002871c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028720:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028726:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002872a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028731:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028735:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002873c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028740:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028746:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002874a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028751:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028755:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002875c:	90                   	nop
c002875d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002875e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002875e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028762:	8b 00                	mov    eax,DWORD PTR [eax]
c0028764:	85 c0                	test   eax,eax
c0028766:	75 0e                	jne    c0028776 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028768:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002876c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002876f:	85 c0                	test   eax,eax
c0028771:	75 03                	jne    c0028776 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028773:	b0 01                	mov    al,0x1
c0028775:	c3                   	ret    
c0028776:	b0 00                	mov    al,0x0
c0028778:	90                   	nop
c0028779:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002877a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002877a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002877e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028780:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028782 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028782:	83 ec 0c             	sub    esp,0xc
c0028785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028789:	8b 00                	mov    eax,DWORD PTR [eax]
c002878b:	85 c0                	test   eax,eax
c002878d:	75 15                	jne    c00287a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002878f:	83 ec 0c             	sub    esp,0xc
c0028792:	68 b0 a1 02 c0       	push   0xc002a1b0
c0028797:	e8 97 16 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c002879c:	83 c4 10             	add    esp,0x10
c002879f:	e9 88 00 00 00       	jmp    c002882c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00287a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287ab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00287ae:	85 c0                	test   eax,eax
c00287b0:	0f 95 c0             	setne  al
c00287b3:	84 c0                	test   al,al
c00287b5:	74 10                	je     c00287c7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00287b7:	83 ec 0c             	sub    esp,0xc
c00287ba:	68 fb a1 02 c0       	push   0xc002a1fb
c00287bf:	e8 6f 16 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c00287c4:	83 c4 10             	add    esp,0x10
c00287c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00287cd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00287d0:	85 c0                	test   eax,eax
c00287d2:	0f 94 c0             	sete   al
c00287d5:	84 c0                	test   al,al
c00287d7:	74 33                	je     c002880c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00287d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287f5:	83 f8 01             	cmp    eax,0x1
c00287f8:	74 21                	je     c002881b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00287fa:	83 ec 0c             	sub    esp,0xc
c00287fd:	68 d4 a1 02 c0       	push   0xc002a1d4
c0028802:	e8 2c 16 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c0028807:	83 c4 10             	add    esp,0x10
c002880a:	eb 0f                	jmp    c002881b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002880c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028810:	8b 00                	mov    eax,DWORD PTR [eax]
c0028812:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028819:	89 10                	mov    DWORD PTR [eax],edx
c002881b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028822:	8d 50 ff             	lea    edx,[eax-0x1]
c0028825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028829:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002882c:	83 c4 0c             	add    esp,0xc
c002882f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028830:	83 ec 0c             	sub    esp,0xc
c0028833:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028838:	75 10                	jne    c002884a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002883a:	83 ec 0c             	sub    esp,0xc
c002883d:	68 78 a1 02 c0       	push   0xc002a178
c0028842:	e8 ec 15 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c0028847:	83 c4 10             	add    esp,0x10
c002884a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028850:	85 c0                	test   eax,eax
c0028852:	74 34                	je     c0028888 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028858:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002885b:	85 c0                	test   eax,eax
c002885d:	74 29                	je     c0028888 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002885f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028863:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028866:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002886a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002886d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028871:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028875:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002887f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028886:	eb 65                	jmp    c00288ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888c:	8b 00                	mov    eax,DWORD PTR [eax]
c002888e:	85 c0                	test   eax,eax
c0028890:	75 4b                	jne    c00288dd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028896:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028899:	85 c0                	test   eax,eax
c002889b:	75 40                	jne    c00288dd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002889d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288a5:	89 10                	mov    DWORD PTR [eax],edx
c00288a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288b9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00288c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288c7:	85 c0                	test   eax,eax
c00288c9:	74 22                	je     c00288ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00288cb:	83 ec 0c             	sub    esp,0xc
c00288ce:	68 9a a1 02 c0       	push   0xc002a19a
c00288d3:	e8 5b 15 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c00288d8:	83 c4 10             	add    esp,0x10
c00288db:	eb 10                	jmp    c00288ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00288dd:	83 ec 0c             	sub    esp,0xc
c00288e0:	68 a4 a1 02 c0       	push   0xc002a1a4
c00288e5:	e8 49 15 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c00288ea:	83 c4 10             	add    esp,0x10
c00288ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288f4:	8d 50 01             	lea    edx,[eax+0x1]
c00288f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288fb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288fe:	90                   	nop
c00288ff:	83 c4 0c             	add    esp,0xc
c0028902:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028904 <ACPI::~ACPI()>:
c0028904:	83 ec 0c             	sub    esp,0xc
c0028907:	ba a8 b2 02 c0       	mov    edx,0xc002b2a8
c002890c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028910:	89 10                	mov    DWORD PTR [eax],edx
c0028912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028916:	83 ec 0c             	sub    esp,0xc
c0028919:	50                   	push   eax
c002891a:	e8 af b0 fe ff       	call   c00139ce <Device::~Device()>
c002891f:	83 c4 10             	add    esp,0x10
c0028922:	90                   	nop
c0028923:	83 c4 0c             	add    esp,0xc
c0028926:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028928 <ACPI::~ACPI()>:
c0028928:	83 ec 0c             	sub    esp,0xc
c002892b:	83 ec 0c             	sub    esp,0xc
c002892e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028932:	e8 cd ff ff ff       	call   c0028904 <ACPI::~ACPI()>
c0028937:	83 c4 10             	add    esp,0x10
c002893a:	83 ec 08             	sub    esp,0x8
c002893d:	68 64 12 00 00       	push   0x1264
c0028942:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028946:	e8 a4 9c fe ff       	call   c00125ef <operator delete(void*, unsigned long)>
c002894b:	83 c4 10             	add    esp,0x10
c002894e:	83 c4 0c             	add    esp,0xc
c0028951:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028952 <LinkedList<Device>::~LinkedList()>:
c0028952:	90                   	nop
c0028953:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028954 <LinkedList<Device>::isEmpty()>:
c0028954:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028958:	8b 00                	mov    eax,DWORD PTR [eax]
c002895a:	85 c0                	test   eax,eax
c002895c:	75 0e                	jne    c002896c <LinkedList<Device>::isEmpty()+0x18>
c002895e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028962:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028965:	85 c0                	test   eax,eax
c0028967:	75 03                	jne    c002896c <LinkedList<Device>::isEmpty()+0x18>
c0028969:	b0 01                	mov    al,0x1
c002896b:	c3                   	ret    
c002896c:	b0 00                	mov    al,0x0
c002896e:	90                   	nop
c002896f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028970 <LinkedList<Device>::getFirstElement()>:
c0028970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028974:	8b 00                	mov    eax,DWORD PTR [eax]
c0028976:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028978 <LinkedList<Device>::removeFirst()>:
c0028978:	83 ec 0c             	sub    esp,0xc
c002897b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028981:	85 c0                	test   eax,eax
c0028983:	75 15                	jne    c002899a <LinkedList<Device>::removeFirst()+0x22>
c0028985:	83 ec 0c             	sub    esp,0xc
c0028988:	68 b0 a1 02 c0       	push   0xc002a1b0
c002898d:	e8 a1 14 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c0028992:	83 c4 10             	add    esp,0x10
c0028995:	e9 87 00 00 00       	jmp    c0028a21 <LinkedList<Device>::removeFirst()+0xa9>
c002899a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002899e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289a1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00289a7:	85 c0                	test   eax,eax
c00289a9:	74 10                	je     c00289bb <LinkedList<Device>::removeFirst()+0x43>
c00289ab:	83 ec 0c             	sub    esp,0xc
c00289ae:	68 fb a1 02 c0       	push   0xc002a1fb
c00289b3:	e8 7b 14 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c00289b8:	83 c4 10             	add    esp,0x10
c00289bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00289c1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00289c7:	85 c0                	test   eax,eax
c00289c9:	75 33                	jne    c00289fe <LinkedList<Device>::removeFirst()+0x86>
c00289cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289e7:	83 f8 01             	cmp    eax,0x1
c00289ea:	74 24                	je     c0028a10 <LinkedList<Device>::removeFirst()+0x98>
c00289ec:	83 ec 0c             	sub    esp,0xc
c00289ef:	68 d4 a1 02 c0       	push   0xc002a1d4
c00289f4:	e8 3a 14 ff ff       	call   c0019e33 <Krnl::panic(char const*)>
c00289f9:	83 c4 10             	add    esp,0x10
c00289fc:	eb 12                	jmp    c0028a10 <LinkedList<Device>::removeFirst()+0x98>
c00289fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a02:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a04:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0028a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a0e:	89 10                	mov    DWORD PTR [eax],edx
c0028a10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a17:	8d 50 ff             	lea    edx,[eax-0x1]
c0028a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a21:	83 c4 0c             	add    esp,0xc
c0028a24:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028a26 <CPU::~CPU()>:
c0028a26:	83 ec 0c             	sub    esp,0xc
c0028a29:	ba f8 b4 02 c0       	mov    edx,0xc002b4f8
c0028a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a32:	89 10                	mov    DWORD PTR [eax],edx
c0028a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a38:	83 ec 0c             	sub    esp,0xc
c0028a3b:	50                   	push   eax
c0028a3c:	e8 8d af fe ff       	call   c00139ce <Device::~Device()>
c0028a41:	83 c4 10             	add    esp,0x10
c0028a44:	90                   	nop
c0028a45:	83 c4 0c             	add    esp,0xc
c0028a48:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028a4a <CPU::~CPU()>:
c0028a4a:	83 ec 0c             	sub    esp,0xc
c0028a4d:	83 ec 0c             	sub    esp,0xc
c0028a50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a54:	e8 cd ff ff ff       	call   c0028a26 <CPU::~CPU()>
c0028a59:	83 c4 10             	add    esp,0x10
c0028a5c:	83 ec 08             	sub    esp,0x8
c0028a5f:	68 98 11 00 00       	push   0x1198
c0028a64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a68:	e8 82 9b fe ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0028a6d:	83 c4 10             	add    esp,0x10
c0028a70:	83 c4 0c             	add    esp,0xc
c0028a73:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028a74 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028a74:	90                   	nop
c0028a75:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028a76 <ThreadControlBlock::ThreadControlBlock()>:
c0028a76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a7a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028a81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a85:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028a8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a90:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028a97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a9b:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028aa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aa6:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028aad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ab1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028ab5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ab9:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028abd:	90                   	nop
c0028abe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028ac0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028ac0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ac4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028aca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ace:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ad5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ad9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ae4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028aea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028af5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028af9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b00:	90                   	nop
c0028b01:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028b02 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028b02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b06:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b09:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028b0a <Vm::_FPUState::_FPUState()>:
c0028b0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b0e:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028b15:	90                   	nop
c0028b16:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028b18 <PCI::~PCI()>:
c0028b18:	83 ec 0c             	sub    esp,0xc
c0028b1b:	ba 24 c0 02 c0       	mov    edx,0xc002c024
c0028b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b24:	89 10                	mov    DWORD PTR [eax],edx
c0028b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b2a:	83 ec 0c             	sub    esp,0xc
c0028b2d:	50                   	push   eax
c0028b2e:	e8 6b a8 fe ff       	call   c001339e <Bus::~Bus()>
c0028b33:	83 c4 10             	add    esp,0x10
c0028b36:	90                   	nop
c0028b37:	83 c4 0c             	add    esp,0xc
c0028b3a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028b3c <PCI::~PCI()>:
c0028b3c:	83 ec 0c             	sub    esp,0xc
c0028b3f:	83 ec 0c             	sub    esp,0xc
c0028b42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b46:	e8 cd ff ff ff       	call   c0028b18 <PCI::~PCI()>
c0028b4b:	83 c4 10             	add    esp,0x10
c0028b4e:	83 ec 08             	sub    esp,0x8
c0028b51:	68 5c 01 00 00       	push   0x15c
c0028b56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b5a:	e8 90 9a fe ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0028b5f:	83 c4 10             	add    esp,0x10
c0028b62:	83 c4 0c             	add    esp,0xc
c0028b65:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028b66 <IDE::~IDE()>:
c0028b66:	83 ec 0c             	sub    esp,0xc
c0028b69:	ba d8 c0 02 c0       	mov    edx,0xc002c0d8
c0028b6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b72:	89 10                	mov    DWORD PTR [eax],edx
c0028b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b78:	83 ec 0c             	sub    esp,0xc
c0028b7b:	50                   	push   eax
c0028b7c:	e8 63 b3 fe ff       	call   c0013ee4 <HardDiskController::~HardDiskController()>
c0028b81:	83 c4 10             	add    esp,0x10
c0028b84:	90                   	nop
c0028b85:	83 c4 0c             	add    esp,0xc
c0028b88:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028b8a <IDE::~IDE()>:
c0028b8a:	83 ec 0c             	sub    esp,0xc
c0028b8d:	83 ec 0c             	sub    esp,0xc
c0028b90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b94:	e8 cd ff ff ff       	call   c0028b66 <IDE::~IDE()>
c0028b99:	83 c4 10             	add    esp,0x10
c0028b9c:	83 ec 08             	sub    esp,0x8
c0028b9f:	68 70 02 00 00       	push   0x270
c0028ba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ba8:	e8 42 9a fe ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0028bad:	83 c4 10             	add    esp,0x10
c0028bb0:	83 c4 0c             	add    esp,0xc
c0028bb3:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028bb4 <SATABus::~SATABus()>:
c0028bb4:	83 ec 0c             	sub    esp,0xc
c0028bb7:	ba 50 c1 02 c0       	mov    edx,0xc002c150
c0028bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc0:	89 10                	mov    DWORD PTR [eax],edx
c0028bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc6:	83 ec 0c             	sub    esp,0xc
c0028bc9:	50                   	push   eax
c0028bca:	e8 15 b3 fe ff       	call   c0013ee4 <HardDiskController::~HardDiskController()>
c0028bcf:	83 c4 10             	add    esp,0x10
c0028bd2:	90                   	nop
c0028bd3:	83 c4 0c             	add    esp,0xc
c0028bd6:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028bd8 <SATABus::~SATABus()>:
c0028bd8:	83 ec 0c             	sub    esp,0xc
c0028bdb:	83 ec 0c             	sub    esp,0xc
c0028bde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028be2:	e8 cd ff ff ff       	call   c0028bb4 <SATABus::~SATABus()>
c0028be7:	83 c4 10             	add    esp,0x10
c0028bea:	83 ec 08             	sub    esp,0x8
c0028bed:	68 64 01 00 00       	push   0x164
c0028bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bf6:	e8 f4 99 fe ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0028bfb:	83 c4 10             	add    esp,0x10
c0028bfe:	83 c4 0c             	add    esp,0xc
c0028c01:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028c02 <ATA::~ATA()>:
c0028c02:	83 ec 0c             	sub    esp,0xc
c0028c05:	ba 9c c1 02 c0       	mov    edx,0xc002c19c
c0028c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c0e:	89 10                	mov    DWORD PTR [eax],edx
c0028c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c14:	83 ec 0c             	sub    esp,0xc
c0028c17:	50                   	push   eax
c0028c18:	e8 a9 b3 fe ff       	call   c0013fc6 <PhysicalDisk::~PhysicalDisk()>
c0028c1d:	83 c4 10             	add    esp,0x10
c0028c20:	90                   	nop
c0028c21:	83 c4 0c             	add    esp,0xc
c0028c24:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028c26 <ATA::~ATA()>:
c0028c26:	83 ec 0c             	sub    esp,0xc
c0028c29:	83 ec 0c             	sub    esp,0xc
c0028c2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c30:	e8 cd ff ff ff       	call   c0028c02 <ATA::~ATA()>
c0028c35:	83 c4 10             	add    esp,0x10
c0028c38:	83 ec 08             	sub    esp,0x8
c0028c3b:	68 7c 01 00 00       	push   0x17c
c0028c40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c44:	e8 a6 99 fe ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0028c49:	83 c4 10             	add    esp,0x10
c0028c4c:	83 c4 0c             	add    esp,0xc
c0028c4f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028c50 <ATAPI::~ATAPI()>:
c0028c50:	83 ec 0c             	sub    esp,0xc
c0028c53:	ba d4 c1 02 c0       	mov    edx,0xc002c1d4
c0028c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c5c:	89 10                	mov    DWORD PTR [eax],edx
c0028c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c62:	83 ec 0c             	sub    esp,0xc
c0028c65:	50                   	push   eax
c0028c66:	e8 5b b3 fe ff       	call   c0013fc6 <PhysicalDisk::~PhysicalDisk()>
c0028c6b:	83 c4 10             	add    esp,0x10
c0028c6e:	90                   	nop
c0028c6f:	83 c4 0c             	add    esp,0xc
c0028c72:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028c74 <ATAPI::~ATAPI()>:
c0028c74:	83 ec 0c             	sub    esp,0xc
c0028c77:	83 ec 0c             	sub    esp,0xc
c0028c7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c7e:	e8 cd ff ff ff       	call   c0028c50 <ATAPI::~ATAPI()>
c0028c83:	83 c4 10             	add    esp,0x10
c0028c86:	83 ec 08             	sub    esp,0x8
c0028c89:	68 80 01 00 00       	push   0x180
c0028c8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c92:	e8 58 99 fe ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0028c97:	83 c4 10             	add    esp,0x10
c0028c9a:	83 c4 0c             	add    esp,0xc
c0028c9d:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028c9e <SATA::~SATA()>:
c0028c9e:	83 ec 0c             	sub    esp,0xc
c0028ca1:	ba 88 c2 02 c0       	mov    edx,0xc002c288
c0028ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028caa:	89 10                	mov    DWORD PTR [eax],edx
c0028cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb0:	83 ec 0c             	sub    esp,0xc
c0028cb3:	50                   	push   eax
c0028cb4:	e8 0d b3 fe ff       	call   c0013fc6 <PhysicalDisk::~PhysicalDisk()>
c0028cb9:	83 c4 10             	add    esp,0x10
c0028cbc:	90                   	nop
c0028cbd:	83 c4 0c             	add    esp,0xc
c0028cc0:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028cc2 <SATA::~SATA()>:
c0028cc2:	83 ec 0c             	sub    esp,0xc
c0028cc5:	83 ec 0c             	sub    esp,0xc
c0028cc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ccc:	e8 cd ff ff ff       	call   c0028c9e <SATA::~SATA()>
c0028cd1:	83 c4 10             	add    esp,0x10
c0028cd4:	83 ec 08             	sub    esp,0x8
c0028cd7:	68 7c 01 00 00       	push   0x17c
c0028cdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ce0:	e8 0a 99 fe ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0028ce5:	83 c4 10             	add    esp,0x10
c0028ce8:	83 c4 0c             	add    esp,0xc
c0028ceb:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028cec <SATAPI::~SATAPI()>:
c0028cec:	83 ec 0c             	sub    esp,0xc
c0028cef:	ba 64 c3 02 c0       	mov    edx,0xc002c364
c0028cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf8:	89 10                	mov    DWORD PTR [eax],edx
c0028cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cfe:	83 ec 0c             	sub    esp,0xc
c0028d01:	50                   	push   eax
c0028d02:	e8 bf b2 fe ff       	call   c0013fc6 <PhysicalDisk::~PhysicalDisk()>
c0028d07:	83 c4 10             	add    esp,0x10
c0028d0a:	90                   	nop
c0028d0b:	83 c4 0c             	add    esp,0xc
c0028d0e:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028d10 <SATAPI::~SATAPI()>:
c0028d10:	83 ec 0c             	sub    esp,0xc
c0028d13:	83 ec 0c             	sub    esp,0xc
c0028d16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d1a:	e8 cd ff ff ff       	call   c0028cec <SATAPI::~SATAPI()>
c0028d1f:	83 c4 10             	add    esp,0x10
c0028d22:	83 ec 08             	sub    esp,0x8
c0028d25:	68 80 01 00 00       	push   0x180
c0028d2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d2e:	e8 bc 98 fe ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0028d33:	83 c4 10             	add    esp,0x10
c0028d36:	83 c4 0c             	add    esp,0xc
c0028d39:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028d3a <AVX::~AVX()>:
c0028d3a:	83 ec 0c             	sub    esp,0xc
c0028d3d:	ba a4 c3 02 c0       	mov    edx,0xc002c3a4
c0028d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d46:	89 10                	mov    DWORD PTR [eax],edx
c0028d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d4c:	83 ec 0c             	sub    esp,0xc
c0028d4f:	50                   	push   eax
c0028d50:	e8 f5 b2 fe ff       	call   c001404a <FPU::~FPU()>
c0028d55:	83 c4 10             	add    esp,0x10
c0028d58:	90                   	nop
c0028d59:	83 c4 0c             	add    esp,0xc
c0028d5c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028d5e <AVX::~AVX()>:
c0028d5e:	83 ec 0c             	sub    esp,0xc
c0028d61:	83 ec 0c             	sub    esp,0xc
c0028d64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d68:	e8 cd ff ff ff       	call   c0028d3a <AVX::~AVX()>
c0028d6d:	83 c4 10             	add    esp,0x10
c0028d70:	83 ec 08             	sub    esp,0x8
c0028d73:	68 58 01 00 00       	push   0x158
c0028d78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d7c:	e8 6e 98 fe ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0028d81:	83 c4 10             	add    esp,0x10
c0028d84:	83 c4 0c             	add    esp,0xc
c0028d87:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028d88 <MMX::~MMX()>:
c0028d88:	83 ec 0c             	sub    esp,0xc
c0028d8b:	ba e4 c3 02 c0       	mov    edx,0xc002c3e4
c0028d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d94:	89 10                	mov    DWORD PTR [eax],edx
c0028d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d9a:	83 ec 0c             	sub    esp,0xc
c0028d9d:	50                   	push   eax
c0028d9e:	e8 a7 b2 fe ff       	call   c001404a <FPU::~FPU()>
c0028da3:	83 c4 10             	add    esp,0x10
c0028da6:	90                   	nop
c0028da7:	83 c4 0c             	add    esp,0xc
c0028daa:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028dac <MMX::~MMX()>:
c0028dac:	83 ec 0c             	sub    esp,0xc
c0028daf:	83 ec 0c             	sub    esp,0xc
c0028db2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028db6:	e8 cd ff ff ff       	call   c0028d88 <MMX::~MMX()>
c0028dbb:	83 c4 10             	add    esp,0x10
c0028dbe:	83 ec 08             	sub    esp,0x8
c0028dc1:	68 58 01 00 00       	push   0x158
c0028dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dca:	e8 20 98 fe ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0028dcf:	83 c4 10             	add    esp,0x10
c0028dd2:	83 c4 0c             	add    esp,0xc
c0028dd5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028dd6 <SSE::~SSE()>:
c0028dd6:	83 ec 0c             	sub    esp,0xc
c0028dd9:	ba 24 c4 02 c0       	mov    edx,0xc002c424
c0028dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028de2:	89 10                	mov    DWORD PTR [eax],edx
c0028de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028de8:	83 ec 0c             	sub    esp,0xc
c0028deb:	50                   	push   eax
c0028dec:	e8 59 b2 fe ff       	call   c001404a <FPU::~FPU()>
c0028df1:	83 c4 10             	add    esp,0x10
c0028df4:	90                   	nop
c0028df5:	83 c4 0c             	add    esp,0xc
c0028df8:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028dfa <SSE::~SSE()>:
c0028dfa:	83 ec 0c             	sub    esp,0xc
c0028dfd:	83 ec 0c             	sub    esp,0xc
c0028e00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e04:	e8 cd ff ff ff       	call   c0028dd6 <SSE::~SSE()>
c0028e09:	83 c4 10             	add    esp,0x10
c0028e0c:	83 ec 08             	sub    esp,0x8
c0028e0f:	68 58 01 00 00       	push   0x158
c0028e14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e18:	e8 d2 97 fe ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0028e1d:	83 c4 10             	add    esp,0x10
c0028e20:	83 c4 0c             	add    esp,0xc
c0028e23:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028e24 <x87::~x87()>:
c0028e24:	83 ec 0c             	sub    esp,0xc
c0028e27:	ba 64 c4 02 c0       	mov    edx,0xc002c464
c0028e2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e30:	89 10                	mov    DWORD PTR [eax],edx
c0028e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e36:	83 ec 0c             	sub    esp,0xc
c0028e39:	50                   	push   eax
c0028e3a:	e8 0b b2 fe ff       	call   c001404a <FPU::~FPU()>
c0028e3f:	83 c4 10             	add    esp,0x10
c0028e42:	90                   	nop
c0028e43:	83 c4 0c             	add    esp,0xc
c0028e46:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028e48 <x87::~x87()>:
c0028e48:	83 ec 0c             	sub    esp,0xc
c0028e4b:	83 ec 0c             	sub    esp,0xc
c0028e4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e52:	e8 cd ff ff ff       	call   c0028e24 <x87::~x87()>
c0028e57:	83 c4 10             	add    esp,0x10
c0028e5a:	83 ec 08             	sub    esp,0x8
c0028e5d:	68 58 01 00 00       	push   0x158
c0028e62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e66:	e8 84 97 fe ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0028e6b:	83 c4 10             	add    esp,0x10
c0028e6e:	83 c4 0c             	add    esp,0xc
c0028e71:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028e72 <IOAPIC::~IOAPIC()>:
c0028e72:	83 ec 0c             	sub    esp,0xc
c0028e75:	ba bc c5 02 c0       	mov    edx,0xc002c5bc
c0028e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e7e:	89 10                	mov    DWORD PTR [eax],edx
c0028e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e84:	83 ec 0c             	sub    esp,0xc
c0028e87:	50                   	push   eax
c0028e88:	e8 41 ab fe ff       	call   c00139ce <Device::~Device()>
c0028e8d:	83 c4 10             	add    esp,0x10
c0028e90:	90                   	nop
c0028e91:	83 c4 0c             	add    esp,0xc
c0028e94:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028e96 <IOAPIC::~IOAPIC()>:
c0028e96:	83 ec 0c             	sub    esp,0xc
c0028e99:	83 ec 0c             	sub    esp,0xc
c0028e9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ea0:	e8 cd ff ff ff       	call   c0028e72 <IOAPIC::~IOAPIC()>
c0028ea5:	83 c4 10             	add    esp,0x10
c0028ea8:	83 ec 08             	sub    esp,0x8
c0028eab:	68 68 01 00 00       	push   0x168
c0028eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eb4:	e8 36 97 fe ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0028eb9:	83 c4 10             	add    esp,0x10
c0028ebc:	83 c4 0c             	add    esp,0xc
c0028ebf:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028ec0 <APIC::~APIC()>:
c0028ec0:	83 ec 0c             	sub    esp,0xc
c0028ec3:	ba 74 c5 02 c0       	mov    edx,0xc002c574
c0028ec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ecc:	89 10                	mov    DWORD PTR [eax],edx
c0028ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ed2:	83 ec 0c             	sub    esp,0xc
c0028ed5:	50                   	push   eax
c0028ed6:	e8 39 b6 fe ff       	call   c0014514 <InterruptController::~InterruptController()>
c0028edb:	83 c4 10             	add    esp,0x10
c0028ede:	90                   	nop
c0028edf:	83 c4 0c             	add    esp,0xc
c0028ee2:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028ee4 <APIC::~APIC()>:
c0028ee4:	83 ec 0c             	sub    esp,0xc
c0028ee7:	83 ec 0c             	sub    esp,0xc
c0028eea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eee:	e8 cd ff ff ff       	call   c0028ec0 <APIC::~APIC()>
c0028ef3:	83 c4 10             	add    esp,0x10
c0028ef6:	83 ec 08             	sub    esp,0x8
c0028ef9:	68 58 21 00 00       	push   0x2158
c0028efe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f02:	e8 e8 96 fe ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0028f07:	83 c4 10             	add    esp,0x10
c0028f0a:	83 c4 0c             	add    esp,0xc
c0028f0d:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028f0e <PIC::~PIC()>:
c0028f0e:	83 ec 0c             	sub    esp,0xc
c0028f11:	ba 0c c6 02 c0       	mov    edx,0xc002c60c
c0028f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f1a:	89 10                	mov    DWORD PTR [eax],edx
c0028f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f20:	83 ec 0c             	sub    esp,0xc
c0028f23:	50                   	push   eax
c0028f24:	e8 eb b5 fe ff       	call   c0014514 <InterruptController::~InterruptController()>
c0028f29:	83 c4 10             	add    esp,0x10
c0028f2c:	90                   	nop
c0028f2d:	83 c4 0c             	add    esp,0xc
c0028f30:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028f32 <PIC::~PIC()>:
c0028f32:	83 ec 0c             	sub    esp,0xc
c0028f35:	83 ec 0c             	sub    esp,0xc
c0028f38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f3c:	e8 cd ff ff ff       	call   c0028f0e <PIC::~PIC()>
c0028f41:	83 c4 10             	add    esp,0x10
c0028f44:	83 ec 08             	sub    esp,0x8
c0028f47:	68 58 21 00 00       	push   0x2158
c0028f4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f50:	e8 9a 96 fe ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0028f55:	83 c4 10             	add    esp,0x10
c0028f58:	83 c4 0c             	add    esp,0xc
c0028f5b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028f5c <APICTimer::~APICTimer()>:
c0028f5c:	83 ec 0c             	sub    esp,0xc
c0028f5f:	ba 60 c6 02 c0       	mov    edx,0xc002c660
c0028f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f68:	89 10                	mov    DWORD PTR [eax],edx
c0028f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f6e:	83 ec 0c             	sub    esp,0xc
c0028f71:	50                   	push   eax
c0028f72:	e8 f5 d5 fe ff       	call   c001656c <Timer::~Timer()>
c0028f77:	83 c4 10             	add    esp,0x10
c0028f7a:	90                   	nop
c0028f7b:	83 c4 0c             	add    esp,0xc
c0028f7e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028f80 <APICTimer::~APICTimer()>:
c0028f80:	83 ec 0c             	sub    esp,0xc
c0028f83:	83 ec 0c             	sub    esp,0xc
c0028f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f8a:	e8 cd ff ff ff       	call   c0028f5c <APICTimer::~APICTimer()>
c0028f8f:	83 c4 10             	add    esp,0x10
c0028f92:	83 ec 08             	sub    esp,0x8
c0028f95:	68 60 01 00 00       	push   0x160
c0028f9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f9e:	e8 4c 96 fe ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0028fa3:	83 c4 10             	add    esp,0x10
c0028fa6:	83 c4 0c             	add    esp,0xc
c0028fa9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028faa <PIT::~PIT()>:
c0028faa:	83 ec 0c             	sub    esp,0xc
c0028fad:	ba b0 c6 02 c0       	mov    edx,0xc002c6b0
c0028fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb6:	89 10                	mov    DWORD PTR [eax],edx
c0028fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fbc:	83 ec 0c             	sub    esp,0xc
c0028fbf:	50                   	push   eax
c0028fc0:	e8 a7 d5 fe ff       	call   c001656c <Timer::~Timer()>
c0028fc5:	83 c4 10             	add    esp,0x10
c0028fc8:	90                   	nop
c0028fc9:	83 c4 0c             	add    esp,0xc
c0028fcc:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028fce <PIT::~PIT()>:
c0028fce:	83 ec 0c             	sub    esp,0xc
c0028fd1:	83 ec 0c             	sub    esp,0xc
c0028fd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fd8:	e8 cd ff ff ff       	call   c0028faa <PIT::~PIT()>
c0028fdd:	83 c4 10             	add    esp,0x10
c0028fe0:	83 ec 08             	sub    esp,0x8
c0028fe3:	68 5c 01 00 00       	push   0x15c
c0028fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fec:	e8 fe 95 fe ff       	call   c00125ef <operator delete(void*, unsigned long)>
c0028ff1:	83 c4 10             	add    esp,0x10
c0028ff4:	83 c4 0c             	add    esp,0xc
c0028ff7:	c3                   	ret    
