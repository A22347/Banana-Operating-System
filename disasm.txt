
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f7 7e 00 00       	call   c0007f17 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 a5 c3 01 00       	call   c001c3ca <_init>
c0000025:	c3                   	ret    
c0000026:	bb 66 ce 01 c0       	mov    ebx,0xc001ce66
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 70 ce 01 c0    	cmp    ebx,0xc001ce70
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 f9 01 c0       	mov    eax,0xc001f918
c0000049:	3d 18 f9 01 c0       	cmp    eax,0xc001f918
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 f9 01 c0       	push   0xc001f918
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 f9 01 c0       	mov    eax,0xc001f918
c0000075:	2d 18 f9 01 c0       	sub    eax,0xc001f918
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 f9 01 c0       	push   0xc001f918
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 40 fb 01 c0 00 	cmp    BYTE PTR ds:0xc001fb40,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 78 ce 01 c0       	mov    ebx,0xc001ce78
c00000bb:	81 eb 74 ce 01 c0    	sub    ebx,0xc001ce74
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 74 ce 01 c0       	mov    esi,0xc001ce74
c00000ca:	a1 44 fb 01 c0       	mov    eax,ds:0xc001fb44
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 44 fb 01 c0       	mov    ds:0xc001fb44,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 44 fb 01 c0       	mov    eax,ds:0xc001fb44
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 f9 01 c0       	push   0xc001f918
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 40 fb 01 c0 01 	mov    BYTE PTR ds:0xc001fb40,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 48 fb 01 c0       	push   0xc001fb48
c000012c:	68 18 f9 01 c0       	push   0xc001f918
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 54 30 01 00       	call   c0013324 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 f8 a6 00 00       	call   c000a9e0 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 32 30 01 00       	call   c0013324 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 03 35 01 00       	call   c0013814 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 52 3b 01 00       	call   c0013e6c <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 40 09 02 c0 	lgdtd  ds:0xc0020940
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 81 6b 00 00       	jmp    c0006f23 <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax
c00003a4:	66 90                	xchg   ax,ax
c00003a6:	66 90                	xchg   ax,ax
c00003a8:	66 90                	xchg   ax,ax
c00003aa:	66 90                	xchg   ax,ax
c00003ac:	66 90                	xchg   ax,ax
c00003ae:	66 90                	xchg   ax,ax

c00003b0 <memcmp>:
c00003b0:	56                   	push   esi
c00003b1:	53                   	push   ebx
c00003b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003be:	85 f6                	test   esi,esi
c00003c0:	74 1c                	je     c00003de <memcmp+0x2e>
c00003c2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003c6:	38 cb                	cmp    bl,cl
c00003c8:	75 26                	jne    c00003f0 <memcmp+0x40>
c00003ca:	01 c6                	add    esi,eax
c00003cc:	eb 0a                	jmp    c00003d8 <memcmp+0x28>
c00003ce:	66 90                	xchg   ax,ax
c00003d0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003d2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003d4:	38 d9                	cmp    cl,bl
c00003d6:	75 18                	jne    c00003f0 <memcmp+0x40>
c00003d8:	40                   	inc    eax
c00003d9:	42                   	inc    edx
c00003da:	39 f0                	cmp    eax,esi
c00003dc:	75 f2                	jne    c00003d0 <memcmp+0x20>
c00003de:	31 c0                	xor    eax,eax
c00003e0:	5b                   	pop    ebx
c00003e1:	5e                   	pop    esi
c00003e2:	c3                   	ret    
c00003e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003f0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003f6:	31 c0                	xor    eax,eax
c00003f8:	88 c8                	mov    al,cl
c00003fa:	29 d8                	sub    eax,ebx
c00003fc:	5b                   	pop    ebx
c00003fd:	5e                   	pop    esi
c00003fe:	c3                   	ret    
c00003ff:	90                   	nop

c0000400 <memmove>:
c0000400:	55                   	push   ebp
c0000401:	57                   	push   edi
c0000402:	56                   	push   esi
c0000403:	53                   	push   ebx
c0000404:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000408:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000040c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000410:	39 dd                	cmp    ebp,ebx
c0000412:	0f 83 98 00 00 00    	jae    c00004b0 <memmove+0xb0>
c0000418:	85 d2                	test   edx,edx
c000041a:	0f 84 7c 00 00 00    	je     c000049c <memmove+0x9c>
c0000420:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000423:	8d 75 04             	lea    esi,[ebp+0x4]
c0000426:	39 cd                	cmp    ebp,ecx
c0000428:	0f 93 c1             	setae  cl
c000042b:	39 f3                	cmp    ebx,esi
c000042d:	0f 93 c0             	setae  al
c0000430:	89 c6                	mov    esi,eax
c0000432:	09 ce                	or     esi,ecx
c0000434:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000437:	89 f0                	mov    eax,esi
c0000439:	83 f9 0c             	cmp    ecx,0xc
c000043c:	0f 97 c1             	seta   cl
c000043f:	84 c8                	test   al,cl
c0000441:	0f 84 89 00 00 00    	je     c00004d0 <memmove+0xd0>
c0000447:	89 e9                	mov    ecx,ebp
c0000449:	09 d9                	or     ecx,ebx
c000044b:	83 e1 03             	and    ecx,0x3
c000044e:	0f 85 7c 00 00 00    	jne    c00004d0 <memmove+0xd0>
c0000454:	89 d7                	mov    edi,edx
c0000456:	89 d9                	mov    ecx,ebx
c0000458:	83 e7 fc             	and    edi,0xfffffffc
c000045b:	89 ee                	mov    esi,ebp
c000045d:	01 df                	add    edi,ebx
c000045f:	90                   	nop
c0000460:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000462:	83 c6 04             	add    esi,0x4
c0000465:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000468:	83 c1 04             	add    ecx,0x4
c000046b:	39 f9                	cmp    ecx,edi
c000046d:	75 f1                	jne    c0000460 <memmove+0x60>
c000046f:	89 d1                	mov    ecx,edx
c0000471:	89 d7                	mov    edi,edx
c0000473:	83 e1 fc             	and    ecx,0xfffffffc
c0000476:	29 cf                	sub    edi,ecx
c0000478:	01 cb                	add    ebx,ecx
c000047a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000047e:	39 ca                	cmp    edx,ecx
c0000480:	74 1a                	je     c000049c <memmove+0x9c>
c0000482:	8a 03                	mov    al,BYTE PTR [ebx]
c0000484:	83 ff 01             	cmp    edi,0x1
c0000487:	88 06                	mov    BYTE PTR [esi],al
c0000489:	74 11                	je     c000049c <memmove+0x9c>
c000048b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000048e:	83 ff 02             	cmp    edi,0x2
c0000491:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000494:	74 06                	je     c000049c <memmove+0x9c>
c0000496:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000499:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000049c:	5b                   	pop    ebx
c000049d:	89 e8                	mov    eax,ebp
c000049f:	5e                   	pop    esi
c00004a0:	5f                   	pop    edi
c00004a1:	5d                   	pop    ebp
c00004a2:	c3                   	ret    
c00004a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	76 ea                	jbe    c000049c <memmove+0x9c>
c00004b2:	85 d2                	test   edx,edx
c00004b4:	74 e6                	je     c000049c <memmove+0x9c>
c00004b6:	4b                   	dec    ebx
c00004b7:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00004ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004c0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004c3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004c6:	4a                   	dec    edx
c00004c7:	75 f7                	jne    c00004c0 <memmove+0xc0>
c00004c9:	5b                   	pop    ebx
c00004ca:	89 e8                	mov    eax,ebp
c00004cc:	5e                   	pop    esi
c00004cd:	5f                   	pop    edi
c00004ce:	5d                   	pop    ebp
c00004cf:	c3                   	ret    
c00004d0:	01 ea                	add    edx,ebp
c00004d2:	89 e9                	mov    ecx,ebp
c00004d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004e0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004e2:	41                   	inc    ecx
c00004e3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004e6:	43                   	inc    ebx
c00004e7:	39 d1                	cmp    ecx,edx
c00004e9:	75 f5                	jne    c00004e0 <memmove+0xe0>
c00004eb:	eb af                	jmp    c000049c <memmove+0x9c>
c00004ed:	8d 76 00             	lea    esi,[esi+0x0]

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	53                   	push   ebx
c00004f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004fa:	85 d2                	test   edx,edx
c00004fc:	74 1f                	je     c000051d <memset+0x2d>
c00004fe:	31 c0                	xor    eax,eax
c0000500:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0000504:	88 c4                	mov    ah,al
c0000506:	89 c1                	mov    ecx,eax
c0000508:	c1 e1 10             	shl    ecx,0x10
c000050b:	09 c8                	or     eax,ecx
c000050d:	83 fa 04             	cmp    edx,0x4
c0000510:	73 1e                	jae    c0000530 <memset+0x40>
c0000512:	85 d2                	test   edx,edx
c0000514:	74 07                	je     c000051d <memset+0x2d>
c0000516:	88 03                	mov    BYTE PTR [ebx],al
c0000518:	f6 c2 02             	test   dl,0x2
c000051b:	75 30                	jne    c000054d <memset+0x5d>
c000051d:	89 d8                	mov    eax,ebx
c000051f:	5b                   	pop    ebx
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	89 03                	mov    DWORD PTR [ebx],eax
c0000532:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000535:	89 d9                	mov    ecx,ebx
c0000537:	83 e7 fc             	and    edi,0xfffffffc
c000053a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000053e:	29 f9                	sub    ecx,edi
c0000540:	01 d1                	add    ecx,edx
c0000542:	c1 e9 02             	shr    ecx,0x2
c0000545:	fc                   	cld    
c0000546:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000548:	89 d8                	mov    eax,ebx
c000054a:	5b                   	pop    ebx
c000054b:	5f                   	pop    edi
c000054c:	c3                   	ret    
c000054d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000552:	eb c9                	jmp    c000051d <memset+0x2d>
c0000554:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000055a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000560 <strlen>:
c0000560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000564:	31 c0                	xor    eax,eax
c0000566:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000569:	74 15                	je     c0000580 <strlen+0x20>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000570:	40                   	inc    eax
c0000571:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000575:	75 f9                	jne    c0000570 <strlen+0x10>
c0000577:	c3                   	ret    
c0000578:	90                   	nop
c0000579:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000580:	c3                   	ret    
c0000581:	eb 0d                	jmp    c0000590 <strpbrk>
c0000583:	90                   	nop
c0000584:	90                   	nop
c0000585:	90                   	nop
c0000586:	90                   	nop
c0000587:	90                   	nop
c0000588:	90                   	nop
c0000589:	90                   	nop
c000058a:	90                   	nop
c000058b:	90                   	nop
c000058c:	90                   	nop
c000058d:	90                   	nop
c000058e:	90                   	nop
c000058f:	90                   	nop

c0000590 <strpbrk>:
c0000590:	57                   	push   edi
c0000591:	56                   	push   esi
c0000592:	53                   	push   ebx
c0000593:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000597:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000059b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059d:	84 db                	test   bl,bl
c000059f:	74 21                	je     c00005c2 <strpbrk+0x32>
c00005a1:	8a 07                	mov    al,BYTE PTR [edi]
c00005a3:	84 c0                	test   al,al
c00005a5:	74 14                	je     c00005bb <strpbrk+0x2b>
c00005a7:	38 d8                	cmp    al,bl
c00005a9:	74 19                	je     c00005c4 <strpbrk+0x34>
c00005ab:	89 fa                	mov    edx,edi
c00005ad:	eb 05                	jmp    c00005b4 <strpbrk+0x24>
c00005af:	90                   	nop
c00005b0:	38 d9                	cmp    cl,bl
c00005b2:	74 10                	je     c00005c4 <strpbrk+0x34>
c00005b4:	42                   	inc    edx
c00005b5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00005b7:	84 c9                	test   cl,cl
c00005b9:	75 f5                	jne    c00005b0 <strpbrk+0x20>
c00005bb:	46                   	inc    esi
c00005bc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00005be:	84 db                	test   bl,bl
c00005c0:	75 e1                	jne    c00005a3 <strpbrk+0x13>
c00005c2:	31 f6                	xor    esi,esi
c00005c4:	89 f0                	mov    eax,esi
c00005c6:	5b                   	pop    ebx
c00005c7:	5e                   	pop    esi
c00005c8:	5f                   	pop    edi
c00005c9:	c3                   	ret    
c00005ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005d0 <strtok>:
c00005d0:	56                   	push   esi
c00005d1:	53                   	push   ebx
c00005d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005da:	85 db                	test   ebx,ebx
c00005dc:	75 07                	jne    c00005e5 <strtok+0x15>
c00005de:	eb 30                	jmp    c0000610 <strtok+0x40>
c00005e0:	43                   	inc    ebx
c00005e1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005e5:	56                   	push   esi
c00005e6:	53                   	push   ebx
c00005e7:	e8 a4 ff ff ff       	call   c0000590 <strpbrk>
c00005ec:	5a                   	pop    edx
c00005ed:	a3 60 fb 01 c0       	mov    ds:0xc001fb60,eax
c00005f2:	59                   	pop    ecx
c00005f3:	39 d8                	cmp    eax,ebx
c00005f5:	74 e9                	je     c00005e0 <strtok+0x10>
c00005f7:	85 c0                	test   eax,eax
c00005f9:	74 1f                	je     c000061a <strtok+0x4a>
c00005fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005fe:	8d 50 01             	lea    edx,[eax+0x1]
c0000601:	89 d8                	mov    eax,ebx
c0000603:	89 15 60 fb 01 c0    	mov    DWORD PTR ds:0xc001fb60,edx
c0000609:	5b                   	pop    ebx
c000060a:	5e                   	pop    esi
c000060b:	c3                   	ret    
c000060c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000610:	8b 1d 60 fb 01 c0    	mov    ebx,DWORD PTR ds:0xc001fb60
c0000616:	85 db                	test   ebx,ebx
c0000618:	75 cb                	jne    c00005e5 <strtok+0x15>
c000061a:	31 c0                	xor    eax,eax
c000061c:	5b                   	pop    ebx
c000061d:	5e                   	pop    esi
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strcpy>:
c0000620:	53                   	push   ebx
c0000621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000629:	89 c3                	mov    ebx,eax
c000062b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062d:	84 d2                	test   dl,dl
c000062f:	74 19                	je     c000064a <strcpy+0x2a>
c0000631:	eb 0d                	jmp    c0000640 <strcpy+0x20>
c0000633:	90                   	nop
c0000634:	90                   	nop
c0000635:	90                   	nop
c0000636:	90                   	nop
c0000637:	90                   	nop
c0000638:	90                   	nop
c0000639:	90                   	nop
c000063a:	90                   	nop
c000063b:	90                   	nop
c000063c:	90                   	nop
c000063d:	90                   	nop
c000063e:	90                   	nop
c000063f:	90                   	nop
c0000640:	88 13                	mov    BYTE PTR [ebx],dl
c0000642:	41                   	inc    ecx
c0000643:	43                   	inc    ebx
c0000644:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000646:	84 d2                	test   dl,dl
c0000648:	75 f6                	jne    c0000640 <strcpy+0x20>
c000064a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000064d:	5b                   	pop    ebx
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strncpy>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000657:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065f:	85 ff                	test   edi,edi
c0000661:	74 3e                	je     c00006a1 <strncpy+0x51>
c0000663:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000665:	8d 47 ff             	lea    eax,[edi-0x1]
c0000668:	8d 4a 01             	lea    ecx,[edx+0x1]
c000066b:	88 1a                	mov    BYTE PTR [edx],bl
c000066d:	84 db                	test   bl,bl
c000066f:	74 3f                	je     c00006b0 <strncpy+0x60>
c0000671:	85 c0                	test   eax,eax
c0000673:	74 2c                	je     c00006a1 <strncpy+0x51>
c0000675:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000678:	8d 47 fe             	lea    eax,[edi-0x2]
c000067b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000067e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000681:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000684:	84 db                	test   bl,bl
c0000686:	75 15                	jne    c000069d <strncpy+0x4d>
c0000688:	eb 26                	jmp    c00006b0 <strncpy+0x60>
c000068a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000690:	47                   	inc    edi
c0000691:	41                   	inc    ecx
c0000692:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000695:	48                   	dec    eax
c0000696:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000699:	84 db                	test   bl,bl
c000069b:	74 13                	je     c00006b0 <strncpy+0x60>
c000069d:	85 c0                	test   eax,eax
c000069f:	75 ef                	jne    c0000690 <strncpy+0x40>
c00006a1:	5b                   	pop    ebx
c00006a2:	89 d0                	mov    eax,edx
c00006a4:	5e                   	pop    esi
c00006a5:	5f                   	pop    edi
c00006a6:	c3                   	ret    
c00006a7:	89 f6                	mov    esi,esi
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	85 c0                	test   eax,eax
c00006b2:	74 ed                	je     c00006a1 <strncpy+0x51>
c00006b4:	83 f8 04             	cmp    eax,0x4
c00006b7:	73 17                	jae    c00006d0 <strncpy+0x80>
c00006b9:	85 c0                	test   eax,eax
c00006bb:	74 e4                	je     c00006a1 <strncpy+0x51>
c00006bd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006c0:	a8 02                	test   al,0x2
c00006c2:	74 dd                	je     c00006a1 <strncpy+0x51>
c00006c4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006cb:	eb d4                	jmp    c00006a1 <strncpy+0x51>
c00006cd:	8d 76 00             	lea    esi,[esi+0x0]
c00006d0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006d6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006d9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006e1:	83 e7 fc             	and    edi,0xfffffffc
c00006e4:	29 f9                	sub    ecx,edi
c00006e6:	01 c1                	add    ecx,eax
c00006e8:	c1 e9 02             	shr    ecx,0x2
c00006eb:	fc                   	cld    
c00006ec:	31 c0                	xor    eax,eax
c00006ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006f0:	89 d0                	mov    eax,edx
c00006f2:	5b                   	pop    ebx
c00006f3:	5e                   	pop    esi
c00006f4:	5f                   	pop    edi
c00006f5:	c3                   	ret    
c00006f6:	8d 76 00             	lea    esi,[esi+0x0]
c00006f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000700 <strcmp>:
c0000700:	56                   	push   esi
c0000701:	53                   	push   ebx
c0000702:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000070a:	8a 16                	mov    dl,BYTE PTR [esi]
c000070c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000070e:	38 d1                	cmp    cl,dl
c0000710:	75 1d                	jne    c000072f <strcmp+0x2f>
c0000712:	84 c9                	test   cl,cl
c0000714:	74 2a                	je     c0000740 <strcmp+0x40>
c0000716:	b8 01 00 00 00       	mov    eax,0x1
c000071b:	eb 08                	jmp    c0000725 <strcmp+0x25>
c000071d:	8d 76 00             	lea    esi,[esi+0x0]
c0000720:	40                   	inc    eax
c0000721:	84 d2                	test   dl,dl
c0000723:	74 1b                	je     c0000740 <strcmp+0x40>
c0000725:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000728:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000072b:	38 ca                	cmp    dl,cl
c000072d:	74 f1                	je     c0000720 <strcmp+0x20>
c000072f:	31 c0                	xor    eax,eax
c0000731:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000737:	88 d0                	mov    al,dl
c0000739:	5b                   	pop    ebx
c000073a:	29 c8                	sub    eax,ecx
c000073c:	5e                   	pop    esi
c000073d:	c3                   	ret    
c000073e:	66 90                	xchg   ax,ax
c0000740:	31 c0                	xor    eax,eax
c0000742:	5b                   	pop    ebx
c0000743:	5e                   	pop    esi
c0000744:	c3                   	ret    
c0000745:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000749:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000750 <strchr>:
c0000750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000754:	8a 10                	mov    dl,BYTE PTR [eax]
c0000756:	84 d2                	test   dl,dl
c0000758:	74 21                	je     c000077b <strchr+0x2b>
c000075a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000075e:	38 ca                	cmp    dl,cl
c0000760:	75 12                	jne    c0000774 <strchr+0x24>
c0000762:	eb 1a                	jmp    c000077e <strchr+0x2e>
c0000764:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000076a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000770:	38 ca                	cmp    dl,cl
c0000772:	74 09                	je     c000077d <strchr+0x2d>
c0000774:	40                   	inc    eax
c0000775:	8a 10                	mov    dl,BYTE PTR [eax]
c0000777:	84 d2                	test   dl,dl
c0000779:	75 f5                	jne    c0000770 <strchr+0x20>
c000077b:	31 c0                	xor    eax,eax
c000077d:	c3                   	ret    
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <strncmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	85 ff                	test   edi,edi
c0000791:	74 2f                	je     c00007c2 <strncmp+0x42>
c0000793:	8a 16                	mov    dl,BYTE PTR [esi]
c0000795:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000797:	38 d1                	cmp    cl,dl
c0000799:	75 35                	jne    c00007d0 <strncmp+0x50>
c000079b:	8d 46 01             	lea    eax,[esi+0x1]
c000079e:	84 c9                	test   cl,cl
c00007a0:	74 20                	je     c00007c2 <strncmp+0x42>
c00007a2:	01 fe                	add    esi,edi
c00007a4:	eb 17                	jmp    c00007bd <strncmp+0x3d>
c00007a6:	8d 76 00             	lea    esi,[esi+0x0]
c00007a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00007b0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007b2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00007b4:	38 ca                	cmp    dl,cl
c00007b6:	75 18                	jne    c00007d0 <strncmp+0x50>
c00007b8:	40                   	inc    eax
c00007b9:	84 d2                	test   dl,dl
c00007bb:	74 05                	je     c00007c2 <strncmp+0x42>
c00007bd:	43                   	inc    ebx
c00007be:	39 c6                	cmp    esi,eax
c00007c0:	75 ee                	jne    c00007b0 <strncmp+0x30>
c00007c2:	5b                   	pop    ebx
c00007c3:	31 c0                	xor    eax,eax
c00007c5:	5e                   	pop    esi
c00007c6:	5f                   	pop    edi
c00007c7:	c3                   	ret    
c00007c8:	90                   	nop
c00007c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d0:	5b                   	pop    ebx
c00007d1:	31 c0                	xor    eax,eax
c00007d3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007d9:	88 d0                	mov    al,dl
c00007db:	5e                   	pop    esi
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5f                   	pop    edi
c00007df:	c3                   	ret    

c00007e0 <strcat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ea:	89 c3                	mov    ebx,eax
c00007ec:	eb 04                	jmp    c00007f2 <strcat+0x12>
c00007ee:	66 90                	xchg   ax,ax
c00007f0:	89 d3                	mov    ebx,edx
c00007f2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007f5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007f9:	75 f5                	jne    c00007f0 <strcat+0x10>
c00007fb:	31 d2                	xor    edx,edx
c00007fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000800:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000803:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000806:	42                   	inc    edx
c0000807:	84 c9                	test   cl,cl
c0000809:	75 f5                	jne    c0000800 <strcat+0x20>
c000080b:	5b                   	pop    ebx
c000080c:	5e                   	pop    esi
c000080d:	c3                   	ret    
c000080e:	66 90                	xchg   ax,ax

c0000810 <strncat>:
c0000810:	56                   	push   esi
c0000811:	53                   	push   ebx
c0000812:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000081a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000081e:	85 f6                	test   esi,esi
c0000820:	74 2e                	je     c0000850 <strncat+0x40>
c0000822:	89 c2                	mov    edx,eax
c0000824:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000082a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000830:	42                   	inc    edx
c0000831:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000835:	75 f9                	jne    c0000830 <strncat+0x20>
c0000837:	01 ce                	add    esi,ecx
c0000839:	eb 0a                	jmp    c0000845 <strncat+0x35>
c000083b:	90                   	nop
c000083c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000840:	39 f1                	cmp    ecx,esi
c0000842:	74 1c                	je     c0000860 <strncat+0x50>
c0000844:	42                   	inc    edx
c0000845:	41                   	inc    ecx
c0000846:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000849:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000084c:	84 db                	test   bl,bl
c000084e:	75 f0                	jne    c0000840 <strncat+0x30>
c0000850:	5b                   	pop    ebx
c0000851:	5e                   	pop    esi
c0000852:	c3                   	ret    
c0000853:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000859:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000860:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000863:	5b                   	pop    ebx
c0000864:	5e                   	pop    esi
c0000865:	c3                   	ret    
c0000866:	8d 76 00             	lea    esi,[esi+0x0]
c0000869:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000870 <strstr>:
c0000870:	57                   	push   edi
c0000871:	56                   	push   esi
c0000872:	53                   	push   ebx
c0000873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000877:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087b:	57                   	push   edi
c000087c:	e8 df fc ff ff       	call   c0000560 <strlen>
c0000881:	59                   	pop    ecx
c0000882:	85 c0                	test   eax,eax
c0000884:	74 3a                	je     c00008c0 <strstr+0x50>
c0000886:	89 c6                	mov    esi,eax
c0000888:	eb 16                	jmp    c00008a0 <strstr+0x30>
c000088a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000890:	56                   	push   esi
c0000891:	57                   	push   edi
c0000892:	53                   	push   ebx
c0000893:	e8 18 fb ff ff       	call   c00003b0 <memcmp>
c0000898:	83 c4 0c             	add    esp,0xc
c000089b:	85 c0                	test   eax,eax
c000089d:	74 21                	je     c00008c0 <strstr+0x50>
c000089f:	43                   	inc    ebx
c00008a0:	53                   	push   ebx
c00008a1:	e8 ba fc ff ff       	call   c0000560 <strlen>
c00008a6:	5a                   	pop    edx
c00008a7:	39 f0                	cmp    eax,esi
c00008a9:	73 e5                	jae    c0000890 <strstr+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	31 c0                	xor    eax,eax
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	c3                   	ret    
c00008b1:	eb 0d                	jmp    c00008c0 <strstr+0x50>
c00008b3:	90                   	nop
c00008b4:	90                   	nop
c00008b5:	90                   	nop
c00008b6:	90                   	nop
c00008b7:	90                   	nop
c00008b8:	90                   	nop
c00008b9:	90                   	nop
c00008ba:	90                   	nop
c00008bb:	90                   	nop
c00008bc:	90                   	nop
c00008bd:	90                   	nop
c00008be:	90                   	nop
c00008bf:	90                   	nop
c00008c0:	89 d8                	mov    eax,ebx
c00008c2:	5b                   	pop    ebx
c00008c3:	5e                   	pop    esi
c00008c4:	5f                   	pop    edi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <toupper>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 80 ce 01 c0 02 	test   BYTE PTR [edx-0x3ffe3180],0x2
c00008df:	74 03                	je     c00008e4 <toupper+0x14>
c00008e1:	83 e8 20             	sub    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <tolower>:
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f6:	88 c2                	mov    dl,al
c00008f8:	f6 82 80 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe3180],0x1
c00008ff:	74 03                	je     c0000904 <tolower+0x14>
c0000901:	83 c0 20             	add    eax,0x20
c0000904:	c3                   	ret    
c0000905:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000910 <simple_strtoul>:
c0000910:	55                   	push   ebp
c0000911:	57                   	push   edi
c0000912:	56                   	push   esi
c0000913:	53                   	push   ebx
c0000914:	83 ec 08             	sub    esp,0x8
c0000917:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000091b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000091f:	90                   	nop
c0000920:	31 d2                	xor    edx,edx
c0000922:	8a 01                	mov    al,BYTE PTR [ecx]
c0000924:	88 c2                	mov    dl,al
c0000926:	f6 82 80 ce 01 c0 08 	test   BYTE PTR [edx-0x3ffe3180],0x8
c000092d:	75 04                	jne    c0000933 <simple_strtoul+0x23>
c000092f:	3c 09                	cmp    al,0x9
c0000931:	75 0d                	jne    c0000940 <simple_strtoul+0x30>
c0000933:	41                   	inc    ecx
c0000934:	eb ea                	jmp    c0000920 <simple_strtoul+0x10>
c0000936:	8d 76 00             	lea    esi,[esi+0x0]
c0000939:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000940:	3c 2d                	cmp    al,0x2d
c0000942:	0f 84 48 01 00 00    	je     c0000a90 <simple_strtoul+0x180>
c0000948:	3c 2b                	cmp    al,0x2b
c000094a:	0f 84 e0 00 00 00    	je     c0000a30 <simple_strtoul+0x120>
c0000950:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000958:	85 f6                	test   esi,esi
c000095a:	0f 85 e1 00 00 00    	jne    c0000a41 <simple_strtoul+0x131>
c0000960:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000963:	80 fa 30             	cmp    dl,0x30
c0000966:	0f 84 75 01 00 00    	je     c0000ae1 <simple_strtoul+0x1d1>
c000096c:	be 0a 00 00 00       	mov    esi,0xa
c0000971:	84 d2                	test   dl,dl
c0000973:	0f 84 9f 01 00 00    	je     c0000b18 <simple_strtoul+0x208>
c0000979:	31 ed                	xor    ebp,ebp
c000097b:	31 ff                	xor    edi,edi
c000097d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000984:	eb 35                	jmp    c00009bb <simple_strtoul+0xab>
c0000986:	8d 76 00             	lea    esi,[esi+0x0]
c0000989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000990:	83 eb 30             	sub    ebx,0x30
c0000993:	39 f3                	cmp    ebx,esi
c0000995:	73 59                	jae    c00009f0 <simple_strtoul+0xe0>
c0000997:	31 d2                	xor    edx,edx
c0000999:	89 d8                	mov    eax,ebx
c000099b:	f7 d0                	not    eax
c000099d:	f7 f6                	div    esi
c000099f:	39 f8                	cmp    eax,edi
c00009a1:	0f 82 c9 00 00 00    	jb     c0000a70 <simple_strtoul+0x160>
c00009a7:	0f af fe             	imul   edi,esi
c00009aa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009b1:	01 df                	add    edi,ebx
c00009b3:	41                   	inc    ecx
c00009b4:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c00009b7:	84 d2                	test   dl,dl
c00009b9:	74 35                	je     c00009f0 <simple_strtoul+0xe0>
c00009bb:	31 db                	xor    ebx,ebx
c00009bd:	88 d3                	mov    bl,dl
c00009bf:	f6 83 80 ce 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3180],0x4
c00009c6:	75 c8                	jne    c0000990 <simple_strtoul+0x80>
c00009c8:	52                   	push   edx
c00009c9:	e8 02 ff ff ff       	call   c00008d0 <toupper>
c00009ce:	31 d2                	xor    edx,edx
c00009d0:	5b                   	pop    ebx
c00009d1:	88 c2                	mov    dl,al
c00009d3:	f6 82 80 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe3180],0x1
c00009da:	74 14                	je     c00009f0 <simple_strtoul+0xe0>
c00009dc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009df:	39 f3                	cmp    ebx,esi
c00009e1:	72 b4                	jb     c0000997 <simple_strtoul+0x87>
c00009e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f4:	85 c0                	test   eax,eax
c00009f6:	74 18                	je     c0000a10 <simple_strtoul+0x100>
c00009f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009fb:	09 f8                	or     eax,edi
c00009fd:	0f 85 7d 00 00 00    	jne    c0000a80 <simple_strtoul+0x170>
c0000a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a07:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a0b:	31 ff                	xor    edi,edi
c0000a0d:	89 30                	mov    DWORD PTR [eax],esi
c0000a0f:	90                   	nop
c0000a10:	4d                   	dec    ebp
c0000a11:	75 05                	jne    c0000a18 <simple_strtoul+0x108>
c0000a13:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a18:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a1d:	75 02                	jne    c0000a21 <simple_strtoul+0x111>
c0000a1f:	f7 df                	neg    edi
c0000a21:	83 c4 08             	add    esp,0x8
c0000a24:	89 f8                	mov    eax,edi
c0000a26:	5b                   	pop    ebx
c0000a27:	5e                   	pop    esi
c0000a28:	5f                   	pop    edi
c0000a29:	5d                   	pop    ebp
c0000a2a:	c3                   	ret    
c0000a2b:	90                   	nop
c0000a2c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a30:	41                   	inc    ecx
c0000a31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a39:	85 f6                	test   esi,esi
c0000a3b:	0f 84 1f ff ff ff    	je     c0000960 <simple_strtoul+0x50>
c0000a41:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a44:	83 f8 22             	cmp    eax,0x22
c0000a47:	77 7b                	ja     c0000ac4 <simple_strtoul+0x1b4>
c0000a49:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a4c:	83 fe 08             	cmp    esi,0x8
c0000a4f:	0f 84 b3 00 00 00    	je     c0000b08 <simple_strtoul+0x1f8>
c0000a55:	83 fe 10             	cmp    esi,0x10
c0000a58:	0f 85 13 ff ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000a5e:	80 fa 30             	cmp    dl,0x30
c0000a61:	74 3b                	je     c0000a9e <simple_strtoul+0x18e>
c0000a63:	be 10 00 00 00       	mov    esi,0x10
c0000a68:	e9 04 ff ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a70:	bd 01 00 00 00       	mov    ebp,0x1
c0000a75:	31 ff                	xor    edi,edi
c0000a77:	e9 37 ff ff ff       	jmp    c00009b3 <simple_strtoul+0xa3>
c0000a7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a84:	89 08                	mov    DWORD PTR [eax],ecx
c0000a86:	eb 88                	jmp    c0000a10 <simple_strtoul+0x100>
c0000a88:	90                   	nop
c0000a89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a99:	e9 ba fe ff ff       	jmp    c0000958 <simple_strtoul+0x48>
c0000a9e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aa2:	88 04 24             	mov    BYTE PTR [esp],al
c0000aa5:	50                   	push   eax
c0000aa6:	e8 45 fe ff ff       	call   c00008f0 <tolower>
c0000aab:	5e                   	pop    esi
c0000aac:	83 f8 78             	cmp    eax,0x78
c0000aaf:	0f 84 88 00 00 00    	je     c0000b3d <simple_strtoul+0x22d>
c0000ab5:	41                   	inc    ecx
c0000ab6:	be 10 00 00 00       	mov    esi,0x10
c0000abb:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000abf:	e9 ad fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000ac4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ac8:	85 ff                	test   edi,edi
c0000aca:	74 5e                	je     c0000b2a <simple_strtoul+0x21a>
c0000acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ad0:	85 c9                	test   ecx,ecx
c0000ad2:	75 50                	jne    c0000b24 <simple_strtoul+0x214>
c0000ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ada:	31 ff                	xor    edi,edi
c0000adc:	e9 37 ff ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000ae1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ae5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ae8:	50                   	push   eax
c0000ae9:	e8 02 fe ff ff       	call   c00008f0 <tolower>
c0000aee:	5d                   	pop    ebp
c0000aef:	83 f8 78             	cmp    eax,0x78
c0000af2:	74 3d                	je     c0000b31 <simple_strtoul+0x221>
c0000af4:	41                   	inc    ecx
c0000af5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000af9:	80 fa 30             	cmp    dl,0x30
c0000afc:	74 13                	je     c0000b11 <simple_strtoul+0x201>
c0000afe:	be 08 00 00 00       	mov    esi,0x8
c0000b03:	e9 69 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000b08:	80 fa 30             	cmp    dl,0x30
c0000b0b:	0f 85 60 fe ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000b11:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000b15:	41                   	inc    ecx
c0000b16:	eb e6                	jmp    c0000afe <simple_strtoul+0x1ee>
c0000b18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b1c:	85 d2                	test   edx,edx
c0000b1e:	74 0a                	je     c0000b2a <simple_strtoul+0x21a>
c0000b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b24:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b28:	89 30                	mov    DWORD PTR [eax],esi
c0000b2a:	31 ff                	xor    edi,edi
c0000b2c:	e9 e7 fe ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000b31:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b35:	83 c1 02             	add    ecx,0x2
c0000b38:	e9 21 ff ff ff       	jmp    c0000a5e <simple_strtoul+0x14e>
c0000b3d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b41:	be 10 00 00 00       	mov    esi,0x10
c0000b46:	83 c1 02             	add    ecx,0x2
c0000b49:	e9 23 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>

c0000b4e <largebin_index>:
c0000b4e:	89 c2                	mov    edx,eax
c0000b50:	c1 ea 08             	shr    edx,0x8
c0000b53:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b59:	77 10                	ja     c0000b6b <largebin_index+0x1d>
c0000b5b:	0f bd d2             	bsr    edx,edx
c0000b5e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b61:	d3 e8                	shr    eax,cl
c0000b63:	83 e0 03             	and    eax,0x3
c0000b66:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b6a:	c3                   	ret    
c0000b6b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b70:	c3                   	ret    

c0000b71 <malloc_init_state>:
c0000b71:	53                   	push   ebx
c0000b72:	8d 50 34             	lea    edx,[eax+0x34]
c0000b75:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b7b:	89 d1                	mov    ecx,edx
c0000b7d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b80:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b83:	83 c2 08             	add    edx,0x8
c0000b86:	39 da                	cmp    edx,ebx
c0000b88:	75 f3                	jne    c0000b7d <malloc_init_state+0xc>
c0000b8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b8c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b96:	83 e2 03             	and    edx,0x3
c0000b99:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ba3:	83 ca 48             	or     edx,0x48
c0000ba6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bba:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc1:	89 10                	mov    DWORD PTR [eax],edx
c0000bc3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bc6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd0:	5b                   	pop    ebx
c0000bd1:	c3                   	ret    

c0000bd2 <malloc_consolidate>:
c0000bd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bd4:	85 d2                	test   edx,edx
c0000bd6:	0f 84 d8 00 00 00    	je     c0000cb4 <malloc_consolidate+0xe2>
c0000bdc:	55                   	push   ebp
c0000bdd:	83 e2 fd             	and    edx,0xfffffffd
c0000be0:	57                   	push   edi
c0000be1:	89 c5                	mov    ebp,eax
c0000be3:	56                   	push   esi
c0000be4:	8d 78 34             	lea    edi,[eax+0x34]
c0000be7:	53                   	push   ebx
c0000be8:	83 ec 10             	sub    esp,0x10
c0000beb:	89 10                	mov    DWORD PTR [eax],edx
c0000bed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf1:	c1 ea 03             	shr    edx,0x3
c0000bf4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bf8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bfc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bff:	85 d2                	test   edx,edx
c0000c01:	0f 84 98 00 00 00    	je     c0000c9f <malloc_consolidate+0xcd>
c0000c07:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c0e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c11:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c18:	89 f9                	mov    ecx,edi
c0000c1a:	83 e1 fe             	and    ecx,0xfffffffe
c0000c1d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c20:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c23:	83 e3 fc             	and    ebx,0xfffffffc
c0000c26:	83 e7 01             	and    edi,0x1
c0000c29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c2c:	75 14                	jne    c0000c42 <malloc_consolidate+0x70>
c0000c2e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c30:	29 fa                	sub    edx,edi
c0000c32:	01 f9                	add    ecx,edi
c0000c34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c37:	89 fb                	mov    ebx,edi
c0000c39:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c3c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c3f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c42:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c45:	74 40                	je     c0000c87 <malloc_consolidate+0xb5>
c0000c47:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c4a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c4d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c51:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c54:	83 e7 01             	and    edi,0x1
c0000c57:	75 0e                	jne    c0000c67 <malloc_consolidate+0x95>
c0000c59:	01 d9                	add    ecx,ebx
c0000c5b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c5e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c61:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c64:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c67:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c6a:	89 ce                	mov    esi,ecx
c0000c6c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c6f:	83 ce 01             	or     esi,0x1
c0000c72:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c75:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c78:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c7b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c7f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c82:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c85:	eb 0c                	jmp    c0000c93 <malloc_consolidate+0xc1>
c0000c87:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c8a:	83 c9 01             	or     ecx,0x1
c0000c8d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c90:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c97:	85 d2                	test   edx,edx
c0000c99:	0f 85 6f ff ff ff    	jne    c0000c0e <malloc_consolidate+0x3c>
c0000c9f:	83 c5 04             	add    ebp,0x4
c0000ca2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ca6:	0f 85 50 ff ff ff    	jne    c0000bfc <malloc_consolidate+0x2a>
c0000cac:	83 c4 10             	add    esp,0x10
c0000caf:	5b                   	pop    ebx
c0000cb0:	5e                   	pop    esi
c0000cb1:	5f                   	pop    edi
c0000cb2:	5d                   	pop    ebp
c0000cb3:	c3                   	ret    
c0000cb4:	e9 b8 fe ff ff       	jmp    c0000b71 <malloc_init_state>

c0000cb9 <dlfree>:
c0000cb9:	57                   	push   edi
c0000cba:	56                   	push   esi
c0000cbb:	53                   	push   ebx
c0000cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc0:	85 db                	test   ebx,ebx
c0000cc2:	0f 84 e2 00 00 00    	je     c0000daa <dlfree+0xf1>
c0000cc8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000ccb:	8b 0d 80 fb 01 c0    	mov    ecx,DWORD PTR ds:0xc001fb80
c0000cd1:	89 f0                	mov    eax,esi
c0000cd3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cd6:	83 e0 fc             	and    eax,0xfffffffc
c0000cd9:	39 c1                	cmp    ecx,eax
c0000cdb:	72 24                	jb     c0000d01 <dlfree+0x48>
c0000cdd:	83 c9 03             	or     ecx,0x3
c0000ce0:	c1 e8 03             	shr    eax,0x3
c0000ce3:	89 0d 80 fb 01 c0    	mov    DWORD PTR ds:0xc001fb80,ecx
c0000ce9:	83 e8 02             	sub    eax,0x2
c0000cec:	8b 0c 85 84 fb 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe047c]
c0000cf3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cf5:	89 14 85 84 fb 01 c0 	mov    DWORD PTR [eax*4-0x3ffe047c],edx
c0000cfc:	e9 a9 00 00 00       	jmp    c0000daa <dlfree+0xf1>
c0000d01:	83 e6 02             	and    esi,0x2
c0000d04:	0f 85 a0 00 00 00    	jne    c0000daa <dlfree+0xf1>
c0000d0a:	83 c9 01             	or     ecx,0x1
c0000d0d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d10:	89 0d 80 fb 01 c0    	mov    DWORD PTR ds:0xc001fb80,ecx
c0000d16:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d19:	83 e1 fc             	and    ecx,0xfffffffc
c0000d1c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d20:	75 13                	jne    c0000d35 <dlfree+0x7c>
c0000d22:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d25:	29 da                	sub    edx,ebx
c0000d27:	01 d8                	add    eax,ebx
c0000d29:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d2f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d32:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d35:	39 35 ac fb 01 c0    	cmp    DWORD PTR ds:0xc001fbac,esi
c0000d3b:	74 40                	je     c0000d7d <dlfree+0xc4>
c0000d3d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d41:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d44:	80 e3 01             	and    bl,0x1
c0000d47:	75 0e                	jne    c0000d57 <dlfree+0x9e>
c0000d49:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d4c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d4f:	01 c8                	add    eax,ecx
c0000d51:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d54:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d57:	8b 0d bc fb 01 c0    	mov    ecx,DWORD PTR ds:0xc001fbbc
c0000d5d:	c7 42 0c b4 fb 01 c0 	mov    DWORD PTR [edx+0xc],0xc001fbb4
c0000d64:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d67:	89 15 bc fb 01 c0    	mov    DWORD PTR ds:0xc001fbbc,edx
c0000d6d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d70:	89 c1                	mov    ecx,eax
c0000d72:	83 c9 01             	or     ecx,0x1
c0000d75:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d78:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d7b:	eb 10                	jmp    c0000d8d <dlfree+0xd4>
c0000d7d:	01 c8                	add    eax,ecx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 15 ac fb 01 c0    	mov    DWORD PTR ds:0xc001fbac,edx
c0000d8d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d92:	76 16                	jbe    c0000daa <dlfree+0xf1>
c0000d94:	f6 05 80 fb 01 c0 02 	test   BYTE PTR ds:0xc001fb80,0x2
c0000d9b:	74 0d                	je     c0000daa <dlfree+0xf1>
c0000d9d:	5b                   	pop    ebx
c0000d9e:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c0000da3:	5e                   	pop    esi
c0000da4:	5f                   	pop    edi
c0000da5:	e9 28 fe ff ff       	jmp    c0000bd2 <malloc_consolidate>
c0000daa:	5b                   	pop    ebx
c0000dab:	5e                   	pop    esi
c0000dac:	5f                   	pop    edi
c0000dad:	c3                   	ret    

c0000dae <sYSMALLOc>:
c0000dae:	55                   	push   ebp
c0000daf:	57                   	push   edi
c0000db0:	56                   	push   esi
c0000db1:	53                   	push   ebx
c0000db2:	89 d3                	mov    ebx,edx
c0000db4:	83 ec 2c             	sub    esp,0x2c
c0000db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dbb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dc4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dcb:	74 1f                	je     c0000dec <sYSMALLOc+0x3e>
c0000dcd:	89 d8                	mov    eax,ebx
c0000dcf:	e8 fe fd ff ff       	call   c0000bd2 <malloc_consolidate>
c0000dd4:	83 ec 0c             	sub    esp,0xc
c0000dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ddb:	83 e8 07             	sub    eax,0x7
c0000dde:	50                   	push   eax
c0000ddf:	e8 30 02 00 00       	call   c0001014 <dlmalloc>
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	e9 20 02 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000dec:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000def:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000df5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000df8:	83 e0 fc             	and    eax,0xfffffffc
c0000dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e03:	83 c0 10             	add    eax,0x10
c0000e06:	01 c1                	add    ecx,eax
c0000e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e0c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e13:	74 04                	je     c0000e19 <sYSMALLOc+0x6b>
c0000e15:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e19:	f7 da                	neg    edx
c0000e1b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e23:	21 d1                	and    ecx,edx
c0000e25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e29:	7f 07                	jg     c0000e32 <sYSMALLOc+0x84>
c0000e2b:	31 c0                	xor    eax,eax
c0000e2d:	e9 da 01 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000e32:	83 ec 0c             	sub    esp,0xc
c0000e35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e39:	e8 ea 6e 00 00       	call   c0007d28 <sbrk>
c0000e3e:	83 c4 10             	add    esp,0x10
c0000e41:	89 c6                	mov    esi,eax
c0000e43:	83 f8 ff             	cmp    eax,0xffffffff
c0000e46:	74 e3                	je     c0000e2b <sYSMALLOc+0x7d>
c0000e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e4c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e50:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e53:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e59:	39 f1                	cmp    ecx,esi
c0000e5b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e61:	75 13                	jne    c0000e76 <sYSMALLOc+0xc8>
c0000e63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e67:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e6b:	83 c8 01             	or     eax,0x1
c0000e6e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e71:	e9 3e 01 00 00       	jmp    c0000fb4 <sYSMALLOc+0x206>
c0000e76:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e7c:	88 d0                	mov    al,dl
c0000e7e:	83 e0 01             	and    eax,0x1
c0000e81:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e8a:	0f 95 c0             	setne  al
c0000e8d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e91:	39 f1                	cmp    ecx,esi
c0000e93:	76 12                	jbe    c0000ea7 <sYSMALLOc+0xf9>
c0000e95:	84 c0                	test   al,al
c0000e97:	74 0e                	je     c0000ea7 <sYSMALLOc+0xf9>
c0000e99:	83 e2 fe             	and    edx,0xfffffffe
c0000e9c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea2:	e9 83 00 00 00       	jmp    c0000f2a <sYSMALLOc+0x17c>
c0000ea7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eac:	74 7c                	je     c0000f2a <sYSMALLOc+0x17c>
c0000eae:	84 c0                	test   al,al
c0000eb0:	74 0c                	je     c0000ebe <sYSMALLOc+0x110>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	29 c8                	sub    eax,ecx
c0000eb6:	01 e8                	add    eax,ebp
c0000eb8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ebe:	89 f2                	mov    edx,esi
c0000ec0:	83 e2 07             	and    edx,0x7
c0000ec3:	74 0c                	je     c0000ed1 <sYSMALLOc+0x123>
c0000ec5:	b8 08 00 00 00       	mov    eax,0x8
c0000eca:	29 d0                	sub    eax,edx
c0000ecc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ecf:	eb 04                	jmp    c0000ed5 <sYSMALLOc+0x127>
c0000ed1:	89 f5                	mov    ebp,esi
c0000ed3:	31 c0                	xor    eax,eax
c0000ed5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ed9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000edd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	83 ec 0c             	sub    esp,0xc
c0000ee6:	01 f1                	add    ecx,esi
c0000ee8:	01 ca                	add    edx,ecx
c0000eea:	29 c8                	sub    eax,ecx
c0000eec:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef0:	01 c2                	add    edx,eax
c0000ef2:	52                   	push   edx
c0000ef3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ef7:	e8 2c 6e 00 00       	call   c0007d28 <sbrk>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	83 f8 ff             	cmp    eax,0xffffffff
c0000f02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f06:	75 0f                	jne    c0000f17 <sYSMALLOc+0x169>
c0000f08:	83 ec 0c             	sub    esp,0xc
c0000f0b:	6a 00                	push   0x0
c0000f0d:	e8 16 6e 00 00       	call   c0007d28 <sbrk>
c0000f12:	83 c4 10             	add    esp,0x10
c0000f15:	eb 30                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f17:	39 c6                	cmp    esi,eax
c0000f19:	76 33                	jbe    c0000f4e <sYSMALLOc+0x1a0>
c0000f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f1f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f26:	01 f0                	add    eax,esi
c0000f28:	eb 1d                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f2a:	83 ec 0c             	sub    esp,0xc
c0000f2d:	89 f5                	mov    ebp,esi
c0000f2f:	6a 00                	push   0x0
c0000f31:	e8 f2 6d 00 00       	call   c0007d28 <sbrk>
c0000f36:	89 c2                	mov    edx,eax
c0000f38:	29 f2                	sub    edx,esi
c0000f3a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f3e:	83 c4 10             	add    esp,0x10
c0000f41:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f47:	31 d2                	xor    edx,edx
c0000f49:	83 f8 ff             	cmp    eax,0xffffffff
c0000f4c:	74 66                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f4e:	29 e8                	sub    eax,ebp
c0000f50:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f53:	01 d0                	add    eax,edx
c0000f55:	83 c8 01             	or     eax,0x1
c0000f58:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f5b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f66:	74 4c                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f6c:	83 e8 0c             	sub    eax,0xc
c0000f6f:	83 e0 f8             	and    eax,0xfffffff8
c0000f72:	89 c2                	mov    edx,eax
c0000f74:	83 ca 01             	or     edx,0x1
c0000f77:	83 f8 0f             	cmp    eax,0xf
c0000f7a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f7d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f85:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f8d:	76 25                	jbe    c0000fb4 <sYSMALLOc+0x206>
c0000f8f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f95:	83 ec 0c             	sub    esp,0xc
c0000f98:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa2:	83 c7 08             	add    edi,0x8
c0000fa5:	57                   	push   edi
c0000fa6:	e8 0e fd ff ff       	call   c0000cb9 <dlfree>
c0000fab:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb1:	83 c4 10             	add    esp,0x10
c0000fb4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fba:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc0:	73 06                	jae    c0000fc8 <sYSMALLOc+0x21a>
c0000fc2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fc8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fce:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fd4:	73 06                	jae    c0000fdc <sYSMALLOc+0x22e>
c0000fd6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fdc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fdf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe2:	83 e2 fc             	and    edx,0xfffffffc
c0000fe5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fe9:	0f 82 3c fe ff ff    	jb     c0000e2b <sYSMALLOc+0x7d>
c0000fef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ff3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ff6:	29 fa                	sub    edx,edi
c0000ff8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ffb:	83 ca 01             	or     edx,0x1
c0000ffe:	89 fb                	mov    ebx,edi
c0001000:	83 c0 08             	add    eax,0x8
c0001003:	83 cb 01             	or     ebx,0x1
c0001006:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001009:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000100c:	83 c4 2c             	add    esp,0x2c
c000100f:	5b                   	pop    ebx
c0001010:	5e                   	pop    esi
c0001011:	5f                   	pop    edi
c0001012:	5d                   	pop    ebp
c0001013:	c3                   	ret    

c0001014 <dlmalloc>:
c0001014:	55                   	push   ebp
c0001015:	57                   	push   edi
c0001016:	56                   	push   esi
c0001017:	53                   	push   ebx
c0001018:	83 ec 1c             	sub    esp,0x1c
c000101b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000101f:	83 f8 df             	cmp    eax,0xffffffdf
c0001022:	0f 87 70 03 00 00    	ja     c0001398 <dlmalloc+0x384>
c0001028:	83 c0 0b             	add    eax,0xb
c000102b:	be 10 00 00 00       	mov    esi,0x10
c0001030:	83 f8 0f             	cmp    eax,0xf
c0001033:	76 05                	jbe    c000103a <dlmalloc+0x26>
c0001035:	83 e0 f8             	and    eax,0xfffffff8
c0001038:	89 c6                	mov    esi,eax
c000103a:	8b 3d 80 fb 01 c0    	mov    edi,DWORD PTR ds:0xc001fb80
c0001040:	f7 c7 01 00 00 00    	test   edi,0x1
c0001046:	75 17                	jne    c000105f <dlmalloc+0x4b>
c0001048:	85 ff                	test   edi,edi
c000104a:	0f 85 05 03 00 00    	jne    c0001355 <dlmalloc+0x341>
c0001050:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c0001055:	e8 78 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c000105a:	e9 f6 02 00 00       	jmp    c0001355 <dlmalloc+0x341>
c000105f:	39 f7                	cmp    edi,esi
c0001061:	72 1f                	jb     c0001082 <dlmalloc+0x6e>
c0001063:	89 f2                	mov    edx,esi
c0001065:	c1 ea 03             	shr    edx,0x3
c0001068:	83 ea 02             	sub    edx,0x2
c000106b:	8b 04 95 84 fb 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe047c]
c0001072:	85 c0                	test   eax,eax
c0001074:	74 0c                	je     c0001082 <dlmalloc+0x6e>
c0001076:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001079:	89 0c 95 84 fb 01 c0 	mov    DWORD PTR [edx*4-0x3ffe047c],ecx
c0001080:	eb 30                	jmp    c00010b2 <dlmalloc+0x9e>
c0001082:	89 f0                	mov    eax,esi
c0001084:	81 fe ff 00 00 00    	cmp    esi,0xff
c000108a:	77 2e                	ja     c00010ba <dlmalloc+0xa6>
c000108c:	c1 e8 03             	shr    eax,0x3
c000108f:	8d 14 c5 b4 fb 01 c0 	lea    edx,[eax*8-0x3ffe044c]
c0001096:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000109a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000109d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a0:	39 c3                	cmp    ebx,eax
c00010a2:	74 2e                	je     c00010d2 <dlmalloc+0xbe>
c00010a4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010a7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010ac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010af:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b2:	83 c0 08             	add    eax,0x8
c00010b5:	e9 e0 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c00010ba:	e8 8f fa ff ff       	call   c0000b4e <largebin_index>
c00010bf:	83 e7 02             	and    edi,0x2
c00010c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010c6:	74 0a                	je     c00010d2 <dlmalloc+0xbe>
c00010c8:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c00010cd:	e8 00 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c00010d2:	8d 46 10             	lea    eax,[esi+0x10]
c00010d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010d9:	8b 1d c0 fb 01 c0    	mov    ebx,DWORD PTR ds:0xc001fbc0
c00010df:	81 fb b4 fb 01 c0    	cmp    ebx,0xc001fbb4
c00010e5:	0f 84 13 01 00 00    	je     c00011fe <dlmalloc+0x1ea>
c00010eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f1:	83 e7 fc             	and    edi,0xfffffffc
c00010f4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010fa:	77 4c                	ja     c0001148 <dlmalloc+0x134>
c00010fc:	3d b4 fb 01 c0       	cmp    eax,0xc001fbb4
c0001101:	75 45                	jne    c0001148 <dlmalloc+0x134>
c0001103:	39 1d b0 fb 01 c0    	cmp    DWORD PTR ds:0xc001fbb0,ebx
c0001109:	75 3d                	jne    c0001148 <dlmalloc+0x134>
c000110b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000110f:	73 37                	jae    c0001148 <dlmalloc+0x134>
c0001111:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001114:	89 fa                	mov    edx,edi
c0001116:	a3 bc fb 01 c0       	mov    ds:0xc001fbbc,eax
c000111b:	a3 c0 fb 01 c0       	mov    ds:0xc001fbc0,eax
c0001120:	a3 b0 fb 01 c0       	mov    ds:0xc001fbb0,eax
c0001125:	29 f2                	sub    edx,esi
c0001127:	c7 40 08 b4 fb 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fbb4
c000112e:	c7 40 0c b4 fb 01 c0 	mov    DWORD PTR [eax+0xc],0xc001fbb4
c0001135:	83 ce 01             	or     esi,0x1
c0001138:	89 d1                	mov    ecx,edx
c000113a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000113d:	83 c9 01             	or     ecx,0x1
c0001140:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001143:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001146:	eb 15                	jmp    c000115d <dlmalloc+0x149>
c0001148:	a3 c0 fb 01 c0       	mov    ds:0xc001fbc0,eax
c000114d:	39 fe                	cmp    esi,edi
c000114f:	c7 40 08 b4 fb 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fbb4
c0001156:	75 0d                	jne    c0001165 <dlmalloc+0x151>
c0001158:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000115d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001160:	e9 35 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001165:	89 f8                	mov    eax,edi
c0001167:	81 ff ff 00 00 00    	cmp    edi,0xff
c000116d:	77 19                	ja     c0001188 <dlmalloc+0x174>
c000116f:	c1 e8 03             	shr    eax,0x3
c0001172:	8d 14 00             	lea    edx,[eax+eax*1]
c0001175:	83 c2 0d             	add    edx,0xd
c0001178:	8d 2c 95 78 fb 01 c0 	lea    ebp,[edx*4-0x3ffe0488]
c000117f:	8b 14 95 80 fb 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0480]
c0001186:	eb 46                	jmp    c00011ce <dlmalloc+0x1ba>
c0001188:	e8 c1 f9 ff ff       	call   c0000b4e <largebin_index>
c000118d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001190:	83 c2 0d             	add    edx,0xd
c0001193:	8d 0c 95 80 fb 01 c0 	lea    ecx,[edx*4-0x3ffe0480]
c000119a:	8b 14 95 80 fb 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0480]
c00011a1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011a4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011a8:	89 d5                	mov    ebp,edx
c00011aa:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011ae:	74 1e                	je     c00011ce <dlmalloc+0x1ba>
c00011b0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011b3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011b6:	77 12                	ja     c00011ca <dlmalloc+0x1b6>
c00011b8:	83 cf 01             	or     edi,0x1
c00011bb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011be:	76 05                	jbe    c00011c5 <dlmalloc+0x1b1>
c00011c0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011c3:	eb f6                	jmp    c00011bb <dlmalloc+0x1a7>
c00011c5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011c8:	eb 04                	jmp    c00011ce <dlmalloc+0x1ba>
c00011ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ce:	89 c7                	mov    edi,eax
c00011d0:	88 c1                	mov    cl,al
c00011d2:	c1 ff 05             	sar    edi,0x5
c00011d5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011d9:	bf 01 00 00 00       	mov    edi,0x1
c00011de:	d3 e7                	shl    edi,cl
c00011e0:	89 f8                	mov    eax,edi
c00011e2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011e6:	09 04 bd b4 fe 01 c0 	or     DWORD PTR [edi*4-0x3ffe014c],eax
c00011ed:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011f3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011f6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011f9:	e9 db fe ff ff       	jmp    c00010d9 <dlmalloc+0xc5>
c00011fe:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001204:	76 78                	jbe    c000127e <dlmalloc+0x26a>
c0001206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000120a:	8d 04 c5 b4 fb 01 c0 	lea    eax,[eax*8-0x3ffe044c]
c0001211:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001214:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001217:	39 ca                	cmp    edx,ecx
c0001219:	74 63                	je     c000127e <dlmalloc+0x26a>
c000121b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000121e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001221:	83 e3 fc             	and    ebx,0xfffffffc
c0001224:	39 de                	cmp    esi,ebx
c0001226:	77 52                	ja     c000127a <dlmalloc+0x266>
c0001228:	89 df                	mov    edi,ebx
c000122a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000122d:	29 f7                	sub    edi,esi
c000122f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001232:	01 d3                	add    ebx,edx
c0001234:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001237:	83 ff 0f             	cmp    edi,0xf
c000123a:	8d 42 08             	lea    eax,[edx+0x8]
c000123d:	77 09                	ja     c0001248 <dlmalloc+0x234>
c000123f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001243:	e9 52 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001248:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000124b:	83 ce 01             	or     esi,0x1
c000124e:	89 0d bc fb 01 c0    	mov    DWORD PTR ds:0xc001fbbc,ecx
c0001254:	89 0d c0 fb 01 c0    	mov    DWORD PTR ds:0xc001fbc0,ecx
c000125a:	c7 41 08 b4 fb 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001fbb4
c0001261:	c7 41 0c b4 fb 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001fbb4
c0001268:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000126b:	89 fa                	mov    edx,edi
c000126d:	83 ca 01             	or     edx,0x1
c0001270:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001273:	89 3b                	mov    DWORD PTR [ebx],edi
c0001275:	e9 20 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c000127a:	89 c2                	mov    edx,eax
c000127c:	eb 99                	jmp    c0001217 <dlmalloc+0x203>
c000127e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001282:	b8 01 00 00 00       	mov    eax,0x1
c0001287:	41                   	inc    ecx
c0001288:	89 cb                	mov    ebx,ecx
c000128a:	8d 14 cd ac fb 01 c0 	lea    edx,[ecx*8-0x3ffe0454]
c0001291:	c1 eb 05             	shr    ebx,0x5
c0001294:	d3 e0                	shl    eax,cl
c0001296:	8b 3c 9d b4 fe 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe014c]
c000129d:	39 f8                	cmp    eax,edi
c000129f:	77 04                	ja     c00012a5 <dlmalloc+0x291>
c00012a1:	85 c0                	test   eax,eax
c00012a3:	75 26                	jne    c00012cb <dlmalloc+0x2b7>
c00012a5:	43                   	inc    ebx
c00012a6:	83 fb 02             	cmp    ebx,0x2
c00012a9:	0f 87 a6 00 00 00    	ja     c0001355 <dlmalloc+0x341>
c00012af:	8b 3c 9d b4 fe 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe014c]
c00012b6:	85 ff                	test   edi,edi
c00012b8:	74 eb                	je     c00012a5 <dlmalloc+0x291>
c00012ba:	89 d8                	mov    eax,ebx
c00012bc:	c1 e0 06             	shl    eax,0x6
c00012bf:	8d 14 85 ac fb 01 c0 	lea    edx,[eax*4-0x3ffe0454]
c00012c6:	b8 01 00 00 00       	mov    eax,0x1
c00012cb:	85 f8                	test   eax,edi
c00012cd:	75 07                	jne    c00012d6 <dlmalloc+0x2c2>
c00012cf:	83 c2 08             	add    edx,0x8
c00012d2:	01 c0                	add    eax,eax
c00012d4:	eb f5                	jmp    c00012cb <dlmalloc+0x2b7>
c00012d6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012d9:	39 ca                	cmp    edx,ecx
c00012db:	75 14                	jne    c00012f1 <dlmalloc+0x2dd>
c00012dd:	89 c1                	mov    ecx,eax
c00012df:	83 c2 08             	add    edx,0x8
c00012e2:	f7 d1                	not    ecx
c00012e4:	01 c0                	add    eax,eax
c00012e6:	21 cf                	and    edi,ecx
c00012e8:	89 3c 9d b4 fe 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe014c],edi
c00012ef:	eb ac                	jmp    c000129d <dlmalloc+0x289>
c00012f1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012f4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012f7:	83 e0 fc             	and    eax,0xfffffffc
c00012fa:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012fd:	89 c3                	mov    ebx,eax
c00012ff:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001302:	29 f3                	sub    ebx,esi
c0001304:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001307:	83 fb 0f             	cmp    ebx,0xf
c000130a:	8d 41 08             	lea    eax,[ecx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x304>
c000130f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001313:	e9 82 00 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001318:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000131b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001321:	89 3d bc fb 01 c0    	mov    DWORD PTR ds:0xc001fbbc,edi
c0001327:	89 3d c0 fb 01 c0    	mov    DWORD PTR ds:0xc001fbc0,edi
c000132d:	c7 47 08 b4 fb 01 c0 	mov    DWORD PTR [edi+0x8],0xc001fbb4
c0001334:	c7 47 0c b4 fb 01 c0 	mov    DWORD PTR [edi+0xc],0xc001fbb4
c000133b:	77 06                	ja     c0001343 <dlmalloc+0x32f>
c000133d:	89 3d b0 fb 01 c0    	mov    DWORD PTR ds:0xc001fbb0,edi
c0001343:	83 ce 01             	or     esi,0x1
c0001346:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001349:	89 d9                	mov    ecx,ebx
c000134b:	83 c9 01             	or     ecx,0x1
c000134e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001351:	89 1a                	mov    DWORD PTR [edx],ebx
c0001353:	eb 45                	jmp    c000139a <dlmalloc+0x386>
c0001355:	a1 ac fb 01 c0       	mov    eax,ds:0xc001fbac
c000135a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000135d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001360:	83 e2 fc             	and    edx,0xfffffffc
c0001363:	39 d1                	cmp    ecx,edx
c0001365:	77 1e                	ja     c0001385 <dlmalloc+0x371>
c0001367:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000136a:	89 f3                	mov    ebx,esi
c000136c:	89 0d ac fb 01 c0    	mov    DWORD PTR ds:0xc001fbac,ecx
c0001372:	83 cb 01             	or     ebx,0x1
c0001375:	29 f2                	sub    edx,esi
c0001377:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000137a:	83 ca 01             	or     edx,0x1
c000137d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001380:	e9 2d fd ff ff       	jmp    c00010b2 <dlmalloc+0x9e>
c0001385:	83 c4 1c             	add    esp,0x1c
c0001388:	89 f0                	mov    eax,esi
c000138a:	5b                   	pop    ebx
c000138b:	ba 80 fb 01 c0       	mov    edx,0xc001fb80
c0001390:	5e                   	pop    esi
c0001391:	5f                   	pop    edi
c0001392:	5d                   	pop    ebp
c0001393:	e9 16 fa ff ff       	jmp    c0000dae <sYSMALLOc>
c0001398:	31 c0                	xor    eax,eax
c000139a:	83 c4 1c             	add    esp,0x1c
c000139d:	5b                   	pop    ebx
c000139e:	5e                   	pop    esi
c000139f:	5f                   	pop    edi
c00013a0:	5d                   	pop    ebp
c00013a1:	c3                   	ret    

c00013a2 <iALLOc>:
c00013a2:	55                   	push   ebp
c00013a3:	89 c5                	mov    ebp,eax
c00013a5:	57                   	push   edi
c00013a6:	56                   	push   esi
c00013a7:	53                   	push   ebx
c00013a8:	83 ec 2c             	sub    esp,0x2c
c00013ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013af:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013b7:	83 3d 80 fb 01 c0 00 	cmp    DWORD PTR ds:0xc001fb80,0x0
c00013be:	75 12                	jne    c00013d2 <iALLOc+0x30>
c00013c0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013c4:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c00013c9:	e8 04 f8 ff ff       	call   c0000bd2 <malloc_consolidate>
c00013ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d7:	74 12                	je     c00013eb <iALLOc+0x49>
c00013d9:	85 ed                	test   ebp,ebp
c00013db:	0f 84 64 01 00 00    	je     c0001545 <iALLOc+0x1a3>
c00013e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013e9:	eb 33                	jmp    c000141e <iALLOc+0x7c>
c00013eb:	85 ed                	test   ebp,ebp
c00013ed:	75 14                	jne    c0001403 <iALLOc+0x61>
c00013ef:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013f7:	83 c4 2c             	add    esp,0x2c
c00013fa:	5b                   	pop    ebx
c00013fb:	5e                   	pop    esi
c00013fc:	5f                   	pop    edi
c00013fd:	5d                   	pop    ebp
c00013fe:	e9 11 fc ff ff       	jmp    c0001014 <dlmalloc>
c0001403:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000140a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001412:	83 f8 0f             	cmp    eax,0xf
c0001415:	76 07                	jbe    c000141e <iALLOc+0x7c>
c0001417:	83 e0 f8             	and    eax,0xfffffff8
c000141a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000141e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001423:	75 09                	jne    c000142e <iALLOc+0x8c>
c0001425:	89 d0                	mov    eax,edx
c0001427:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000142a:	31 f6                	xor    esi,esi
c000142c:	eb 3b                	jmp    c0001469 <iALLOc+0xc7>
c000142e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001430:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001438:	83 c0 0b             	add    eax,0xb
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 07                	jbe    c0001447 <iALLOc+0xa5>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000144b:	0f af f5             	imul   esi,ebp
c000144e:	eb 25                	jmp    c0001475 <iALLOc+0xd3>
c0001450:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001452:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001455:	bb 10 00 00 00       	mov    ebx,0x10
c000145a:	83 f9 0f             	cmp    ecx,0xf
c000145d:	76 05                	jbe    c0001464 <iALLOc+0xc2>
c000145f:	83 e1 f8             	and    ecx,0xfffffff8
c0001462:	89 cb                	mov    ebx,ecx
c0001464:	01 de                	add    esi,ebx
c0001466:	83 c0 04             	add    eax,0x4
c0001469:	39 c7                	cmp    edi,eax
c000146b:	75 e3                	jne    c0001450 <iALLOc+0xae>
c000146d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001479:	8b 1d d4 fe 01 c0    	mov    ebx,DWORD PTR ds:0xc001fed4
c000147f:	83 ec 0c             	sub    esp,0xc
c0001482:	c7 05 d4 fe 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fed4,0x0
c000148c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001490:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001494:	50                   	push   eax
c0001495:	e8 7a fb ff ff       	call   c0001014 <dlmalloc>
c000149a:	83 c4 10             	add    esp,0x10
c000149d:	89 1d d4 fe 01 c0    	mov    DWORD PTR ds:0xc001fed4,ebx
c00014a3:	85 c0                	test   eax,eax
c00014a5:	0f 84 92 00 00 00    	je     c000153d <iALLOc+0x19b>
c00014ab:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014ae:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b1:	83 e3 fc             	and    ebx,0xfffffffc
c00014b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014b8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014bd:	74 1e                	je     c00014dd <iALLOc+0x13b>
c00014bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014c3:	89 d9                	mov    ecx,ebx
c00014c5:	52                   	push   edx
c00014c6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014ca:	83 e9 04             	sub    ecx,0x4
c00014cd:	51                   	push   ecx
c00014ce:	6a 00                	push   0x0
c00014d0:	50                   	push   eax
c00014d1:	e8 1a f0 ff ff       	call   c00004f0 <memset>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	75 14                	jne    c00014f8 <iALLOc+0x156>
c00014e4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014e7:	29 f3                	sub    ebx,esi
c00014e9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014ec:	83 cb 01             	or     ebx,0x1
c00014ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014f3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014f6:	89 f3                	mov    ebx,esi
c00014f8:	31 c0                	xor    eax,eax
c00014fa:	4d                   	dec    ebp
c00014fb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001502:	39 c5                	cmp    ebp,eax
c0001504:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001507:	74 2c                	je     c0001535 <iALLOc+0x193>
c0001509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000150d:	85 c9                	test   ecx,ecx
c000150f:	75 15                	jne    c0001526 <iALLOc+0x184>
c0001511:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001514:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001517:	b9 10 00 00 00       	mov    ecx,0x10
c000151c:	83 fe 0f             	cmp    esi,0xf
c000151f:	76 05                	jbe    c0001526 <iALLOc+0x184>
c0001521:	83 e6 f8             	and    esi,0xfffffff8
c0001524:	89 f1                	mov    ecx,esi
c0001526:	89 ce                	mov    esi,ecx
c0001528:	29 cb                	sub    ebx,ecx
c000152a:	83 ce 01             	or     esi,0x1
c000152d:	40                   	inc    eax
c000152e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001531:	01 cf                	add    edi,ecx
c0001533:	eb c6                	jmp    c00014fb <iALLOc+0x159>
c0001535:	83 cb 01             	or     ebx,0x1
c0001538:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000153b:	eb 08                	jmp    c0001545 <iALLOc+0x1a3>
c000153d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001545:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001549:	83 c4 2c             	add    esp,0x2c
c000154c:	5b                   	pop    ebx
c000154d:	5e                   	pop    esi
c000154e:	5f                   	pop    edi
c000154f:	5d                   	pop    ebp
c0001550:	c3                   	ret    

c0001551 <dlrealloc>:
c0001551:	55                   	push   ebp
c0001552:	57                   	push   edi
c0001553:	56                   	push   esi
c0001554:	53                   	push   ebx
c0001555:	83 ec 1c             	sub    esp,0x1c
c0001558:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000155c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001560:	85 db                	test   ebx,ebx
c0001562:	75 10                	jne    c0001574 <dlrealloc+0x23>
c0001564:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001568:	83 c4 1c             	add    esp,0x1c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	e9 a0 fa ff ff       	jmp    c0001014 <dlmalloc>
c0001574:	83 f8 df             	cmp    eax,0xffffffdf
c0001577:	76 07                	jbe    c0001580 <dlrealloc+0x2f>
c0001579:	31 db                	xor    ebx,ebx
c000157b:	e9 6a 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c0001580:	83 c0 0b             	add    eax,0xb
c0001583:	bd 10 00 00 00       	mov    ebp,0x10
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 05                	jbe    c0001592 <dlrealloc+0x41>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 c5                	mov    ebp,eax
c0001592:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001595:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001598:	89 c6                	mov    esi,eax
c000159a:	83 e6 fc             	and    esi,0xfffffffc
c000159d:	a8 02                	test   al,0x2
c000159f:	75 d8                	jne    c0001579 <dlrealloc+0x28>
c00015a1:	39 f5                	cmp    ebp,esi
c00015a3:	0f 86 04 01 00 00    	jbe    c00016ad <dlrealloc+0x15c>
c00015a9:	8d 14 37             	lea    edx,[edi+esi*1]
c00015ac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015af:	39 15 ac fb 01 c0    	cmp    DWORD PTR ds:0xc001fbac,edx
c00015b5:	75 33                	jne    c00015ea <dlrealloc+0x99>
c00015b7:	83 e1 fc             	and    ecx,0xfffffffc
c00015ba:	01 f1                	add    ecx,esi
c00015bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015c3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015c7:	77 49                	ja     c0001612 <dlrealloc+0xc1>
c00015c9:	01 ef                	add    edi,ebp
c00015cb:	83 e0 01             	and    eax,0x1
c00015ce:	09 e8                	or     eax,ebp
c00015d0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015d3:	89 3d ac fb 01 c0    	mov    DWORD PTR ds:0xc001fbac,edi
c00015d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015dd:	29 e8                	sub    eax,ebp
c00015df:	83 c8 01             	or     eax,0x1
c00015e2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015e5:	e9 00 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c00015ea:	89 c8                	mov    eax,ecx
c00015ec:	83 e0 fe             	and    eax,0xfffffffe
c00015ef:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015f4:	75 1c                	jne    c0001612 <dlrealloc+0xc1>
c00015f6:	83 e1 fc             	and    ecx,0xfffffffc
c00015f9:	01 f1                	add    ecx,esi
c00015fb:	39 cd                	cmp    ebp,ecx
c00015fd:	77 13                	ja     c0001612 <dlrealloc+0xc1>
c00015ff:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001602:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001605:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001608:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000160b:	89 ce                	mov    esi,ecx
c000160d:	e9 9b 00 00 00       	jmp    c00016ad <dlrealloc+0x15c>
c0001612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001616:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001619:	83 ec 0c             	sub    esp,0xc
c000161c:	50                   	push   eax
c000161d:	e8 f2 f9 ff ff       	call   c0001014 <dlmalloc>
c0001622:	83 c4 10             	add    esp,0x10
c0001625:	85 c0                	test   eax,eax
c0001627:	0f 84 4c ff ff ff    	je     c0001579 <dlrealloc+0x28>
c000162d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001634:	39 ca                	cmp    edx,ecx
c0001636:	75 0a                	jne    c0001642 <dlrealloc+0xf1>
c0001638:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000163b:	83 e0 fc             	and    eax,0xfffffffc
c000163e:	01 c6                	add    esi,eax
c0001640:	eb 6b                	jmp    c00016ad <dlrealloc+0x15c>
c0001642:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001645:	83 f9 27             	cmp    ecx,0x27
c0001648:	76 08                	jbe    c0001652 <dlrealloc+0x101>
c000164a:	89 de                	mov    esi,ebx
c000164c:	89 c7                	mov    edi,eax
c000164e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001650:	eb 43                	jmp    c0001695 <dlrealloc+0x144>
c0001652:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001654:	83 f9 13             	cmp    ecx,0x13
c0001657:	89 10                	mov    DWORD PTR [eax],edx
c0001659:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000165c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000165f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001665:	76 2e                	jbe    c0001695 <dlrealloc+0x144>
c0001667:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000166a:	83 f9 1b             	cmp    ecx,0x1b
c000166d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001670:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001673:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001676:	76 1d                	jbe    c0001695 <dlrealloc+0x144>
c0001678:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000167b:	83 f9 23             	cmp    ecx,0x23
c000167e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001681:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001684:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001687:	76 0c                	jbe    c0001695 <dlrealloc+0x144>
c0001689:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000168c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000168f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001692:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001699:	83 ec 0c             	sub    esp,0xc
c000169c:	53                   	push   ebx
c000169d:	e8 17 f6 ff ff       	call   c0000cb9 <dlfree>
c00016a2:	83 c4 10             	add    esp,0x10
c00016a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a9:	89 c3                	mov    ebx,eax
c00016ab:	eb 3d                	jmp    c00016ea <dlrealloc+0x199>
c00016ad:	89 f2                	mov    edx,esi
c00016af:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b2:	29 ea                	sub    edx,ebp
c00016b4:	83 e1 01             	and    ecx,0x1
c00016b7:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ba:	83 fa 0f             	cmp    edx,0xf
c00016bd:	77 0b                	ja     c00016ca <dlrealloc+0x179>
c00016bf:	09 ce                	or     esi,ecx
c00016c1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016c4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c8:	eb 20                	jmp    c00016ea <dlrealloc+0x199>
c00016ca:	01 ef                	add    edi,ebp
c00016cc:	83 ec 0c             	sub    esp,0xc
c00016cf:	09 cd                	or     ebp,ecx
c00016d1:	83 ca 01             	or     edx,0x1
c00016d4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016d7:	83 c7 08             	add    edi,0x8
c00016da:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016dd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e1:	57                   	push   edi
c00016e2:	e8 d2 f5 ff ff       	call   c0000cb9 <dlfree>
c00016e7:	83 c4 10             	add    esp,0x10
c00016ea:	83 c4 1c             	add    esp,0x1c
c00016ed:	89 d8                	mov    eax,ebx
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	c3                   	ret    

c00016f4 <dlmemalign>:
c00016f4:	55                   	push   ebp
c00016f5:	57                   	push   edi
c00016f6:	56                   	push   esi
c00016f7:	53                   	push   ebx
c00016f8:	83 ec 0c             	sub    esp,0xc
c00016fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001703:	83 fa 08             	cmp    edx,0x8
c0001706:	77 10                	ja     c0001718 <dlmemalign+0x24>
c0001708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000170c:	83 c4 0c             	add    esp,0xc
c000170f:	5b                   	pop    ebx
c0001710:	5e                   	pop    esi
c0001711:	5f                   	pop    edi
c0001712:	5d                   	pop    ebp
c0001713:	e9 fc f8 ff ff       	jmp    c0001014 <dlmalloc>
c0001718:	bf 10 00 00 00       	mov    edi,0x10
c000171d:	83 fa 0f             	cmp    edx,0xf
c0001720:	76 13                	jbe    c0001735 <dlmemalign+0x41>
c0001722:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001725:	85 d1                	test   ecx,edx
c0001727:	75 04                	jne    c000172d <dlmemalign+0x39>
c0001729:	89 d7                	mov    edi,edx
c000172b:	eb 08                	jmp    c0001735 <dlmemalign+0x41>
c000172d:	39 d7                	cmp    edi,edx
c000172f:	73 04                	jae    c0001735 <dlmemalign+0x41>
c0001731:	01 ff                	add    edi,edi
c0001733:	eb f8                	jmp    c000172d <dlmemalign+0x39>
c0001735:	83 f8 df             	cmp    eax,0xffffffdf
c0001738:	76 07                	jbe    c0001741 <dlmemalign+0x4d>
c000173a:	31 c0                	xor    eax,eax
c000173c:	e9 ce 00 00 00       	jmp    c000180f <dlmemalign+0x11b>
c0001741:	83 c0 0b             	add    eax,0xb
c0001744:	bd 10 00 00 00       	mov    ebp,0x10
c0001749:	83 f8 0f             	cmp    eax,0xf
c000174c:	76 05                	jbe    c0001753 <dlmemalign+0x5f>
c000174e:	83 e0 f8             	and    eax,0xfffffff8
c0001751:	89 c5                	mov    ebp,eax
c0001753:	83 ec 0c             	sub    esp,0xc
c0001756:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000175a:	50                   	push   eax
c000175b:	e8 b4 f8 ff ff       	call   c0001014 <dlmalloc>
c0001760:	83 c4 10             	add    esp,0x10
c0001763:	89 c1                	mov    ecx,eax
c0001765:	85 c0                	test   eax,eax
c0001767:	74 d1                	je     c000173a <dlmemalign+0x46>
c0001769:	31 d2                	xor    edx,edx
c000176b:	8d 70 f8             	lea    esi,[eax-0x8]
c000176e:	f7 f7                	div    edi
c0001770:	85 d2                	test   edx,edx
c0001772:	74 62                	je     c00017d6 <dlmemalign+0xe2>
c0001774:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001778:	89 f8                	mov    eax,edi
c000177a:	f7 d8                	neg    eax
c000177c:	21 c3                	and    ebx,eax
c000177e:	83 eb 08             	sub    ebx,0x8
c0001781:	89 d8                	mov    eax,ebx
c0001783:	29 f0                	sub    eax,esi
c0001785:	83 f8 0f             	cmp    eax,0xf
c0001788:	77 02                	ja     c000178c <dlmemalign+0x98>
c000178a:	01 fb                	add    ebx,edi
c000178c:	89 d8                	mov    eax,ebx
c000178e:	29 f0                	sub    eax,esi
c0001790:	89 c6                	mov    esi,eax
c0001792:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001795:	89 c2                	mov    edx,eax
c0001797:	83 e2 fc             	and    edx,0xfffffffc
c000179a:	29 f2                	sub    edx,esi
c000179c:	a8 02                	test   al,0x2
c000179e:	74 10                	je     c00017b0 <dlmemalign+0xbc>
c00017a0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017a3:	83 ca 02             	or     edx,0x2
c00017a6:	8d 43 08             	lea    eax,[ebx+0x8]
c00017a9:	89 33                	mov    DWORD PTR [ebx],esi
c00017ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017ae:	eb 5f                	jmp    c000180f <dlmemalign+0x11b>
c00017b0:	83 ec 0c             	sub    esp,0xc
c00017b3:	89 d0                	mov    eax,edx
c00017b5:	83 c8 01             	or     eax,0x1
c00017b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017bb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017c3:	83 e0 01             	and    eax,0x1
c00017c6:	09 f0                	or     eax,esi
c00017c8:	89 de                	mov    esi,ebx
c00017ca:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017cd:	51                   	push   ecx
c00017ce:	e8 e6 f4 ff ff       	call   c0000cb9 <dlfree>
c00017d3:	83 c4 10             	add    esp,0x10
c00017d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017d9:	a8 02                	test   al,0x2
c00017db:	75 2f                	jne    c000180c <dlmemalign+0x118>
c00017dd:	83 e0 fc             	and    eax,0xfffffffc
c00017e0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017e3:	39 c2                	cmp    edx,eax
c00017e5:	73 25                	jae    c000180c <dlmemalign+0x118>
c00017e7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	29 e8                	sub    eax,ebp
c00017ef:	83 c2 08             	add    edx,0x8
c00017f2:	83 c8 01             	or     eax,0x1
c00017f5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017fb:	83 e0 01             	and    eax,0x1
c00017fe:	09 c5                	or     ebp,eax
c0001800:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001803:	52                   	push   edx
c0001804:	e8 b0 f4 ff ff       	call   c0000cb9 <dlfree>
c0001809:	83 c4 10             	add    esp,0x10
c000180c:	8d 46 08             	lea    eax,[esi+0x8]
c000180f:	83 c4 0c             	add    esp,0xc
c0001812:	5b                   	pop    ebx
c0001813:	5e                   	pop    esi
c0001814:	5f                   	pop    edi
c0001815:	5d                   	pop    ebp
c0001816:	c3                   	ret    

c0001817 <dlcalloc>:
c0001817:	53                   	push   ebx
c0001818:	83 ec 14             	sub    esp,0x14
c000181b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000181f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001824:	50                   	push   eax
c0001825:	e8 ea f7 ff ff       	call   c0001014 <dlmalloc>
c000182a:	83 c4 10             	add    esp,0x10
c000182d:	89 c3                	mov    ebx,eax
c000182f:	85 c0                	test   eax,eax
c0001831:	74 77                	je     c00018aa <dlcalloc+0x93>
c0001833:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001836:	89 d0                	mov    eax,edx
c0001838:	83 e0 fc             	and    eax,0xfffffffc
c000183b:	80 e2 02             	and    dl,0x2
c000183e:	75 5a                	jne    c000189a <dlcalloc+0x83>
c0001840:	83 e8 04             	sub    eax,0x4
c0001843:	83 f8 27             	cmp    eax,0x27
c0001846:	76 03                	jbe    c000184b <dlcalloc+0x34>
c0001848:	51                   	push   ecx
c0001849:	eb 53                	jmp    c000189e <dlcalloc+0x87>
c000184b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001851:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001858:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000185f:	83 f8 13             	cmp    eax,0x13
c0001862:	76 46                	jbe    c00018aa <dlcalloc+0x93>
c0001864:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000186b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001872:	83 f8 1b             	cmp    eax,0x1b
c0001875:	76 33                	jbe    c00018aa <dlcalloc+0x93>
c0001877:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000187e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001885:	83 f8 23             	cmp    eax,0x23
c0001888:	76 20                	jbe    c00018aa <dlcalloc+0x93>
c000188a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001891:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001898:	eb 10                	jmp    c00018aa <dlcalloc+0x93>
c000189a:	83 e8 08             	sub    eax,0x8
c000189d:	52                   	push   edx
c000189e:	50                   	push   eax
c000189f:	6a 00                	push   0x0
c00018a1:	53                   	push   ebx
c00018a2:	e8 49 ec ff ff       	call   c00004f0 <memset>
c00018a7:	83 c4 10             	add    esp,0x10
c00018aa:	89 d8                	mov    eax,ebx
c00018ac:	83 c4 08             	add    esp,0x8
c00018af:	5b                   	pop    ebx
c00018b0:	c3                   	ret    

c00018b1 <dlcfree>:
c00018b1:	e9 03 f4 ff ff       	jmp    c0000cb9 <dlfree>

c00018b6 <dlindependent_calloc>:
c00018b6:	83 ec 28             	sub    esp,0x28
c00018b9:	b9 03 00 00 00       	mov    ecx,0x3
c00018be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018ca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d2:	e8 cb fa ff ff       	call   c00013a2 <iALLOc>
c00018d7:	83 c4 2c             	add    esp,0x2c
c00018da:	c3                   	ret    

c00018db <dlindependent_comalloc>:
c00018db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e3:	31 c9                	xor    ecx,ecx
c00018e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018ed:	e9 b0 fa ff ff       	jmp    c00013a2 <iALLOc>

c00018f2 <dlvalloc>:
c00018f2:	83 ec 0c             	sub    esp,0xc
c00018f5:	83 3d 80 fb 01 c0 00 	cmp    DWORD PTR ds:0xc001fb80,0x0
c00018fc:	75 0a                	jne    c0001908 <dlvalloc+0x16>
c00018fe:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c0001903:	e8 ca f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001908:	50                   	push   eax
c0001909:	50                   	push   eax
c000190a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000190e:	ff 35 dc fe 01 c0    	push   DWORD PTR ds:0xc001fedc
c0001914:	e8 db fd ff ff       	call   c00016f4 <dlmemalign>
c0001919:	83 c4 1c             	add    esp,0x1c
c000191c:	c3                   	ret    

c000191d <dlpvalloc>:
c000191d:	83 ec 0c             	sub    esp,0xc
c0001920:	83 3d 80 fb 01 c0 00 	cmp    DWORD PTR ds:0xc001fb80,0x0
c0001927:	75 0a                	jne    c0001933 <dlpvalloc+0x16>
c0001929:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c000192e:	e8 9f f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001933:	a1 dc fe 01 c0       	mov    eax,ds:0xc001fedc
c0001938:	89 c1                	mov    ecx,eax
c000193a:	52                   	push   edx
c000193b:	f7 d9                	neg    ecx
c000193d:	52                   	push   edx
c000193e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001942:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001946:	21 ca                	and    edx,ecx
c0001948:	52                   	push   edx
c0001949:	50                   	push   eax
c000194a:	e8 a5 fd ff ff       	call   c00016f4 <dlmemalign>
c000194f:	83 c4 1c             	add    esp,0x1c
c0001952:	c3                   	ret    

c0001953 <dlmalloc_trim>:
c0001953:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c0001958:	e8 75 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c000195d:	31 c0                	xor    eax,eax
c000195f:	c3                   	ret    

c0001960 <dlmalloc_usable_size>:
c0001960:	53                   	push   ebx
c0001961:	31 c0                	xor    eax,eax
c0001963:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001967:	85 c9                	test   ecx,ecx
c0001969:	74 24                	je     c000198f <dlmalloc_usable_size+0x2f>
c000196b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000196e:	f6 c2 02             	test   dl,0x2
c0001971:	74 08                	je     c000197b <dlmalloc_usable_size+0x1b>
c0001973:	83 e2 fc             	and    edx,0xfffffffc
c0001976:	8d 42 f8             	lea    eax,[edx-0x8]
c0001979:	eb 14                	jmp    c000198f <dlmalloc_usable_size+0x2f>
c000197b:	89 d3                	mov    ebx,edx
c000197d:	31 c0                	xor    eax,eax
c000197f:	83 e3 fe             	and    ebx,0xfffffffe
c0001982:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001987:	74 06                	je     c000198f <dlmalloc_usable_size+0x2f>
c0001989:	83 e2 fc             	and    edx,0xfffffffc
c000198c:	8d 42 fc             	lea    eax,[edx-0x4]
c000198f:	5b                   	pop    ebx
c0001990:	c3                   	ret    

c0001991 <dlmallinfo>:
c0001991:	55                   	push   ebp
c0001992:	57                   	push   edi
c0001993:	56                   	push   esi
c0001994:	53                   	push   ebx
c0001995:	83 ec 08             	sub    esp,0x8
c0001998:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000199c:	83 3d ac fb 01 c0 00 	cmp    DWORD PTR ds:0xc001fbac,0x0
c00019a3:	75 0a                	jne    c00019af <dlmallinfo+0x1e>
c00019a5:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c00019aa:	e8 23 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c00019af:	a1 ac fb 01 c0       	mov    eax,ds:0xc001fbac
c00019b4:	31 ed                	xor    ebp,ebp
c00019b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019b9:	31 c9                	xor    ecx,ecx
c00019bb:	83 e0 fc             	and    eax,0xfffffffc
c00019be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c2:	31 c0                	xor    eax,eax
c00019c4:	8b 14 85 84 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe047c]
c00019cb:	85 d2                	test   edx,edx
c00019cd:	74 0e                	je     c00019dd <dlmallinfo+0x4c>
c00019cf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d2:	45                   	inc    ebp
c00019d3:	83 e6 fc             	and    esi,0xfffffffc
c00019d6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019d9:	01 f1                	add    ecx,esi
c00019db:	eb ee                	jmp    c00019cb <dlmallinfo+0x3a>
c00019dd:	40                   	inc    eax
c00019de:	83 f8 0a             	cmp    eax,0xa
c00019e1:	75 e1                	jne    c00019c4 <dlmallinfo+0x33>
c00019e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019e7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ee:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f1:	b8 b4 fb 01 c0       	mov    eax,0xc001fbb4
c00019f6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019f9:	39 f0                	cmp    eax,esi
c00019fb:	74 10                	je     c0001a0d <dlmallinfo+0x7c>
c00019fd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a00:	ff 04 24             	inc    DWORD PTR [esp]
c0001a03:	83 e7 fc             	and    edi,0xfffffffc
c0001a06:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a09:	01 fa                	add    edx,edi
c0001a0b:	eb ec                	jmp    c00019f9 <dlmallinfo+0x68>
c0001a0d:	83 c0 08             	add    eax,0x8
c0001a10:	3d ac fe 01 c0       	cmp    eax,0xc001feac
c0001a15:	75 df                	jne    c00019f6 <dlmallinfo+0x65>
c0001a17:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a1a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a1d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a20:	a1 e8 fe 01 c0       	mov    eax,ds:0xc001fee8
c0001a25:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a28:	89 03                	mov    DWORD PTR [ebx],eax
c0001a2a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a2d:	8b 35 d0 fe 01 c0    	mov    esi,DWORD PTR ds:0xc001fed0
c0001a33:	29 d0                	sub    eax,edx
c0001a35:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a38:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a3b:	8b 35 e4 fe 01 c0    	mov    esi,DWORD PTR ds:0xc001fee4
c0001a41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a45:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a48:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a4b:	8b 35 f4 fe 01 c0    	mov    esi,DWORD PTR ds:0xc001fef4
c0001a51:	89 d8                	mov    eax,ebx
c0001a53:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a56:	83 c4 08             	add    esp,0x8
c0001a59:	5b                   	pop    ebx
c0001a5a:	5e                   	pop    esi
c0001a5b:	5f                   	pop    edi
c0001a5c:	5d                   	pop    ebp
c0001a5d:	c2 04 00             	ret    0x4

c0001a60 <dlmalloc_stats>:
c0001a60:	83 ec 30             	sub    esp,0x30
c0001a63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a67:	50                   	push   eax
c0001a68:	e8 24 ff ff ff       	call   c0001991 <dlmallinfo>
c0001a6d:	83 c4 30             	add    esp,0x30
c0001a70:	c3                   	ret    

c0001a71 <dlmallopt>:
c0001a71:	56                   	push   esi
c0001a72:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c0001a77:	53                   	push   ebx
c0001a78:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a80:	e8 4d f1 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001a85:	8d 46 04             	lea    eax,[esi+0x4]
c0001a88:	83 f8 05             	cmp    eax,0x5
c0001a8b:	77 67                	ja     c0001af4 <dlmallopt+0x83>
c0001a8d:	ff 24 85 84 cf 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe307c]
c0001a94:	83 fb 50             	cmp    ebx,0x50
c0001a97:	77 5b                	ja     c0001af4 <dlmallopt+0x83>
c0001a99:	ba 08 00 00 00       	mov    edx,0x8
c0001a9e:	85 db                	test   ebx,ebx
c0001aa0:	74 12                	je     c0001ab4 <dlmallopt+0x43>
c0001aa2:	83 c3 0b             	add    ebx,0xb
c0001aa5:	ba 10 00 00 00       	mov    edx,0x10
c0001aaa:	83 fb 0f             	cmp    ebx,0xf
c0001aad:	76 05                	jbe    c0001ab4 <dlmallopt+0x43>
c0001aaf:	89 da                	mov    edx,ebx
c0001ab1:	83 e2 f8             	and    edx,0xfffffff8
c0001ab4:	a1 80 fb 01 c0       	mov    eax,ds:0xc001fb80
c0001ab9:	83 e0 03             	and    eax,0x3
c0001abc:	09 d0                	or     eax,edx
c0001abe:	a3 80 fb 01 c0       	mov    ds:0xc001fb80,eax
c0001ac3:	eb 31                	jmp    c0001af6 <dlmallopt+0x85>
c0001ac5:	89 1d c4 fe 01 c0    	mov    DWORD PTR ds:0xc001fec4,ebx
c0001acb:	eb 06                	jmp    c0001ad3 <dlmallopt+0x62>
c0001acd:	89 1d c8 fe 01 c0    	mov    DWORD PTR ds:0xc001fec8,ebx
c0001ad3:	be 01 00 00 00       	mov    esi,0x1
c0001ad8:	eb 1c                	jmp    c0001af6 <dlmallopt+0x85>
c0001ada:	89 1d cc fe 01 c0    	mov    DWORD PTR ds:0xc001fecc,ebx
c0001ae0:	eb f1                	jmp    c0001ad3 <dlmallopt+0x62>
c0001ae2:	31 f6                	xor    esi,esi
c0001ae4:	85 db                	test   ebx,ebx
c0001ae6:	75 0e                	jne    c0001af6 <dlmallopt+0x85>
c0001ae8:	c7 05 d4 fe 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fed4,0x0
c0001af2:	eb df                	jmp    c0001ad3 <dlmallopt+0x62>
c0001af4:	31 f6                	xor    esi,esi
c0001af6:	89 f0                	mov    eax,esi
c0001af8:	5b                   	pop    ebx
c0001af9:	5e                   	pop    esi
c0001afa:	c3                   	ret    
c0001afb:	90                   	nop

c0001afc <isblank>:
c0001afc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b01:	74 09                	je     c0001b0c <isblank+0x10>
c0001b03:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b08:	75 0a                	jne    c0001b14 <isblank+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <iscntrl>:
c0001b1c:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b21:	7e 09                	jle    c0001b2c <iscntrl+0x10>
c0001b23:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b28:	75 0a                	jne    c0001b34 <iscntrl+0x18>
c0001b2a:	66 90                	xchg   ax,ax
c0001b2c:	b8 01 00 00 00       	mov    eax,0x1
c0001b31:	c3                   	ret    
c0001b32:	66 90                	xchg   ax,ax
c0001b34:	b8 00 00 00 00       	mov    eax,0x0
c0001b39:	c3                   	ret    
c0001b3a:	66 90                	xchg   ax,ax

c0001b3c <isdigit>:
c0001b3c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b41:	7e 0d                	jle    c0001b50 <isdigit+0x14>
c0001b43:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b48:	7f 06                	jg     c0001b50 <isdigit+0x14>
c0001b4a:	b8 01 00 00 00       	mov    eax,0x1
c0001b4f:	c3                   	ret    
c0001b50:	b8 00 00 00 00       	mov    eax,0x0
c0001b55:	c3                   	ret    
c0001b56:	66 90                	xchg   ax,ax

c0001b58 <islower>:
c0001b58:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b5d:	7e 0d                	jle    c0001b6c <islower+0x14>
c0001b5f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b64:	7f 06                	jg     c0001b6c <islower+0x14>
c0001b66:	b8 01 00 00 00       	mov    eax,0x1
c0001b6b:	c3                   	ret    
c0001b6c:	b8 00 00 00 00       	mov    eax,0x0
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax

c0001b74 <isspace>:
c0001b74:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b79:	7c 19                	jl     c0001b94 <isspace+0x20>
c0001b7b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b80:	7e 0a                	jle    c0001b8c <isspace+0x18>
c0001b82:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b87:	75 0b                	jne    c0001b94 <isspace+0x20>
c0001b89:	8d 76 00             	lea    esi,[esi+0x0]
c0001b8c:	b8 01 00 00 00       	mov    eax,0x1
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax
c0001b94:	b8 00 00 00 00       	mov    eax,0x0
c0001b99:	c3                   	ret    
c0001b9a:	66 90                	xchg   ax,ax

c0001b9c <isupper>:
c0001b9c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ba1:	7e 0d                	jle    c0001bb0 <isupper+0x14>
c0001ba3:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001ba8:	7f 06                	jg     c0001bb0 <isupper+0x14>
c0001baa:	b8 01 00 00 00       	mov    eax,0x1
c0001baf:	c3                   	ret    
c0001bb0:	b8 00 00 00 00       	mov    eax,0x0
c0001bb5:	c3                   	ret    
c0001bb6:	66 90                	xchg   ax,ax

c0001bb8 <isalpha>:
c0001bb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bbc:	e8 db ff ff ff       	call   c0001b9c <isupper>
c0001bc1:	83 c4 04             	add    esp,0x4
c0001bc4:	85 c0                	test   eax,eax
c0001bc6:	75 10                	jne    c0001bd8 <isalpha+0x20>
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 87 ff ff ff       	call   c0001b58 <islower>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	74 08                	je     c0001be0 <isalpha+0x28>
c0001bd8:	b8 01 00 00 00       	mov    eax,0x1
c0001bdd:	c3                   	ret    
c0001bde:	66 90                	xchg   ax,ax
c0001be0:	b8 00 00 00 00       	mov    eax,0x0
c0001be5:	c3                   	ret    
c0001be6:	66 90                	xchg   ax,ax

c0001be8 <isalnum>:
c0001be8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bec:	e8 c7 ff ff ff       	call   c0001bb8 <isalpha>
c0001bf1:	83 c4 04             	add    esp,0x4
c0001bf4:	85 c0                	test   eax,eax
c0001bf6:	75 10                	jne    c0001c08 <isalnum+0x20>
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 3b ff ff ff       	call   c0001b3c <isdigit>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	74 08                	je     c0001c10 <isalnum+0x28>
c0001c08:	b8 01 00 00 00       	mov    eax,0x1
c0001c0d:	c3                   	ret    
c0001c0e:	66 90                	xchg   ax,ax
c0001c10:	b8 00 00 00 00       	mov    eax,0x0
c0001c15:	c3                   	ret    
c0001c16:	66 90                	xchg   ax,ax

c0001c18 <ispunct>:
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 c7 ff ff ff       	call   c0001be8 <isalnum>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 28                	jne    c0001c50 <ispunct+0x38>
c0001c28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c2c:	e8 43 ff ff ff       	call   c0001b74 <isspace>
c0001c31:	83 c4 04             	add    esp,0x4
c0001c34:	85 c0                	test   eax,eax
c0001c36:	75 18                	jne    c0001c50 <ispunct+0x38>
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 db fe ff ff       	call   c0001b1c <iscntrl>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 08                	jne    c0001c50 <ispunct+0x38>
c0001c48:	b8 01 00 00 00       	mov    eax,0x1
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax
c0001c50:	b8 00 00 00 00       	mov    eax,0x0
c0001c55:	c3                   	ret    
c0001c56:	66 90                	xchg   ax,ax

c0001c58 <isgraph>:
c0001c58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c5c:	e8 87 ff ff ff       	call   c0001be8 <isalnum>
c0001c61:	83 c4 04             	add    esp,0x4
c0001c64:	85 c0                	test   eax,eax
c0001c66:	75 10                	jne    c0001c78 <isgraph+0x20>
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 a7 ff ff ff       	call   c0001c18 <ispunct>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	74 08                	je     c0001c80 <isgraph+0x28>
c0001c78:	b8 01 00 00 00       	mov    eax,0x1
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isprint>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 c7 ff ff ff       	call   c0001c58 <isgraph>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 08                	jne    c0001ca0 <isprint+0x18>
c0001c98:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c9d:	75 09                	jne    c0001ca8 <isprint+0x20>
c0001c9f:	90                   	nop
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <isxdigit>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 83 fe ff ff       	call   c0001b3c <isdigit>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 20                	jne    c0001ce0 <isxdigit+0x30>
c0001cc0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001cc5:	7e 09                	jle    c0001cd0 <isxdigit+0x20>
c0001cc7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ccc:	7e 12                	jle    c0001ce0 <isxdigit+0x30>
c0001cce:	66 90                	xchg   ax,ax
c0001cd0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cd5:	7e 11                	jle    c0001ce8 <isxdigit+0x38>
c0001cd7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cdc:	7f 0a                	jg     c0001ce8 <isxdigit+0x38>
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    

c0001cee <disk_status>:
c0001cee:	31 c0                	xor    eax,eax
c0001cf0:	c3                   	ret    

c0001cf1 <disk_initialize>:
c0001cf1:	31 c0                	xor    eax,eax
c0001cf3:	c3                   	ret    

c0001cf4 <disk_read>:
c0001cf4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cf9:	0f b6 04 85 60 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc0a0]
c0001d01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d05:	e9 8a 53 01 00       	jmp    c0017094 <fatWrapperReadDisk>

c0001d0a <disk_write>:
c0001d0a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0f:	0f b6 04 85 60 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc0a0]
c0001d17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1b:	e9 b8 53 01 00       	jmp    c00170d8 <fatWrapperWriteDisk>

c0001d20 <disk_ioctl>:
c0001d20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d29:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d2e:	0f b6 04 85 60 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc0a0]
c0001d36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d3a:	e9 dd 53 01 00       	jmp    c001711c <fatWrapperIoctl>

c0001d3f <ld_word>:
c0001d3f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d43:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d46:	c1 e2 08             	shl    edx,0x8
c0001d49:	09 d0                	or     eax,edx
c0001d4b:	c3                   	ret    

c0001d4c <ld_dword>:
c0001d4c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d50:	89 d1                	mov    ecx,edx
c0001d52:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d56:	c1 e1 08             	shl    ecx,0x8
c0001d59:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d5c:	09 ca                	or     edx,ecx
c0001d5e:	c1 e2 08             	shl    edx,0x8
c0001d61:	09 d0                	or     eax,edx
c0001d63:	c3                   	ret    

c0001d64 <st_word>:
c0001d64:	66 89 10             	mov    WORD PTR [eax],dx
c0001d67:	c3                   	ret    

c0001d68 <st_dword>:
c0001d68:	89 10                	mov    DWORD PTR [eax],edx
c0001d6a:	c3                   	ret    

c0001d6b <mem_cpy>:
c0001d6b:	85 c9                	test   ecx,ecx
c0001d6d:	74 10                	je     c0001d7f <mem_cpy+0x14>
c0001d6f:	57                   	push   edi
c0001d70:	01 c1                	add    ecx,eax
c0001d72:	56                   	push   esi
c0001d73:	89 c7                	mov    edi,eax
c0001d75:	89 d6                	mov    esi,edx
c0001d77:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d78:	39 f9                	cmp    ecx,edi
c0001d7a:	75 fb                	jne    c0001d77 <mem_cpy+0xc>
c0001d7c:	5e                   	pop    esi
c0001d7d:	5f                   	pop    edi
c0001d7e:	c3                   	ret    
c0001d7f:	c3                   	ret    

c0001d80 <mem_set>:
c0001d80:	01 c1                	add    ecx,eax
c0001d82:	40                   	inc    eax
c0001d83:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d86:	39 c8                	cmp    eax,ecx
c0001d88:	75 f8                	jne    c0001d82 <mem_set+0x2>
c0001d8a:	c3                   	ret    

c0001d8b <mem_cmp>:
c0001d8b:	57                   	push   edi
c0001d8c:	56                   	push   esi
c0001d8d:	89 c6                	mov    esi,eax
c0001d8f:	53                   	push   ebx
c0001d90:	46                   	inc    esi
c0001d91:	42                   	inc    edx
c0001d92:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d96:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d9a:	29 fb                	sub    ebx,edi
c0001d9c:	89 cf                	mov    edi,ecx
c0001d9e:	29 f7                	sub    edi,esi
c0001da0:	01 c7                	add    edi,eax
c0001da2:	74 04                	je     c0001da8 <mem_cmp+0x1d>
c0001da4:	85 db                	test   ebx,ebx
c0001da6:	74 e8                	je     c0001d90 <mem_cmp+0x5>
c0001da8:	89 d8                	mov    eax,ebx
c0001daa:	5b                   	pop    ebx
c0001dab:	5e                   	pop    esi
c0001dac:	5f                   	pop    edi
c0001dad:	c3                   	ret    

c0001dae <chk_chr>:
c0001dae:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001db1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001db4:	74 07                	je     c0001dbd <chk_chr+0xf>
c0001db6:	39 d1                	cmp    ecx,edx
c0001db8:	74 03                	je     c0001dbd <chk_chr+0xf>
c0001dba:	40                   	inc    eax
c0001dbb:	eb f1                	jmp    c0001dae <chk_chr>
c0001dbd:	89 c8                	mov    eax,ecx
c0001dbf:	c3                   	ret    

c0001dc0 <dbc_1st>:
c0001dc0:	31 c0                	xor    eax,eax
c0001dc2:	c3                   	ret    

c0001dc3 <dbc_2nd>:
c0001dc3:	31 c0                	xor    eax,eax
c0001dc5:	c3                   	ret    

c0001dc6 <tchar2uni>:
c0001dc6:	57                   	push   edi
c0001dc7:	89 c7                	mov    edi,eax
c0001dc9:	56                   	push   esi
c0001dca:	53                   	push   ebx
c0001dcb:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dcd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001dcf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001dd2:	84 c9                	test   cl,cl
c0001dd4:	78 0a                	js     c0001de0 <tchar2uni+0x1a>
c0001dd6:	0f b6 d1             	movzx  edx,cl
c0001dd9:	89 f3                	mov    ebx,esi
c0001ddb:	e9 9f 00 00 00       	jmp    c0001e7f <tchar2uni+0xb9>
c0001de0:	88 ca                	mov    dl,cl
c0001de2:	83 e2 e0             	and    edx,0xffffffe0
c0001de5:	80 fa c0             	cmp    dl,0xc0
c0001de8:	75 0c                	jne    c0001df6 <tchar2uni+0x30>
c0001dea:	89 ca                	mov    edx,ecx
c0001dec:	b9 01 00 00 00       	mov    ecx,0x1
c0001df1:	83 e2 1f             	and    edx,0x1f
c0001df4:	eb 2e                	jmp    c0001e24 <tchar2uni+0x5e>
c0001df6:	88 ca                	mov    dl,cl
c0001df8:	83 e2 f0             	and    edx,0xfffffff0
c0001dfb:	80 fa e0             	cmp    dl,0xe0
c0001dfe:	75 0c                	jne    c0001e0c <tchar2uni+0x46>
c0001e00:	89 ca                	mov    edx,ecx
c0001e02:	b9 02 00 00 00       	mov    ecx,0x2
c0001e07:	83 e2 0f             	and    edx,0xf
c0001e0a:	eb 18                	jmp    c0001e24 <tchar2uni+0x5e>
c0001e0c:	88 ca                	mov    dl,cl
c0001e0e:	83 e2 f8             	and    edx,0xfffffff8
c0001e11:	88 d0                	mov    al,dl
c0001e13:	83 ca ff             	or     edx,0xffffffff
c0001e16:	3c f0                	cmp    al,0xf0
c0001e18:	75 6c                	jne    c0001e86 <tchar2uni+0xc0>
c0001e1a:	89 ca                	mov    edx,ecx
c0001e1c:	b9 03 00 00 00       	mov    ecx,0x3
c0001e21:	83 e2 07             	and    edx,0x7
c0001e24:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e28:	46                   	inc    esi
c0001e29:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e2c:	88 c8                	mov    al,cl
c0001e2e:	83 e0 c0             	and    eax,0xffffffc0
c0001e31:	3c 80                	cmp    al,0x80
c0001e33:	75 4e                	jne    c0001e83 <tchar2uni+0xbd>
c0001e35:	c1 e2 06             	shl    edx,0x6
c0001e38:	83 e1 3f             	and    ecx,0x3f
c0001e3b:	09 ca                	or     edx,ecx
c0001e3d:	39 de                	cmp    esi,ebx
c0001e3f:	75 e7                	jne    c0001e28 <tchar2uni+0x62>
c0001e41:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e44:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e4a:	77 37                	ja     c0001e83 <tchar2uni+0xbd>
c0001e4c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e52:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e58:	76 29                	jbe    c0001e83 <tchar2uni+0xbd>
c0001e5a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e60:	76 1d                	jbe    c0001e7f <tchar2uni+0xb9>
c0001e62:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e68:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e6e:	c1 e1 06             	shl    ecx,0x6
c0001e71:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e77:	09 ca                	or     edx,ecx
c0001e79:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e7f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e81:	eb 03                	jmp    c0001e86 <tchar2uni+0xc0>
c0001e83:	83 ca ff             	or     edx,0xffffffff
c0001e86:	5b                   	pop    ebx
c0001e87:	89 d0                	mov    eax,edx
c0001e89:	5e                   	pop    esi
c0001e8a:	5f                   	pop    edi
c0001e8b:	c3                   	ret    

c0001e8c <put_utf>:
c0001e8c:	53                   	push   ebx
c0001e8d:	83 f8 7f             	cmp    eax,0x7f
c0001e90:	89 c3                	mov    ebx,eax
c0001e92:	b0 00                	mov    al,0x0
c0001e94:	77 11                	ja     c0001ea7 <put_utf+0x1b>
c0001e96:	85 c9                	test   ecx,ecx
c0001e98:	0f 84 e5 00 00 00    	je     c0001f83 <put_utf+0xf7>
c0001e9e:	88 1a                	mov    BYTE PTR [edx],bl
c0001ea0:	b0 01                	mov    al,0x1
c0001ea2:	e9 dc 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ea7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001ead:	77 23                	ja     c0001ed2 <put_utf+0x46>
c0001eaf:	83 f9 01             	cmp    ecx,0x1
c0001eb2:	0f 86 cb 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001eb8:	89 d8                	mov    eax,ebx
c0001eba:	83 e3 3f             	and    ebx,0x3f
c0001ebd:	c1 e8 06             	shr    eax,0x6
c0001ec0:	83 cb 80             	or     ebx,0xffffff80
c0001ec3:	83 c8 c0             	or     eax,0xffffffc0
c0001ec6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ec9:	88 02                	mov    BYTE PTR [edx],al
c0001ecb:	b0 02                	mov    al,0x2
c0001ecd:	e9 b1 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ed2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ed8:	77 40                	ja     c0001f1a <put_utf+0x8e>
c0001eda:	83 f9 02             	cmp    ecx,0x2
c0001edd:	0f 86 a0 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ee3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ee9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001eef:	0f 86 8e 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ef5:	89 d8                	mov    eax,ebx
c0001ef7:	c1 e8 0c             	shr    eax,0xc
c0001efa:	83 c8 e0             	or     eax,0xffffffe0
c0001efd:	88 02                	mov    BYTE PTR [edx],al
c0001eff:	89 d8                	mov    eax,ebx
c0001f01:	83 e3 3f             	and    ebx,0x3f
c0001f04:	c1 e8 06             	shr    eax,0x6
c0001f07:	83 cb 80             	or     ebx,0xffffff80
c0001f0a:	83 e0 3f             	and    eax,0x3f
c0001f0d:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001f10:	83 c8 80             	or     eax,0xffffff80
c0001f13:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f16:	b0 03                	mov    al,0x3
c0001f18:	eb 69                	jmp    c0001f83 <put_utf+0xf7>
c0001f1a:	83 f9 03             	cmp    ecx,0x3
c0001f1d:	76 64                	jbe    c0001f83 <put_utf+0xf7>
c0001f1f:	89 d9                	mov    ecx,ebx
c0001f21:	0f b7 c3             	movzx  eax,bx
c0001f24:	66 31 c9             	xor    cx,cx
c0001f27:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f2d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f33:	c1 e9 06             	shr    ecx,0x6
c0001f36:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f3c:	77 43                	ja     c0001f81 <put_utf+0xf5>
c0001f3e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f44:	77 3b                	ja     c0001f81 <put_utf+0xf5>
c0001f46:	09 cb                	or     ebx,ecx
c0001f48:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f4e:	89 d8                	mov    eax,ebx
c0001f50:	c1 e8 12             	shr    eax,0x12
c0001f53:	83 c8 f0             	or     eax,0xfffffff0
c0001f56:	88 02                	mov    BYTE PTR [edx],al
c0001f58:	89 d8                	mov    eax,ebx
c0001f5a:	c1 e8 0c             	shr    eax,0xc
c0001f5d:	83 e0 3f             	and    eax,0x3f
c0001f60:	83 c8 80             	or     eax,0xffffff80
c0001f63:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f66:	89 d8                	mov    eax,ebx
c0001f68:	83 e3 3f             	and    ebx,0x3f
c0001f6b:	c1 e8 06             	shr    eax,0x6
c0001f6e:	83 cb 80             	or     ebx,0xffffff80
c0001f71:	83 e0 3f             	and    eax,0x3f
c0001f74:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f77:	83 c8 80             	or     eax,0xffffff80
c0001f7a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f7d:	b0 04                	mov    al,0x4
c0001f7f:	eb 02                	jmp    c0001f83 <put_utf+0xf7>
c0001f81:	31 c0                	xor    eax,eax
c0001f83:	5b                   	pop    ebx
c0001f84:	c3                   	ret    

c0001f85 <clst2sect>:
c0001f85:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f88:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f8b:	83 ea 02             	sub    edx,0x2
c0001f8e:	39 ca                	cmp    edx,ecx
c0001f90:	76 0d                	jbe    c0001f9f <clst2sect+0x1a>
c0001f92:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f96:	0f af d1             	imul   edx,ecx
c0001f99:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f9c:	89 d0                	mov    eax,edx
c0001f9e:	c3                   	ret    
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <pick_lfn>:
c0001fa2:	55                   	push   ebp
c0001fa3:	57                   	push   edi
c0001fa4:	56                   	push   esi
c0001fa5:	89 d6                	mov    esi,edx
c0001fa7:	53                   	push   ebx
c0001fa8:	89 c3                	mov    ebx,eax
c0001faa:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fad:	e8 8d fd ff ff       	call   c0001d3f <ld_word>
c0001fb2:	66 85 c0             	test   ax,ax
c0001fb5:	74 04                	je     c0001fbb <pick_lfn+0x19>
c0001fb7:	31 c0                	xor    eax,eax
c0001fb9:	eb 5c                	jmp    c0002017 <pick_lfn+0x75>
c0001fbb:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001fbe:	bd 01 00 00 00       	mov    ebp,0x1
c0001fc3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fc6:	31 ff                	xor    edi,edi
c0001fc8:	49                   	dec    ecx
c0001fc9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fcc:	0f b6 87 e0 d0 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2f20]
c0001fd3:	01 f0                	add    eax,esi
c0001fd5:	e8 65 fd ff ff       	call   c0001d3f <ld_word>
c0001fda:	66 85 ed             	test   bp,bp
c0001fdd:	74 11                	je     c0001ff0 <pick_lfn+0x4e>
c0001fdf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fe5:	77 d0                	ja     c0001fb7 <pick_lfn+0x15>
c0001fe7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001feb:	89 c5                	mov    ebp,eax
c0001fed:	41                   	inc    ecx
c0001fee:	eb 04                	jmp    c0001ff4 <pick_lfn+0x52>
c0001ff0:	66 40                	inc    ax
c0001ff2:	75 c3                	jne    c0001fb7 <pick_lfn+0x15>
c0001ff4:	47                   	inc    edi
c0001ff5:	83 ff 0d             	cmp    edi,0xd
c0001ff8:	75 d2                	jne    c0001fcc <pick_lfn+0x2a>
c0001ffa:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ffd:	74 13                	je     c0002012 <pick_lfn+0x70>
c0001fff:	66 85 ed             	test   bp,bp
c0002002:	74 0e                	je     c0002012 <pick_lfn+0x70>
c0002004:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000200a:	77 ab                	ja     c0001fb7 <pick_lfn+0x15>
c000200c:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0002012:	b8 01 00 00 00       	mov    eax,0x1
c0002017:	5b                   	pop    ebx
c0002018:	5e                   	pop    esi
c0002019:	5f                   	pop    edi
c000201a:	5d                   	pop    ebp
c000201b:	c3                   	ret    

c000201c <put_lfn>:
c000201c:	55                   	push   ebp
c000201d:	31 ed                	xor    ebp,ebp
c000201f:	57                   	push   edi
c0002020:	89 d7                	mov    edi,edx
c0002022:	56                   	push   esi
c0002023:	31 f6                	xor    esi,esi
c0002025:	53                   	push   ebx
c0002026:	83 ec 08             	sub    esp,0x8
c0002029:	89 04 24             	mov    DWORD PTR [esp],eax
c000202c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002034:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000203a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000203d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002040:	31 d2                	xor    edx,edx
c0002042:	e8 1d fd ff ff       	call   c0001d64 <st_word>
c0002047:	0f b6 d9             	movzx  ebx,cl
c000204a:	4b                   	dec    ebx
c000204b:	6b db 0d             	imul   ebx,ebx,0xd
c000204e:	66 83 fe ff          	cmp    si,0xffff
c0002052:	74 08                	je     c000205c <put_lfn+0x40>
c0002054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002057:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000205b:	43                   	inc    ebx
c000205c:	0f b6 85 e0 d0 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2f20]
c0002063:	0f b7 d6             	movzx  edx,si
c0002066:	01 f8                	add    eax,edi
c0002068:	e8 f7 fc ff ff       	call   c0001d64 <st_word>
c000206d:	66 85 f6             	test   si,si
c0002070:	75 03                	jne    c0002075 <put_lfn+0x59>
c0002072:	83 ce ff             	or     esi,0xffffffff
c0002075:	45                   	inc    ebp
c0002076:	83 fd 0d             	cmp    ebp,0xd
c0002079:	75 d3                	jne    c000204e <put_lfn+0x32>
c000207b:	66 46                	inc    si
c000207d:	74 0a                	je     c0002089 <put_lfn+0x6d>
c000207f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002082:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002087:	75 09                	jne    c0002092 <put_lfn+0x76>
c0002089:	88 c8                	mov    al,cl
c000208b:	83 c8 40             	or     eax,0x40
c000208e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002092:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002096:	88 07                	mov    BYTE PTR [edi],al
c0002098:	83 c4 08             	add    esp,0x8
c000209b:	5b                   	pop    ebx
c000209c:	5e                   	pop    esi
c000209d:	5f                   	pop    edi
c000209e:	5d                   	pop    ebp
c000209f:	c3                   	ret    

c00020a0 <gen_numname>:
c00020a0:	57                   	push   edi
c00020a1:	89 cf                	mov    edi,ecx
c00020a3:	56                   	push   esi
c00020a4:	b9 0b 00 00 00       	mov    ecx,0xb
c00020a9:	53                   	push   ebx
c00020aa:	89 c6                	mov    esi,eax
c00020ac:	83 ec 10             	sub    esp,0x10
c00020af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00020b3:	e8 b3 fc ff ff       	call   c0001d6b <mem_cpy>
c00020b8:	83 fb 05             	cmp    ebx,0x5
c00020bb:	76 2d                	jbe    c00020ea <gen_numname+0x4a>
c00020bd:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020c0:	66 85 c0             	test   ax,ax
c00020c3:	74 25                	je     c00020ea <gen_numname+0x4a>
c00020c5:	83 c7 02             	add    edi,0x2
c00020c8:	ba 10 00 00 00       	mov    edx,0x10
c00020cd:	01 db                	add    ebx,ebx
c00020cf:	89 c1                	mov    ecx,eax
c00020d1:	66 d1 e8             	shr    ax,1
c00020d4:	83 e1 01             	and    ecx,0x1
c00020d7:	01 cb                	add    ebx,ecx
c00020d9:	0f ba e3 10          	bt     ebx,0x10
c00020dd:	73 06                	jae    c00020e5 <gen_numname+0x45>
c00020df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020e5:	4a                   	dec    edx
c00020e6:	75 e5                	jne    c00020cd <gen_numname+0x2d>
c00020e8:	eb d3                	jmp    c00020bd <gen_numname+0x1d>
c00020ea:	b8 07 00 00 00       	mov    eax,0x7
c00020ef:	88 d9                	mov    cl,bl
c00020f1:	83 e1 0f             	and    ecx,0xf
c00020f4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020f7:	80 fa 39             	cmp    dl,0x39
c00020fa:	76 03                	jbe    c00020ff <gen_numname+0x5f>
c00020fc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020ff:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002102:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002106:	89 da                	mov    edx,ebx
c0002108:	c1 ea 04             	shr    edx,0x4
c000210b:	83 fb 0f             	cmp    ebx,0xf
c000210e:	76 06                	jbe    c0002116 <gen_numname+0x76>
c0002110:	89 c8                	mov    eax,ecx
c0002112:	89 d3                	mov    ebx,edx
c0002114:	eb d9                	jmp    c00020ef <gen_numname+0x4f>
c0002116:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000211b:	31 d2                	xor    edx,edx
c000211d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002120:	8d 04 16             	lea    eax,[esi+edx*1]
c0002123:	39 ca                	cmp    edx,ecx
c0002125:	73 18                	jae    c000213f <gen_numname+0x9f>
c0002127:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000212a:	3c 20                	cmp    al,0x20
c000212c:	74 11                	je     c000213f <gen_numname+0x9f>
c000212e:	e8 8d fc ff ff       	call   c0001dc0 <dbc_1st>
c0002133:	85 c0                	test   eax,eax
c0002135:	74 05                	je     c000213c <gen_numname+0x9c>
c0002137:	39 d3                	cmp    ebx,edx
c0002139:	74 04                	je     c000213f <gen_numname+0x9f>
c000213b:	42                   	inc    edx
c000213c:	42                   	inc    edx
c000213d:	eb e1                	jmp    c0002120 <gen_numname+0x80>
c000213f:	b0 20                	mov    al,0x20
c0002141:	83 f9 07             	cmp    ecx,0x7
c0002144:	77 05                	ja     c000214b <gen_numname+0xab>
c0002146:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000214a:	41                   	inc    ecx
c000214b:	42                   	inc    edx
c000214c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002150:	83 fa 07             	cmp    edx,0x7
c0002153:	76 ea                	jbe    c000213f <gen_numname+0x9f>
c0002155:	83 c4 10             	add    esp,0x10
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	5f                   	pop    edi
c000215b:	c3                   	ret    

c000215c <sum_sfn>:
c000215c:	31 c9                	xor    ecx,ecx
c000215e:	31 d2                	xor    edx,edx
c0002160:	d0 ca                	ror    dl,1
c0002162:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002165:	41                   	inc    ecx
c0002166:	83 f9 0b             	cmp    ecx,0xb
c0002169:	75 f5                	jne    c0002160 <sum_sfn+0x4>
c000216b:	88 d0                	mov    al,dl
c000216d:	c3                   	ret    

c000216e <get_ldnumber>:
c000216e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002170:	85 d2                	test   edx,edx
c0002172:	74 14                	je     c0002188 <get_ldnumber+0x1a>
c0002174:	56                   	push   esi
c0002175:	53                   	push   ebx
c0002176:	89 d3                	mov    ebx,edx
c0002178:	43                   	inc    ebx
c0002179:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000217c:	80 f9 1f             	cmp    cl,0x1f
c000217f:	76 0d                	jbe    c000218e <get_ldnumber+0x20>
c0002181:	80 f9 3a             	cmp    cl,0x3a
c0002184:	75 f2                	jne    c0002178 <get_ldnumber+0xa>
c0002186:	eb 0a                	jmp    c0002192 <get_ldnumber+0x24>
c0002188:	83 c9 ff             	or     ecx,0xffffffff
c000218b:	89 c8                	mov    eax,ecx
c000218d:	c3                   	ret    
c000218e:	31 c9                	xor    ecx,ecx
c0002190:	eb 24                	jmp    c00021b6 <get_ldnumber+0x48>
c0002192:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002195:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002198:	80 f9 09             	cmp    cl,0x9
c000219b:	77 16                	ja     c00021b3 <get_ldnumber+0x45>
c000219d:	83 c2 02             	add    edx,0x2
c00021a0:	83 c9 ff             	or     ecx,0xffffffff
c00021a3:	39 d3                	cmp    ebx,edx
c00021a5:	75 0f                	jne    c00021b6 <get_ldnumber+0x48>
c00021a7:	89 f2                	mov    edx,esi
c00021a9:	89 18                	mov    DWORD PTR [eax],ebx
c00021ab:	0f be ca             	movsx  ecx,dl
c00021ae:	83 e9 30             	sub    ecx,0x30
c00021b1:	eb 03                	jmp    c00021b6 <get_ldnumber+0x48>
c00021b3:	83 c9 ff             	or     ecx,0xffffffff
c00021b6:	89 c8                	mov    eax,ecx
c00021b8:	5b                   	pop    ebx
c00021b9:	5e                   	pop    esi
c00021ba:	c3                   	ret    

c00021bb <validate>:
c00021bb:	56                   	push   esi
c00021bc:	53                   	push   ebx
c00021bd:	89 d6                	mov    esi,edx
c00021bf:	51                   	push   ecx
c00021c0:	85 c0                	test   eax,eax
c00021c2:	75 09                	jne    c00021cd <validate+0x12>
c00021c4:	b8 09 00 00 00       	mov    eax,0x9
c00021c9:	31 c9                	xor    ecx,ecx
c00021cb:	eb 2f                	jmp    c00021fc <validate+0x41>
c00021cd:	89 c3                	mov    ebx,eax
c00021cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00021d1:	85 c0                	test   eax,eax
c00021d3:	74 ef                	je     c00021c4 <validate+0x9>
c00021d5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021d8:	74 ea                	je     c00021c4 <validate+0x9>
c00021da:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021de:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021e2:	75 e0                	jne    c00021c4 <validate+0x9>
c00021e4:	83 ec 0c             	sub    esp,0xc
c00021e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021eb:	50                   	push   eax
c00021ec:	e8 fd fa ff ff       	call   c0001cee <disk_status>
c00021f1:	83 c4 10             	add    esp,0x10
c00021f4:	a8 01                	test   al,0x1
c00021f6:	75 cc                	jne    c00021c4 <validate+0x9>
c00021f8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021fa:	31 c0                	xor    eax,eax
c00021fc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021fe:	5a                   	pop    edx
c00021ff:	5b                   	pop    ebx
c0002200:	5e                   	pop    esi
c0002201:	c3                   	ret    

c0002202 <sync_window>:
c0002202:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002206:	74 58                	je     c0002260 <sync_window+0x5e>
c0002208:	56                   	push   esi
c0002209:	53                   	push   ebx
c000220a:	8d 70 34             	lea    esi,[eax+0x34]
c000220d:	51                   	push   ecx
c000220e:	89 c3                	mov    ebx,eax
c0002210:	6a 01                	push   0x1
c0002212:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002215:	56                   	push   esi
c0002216:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000221a:	50                   	push   eax
c000221b:	e8 ea fa ff ff       	call   c0001d0a <disk_write>
c0002220:	83 c4 10             	add    esp,0x10
c0002223:	ba 01 00 00 00       	mov    edx,0x1
c0002228:	85 c0                	test   eax,eax
c000222a:	75 2e                	jne    c000225a <sync_window+0x58>
c000222c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000222f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002232:	89 c1                	mov    ecx,eax
c0002234:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002238:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000223b:	39 d1                	cmp    ecx,edx
c000223d:	73 19                	jae    c0002258 <sync_window+0x56>
c000223f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002243:	75 13                	jne    c0002258 <sync_window+0x56>
c0002245:	6a 01                	push   0x1
c0002247:	01 d0                	add    eax,edx
c0002249:	50                   	push   eax
c000224a:	56                   	push   esi
c000224b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000224f:	50                   	push   eax
c0002250:	e8 b5 fa ff ff       	call   c0001d0a <disk_write>
c0002255:	83 c4 10             	add    esp,0x10
c0002258:	31 d2                	xor    edx,edx
c000225a:	89 d0                	mov    eax,edx
c000225c:	5a                   	pop    edx
c000225d:	5b                   	pop    ebx
c000225e:	5e                   	pop    esi
c000225f:	c3                   	ret    
c0002260:	31 d2                	xor    edx,edx
c0002262:	89 d0                	mov    eax,edx
c0002264:	c3                   	ret    

c0002265 <move_window>:
c0002265:	57                   	push   edi
c0002266:	56                   	push   esi
c0002267:	31 f6                	xor    esi,esi
c0002269:	53                   	push   ebx
c000226a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000226d:	74 32                	je     c00022a1 <move_window+0x3c>
c000226f:	89 c3                	mov    ebx,eax
c0002271:	89 d7                	mov    edi,edx
c0002273:	e8 8a ff ff ff       	call   c0002202 <sync_window>
c0002278:	89 c6                	mov    esi,eax
c000227a:	85 c0                	test   eax,eax
c000227c:	75 23                	jne    c00022a1 <move_window+0x3c>
c000227e:	6a 01                	push   0x1
c0002280:	8d 43 34             	lea    eax,[ebx+0x34]
c0002283:	57                   	push   edi
c0002284:	50                   	push   eax
c0002285:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002289:	50                   	push   eax
c000228a:	e8 65 fa ff ff       	call   c0001cf4 <disk_read>
c000228f:	83 c4 10             	add    esp,0x10
c0002292:	85 c0                	test   eax,eax
c0002294:	74 08                	je     c000229e <move_window+0x39>
c0002296:	be 01 00 00 00       	mov    esi,0x1
c000229b:	83 cf ff             	or     edi,0xffffffff
c000229e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00022a1:	89 f0                	mov    eax,esi
c00022a3:	5b                   	pop    ebx
c00022a4:	5e                   	pop    esi
c00022a5:	5f                   	pop    edi
c00022a6:	c3                   	ret    

c00022a7 <check_fs>:
c00022a7:	53                   	push   ebx
c00022a8:	89 c3                	mov    ebx,eax
c00022aa:	83 ec 08             	sub    esp,0x8
c00022ad:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022b1:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00022b8:	e8 a8 ff ff ff       	call   c0002265 <move_window>
c00022bd:	ba 04 00 00 00       	mov    edx,0x4
c00022c2:	85 c0                	test   eax,eax
c00022c4:	75 68                	jne    c000232e <check_fs+0x87>
c00022c6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022cc:	e8 6e fa ff ff       	call   c0001d3f <ld_word>
c00022d1:	ba 03 00 00 00       	mov    edx,0x3
c00022d6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022da:	75 52                	jne    c000232e <check_fs+0x87>
c00022dc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022df:	8d 50 18             	lea    edx,[eax+0x18]
c00022e2:	80 fa 01             	cmp    dl,0x1
c00022e5:	76 09                	jbe    c00022f0 <check_fs+0x49>
c00022e7:	ba 02 00 00 00       	mov    edx,0x2
c00022ec:	3c eb                	cmp    al,0xeb
c00022ee:	75 3e                	jne    c000232e <check_fs+0x87>
c00022f0:	ba e8 ee 01 c0       	mov    edx,0xc001eee8
c00022f5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022f8:	b9 03 00 00 00       	mov    ecx,0x3
c00022fd:	e8 89 fa ff ff       	call   c0001d8b <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 26                	je     c000232e <check_fs+0x87>
c0002308:	ba 9c cf 01 c0       	mov    edx,0xc001cf9c
c000230d:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002313:	b9 05 00 00 00       	mov    ecx,0x5
c0002318:	e8 6e fa ff ff       	call   c0001d8b <mem_cmp>
c000231d:	31 d2                	xor    edx,edx
c000231f:	85 c0                	test   eax,eax
c0002321:	74 0b                	je     c000232e <check_fs+0x87>
c0002323:	31 d2                	xor    edx,edx
c0002325:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002329:	0f 95 c2             	setne  dl
c000232c:	01 d2                	add    edx,edx
c000232e:	89 d0                	mov    eax,edx
c0002330:	83 c4 08             	add    esp,0x8
c0002333:	5b                   	pop    ebx
c0002334:	c3                   	ret    

c0002335 <find_volume>:
c0002335:	55                   	push   ebp
c0002336:	57                   	push   edi
c0002337:	56                   	push   esi
c0002338:	89 c6                	mov    esi,eax
c000233a:	53                   	push   ebx
c000233b:	89 d3                	mov    ebx,edx
c000233d:	83 ec 2c             	sub    esp,0x2c
c0002340:	31 d2                	xor    edx,edx
c0002342:	e8 60 ff ff ff       	call   c00022a7 <check_fs>
c0002347:	83 f8 02             	cmp    eax,0x2
c000234a:	74 06                	je     c0002352 <find_volume+0x1d>
c000234c:	77 62                	ja     c00023b0 <find_volume+0x7b>
c000234e:	85 db                	test   ebx,ebx
c0002350:	74 5e                	je     c00023b0 <find_volume+0x7b>
c0002352:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002356:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000235c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002362:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002366:	89 cf                	mov    edi,ecx
c0002368:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000236c:	89 e8                	mov    eax,ebp
c000236e:	83 c5 10             	add    ebp,0x10
c0002371:	e8 d6 f9 ff ff       	call   c0001d4c <ld_dword>
c0002376:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000237a:	89 01                	mov    DWORD PTR [ecx],eax
c000237c:	83 c1 04             	add    ecx,0x4
c000237f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002383:	75 e3                	jne    c0002368 <find_volume+0x33>
c0002385:	31 ed                	xor    ebp,ebp
c0002387:	85 db                	test   ebx,ebx
c0002389:	74 03                	je     c000238e <find_volume+0x59>
c000238b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000238e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002391:	b8 03 00 00 00       	mov    eax,0x3
c0002396:	85 d2                	test   edx,edx
c0002398:	74 0c                	je     c00023a6 <find_volume+0x71>
c000239a:	89 f0                	mov    eax,esi
c000239c:	e8 06 ff ff ff       	call   c00022a7 <check_fs>
c00023a1:	83 f8 01             	cmp    eax,0x1
c00023a4:	76 0a                	jbe    c00023b0 <find_volume+0x7b>
c00023a6:	85 db                	test   ebx,ebx
c00023a8:	75 06                	jne    c00023b0 <find_volume+0x7b>
c00023aa:	45                   	inc    ebp
c00023ab:	83 fd 03             	cmp    ebp,0x3
c00023ae:	76 de                	jbe    c000238e <find_volume+0x59>
c00023b0:	83 c4 2c             	add    esp,0x2c
c00023b3:	5b                   	pop    ebx
c00023b4:	5e                   	pop    esi
c00023b5:	5f                   	pop    edi
c00023b6:	5d                   	pop    ebp
c00023b7:	c3                   	ret    

c00023b8 <mount_volume>:
c00023b8:	55                   	push   ebp
c00023b9:	89 d5                	mov    ebp,edx
c00023bb:	57                   	push   edi
c00023bc:	89 cf                	mov    edi,ecx
c00023be:	56                   	push   esi
c00023bf:	53                   	push   ebx
c00023c0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023c5:	83 ec 2c             	sub    esp,0x2c
c00023c8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ce:	e8 9b fd ff ff       	call   c000216e <get_ldnumber>
c00023d3:	85 c0                	test   eax,eax
c00023d5:	0f 88 d6 02 00 00    	js     c00026b1 <mount_volume+0x2f9>
c00023db:	8b 34 85 20 ff 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe00e0]
c00023e2:	89 c2                	mov    edx,eax
c00023e4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023e9:	85 f6                	test   esi,esi
c00023eb:	0f 84 c0 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c00023f1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023f4:	83 e7 fe             	and    edi,0xfffffffe
c00023f7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023fa:	74 3a                	je     c0002436 <mount_volume+0x7e>
c00023fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002400:	83 ec 0c             	sub    esp,0xc
c0002403:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002407:	50                   	push   eax
c0002408:	e8 e1 f8 ff ff       	call   c0001cee <disk_status>
c000240d:	83 c4 10             	add    esp,0x10
c0002410:	a8 01                	test   al,0x1
c0002412:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002416:	75 1e                	jne    c0002436 <mount_volume+0x7e>
c0002418:	31 db                	xor    ebx,ebx
c000241a:	89 f9                	mov    ecx,edi
c000241c:	84 c9                	test   cl,cl
c000241e:	0f 84 8d 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002424:	a8 04                	test   al,0x4
c0002426:	0f 84 85 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c000242c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002431:	e9 7b 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002436:	83 ec 0c             	sub    esp,0xc
c0002439:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000243c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000243f:	0f b6 c2             	movzx  eax,dl
c0002442:	bb 03 00 00 00       	mov    ebx,0x3
c0002447:	50                   	push   eax
c0002448:	e8 a4 f8 ff ff       	call   c0001cf1 <disk_initialize>
c000244d:	83 c4 10             	add    esp,0x10
c0002450:	a8 01                	test   al,0x1
c0002452:	0f 85 59 02 00 00    	jne    c00026b1 <mount_volume+0x2f9>
c0002458:	89 f9                	mov    ecx,edi
c000245a:	84 c9                	test   cl,cl
c000245c:	74 04                	je     c0002462 <mount_volume+0xaa>
c000245e:	a8 04                	test   al,0x4
c0002460:	75 ca                	jne    c000242c <mount_volume+0x74>
c0002462:	31 d2                	xor    edx,edx
c0002464:	89 f0                	mov    eax,esi
c0002466:	bb 01 00 00 00       	mov    ebx,0x1
c000246b:	e8 c5 fe ff ff       	call   c0002335 <find_volume>
c0002470:	83 f8 04             	cmp    eax,0x4
c0002473:	0f 84 38 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002479:	83 f8 01             	cmp    eax,0x1
c000247c:	76 0a                	jbe    c0002488 <mount_volume+0xd0>
c000247e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002483:	e9 29 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002488:	8d 46 3f             	lea    eax,[esi+0x3f]
c000248b:	e8 af f8 ff ff       	call   c0001d3f <ld_word>
c0002490:	66 3d 00 02          	cmp    ax,0x200
c0002494:	75 e8                	jne    c000247e <mount_volume+0xc6>
c0002496:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002499:	e8 a1 f8 ff ff       	call   c0001d3f <ld_word>
c000249e:	0f b7 c0             	movzx  eax,ax
c00024a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024a5:	85 c0                	test   eax,eax
c00024a7:	75 0c                	jne    c00024b5 <mount_volume+0xfd>
c00024a9:	8d 46 58             	lea    eax,[esi+0x58]
c00024ac:	e8 9b f8 ff ff       	call   c0001d4c <ld_dword>
c00024b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024b5:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00024b8:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00024bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00024bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024c3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024c6:	89 e8                	mov    eax,ebp
c00024c8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024cb:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ce:	3c 01                	cmp    al,0x1
c00024d0:	77 ac                	ja     c000247e <mount_volume+0xc6>
c00024d2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024d6:	89 c3                	mov    ebx,eax
c00024d8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024dc:	66 85 c0             	test   ax,ax
c00024df:	74 9d                	je     c000247e <mount_volume+0xc6>
c00024e1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024e4:	85 d8                	test   eax,ebx
c00024e6:	75 96                	jne    c000247e <mount_volume+0xc6>
c00024e8:	8d 46 45             	lea    eax,[esi+0x45]
c00024eb:	e8 4f f8 ff ff       	call   c0001d3f <ld_word>
c00024f0:	89 c7                	mov    edi,eax
c00024f2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024f6:	a8 0f                	test   al,0xf
c00024f8:	75 84                	jne    c000247e <mount_volume+0xc6>
c00024fa:	8d 46 47             	lea    eax,[esi+0x47]
c00024fd:	e8 3d f8 ff ff       	call   c0001d3f <ld_word>
c0002502:	0f b7 d0             	movzx  edx,ax
c0002505:	85 d2                	test   edx,edx
c0002507:	75 0a                	jne    c0002513 <mount_volume+0x15b>
c0002509:	8d 46 54             	lea    eax,[esi+0x54]
c000250c:	e8 3b f8 ff ff       	call   c0001d4c <ld_dword>
c0002511:	89 c2                	mov    edx,eax
c0002513:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002517:	8d 46 42             	lea    eax,[esi+0x42]
c000251a:	e8 20 f8 ff ff       	call   c0001d3f <ld_word>
c000251f:	66 85 c0             	test   ax,ax
c0002522:	0f 84 56 ff ff ff    	je     c000247e <mount_volume+0xc6>
c0002528:	89 e9                	mov    ecx,ebp
c000252a:	0f b7 c0             	movzx  eax,ax
c000252d:	0f b6 e9             	movzx  ebp,cl
c0002530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002534:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002538:	89 f8                	mov    eax,edi
c000253a:	0f af cd             	imul   ecx,ebp
c000253d:	66 c1 e8 04          	shr    ax,0x4
c0002541:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002545:	0f b7 c0             	movzx  eax,ax
c0002548:	01 c8                	add    eax,ecx
c000254a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000254e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002552:	39 c2                	cmp    edx,eax
c0002554:	0f 82 24 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000255a:	29 c2                	sub    edx,eax
c000255c:	89 d5                	mov    ebp,edx
c000255e:	89 d0                	mov    eax,edx
c0002560:	31 d2                	xor    edx,edx
c0002562:	f7 f3                	div    ebx
c0002564:	39 dd                	cmp    ebp,ebx
c0002566:	0f 82 12 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000256c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002571:	0f 87 07 ff ff ff    	ja     c000247e <mount_volume+0xc6>
c0002577:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000257c:	0f 86 1f 01 00 00    	jbe    c00026a1 <mount_volume+0x2e9>
c0002582:	bb 03 00 00 00       	mov    ebx,0x3
c0002587:	8d 68 02             	lea    ebp,[eax+0x2]
c000258a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000258e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002592:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002596:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002599:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000259c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00025a0:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00025a3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00025a7:	83 fb 03             	cmp    ebx,0x3
c00025aa:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00025ad:	75 21                	jne    c00025d0 <mount_volume+0x218>
c00025af:	8d 46 5e             	lea    eax,[esi+0x5e]
c00025b2:	e8 88 f7 ff ff       	call   c0001d3f <ld_word>
c00025b7:	66 09 c7             	or     di,ax
c00025ba:	0f 85 be fe ff ff    	jne    c000247e <mount_volume+0xc6>
c00025c0:	8d 46 60             	lea    eax,[esi+0x60]
c00025c3:	c1 e5 02             	shl    ebp,0x2
c00025c6:	e8 81 f7 ff ff       	call   c0001d4c <ld_dword>
c00025cb:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ce:	eb 22                	jmp    c00025f2 <mount_volume+0x23a>
c00025d0:	66 85 ff             	test   di,di
c00025d3:	0f 84 a5 fe ff ff    	je     c000247e <mount_volume+0xc6>
c00025d9:	01 c8                	add    eax,ecx
c00025db:	83 fb 02             	cmp    ebx,0x2
c00025de:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025e1:	75 04                	jne    c00025e7 <mount_volume+0x22f>
c00025e3:	01 ed                	add    ebp,ebp
c00025e5:	eb 0b                	jmp    c00025f2 <mount_volume+0x23a>
c00025e7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025eb:	83 e5 01             	and    ebp,0x1
c00025ee:	d1 e8                	shr    eax,1
c00025f0:	01 c5                	add    ebp,eax
c00025f2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025f8:	c1 ed 09             	shr    ebp,0x9
c00025fb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025ff:	0f 87 79 fe ff ff    	ja     c000247e <mount_volume+0xc6>
c0002605:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c000260c:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002613:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002617:	83 fb 03             	cmp    ebx,0x3
c000261a:	75 6e                	jne    c000268a <mount_volume+0x2d2>
c000261c:	8d 46 64             	lea    eax,[esi+0x64]
c000261f:	e8 1b f7 ff ff       	call   c0001d3f <ld_word>
c0002624:	66 48                	dec    ax
c0002626:	75 62                	jne    c000268a <mount_volume+0x2d2>
c0002628:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000262c:	89 f0                	mov    eax,esi
c000262e:	42                   	inc    edx
c000262f:	e8 31 fc ff ff       	call   c0002265 <move_window>
c0002634:	85 c0                	test   eax,eax
c0002636:	75 52                	jne    c000268a <mount_volume+0x2d2>
c0002638:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000263c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002642:	e8 f8 f6 ff ff       	call   c0001d3f <ld_word>
c0002647:	66 3d 55 aa          	cmp    ax,0xaa55
c000264b:	75 3d                	jne    c000268a <mount_volume+0x2d2>
c000264d:	8d 46 34             	lea    eax,[esi+0x34]
c0002650:	e8 f7 f6 ff ff       	call   c0001d4c <ld_dword>
c0002655:	3d 52 52 61 41       	cmp    eax,0x41615252
c000265a:	75 2e                	jne    c000268a <mount_volume+0x2d2>
c000265c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002662:	e8 e5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002667:	3d 72 72 41 61       	cmp    eax,0x61417272
c000266c:	75 1c                	jne    c000268a <mount_volume+0x2d2>
c000266e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002674:	e8 d3 f6 ff ff       	call   c0001d4c <ld_dword>
c0002679:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000267c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002682:	e8 c5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002687:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000268a:	66 a1 00 ff 01 c0    	mov    ax,ds:0xc001ff00
c0002690:	88 1e                	mov    BYTE PTR [esi],bl
c0002692:	40                   	inc    eax
c0002693:	31 db                	xor    ebx,ebx
c0002695:	66 a3 00 ff 01 c0    	mov    ds:0xc001ff00,ax
c000269b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000269f:	eb 10                	jmp    c00026b1 <mount_volume+0x2f9>
c00026a1:	31 db                	xor    ebx,ebx
c00026a3:	3d f5 0f 00 00       	cmp    eax,0xff5
c00026a8:	0f 97 c3             	seta   bl
c00026ab:	43                   	inc    ebx
c00026ac:	e9 d6 fe ff ff       	jmp    c0002587 <mount_volume+0x1cf>
c00026b1:	83 c4 2c             	add    esp,0x2c
c00026b4:	89 d8                	mov    eax,ebx
c00026b6:	5b                   	pop    ebx
c00026b7:	5e                   	pop    esi
c00026b8:	5f                   	pop    edi
c00026b9:	5d                   	pop    ebp
c00026ba:	c3                   	ret    

c00026bb <put_fat>:
c00026bb:	55                   	push   ebp
c00026bc:	bd 02 00 00 00       	mov    ebp,0x2
c00026c1:	57                   	push   edi
c00026c2:	56                   	push   esi
c00026c3:	53                   	push   ebx
c00026c4:	83 ec 1c             	sub    esp,0x1c
c00026c7:	83 fa 01             	cmp    edx,0x1
c00026ca:	0f 86 31 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026d3:	0f 86 28 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d9:	89 c6                	mov    esi,eax
c00026db:	89 cf                	mov    edi,ecx
c00026dd:	8a 00                	mov    al,BYTE PTR [eax]
c00026df:	89 d3                	mov    ebx,edx
c00026e1:	3c 02                	cmp    al,0x2
c00026e3:	0f 84 ac 00 00 00    	je     c0002795 <put_fat+0xda>
c00026e9:	3c 03                	cmp    al,0x3
c00026eb:	0f 84 d1 00 00 00    	je     c00027c2 <put_fat+0x107>
c00026f1:	fe c8                	dec    al
c00026f3:	0f 85 08 01 00 00    	jne    c0002801 <put_fat+0x146>
c00026f9:	89 d1                	mov    ecx,edx
c00026fb:	89 f0                	mov    eax,esi
c00026fd:	d1 e9                	shr    ecx,1
c00026ff:	01 d1                	add    ecx,edx
c0002701:	89 ca                	mov    edx,ecx
c0002703:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002707:	c1 ea 09             	shr    edx,0x9
c000270a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000270d:	e8 53 fb ff ff       	call   c0002265 <move_window>
c0002712:	89 c5                	mov    ebp,eax
c0002714:	85 c0                	test   eax,eax
c0002716:	0f 85 e5 00 00 00    	jne    c0002801 <put_fat+0x146>
c000271c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002720:	8d 46 34             	lea    eax,[esi+0x34]
c0002723:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002727:	8d 41 01             	lea    eax,[ecx+0x1]
c000272a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002730:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002734:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002738:	89 f8                	mov    eax,edi
c000273a:	83 e3 01             	and    ebx,0x1
c000273d:	74 0c                	je     c000274b <put_fat+0x90>
c000273f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002741:	89 f8                	mov    eax,edi
c0002743:	83 e2 0f             	and    edx,0xf
c0002746:	c1 e0 04             	shl    eax,0x4
c0002749:	09 d0                	or     eax,edx
c000274b:	88 01                	mov    BYTE PTR [ecx],al
c000274d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002751:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002755:	c1 ea 09             	shr    edx,0x9
c0002758:	89 f0                	mov    eax,esi
c000275a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000275d:	e8 03 fb ff ff       	call   c0002265 <move_window>
c0002762:	89 c5                	mov    ebp,eax
c0002764:	85 c0                	test   eax,eax
c0002766:	0f 85 95 00 00 00    	jne    c0002801 <put_fat+0x146>
c000276c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002770:	25 ff 01 00 00       	and    eax,0x1ff
c0002775:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002779:	85 db                	test   ebx,ebx
c000277b:	74 07                	je     c0002784 <put_fat+0xc9>
c000277d:	c1 ef 04             	shr    edi,0x4
c0002780:	89 f9                	mov    ecx,edi
c0002782:	eb 0d                	jmp    c0002791 <put_fat+0xd6>
c0002784:	8a 08                	mov    cl,BYTE PTR [eax]
c0002786:	c1 ef 08             	shr    edi,0x8
c0002789:	83 e1 f0             	and    ecx,0xfffffff0
c000278c:	83 e7 0f             	and    edi,0xf
c000278f:	09 f9                	or     ecx,edi
c0002791:	88 08                	mov    BYTE PTR [eax],cl
c0002793:	eb 27                	jmp    c00027bc <put_fat+0x101>
c0002795:	c1 ea 08             	shr    edx,0x8
c0002798:	89 f0                	mov    eax,esi
c000279a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000279d:	e8 c3 fa ff ff       	call   c0002265 <move_window>
c00027a2:	89 c5                	mov    ebp,eax
c00027a4:	85 c0                	test   eax,eax
c00027a6:	75 59                	jne    c0002801 <put_fat+0x146>
c00027a8:	01 db                	add    ebx,ebx
c00027aa:	0f b7 d7             	movzx  edx,di
c00027ad:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00027b3:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00027b7:	e8 a8 f5 ff ff       	call   c0001d64 <st_word>
c00027bc:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027c0:	eb 3f                	jmp    c0002801 <put_fat+0x146>
c00027c2:	c1 ea 07             	shr    edx,0x7
c00027c5:	89 f0                	mov    eax,esi
c00027c7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027ca:	e8 96 fa ff ff       	call   c0002265 <move_window>
c00027cf:	89 c5                	mov    ebp,eax
c00027d1:	85 c0                	test   eax,eax
c00027d3:	75 2c                	jne    c0002801 <put_fat+0x146>
c00027d5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027db:	c1 e3 02             	shl    ebx,0x2
c00027de:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027e4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027e8:	89 d8                	mov    eax,ebx
c00027ea:	e8 5d f5 ff ff       	call   c0001d4c <ld_dword>
c00027ef:	25 00 00 00 f0       	and    eax,0xf0000000
c00027f4:	09 f8                	or     eax,edi
c00027f6:	89 c2                	mov    edx,eax
c00027f8:	89 d8                	mov    eax,ebx
c00027fa:	e8 69 f5 ff ff       	call   c0001d68 <st_dword>
c00027ff:	eb bb                	jmp    c00027bc <put_fat+0x101>
c0002801:	83 c4 1c             	add    esp,0x1c
c0002804:	89 e8                	mov    eax,ebp
c0002806:	5b                   	pop    ebx
c0002807:	5e                   	pop    esi
c0002808:	5f                   	pop    edi
c0002809:	5d                   	pop    ebp
c000280a:	c3                   	ret    

c000280b <dir_clear>:
c000280b:	55                   	push   ebp
c000280c:	57                   	push   edi
c000280d:	56                   	push   esi
c000280e:	89 c6                	mov    esi,eax
c0002810:	53                   	push   ebx
c0002811:	83 ec 1c             	sub    esp,0x1c
c0002814:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002818:	e8 e5 f9 ff ff       	call   c0002202 <sync_window>
c000281d:	85 c0                	test   eax,eax
c000281f:	0f 85 c0 00 00 00    	jne    c00028e5 <dir_clear+0xda>
c0002825:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002829:	89 f0                	mov    eax,esi
c000282b:	e8 55 f7 ff ff       	call   c0001f85 <clst2sect>
c0002830:	31 d2                	xor    edx,edx
c0002832:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002835:	89 c5                	mov    ebp,eax
c0002837:	b9 00 02 00 00       	mov    ecx,0x200
c000283c:	8d 46 34             	lea    eax,[esi+0x34]
c000283f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002843:	e8 38 f5 ff ff       	call   c0001d80 <mem_set>
c0002848:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000284c:	c1 e3 09             	shl    ebx,0x9
c000284f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002855:	76 1b                	jbe    c0002872 <dir_clear+0x67>
c0002857:	bb 00 80 00 00       	mov    ebx,0x8000
c000285c:	eb 14                	jmp    c0002872 <dir_clear+0x67>
c000285e:	83 ec 0c             	sub    esp,0xc
c0002861:	53                   	push   ebx
c0002862:	e8 25 32 00 00       	call   c0005a8c <ff_memalloc>
c0002867:	83 c4 10             	add    esp,0x10
c000286a:	89 c7                	mov    edi,eax
c000286c:	85 c0                	test   eax,eax
c000286e:	75 7c                	jne    c00028ec <dir_clear+0xe1>
c0002870:	d1 eb                	shr    ebx,1
c0002872:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002878:	77 e4                	ja     c000285e <dir_clear+0x53>
c000287a:	31 db                	xor    ebx,ebx
c000287c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002880:	39 d8                	cmp    eax,ebx
c0002882:	76 53                	jbe    c00028d7 <dir_clear+0xcc>
c0002884:	6a 01                	push   0x1
c0002886:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002889:	50                   	push   eax
c000288a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002892:	50                   	push   eax
c0002893:	e8 72 f4 ff ff       	call   c0001d0a <disk_write>
c0002898:	83 c4 10             	add    esp,0x10
c000289b:	85 c0                	test   eax,eax
c000289d:	75 38                	jne    c00028d7 <dir_clear+0xcc>
c000289f:	43                   	inc    ebx
c00028a0:	eb da                	jmp    c000287c <dir_clear+0x71>
c00028a2:	52                   	push   edx
c00028a3:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00028a6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00028aa:	50                   	push   eax
c00028ab:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00028af:	57                   	push   edi
c00028b0:	50                   	push   eax
c00028b1:	e8 54 f4 ff ff       	call   c0001d0a <disk_write>
c00028b6:	83 c4 10             	add    esp,0x10
c00028b9:	85 c0                	test   eax,eax
c00028bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028bf:	75 0a                	jne    c00028cb <dir_clear+0xc0>
c00028c1:	01 d3                	add    ebx,edx
c00028c3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028c7:	39 d8                	cmp    eax,ebx
c00028c9:	77 d7                	ja     c00028a2 <dir_clear+0x97>
c00028cb:	83 ec 0c             	sub    esp,0xc
c00028ce:	57                   	push   edi
c00028cf:	e8 d0 31 00 00       	call   c0005aa4 <ff_memfree>
c00028d4:	83 c4 10             	add    esp,0x10
c00028d7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028db:	39 d8                	cmp    eax,ebx
c00028dd:	0f 95 c0             	setne  al
c00028e0:	0f b6 c0             	movzx  eax,al
c00028e3:	eb 19                	jmp    c00028fe <dir_clear+0xf3>
c00028e5:	b8 01 00 00 00       	mov    eax,0x1
c00028ea:	eb 12                	jmp    c00028fe <dir_clear+0xf3>
c00028ec:	89 d9                	mov    ecx,ebx
c00028ee:	31 d2                	xor    edx,edx
c00028f0:	e8 8b f4 ff ff       	call   c0001d80 <mem_set>
c00028f5:	89 da                	mov    edx,ebx
c00028f7:	31 db                	xor    ebx,ebx
c00028f9:	c1 ea 09             	shr    edx,0x9
c00028fc:	eb c5                	jmp    c00028c3 <dir_clear+0xb8>
c00028fe:	83 c4 1c             	add    esp,0x1c
c0002901:	5b                   	pop    ebx
c0002902:	5e                   	pop    esi
c0002903:	5f                   	pop    edi
c0002904:	5d                   	pop    ebp
c0002905:	c3                   	ret    

c0002906 <create_name>:
c0002906:	55                   	push   ebp
c0002907:	89 d5                	mov    ebp,edx
c0002909:	57                   	push   edi
c000290a:	89 c7                	mov    edi,eax
c000290c:	56                   	push   esi
c000290d:	31 f6                	xor    esi,esi
c000290f:	53                   	push   ebx
c0002910:	83 ec 3c             	sub    esp,0x3c
c0002913:	8b 02                	mov    eax,DWORD PTR [edx]
c0002915:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002919:	8b 07                	mov    eax,DWORD PTR [edi]
c000291b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000291e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002922:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002926:	e8 9b f4 ff ff       	call   c0001dc6 <tchar2uni>
c000292b:	89 c3                	mov    ebx,eax
c000292d:	83 f8 ff             	cmp    eax,0xffffffff
c0002930:	75 0a                	jne    c000293c <create_name+0x36>
c0002932:	b8 06 00 00 00       	mov    eax,0x6
c0002937:	e9 9e 02 00 00       	jmp    c0002bda <create_name+0x2d4>
c000293c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002941:	76 0c                	jbe    c000294f <create_name+0x49>
c0002943:	c1 e8 10             	shr    eax,0x10
c0002946:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000294a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000294e:	46                   	inc    esi
c000294f:	66 83 fb 1f          	cmp    bx,0x1f
c0002953:	76 4f                	jbe    c00029a4 <create_name+0x9e>
c0002955:	66 83 fb 5c          	cmp    bx,0x5c
c0002959:	74 35                	je     c0002990 <create_name+0x8a>
c000295b:	66 83 fb 2f          	cmp    bx,0x2f
c000295f:	74 2f                	je     c0002990 <create_name+0x8a>
c0002961:	66 83 fb 7f          	cmp    bx,0x7f
c0002965:	77 11                	ja     c0002978 <create_name+0x72>
c0002967:	0f b7 d3             	movzx  edx,bx
c000296a:	b8 a2 cf 01 c0       	mov    eax,0xc001cfa2
c000296f:	e8 3a f4 ff ff       	call   c0001dae <chk_chr>
c0002974:	85 c0                	test   eax,eax
c0002976:	75 ba                	jne    c0002932 <create_name+0x2c>
c0002978:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000297e:	77 b2                	ja     c0002932 <create_name+0x2c>
c0002980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002984:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002988:	46                   	inc    esi
c0002989:	eb 97                	jmp    c0002922 <create_name+0x1c>
c000298b:	40                   	inc    eax
c000298c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002990:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002994:	8a 10                	mov    dl,BYTE PTR [eax]
c0002996:	80 fa 2f             	cmp    dl,0x2f
c0002999:	74 f0                	je     c000298b <create_name+0x85>
c000299b:	80 fa 5c             	cmp    dl,0x5c
c000299e:	74 eb                	je     c000298b <create_name+0x85>
c00029a0:	31 db                	xor    ebx,ebx
c00029a2:	eb 02                	jmp    c00029a6 <create_name+0xa0>
c00029a4:	b3 04                	mov    bl,0x4
c00029a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00029aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00029ad:	85 f6                	test   esi,esi
c00029af:	74 18                	je     c00029c9 <create_name+0xc3>
c00029b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029b5:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00029ba:	66 83 f8 20          	cmp    ax,0x20
c00029be:	74 06                	je     c00029c6 <create_name+0xc0>
c00029c0:	66 83 f8 2e          	cmp    ax,0x2e
c00029c4:	75 03                	jne    c00029c9 <create_name+0xc3>
c00029c6:	4e                   	dec    esi
c00029c7:	eb e4                	jmp    c00029ad <create_name+0xa7>
c00029c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029cd:	31 ed                	xor    ebp,ebp
c00029cf:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029d5:	85 f6                	test   esi,esi
c00029d7:	0f 84 55 ff ff ff    	je     c0002932 <create_name+0x2c>
c00029dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029e4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029e8:	66 83 f8 20          	cmp    ax,0x20
c00029ec:	75 04                	jne    c00029f2 <create_name+0xec>
c00029ee:	89 d5                	mov    ebp,edx
c00029f0:	eb eb                	jmp    c00029dd <create_name+0xd7>
c00029f2:	85 ed                	test   ebp,ebp
c00029f4:	75 06                	jne    c00029fc <create_name+0xf6>
c00029f6:	66 83 f8 2e          	cmp    ax,0x2e
c00029fa:	75 08                	jne    c0002a04 <create_name+0xfe>
c00029fc:	83 cb 03             	or     ebx,0x3
c00029ff:	eb 03                	jmp    c0002a04 <create_name+0xfe>
c0002a01:	4e                   	dec    esi
c0002a02:	74 0c                	je     c0002a10 <create_name+0x10a>
c0002a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a08:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002a0e:	75 f1                	jne    c0002a01 <create_name+0xfb>
c0002a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0002a15:	8d 47 20             	lea    eax,[edi+0x20]
c0002a18:	ba 20 00 00 00       	mov    edx,0x20
c0002a1d:	e8 5e f3 ff ff       	call   c0001d80 <mem_set>
c0002a22:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a2a:	31 c9                	xor    ecx,ecx
c0002a2c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a31:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a3c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a40:	66 85 ed             	test   bp,bp
c0002a43:	0f 84 30 01 00 00    	je     c0002b79 <create_name+0x273>
c0002a49:	66 83 fd 20          	cmp    bp,0x20
c0002a4d:	74 10                	je     c0002a5f <create_name+0x159>
c0002a4f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a53:	75 13                	jne    c0002a68 <create_name+0x162>
c0002a55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a59:	0f 84 6b 01 00 00    	je     c0002bca <create_name+0x2c4>
c0002a5f:	83 cb 03             	or     ebx,0x3
c0002a62:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a66:	eb c9                	jmp    c0002a31 <create_name+0x12b>
c0002a68:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a6c:	73 0b                	jae    c0002a79 <create_name+0x173>
c0002a6e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a72:	75 47                	jne    c0002abb <create_name+0x1b5>
c0002a74:	e9 51 01 00 00       	jmp    c0002bca <create_name+0x2c4>
c0002a79:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a7e:	75 10                	jne    c0002a90 <create_name+0x18a>
c0002a80:	83 cb 03             	or     ebx,0x3
c0002a83:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a8b:	e9 e9 00 00 00       	jmp    c0002b79 <create_name+0x273>
c0002a90:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a94:	74 0d                	je     c0002aa3 <create_name+0x19d>
c0002a96:	83 cb 03             	or     ebx,0x3
c0002a99:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a9d:	0f 87 d6 00 00 00    	ja     c0002b79 <create_name+0x273>
c0002aa3:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002aa8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002aac:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002ab4:	b9 08 00 00 00       	mov    ecx,0x8
c0002ab9:	eb a7                	jmp    c0002a62 <create_name+0x15c>
c0002abb:	66 83 fd 7f          	cmp    bp,0x7f
c0002abf:	76 68                	jbe    c0002b29 <create_name+0x223>
c0002ac1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002ac5:	88 da                	mov    dl,bl
c0002ac7:	83 ca 02             	or     edx,0x2
c0002aca:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002ace:	50                   	push   eax
c0002acf:	50                   	push   eax
c0002ad0:	68 b5 01 00 00       	push   0x1b5
c0002ad5:	55                   	push   ebp
c0002ad6:	e8 e1 2f 00 00       	call   c0005abc <ff_uni2oem>
c0002adb:	83 c4 10             	add    esp,0x10
c0002ade:	89 c5                	mov    ebp,eax
c0002ae0:	a8 80                	test   al,0x80
c0002ae2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ae6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aea:	74 0c                	je     c0002af8 <create_name+0x1f2>
c0002aec:	83 e5 7f             	and    ebp,0x7f
c0002aef:	0f b6 ad 60 d0 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2fa0]
c0002af6:	eb 2a                	jmp    c0002b22 <create_name+0x21c>
c0002af8:	66 3d ff 00          	cmp    ax,0xff
c0002afc:	76 24                	jbe    c0002b22 <create_name+0x21c>
c0002afe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b02:	48                   	dec    eax
c0002b03:	39 c8                	cmp    eax,ecx
c0002b05:	77 0c                	ja     c0002b13 <create_name+0x20d>
c0002b07:	83 cb 03             	or     ebx,0x3
c0002b0a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002b0e:	e9 4f ff ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b13:	89 e8                	mov    eax,ebp
c0002b15:	88 d3                	mov    bl,dl
c0002b17:	66 c1 e8 08          	shr    ax,0x8
c0002b1b:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b1f:	41                   	inc    ecx
c0002b20:	eb 4b                	jmp    c0002b6d <create_name+0x267>
c0002b22:	88 d3                	mov    bl,dl
c0002b24:	66 85 ed             	test   bp,bp
c0002b27:	74 19                	je     c0002b42 <create_name+0x23c>
c0002b29:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b2d:	0f b7 d5             	movzx  edx,bp
c0002b30:	b8 ab cf 01 c0       	mov    eax,0xc001cfab
c0002b35:	e8 74 f2 ff ff       	call   c0001dae <chk_chr>
c0002b3a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b3e:	85 c0                	test   eax,eax
c0002b40:	74 0a                	je     c0002b4c <create_name+0x246>
c0002b42:	83 cb 03             	or     ebx,0x3
c0002b45:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b4a:	eb 21                	jmp    c0002b6d <create_name+0x267>
c0002b4c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b4f:	66 83 f8 19          	cmp    ax,0x19
c0002b53:	77 07                	ja     c0002b5c <create_name+0x256>
c0002b55:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b5a:	eb 11                	jmp    c0002b6d <create_name+0x267>
c0002b5c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b5f:	66 83 f8 19          	cmp    ax,0x19
c0002b63:	77 08                	ja     c0002b6d <create_name+0x267>
c0002b65:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b6a:	83 ed 20             	sub    ebp,0x20
c0002b6d:	89 e8                	mov    eax,ebp
c0002b6f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b73:	41                   	inc    ecx
c0002b74:	e9 e9 fe ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b79:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b7d:	75 04                	jne    c0002b83 <create_name+0x27d>
c0002b7f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b83:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b88:	75 05                	jne    c0002b8f <create_name+0x289>
c0002b8a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b8f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b93:	83 e0 0c             	and    eax,0xc
c0002b96:	3c 0c                	cmp    al,0xc
c0002b98:	74 0b                	je     c0002ba5 <create_name+0x29f>
c0002b9a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b9e:	83 e0 03             	and    eax,0x3
c0002ba1:	3c 03                	cmp    al,0x3
c0002ba3:	75 05                	jne    c0002baa <create_name+0x2a4>
c0002ba5:	83 cb 02             	or     ebx,0x2
c0002ba8:	eb 19                	jmp    c0002bc3 <create_name+0x2bd>
c0002baa:	f6 c3 02             	test   bl,0x2
c0002bad:	75 14                	jne    c0002bc3 <create_name+0x2bd>
c0002baf:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002bb4:	74 03                	je     c0002bb9 <create_name+0x2b3>
c0002bb6:	83 cb 10             	or     ebx,0x10
c0002bb9:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002bbe:	74 03                	je     c0002bc3 <create_name+0x2bd>
c0002bc0:	83 cb 08             	or     ebx,0x8
c0002bc3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002bc6:	31 c0                	xor    eax,eax
c0002bc8:	eb 10                	jmp    c0002bda <create_name+0x2d4>
c0002bca:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002bcf:	0f 85 ce fe ff ff    	jne    c0002aa3 <create_name+0x19d>
c0002bd5:	e9 a6 fe ff ff       	jmp    c0002a80 <create_name+0x17a>
c0002bda:	83 c4 3c             	add    esp,0x3c
c0002bdd:	5b                   	pop    ebx
c0002bde:	5e                   	pop    esi
c0002bdf:	5f                   	pop    edi
c0002be0:	5d                   	pop    ebp
c0002be1:	c3                   	ret    

c0002be2 <cmp_lfn>:
c0002be2:	55                   	push   ebp
c0002be3:	57                   	push   edi
c0002be4:	89 d7                	mov    edi,edx
c0002be6:	56                   	push   esi
c0002be7:	53                   	push   ebx
c0002be8:	83 ec 1c             	sub    esp,0x1c
c0002beb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bef:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bf2:	e8 48 f1 ff ff       	call   c0001d3f <ld_word>
c0002bf7:	66 85 c0             	test   ax,ax
c0002bfa:	74 07                	je     c0002c03 <cmp_lfn+0x21>
c0002bfc:	31 c0                	xor    eax,eax
c0002bfe:	e9 9a 00 00 00       	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c03:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002c05:	bd 01 00 00 00       	mov    ebp,0x1
c0002c0a:	83 e3 3f             	and    ebx,0x3f
c0002c0d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002c15:	4b                   	dec    ebx
c0002c16:	6b db 0d             	imul   ebx,ebx,0xd
c0002c19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002c1d:	0f b6 80 e0 d0 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2f20]
c0002c24:	01 f8                	add    eax,edi
c0002c26:	e8 14 f1 ff ff       	call   c0001d3f <ld_word>
c0002c2b:	66 85 ed             	test   bp,bp
c0002c2e:	89 c6                	mov    esi,eax
c0002c30:	74 3c                	je     c0002c6e <cmp_lfn+0x8c>
c0002c32:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c38:	77 c2                	ja     c0002bfc <cmp_lfn+0x1a>
c0002c3a:	83 ec 0c             	sub    esp,0xc
c0002c3d:	0f b7 c0             	movzx  eax,ax
c0002c40:	50                   	push   eax
c0002c41:	e8 8e 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c46:	89 c5                	mov    ebp,eax
c0002c48:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c53:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c57:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c5a:	e8 75 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c5f:	83 c4 10             	add    esp,0x10
c0002c62:	39 c5                	cmp    ebp,eax
c0002c64:	75 96                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c66:	89 f5                	mov    ebp,esi
c0002c68:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c6c:	eb 04                	jmp    c0002c72 <cmp_lfn+0x90>
c0002c6e:	66 46                	inc    si
c0002c70:	75 8a                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c72:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c76:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c7b:	75 9c                	jne    c0002c19 <cmp_lfn+0x37>
c0002c7d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c80:	74 16                	je     c0002c98 <cmp_lfn+0xb6>
c0002c82:	66 85 ed             	test   bp,bp
c0002c85:	74 11                	je     c0002c98 <cmp_lfn+0xb6>
c0002c87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c8b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c90:	0f 94 c0             	sete   al
c0002c93:	0f b6 c0             	movzx  eax,al
c0002c96:	eb 05                	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c98:	b8 01 00 00 00       	mov    eax,0x1
c0002c9d:	83 c4 1c             	add    esp,0x1c
c0002ca0:	5b                   	pop    ebx
c0002ca1:	5e                   	pop    esi
c0002ca2:	5f                   	pop    edi
c0002ca3:	5d                   	pop    ebp
c0002ca4:	c3                   	ret    

c0002ca5 <sync_fs>:
c0002ca5:	56                   	push   esi
c0002ca6:	53                   	push   ebx
c0002ca7:	53                   	push   ebx
c0002ca8:	89 c3                	mov    ebx,eax
c0002caa:	e8 53 f5 ff ff       	call   c0002202 <sync_window>
c0002caf:	85 c0                	test   eax,eax
c0002cb1:	0f 85 9a 00 00 00    	jne    c0002d51 <sync_fs+0xac>
c0002cb7:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002cba:	75 7b                	jne    c0002d37 <sync_fs+0x92>
c0002cbc:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002cc0:	75 75                	jne    c0002d37 <sync_fs+0x92>
c0002cc2:	b9 00 02 00 00       	mov    ecx,0x200
c0002cc7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002cca:	31 d2                	xor    edx,edx
c0002ccc:	89 f0                	mov    eax,esi
c0002cce:	e8 ad f0 ff ff       	call   c0001d80 <mem_set>
c0002cd3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cd9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cde:	e8 81 f0 ff ff       	call   c0001d64 <st_word>
c0002ce3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002ce8:	89 f0                	mov    eax,esi
c0002cea:	e8 79 f0 ff ff       	call   c0001d68 <st_dword>
c0002cef:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cf5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cfa:	e8 69 f0 ff ff       	call   c0001d68 <st_dword>
c0002cff:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002d02:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002d08:	e8 5b f0 ff ff       	call   c0001d68 <st_dword>
c0002d0d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002d10:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002d16:	e8 4d f0 ff ff       	call   c0001d68 <st_dword>
c0002d1b:	6a 01                	push   0x1
c0002d1d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d20:	40                   	inc    eax
c0002d21:	50                   	push   eax
c0002d22:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d25:	56                   	push   esi
c0002d26:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d2a:	50                   	push   eax
c0002d2b:	e8 da ef ff ff       	call   c0001d0a <disk_write>
c0002d30:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d34:	83 c4 10             	add    esp,0x10
c0002d37:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d3b:	51                   	push   ecx
c0002d3c:	6a 00                	push   0x0
c0002d3e:	6a 00                	push   0x0
c0002d40:	50                   	push   eax
c0002d41:	e8 da ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d46:	83 c4 10             	add    esp,0x10
c0002d49:	85 c0                	test   eax,eax
c0002d4b:	0f 95 c0             	setne  al
c0002d4e:	0f b6 c0             	movzx  eax,al
c0002d51:	5a                   	pop    edx
c0002d52:	5b                   	pop    ebx
c0002d53:	5e                   	pop    esi
c0002d54:	c3                   	ret    

c0002d55 <create_partition>:
c0002d55:	55                   	push   ebp
c0002d56:	0f b6 c0             	movzx  eax,al
c0002d59:	57                   	push   edi
c0002d5a:	56                   	push   esi
c0002d5b:	53                   	push   ebx
c0002d5c:	83 ec 40             	sub    esp,0x40
c0002d5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d63:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d6f:	50                   	push   eax
c0002d70:	6a 01                	push   0x1
c0002d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d76:	e8 a5 ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d7b:	83 c4 10             	add    esp,0x10
c0002d7e:	85 c0                	test   eax,eax
c0002d80:	0f 85 69 01 00 00    	jne    c0002eef <create_partition+0x19a>
c0002d86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d8a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d93:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d98:	31 d2                	xor    edx,edx
c0002d9a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002da3:	f7 f3                	div    ebx
c0002da5:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002daa:	76 0c                	jbe    c0002db8 <create_partition+0x63>
c0002dac:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002db0:	49                   	dec    ecx
c0002db1:	75 e5                	jne    c0002d98 <create_partition+0x43>
c0002db3:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002db8:	b9 00 02 00 00       	mov    ecx,0x200
c0002dbd:	31 d2                	xor    edx,edx
c0002dbf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dc3:	e8 b8 ef ff ff       	call   c0001d80 <mem_set>
c0002dc8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002dd1:	31 d2                	xor    edx,edx
c0002dd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002ddb:	f7 f1                	div    ecx
c0002ddd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002de2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002de6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dea:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002df0:	85 c9                	test   ecx,ecx
c0002df2:	75 34                	jne    c0002e28 <create_partition+0xd3>
c0002df4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002df8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dfd:	05 fe 01 00 00       	add    eax,0x1fe
c0002e02:	e8 5d ef ff ff       	call   c0001d64 <st_word>
c0002e07:	6a 01                	push   0x1
c0002e09:	6a 00                	push   0x0
c0002e0b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002e13:	e8 f2 ee ff ff       	call   c0001d0a <disk_write>
c0002e18:	83 c4 10             	add    esp,0x10
c0002e1b:	85 c0                	test   eax,eax
c0002e1d:	0f 95 c0             	setne  al
c0002e20:	0f b6 c0             	movzx  eax,al
c0002e23:	e9 cc 00 00 00       	jmp    c0002ef4 <create_partition+0x19f>
c0002e28:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e2c:	76 c6                	jbe    c0002df4 <create_partition+0x9f>
c0002e2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e32:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e36:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e39:	83 fe 64             	cmp    esi,0x64
c0002e3c:	77 0d                	ja     c0002e4b <create_partition+0xf6>
c0002e3e:	74 07                	je     c0002e47 <create_partition+0xf2>
c0002e40:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e45:	eb 04                	jmp    c0002e4b <create_partition+0xf6>
c0002e47:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e4b:	31 c0                	xor    eax,eax
c0002e4d:	89 f2                	mov    edx,esi
c0002e4f:	01 ca                	add    edx,ecx
c0002e51:	0f 92 c0             	setb   al
c0002e54:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e58:	77 04                	ja     c0002e5e <create_partition+0x109>
c0002e5a:	85 c0                	test   eax,eax
c0002e5c:	74 08                	je     c0002e66 <create_partition+0x111>
c0002e5e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e62:	29 ce                	sub    esi,ecx
c0002e64:	eb 04                	jmp    c0002e6a <create_partition+0x115>
c0002e66:	85 f6                	test   esi,esi
c0002e68:	74 8a                	je     c0002df4 <create_partition+0x9f>
c0002e6a:	89 ca                	mov    edx,ecx
c0002e6c:	89 d8                	mov    eax,ebx
c0002e6e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e73:	e8 f0 ee ff ff       	call   c0001d68 <st_dword>
c0002e78:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e7b:	89 f2                	mov    edx,esi
c0002e7d:	83 c3 10             	add    ebx,0x10
c0002e80:	e8 e3 ee ff ff       	call   c0001d68 <st_dword>
c0002e85:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e8a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e8e:	31 d2                	xor    edx,edx
c0002e90:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e93:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e97:	89 c8                	mov    eax,ecx
c0002e99:	01 f1                	add    ecx,esi
c0002e9b:	f7 f5                	div    ebp
c0002e9d:	89 d5                	mov    ebp,edx
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	45                   	inc    ebp
c0002ea2:	f7 f7                	div    edi
c0002ea4:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002ea7:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002eaa:	89 c2                	mov    edx,eax
c0002eac:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002eaf:	c1 ea 02             	shr    edx,0x2
c0002eb2:	83 e2 c0             	and    edx,0xffffffc0
c0002eb5:	09 ea                	or     edx,ebp
c0002eb7:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002ebc:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002ebf:	31 d2                	xor    edx,edx
c0002ec1:	f7 f5                	div    ebp
c0002ec3:	89 d6                	mov    esi,edx
c0002ec5:	31 d2                	xor    edx,edx
c0002ec7:	46                   	inc    esi
c0002ec8:	f7 f7                	div    edi
c0002eca:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ecd:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002ed0:	89 c7                	mov    edi,eax
c0002ed2:	c1 ef 02             	shr    edi,0x2
c0002ed5:	83 e7 c0             	and    edi,0xffffffc0
c0002ed8:	09 fe                	or     esi,edi
c0002eda:	89 f2                	mov    edx,esi
c0002edc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002edf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ee4:	0f 85 06 ff ff ff    	jne    c0002df0 <create_partition+0x9b>
c0002eea:	e9 05 ff ff ff       	jmp    c0002df4 <create_partition+0x9f>
c0002eef:	b8 01 00 00 00       	mov    eax,0x1
c0002ef4:	83 c4 3c             	add    esp,0x3c
c0002ef7:	5b                   	pop    ebx
c0002ef8:	5e                   	pop    esi
c0002ef9:	5f                   	pop    edi
c0002efa:	5d                   	pop    ebp
c0002efb:	c3                   	ret    

c0002efc <get_fileinfo>:
c0002efc:	55                   	push   ebp
c0002efd:	57                   	push   edi
c0002efe:	56                   	push   esi
c0002eff:	53                   	push   ebx
c0002f00:	83 ec 1c             	sub    esp,0x1c
c0002f03:	8b 30                	mov    esi,DWORD PTR [eax]
c0002f05:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002f09:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002f0d:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002f11:	0f 84 c1 01 00 00    	je     c00030d8 <get_fileinfo+0x1dc>
c0002f17:	89 d3                	mov    ebx,edx
c0002f19:	89 c6                	mov    esi,eax
c0002f1b:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002f1f:	74 6a                	je     c0002f8b <get_fileinfo+0x8f>
c0002f21:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f29:	31 ed                	xor    ebp,ebp
c0002f2b:	31 ff                	xor    edi,edi
c0002f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f38:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f3c:	66 85 d2             	test   dx,dx
c0002f3f:	74 3e                	je     c0002f7f <get_fileinfo+0x83>
c0002f41:	66 85 ed             	test   bp,bp
c0002f44:	75 0c                	jne    c0002f52 <get_fileinfo+0x56>
c0002f46:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f4c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f50:	76 22                	jbe    c0002f74 <get_fileinfo+0x78>
c0002f52:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f57:	89 e8                	mov    eax,ebp
c0002f59:	29 f9                	sub    ecx,edi
c0002f5b:	c1 e0 10             	shl    eax,0x10
c0002f5e:	09 d0                	or     eax,edx
c0002f60:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f64:	e8 23 ef ff ff       	call   c0001e8c <put_utf>
c0002f69:	84 c0                	test   al,al
c0002f6b:	74 10                	je     c0002f7d <get_fileinfo+0x81>
c0002f6d:	0f b6 c0             	movzx  eax,al
c0002f70:	31 d2                	xor    edx,edx
c0002f72:	01 c7                	add    edi,eax
c0002f74:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f79:	89 d5                	mov    ebp,edx
c0002f7b:	eb b0                	jmp    c0002f2d <get_fileinfo+0x31>
c0002f7d:	31 ff                	xor    edi,edi
c0002f7f:	66 85 ed             	test   bp,bp
c0002f82:	74 02                	je     c0002f86 <get_fileinfo+0x8a>
c0002f84:	31 ff                	xor    edi,edi
c0002f86:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f8b:	31 ff                	xor    edi,edi
c0002f8d:	31 c9                	xor    ecx,ecx
c0002f8f:	83 f9 0a             	cmp    ecx,0xa
c0002f92:	0f 87 ad 00 00 00    	ja     c0003045 <get_fileinfo+0x149>
c0002f98:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f9b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f9e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002fa2:	66 83 fa 20          	cmp    dx,0x20
c0002fa6:	0f 84 92 00 00 00    	je     c000303e <get_fileinfo+0x142>
c0002fac:	66 83 fa 05          	cmp    dx,0x5
c0002fb0:	75 05                	jne    c0002fb7 <get_fileinfo+0xbb>
c0002fb2:	ba e5 00 00 00       	mov    edx,0xe5
c0002fb7:	83 ff 0b             	cmp    edi,0xb
c0002fba:	77 0b                	ja     c0002fc7 <get_fileinfo+0xcb>
c0002fbc:	83 fd 09             	cmp    ebp,0x9
c0002fbf:	75 06                	jne    c0002fc7 <get_fileinfo+0xcb>
c0002fc1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fc6:	47                   	inc    edi
c0002fc7:	0f b7 c2             	movzx  eax,dx
c0002fca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fce:	e8 ed ed ff ff       	call   c0001dc0 <dbc_1st>
c0002fd3:	85 c0                	test   eax,eax
c0002fd5:	74 2f                	je     c0003006 <get_fileinfo+0x10a>
c0002fd7:	83 fd 08             	cmp    ebp,0x8
c0002fda:	74 2a                	je     c0003006 <get_fileinfo+0x10a>
c0002fdc:	83 fd 0b             	cmp    ebp,0xb
c0002fdf:	74 25                	je     c0003006 <get_fileinfo+0x10a>
c0002fe1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fe4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fe8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fec:	e8 d2 ed ff ff       	call   c0001dc3 <dbc_2nd>
c0002ff1:	85 c0                	test   eax,eax
c0002ff3:	74 11                	je     c0003006 <get_fileinfo+0x10a>
c0002ff5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ff9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002ffe:	c1 e2 08             	shl    edx,0x8
c0003001:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003004:	09 c2                	or     edx,eax
c0003006:	0f b7 d2             	movzx  edx,dx
c0003009:	50                   	push   eax
c000300a:	50                   	push   eax
c000300b:	68 b5 01 00 00       	push   0x1b5
c0003010:	52                   	push   edx
c0003011:	e8 46 2b 00 00       	call   c0005b5c <ff_oem2uni>
c0003016:	83 c4 10             	add    esp,0x10
c0003019:	66 85 c0             	test   ax,ax
c000301c:	75 04                	jne    c0003022 <get_fileinfo+0x126>
c000301e:	31 ff                	xor    edi,edi
c0003020:	eb 23                	jmp    c0003045 <get_fileinfo+0x149>
c0003022:	b9 0c 00 00 00       	mov    ecx,0xc
c0003027:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000302b:	29 f9                	sub    ecx,edi
c000302d:	0f b7 c0             	movzx  eax,ax
c0003030:	e8 57 ee ff ff       	call   c0001e8c <put_utf>
c0003035:	84 c0                	test   al,al
c0003037:	74 e5                	je     c000301e <get_fileinfo+0x122>
c0003039:	0f b6 c0             	movzx  eax,al
c000303c:	01 c7                	add    edi,eax
c000303e:	89 e9                	mov    ecx,ebp
c0003040:	e9 4a ff ff ff       	jmp    c0002f8f <get_fileinfo+0x93>
c0003045:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000304a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000304e:	75 54                	jne    c00030a4 <get_fileinfo+0x1a8>
c0003050:	85 ff                	test   edi,edi
c0003052:	75 0b                	jne    c000305f <get_fileinfo+0x163>
c0003054:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003058:	ba 01 00 00 00       	mov    edx,0x1
c000305d:	eb 33                	jmp    c0003092 <get_fileinfo+0x196>
c000305f:	b1 08                	mov    cl,0x8
c0003061:	31 d2                	xor    edx,edx
c0003063:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003069:	84 c0                	test   al,al
c000306b:	74 25                	je     c0003092 <get_fileinfo+0x196>
c000306d:	66 83 f8 2e          	cmp    ax,0x2e
c0003071:	74 16                	je     c0003089 <get_fileinfo+0x18d>
c0003073:	8d 78 bf             	lea    edi,[eax-0x41]
c0003076:	66 83 ff 19          	cmp    di,0x19
c000307a:	77 0f                	ja     c000308b <get_fileinfo+0x18f>
c000307c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000307f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003082:	74 07                	je     c000308b <get_fileinfo+0x18f>
c0003084:	83 c0 20             	add    eax,0x20
c0003087:	eb 02                	jmp    c000308b <get_fileinfo+0x18f>
c0003089:	b1 10                	mov    cl,0x10
c000308b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000308f:	42                   	inc    edx
c0003090:	eb d1                	jmp    c0003063 <get_fileinfo+0x167>
c0003092:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003097:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000309e:	75 04                	jne    c00030a4 <get_fileinfo+0x1a8>
c00030a0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00030a4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030a7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00030aa:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00030ad:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b0:	83 c0 1c             	add    eax,0x1c
c00030b3:	e8 94 ec ff ff       	call   c0001d4c <ld_dword>
c00030b8:	89 03                	mov    DWORD PTR [ebx],eax
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	83 c0 16             	add    eax,0x16
c00030c0:	e8 7a ec ff ff       	call   c0001d3f <ld_word>
c00030c5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030c9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030cc:	83 c0 18             	add    eax,0x18
c00030cf:	e8 6b ec ff ff       	call   c0001d3f <ld_word>
c00030d4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030d8:	83 c4 1c             	add    esp,0x1c
c00030db:	5b                   	pop    ebx
c00030dc:	5e                   	pop    esi
c00030dd:	5f                   	pop    edi
c00030de:	5d                   	pop    ebp
c00030df:	c3                   	ret    

c00030e0 <ld_clust.isra.0>:
c00030e0:	56                   	push   esi
c00030e1:	89 c6                	mov    esi,eax
c00030e3:	53                   	push   ebx
c00030e4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030e7:	89 d3                	mov    ebx,edx
c00030e9:	e8 51 ec ff ff       	call   c0001d3f <ld_word>
c00030ee:	0f b7 c8             	movzx  ecx,ax
c00030f1:	89 f0                	mov    eax,esi
c00030f3:	3c 03                	cmp    al,0x3
c00030f5:	75 0d                	jne    c0003104 <ld_clust.isra.0+0x24>
c00030f7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030fa:	e8 40 ec ff ff       	call   c0001d3f <ld_word>
c00030ff:	c1 e0 10             	shl    eax,0x10
c0003102:	09 c1                	or     ecx,eax
c0003104:	89 c8                	mov    eax,ecx
c0003106:	5b                   	pop    ebx
c0003107:	5e                   	pop    esi
c0003108:	c3                   	ret    

c0003109 <st_clust.isra.1>:
c0003109:	56                   	push   esi
c000310a:	89 c6                	mov    esi,eax
c000310c:	53                   	push   ebx
c000310d:	89 d3                	mov    ebx,edx
c000310f:	0f b7 d1             	movzx  edx,cx
c0003112:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003115:	e8 4a ec ff ff       	call   c0001d64 <st_word>
c000311a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000311d:	75 0f                	jne    c000312e <st_clust.isra.1+0x25>
c000311f:	c1 e9 10             	shr    ecx,0x10
c0003122:	8d 43 14             	lea    eax,[ebx+0x14]
c0003125:	89 ca                	mov    edx,ecx
c0003127:	5b                   	pop    ebx
c0003128:	5e                   	pop    esi
c0003129:	e9 36 ec ff ff       	jmp    c0001d64 <st_word>
c000312e:	5b                   	pop    ebx
c000312f:	5e                   	pop    esi
c0003130:	c3                   	ret    

c0003131 <get_fat.isra.2>:
c0003131:	b9 01 00 00 00       	mov    ecx,0x1
c0003136:	83 fa 01             	cmp    edx,0x1
c0003139:	0f 86 f1 00 00 00    	jbe    c0003230 <get_fat.isra.2+0xff>
c000313f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003142:	0f 83 e8 00 00 00    	jae    c0003230 <get_fat.isra.2+0xff>
c0003148:	55                   	push   ebp
c0003149:	57                   	push   edi
c000314a:	89 c7                	mov    edi,eax
c000314c:	56                   	push   esi
c000314d:	89 d6                	mov    esi,edx
c000314f:	53                   	push   ebx
c0003150:	83 ec 0c             	sub    esp,0xc
c0003153:	8a 00                	mov    al,BYTE PTR [eax]
c0003155:	3c 02                	cmp    al,0x2
c0003157:	74 78                	je     c00031d1 <get_fat.isra.2+0xa0>
c0003159:	3c 03                	cmp    al,0x3
c000315b:	0f 84 97 00 00 00    	je     c00031f8 <get_fat.isra.2+0xc7>
c0003161:	fe c8                	dec    al
c0003163:	0f 85 bd 00 00 00    	jne    c0003226 <get_fat.isra.2+0xf5>
c0003169:	89 d3                	mov    ebx,edx
c000316b:	89 f8                	mov    eax,edi
c000316d:	d1 eb                	shr    ebx,1
c000316f:	01 d3                	add    ebx,edx
c0003171:	89 da                	mov    edx,ebx
c0003173:	c1 ea 09             	shr    edx,0x9
c0003176:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003179:	e8 e7 f0 ff ff       	call   c0002265 <move_window>
c000317e:	85 c0                	test   eax,eax
c0003180:	74 08                	je     c000318a <get_fat.isra.2+0x59>
c0003182:	83 c9 ff             	or     ecx,0xffffffff
c0003185:	e9 9c 00 00 00       	jmp    c0003226 <get_fat.isra.2+0xf5>
c000318a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000318d:	89 f8                	mov    eax,edi
c000318f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003195:	89 ea                	mov    edx,ebp
c0003197:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000319b:	c1 ea 09             	shr    edx,0x9
c000319e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031a1:	e8 bf f0 ff ff       	call   c0002265 <move_window>
c00031a6:	85 c0                	test   eax,eax
c00031a8:	75 d8                	jne    c0003182 <get_fat.isra.2+0x51>
c00031aa:	0f b6 c3             	movzx  eax,bl
c00031ad:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00031b3:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c00031b8:	c1 e3 08             	shl    ebx,0x8
c00031bb:	09 c3                	or     ebx,eax
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031c5:	83 e6 01             	and    esi,0x1
c00031c8:	74 5c                	je     c0003226 <get_fat.isra.2+0xf5>
c00031ca:	89 d9                	mov    ecx,ebx
c00031cc:	c1 e9 04             	shr    ecx,0x4
c00031cf:	eb 55                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031d1:	c1 ea 08             	shr    edx,0x8
c00031d4:	89 f8                	mov    eax,edi
c00031d6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031d9:	e8 87 f0 ff ff       	call   c0002265 <move_window>
c00031de:	85 c0                	test   eax,eax
c00031e0:	75 a0                	jne    c0003182 <get_fat.isra.2+0x51>
c00031e2:	01 f6                	add    esi,esi
c00031e4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ea:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ee:	e8 4c eb ff ff       	call   c0001d3f <ld_word>
c00031f3:	0f b7 c8             	movzx  ecx,ax
c00031f6:	eb 2e                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031f8:	c1 ea 07             	shr    edx,0x7
c00031fb:	89 f8                	mov    eax,edi
c00031fd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003200:	e8 60 f0 ff ff       	call   c0002265 <move_window>
c0003205:	85 c0                	test   eax,eax
c0003207:	0f 85 75 ff ff ff    	jne    c0003182 <get_fat.isra.2+0x51>
c000320d:	c1 e6 02             	shl    esi,0x2
c0003210:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003216:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000321a:	e8 2d eb ff ff       	call   c0001d4c <ld_dword>
c000321f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003224:	89 c1                	mov    ecx,eax
c0003226:	83 c4 0c             	add    esp,0xc
c0003229:	89 c8                	mov    eax,ecx
c000322b:	5b                   	pop    ebx
c000322c:	5e                   	pop    esi
c000322d:	5f                   	pop    edi
c000322e:	5d                   	pop    ebp
c000322f:	c3                   	ret    
c0003230:	89 c8                	mov    eax,ecx
c0003232:	c3                   	ret    

c0003233 <dir_sdi>:
c0003233:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003239:	0f 87 b6 00 00 00    	ja     c00032f5 <dir_sdi+0xc2>
c000323f:	55                   	push   ebp
c0003240:	57                   	push   edi
c0003241:	56                   	push   esi
c0003242:	53                   	push   ebx
c0003243:	89 d3                	mov    ebx,edx
c0003245:	83 ec 1c             	sub    esp,0x1c
c0003248:	f6 c2 1f             	test   dl,0x1f
c000324b:	74 0a                	je     c0003257 <dir_sdi+0x24>
c000324d:	b8 02 00 00 00       	mov    eax,0x2
c0003252:	e9 96 00 00 00       	jmp    c00032ed <dir_sdi+0xba>
c0003257:	89 c6                	mov    esi,eax
c0003259:	8b 38                	mov    edi,DWORD PTR [eax]
c000325b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000325e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003261:	85 c9                	test   ecx,ecx
c0003263:	75 23                	jne    c0003288 <dir_sdi+0x55>
c0003265:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003268:	76 07                	jbe    c0003271 <dir_sdi+0x3e>
c000326a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000326d:	85 c0                	test   eax,eax
c000326f:	75 15                	jne    c0003286 <dir_sdi+0x53>
c0003271:	89 da                	mov    edx,ebx
c0003273:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003277:	c1 ea 05             	shr    edx,0x5
c000327a:	39 c2                	cmp    edx,eax
c000327c:	73 cf                	jae    c000324d <dir_sdi+0x1a>
c000327e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003281:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003284:	eb 3d                	jmp    c00032c3 <dir_sdi+0x90>
c0003286:	89 c1                	mov    ecx,eax
c0003288:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000328c:	c1 e5 09             	shl    ebp,0x9
c000328f:	89 ca                	mov    edx,ecx
c0003291:	39 eb                	cmp    ebx,ebp
c0003293:	72 1c                	jb     c00032b1 <dir_sdi+0x7e>
c0003295:	8b 06                	mov    eax,DWORD PTR [esi]
c0003297:	e8 95 fe ff ff       	call   c0003131 <get_fat.isra.2>
c000329c:	89 c1                	mov    ecx,eax
c000329e:	83 f8 ff             	cmp    eax,0xffffffff
c00032a1:	74 45                	je     c00032e8 <dir_sdi+0xb5>
c00032a3:	83 f8 01             	cmp    eax,0x1
c00032a6:	76 a5                	jbe    c000324d <dir_sdi+0x1a>
c00032a8:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00032ab:	76 a0                	jbe    c000324d <dir_sdi+0x1a>
c00032ad:	29 eb                	sub    ebx,ebp
c00032af:	eb de                	jmp    c000328f <dir_sdi+0x5c>
c00032b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00032b5:	89 f8                	mov    eax,edi
c00032b7:	e8 c9 ec ff ff       	call   c0001f85 <clst2sect>
c00032bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032c0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032c3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032c6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032c9:	85 d2                	test   edx,edx
c00032cb:	74 80                	je     c000324d <dir_sdi+0x1a>
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032d5:	c1 e8 09             	shr    eax,0x9
c00032d8:	01 d0                	add    eax,edx
c00032da:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032dd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032e1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032e4:	31 c0                	xor    eax,eax
c00032e6:	eb 05                	jmp    c00032ed <dir_sdi+0xba>
c00032e8:	b8 01 00 00 00       	mov    eax,0x1
c00032ed:	83 c4 1c             	add    esp,0x1c
c00032f0:	5b                   	pop    ebx
c00032f1:	5e                   	pop    esi
c00032f2:	5f                   	pop    edi
c00032f3:	5d                   	pop    ebp
c00032f4:	c3                   	ret    
c00032f5:	b8 02 00 00 00       	mov    eax,0x2
c00032fa:	c3                   	ret    

c00032fb <create_chain>:
c00032fb:	55                   	push   ebp
c00032fc:	89 c5                	mov    ebp,eax
c00032fe:	57                   	push   edi
c00032ff:	89 d7                	mov    edi,edx
c0003301:	56                   	push   esi
c0003302:	53                   	push   ebx
c0003303:	83 ec 1c             	sub    esp,0x1c
c0003306:	85 d2                	test   edx,edx
c0003308:	8b 30                	mov    esi,DWORD PTR [eax]
c000330a:	75 0e                	jne    c000331a <create_chain+0x1f>
c000330c:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000330f:	85 c9                	test   ecx,ecx
c0003311:	74 34                	je     c0003347 <create_chain+0x4c>
c0003313:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003316:	77 34                	ja     c000334c <create_chain+0x51>
c0003318:	eb 2d                	jmp    c0003347 <create_chain+0x4c>
c000331a:	89 f0                	mov    eax,esi
c000331c:	e8 10 fe ff ff       	call   c0003131 <get_fat.isra.2>
c0003321:	89 c3                	mov    ebx,eax
c0003323:	83 f8 01             	cmp    eax,0x1
c0003326:	77 0a                	ja     c0003332 <create_chain+0x37>
c0003328:	bb 01 00 00 00       	mov    ebx,0x1
c000332d:	e9 f9 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003332:	83 f8 ff             	cmp    eax,0xffffffff
c0003335:	0f 84 ed 00 00 00    	je     c0003428 <create_chain+0x12d>
c000333b:	89 f9                	mov    ecx,edi
c000333d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003340:	76 0a                	jbe    c000334c <create_chain+0x51>
c0003342:	e9 e4 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003347:	b9 01 00 00 00       	mov    ecx,0x1
c000334c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003350:	75 07                	jne    c0003359 <create_chain+0x5e>
c0003352:	31 db                	xor    ebx,ebx
c0003354:	e9 d2 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003359:	39 f9                	cmp    ecx,edi
c000335b:	75 46                	jne    c00033a3 <create_chain+0xa8>
c000335d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003360:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003363:	77 05                	ja     c000336a <create_chain+0x6f>
c0003365:	bb 02 00 00 00       	mov    ebx,0x2
c000336a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000336e:	89 da                	mov    edx,ebx
c0003370:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003373:	e8 b9 fd ff ff       	call   c0003131 <get_fat.isra.2>
c0003378:	83 f8 01             	cmp    eax,0x1
c000337b:	74 ab                	je     c0003328 <create_chain+0x2d>
c000337d:	83 f8 ff             	cmp    eax,0xffffffff
c0003380:	0f 84 a2 00 00 00    	je     c0003428 <create_chain+0x12d>
c0003386:	85 c0                	test   eax,eax
c0003388:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000338c:	74 11                	je     c000339f <create_chain+0xa4>
c000338e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003391:	83 f8 01             	cmp    eax,0x1
c0003394:	76 0d                	jbe    c00033a3 <create_chain+0xa8>
c0003396:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003399:	73 08                	jae    c00033a3 <create_chain+0xa8>
c000339b:	89 c1                	mov    ecx,eax
c000339d:	eb 04                	jmp    c00033a3 <create_chain+0xa8>
c000339f:	85 db                	test   ebx,ebx
c00033a1:	75 3d                	jne    c00033e0 <create_chain+0xe5>
c00033a3:	89 cb                	mov    ebx,ecx
c00033a5:	43                   	inc    ebx
c00033a6:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00033a9:	77 0a                	ja     c00033b5 <create_chain+0xba>
c00033ab:	83 f9 01             	cmp    ecx,0x1
c00033ae:	76 a2                	jbe    c0003352 <create_chain+0x57>
c00033b0:	bb 02 00 00 00       	mov    ebx,0x2
c00033b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b9:	89 da                	mov    edx,ebx
c00033bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00033be:	e8 6e fd ff ff       	call   c0003131 <get_fat.isra.2>
c00033c3:	85 c0                	test   eax,eax
c00033c5:	74 19                	je     c00033e0 <create_chain+0xe5>
c00033c7:	83 f8 01             	cmp    eax,0x1
c00033ca:	0f 84 58 ff ff ff    	je     c0003328 <create_chain+0x2d>
c00033d0:	40                   	inc    eax
c00033d1:	74 55                	je     c0003428 <create_chain+0x12d>
c00033d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d7:	39 cb                	cmp    ebx,ecx
c00033d9:	75 ca                	jne    c00033a5 <create_chain+0xaa>
c00033db:	e9 72 ff ff ff       	jmp    c0003352 <create_chain+0x57>
c00033e0:	83 c9 ff             	or     ecx,0xffffffff
c00033e3:	89 da                	mov    edx,ebx
c00033e5:	89 f0                	mov    eax,esi
c00033e7:	e8 cf f2 ff ff       	call   c00026bb <put_fat>
c00033ec:	85 c0                	test   eax,eax
c00033ee:	75 31                	jne    c0003421 <create_chain+0x126>
c00033f0:	85 ff                	test   edi,edi
c00033f2:	75 16                	jne    c000340a <create_chain+0x10f>
c00033f4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033f7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033fa:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033fd:	8d 57 fe             	lea    edx,[edi-0x2]
c0003400:	39 d0                	cmp    eax,edx
c0003402:	77 17                	ja     c000341b <create_chain+0x120>
c0003404:	48                   	dec    eax
c0003405:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003408:	eb 11                	jmp    c000341b <create_chain+0x120>
c000340a:	89 d9                	mov    ecx,ebx
c000340c:	89 fa                	mov    edx,edi
c000340e:	89 f0                	mov    eax,esi
c0003410:	e8 a6 f2 ff ff       	call   c00026bb <put_fat>
c0003415:	85 c0                	test   eax,eax
c0003417:	74 db                	je     c00033f4 <create_chain+0xf9>
c0003419:	eb 06                	jmp    c0003421 <create_chain+0x126>
c000341b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000341f:	eb 0a                	jmp    c000342b <create_chain+0x130>
c0003421:	48                   	dec    eax
c0003422:	0f 85 00 ff ff ff    	jne    c0003328 <create_chain+0x2d>
c0003428:	83 cb ff             	or     ebx,0xffffffff
c000342b:	83 c4 1c             	add    esp,0x1c
c000342e:	89 d8                	mov    eax,ebx
c0003430:	5b                   	pop    ebx
c0003431:	5e                   	pop    esi
c0003432:	5f                   	pop    edi
c0003433:	5d                   	pop    ebp
c0003434:	c3                   	ret    

c0003435 <remove_chain>:
c0003435:	55                   	push   ebp
c0003436:	57                   	push   edi
c0003437:	56                   	push   esi
c0003438:	89 d6                	mov    esi,edx
c000343a:	53                   	push   ebx
c000343b:	83 ec 0c             	sub    esp,0xc
c000343e:	83 fa 01             	cmp    edx,0x1
c0003441:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003443:	76 65                	jbe    c00034aa <remove_chain+0x75>
c0003445:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003448:	76 60                	jbe    c00034aa <remove_chain+0x75>
c000344a:	89 c5                	mov    ebp,eax
c000344c:	89 ca                	mov    edx,ecx
c000344e:	85 c9                	test   ecx,ecx
c0003450:	74 0e                	je     c0003460 <remove_chain+0x2b>
c0003452:	83 c9 ff             	or     ecx,0xffffffff
c0003455:	89 d8                	mov    eax,ebx
c0003457:	e8 5f f2 ff ff       	call   c00026bb <put_fat>
c000345c:	85 c0                	test   eax,eax
c000345e:	75 56                	jne    c00034b6 <remove_chain+0x81>
c0003460:	89 f2                	mov    edx,esi
c0003462:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003465:	e8 c7 fc ff ff       	call   c0003131 <get_fat.isra.2>
c000346a:	89 c7                	mov    edi,eax
c000346c:	85 c0                	test   eax,eax
c000346e:	75 04                	jne    c0003474 <remove_chain+0x3f>
c0003470:	31 c0                	xor    eax,eax
c0003472:	eb 42                	jmp    c00034b6 <remove_chain+0x81>
c0003474:	83 f8 01             	cmp    eax,0x1
c0003477:	74 31                	je     c00034aa <remove_chain+0x75>
c0003479:	83 f8 ff             	cmp    eax,0xffffffff
c000347c:	74 33                	je     c00034b1 <remove_chain+0x7c>
c000347e:	31 c9                	xor    ecx,ecx
c0003480:	89 f2                	mov    edx,esi
c0003482:	89 d8                	mov    eax,ebx
c0003484:	e8 32 f2 ff ff       	call   c00026bb <put_fat>
c0003489:	85 c0                	test   eax,eax
c000348b:	75 29                	jne    c00034b6 <remove_chain+0x81>
c000348d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003490:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003493:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003496:	39 c8                	cmp    eax,ecx
c0003498:	73 08                	jae    c00034a2 <remove_chain+0x6d>
c000349a:	40                   	inc    eax
c000349b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000349f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00034a2:	89 fe                	mov    esi,edi
c00034a4:	39 fa                	cmp    edx,edi
c00034a6:	77 b8                	ja     c0003460 <remove_chain+0x2b>
c00034a8:	eb c6                	jmp    c0003470 <remove_chain+0x3b>
c00034aa:	b8 02 00 00 00       	mov    eax,0x2
c00034af:	eb 05                	jmp    c00034b6 <remove_chain+0x81>
c00034b1:	b8 01 00 00 00       	mov    eax,0x1
c00034b6:	83 c4 0c             	add    esp,0xc
c00034b9:	5b                   	pop    ebx
c00034ba:	5e                   	pop    esi
c00034bb:	5f                   	pop    edi
c00034bc:	5d                   	pop    ebp
c00034bd:	c3                   	ret    

c00034be <dir_next>:
c00034be:	55                   	push   ebp
c00034bf:	57                   	push   edi
c00034c0:	56                   	push   esi
c00034c1:	53                   	push   ebx
c00034c2:	83 ec 1c             	sub    esp,0x1c
c00034c5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034c8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034ca:	83 c7 20             	add    edi,0x20
c00034cd:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034d3:	76 07                	jbe    c00034dc <dir_next+0x1e>
c00034d5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034dc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034df:	b9 04 00 00 00       	mov    ecx,0x4
c00034e4:	85 f6                	test   esi,esi
c00034e6:	0f 84 cd 00 00 00    	je     c00035b9 <dir_next+0xfb>
c00034ec:	89 c3                	mov    ebx,eax
c00034ee:	89 d1                	mov    ecx,edx
c00034f0:	89 f8                	mov    eax,edi
c00034f2:	25 ff 01 00 00       	and    eax,0x1ff
c00034f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034fb:	0f 85 a8 00 00 00    	jne    c00035a9 <dir_next+0xeb>
c0003501:	46                   	inc    esi
c0003502:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003505:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003508:	85 d2                	test   edx,edx
c000350a:	75 22                	jne    c000352e <dir_next+0x70>
c000350c:	89 fa                	mov    edx,edi
c000350e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003512:	c1 ea 05             	shr    edx,0x5
c0003515:	39 c2                	cmp    edx,eax
c0003517:	0f 82 8c 00 00 00    	jb     c00035a9 <dir_next+0xeb>
c000351d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003524:	b9 04 00 00 00       	mov    ecx,0x4
c0003529:	e9 8b 00 00 00       	jmp    c00035b9 <dir_next+0xfb>
c000352e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003532:	89 fe                	mov    esi,edi
c0003534:	48                   	dec    eax
c0003535:	c1 ee 09             	shr    esi,0x9
c0003538:	85 f0                	test   eax,esi
c000353a:	75 6d                	jne    c00035a9 <dir_next+0xeb>
c000353c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003540:	89 e8                	mov    eax,ebp
c0003542:	e8 ea fb ff ff       	call   c0003131 <get_fat.isra.2>
c0003547:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000354b:	89 c6                	mov    esi,eax
c000354d:	83 f8 01             	cmp    eax,0x1
c0003550:	77 07                	ja     c0003559 <dir_next+0x9b>
c0003552:	b9 02 00 00 00       	mov    ecx,0x2
c0003557:	eb 60                	jmp    c00035b9 <dir_next+0xfb>
c0003559:	83 f8 ff             	cmp    eax,0xffffffff
c000355c:	75 07                	jne    c0003565 <dir_next+0xa7>
c000355e:	b9 01 00 00 00       	mov    ecx,0x1
c0003563:	eb 54                	jmp    c00035b9 <dir_next+0xfb>
c0003565:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003568:	77 30                	ja     c000359a <dir_next+0xdc>
c000356a:	85 c9                	test   ecx,ecx
c000356c:	74 af                	je     c000351d <dir_next+0x5f>
c000356e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003571:	89 d8                	mov    eax,ebx
c0003573:	e8 83 fd ff ff       	call   c00032fb <create_chain>
c0003578:	b9 07 00 00 00       	mov    ecx,0x7
c000357d:	89 c6                	mov    esi,eax
c000357f:	85 c0                	test   eax,eax
c0003581:	74 36                	je     c00035b9 <dir_next+0xfb>
c0003583:	83 f8 01             	cmp    eax,0x1
c0003586:	74 ca                	je     c0003552 <dir_next+0x94>
c0003588:	83 f8 ff             	cmp    eax,0xffffffff
c000358b:	74 d1                	je     c000355e <dir_next+0xa0>
c000358d:	89 c2                	mov    edx,eax
c000358f:	89 e8                	mov    eax,ebp
c0003591:	e8 75 f2 ff ff       	call   c000280b <dir_clear>
c0003596:	85 c0                	test   eax,eax
c0003598:	75 c4                	jne    c000355e <dir_next+0xa0>
c000359a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000359d:	89 f2                	mov    edx,esi
c000359f:	89 e8                	mov    eax,ebp
c00035a1:	e8 df e9 ff ff       	call   c0001f85 <clst2sect>
c00035a6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00035a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035ad:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00035b0:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00035b4:	31 c9                	xor    ecx,ecx
c00035b6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00035b9:	83 c4 1c             	add    esp,0x1c
c00035bc:	89 c8                	mov    eax,ecx
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    

c00035c3 <dir_alloc>:
c00035c3:	55                   	push   ebp
c00035c4:	89 c5                	mov    ebp,eax
c00035c6:	57                   	push   edi
c00035c7:	89 d7                	mov    edi,edx
c00035c9:	56                   	push   esi
c00035ca:	31 d2                	xor    edx,edx
c00035cc:	53                   	push   ebx
c00035cd:	83 ec 0c             	sub    esp,0xc
c00035d0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d2:	e8 5c fc ff ff       	call   c0003233 <dir_sdi>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	75 37                	jne    c0003612 <dir_alloc+0x4f>
c00035db:	31 db                	xor    ebx,ebx
c00035dd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	e8 7e ec ff ff       	call   c0002265 <move_window>
c00035e7:	85 c0                	test   eax,eax
c00035e9:	75 27                	jne    c0003612 <dir_alloc+0x4f>
c00035eb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ee:	8a 12                	mov    dl,BYTE PTR [edx]
c00035f0:	84 d2                	test   dl,dl
c00035f2:	74 05                	je     c00035f9 <dir_alloc+0x36>
c00035f4:	80 fa e5             	cmp    dl,0xe5
c00035f7:	75 07                	jne    c0003600 <dir_alloc+0x3d>
c00035f9:	43                   	inc    ebx
c00035fa:	39 fb                	cmp    ebx,edi
c00035fc:	75 04                	jne    c0003602 <dir_alloc+0x3f>
c00035fe:	eb 1c                	jmp    c000361c <dir_alloc+0x59>
c0003600:	31 db                	xor    ebx,ebx
c0003602:	ba 01 00 00 00       	mov    edx,0x1
c0003607:	89 e8                	mov    eax,ebp
c0003609:	e8 b0 fe ff ff       	call   c00034be <dir_next>
c000360e:	85 c0                	test   eax,eax
c0003610:	74 cb                	je     c00035dd <dir_alloc+0x1a>
c0003612:	83 f8 04             	cmp    eax,0x4
c0003615:	75 05                	jne    c000361c <dir_alloc+0x59>
c0003617:	b8 07 00 00 00       	mov    eax,0x7
c000361c:	83 c4 0c             	add    esp,0xc
c000361f:	5b                   	pop    ebx
c0003620:	5e                   	pop    esi
c0003621:	5f                   	pop    edi
c0003622:	5d                   	pop    ebp
c0003623:	c3                   	ret    

c0003624 <dir_read>:
c0003624:	55                   	push   ebp
c0003625:	57                   	push   edi
c0003626:	bf ff ff ff ff       	mov    edi,0xffffffff
c000362b:	56                   	push   esi
c000362c:	be 04 00 00 00       	mov    esi,0x4
c0003631:	53                   	push   ebx
c0003632:	89 c3                	mov    ebx,eax
c0003634:	83 ec 1c             	sub    esp,0x1c
c0003637:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000363b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000363d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003642:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003645:	85 d2                	test   edx,edx
c0003647:	0f 84 d8 00 00 00    	je     c0003725 <dir_read+0x101>
c000364d:	89 e8                	mov    eax,ebp
c000364f:	e8 11 ec ff ff       	call   c0002265 <move_window>
c0003654:	89 c6                	mov    esi,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	0f 85 d2 00 00 00    	jne    c0003730 <dir_read+0x10c>
c000365e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003661:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003663:	84 c9                	test   cl,cl
c0003665:	0f 84 c0 00 00 00    	je     c000372b <dir_read+0x107>
c000366b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000366e:	83 e0 3f             	and    eax,0x3f
c0003671:	80 f9 2e             	cmp    cl,0x2e
c0003674:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003678:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000367b:	0f 84 8a 00 00 00    	je     c000370b <dir_read+0xe7>
c0003681:	80 f9 e5             	cmp    cl,0xe5
c0003684:	0f 84 81 00 00 00    	je     c000370b <dir_read+0xe7>
c000368a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000368e:	83 e0 1f             	and    eax,0x1f
c0003691:	83 f8 08             	cmp    eax,0x8
c0003694:	0f 94 c0             	sete   al
c0003697:	0f b6 c0             	movzx  eax,al
c000369a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000369e:	75 6b                	jne    c000370b <dir_read+0xe7>
c00036a0:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00036a5:	75 44                	jne    c00036eb <dir_read+0xc7>
c00036a7:	f6 c1 40             	test   cl,0x40
c00036aa:	74 12                	je     c00036be <dir_read+0x9a>
c00036ac:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00036af:	83 e1 bf             	and    ecx,0xffffffbf
c00036b2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00036b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00036b9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00036bc:	eb 06                	jmp    c00036c4 <dir_read+0xa0>
c00036be:	89 f8                	mov    eax,edi
c00036c0:	38 c8                	cmp    al,cl
c00036c2:	75 47                	jne    c000370b <dir_read+0xe7>
c00036c4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036c8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036cd:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036d0:	75 3e                	jne    c0003710 <dir_read+0xec>
c00036d2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036d9:	e8 c4 e8 ff ff       	call   c0001fa2 <pick_lfn>
c00036de:	85 c0                	test   eax,eax
c00036e0:	74 2e                	je     c0003710 <dir_read+0xec>
c00036e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036e6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036e9:	eb 25                	jmp    c0003710 <dir_read+0xec>
c00036eb:	89 f8                	mov    eax,edi
c00036ed:	84 c0                	test   al,al
c00036ef:	75 11                	jne    c0003702 <dir_read+0xde>
c00036f1:	89 d0                	mov    eax,edx
c00036f3:	e8 64 ea ff ff       	call   c000215c <sum_sfn>
c00036f8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036fc:	75 04                	jne    c0003702 <dir_read+0xde>
c00036fe:	31 f6                	xor    esi,esi
c0003700:	eb 35                	jmp    c0003737 <dir_read+0x113>
c0003702:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003709:	eb 2c                	jmp    c0003737 <dir_read+0x113>
c000370b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003710:	31 d2                	xor    edx,edx
c0003712:	89 d8                	mov    eax,ebx
c0003714:	e8 a5 fd ff ff       	call   c00034be <dir_next>
c0003719:	89 c6                	mov    esi,eax
c000371b:	85 c0                	test   eax,eax
c000371d:	0f 84 1f ff ff ff    	je     c0003642 <dir_read+0x1e>
c0003723:	eb 0b                	jmp    c0003730 <dir_read+0x10c>
c0003725:	85 f6                	test   esi,esi
c0003727:	74 d5                	je     c00036fe <dir_read+0xda>
c0003729:	eb 05                	jmp    c0003730 <dir_read+0x10c>
c000372b:	be 04 00 00 00       	mov    esi,0x4
c0003730:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003737:	83 c4 1c             	add    esp,0x1c
c000373a:	89 f0                	mov    eax,esi
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <dir_remove>:
c0003741:	57                   	push   edi
c0003742:	56                   	push   esi
c0003743:	53                   	push   ebx
c0003744:	89 c3                	mov    ebx,eax
c0003746:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003749:	8b 30                	mov    esi,DWORD PTR [eax]
c000374b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000374e:	83 fa ff             	cmp    edx,0xffffffff
c0003751:	74 09                	je     c000375c <dir_remove+0x1b>
c0003753:	e8 db fa ff ff       	call   c0003233 <dir_sdi>
c0003758:	85 c0                	test   eax,eax
c000375a:	75 34                	jne    c0003790 <dir_remove+0x4f>
c000375c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000375f:	89 f0                	mov    eax,esi
c0003761:	e8 ff ea ff ff       	call   c0002265 <move_window>
c0003766:	85 c0                	test   eax,eax
c0003768:	75 1c                	jne    c0003786 <dir_remove+0x45>
c000376a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000376d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003770:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003774:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003777:	73 17                	jae    c0003790 <dir_remove+0x4f>
c0003779:	31 d2                	xor    edx,edx
c000377b:	89 d8                	mov    eax,ebx
c000377d:	e8 3c fd ff ff       	call   c00034be <dir_next>
c0003782:	85 c0                	test   eax,eax
c0003784:	74 d6                	je     c000375c <dir_remove+0x1b>
c0003786:	83 f8 04             	cmp    eax,0x4
c0003789:	75 05                	jne    c0003790 <dir_remove+0x4f>
c000378b:	b8 02 00 00 00       	mov    eax,0x2
c0003790:	5b                   	pop    ebx
c0003791:	5e                   	pop    esi
c0003792:	5f                   	pop    edi
c0003793:	c3                   	ret    

c0003794 <dir_find>:
c0003794:	55                   	push   ebp
c0003795:	31 d2                	xor    edx,edx
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	89 c3                	mov    ebx,eax
c000379c:	83 ec 1c             	sub    esp,0x1c
c000379f:	8b 00                	mov    eax,DWORD PTR [eax]
c00037a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037a5:	89 d8                	mov    eax,ebx
c00037a7:	e8 87 fa ff ff       	call   c0003233 <dir_sdi>
c00037ac:	89 c6                	mov    esi,eax
c00037ae:	85 c0                	test   eax,eax
c00037b0:	0f 85 02 01 00 00    	jne    c00038b8 <dir_find+0x124>
c00037b6:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00037bd:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037c2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ce:	e8 92 ea ff ff       	call   c0002265 <move_window>
c00037d3:	89 c6                	mov    esi,eax
c00037d5:	85 c0                	test   eax,eax
c00037d7:	0f 85 db 00 00 00    	jne    c00038b8 <dir_find+0x124>
c00037dd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037e0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037e3:	84 c9                	test   cl,cl
c00037e5:	0f 84 c8 00 00 00    	je     c00038b3 <dir_find+0x11f>
c00037eb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ee:	88 d0                	mov    al,dl
c00037f0:	83 e0 3f             	and    eax,0x3f
c00037f3:	80 f9 e5             	cmp    cl,0xe5
c00037f6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037f9:	0f 84 93 00 00 00    	je     c0003892 <dir_find+0xfe>
c00037ff:	80 e2 08             	and    dl,0x8
c0003802:	74 0a                	je     c000380e <dir_find+0x7a>
c0003804:	3c 0f                	cmp    al,0xf
c0003806:	0f 85 86 00 00 00    	jne    c0003892 <dir_find+0xfe>
c000380c:	eb 04                	jmp    c0003812 <dir_find+0x7e>
c000380e:	3c 0f                	cmp    al,0xf
c0003810:	75 54                	jne    c0003866 <dir_find+0xd2>
c0003812:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003816:	0f 85 82 00 00 00    	jne    c000389e <dir_find+0x10a>
c000381c:	f6 c1 40             	test   cl,0x40
c000381f:	74 12                	je     c0003833 <dir_find+0x9f>
c0003821:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003824:	83 e1 bf             	and    ecx,0xffffffbf
c0003827:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000382b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000382e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003831:	eb 06                	jmp    c0003839 <dir_find+0xa5>
c0003833:	89 f8                	mov    eax,edi
c0003835:	38 c8                	cmp    al,cl
c0003837:	75 60                	jne    c0003899 <dir_find+0x105>
c0003839:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000383d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003842:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003845:	75 57                	jne    c000389e <dir_find+0x10a>
c0003847:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000384b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000384f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003852:	89 ea                	mov    edx,ebp
c0003854:	e8 89 f3 ff ff       	call   c0002be2 <cmp_lfn>
c0003859:	85 c0                	test   eax,eax
c000385b:	74 41                	je     c000389e <dir_find+0x10a>
c000385d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003861:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003864:	eb 38                	jmp    c000389e <dir_find+0x10a>
c0003866:	89 f8                	mov    eax,edi
c0003868:	84 c0                	test   al,al
c000386a:	75 0d                	jne    c0003879 <dir_find+0xe5>
c000386c:	89 e8                	mov    eax,ebp
c000386e:	e8 e9 e8 ff ff       	call   c000215c <sum_sfn>
c0003873:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003877:	74 3f                	je     c00038b8 <dir_find+0x124>
c0003879:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000387d:	75 13                	jne    c0003892 <dir_find+0xfe>
c000387f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003882:	b9 0b 00 00 00       	mov    ecx,0xb
c0003887:	89 e8                	mov    eax,ebp
c0003889:	e8 fd e4 ff ff       	call   c0001d8b <mem_cmp>
c000388e:	85 c0                	test   eax,eax
c0003890:	74 26                	je     c00038b8 <dir_find+0x124>
c0003892:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003899:	bf ff ff ff ff       	mov    edi,0xffffffff
c000389e:	31 d2                	xor    edx,edx
c00038a0:	89 d8                	mov    eax,ebx
c00038a2:	e8 17 fc ff ff       	call   c00034be <dir_next>
c00038a7:	89 c6                	mov    esi,eax
c00038a9:	85 c0                	test   eax,eax
c00038ab:	0f 84 16 ff ff ff    	je     c00037c7 <dir_find+0x33>
c00038b1:	eb 05                	jmp    c00038b8 <dir_find+0x124>
c00038b3:	be 04 00 00 00       	mov    esi,0x4
c00038b8:	83 c4 1c             	add    esp,0x1c
c00038bb:	89 f0                	mov    eax,esi
c00038bd:	5b                   	pop    ebx
c00038be:	5e                   	pop    esi
c00038bf:	5f                   	pop    edi
c00038c0:	5d                   	pop    ebp
c00038c1:	c3                   	ret    

c00038c2 <follow_path>:
c00038c2:	56                   	push   esi
c00038c3:	53                   	push   ebx
c00038c4:	89 c3                	mov    ebx,eax
c00038c6:	83 ec 14             	sub    esp,0x14
c00038c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038cd:	8b 30                	mov    esi,DWORD PTR [eax]
c00038cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038d3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038d5:	80 fa 5c             	cmp    dl,0x5c
c00038d8:	75 07                	jne    c00038e1 <follow_path+0x1f>
c00038da:	40                   	inc    eax
c00038db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038df:	eb ee                	jmp    c00038cf <follow_path+0xd>
c00038e1:	80 fa 2f             	cmp    dl,0x2f
c00038e4:	74 f4                	je     c00038da <follow_path+0x18>
c00038e6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038ed:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038f0:	77 3e                	ja     c0003930 <follow_path+0x6e>
c00038f2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038f6:	31 d2                	xor    edx,edx
c00038f8:	89 d8                	mov    eax,ebx
c00038fa:	e8 34 f9 ff ff       	call   c0003233 <dir_sdi>
c00038ff:	eb 4f                	jmp    c0003950 <follow_path+0x8e>
c0003901:	89 d8                	mov    eax,ebx
c0003903:	e8 8c fe ff ff       	call   c0003794 <dir_find>
c0003908:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c000390b:	85 c0                	test   eax,eax
c000390d:	75 32                	jne    c0003941 <follow_path+0x7f>
c000390f:	80 e2 04             	and    dl,0x4
c0003912:	75 3c                	jne    c0003950 <follow_path+0x8e>
c0003914:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003918:	74 31                	je     c000394b <follow_path+0x89>
c000391a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000391d:	25 ff 01 00 00       	and    eax,0x1ff
c0003922:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003926:	8a 06                	mov    al,BYTE PTR [esi]
c0003928:	e8 b3 f7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000392d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003930:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003934:	89 d8                	mov    eax,ebx
c0003936:	e8 cb ef ff ff       	call   c0002906 <create_name>
c000393b:	85 c0                	test   eax,eax
c000393d:	74 c2                	je     c0003901 <follow_path+0x3f>
c000393f:	eb 0f                	jmp    c0003950 <follow_path+0x8e>
c0003941:	83 f8 04             	cmp    eax,0x4
c0003944:	75 0a                	jne    c0003950 <follow_path+0x8e>
c0003946:	80 e2 04             	and    dl,0x4
c0003949:	75 05                	jne    c0003950 <follow_path+0x8e>
c000394b:	b8 05 00 00 00       	mov    eax,0x5
c0003950:	83 c4 14             	add    esp,0x14
c0003953:	5b                   	pop    ebx
c0003954:	5e                   	pop    esi
c0003955:	c3                   	ret    

c0003956 <dir_register>:
c0003956:	55                   	push   ebp
c0003957:	57                   	push   edi
c0003958:	56                   	push   esi
c0003959:	be 06 00 00 00       	mov    esi,0x6
c000395e:	53                   	push   ebx
c000395f:	83 ec 2c             	sub    esp,0x2c
c0003962:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003966:	0f 85 65 01 00 00    	jne    c0003ad1 <dir_register+0x17b>
c000396c:	8b 38                	mov    edi,DWORD PTR [eax]
c000396e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003976:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003979:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000397d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003982:	74 06                	je     c000398a <dir_register+0x34>
c0003984:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003988:	eb ef                	jmp    c0003979 <dir_register+0x23>
c000398a:	89 c3                	mov    ebx,eax
c000398c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003991:	8d 40 20             	lea    eax,[eax+0x20]
c0003994:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003998:	89 c2                	mov    edx,eax
c000399a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000399e:	e8 c8 e3 ff ff       	call   c0001d6b <mem_cpy>
c00039a3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00039a8:	74 48                	je     c00039f2 <dir_register+0x9c>
c00039aa:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c00039ae:	bd 01 00 00 00       	mov    ebp,0x1
c00039b3:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c00039b6:	55                   	push   ebp
c00039b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00039bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039bf:	e8 dc e6 ff ff       	call   c00020a0 <gen_numname>
c00039c4:	58                   	pop    eax
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	e8 c8 fd ff ff       	call   c0003794 <dir_find>
c00039cc:	89 c6                	mov    esi,eax
c00039ce:	85 c0                	test   eax,eax
c00039d0:	75 10                	jne    c00039e2 <dir_register+0x8c>
c00039d2:	45                   	inc    ebp
c00039d3:	83 fd 64             	cmp    ebp,0x64
c00039d6:	75 db                	jne    c00039b3 <dir_register+0x5d>
c00039d8:	be 07 00 00 00       	mov    esi,0x7
c00039dd:	e9 ef 00 00 00       	jmp    c0003ad1 <dir_register+0x17b>
c00039e2:	83 f8 04             	cmp    eax,0x4
c00039e5:	0f 85 e6 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c00039eb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039ef:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039f2:	bd 01 00 00 00       	mov    ebp,0x1
c00039f7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039fc:	74 13                	je     c0003a11 <dir_register+0xbb>
c00039fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a02:	b9 0d 00 00 00       	mov    ecx,0xd
c0003a07:	83 c0 0c             	add    eax,0xc
c0003a0a:	31 d2                	xor    edx,edx
c0003a0c:	f7 f1                	div    ecx
c0003a0e:	8d 68 01             	lea    ebp,[eax+0x1]
c0003a11:	89 ea                	mov    edx,ebp
c0003a13:	89 d8                	mov    eax,ebx
c0003a15:	e8 a9 fb ff ff       	call   c00035c3 <dir_alloc>
c0003a1a:	89 c6                	mov    esi,eax
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	0f 85 ad 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a24:	4d                   	dec    ebp
c0003a25:	74 6a                	je     c0003a91 <dir_register+0x13b>
c0003a27:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a2a:	89 e8                	mov    eax,ebp
c0003a2c:	c1 e0 05             	shl    eax,0x5
c0003a2f:	29 c2                	sub    edx,eax
c0003a31:	89 d8                	mov    eax,ebx
c0003a33:	e8 fb f7 ff ff       	call   c0003233 <dir_sdi>
c0003a38:	89 c6                	mov    esi,eax
c0003a3a:	85 c0                	test   eax,eax
c0003a3c:	0f 85 8f 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a46:	e8 11 e7 ff ff       	call   c000215c <sum_sfn>
c0003a4b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a4f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a52:	89 f8                	mov    eax,edi
c0003a54:	e8 0c e8 ff ff       	call   c0002265 <move_window>
c0003a59:	89 c6                	mov    esi,eax
c0003a5b:	85 c0                	test   eax,eax
c0003a5d:	75 72                	jne    c0003ad1 <dir_register+0x17b>
c0003a5f:	83 ec 0c             	sub    esp,0xc
c0003a62:	89 e8                	mov    eax,ebp
c0003a64:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a69:	0f b6 c8             	movzx  ecx,al
c0003a6c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a6f:	52                   	push   edx
c0003a70:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a73:	e8 a4 e5 ff ff       	call   c000201c <put_lfn>
c0003a78:	31 d2                	xor    edx,edx
c0003a7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a7e:	89 d8                	mov    eax,ebx
c0003a80:	e8 39 fa ff ff       	call   c00034be <dir_next>
c0003a85:	83 c4 10             	add    esp,0x10
c0003a88:	89 c6                	mov    esi,eax
c0003a8a:	85 c0                	test   eax,eax
c0003a8c:	75 43                	jne    c0003ad1 <dir_register+0x17b>
c0003a8e:	4d                   	dec    ebp
c0003a8f:	75 be                	jne    c0003a4f <dir_register+0xf9>
c0003a91:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a94:	89 f8                	mov    eax,edi
c0003a96:	e8 ca e7 ff ff       	call   c0002265 <move_window>
c0003a9b:	89 c6                	mov    esi,eax
c0003a9d:	85 c0                	test   eax,eax
c0003a9f:	75 30                	jne    c0003ad1 <dir_register+0x17b>
c0003aa1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003aa4:	b9 20 00 00 00       	mov    ecx,0x20
c0003aa9:	31 d2                	xor    edx,edx
c0003aab:	e8 d0 e2 ff ff       	call   c0001d80 <mem_set>
c0003ab0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003ab3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ab7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003abc:	e8 aa e2 ff ff       	call   c0001d6b <mem_cpy>
c0003ac1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003ac4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ac7:	83 e0 18             	and    eax,0x18
c0003aca:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003acd:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ad1:	83 c4 2c             	add    esp,0x2c
c0003ad4:	89 f0                	mov    eax,esi
c0003ad6:	5b                   	pop    ebx
c0003ad7:	5e                   	pop    esi
c0003ad8:	5f                   	pop    edi
c0003ad9:	5d                   	pop    ebp
c0003ada:	c3                   	ret    

c0003adb <f_mount>:
c0003adb:	53                   	push   ebx
c0003adc:	83 ec 18             	sub    esp,0x18
c0003adf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ae3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ae7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003aeb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003aef:	e8 7a e6 ff ff       	call   c000216e <get_ldnumber>
c0003af4:	89 c2                	mov    edx,eax
c0003af6:	b8 0b 00 00 00       	mov    eax,0xb
c0003afb:	85 d2                	test   edx,edx
c0003afd:	78 39                	js     c0003b38 <f_mount+0x5d>
c0003aff:	8b 04 95 20 ff 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe00e0]
c0003b06:	85 c0                	test   eax,eax
c0003b08:	74 03                	je     c0003b0d <f_mount+0x32>
c0003b0a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b11:	85 c0                	test   eax,eax
c0003b13:	74 03                	je     c0003b18 <f_mount+0x3d>
c0003b15:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b1c:	89 04 95 20 ff 01 c0 	mov    DWORD PTR [edx*4-0x3ffe00e0],eax
c0003b23:	31 c0                	xor    eax,eax
c0003b25:	84 db                	test   bl,bl
c0003b27:	74 0f                	je     c0003b38 <f_mount+0x5d>
c0003b29:	31 c9                	xor    ecx,ecx
c0003b2b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b2f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b33:	e8 80 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b38:	83 c4 18             	add    esp,0x18
c0003b3b:	5b                   	pop    ebx
c0003b3c:	c3                   	ret    

c0003b3d <f_open>:
c0003b3d:	55                   	push   ebp
c0003b3e:	b8 09 00 00 00       	mov    eax,0x9
c0003b43:	57                   	push   edi
c0003b44:	56                   	push   esi
c0003b45:	53                   	push   ebx
c0003b46:	83 ec 5c             	sub    esp,0x5c
c0003b49:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b4d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b51:	85 db                	test   ebx,ebx
c0003b53:	0f 84 a7 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b59:	89 fe                	mov    esi,edi
c0003b5b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b5f:	83 e6 3f             	and    esi,0x3f
c0003b62:	89 f0                	mov    eax,esi
c0003b64:	0f b6 c8             	movzx  ecx,al
c0003b67:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b6b:	e8 48 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b70:	85 c0                	test   eax,eax
c0003b72:	0f 85 82 02 00 00    	jne    c0003dfa <f_open+0x2bd>
c0003b78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b7c:	83 ec 0c             	sub    esp,0xc
c0003b7f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b83:	68 00 02 00 00       	push   0x200
c0003b88:	e8 ff 1e 00 00       	call   c0005a8c <ff_memalloc>
c0003b8d:	83 c4 10             	add    esp,0x10
c0003b90:	89 c5                	mov    ebp,eax
c0003b92:	b8 11 00 00 00       	mov    eax,0x11
c0003b97:	85 ed                	test   ebp,ebp
c0003b99:	0f 84 61 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ba3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ba7:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003baa:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bae:	e8 0f fd ff ff       	call   c00038c2 <follow_path>
c0003bb3:	85 c0                	test   eax,eax
c0003bb5:	75 0c                	jne    c0003bc3 <f_open+0x86>
c0003bb7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003bbc:	79 05                	jns    c0003bc3 <f_open+0x86>
c0003bbe:	b8 06 00 00 00       	mov    eax,0x6
c0003bc3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003bc9:	0f 84 de 00 00 00    	je     c0003cad <f_open+0x170>
c0003bcf:	85 c0                	test   eax,eax
c0003bd1:	74 1e                	je     c0003bf1 <f_open+0xb4>
c0003bd3:	83 f8 04             	cmp    eax,0x4
c0003bd6:	0f 85 06 02 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003bdc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003be0:	83 ce 08             	or     esi,0x8
c0003be3:	e8 6e fd ff ff       	call   c0003956 <dir_register>
c0003be8:	85 c0                	test   eax,eax
c0003bea:	74 2f                	je     c0003c1b <f_open+0xde>
c0003bec:	e9 f1 01 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003bf1:	b8 07 00 00 00       	mov    eax,0x7
c0003bf6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bfb:	0f 85 e1 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c01:	b8 08 00 00 00       	mov    eax,0x8
c0003c06:	f7 c7 04 00 00 00    	test   edi,0x4
c0003c0c:	0f 85 d0 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c12:	83 e7 08             	and    edi,0x8
c0003c15:	0f 84 bf 00 00 00    	je     c0003cda <f_open+0x19d>
c0003c1b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003c1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c23:	89 ca                	mov    edx,ecx
c0003c25:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c29:	8a 00                	mov    al,BYTE PTR [eax]
c0003c2b:	e8 b0 f4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003c30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c34:	89 c7                	mov    edi,eax
c0003c36:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c3b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c3e:	e8 25 e1 ff ff       	call   c0001d68 <st_dword>
c0003c43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c47:	31 c9                	xor    ecx,ecx
c0003c49:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c51:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c55:	e8 af f4 ff ff       	call   c0003109 <st_clust.isra.1>
c0003c5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c5e:	31 d2                	xor    edx,edx
c0003c60:	83 c0 1c             	add    eax,0x1c
c0003c63:	e8 00 e1 ff ff       	call   c0001d68 <st_dword>
c0003c68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c6c:	85 ff                	test   edi,edi
c0003c6e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c72:	74 66                	je     c0003cda <f_open+0x19d>
c0003c74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c78:	31 c9                	xor    ecx,ecx
c0003c7a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c7d:	89 fa                	mov    edx,edi
c0003c7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c83:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c87:	e8 a9 f7 ff ff       	call   c0003435 <remove_chain>
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	0f 85 4e 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c98:	4f                   	dec    edi
c0003c99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9d:	e8 c3 e5 ff ff       	call   c0002265 <move_window>
c0003ca2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003ca6:	85 c0                	test   eax,eax
c0003ca8:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003cab:	eb 27                	jmp    c0003cd4 <f_open+0x197>
c0003cad:	85 c0                	test   eax,eax
c0003caf:	0f 85 2d 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cb5:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003cb9:	b8 04 00 00 00       	mov    eax,0x4
c0003cbe:	f6 c2 10             	test   dl,0x10
c0003cc1:	0f 85 1b 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cc7:	83 e7 02             	and    edi,0x2
c0003cca:	74 0e                	je     c0003cda <f_open+0x19d>
c0003ccc:	b8 07 00 00 00       	mov    eax,0x7
c0003cd1:	80 e2 01             	and    dl,0x1
c0003cd4:	0f 85 08 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cda:	f7 c6 08 00 00 00    	test   esi,0x8
c0003ce0:	74 03                	je     c0003ce5 <f_open+0x1a8>
c0003ce2:	83 ce 40             	or     esi,0x40
c0003ce5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ce9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ced:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cf0:	89 fa                	mov    edx,edi
c0003cf2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cf6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cf9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cfc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cfe:	e8 dd f3 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003d03:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003d06:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003d09:	e8 3e e0 ff ff       	call   c0001d4c <ld_dword>
c0003d0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003d12:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003d15:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003d17:	31 d2                	xor    edx,edx
c0003d19:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003d1d:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d21:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d25:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d2c:	89 f0                	mov    eax,esi
c0003d2e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d35:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d38:	b9 00 02 00 00       	mov    ecx,0x200
c0003d3d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d44:	e8 37 e0 ff ff       	call   c0001d80 <mem_set>
c0003d49:	83 e6 20             	and    esi,0x20
c0003d4c:	75 07                	jne    c0003d55 <f_open+0x218>
c0003d4e:	31 c0                	xor    eax,eax
c0003d50:	e9 8d 00 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003d55:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d58:	85 ff                	test   edi,edi
c0003d5a:	74 f2                	je     c0003d4e <f_open+0x211>
c0003d5c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d63:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d66:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d6a:	c1 e6 09             	shl    esi,0x9
c0003d6d:	39 fe                	cmp    esi,edi
c0003d6f:	73 1c                	jae    c0003d8d <f_open+0x250>
c0003d71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d73:	29 f7                	sub    edi,esi
c0003d75:	e8 b7 f3 ff ff       	call   c0003131 <get_fat.isra.2>
c0003d7a:	89 c2                	mov    edx,eax
c0003d7c:	83 f8 01             	cmp    eax,0x1
c0003d7f:	76 10                	jbe    c0003d91 <f_open+0x254>
c0003d81:	83 f8 ff             	cmp    eax,0xffffffff
c0003d84:	75 e7                	jne    c0003d6d <f_open+0x230>
c0003d86:	b8 01 00 00 00       	mov    eax,0x1
c0003d8b:	eb 09                	jmp    c0003d96 <f_open+0x259>
c0003d8d:	31 c0                	xor    eax,eax
c0003d8f:	eb 05                	jmp    c0003d96 <f_open+0x259>
c0003d91:	b8 02 00 00 00       	mov    eax,0x2
c0003d96:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d99:	85 c0                	test   eax,eax
c0003d9b:	75 45                	jne    c0003de2 <f_open+0x2a5>
c0003d9d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003da3:	74 a9                	je     c0003d4e <f_open+0x211>
c0003da5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003da9:	89 f0                	mov    eax,esi
c0003dab:	e8 d5 e1 ff ff       	call   c0001f85 <clst2sect>
c0003db0:	89 c2                	mov    edx,eax
c0003db2:	b8 02 00 00 00       	mov    eax,0x2
c0003db7:	85 d2                	test   edx,edx
c0003db9:	74 27                	je     c0003de2 <f_open+0x2a5>
c0003dbb:	89 f9                	mov    ecx,edi
c0003dbd:	c1 e9 09             	shr    ecx,0x9
c0003dc0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003dc3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003dc6:	6a 01                	push   0x1
c0003dc8:	50                   	push   eax
c0003dc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dcd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003dd1:	50                   	push   eax
c0003dd2:	e8 1d df ff ff       	call   c0001cf4 <disk_read>
c0003dd7:	83 c4 10             	add    esp,0x10
c0003dda:	85 c0                	test   eax,eax
c0003ddc:	0f 95 c0             	setne  al
c0003ddf:	0f b6 c0             	movzx  eax,al
c0003de2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003de6:	83 ec 0c             	sub    esp,0xc
c0003de9:	55                   	push   ebp
c0003dea:	e8 b5 1c 00 00       	call   c0005aa4 <ff_memfree>
c0003def:	83 c4 10             	add    esp,0x10
c0003df2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003df6:	85 c0                	test   eax,eax
c0003df8:	74 06                	je     c0003e00 <f_open+0x2c3>
c0003dfa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003e00:	83 c4 5c             	add    esp,0x5c
c0003e03:	5b                   	pop    ebx
c0003e04:	5e                   	pop    esi
c0003e05:	5f                   	pop    edi
c0003e06:	5d                   	pop    ebp
c0003e07:	c3                   	ret    

c0003e08 <f_read>:
c0003e08:	55                   	push   ebp
c0003e09:	57                   	push   edi
c0003e0a:	56                   	push   esi
c0003e0b:	53                   	push   ebx
c0003e0c:	83 ec 2c             	sub    esp,0x2c
c0003e0f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003e13:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003e17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003e1d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e21:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e25:	89 d8                	mov    eax,ebx
c0003e27:	e8 8f e3 ff ff       	call   c00021bb <validate>
c0003e2c:	89 c5                	mov    ebp,eax
c0003e2e:	85 c0                	test   eax,eax
c0003e30:	0f 85 c7 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e36:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e3a:	85 ed                	test   ebp,ebp
c0003e3c:	0f 85 bb 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e42:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e46:	0f 84 ac 01 00 00    	je     c0003ff8 <f_read+0x1f0>
c0003e4c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e4f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e52:	89 c7                	mov    edi,eax
c0003e54:	39 f0                	cmp    eax,esi
c0003e56:	0f 86 ad 00 00 00    	jbe    c0003f09 <f_read+0x101>
c0003e5c:	89 f7                	mov    edi,esi
c0003e5e:	e9 a6 00 00 00       	jmp    c0003f09 <f_read+0x101>
c0003e63:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e66:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e6c:	0f 85 5b 01 00 00    	jne    c0003fcd <f_read+0x1c5>
c0003e72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e76:	89 d1                	mov    ecx,edx
c0003e78:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e7c:	c1 e9 09             	shr    ecx,0x9
c0003e7f:	48                   	dec    eax
c0003e80:	21 c8                	and    eax,ecx
c0003e82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e86:	0f 84 8a 00 00 00    	je     c0003f16 <f_read+0x10e>
c0003e8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e90:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e93:	89 c8                	mov    eax,ecx
c0003e95:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e99:	e8 e7 e0 ff ff       	call   c0001f85 <clst2sect>
c0003e9e:	85 c0                	test   eax,eax
c0003ea0:	0f 84 88 00 00 00    	je     c0003f2e <f_read+0x126>
c0003ea6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003eaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003eae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003eb2:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003eb8:	0f 86 bd 00 00 00    	jbe    c0003f7b <f_read+0x173>
c0003ebe:	89 fe                	mov    esi,edi
c0003ec0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ec4:	c1 ee 09             	shr    esi,0x9
c0003ec7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ecb:	01 f2                	add    edx,esi
c0003ecd:	39 c2                	cmp    edx,eax
c0003ecf:	76 06                	jbe    c0003ed7 <f_read+0xcf>
c0003ed1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ed5:	89 c6                	mov    esi,eax
c0003ed7:	56                   	push   esi
c0003ed8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003edc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ee0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ee4:	50                   	push   eax
c0003ee5:	e8 0a de ff ff       	call   c0001cf4 <disk_read>
c0003eea:	83 c4 10             	add    esp,0x10
c0003eed:	85 c0                	test   eax,eax
c0003eef:	75 50                	jne    c0003f41 <f_read+0x139>
c0003ef1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ef5:	78 60                	js     c0003f57 <f_read+0x14f>
c0003ef7:	c1 e6 09             	shl    esi,0x9
c0003efa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003efe:	29 f7                	sub    edi,esi
c0003f00:	01 30                	add    DWORD PTR [eax],esi
c0003f02:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003f06:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003f09:	85 ff                	test   edi,edi
c0003f0b:	0f 85 52 ff ff ff    	jne    c0003e63 <f_read+0x5b>
c0003f11:	e9 e7 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f16:	85 d2                	test   edx,edx
c0003f18:	75 05                	jne    c0003f1f <f_read+0x117>
c0003f1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f1d:	eb 0a                	jmp    c0003f29 <f_read+0x121>
c0003f1f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f24:	e8 08 f2 ff ff       	call   c0003131 <get_fat.isra.2>
c0003f29:	83 f8 01             	cmp    eax,0x1
c0003f2c:	77 0e                	ja     c0003f3c <f_read+0x134>
c0003f2e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f32:	bd 02 00 00 00       	mov    ebp,0x2
c0003f37:	e9 c1 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f3c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f3f:	75 0e                	jne    c0003f4f <f_read+0x147>
c0003f41:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f45:	bd 01 00 00 00       	mov    ebp,0x1
c0003f4a:	e9 ae 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f4f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f52:	e9 35 ff ff ff       	jmp    c0003e8c <f_read+0x84>
c0003f57:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f5e:	39 f0                	cmp    eax,esi
c0003f60:	73 95                	jae    c0003ef7 <f_read+0xef>
c0003f62:	c1 e0 09             	shl    eax,0x9
c0003f65:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f68:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f6c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f71:	e8 f5 dd ff ff       	call   c0001d6b <mem_cpy>
c0003f76:	e9 7c ff ff ff       	jmp    c0003ef7 <f_read+0xef>
c0003f7b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f7e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f82:	74 42                	je     c0003fc6 <f_read+0x1be>
c0003f84:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f87:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f8b:	79 19                	jns    c0003fa6 <f_read+0x19e>
c0003f8d:	6a 01                	push   0x1
c0003f8f:	50                   	push   eax
c0003f90:	56                   	push   esi
c0003f91:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 6f dd ff ff       	call   c0001d0a <disk_write>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	75 9f                	jne    c0003f41 <f_read+0x139>
c0003fa2:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003fa6:	6a 01                	push   0x1
c0003fa8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003fac:	56                   	push   esi
c0003fad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003fb1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003fb5:	50                   	push   eax
c0003fb6:	e8 39 dd ff ff       	call   c0001cf4 <disk_read>
c0003fbb:	83 c4 10             	add    esp,0x10
c0003fbe:	85 c0                	test   eax,eax
c0003fc0:	0f 85 7b ff ff ff    	jne    c0003f41 <f_read+0x139>
c0003fc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003fca:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fcd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fd0:	ba 00 02 00 00       	mov    edx,0x200
c0003fd5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fda:	89 fe                	mov    esi,edi
c0003fdc:	29 c2                	sub    edx,eax
c0003fde:	39 d7                	cmp    edi,edx
c0003fe0:	76 02                	jbe    c0003fe4 <f_read+0x1dc>
c0003fe2:	89 d6                	mov    esi,edx
c0003fe4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fe8:	89 f1                	mov    ecx,esi
c0003fea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fee:	e8 78 dd ff ff       	call   c0001d6b <mem_cpy>
c0003ff3:	e9 02 ff ff ff       	jmp    c0003efa <f_read+0xf2>
c0003ff8:	bd 07 00 00 00       	mov    ebp,0x7
c0003ffd:	83 c4 2c             	add    esp,0x2c
c0004000:	89 e8                	mov    eax,ebp
c0004002:	5b                   	pop    ebx
c0004003:	5e                   	pop    esi
c0004004:	5f                   	pop    edi
c0004005:	5d                   	pop    ebp
c0004006:	c3                   	ret    

c0004007 <f_write>:
c0004007:	55                   	push   ebp
c0004008:	57                   	push   edi
c0004009:	56                   	push   esi
c000400a:	53                   	push   ebx
c000400b:	83 ec 2c             	sub    esp,0x2c
c000400e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004012:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004016:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000401c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004020:	89 d8                	mov    eax,ebx
c0004022:	e8 94 e1 ff ff       	call   c00021bb <validate>
c0004027:	89 c5                	mov    ebp,eax
c0004029:	85 c0                	test   eax,eax
c000402b:	0f 85 00 02 00 00    	jne    c0004231 <f_write+0x22a>
c0004031:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004035:	85 ed                	test   ebp,ebp
c0004037:	0f 85 f4 01 00 00    	jne    c0004231 <f_write+0x22a>
c000403d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004041:	0f 84 e5 01 00 00    	je     c000422c <f_write+0x225>
c0004047:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000404a:	89 c7                	mov    edi,eax
c000404c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004050:	0f 83 ea 00 00 00    	jae    c0004140 <f_write+0x139>
c0004056:	f7 d0                	not    eax
c0004058:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000405c:	e9 df 00 00 00       	jmp    c0004140 <f_write+0x139>
c0004061:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004064:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000406a:	0f 85 8b 01 00 00    	jne    c00041fb <f_write+0x1f4>
c0004070:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004074:	89 d1                	mov    ecx,edx
c0004076:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000407a:	c1 e9 09             	shr    ecx,0x9
c000407d:	48                   	dec    eax
c000407e:	21 c8                	and    eax,ecx
c0004080:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004084:	0f 84 c3 00 00 00    	je     c000414d <f_write+0x146>
c000408a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000408e:	0f 88 18 01 00 00    	js     c00041ac <f_write+0x1a5>
c0004094:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004098:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000409b:	89 c8                	mov    eax,ecx
c000409d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00040a1:	e8 df de ff ff       	call   c0001f85 <clst2sect>
c00040a6:	85 c0                	test   eax,eax
c00040a8:	0f 84 c8 00 00 00    	je     c0004176 <f_write+0x16f>
c00040ae:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00040b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00040b6:	01 c7                	add    edi,eax
c00040b8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040c0:	0f 86 0d 01 00 00    	jbe    c00041d3 <f_write+0x1cc>
c00040c6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040ca:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ce:	c1 ee 09             	shr    esi,0x9
c00040d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040d5:	01 f2                	add    edx,esi
c00040d7:	39 c2                	cmp    edx,eax
c00040d9:	76 06                	jbe    c00040e1 <f_write+0xda>
c00040db:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040df:	89 c6                	mov    esi,eax
c00040e1:	56                   	push   esi
c00040e2:	57                   	push   edi
c00040e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040eb:	50                   	push   eax
c00040ec:	e8 19 dc ff ff       	call   c0001d0a <disk_write>
c00040f1:	83 c4 10             	add    esp,0x10
c00040f4:	85 c0                	test   eax,eax
c00040f6:	0f 85 8d 00 00 00    	jne    c0004189 <f_write+0x182>
c00040fc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040ff:	29 fa                	sub    edx,edi
c0004101:	39 f2                	cmp    edx,esi
c0004103:	73 18                	jae    c000411d <f_write+0x116>
c0004105:	c1 e2 09             	shl    edx,0x9
c0004108:	8d 43 28             	lea    eax,[ebx+0x28]
c000410b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000410f:	b9 00 02 00 00       	mov    ecx,0x200
c0004114:	e8 52 dc ff ff       	call   c0001d6b <mem_cpy>
c0004119:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000411d:	c1 e6 09             	shl    esi,0x9
c0004120:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004124:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004128:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000412c:	01 30                	add    DWORD PTR [eax],esi
c000412e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004131:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004134:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004137:	39 f0                	cmp    eax,esi
c0004139:	73 02                	jae    c000413d <f_write+0x136>
c000413b:	89 f0                	mov    eax,esi
c000413d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004140:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004145:	0f 85 16 ff ff ff    	jne    c0004061 <f_write+0x5a>
c000414b:	eb 1b                	jmp    c0004168 <f_write+0x161>
c000414d:	85 d2                	test   edx,edx
c000414f:	75 09                	jne    c000415a <f_write+0x153>
c0004151:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004154:	85 c0                	test   eax,eax
c0004156:	75 19                	jne    c0004171 <f_write+0x16a>
c0004158:	eb 03                	jmp    c000415d <f_write+0x156>
c000415a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 97 f1 ff ff       	call   c00032fb <create_chain>
c0004164:	85 c0                	test   eax,eax
c0004166:	75 09                	jne    c0004171 <f_write+0x16a>
c0004168:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000416c:	e9 c0 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004171:	83 f8 01             	cmp    eax,0x1
c0004174:	75 0e                	jne    c0004184 <f_write+0x17d>
c0004176:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000417a:	bd 02 00 00 00       	mov    ebp,0x2
c000417f:	e9 ad 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004184:	83 f8 ff             	cmp    eax,0xffffffff
c0004187:	75 0e                	jne    c0004197 <f_write+0x190>
c0004189:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000418d:	bd 01 00 00 00       	mov    ebp,0x1
c0004192:	e9 9a 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004197:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000419a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000419e:	0f 85 e6 fe ff ff    	jne    c000408a <f_write+0x83>
c00041a4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041a7:	e9 de fe ff ff       	jmp    c000408a <f_write+0x83>
c00041ac:	6a 01                	push   0x1
c00041ae:	8d 43 28             	lea    eax,[ebx+0x28]
c00041b1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00041b4:	50                   	push   eax
c00041b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00041b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00041bd:	50                   	push   eax
c00041be:	e8 47 db ff ff       	call   c0001d0a <disk_write>
c00041c3:	83 c4 10             	add    esp,0x10
c00041c6:	85 c0                	test   eax,eax
c00041c8:	75 bf                	jne    c0004189 <f_write+0x182>
c00041ca:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ce:	e9 c1 fe ff ff       	jmp    c0004094 <f_write+0x8d>
c00041d3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041d6:	74 20                	je     c00041f8 <f_write+0x1f1>
c00041d8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041db:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041de:	76 18                	jbe    c00041f8 <f_write+0x1f1>
c00041e0:	6a 01                	push   0x1
c00041e2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041e5:	57                   	push   edi
c00041e6:	50                   	push   eax
c00041e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041eb:	50                   	push   eax
c00041ec:	e8 03 db ff ff       	call   c0001cf4 <disk_read>
c00041f1:	83 c4 10             	add    esp,0x10
c00041f4:	85 c0                	test   eax,eax
c00041f6:	75 91                	jne    c0004189 <f_write+0x182>
c00041f8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041fb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041fe:	ba 00 02 00 00       	mov    edx,0x200
c0004203:	25 ff 01 00 00       	and    eax,0x1ff
c0004208:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000420c:	29 c2                	sub    edx,eax
c000420e:	39 d6                	cmp    esi,edx
c0004210:	76 02                	jbe    c0004214 <f_write+0x20d>
c0004212:	89 d6                	mov    esi,edx
c0004214:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004218:	89 f1                	mov    ecx,esi
c000421a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000421e:	e8 48 db ff ff       	call   c0001d6b <mem_cpy>
c0004223:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004227:	e9 f4 fe ff ff       	jmp    c0004120 <f_write+0x119>
c000422c:	bd 07 00 00 00       	mov    ebp,0x7
c0004231:	83 c4 2c             	add    esp,0x2c
c0004234:	89 e8                	mov    eax,ebp
c0004236:	5b                   	pop    ebx
c0004237:	5e                   	pop    esi
c0004238:	5f                   	pop    edi
c0004239:	5d                   	pop    ebp
c000423a:	c3                   	ret    

c000423b <f_sync>:
c000423b:	56                   	push   esi
c000423c:	53                   	push   ebx
c000423d:	83 ec 14             	sub    esp,0x14
c0004240:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004244:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004248:	89 d8                	mov    eax,ebx
c000424a:	e8 6c df ff ff       	call   c00021bb <validate>
c000424f:	85 c0                	test   eax,eax
c0004251:	0f 85 93 00 00 00    	jne    c00042ea <f_sync+0xaf>
c0004257:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000425a:	f6 c2 40             	test   dl,0x40
c000425d:	0f 84 87 00 00 00    	je     c00042ea <f_sync+0xaf>
c0004263:	84 d2                	test   dl,dl
c0004265:	79 29                	jns    c0004290 <f_sync+0x55>
c0004267:	6a 01                	push   0x1
c0004269:	8d 43 28             	lea    eax,[ebx+0x28]
c000426c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000426f:	50                   	push   eax
c0004270:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004274:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004278:	50                   	push   eax
c0004279:	e8 8c da ff ff       	call   c0001d0a <disk_write>
c000427e:	83 c4 10             	add    esp,0x10
c0004281:	89 c2                	mov    edx,eax
c0004283:	b8 01 00 00 00       	mov    eax,0x1
c0004288:	85 d2                	test   edx,edx
c000428a:	75 5e                	jne    c00042ea <f_sync+0xaf>
c000428c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004290:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004297:	e8 c9 df ff ff       	call   c0002265 <move_window>
c000429c:	85 c0                	test   eax,eax
c000429e:	75 4a                	jne    c00042ea <f_sync+0xaf>
c00042a0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00042a3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00042a7:	89 f2                	mov    edx,esi
c00042a9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00042ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00042ae:	e8 56 ee ff ff       	call   c0003109 <st_clust.isra.1>
c00042b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042b6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00042b9:	e8 aa da ff ff       	call   c0001d68 <st_dword>
c00042be:	8d 46 16             	lea    eax,[esi+0x16]
c00042c1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042c6:	e8 9d da ff ff       	call   c0001d68 <st_dword>
c00042cb:	8d 46 12             	lea    eax,[esi+0x12]
c00042ce:	31 d2                	xor    edx,edx
c00042d0:	e8 8f da ff ff       	call   c0001d64 <st_word>
c00042d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042e1:	e8 bf e9 ff ff       	call   c0002ca5 <sync_fs>
c00042e6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ea:	83 c4 14             	add    esp,0x14
c00042ed:	5b                   	pop    ebx
c00042ee:	5e                   	pop    esi
c00042ef:	c3                   	ret    

c00042f0 <f_close>:
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 24             	sub    esp,0x24
c00042f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042f8:	53                   	push   ebx
c00042f9:	e8 3d ff ff ff       	call   c000423b <f_sync>
c00042fe:	83 c4 10             	add    esp,0x10
c0004301:	85 c0                	test   eax,eax
c0004303:	75 15                	jne    c000431a <f_close+0x2a>
c0004305:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004309:	89 d8                	mov    eax,ebx
c000430b:	e8 ab de ff ff       	call   c00021bb <validate>
c0004310:	85 c0                	test   eax,eax
c0004312:	75 06                	jne    c000431a <f_close+0x2a>
c0004314:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000431a:	83 c4 18             	add    esp,0x18
c000431d:	5b                   	pop    ebx
c000431e:	c3                   	ret    

c000431f <f_lseek>:
c000431f:	55                   	push   ebp
c0004320:	57                   	push   edi
c0004321:	56                   	push   esi
c0004322:	53                   	push   ebx
c0004323:	83 ec 2c             	sub    esp,0x2c
c0004326:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000432a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000432e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004332:	89 d8                	mov    eax,ebx
c0004334:	e8 82 de ff ff       	call   c00021bb <validate>
c0004339:	89 c5                	mov    ebp,eax
c000433b:	85 c0                	test   eax,eax
c000433d:	0f 85 79 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c0004343:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004347:	85 ed                	test   ebp,ebp
c0004349:	0f 85 6d 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c000434f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004352:	39 f0                	cmp    eax,esi
c0004354:	73 08                	jae    c000435e <f_lseek+0x3f>
c0004356:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435a:	75 02                	jne    c000435e <f_lseek+0x3f>
c000435c:	89 c6                	mov    esi,eax
c000435e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004361:	85 f6                	test   esi,esi
c0004363:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000436a:	75 07                	jne    c0004373 <f_lseek+0x54>
c000436c:	31 f6                	xor    esi,esi
c000436e:	e9 e2 00 00 00       	jmp    c0004455 <f_lseek+0x136>
c0004373:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004377:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000437b:	c1 e7 09             	shl    edi,0x9
c000437e:	85 c9                	test   ecx,ecx
c0004380:	74 28                	je     c00043aa <f_lseek+0x8b>
c0004382:	49                   	dec    ecx
c0004383:	31 d2                	xor    edx,edx
c0004385:	8d 46 ff             	lea    eax,[esi-0x1]
c0004388:	f7 f7                	div    edi
c000438a:	31 d2                	xor    edx,edx
c000438c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004390:	89 c8                	mov    eax,ecx
c0004392:	f7 f7                	div    edi
c0004394:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004398:	72 10                	jb     c00043aa <f_lseek+0x8b>
c000439a:	89 f8                	mov    eax,edi
c000439c:	f7 d8                	neg    eax
c000439e:	21 c1                	and    ecx,eax
c00043a0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00043a3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00043a6:	29 ce                	sub    esi,ecx
c00043a8:	eb 3c                	jmp    c00043e6 <f_lseek+0xc7>
c00043aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00043ad:	85 c0                	test   eax,eax
c00043af:	75 32                	jne    c00043e3 <f_lseek+0xc4>
c00043b1:	31 d2                	xor    edx,edx
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 41 ef ff ff       	call   c00032fb <create_chain>
c00043ba:	83 f8 01             	cmp    eax,0x1
c00043bd:	75 0e                	jne    c00043cd <f_lseek+0xae>
c00043bf:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043c3:	bd 02 00 00 00       	mov    ebp,0x2
c00043c8:	e9 ef 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043cd:	83 f8 ff             	cmp    eax,0xffffffff
c00043d0:	75 0e                	jne    c00043e0 <f_lseek+0xc1>
c00043d2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043d6:	bd 01 00 00 00       	mov    ebp,0x1
c00043db:	e9 dc 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043e0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043e3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043e6:	85 c0                	test   eax,eax
c00043e8:	74 82                	je     c000436c <f_lseek+0x4d>
c00043ea:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043ed:	39 fe                	cmp    esi,edi
c00043ef:	76 3d                	jbe    c000442e <f_lseek+0x10f>
c00043f1:	01 fa                	add    edx,edi
c00043f3:	29 fe                	sub    esi,edi
c00043f5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043f8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043fc:	89 c2                	mov    edx,eax
c00043fe:	74 0d                	je     c000440d <f_lseek+0xee>
c0004400:	89 d8                	mov    eax,ebx
c0004402:	e8 f4 ee ff ff       	call   c00032fb <create_chain>
c0004407:	85 c0                	test   eax,eax
c0004409:	75 09                	jne    c0004414 <f_lseek+0xf5>
c000440b:	eb 1f                	jmp    c000442c <f_lseek+0x10d>
c000440d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000440f:	e8 1d ed ff ff       	call   c0003131 <get_fat.isra.2>
c0004414:	83 f8 ff             	cmp    eax,0xffffffff
c0004417:	74 b9                	je     c00043d2 <f_lseek+0xb3>
c0004419:	83 f8 01             	cmp    eax,0x1
c000441c:	76 a1                	jbe    c00043bf <f_lseek+0xa0>
c000441e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004422:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004425:	76 98                	jbe    c00043bf <f_lseek+0xa0>
c0004427:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000442a:	eb be                	jmp    c00043ea <f_lseek+0xcb>
c000442c:	31 f6                	xor    esi,esi
c000442e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004431:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004437:	0f 84 2f ff ff ff    	je     c000436c <f_lseek+0x4d>
c000443d:	89 c2                	mov    edx,eax
c000443f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004443:	e8 3d db ff ff       	call   c0001f85 <clst2sect>
c0004448:	85 c0                	test   eax,eax
c000444a:	0f 84 6f ff ff ff    	je     c00043bf <f_lseek+0xa0>
c0004450:	c1 ee 09             	shr    esi,0x9
c0004453:	01 c6                	add    esi,eax
c0004455:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004458:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000445b:	76 07                	jbe    c0004464 <f_lseek+0x145>
c000445d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004460:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004464:	a9 ff 01 00 00       	test   eax,0x1ff
c0004469:	74 51                	je     c00044bc <f_lseek+0x19d>
c000446b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000446e:	39 f0                	cmp    eax,esi
c0004470:	74 4a                	je     c00044bc <f_lseek+0x19d>
c0004472:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004475:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004479:	79 21                	jns    c000449c <f_lseek+0x17d>
c000447b:	6a 01                	push   0x1
c000447d:	50                   	push   eax
c000447e:	57                   	push   edi
c000447f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004483:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004487:	50                   	push   eax
c0004488:	e8 7d d8 ff ff       	call   c0001d0a <disk_write>
c000448d:	83 c4 10             	add    esp,0x10
c0004490:	85 c0                	test   eax,eax
c0004492:	0f 85 3a ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c0004498:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000449c:	6a 01                	push   0x1
c000449e:	56                   	push   esi
c000449f:	57                   	push   edi
c00044a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044a4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044a8:	50                   	push   eax
c00044a9:	e8 46 d8 ff ff       	call   c0001cf4 <disk_read>
c00044ae:	83 c4 10             	add    esp,0x10
c00044b1:	85 c0                	test   eax,eax
c00044b3:	0f 85 19 ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c00044b9:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00044bc:	83 c4 2c             	add    esp,0x2c
c00044bf:	89 e8                	mov    eax,ebp
c00044c1:	5b                   	pop    ebx
c00044c2:	5e                   	pop    esi
c00044c3:	5f                   	pop    edi
c00044c4:	5d                   	pop    ebp
c00044c5:	c3                   	ret    

c00044c6 <f_opendir>:
c00044c6:	56                   	push   esi
c00044c7:	b8 09 00 00 00       	mov    eax,0x9
c00044cc:	53                   	push   ebx
c00044cd:	83 ec 24             	sub    esp,0x24
c00044d0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044d4:	85 db                	test   ebx,ebx
c00044d6:	0f 84 af 00 00 00    	je     c000458b <f_opendir+0xc5>
c00044dc:	31 c9                	xor    ecx,ecx
c00044de:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044e2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044e6:	e8 cd de ff ff       	call   c00023b8 <mount_volume>
c00044eb:	85 c0                	test   eax,eax
c00044ed:	0f 85 92 00 00 00    	jne    c0004585 <f_opendir+0xbf>
c00044f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f7:	83 ec 0c             	sub    esp,0xc
c00044fa:	89 03                	mov    DWORD PTR [ebx],eax
c00044fc:	68 00 02 00 00       	push   0x200
c0004501:	e8 86 15 00 00       	call   c0005a8c <ff_memalloc>
c0004506:	83 c4 10             	add    esp,0x10
c0004509:	89 c6                	mov    esi,eax
c000450b:	b8 11 00 00 00       	mov    eax,0x11
c0004510:	85 f6                	test   esi,esi
c0004512:	74 77                	je     c000458b <f_opendir+0xc5>
c0004514:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004518:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000451c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000451f:	89 d8                	mov    eax,ebx
c0004521:	e8 9c f3 ff ff       	call   c00038c2 <follow_path>
c0004526:	85 c0                	test   eax,eax
c0004528:	75 37                	jne    c0004561 <f_opendir+0x9b>
c000452a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000452e:	78 1c                	js     c000454c <f_opendir+0x86>
c0004530:	b8 05 00 00 00       	mov    eax,0x5
c0004535:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004539:	74 26                	je     c0004561 <f_opendir+0x9b>
c000453b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000453e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004542:	8a 00                	mov    al,BYTE PTR [eax]
c0004544:	e8 97 eb ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004549:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000454c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004550:	31 d2                	xor    edx,edx
c0004552:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004556:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 d2 ec ff ff       	call   c0003233 <dir_sdi>
c0004561:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004565:	83 ec 0c             	sub    esp,0xc
c0004568:	56                   	push   esi
c0004569:	e8 36 15 00 00       	call   c0005aa4 <ff_memfree>
c000456e:	83 c4 10             	add    esp,0x10
c0004571:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004575:	83 f8 04             	cmp    eax,0x4
c0004578:	74 06                	je     c0004580 <f_opendir+0xba>
c000457a:	85 c0                	test   eax,eax
c000457c:	74 0d                	je     c000458b <f_opendir+0xc5>
c000457e:	eb 05                	jmp    c0004585 <f_opendir+0xbf>
c0004580:	b8 05 00 00 00       	mov    eax,0x5
c0004585:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458b:	83 c4 24             	add    esp,0x24
c000458e:	5b                   	pop    ebx
c000458f:	5e                   	pop    esi
c0004590:	c3                   	ret    

c0004591 <f_closedir>:
c0004591:	53                   	push   ebx
c0004592:	83 ec 18             	sub    esp,0x18
c0004595:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004599:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000459d:	89 d8                	mov    eax,ebx
c000459f:	e8 17 dc ff ff       	call   c00021bb <validate>
c00045a4:	85 c0                	test   eax,eax
c00045a6:	75 06                	jne    c00045ae <f_closedir+0x1d>
c00045a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00045ae:	83 c4 18             	add    esp,0x18
c00045b1:	5b                   	pop    ebx
c00045b2:	c3                   	ret    

c00045b3 <f_readdir>:
c00045b3:	57                   	push   edi
c00045b4:	56                   	push   esi
c00045b5:	53                   	push   ebx
c00045b6:	83 ec 20             	sub    esp,0x20
c00045b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00045bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045c5:	89 d8                	mov    eax,ebx
c00045c7:	e8 ef db ff ff       	call   c00021bb <validate>
c00045cc:	85 c0                	test   eax,eax
c00045ce:	75 6e                	jne    c000463e <f_readdir+0x8b>
c00045d0:	85 ff                	test   edi,edi
c00045d2:	75 0b                	jne    c00045df <f_readdir+0x2c>
c00045d4:	31 d2                	xor    edx,edx
c00045d6:	89 d8                	mov    eax,ebx
c00045d8:	e8 56 ec ff ff       	call   c0003233 <dir_sdi>
c00045dd:	eb 5f                	jmp    c000463e <f_readdir+0x8b>
c00045df:	83 ec 0c             	sub    esp,0xc
c00045e2:	68 00 02 00 00       	push   0x200
c00045e7:	e8 a0 14 00 00       	call   c0005a8c <ff_memalloc>
c00045ec:	83 c4 10             	add    esp,0x10
c00045ef:	89 c6                	mov    esi,eax
c00045f1:	b8 11 00 00 00       	mov    eax,0x11
c00045f6:	85 f6                	test   esi,esi
c00045f8:	74 44                	je     c000463e <f_readdir+0x8b>
c00045fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045fe:	31 d2                	xor    edx,edx
c0004600:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004603:	89 d8                	mov    eax,ebx
c0004605:	e8 1a f0 ff ff       	call   c0003624 <dir_read>
c000460a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000460f:	75 19                	jne    c000462a <f_readdir+0x77>
c0004611:	89 fa                	mov    edx,edi
c0004613:	89 d8                	mov    eax,ebx
c0004615:	e8 e2 e8 ff ff       	call   c0002efc <get_fileinfo>
c000461a:	31 d2                	xor    edx,edx
c000461c:	89 d8                	mov    eax,ebx
c000461e:	e8 9b ee ff ff       	call   c00034be <dir_next>
c0004623:	83 f8 04             	cmp    eax,0x4
c0004626:	75 02                	jne    c000462a <f_readdir+0x77>
c0004628:	31 c0                	xor    eax,eax
c000462a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000462e:	83 ec 0c             	sub    esp,0xc
c0004631:	56                   	push   esi
c0004632:	e8 6d 14 00 00       	call   c0005aa4 <ff_memfree>
c0004637:	83 c4 10             	add    esp,0x10
c000463a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000463e:	83 c4 20             	add    esp,0x20
c0004641:	5b                   	pop    ebx
c0004642:	5e                   	pop    esi
c0004643:	5f                   	pop    edi
c0004644:	c3                   	ret    

c0004645 <f_stat>:
c0004645:	57                   	push   edi
c0004646:	31 c9                	xor    ecx,ecx
c0004648:	56                   	push   esi
c0004649:	53                   	push   ebx
c000464a:	83 ec 30             	sub    esp,0x30
c000464d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004651:	89 e2                	mov    edx,esp
c0004653:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004657:	e8 5c dd ff ff       	call   c00023b8 <mount_volume>
c000465c:	89 c3                	mov    ebx,eax
c000465e:	85 c0                	test   eax,eax
c0004660:	75 59                	jne    c00046bb <f_stat+0x76>
c0004662:	83 ec 0c             	sub    esp,0xc
c0004665:	bb 11 00 00 00       	mov    ebx,0x11
c000466a:	68 00 02 00 00       	push   0x200
c000466f:	e8 18 14 00 00       	call   c0005a8c <ff_memalloc>
c0004674:	83 c4 10             	add    esp,0x10
c0004677:	89 c6                	mov    esi,eax
c0004679:	85 c0                	test   eax,eax
c000467b:	74 3e                	je     c00046bb <f_stat+0x76>
c000467d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004680:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004684:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004687:	89 e0                	mov    eax,esp
c0004689:	e8 34 f2 ff ff       	call   c00038c2 <follow_path>
c000468e:	89 c3                	mov    ebx,eax
c0004690:	85 c0                	test   eax,eax
c0004692:	75 1b                	jne    c00046af <f_stat+0x6a>
c0004694:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004699:	78 0f                	js     c00046aa <f_stat+0x65>
c000469b:	85 ff                	test   edi,edi
c000469d:	74 10                	je     c00046af <f_stat+0x6a>
c000469f:	89 fa                	mov    edx,edi
c00046a1:	89 e0                	mov    eax,esp
c00046a3:	e8 54 e8 ff ff       	call   c0002efc <get_fileinfo>
c00046a8:	eb 05                	jmp    c00046af <f_stat+0x6a>
c00046aa:	bb 06 00 00 00       	mov    ebx,0x6
c00046af:	83 ec 0c             	sub    esp,0xc
c00046b2:	56                   	push   esi
c00046b3:	e8 ec 13 00 00       	call   c0005aa4 <ff_memfree>
c00046b8:	83 c4 10             	add    esp,0x10
c00046bb:	83 c4 30             	add    esp,0x30
c00046be:	89 d8                	mov    eax,ebx
c00046c0:	5b                   	pop    ebx
c00046c1:	5e                   	pop    esi
c00046c2:	5f                   	pop    edi
c00046c3:	c3                   	ret    

c00046c4 <f_getfree>:
c00046c4:	55                   	push   ebp
c00046c5:	31 c9                	xor    ecx,ecx
c00046c7:	57                   	push   edi
c00046c8:	56                   	push   esi
c00046c9:	53                   	push   ebx
c00046ca:	83 ec 2c             	sub    esp,0x2c
c00046cd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046d1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046d5:	e8 de dc ff ff       	call   c00023b8 <mount_volume>
c00046da:	89 c7                	mov    edi,eax
c00046dc:	85 c0                	test   eax,eax
c00046de:	0f 85 d8 00 00 00    	jne    c00047bc <f_getfree+0xf8>
c00046e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046e8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046ec:	89 30                	mov    DWORD PTR [eax],esi
c00046ee:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046f1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046f4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046f7:	39 d0                	cmp    eax,edx
c00046f9:	77 0b                	ja     c0004706 <f_getfree+0x42>
c00046fb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046ff:	89 01                	mov    DWORD PTR [ecx],eax
c0004701:	e9 b6 00 00 00       	jmp    c00047bc <f_getfree+0xf8>
c0004706:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004709:	75 29                	jne    c0004734 <f_getfree+0x70>
c000470b:	bd 02 00 00 00       	mov    ebp,0x2
c0004710:	31 db                	xor    ebx,ebx
c0004712:	89 ea                	mov    edx,ebp
c0004714:	89 f0                	mov    eax,esi
c0004716:	e8 16 ea ff ff       	call   c0003131 <get_fat.isra.2>
c000471b:	83 f8 ff             	cmp    eax,0xffffffff
c000471e:	74 7b                	je     c000479b <f_getfree+0xd7>
c0004720:	83 f8 01             	cmp    eax,0x1
c0004723:	74 7d                	je     c00047a2 <f_getfree+0xde>
c0004725:	83 d3 00             	adc    ebx,0x0
c0004728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472c:	45                   	inc    ebp
c000472d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004730:	77 e0                	ja     c0004712 <f_getfree+0x4e>
c0004732:	eb 77                	jmp    c00047ab <f_getfree+0xe7>
c0004734:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004737:	31 db                	xor    ebx,ebx
c0004739:	31 f6                	xor    esi,esi
c000473b:	85 f6                	test   esi,esi
c000473d:	75 18                	jne    c0004757 <f_getfree+0x93>
c000473f:	8d 42 01             	lea    eax,[edx+0x1]
c0004742:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000474a:	e8 16 db ff ff       	call   c0002265 <move_window>
c000474f:	85 c0                	test   eax,eax
c0004751:	75 56                	jne    c00047a9 <f_getfree+0xe5>
c0004753:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004757:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000475b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000475f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004763:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004766:	75 11                	jne    c0004779 <f_getfree+0xb5>
c0004768:	e8 d2 d5 ff ff       	call   c0001d3f <ld_word>
c000476d:	66 83 f8 01          	cmp    ax,0x1
c0004771:	83 d3 00             	adc    ebx,0x0
c0004774:	83 c6 02             	add    esi,0x2
c0004777:	eb 13                	jmp    c000478c <f_getfree+0xc8>
c0004779:	e8 ce d5 ff ff       	call   c0001d4c <ld_dword>
c000477e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004783:	83 f8 01             	cmp    eax,0x1
c0004786:	83 d3 00             	adc    ebx,0x0
c0004789:	83 c6 04             	add    esi,0x4
c000478c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004796:	4d                   	dec    ebp
c0004797:	75 a2                	jne    c000473b <f_getfree+0x77>
c0004799:	eb 10                	jmp    c00047ab <f_getfree+0xe7>
c000479b:	bf 01 00 00 00       	mov    edi,0x1
c00047a0:	eb 09                	jmp    c00047ab <f_getfree+0xe7>
c00047a2:	bf 02 00 00 00       	mov    edi,0x2
c00047a7:	eb 02                	jmp    c00047ab <f_getfree+0xe7>
c00047a9:	89 c7                	mov    edi,eax
c00047ab:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00047af:	89 18                	mov    DWORD PTR [eax],ebx
c00047b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047b5:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00047b8:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00047bc:	83 c4 2c             	add    esp,0x2c
c00047bf:	89 f8                	mov    eax,edi
c00047c1:	5b                   	pop    ebx
c00047c2:	5e                   	pop    esi
c00047c3:	5f                   	pop    edi
c00047c4:	5d                   	pop    ebp
c00047c5:	c3                   	ret    

c00047c6 <f_truncate>:
c00047c6:	56                   	push   esi
c00047c7:	53                   	push   ebx
c00047c8:	83 ec 14             	sub    esp,0x14
c00047cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047cf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047d3:	89 d8                	mov    eax,ebx
c00047d5:	e8 e1 d9 ff ff       	call   c00021bb <validate>
c00047da:	89 c6                	mov    esi,eax
c00047dc:	85 c0                	test   eax,eax
c00047de:	0f 85 be 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047e4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047e8:	85 f6                	test   esi,esi
c00047ea:	0f 85 b2 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047f0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047f4:	0f 84 a3 00 00 00    	je     c000489d <f_truncate+0xd7>
c00047fa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047fd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004800:	0f 83 9c 00 00 00    	jae    c00048a2 <f_truncate+0xdc>
c0004806:	85 c0                	test   eax,eax
c0004808:	75 15                	jne    c000481f <f_truncate+0x59>
c000480a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000480d:	31 c9                	xor    ecx,ecx
c000480f:	89 d8                	mov    eax,ebx
c0004811:	e8 1f ec ff ff       	call   c0003435 <remove_chain>
c0004816:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000481d:	eb 35                	jmp    c0004854 <f_truncate+0x8e>
c000481f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004822:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004824:	e8 08 e9 ff ff       	call   c0003131 <get_fat.isra.2>
c0004829:	89 c2                	mov    edx,eax
c000482b:	b8 01 00 00 00       	mov    eax,0x1
c0004830:	83 fa ff             	cmp    edx,0xffffffff
c0004833:	74 1f                	je     c0004854 <f_truncate+0x8e>
c0004835:	b8 02 00 00 00       	mov    eax,0x2
c000483a:	83 fa 01             	cmp    edx,0x1
c000483d:	74 15                	je     c0004854 <f_truncate+0x8e>
c000483f:	31 c0                	xor    eax,eax
c0004841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004845:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004848:	76 0a                	jbe    c0004854 <f_truncate+0x8e>
c000484a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000484d:	89 d8                	mov    eax,ebx
c000484f:	e8 e1 eb ff ff       	call   c0003435 <remove_chain>
c0004854:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004857:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000485a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000485d:	83 ca 40             	or     edx,0x40
c0004860:	85 c0                	test   eax,eax
c0004862:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004865:	75 2f                	jne    c0004896 <f_truncate+0xd0>
c0004867:	84 d2                	test   dl,dl
c0004869:	79 37                	jns    c00048a2 <f_truncate+0xdc>
c000486b:	6a 01                	push   0x1
c000486d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004870:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004873:	50                   	push   eax
c0004874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004878:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000487c:	50                   	push   eax
c000487d:	e8 88 d4 ff ff       	call   c0001d0a <disk_write>
c0004882:	83 c4 10             	add    esp,0x10
c0004885:	85 c0                	test   eax,eax
c0004887:	75 08                	jne    c0004891 <f_truncate+0xcb>
c0004889:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000488d:	31 f6                	xor    esi,esi
c000488f:	eb 11                	jmp    c00048a2 <f_truncate+0xdc>
c0004891:	b8 01 00 00 00       	mov    eax,0x1
c0004896:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004899:	89 c6                	mov    esi,eax
c000489b:	eb 05                	jmp    c00048a2 <f_truncate+0xdc>
c000489d:	be 07 00 00 00       	mov    esi,0x7
c00048a2:	89 f0                	mov    eax,esi
c00048a4:	83 c4 14             	add    esp,0x14
c00048a7:	5b                   	pop    ebx
c00048a8:	5e                   	pop    esi
c00048a9:	c3                   	ret    

c00048aa <f_unlink>:
c00048aa:	55                   	push   ebp
c00048ab:	b9 02 00 00 00       	mov    ecx,0x2
c00048b0:	57                   	push   edi
c00048b1:	56                   	push   esi
c00048b2:	53                   	push   ebx
c00048b3:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00048b9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048bd:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048c4:	e8 ef da ff ff       	call   c00023b8 <mount_volume>
c00048c9:	85 c0                	test   eax,eax
c00048cb:	0f 85 f0 00 00 00    	jne    c00049c1 <f_unlink+0x117>
c00048d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048d5:	83 ec 0c             	sub    esp,0xc
c00048d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048dc:	68 00 02 00 00       	push   0x200
c00048e1:	e8 a6 11 00 00       	call   c0005a8c <ff_memalloc>
c00048e6:	83 c4 10             	add    esp,0x10
c00048e9:	89 c3                	mov    ebx,eax
c00048eb:	b8 11 00 00 00       	mov    eax,0x11
c00048f0:	85 db                	test   ebx,ebx
c00048f2:	0f 84 c9 00 00 00    	je     c00049c1 <f_unlink+0x117>
c00048f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004903:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004906:	8d 44 24 20          	lea    eax,[esp+0x20]
c000490a:	e8 b3 ef ff ff       	call   c00038c2 <follow_path>
c000490f:	85 c0                	test   eax,eax
c0004911:	0f 85 96 00 00 00    	jne    c00049ad <f_unlink+0x103>
c0004917:	b8 06 00 00 00       	mov    eax,0x6
c000491c:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004921:	0f 88 86 00 00 00    	js     c00049ad <f_unlink+0x103>
c0004927:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000492c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004932:	74 07                	je     c000493b <f_unlink+0x91>
c0004934:	b8 07 00 00 00       	mov    eax,0x7
c0004939:	eb 72                	jmp    c00049ad <f_unlink+0x103>
c000493b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000493f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004943:	8a 07                	mov    al,BYTE PTR [edi]
c0004945:	e8 96 e7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000494a:	83 e5 10             	and    ebp,0x10
c000494d:	89 c6                	mov    esi,eax
c000494f:	75 0f                	jne    c0004960 <f_unlink+0xb6>
c0004951:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004955:	e8 e7 ed ff ff       	call   c0003741 <dir_remove>
c000495a:	85 c0                	test   eax,eax
c000495c:	74 2f                	je     c000498d <f_unlink+0xe3>
c000495e:	eb 4d                	jmp    c00049ad <f_unlink+0x103>
c0004960:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000496a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000496e:	e8 c0 e8 ff ff       	call   c0003233 <dir_sdi>
c0004973:	85 c0                	test   eax,eax
c0004975:	75 36                	jne    c00049ad <f_unlink+0x103>
c0004977:	31 d2                	xor    edx,edx
c0004979:	8d 44 24 50          	lea    eax,[esp+0x50]
c000497d:	e8 a2 ec ff ff       	call   c0003624 <dir_read>
c0004982:	85 c0                	test   eax,eax
c0004984:	74 ae                	je     c0004934 <f_unlink+0x8a>
c0004986:	83 f8 04             	cmp    eax,0x4
c0004989:	75 22                	jne    c00049ad <f_unlink+0x103>
c000498b:	eb c4                	jmp    c0004951 <f_unlink+0xa7>
c000498d:	85 f6                	test   esi,esi
c000498f:	75 0b                	jne    c000499c <f_unlink+0xf2>
c0004991:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004995:	e8 0b e3 ff ff       	call   c0002ca5 <sync_fs>
c000499a:	eb 11                	jmp    c00049ad <f_unlink+0x103>
c000499c:	31 c9                	xor    ecx,ecx
c000499e:	89 f2                	mov    edx,esi
c00049a0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049a4:	e8 8c ea ff ff       	call   c0003435 <remove_chain>
c00049a9:	85 c0                	test   eax,eax
c00049ab:	74 e4                	je     c0004991 <f_unlink+0xe7>
c00049ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049b1:	83 ec 0c             	sub    esp,0xc
c00049b4:	53                   	push   ebx
c00049b5:	e8 ea 10 00 00       	call   c0005aa4 <ff_memfree>
c00049ba:	83 c4 10             	add    esp,0x10
c00049bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049c1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049c7:	5b                   	pop    ebx
c00049c8:	5e                   	pop    esi
c00049c9:	5f                   	pop    edi
c00049ca:	5d                   	pop    ebp
c00049cb:	c3                   	ret    

c00049cc <f_mkdir>:
c00049cc:	57                   	push   edi
c00049cd:	b9 02 00 00 00       	mov    ecx,0x2
c00049d2:	56                   	push   esi
c00049d3:	53                   	push   ebx
c00049d4:	83 ec 50             	sub    esp,0x50
c00049d7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049db:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049df:	e8 d4 d9 ff ff       	call   c00023b8 <mount_volume>
c00049e4:	89 c3                	mov    ebx,eax
c00049e6:	85 c0                	test   eax,eax
c00049e8:	0f 85 70 01 00 00    	jne    c0004b5e <f_mkdir+0x192>
c00049ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f2:	bb 11 00 00 00       	mov    ebx,0x11
c00049f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049fb:	83 ec 0c             	sub    esp,0xc
c00049fe:	68 00 02 00 00       	push   0x200
c0004a03:	e8 84 10 00 00       	call   c0005a8c <ff_memalloc>
c0004a08:	83 c4 10             	add    esp,0x10
c0004a0b:	89 c7                	mov    edi,eax
c0004a0d:	85 c0                	test   eax,eax
c0004a0f:	0f 84 49 01 00 00    	je     c0004b5e <f_mkdir+0x192>
c0004a15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a19:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004a1d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a20:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a24:	e8 99 ee ff ff       	call   c00038c2 <follow_path>
c0004a29:	89 c3                	mov    ebx,eax
c0004a2b:	85 c0                	test   eax,eax
c0004a2d:	74 3e                	je     c0004a6d <f_mkdir+0xa1>
c0004a2f:	83 f8 04             	cmp    eax,0x4
c0004a32:	75 3e                	jne    c0004a72 <f_mkdir+0xa6>
c0004a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a3e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a42:	e8 b4 e8 ff ff       	call   c00032fb <create_chain>
c0004a47:	89 c6                	mov    esi,eax
c0004a49:	85 c0                	test   eax,eax
c0004a4b:	74 0c                	je     c0004a59 <f_mkdir+0x8d>
c0004a4d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a52:	83 f8 01             	cmp    eax,0x1
c0004a55:	74 07                	je     c0004a5e <f_mkdir+0x92>
c0004a57:	eb 2a                	jmp    c0004a83 <f_mkdir+0xb7>
c0004a59:	bb 07 00 00 00       	mov    ebx,0x7
c0004a5e:	31 c9                	xor    ecx,ecx
c0004a60:	89 f2                	mov    edx,esi
c0004a62:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a66:	e8 ca e9 ff ff       	call   c0003435 <remove_chain>
c0004a6b:	eb 05                	jmp    c0004a72 <f_mkdir+0xa6>
c0004a6d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a72:	83 ec 0c             	sub    esp,0xc
c0004a75:	57                   	push   edi
c0004a76:	e8 29 10 00 00       	call   c0005aa4 <ff_memfree>
c0004a7b:	83 c4 10             	add    esp,0x10
c0004a7e:	e9 db 00 00 00       	jmp    c0004b5e <f_mkdir+0x192>
c0004a83:	bb 01 00 00 00       	mov    ebx,0x1
c0004a88:	83 f8 ff             	cmp    eax,0xffffffff
c0004a8b:	74 d1                	je     c0004a5e <f_mkdir+0x92>
c0004a8d:	89 f2                	mov    edx,esi
c0004a8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a93:	e8 73 dd ff ff       	call   c000280b <dir_clear>
c0004a98:	89 c3                	mov    ebx,eax
c0004a9a:	85 c0                	test   eax,eax
c0004a9c:	75 c0                	jne    c0004a5e <f_mkdir+0x92>
c0004a9e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004aa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aa7:	ba 20 00 00 00       	mov    edx,0x20
c0004aac:	83 c0 34             	add    eax,0x34
c0004aaf:	e8 cc d2 ff ff       	call   c0001d80 <mem_set>
c0004ab4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab8:	ba 00 00 21 50       	mov    edx,0x50210000
c0004abd:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004ac1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004ac5:	83 c0 4a             	add    eax,0x4a
c0004ac8:	e8 9b d2 ff ff       	call   c0001d68 <st_dword>
c0004acd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad1:	89 f1                	mov    ecx,esi
c0004ad3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ad6:	e8 2e e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004adb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004adf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ae4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ae7:	83 c0 54             	add    eax,0x54
c0004aea:	e8 7c d2 ff ff       	call   c0001d6b <mem_cpy>
c0004aef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004af3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004af7:	8d 50 54             	lea    edx,[eax+0x54]
c0004afa:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004afe:	e8 06 e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b07:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b0b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b0f:	e8 42 ee ff ff       	call   c0003956 <dir_register>
c0004b14:	89 c3                	mov    ebx,eax
c0004b16:	85 c0                	test   eax,eax
c0004b18:	0f 85 40 ff ff ff    	jne    c0004a5e <f_mkdir+0x92>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b27:	83 c0 16             	add    eax,0x16
c0004b2a:	e8 39 d2 ff ff       	call   c0001d68 <st_dword>
c0004b2f:	89 f1                	mov    ecx,esi
c0004b31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b39:	e8 cb e5 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b3e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b42:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b4a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b52:	e8 4e e1 ff ff       	call   c0002ca5 <sync_fs>
c0004b57:	89 c3                	mov    ebx,eax
c0004b59:	e9 14 ff ff ff       	jmp    c0004a72 <f_mkdir+0xa6>
c0004b5e:	83 c4 50             	add    esp,0x50
c0004b61:	89 d8                	mov    eax,ebx
c0004b63:	5b                   	pop    ebx
c0004b64:	5e                   	pop    esi
c0004b65:	5f                   	pop    edi
c0004b66:	c3                   	ret    

c0004b67 <f_rename>:
c0004b67:	57                   	push   edi
c0004b68:	56                   	push   esi
c0004b69:	53                   	push   ebx
c0004b6a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b70:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b77:	e8 f2 d5 ff ff       	call   c000216e <get_ldnumber>
c0004b7c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b81:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b85:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b8c:	e8 27 d8 ff ff       	call   c00023b8 <mount_volume>
c0004b91:	85 c0                	test   eax,eax
c0004b93:	0f 85 7a 01 00 00    	jne    c0004d13 <f_rename+0x1ac>
c0004b99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b9d:	83 ec 0c             	sub    esp,0xc
c0004ba0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ba4:	68 00 02 00 00       	push   0x200
c0004ba9:	e8 de 0e 00 00       	call   c0005a8c <ff_memalloc>
c0004bae:	83 c4 10             	add    esp,0x10
c0004bb1:	89 c6                	mov    esi,eax
c0004bb3:	b8 11 00 00 00       	mov    eax,0x11
c0004bb8:	85 f6                	test   esi,esi
c0004bba:	0f 84 53 01 00 00    	je     c0004d13 <f_rename+0x1ac>
c0004bc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bc4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bcb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bce:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bd2:	e8 eb ec ff ff       	call   c00038c2 <follow_path>
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	0f 85 20 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bdf:	b8 06 00 00 00       	mov    eax,0x6
c0004be4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004be9:	0f 85 10 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bef:	b9 20 00 00 00       	mov    ecx,0x20
c0004bf4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bf8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bfc:	e8 6a d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c01:	b9 30 00 00 00       	mov    ecx,0x30
c0004c06:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004c0a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c0e:	e8 58 d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c13:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004c1a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c1e:	e8 9f ec ff ff       	call   c00038c2 <follow_path>
c0004c23:	85 c0                	test   eax,eax
c0004c25:	75 20                	jne    c0004c47 <f_rename+0xe0>
c0004c27:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c2b:	b8 08 00 00 00       	mov    eax,0x8
c0004c30:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c34:	0f 85 c5 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c3a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c3e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c45:	eb 03                	jmp    c0004c4a <f_rename+0xe3>
c0004c47:	83 f8 04             	cmp    eax,0x4
c0004c4a:	0f 85 af 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c50:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c54:	e8 fd ec ff ff       	call   c0003956 <dir_register>
c0004c59:	85 c0                	test   eax,eax
c0004c5b:	0f 85 9e 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c61:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c68:	b9 13 00 00 00       	mov    ecx,0x13
c0004c6d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c70:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c74:	e8 f2 d0 ff ff       	call   c0001d6b <mem_cpy>
c0004c79:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c7d:	a8 10                	test   al,0x10
c0004c7f:	75 03                	jne    c0004c84 <f_rename+0x11d>
c0004c81:	83 c8 20             	or     eax,0x20
c0004c84:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c8b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c8f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c93:	74 54                	je     c0004ce9 <f_rename+0x182>
c0004c95:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c99:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c9d:	74 4a                	je     c0004ce9 <f_rename+0x182>
c0004c9f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ca3:	89 da                	mov    edx,ebx
c0004ca5:	8a 07                	mov    al,BYTE PTR [edi]
c0004ca7:	e8 34 e4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004cac:	89 c2                	mov    edx,eax
c0004cae:	89 f8                	mov    eax,edi
c0004cb0:	e8 d0 d2 ff ff       	call   c0001f85 <clst2sect>
c0004cb5:	89 c2                	mov    edx,eax
c0004cb7:	b8 02 00 00 00       	mov    eax,0x2
c0004cbc:	85 d2                	test   edx,edx
c0004cbe:	74 3f                	je     c0004cff <f_rename+0x198>
c0004cc0:	89 f8                	mov    eax,edi
c0004cc2:	e8 9e d5 ff ff       	call   c0002265 <move_window>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	75 34                	jne    c0004cff <f_rename+0x198>
c0004ccb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ccf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cd3:	75 14                	jne    c0004ce9 <f_rename+0x182>
c0004cd5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cd8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cdc:	e8 28 e4 ff ff       	call   c0003109 <st_clust.isra.1>
c0004ce1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ce5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ce9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ced:	e8 4f ea ff ff       	call   c0003741 <dir_remove>
c0004cf2:	85 c0                	test   eax,eax
c0004cf4:	75 09                	jne    c0004cff <f_rename+0x198>
c0004cf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfa:	e8 a6 df ff ff       	call   c0002ca5 <sync_fs>
c0004cff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d03:	83 ec 0c             	sub    esp,0xc
c0004d06:	56                   	push   esi
c0004d07:	e8 98 0d 00 00       	call   c0005aa4 <ff_memfree>
c0004d0c:	83 c4 10             	add    esp,0x10
c0004d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d13:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004d19:	5b                   	pop    ebx
c0004d1a:	5e                   	pop    esi
c0004d1b:	5f                   	pop    edi
c0004d1c:	c3                   	ret    

c0004d1d <f_chmod>:
c0004d1d:	57                   	push   edi
c0004d1e:	b9 02 00 00 00       	mov    ecx,0x2
c0004d23:	56                   	push   esi
c0004d24:	53                   	push   ebx
c0004d25:	83 ec 50             	sub    esp,0x50
c0004d28:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d2c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d30:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d34:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d38:	e8 7b d6 ff ff       	call   c00023b8 <mount_volume>
c0004d3d:	85 c0                	test   eax,eax
c0004d3f:	75 7e                	jne    c0004dbf <f_chmod+0xa2>
c0004d41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d45:	83 ec 0c             	sub    esp,0xc
c0004d48:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d4c:	68 00 02 00 00       	push   0x200
c0004d51:	e8 36 0d 00 00       	call   c0005a8c <ff_memalloc>
c0004d56:	83 c4 10             	add    esp,0x10
c0004d59:	89 c6                	mov    esi,eax
c0004d5b:	b8 11 00 00 00       	mov    eax,0x11
c0004d60:	85 f6                	test   esi,esi
c0004d62:	74 5b                	je     c0004dbf <f_chmod+0xa2>
c0004d64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d68:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d6c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d6f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d73:	e8 4a eb ff ff       	call   c00038c2 <follow_path>
c0004d78:	85 c0                	test   eax,eax
c0004d7a:	75 2f                	jne    c0004dab <f_chmod+0x8e>
c0004d7c:	b8 06 00 00 00       	mov    eax,0x6
c0004d81:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d86:	75 23                	jne    c0004dab <f_chmod+0x8e>
c0004d88:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d8c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d8f:	21 fb                	and    ebx,edi
c0004d91:	83 e3 27             	and    ebx,0x27
c0004d94:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d97:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d9e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004da2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004da6:	e8 fa de ff ff       	call   c0002ca5 <sync_fs>
c0004dab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004daf:	83 ec 0c             	sub    esp,0xc
c0004db2:	56                   	push   esi
c0004db3:	e8 ec 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004db8:	83 c4 10             	add    esp,0x10
c0004dbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dbf:	83 c4 50             	add    esp,0x50
c0004dc2:	5b                   	pop    ebx
c0004dc3:	5e                   	pop    esi
c0004dc4:	5f                   	pop    edi
c0004dc5:	c3                   	ret    

c0004dc6 <f_utime>:
c0004dc6:	56                   	push   esi
c0004dc7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dcc:	53                   	push   ebx
c0004dcd:	83 ec 54             	sub    esp,0x54
c0004dd0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004dd4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004dd8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004ddc:	e8 d7 d5 ff ff       	call   c00023b8 <mount_volume>
c0004de1:	85 c0                	test   eax,eax
c0004de3:	0f 85 85 00 00 00    	jne    c0004e6e <f_utime+0xa8>
c0004de9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ded:	83 ec 0c             	sub    esp,0xc
c0004df0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004df4:	68 00 02 00 00       	push   0x200
c0004df9:	e8 8e 0c 00 00       	call   c0005a8c <ff_memalloc>
c0004dfe:	83 c4 10             	add    esp,0x10
c0004e01:	89 c3                	mov    ebx,eax
c0004e03:	b8 11 00 00 00       	mov    eax,0x11
c0004e08:	85 db                	test   ebx,ebx
c0004e0a:	74 62                	je     c0004e6e <f_utime+0xa8>
c0004e0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e10:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004e14:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004e17:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e1b:	e8 a2 ea ff ff       	call   c00038c2 <follow_path>
c0004e20:	85 c0                	test   eax,eax
c0004e22:	75 36                	jne    c0004e5a <f_utime+0x94>
c0004e24:	b8 06 00 00 00       	mov    eax,0x6
c0004e29:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e2e:	75 2a                	jne    c0004e5a <f_utime+0x94>
c0004e30:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e34:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e38:	c1 e2 10             	shl    edx,0x10
c0004e3b:	09 c2                	or     edx,eax
c0004e3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e41:	83 c0 16             	add    eax,0x16
c0004e44:	e8 1f cf ff ff       	call   c0001d68 <st_dword>
c0004e49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e55:	e8 4b de ff ff       	call   c0002ca5 <sync_fs>
c0004e5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e5e:	83 ec 0c             	sub    esp,0xc
c0004e61:	53                   	push   ebx
c0004e62:	e8 3d 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004e67:	83 c4 10             	add    esp,0x10
c0004e6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e6e:	83 c4 54             	add    esp,0x54
c0004e71:	5b                   	pop    ebx
c0004e72:	5e                   	pop    esi
c0004e73:	c3                   	ret    

c0004e74 <f_getlabel>:
c0004e74:	55                   	push   ebp
c0004e75:	31 c9                	xor    ecx,ecx
c0004e77:	57                   	push   edi
c0004e78:	56                   	push   esi
c0004e79:	53                   	push   ebx
c0004e7a:	83 ec 5c             	sub    esp,0x5c
c0004e7d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e81:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e85:	e8 2e d5 ff ff       	call   c00023b8 <mount_volume>
c0004e8a:	89 c6                	mov    esi,eax
c0004e8c:	85 c0                	test   eax,eax
c0004e8e:	0f 85 27 01 00 00    	jne    c0004fbb <f_getlabel+0x147>
c0004e94:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e99:	0f 84 d1 00 00 00    	je     c0004f70 <f_getlabel+0xfc>
c0004e9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ea3:	31 d2                	xor    edx,edx
c0004ea5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004ea9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004eb1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eb5:	e8 79 e3 ff ff       	call   c0003233 <dir_sdi>
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 a2 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ec2:	ba 01 00 00 00       	mov    edx,0x1
c0004ec7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ecb:	e8 54 e7 ff ff       	call   c0003624 <dir_read>
c0004ed0:	85 c0                	test   eax,eax
c0004ed2:	0f 85 8c 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ed8:	31 db                	xor    ebx,ebx
c0004eda:	31 c9                	xor    ecx,ecx
c0004edc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ee0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ee3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ee8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004eed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ef1:	e8 ca ce ff ff       	call   c0001dc0 <dbc_1st>
c0004ef6:	85 c0                	test   eax,eax
c0004ef8:	74 16                	je     c0004f10 <f_getlabel+0x9c>
c0004efa:	83 ff 0b             	cmp    edi,0xb
c0004efd:	74 11                	je     c0004f10 <f_getlabel+0x9c>
c0004eff:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004f04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f08:	8d 79 02             	lea    edi,[ecx+0x2]
c0004f0b:	c1 e0 08             	shl    eax,0x8
c0004f0e:	09 c2                	or     edx,eax
c0004f10:	0f b7 d2             	movzx  edx,dx
c0004f13:	50                   	push   eax
c0004f14:	50                   	push   eax
c0004f15:	68 b5 01 00 00       	push   0x1b5
c0004f1a:	52                   	push   edx
c0004f1b:	e8 3c 0c 00 00       	call   c0005b5c <ff_oem2uni>
c0004f20:	83 c4 10             	add    esp,0x10
c0004f23:	66 85 c0             	test   ax,ax
c0004f26:	74 25                	je     c0004f4d <f_getlabel+0xd9>
c0004f28:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f2c:	0f b7 c0             	movzx  eax,ax
c0004f2f:	01 da                	add    edx,ebx
c0004f31:	b9 04 00 00 00       	mov    ecx,0x4
c0004f36:	e8 51 cf ff ff       	call   c0001e8c <put_utf>
c0004f3b:	84 c0                	test   al,al
c0004f3d:	74 0e                	je     c0004f4d <f_getlabel+0xd9>
c0004f3f:	0f b6 c0             	movzx  eax,al
c0004f42:	01 c3                	add    ebx,eax
c0004f44:	83 ff 0b             	cmp    edi,0xb
c0004f47:	74 06                	je     c0004f4f <f_getlabel+0xdb>
c0004f49:	89 f9                	mov    ecx,edi
c0004f4b:	eb 8f                	jmp    c0004edc <f_getlabel+0x68>
c0004f4d:	31 db                	xor    ebx,ebx
c0004f4f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f53:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f56:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f5a:	74 14                	je     c0004f70 <f_getlabel+0xfc>
c0004f5c:	4b                   	dec    ebx
c0004f5d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f60:	74 f1                	je     c0004f53 <f_getlabel+0xdf>
c0004f62:	eb 0c                	jmp    c0004f70 <f_getlabel+0xfc>
c0004f64:	83 f8 04             	cmp    eax,0x4
c0004f67:	75 50                	jne    c0004fb9 <f_getlabel+0x145>
c0004f69:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f70:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f75:	74 44                	je     c0004fbb <f_getlabel+0x147>
c0004f77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f7b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f7e:	e8 e2 d2 ff ff       	call   c0002265 <move_window>
c0004f83:	89 c6                	mov    esi,eax
c0004f85:	85 c0                	test   eax,eax
c0004f87:	75 32                	jne    c0004fbb <f_getlabel+0x147>
c0004f89:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f8d:	b8 43 00 00 00       	mov    eax,0x43
c0004f92:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f94:	80 f9 03             	cmp    cl,0x3
c0004f97:	74 0f                	je     c0004fa8 <f_getlabel+0x134>
c0004f99:	31 c0                	xor    eax,eax
c0004f9b:	80 f9 04             	cmp    cl,0x4
c0004f9e:	0f 94 c0             	sete   al
c0004fa1:	48                   	dec    eax
c0004fa2:	83 e0 c3             	and    eax,0xffffffc3
c0004fa5:	83 c0 64             	add    eax,0x64
c0004fa8:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004fac:	e8 9b cd ff ff       	call   c0001d4c <ld_dword>
c0004fb1:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004fb5:	89 07                	mov    DWORD PTR [edi],eax
c0004fb7:	eb 02                	jmp    c0004fbb <f_getlabel+0x147>
c0004fb9:	89 c6                	mov    esi,eax
c0004fbb:	83 c4 5c             	add    esp,0x5c
c0004fbe:	89 f0                	mov    eax,esi
c0004fc0:	5b                   	pop    ebx
c0004fc1:	5e                   	pop    esi
c0004fc2:	5f                   	pop    edi
c0004fc3:	5d                   	pop    ebp
c0004fc4:	c3                   	ret    

c0004fc5 <f_setlabel>:
c0004fc5:	56                   	push   esi
c0004fc6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fcb:	53                   	push   ebx
c0004fcc:	83 ec 54             	sub    esp,0x54
c0004fcf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fd3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fd7:	e8 dc d3 ff ff       	call   c00023b8 <mount_volume>
c0004fdc:	89 c6                	mov    esi,eax
c0004fde:	85 c0                	test   eax,eax
c0004fe0:	0f 85 67 01 00 00    	jne    c000514d <f_setlabel+0x188>
c0004fe6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004feb:	ba 20 00 00 00       	mov    edx,0x20
c0004ff0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004ff4:	31 db                	xor    ebx,ebx
c0004ff6:	e8 85 cd ff ff       	call   c0001d80 <mem_set>
c0004ffb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fff:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005002:	76 5b                	jbe    c000505f <f_setlabel+0x9a>
c0005004:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005008:	e8 b9 cd ff ff       	call   c0001dc6 <tchar2uni>
c000500d:	3d ff ff 00 00       	cmp    eax,0xffff
c0005012:	76 0a                	jbe    c000501e <f_setlabel+0x59>
c0005014:	be 06 00 00 00       	mov    esi,0x6
c0005019:	e9 2f 01 00 00       	jmp    c000514d <f_setlabel+0x188>
c000501e:	83 ec 0c             	sub    esp,0xc
c0005021:	50                   	push   eax
c0005022:	e8 ad 0b 00 00       	call   c0005bd4 <ff_wtoupper>
c0005027:	5a                   	pop    edx
c0005028:	59                   	pop    ecx
c0005029:	68 b5 01 00 00       	push   0x1b5
c000502e:	50                   	push   eax
c000502f:	e8 88 0a 00 00       	call   c0005abc <ff_uni2oem>
c0005034:	83 c4 10             	add    esp,0x10
c0005037:	89 c6                	mov    esi,eax
c0005039:	66 85 c0             	test   ax,ax
c000503c:	74 d6                	je     c0005014 <f_setlabel+0x4f>
c000503e:	0f b7 d0             	movzx  edx,ax
c0005041:	b8 30 d0 01 c0       	mov    eax,0xc001d030
c0005046:	e8 63 cd ff ff       	call   c0001dae <chk_chr>
c000504b:	85 c0                	test   eax,eax
c000504d:	75 c5                	jne    c0005014 <f_setlabel+0x4f>
c000504f:	66 81 fe ff 00       	cmp    si,0xff
c0005054:	0f 87 c9 00 00 00    	ja     c0005123 <f_setlabel+0x15e>
c000505a:	e9 e4 00 00 00       	jmp    c0005143 <f_setlabel+0x17e>
c000505f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005064:	74 ae                	je     c0005014 <f_setlabel+0x4f>
c0005066:	85 db                	test   ebx,ebx
c0005068:	74 0e                	je     c0005078 <f_setlabel+0xb3>
c000506a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000506d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005072:	75 04                	jne    c0005078 <f_setlabel+0xb3>
c0005074:	89 c3                	mov    ebx,eax
c0005076:	eb ee                	jmp    c0005066 <f_setlabel+0xa1>
c0005078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000507c:	31 d2                	xor    edx,edx
c000507e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005082:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000508a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000508e:	e8 a0 e1 ff ff       	call   c0003233 <dir_sdi>
c0005093:	89 c6                	mov    esi,eax
c0005095:	85 c0                	test   eax,eax
c0005097:	0f 85 b0 00 00 00    	jne    c000514d <f_setlabel+0x188>
c000509d:	ba 01 00 00 00       	mov    edx,0x1
c00050a2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050a6:	e8 79 e5 ff ff       	call   c0003624 <dir_read>
c00050ab:	85 c0                	test   eax,eax
c00050ad:	75 18                	jne    c00050c7 <f_setlabel+0x102>
c00050af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050b3:	85 db                	test   ebx,ebx
c00050b5:	74 0b                	je     c00050c2 <f_setlabel+0xfd>
c00050b7:	b9 0b 00 00 00       	mov    ecx,0xb
c00050bc:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050c0:	eb 47                	jmp    c0005109 <f_setlabel+0x144>
c00050c2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050c5:	eb 47                	jmp    c000510e <f_setlabel+0x149>
c00050c7:	83 f8 04             	cmp    eax,0x4
c00050ca:	75 53                	jne    c000511f <f_setlabel+0x15a>
c00050cc:	85 db                	test   ebx,ebx
c00050ce:	74 7d                	je     c000514d <f_setlabel+0x188>
c00050d0:	ba 01 00 00 00       	mov    edx,0x1
c00050d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050d9:	e8 e5 e4 ff ff       	call   c00035c3 <dir_alloc>
c00050de:	89 c6                	mov    esi,eax
c00050e0:	85 c0                	test   eax,eax
c00050e2:	75 69                	jne    c000514d <f_setlabel+0x188>
c00050e4:	b9 20 00 00 00       	mov    ecx,0x20
c00050e9:	31 d2                	xor    edx,edx
c00050eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050ef:	e8 8c cc ff ff       	call   c0001d80 <mem_set>
c00050f4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050f8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050fd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005101:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005105:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005109:	e8 5d cc ff ff       	call   c0001d6b <mem_cpy>
c000510e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005112:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000511a:	e8 86 db ff ff       	call   c0002ca5 <sync_fs>
c000511f:	89 c6                	mov    esi,eax
c0005121:	eb 2a                	jmp    c000514d <f_setlabel+0x188>
c0005123:	83 fb 09             	cmp    ebx,0x9
c0005126:	0f 87 e8 fe ff ff    	ja     c0005014 <f_setlabel+0x4f>
c000512c:	89 f0                	mov    eax,esi
c000512e:	66 c1 e8 08          	shr    ax,0x8
c0005132:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005136:	43                   	inc    ebx
c0005137:	89 f0                	mov    eax,esi
c0005139:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000513d:	43                   	inc    ebx
c000513e:	e9 b8 fe ff ff       	jmp    c0004ffb <f_setlabel+0x36>
c0005143:	83 fb 0a             	cmp    ebx,0xa
c0005146:	76 ef                	jbe    c0005137 <f_setlabel+0x172>
c0005148:	e9 c7 fe ff ff       	jmp    c0005014 <f_setlabel+0x4f>
c000514d:	89 f0                	mov    eax,esi
c000514f:	83 c4 54             	add    esp,0x54
c0005152:	5b                   	pop    ebx
c0005153:	5e                   	pop    esi
c0005154:	c3                   	ret    

c0005155 <f_expand>:
c0005155:	55                   	push   ebp
c0005156:	57                   	push   edi
c0005157:	56                   	push   esi
c0005158:	53                   	push   ebx
c0005159:	83 ec 2c             	sub    esp,0x2c
c000515c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005160:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005164:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005168:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000516c:	89 d8                	mov    eax,ebx
c000516e:	e8 48 d0 ff ff       	call   c00021bb <validate>
c0005173:	89 c6                	mov    esi,eax
c0005175:	85 c0                	test   eax,eax
c0005177:	0f 85 2e 01 00 00    	jne    c00052ab <f_expand+0x156>
c000517d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005181:	85 f6                	test   esi,esi
c0005183:	0f 85 22 01 00 00    	jne    c00052ab <f_expand+0x156>
c0005189:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000518e:	75 0a                	jne    c000519a <f_expand+0x45>
c0005190:	be 07 00 00 00       	mov    esi,0x7
c0005195:	e9 11 01 00 00       	jmp    c00052ab <f_expand+0x156>
c000519a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000519e:	75 f0                	jne    c0005190 <f_expand+0x3b>
c00051a0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00051a4:	74 ea                	je     c0005190 <f_expand+0x3b>
c00051a6:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00051aa:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00051ae:	c1 e1 09             	shl    ecx,0x9
c00051b1:	8d 41 ff             	lea    eax,[ecx-0x1]
c00051b4:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00051b8:	0f 95 c0             	setne  al
c00051bb:	31 d2                	xor    edx,edx
c00051bd:	0f b6 c0             	movzx  eax,al
c00051c0:	89 c7                	mov    edi,eax
c00051c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051c6:	f7 f1                	div    ecx
c00051c8:	01 f8                	add    eax,edi
c00051ca:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051d1:	83 ff 01             	cmp    edi,0x1
c00051d4:	76 05                	jbe    c00051db <f_expand+0x86>
c00051d6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051d9:	77 05                	ja     c00051e0 <f_expand+0x8b>
c00051db:	bf 02 00 00 00       	mov    edi,0x2
c00051e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051e3:	89 fd                	mov    ebp,edi
c00051e5:	31 c9                	xor    ecx,ecx
c00051e7:	89 ea                	mov    edx,ebp
c00051e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051ef:	45                   	inc    ebp
c00051f0:	e8 3c df ff ff       	call   c0003131 <get_fat.isra.2>
c00051f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051fd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005200:	77 05                	ja     c0005207 <f_expand+0xb2>
c0005202:	bd 02 00 00 00       	mov    ebp,0x2
c0005207:	83 f8 01             	cmp    eax,0x1
c000520a:	74 20                	je     c000522c <f_expand+0xd7>
c000520c:	83 f8 ff             	cmp    eax,0xffffffff
c000520f:	74 22                	je     c0005233 <f_expand+0xde>
c0005211:	85 c0                	test   eax,eax
c0005213:	75 09                	jne    c000521e <f_expand+0xc9>
c0005215:	41                   	inc    ecx
c0005216:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000521a:	75 07                	jne    c0005223 <f_expand+0xce>
c000521c:	eb 1c                	jmp    c000523a <f_expand+0xe5>
c000521e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005221:	31 c9                	xor    ecx,ecx
c0005223:	39 fd                	cmp    ebp,edi
c0005225:	75 c0                	jne    c00051e7 <f_expand+0x92>
c0005227:	e9 64 ff ff ff       	jmp    c0005190 <f_expand+0x3b>
c000522c:	be 02 00 00 00       	mov    esi,0x2
c0005231:	eb 78                	jmp    c00052ab <f_expand+0x156>
c0005233:	be 01 00 00 00       	mov    esi,0x1
c0005238:	eb 71                	jmp    c00052ab <f_expand+0x156>
c000523a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000523f:	74 2b                	je     c000526c <f_expand+0x117>
c0005241:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005244:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005248:	85 ed                	test   ebp,ebp
c000524a:	74 24                	je     c0005270 <f_expand+0x11b>
c000524c:	83 c9 ff             	or     ecx,0xffffffff
c000524f:	83 fd 01             	cmp    ebp,0x1
c0005252:	74 03                	je     c0005257 <f_expand+0x102>
c0005254:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005257:	89 fa                	mov    edx,edi
c0005259:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000525d:	e8 59 d4 ff ff       	call   c00026bb <put_fat>
c0005262:	85 c0                	test   eax,eax
c0005264:	75 43                	jne    c00052a9 <f_expand+0x154>
c0005266:	89 f8                	mov    eax,edi
c0005268:	4d                   	dec    ebp
c0005269:	47                   	inc    edi
c000526a:	eb dc                	jmp    c0005248 <f_expand+0xf3>
c000526c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000526f:	48                   	dec    eax
c0005270:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005274:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005279:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000527c:	74 2d                	je     c00052ab <f_expand+0x156>
c000527e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005282:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005285:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005288:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000528c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000528f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005292:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005295:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005298:	39 c8                	cmp    eax,ecx
c000529a:	77 0f                	ja     c00052ab <f_expand+0x156>
c000529c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00052a0:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00052a4:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00052a7:	eb 02                	jmp    c00052ab <f_expand+0x156>
c00052a9:	89 c6                	mov    esi,eax
c00052ab:	83 c4 2c             	add    esp,0x2c
c00052ae:	89 f0                	mov    eax,esi
c00052b0:	5b                   	pop    ebx
c00052b1:	5e                   	pop    esi
c00052b2:	5f                   	pop    edi
c00052b3:	5d                   	pop    ebp
c00052b4:	c3                   	ret    

c00052b5 <f_mkfs>:
c00052b5:	55                   	push   ebp
c00052b6:	57                   	push   edi
c00052b7:	bf 0b 00 00 00       	mov    edi,0xb
c00052bc:	56                   	push   esi
c00052bd:	53                   	push   ebx
c00052be:	83 ec 4c             	sub    esp,0x4c
c00052c1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052c5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052c9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052cd:	e8 9c ce ff ff       	call   c000216e <get_ldnumber>
c00052d2:	85 c0                	test   eax,eax
c00052d4:	0f 88 a6 07 00 00    	js     c0005a80 <f_mkfs+0x7cb>
c00052da:	8b 14 85 20 ff 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe00e0]
c00052e1:	85 d2                	test   edx,edx
c00052e3:	74 03                	je     c00052e8 <f_mkfs+0x33>
c00052e5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052e8:	85 db                	test   ebx,ebx
c00052ea:	75 05                	jne    c00052f1 <f_mkfs+0x3c>
c00052ec:	bb 20 d0 01 c0       	mov    ebx,0xc001d020
c00052f1:	83 ec 0c             	sub    esp,0xc
c00052f4:	0f b6 c0             	movzx  eax,al
c00052f7:	bf 03 00 00 00       	mov    edi,0x3
c00052fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005300:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005304:	e8 e8 c9 ff ff       	call   c0001cf1 <disk_initialize>
c0005309:	83 c4 10             	add    esp,0x10
c000530c:	a8 01                	test   al,0x1
c000530e:	0f 85 6c 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005314:	bf 0a 00 00 00       	mov    edi,0xa
c0005319:	a8 04                	test   al,0x4
c000531b:	0f 85 5f 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005321:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005324:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005328:	85 c0                	test   eax,eax
c000532a:	75 20                	jne    c000534c <f_mkfs+0x97>
c000532c:	51                   	push   ecx
c000532d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005331:	50                   	push   eax
c0005332:	6a 03                	push   0x3
c0005334:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005338:	e8 e3 c9 ff ff       	call   c0001d20 <disk_ioctl>
c000533d:	83 c4 10             	add    esp,0x10
c0005340:	85 c0                	test   eax,eax
c0005342:	74 08                	je     c000534c <f_mkfs+0x97>
c0005344:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000534c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005350:	8d 42 ff             	lea    eax,[edx-0x1]
c0005353:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005358:	77 04                	ja     c000535e <f_mkfs+0xa9>
c000535a:	85 c2                	test   edx,eax
c000535c:	74 08                	je     c0005366 <f_mkfs+0xb1>
c000535e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005366:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005369:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000536d:	48                   	dec    eax
c000536e:	3c 01                	cmp    al,0x1
c0005370:	76 05                	jbe    c0005377 <f_mkfs+0xc2>
c0005372:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005377:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000537a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000537e:	48                   	dec    eax
c000537f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005384:	77 07                	ja     c000538d <f_mkfs+0xd8>
c0005386:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000538b:	74 08                	je     c0005395 <f_mkfs+0xe0>
c000538d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005395:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005398:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000539e:	77 07                	ja     c00053a7 <f_mkfs+0xf2>
c00053a0:	8d 47 ff             	lea    eax,[edi-0x1]
c00053a3:	85 f8                	test   eax,edi
c00053a5:	74 02                	je     c00053a9 <f_mkfs+0xf4>
c00053a7:	31 ff                	xor    edi,edi
c00053a9:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c00053b1:	77 0a                	ja     c00053bd <f_mkfs+0x108>
c00053b3:	bf 11 00 00 00       	mov    edi,0x11
c00053b8:	e9 c3 06 00 00       	jmp    c0005a80 <f_mkfs+0x7cb>
c00053bd:	8a 1b                	mov    bl,BYTE PTR [ebx]
c00053bf:	89 ee                	mov    esi,ebp
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	75 1b                	jne    c00053e0 <f_mkfs+0x12b>
c00053c5:	83 ec 0c             	sub    esp,0xc
c00053c8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053cc:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053d1:	50                   	push   eax
c00053d2:	e8 b5 06 00 00       	call   c0005a8c <ff_memalloc>
c00053d7:	83 c4 10             	add    esp,0x10
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	74 d3                	je     c00053b3 <f_mkfs+0xfe>
c00053e0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053e8:	52                   	push   edx
c00053e9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053ed:	50                   	push   eax
c00053ee:	6a 01                	push   0x1
c00053f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053f4:	e8 27 c9 ff ff       	call   c0001d20 <disk_ioctl>
c00053f9:	83 c4 10             	add    esp,0x10
c00053fc:	85 c0                	test   eax,eax
c00053fe:	0f 85 25 06 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005404:	88 d8                	mov    al,bl
c0005406:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000540e:	24 08                	and    al,0x8
c0005410:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005414:	75 18                	jne    c000542e <f_mkfs+0x179>
c0005416:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000541a:	83 f8 3f             	cmp    eax,0x3f
c000541d:	76 0f                	jbe    c000542e <f_mkfs+0x179>
c000541f:	83 e8 3f             	sub    eax,0x3f
c0005422:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000542a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000542e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005432:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005436:	83 f8 7f             	cmp    eax,0x7f
c0005439:	0f 86 52 02 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c000543f:	b9 80 00 00 00       	mov    ecx,0x80
c0005444:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000544a:	77 05                	ja     c0005451 <f_mkfs+0x19c>
c000544c:	89 f9                	mov    ecx,edi
c000544e:	c1 e9 09             	shr    ecx,0x9
c0005451:	88 d8                	mov    al,bl
c0005453:	83 e0 01             	and    eax,0x1
c0005456:	80 e3 02             	and    bl,0x2
c0005459:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000545d:	74 0a                	je     c0005469 <f_mkfs+0x1b4>
c000545f:	84 c0                	test   al,al
c0005461:	0f 84 4c 01 00 00    	je     c00055b3 <f_mkfs+0x2fe>
c0005467:	eb 38                	jmp    c00054a1 <f_mkfs+0x1ec>
c0005469:	bf 13 00 00 00       	mov    edi,0x13
c000546e:	84 c0                	test   al,al
c0005470:	75 2f                	jne    c00054a1 <f_mkfs+0x1ec>
c0005472:	e9 c9 05 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c0005477:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000547c:	0f 85 08 02 00 00    	jne    c000568a <f_mkfs+0x3d5>
c0005482:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005487:	0f 86 e1 01 00 00    	jbe    c000566e <f_mkfs+0x3b9>
c000548d:	85 c9                	test   ecx,ecx
c000548f:	0f 85 bd 05 00 00    	jne    c0005a52 <f_mkfs+0x79d>
c0005495:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005498:	83 f9 40             	cmp    ecx,0x40
c000549b:	0f 87 c1 05 00 00    	ja     c0005a62 <f_mkfs+0x7ad>
c00054a1:	89 cf                	mov    edi,ecx
c00054a3:	85 c9                	test   ecx,ecx
c00054a5:	75 1d                	jne    c00054c4 <f_mkfs+0x20f>
c00054a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00054ab:	ba 00 d0 01 c0       	mov    edx,0xc001d000
c00054b0:	c1 eb 0c             	shr    ebx,0xc
c00054b3:	bf 01 00 00 00       	mov    edi,0x1
c00054b8:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00054bb:	66 85 c0             	test   ax,ax
c00054be:	0f 85 5f 01 00 00    	jne    c0005623 <f_mkfs+0x36e>
c00054c4:	31 d2                	xor    edx,edx
c00054c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054ca:	f7 f7                	div    edi
c00054cc:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054d1:	0f 86 5e 01 00 00    	jbe    c0005635 <f_mkfs+0x380>
c00054d7:	83 c0 02             	add    eax,0x2
c00054da:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054df:	01 c0                	add    eax,eax
c00054e1:	05 ff 01 00 00       	add    eax,0x1ff
c00054e6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ee:	c1 e8 09             	shr    eax,0x9
c00054f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054f9:	c1 e0 05             	shl    eax,0x5
c00054fc:	c1 e8 09             	shr    eax,0x9
c00054ff:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005503:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0005508:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000550c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005510:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0005514:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000551c:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005521:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005525:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000552d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005531:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005535:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005539:	f7 d8                	neg    eax
c000553b:	21 c3                	and    ebx,eax
c000553d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005541:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005546:	0f 85 fc 00 00 00    	jne    c0005648 <f_mkfs+0x393>
c000554c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005550:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005554:	89 f8                	mov    eax,edi
c0005556:	c1 e0 04             	shl    eax,0x4
c0005559:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000555d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005561:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005565:	0f 82 26 01 00 00    	jb     c0005691 <f_mkfs+0x3dc>
c000556b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000556f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005573:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005577:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000557c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005580:	29 d0                	sub    eax,edx
c0005582:	31 d2                	xor    edx,edx
c0005584:	f7 f7                	div    edi
c0005586:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000558b:	89 c3                	mov    ebx,eax
c000558d:	0f 85 e4 fe ff ff    	jne    c0005477 <f_mkfs+0x1c2>
c0005593:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005598:	0f 87 02 01 00 00    	ja     c00056a0 <f_mkfs+0x3eb>
c000559e:	85 c9                	test   ecx,ecx
c00055a0:	0f 85 eb 00 00 00    	jne    c0005691 <f_mkfs+0x3dc>
c00055a6:	83 ff 01             	cmp    edi,0x1
c00055a9:	0f 86 e2 00 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c00055af:	89 f9                	mov    ecx,edi
c00055b1:	d1 e9                	shr    ecx,1
c00055b3:	89 cb                	mov    ebx,ecx
c00055b5:	85 c9                	test   ecx,ecx
c00055b7:	75 26                	jne    c00055df <f_mkfs+0x32a>
c00055b9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00055bd:	ba 10 d0 01 c0       	mov    edx,0xc001d010
c00055c2:	c1 eb 11             	shr    ebx,0x11
c00055c5:	b9 01 00 00 00       	mov    ecx,0x1
c00055ca:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055cd:	66 85 c0             	test   ax,ax
c00055d0:	74 0b                	je     c00055dd <f_mkfs+0x328>
c00055d2:	83 c2 02             	add    edx,0x2
c00055d5:	39 d8                	cmp    eax,ebx
c00055d7:	77 04                	ja     c00055dd <f_mkfs+0x328>
c00055d9:	01 c9                	add    ecx,ecx
c00055db:	eb ed                	jmp    c00055ca <f_mkfs+0x315>
c00055dd:	31 db                	xor    ebx,ebx
c00055df:	31 d2                	xor    edx,edx
c00055e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055e5:	f7 f1                	div    ecx
c00055e7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ee:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055f3:	c1 ea 09             	shr    edx,0x9
c00055f6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055fb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055ff:	0f 87 8c 00 00 00    	ja     c0005691 <f_mkfs+0x3dc>
c0005605:	89 cf                	mov    edi,ecx
c0005607:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000560f:	89 d9                	mov    ecx,ebx
c0005611:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c0005619:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c000561e:	e9 e0 fe ff ff       	jmp    c0005503 <f_mkfs+0x24e>
c0005623:	83 c2 02             	add    edx,0x2
c0005626:	39 d8                	cmp    eax,ebx
c0005628:	0f 87 96 fe ff ff    	ja     c00054c4 <f_mkfs+0x20f>
c000562e:	01 ff                	add    edi,edi
c0005630:	e9 83 fe ff ff       	jmp    c00054b8 <f_mkfs+0x203>
c0005635:	8d 04 40             	lea    eax,[eax+eax*2]
c0005638:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000563d:	40                   	inc    eax
c000563e:	d1 e8                	shr    eax,1
c0005640:	83 c0 03             	add    eax,0x3
c0005643:	e9 99 fe ff ff       	jmp    c00054e1 <f_mkfs+0x22c>
c0005648:	31 d2                	xor    edx,edx
c000564a:	89 d8                	mov    eax,ebx
c000564c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005650:	85 d2                	test   edx,edx
c0005652:	74 09                	je     c000565d <f_mkfs+0x3a8>
c0005654:	4b                   	dec    ebx
c0005655:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005659:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000565d:	89 d8                	mov    eax,ebx
c000565f:	31 d2                	xor    edx,edx
c0005661:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005665:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005669:	e9 e6 fe ff ff       	jmp    c0005554 <f_mkfs+0x29f>
c000566e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005673:	77 2b                	ja     c00056a0 <f_mkfs+0x3eb>
c0005675:	85 c9                	test   ecx,ecx
c0005677:	75 18                	jne    c0005691 <f_mkfs+0x3dc>
c0005679:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000567c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005682:	0f 86 19 fe ff ff    	jbe    c00054a1 <f_mkfs+0x1ec>
c0005688:	eb 07                	jmp    c0005691 <f_mkfs+0x3dc>
c000568a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000568f:	76 0a                	jbe    c000569b <f_mkfs+0x3e6>
c0005691:	bf 0e 00 00 00       	mov    edi,0xe
c0005696:	e9 a5 03 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c000569b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056a0:	31 d2                	xor    edx,edx
c00056a2:	b9 00 02 00 00       	mov    ecx,0x200
c00056a7:	89 f0                	mov    eax,esi
c00056a9:	e8 d2 c6 ff ff       	call   c0001d80 <mem_set>
c00056ae:	b9 0b 00 00 00       	mov    ecx,0xb
c00056b3:	ba b2 cf 01 c0       	mov    edx,0xc001cfb2
c00056b8:	89 f0                	mov    eax,esi
c00056ba:	e8 ac c6 ff ff       	call   c0001d6b <mem_cpy>
c00056bf:	8d 46 0b             	lea    eax,[esi+0xb]
c00056c2:	ba 00 02 00 00       	mov    edx,0x200
c00056c7:	e8 98 c6 ff ff       	call   c0001d64 <st_word>
c00056cc:	89 f8                	mov    eax,edi
c00056ce:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056d3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056d6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056d9:	e8 86 c6 ff ff       	call   c0001d64 <st_word>
c00056de:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056e2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056e7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ea:	75 08                	jne    c00056f4 <f_mkfs+0x43f>
c00056ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f8:	8d 46 11             	lea    eax,[esi+0x11]
c00056fb:	e8 64 c6 ff ff       	call   c0001d64 <st_word>
c0005700:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005704:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000570a:	77 0a                	ja     c0005716 <f_mkfs+0x461>
c000570c:	8d 46 13             	lea    eax,[esi+0x13]
c000570f:	e8 50 c6 ff ff       	call   c0001d64 <st_word>
c0005714:	eb 08                	jmp    c000571e <f_mkfs+0x469>
c0005716:	8d 46 20             	lea    eax,[esi+0x20]
c0005719:	e8 4a c6 ff ff       	call   c0001d68 <st_dword>
c000571e:	8d 46 18             	lea    eax,[esi+0x18]
c0005721:	ba 3f 00 00 00       	mov    edx,0x3f
c0005726:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000572a:	e8 35 c6 ff ff       	call   c0001d64 <st_word>
c000572f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005732:	ba ff 00 00 00       	mov    edx,0xff
c0005737:	e8 28 c6 ff ff       	call   c0001d64 <st_word>
c000573c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000573f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005743:	e8 20 c6 ff ff       	call   c0001d68 <st_dword>
c0005748:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000574d:	75 57                	jne    c00057a6 <f_mkfs+0x4f1>
c000574f:	8d 46 43             	lea    eax,[esi+0x43]
c0005752:	ba 00 00 21 50       	mov    edx,0x50210000
c0005757:	e8 0c c6 ff ff       	call   c0001d68 <st_dword>
c000575c:	8d 46 24             	lea    eax,[esi+0x24]
c000575f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005763:	e8 00 c6 ff ff       	call   c0001d68 <st_dword>
c0005768:	8d 46 2c             	lea    eax,[esi+0x2c]
c000576b:	ba 02 00 00 00       	mov    edx,0x2
c0005770:	e8 f3 c5 ff ff       	call   c0001d68 <st_dword>
c0005775:	8d 46 30             	lea    eax,[esi+0x30]
c0005778:	ba 01 00 00 00       	mov    edx,0x1
c000577d:	e8 e2 c5 ff ff       	call   c0001d64 <st_word>
c0005782:	8d 46 32             	lea    eax,[esi+0x32]
c0005785:	ba 06 00 00 00       	mov    edx,0x6
c000578a:	e8 d5 c5 ff ff       	call   c0001d64 <st_word>
c000578f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005793:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005797:	8d 46 47             	lea    eax,[esi+0x47]
c000579a:	b9 13 00 00 00       	mov    ecx,0x13
c000579f:	ba be cf 01 c0       	mov    edx,0xc001cfbe
c00057a4:	eb 2f                	jmp    c00057d5 <f_mkfs+0x520>
c00057a6:	8d 46 27             	lea    eax,[esi+0x27]
c00057a9:	ba 00 00 21 50       	mov    edx,0x50210000
c00057ae:	e8 b5 c5 ff ff       	call   c0001d68 <st_dword>
c00057b3:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c00057b8:	8d 46 16             	lea    eax,[esi+0x16]
c00057bb:	e8 a4 c5 ff ff       	call   c0001d64 <st_word>
c00057c0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057c4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057c8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057cb:	b9 13 00 00 00       	mov    ecx,0x13
c00057d0:	ba d2 cf 01 c0       	mov    edx,0xc001cfd2
c00057d5:	e8 91 c5 ff ff       	call   c0001d6b <mem_cpy>
c00057da:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057e0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057e9:	e8 76 c5 ff ff       	call   c0001d64 <st_word>
c00057ee:	6a 01                	push   0x1
c00057f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057f4:	56                   	push   esi
c00057f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057f9:	e8 0c c5 ff ff       	call   c0001d0a <disk_write>
c00057fe:	83 c4 10             	add    esp,0x10
c0005801:	85 c0                	test   eax,eax
c0005803:	0f 85 20 02 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005809:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000580e:	0f 85 98 00 00 00    	jne    c00058ac <f_mkfs+0x5f7>
c0005814:	6a 01                	push   0x1
c0005816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000581a:	83 c0 06             	add    eax,0x6
c000581d:	50                   	push   eax
c000581e:	56                   	push   esi
c000581f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005823:	e8 e2 c4 ff ff       	call   c0001d0a <disk_write>
c0005828:	b9 00 02 00 00       	mov    ecx,0x200
c000582d:	31 d2                	xor    edx,edx
c000582f:	89 f0                	mov    eax,esi
c0005831:	e8 4a c5 ff ff       	call   c0001d80 <mem_set>
c0005836:	ba 52 52 61 41       	mov    edx,0x41615252
c000583b:	89 f0                	mov    eax,esi
c000583d:	e8 26 c5 ff ff       	call   c0001d68 <st_dword>
c0005842:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005848:	ba 72 72 41 61       	mov    edx,0x61417272
c000584d:	e8 16 c5 ff ff       	call   c0001d68 <st_dword>
c0005852:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005855:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000585b:	e8 08 c5 ff ff       	call   c0001d68 <st_dword>
c0005860:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005866:	ba 02 00 00 00       	mov    edx,0x2
c000586b:	e8 f8 c4 ff ff       	call   c0001d68 <st_dword>
c0005870:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005875:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000587b:	e8 e4 c4 ff ff       	call   c0001d64 <st_word>
c0005880:	6a 01                	push   0x1
c0005882:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005886:	83 c0 07             	add    eax,0x7
c0005889:	50                   	push   eax
c000588a:	56                   	push   esi
c000588b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000588f:	e8 76 c4 ff ff       	call   c0001d0a <disk_write>
c0005894:	83 c4 20             	add    esp,0x20
c0005897:	6a 01                	push   0x1
c0005899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000589d:	40                   	inc    eax
c000589e:	50                   	push   eax
c000589f:	56                   	push   esi
c00058a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00058a4:	e8 61 c4 ff ff       	call   c0001d0a <disk_write>
c00058a9:	83 c4 10             	add    esp,0x10
c00058ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00058b0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00058b4:	c1 e8 09             	shr    eax,0x9
c00058b7:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00058bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058c1:	31 d2                	xor    edx,edx
c00058c3:	31 db                	xor    ebx,ebx
c00058c5:	89 f0                	mov    eax,esi
c00058c7:	e8 b4 c4 ff ff       	call   c0001d80 <mem_set>
c00058cc:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058d1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058d9:	0f 94 c3             	sete   bl
c00058dc:	4b                   	dec    ebx
c00058dd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058e3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ee:	75 21                	jne    c0005911 <f_mkfs+0x65c>
c00058f0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058f5:	89 f0                	mov    eax,esi
c00058f7:	e8 6c c4 ff ff       	call   c0001d68 <st_dword>
c00058fc:	8d 46 04             	lea    eax,[esi+0x4]
c00058ff:	83 ca ff             	or     edx,0xffffffff
c0005902:	e8 61 c4 ff ff       	call   c0001d68 <st_dword>
c0005907:	8d 46 08             	lea    eax,[esi+0x8]
c000590a:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000590f:	eb 04                	jmp    c0005915 <f_mkfs+0x660>
c0005911:	89 da                	mov    edx,ebx
c0005913:	89 f0                	mov    eax,esi
c0005915:	e8 4e c4 ff ff       	call   c0001d68 <st_dword>
c000591a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000591e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005922:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000592a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000592e:	76 08                	jbe    c0005938 <f_mkfs+0x683>
c0005930:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005934:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000593c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005940:	56                   	push   esi
c0005941:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005945:	e8 c0 c3 ff ff       	call   c0001d0a <disk_write>
c000594a:	83 c4 10             	add    esp,0x10
c000594d:	85 c0                	test   eax,eax
c000594f:	0f 85 d4 00 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005955:	b9 00 02 00 00       	mov    ecx,0x200
c000595a:	31 d2                	xor    edx,edx
c000595c:	89 f0                	mov    eax,esi
c000595e:	e8 1d c4 ff ff       	call   c0001d80 <mem_set>
c0005963:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005967:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000596b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000596f:	75 b1                	jne    c0005922 <f_mkfs+0x66d>
c0005971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005975:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000597d:	40                   	inc    eax
c000597e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005982:	0f 87 61 ff ff ff    	ja     c00058e9 <f_mkfs+0x634>
c0005988:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000598d:	74 04                	je     c0005993 <f_mkfs+0x6de>
c000598f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005993:	89 fb                	mov    ebx,edi
c0005995:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005999:	76 04                	jbe    c000599f <f_mkfs+0x6ea>
c000599b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000599f:	53                   	push   ebx
c00059a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00059a4:	56                   	push   esi
c00059a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059a9:	e8 5c c3 ff ff       	call   c0001d0a <disk_write>
c00059ae:	83 c4 10             	add    esp,0x10
c00059b1:	85 c0                	test   eax,eax
c00059b3:	75 74                	jne    c0005a29 <f_mkfs+0x774>
c00059b5:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00059b9:	29 df                	sub    edi,ebx
c00059bb:	75 d6                	jne    c0005993 <f_mkfs+0x6de>
c00059bd:	b1 0c                	mov    cl,0xc
c00059bf:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059c4:	74 18                	je     c00059de <f_mkfs+0x729>
c00059c6:	b1 06                	mov    cl,0x6
c00059c8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059d0:	77 0c                	ja     c00059de <f_mkfs+0x729>
c00059d2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059d7:	0f 94 c1             	sete   cl
c00059da:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059de:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059e3:	75 2d                	jne    c0005a12 <f_mkfs+0x75d>
c00059e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059e9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059f5:	0f b6 c9             	movzx  ecx,cl
c00059f8:	83 ec 0c             	sub    esp,0xc
c00059fb:	56                   	push   esi
c00059fc:	8d 54 24 48          	lea    edx,[esp+0x48]
c0005a00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a04:	e8 4c d3 ff ff       	call   c0002d55 <create_partition>
c0005a09:	83 c4 10             	add    esp,0x10
c0005a0c:	89 c7                	mov    edi,eax
c0005a0e:	85 c0                	test   eax,eax
c0005a10:	75 2e                	jne    c0005a40 <f_mkfs+0x78b>
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	50                   	push   eax
c0005a15:	6a 00                	push   0x0
c0005a17:	6a 00                	push   0x0
c0005a19:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005a1d:	e8 fe c2 ff ff       	call   c0001d20 <disk_ioctl>
c0005a22:	83 c4 10             	add    esp,0x10
c0005a25:	85 c0                	test   eax,eax
c0005a27:	74 17                	je     c0005a40 <f_mkfs+0x78b>
c0005a29:	85 ed                	test   ebp,ebp
c0005a2b:	75 0c                	jne    c0005a39 <f_mkfs+0x784>
c0005a2d:	83 ec 0c             	sub    esp,0xc
c0005a30:	56                   	push   esi
c0005a31:	e8 6e 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a36:	83 c4 10             	add    esp,0x10
c0005a39:	bf 01 00 00 00       	mov    edi,0x1
c0005a3e:	eb 40                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a40:	85 ed                	test   ebp,ebp
c0005a42:	75 3c                	jne    c0005a80 <f_mkfs+0x7cb>
c0005a44:	83 ec 0c             	sub    esp,0xc
c0005a47:	56                   	push   esi
c0005a48:	e8 57 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a4d:	83 c4 10             	add    esp,0x10
c0005a50:	eb 2e                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a52:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a57:	0f 85 56 fb ff ff    	jne    c00055b3 <f_mkfs+0x2fe>
c0005a5d:	e9 2f fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a62:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a67:	0f 85 4c fb ff ff    	jne    c00055b9 <f_mkfs+0x304>
c0005a6d:	89 cf                	mov    edi,ecx
c0005a6f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a75:	0f 86 49 fa ff ff    	jbe    c00054c4 <f_mkfs+0x20f>
c0005a7b:	e9 11 fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a80:	83 c4 4c             	add    esp,0x4c
c0005a83:	89 f8                	mov    eax,edi
c0005a85:	5b                   	pop    ebx
c0005a86:	5e                   	pop    esi
c0005a87:	5f                   	pop    edi
c0005a88:	5d                   	pop    ebp
c0005a89:	c3                   	ret    
c0005a8a:	66 90                	xchg   ax,ax

c0005a8c <ff_memalloc>:
c0005a8c:	83 ec 0c             	sub    esp,0xc
c0005a8f:	83 ec 0c             	sub    esp,0xc
c0005a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a96:	e8 b6 23 00 00       	call   c0007e51 <malloc>
c0005a9b:	83 c4 10             	add    esp,0x10
c0005a9e:	83 c4 0c             	add    esp,0xc
c0005aa1:	c3                   	ret    
c0005aa2:	66 90                	xchg   ax,ax

c0005aa4 <ff_memfree>:
c0005aa4:	83 ec 0c             	sub    esp,0xc
c0005aa7:	83 ec 0c             	sub    esp,0xc
c0005aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005aae:	e8 ae 23 00 00       	call   c0007e61 <free>
c0005ab3:	83 c4 10             	add    esp,0x10
c0005ab6:	90                   	nop
c0005ab7:	83 c4 0c             	add    esp,0xc
c0005aba:	c3                   	ret    
c0005abb:	90                   	nop

c0005abc <ff_uni2oem>:
c0005abc:	83 ec 14             	sub    esp,0x14
c0005abf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ac3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005ac7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ace:	c7 44 24 0c 00 d4 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d400
c0005ad6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005adb:	77 0b                	ja     c0005ae8 <ff_uni2oem+0x2c>
c0005add:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ae1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ae6:	eb 68                	jmp    c0005b50 <ff_uni2oem+0x94>
c0005ae8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005af0:	77 5e                	ja     c0005b50 <ff_uni2oem+0x94>
c0005af2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005af8:	75 56                	jne    c0005b50 <ff_uni2oem+0x94>
c0005afa:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005b01:	eb 0d                	jmp    c0005b10 <ff_uni2oem+0x54>
c0005b03:	90                   	nop
c0005b04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b09:	40                   	inc    eax
c0005b0a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b0f:	90                   	nop
c0005b10:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005b16:	77 24                	ja     c0005b3c <ff_uni2oem+0x80>
c0005b18:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b1d:	25 ff ff 00 00       	and    eax,0xffff
c0005b22:	01 c0                	add    eax,eax
c0005b24:	89 c2                	mov    edx,eax
c0005b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b2a:	01 d0                	add    eax,edx
c0005b2c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b2f:	25 ff ff 00 00       	and    eax,0xffff
c0005b34:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b38:	75 ca                	jne    c0005b04 <ff_uni2oem+0x48>
c0005b3a:	66 90                	xchg   ax,ax
c0005b3c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b41:	83 e8 80             	sub    eax,0xffffff80
c0005b44:	25 ff 00 00 00       	and    eax,0xff
c0005b49:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b4e:	66 90                	xchg   ax,ax
c0005b50:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b55:	83 c4 14             	add    esp,0x14
c0005b58:	c3                   	ret    
c0005b59:	8d 76 00             	lea    esi,[esi+0x0]

c0005b5c <ff_oem2uni>:
c0005b5c:	83 ec 18             	sub    esp,0x18
c0005b5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b67:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b6c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b70:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b77:	c7 44 24 10 00 d4 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d400
c0005b7f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b85:	77 0d                	ja     c0005b94 <ff_oem2uni+0x38>
c0005b87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b8b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b90:	eb 36                	jmp    c0005bc8 <ff_oem2uni+0x6c>
c0005b92:	66 90                	xchg   ax,ax
c0005b94:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b9a:	75 2c                	jne    c0005bc8 <ff_oem2uni+0x6c>
c0005b9c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005ba3:	77 23                	ja     c0005bc8 <ff_oem2uni+0x6c>
c0005ba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ba9:	25 ff ff 00 00       	and    eax,0xffff
c0005bae:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005bb3:	01 c0                	add    eax,eax
c0005bb5:	89 c2                	mov    edx,eax
c0005bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005bbb:	01 d0                	add    eax,edx
c0005bbd:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bc0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005bc8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bcd:	83 c4 18             	add    esp,0x18
c0005bd0:	c3                   	ret    
c0005bd1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bd4 <ff_wtoupper>:
c0005bd4:	83 ec 10             	sub    esp,0x10
c0005bd7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bdf:	0f 87 77 01 00 00    	ja     c0005d5c <ff_wtoupper+0x188>
c0005be5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005be9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bee:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bf5:	77 09                	ja     c0005c00 <ff_wtoupper+0x2c>
c0005bf7:	b8 00 d2 01 c0       	mov    eax,0xc001d200
c0005bfc:	eb 0a                	jmp    c0005c08 <ff_wtoupper+0x34>
c0005bfe:	66 90                	xchg   ax,ax
c0005c00:	b8 40 d1 01 c0       	mov    eax,0xc001d140
c0005c05:	8d 76 00             	lea    esi,[esi+0x0]
c0005c08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005c0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c10:	8d 50 02             	lea    edx,[eax+0x2]
c0005c13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c17:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c1a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005c1f:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c25:	0f 84 21 01 00 00    	je     c0005d4c <ff_wtoupper+0x178>
c0005c2b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c30:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c35:	0f 82 11 01 00 00    	jb     c0005d4c <ff_wtoupper+0x178>
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c46:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c49:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c4e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c53:	66 c1 e8 08          	shr    ax,0x8
c0005c57:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c5c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c63:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c68:	31 d2                	xor    edx,edx
c0005c6a:	66 89 c2             	mov    dx,ax
c0005c6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c71:	31 c9                	xor    ecx,ecx
c0005c73:	66 89 c1             	mov    cx,ax
c0005c76:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c7b:	25 ff ff 00 00       	and    eax,0xffff
c0005c80:	01 c8                	add    eax,ecx
c0005c82:	39 c2                	cmp    edx,eax
c0005c84:	0f 8d 9a 00 00 00    	jge    c0005d24 <ff_wtoupper+0x150>
c0005c8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c8e:	25 ff ff 00 00       	and    eax,0xffff
c0005c93:	83 f8 08             	cmp    eax,0x8
c0005c96:	0f 87 ac 00 00 00    	ja     c0005d48 <ff_wtoupper+0x174>
c0005c9c:	8b 04 85 00 d1 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2f00]
c0005ca3:	ff e0                	jmp    eax
c0005ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ca8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cad:	31 d2                	xor    edx,edx
c0005caf:	66 89 c2             	mov    dx,ax
c0005cb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005cb6:	25 ff ff 00 00       	and    eax,0xffff
c0005cbb:	29 c2                	sub    edx,eax
c0005cbd:	89 d0                	mov    eax,edx
c0005cbf:	01 c0                	add    eax,eax
c0005cc1:	89 c2                	mov    edx,eax
c0005cc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc7:	01 d0                	add    eax,edx
c0005cc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ccc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cd1:	eb 4d                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cd3:	90                   	nop
c0005cd4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cd9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cdd:	83 e0 01             	and    eax,0x1
c0005ce0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005ce5:	eb 39                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005ce7:	90                   	nop
c0005ce8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cee:	eb 30                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cf6:	eb 28                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cfe:	eb 20                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d00:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005d06:	eb 18                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d08:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005d0e:	eb 10                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d10:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005d16:	eb 08                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d18:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005d1f:	90                   	nop
c0005d20:	eb 26                	jmp    c0005d48 <ff_wtoupper+0x174>
c0005d22:	66 90                	xchg   ax,ax
c0005d24:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d2a:	0f 85 dc fe ff ff    	jne    c0005c0c <ff_wtoupper+0x38>
c0005d30:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d35:	25 ff ff 00 00       	and    eax,0xffff
c0005d3a:	01 c0                	add    eax,eax
c0005d3c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d40:	e9 c7 fe ff ff       	jmp    c0005c0c <ff_wtoupper+0x38>
c0005d45:	8d 76 00             	lea    esi,[esi+0x0]
c0005d48:	90                   	nop
c0005d49:	8d 76 00             	lea    esi,[esi+0x0]
c0005d4c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d51:	25 ff ff 00 00       	and    eax,0xffff
c0005d56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d5a:	66 90                	xchg   ax,ax
c0005d5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d60:	83 c4 10             	add    esp,0x10
c0005d63:	c3                   	ret    

c0005d64 <utf2ucs>:
c0005d64:	57                   	push   edi
c0005d65:	56                   	push   esi
c0005d66:	53                   	push   ebx
c0005d67:	89 d7                	mov    edi,edx
c0005d69:	47                   	inc    edi
c0005d6a:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0005d6d:	0f be cb             	movsx  ecx,bl
c0005d70:	89 ce                	mov    esi,ecx
c0005d72:	c1 fe 08             	sar    esi,0x8
c0005d75:	89 f2                	mov    edx,esi
c0005d77:	88 10                	mov    BYTE PTR [eax],dl
c0005d79:	83 c0 02             	add    eax,0x2
c0005d7c:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005d7f:	85 c9                	test   ecx,ecx
c0005d81:	75 e6                	jne    c0005d69 <utf2ucs+0x5>
c0005d83:	5b                   	pop    ebx
c0005d84:	5e                   	pop    esi
c0005d85:	5f                   	pop    edi
c0005d86:	c3                   	ret    

c0005d87 <ucs2utfn>:
c0005d87:	57                   	push   edi
c0005d88:	56                   	push   esi
c0005d89:	53                   	push   ebx
c0005d8a:	89 cb                	mov    ebx,ecx
c0005d8c:	d1 eb                	shr    ebx,1
c0005d8e:	83 f9 01             	cmp    ecx,0x1
c0005d91:	76 17                	jbe    c0005daa <ucs2utfn+0x23>
c0005d93:	8d 7b ff             	lea    edi,[ebx-0x1]
c0005d96:	0f be 32             	movsx  esi,BYTE PTR [edx]
c0005d99:	c1 e6 08             	shl    esi,0x8
c0005d9c:	8d 4a 02             	lea    ecx,[edx+0x2]
c0005d9f:	0f be 52 01          	movsx  edx,BYTE PTR [edx+0x1]
c0005da3:	09 f2                	or     edx,esi
c0005da5:	83 fa 3b             	cmp    edx,0x3b
c0005da8:	75 40                	jne    c0005dea <ucs2utfn+0x63>
c0005daa:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005dad:	5b                   	pop    ebx
c0005dae:	5e                   	pop    esi
c0005daf:	5f                   	pop    edi
c0005db0:	c3                   	ret    
c0005db1:	81 fa ff 07 00 00    	cmp    edx,0x7ff
c0005db7:	7f 3d                	jg     c0005df6 <ucs2utfn+0x6f>
c0005db9:	89 d6                	mov    esi,edx
c0005dbb:	c1 fe 06             	sar    esi,0x6
c0005dbe:	83 ce c0             	or     esi,0xffffffc0
c0005dc1:	89 f3                	mov    ebx,esi
c0005dc3:	88 18                	mov    BYTE PTR [eax],bl
c0005dc5:	83 e2 3f             	and    edx,0x3f
c0005dc8:	83 ca 80             	or     edx,0xffffff80
c0005dcb:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0005dce:	8d 40 02             	lea    eax,[eax+0x2]
c0005dd1:	85 ff                	test   edi,edi
c0005dd3:	74 d5                	je     c0005daa <ucs2utfn+0x23>
c0005dd5:	4f                   	dec    edi
c0005dd6:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0005dd9:	c1 e2 08             	shl    edx,0x8
c0005ddc:	83 c1 02             	add    ecx,0x2
c0005ddf:	0f be 71 ff          	movsx  esi,BYTE PTR [ecx-0x1]
c0005de3:	09 f2                	or     edx,esi
c0005de5:	83 fa 3b             	cmp    edx,0x3b
c0005de8:	74 c0                	je     c0005daa <ucs2utfn+0x23>
c0005dea:	83 fa 7f             	cmp    edx,0x7f
c0005ded:	7f c2                	jg     c0005db1 <ucs2utfn+0x2a>
c0005def:	88 10                	mov    BYTE PTR [eax],dl
c0005df1:	8d 40 01             	lea    eax,[eax+0x1]
c0005df4:	eb db                	jmp    c0005dd1 <ucs2utfn+0x4a>
c0005df6:	89 d6                	mov    esi,edx
c0005df8:	c1 fe 0c             	sar    esi,0xc
c0005dfb:	83 ce e0             	or     esi,0xffffffe0
c0005dfe:	89 f3                	mov    ebx,esi
c0005e00:	88 18                	mov    BYTE PTR [eax],bl
c0005e02:	89 d6                	mov    esi,edx
c0005e04:	c1 fe 06             	sar    esi,0x6
c0005e07:	83 e6 3f             	and    esi,0x3f
c0005e0a:	83 ce 80             	or     esi,0xffffff80
c0005e0d:	89 f3                	mov    ebx,esi
c0005e0f:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0005e12:	83 e2 3f             	and    edx,0x3f
c0005e15:	83 ca 80             	or     edx,0xffffff80
c0005e18:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
c0005e1b:	8d 40 03             	lea    eax,[eax+0x3]
c0005e1e:	eb b1                	jmp    c0005dd1 <ucs2utfn+0x4a>

c0005e20 <isjoliet>:
c0005e20:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005e23:	74 06                	je     c0005e2b <isjoliet+0xb>
c0005e25:	b8 00 00 00 00       	mov    eax,0x0
c0005e2a:	c3                   	ret    
c0005e2b:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005e2f:	74 06                	je     c0005e37 <isjoliet+0x17>
c0005e31:	b8 00 00 00 00       	mov    eax,0x0
c0005e36:	c3                   	ret    
c0005e37:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005e3a:	3c 43                	cmp    al,0x43
c0005e3c:	74 0f                	je     c0005e4d <isjoliet+0x2d>
c0005e3e:	3c 45                	cmp    al,0x45
c0005e40:	74 11                	je     c0005e53 <isjoliet+0x33>
c0005e42:	3c 40                	cmp    al,0x40
c0005e44:	0f 94 c0             	sete   al
c0005e47:	25 ff 00 00 00       	and    eax,0xff
c0005e4c:	c3                   	ret    
c0005e4d:	b8 02 00 00 00       	mov    eax,0x2
c0005e52:	c3                   	ret    
c0005e53:	b8 03 00 00 00       	mov    eax,0x3
c0005e58:	c3                   	ret    

c0005e59 <htohl_32>:
c0005e59:	31 d2                	xor    edx,edx
c0005e5b:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c0005e5e:	c1 e2 08             	shl    edx,0x8
c0005e61:	31 c9                	xor    ecx,ecx
c0005e63:	8a 48 02             	mov    cl,BYTE PTR [eax+0x2]
c0005e66:	c1 e1 10             	shl    ecx,0x10
c0005e69:	09 ca                	or     edx,ecx
c0005e6b:	31 c9                	xor    ecx,ecx
c0005e6d:	8a 08                	mov    cl,BYTE PTR [eax]
c0005e6f:	09 ca                	or     edx,ecx
c0005e71:	31 c9                	xor    ecx,ecx
c0005e73:	8a 48 03             	mov    cl,BYTE PTR [eax+0x3]
c0005e76:	89 c8                	mov    eax,ecx
c0005e78:	c1 e0 18             	shl    eax,0x18
c0005e7b:	09 d0                	or     eax,edx
c0005e7d:	c3                   	ret    

c0005e7e <iso_733>:
c0005e7e:	e8 d6 ff ff ff       	call   c0005e59 <htohl_32>
c0005e83:	c3                   	ret    

c0005e84 <bclear_cache>:
c0005e84:	b8 00 00 00 00       	mov    eax,0x0
c0005e89:	8b 14 85 a0 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0560]
c0005e90:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e96:	8b 14 85 00 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0500]
c0005e9d:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005ea3:	40                   	inc    eax
c0005ea4:	83 f8 10             	cmp    eax,0x10
c0005ea7:	75 e0                	jne    c0005e89 <bclear_cache+0x5>
c0005ea9:	c3                   	ret    

c0005eaa <bgrad_cache>:
c0005eaa:	83 fa 0e             	cmp    edx,0xe
c0005ead:	77 1c                	ja     c0005ecb <bgrad_cache+0x21>
c0005eaf:	56                   	push   esi
c0005eb0:	53                   	push   ebx
c0005eb1:	8d 14 90             	lea    edx,[eax+edx*4]
c0005eb4:	8b 32                	mov    esi,DWORD PTR [edx]
c0005eb6:	8d 58 3c             	lea    ebx,[eax+0x3c]
c0005eb9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0005ebc:	89 0a                	mov    DWORD PTR [edx],ecx
c0005ebe:	83 c2 04             	add    edx,0x4
c0005ec1:	39 da                	cmp    edx,ebx
c0005ec3:	75 f4                	jne    c0005eb9 <bgrad_cache+0xf>
c0005ec5:	89 70 3c             	mov    DWORD PTR [eax+0x3c],esi
c0005ec8:	5b                   	pop    ebx
c0005ec9:	5e                   	pop    esi
c0005eca:	c3                   	ret    
c0005ecb:	c3                   	ret    

c0005ecc <bclear>:
c0005ecc:	e8 b3 ff ff ff       	call   c0005e84 <bclear_cache>
c0005ed1:	c3                   	ret    

c0005ed2 <iso_break_all>:
c0005ed2:	b8 50 00 02 c0       	mov    eax,0xc0020050
c0005ed7:	ba 90 09 02 c0       	mov    edx,0xc0020990
c0005edc:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0005ee2:	05 94 00 00 00       	add    eax,0x94
c0005ee7:	39 d0                	cmp    eax,edx
c0005ee9:	75 f1                	jne    c0005edc <iso_break_all+0xa>
c0005eeb:	c3                   	ret    

c0005eec <ucscompare>:
c0005eec:	55                   	push   ebp
c0005eed:	57                   	push   edi
c0005eee:	56                   	push   esi
c0005eef:	53                   	push   ebx
c0005ef0:	83 ec 1c             	sub    esp,0x1c
c0005ef3:	89 d7                	mov    edi,edx
c0005ef5:	85 c9                	test   ecx,ecx
c0005ef7:	0f 8e ab 00 00 00    	jle    c0005fa8 <ucscompare+0xbc>
c0005efd:	89 c5                	mov    ebp,eax
c0005eff:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0005f02:	c1 e0 08             	shl    eax,0x8
c0005f05:	0f be 55 01          	movsx  edx,BYTE PTR [ebp+0x1]
c0005f09:	09 d0                	or     eax,edx
c0005f0b:	0f be 37             	movsx  esi,BYTE PTR [edi]
c0005f0e:	c1 e6 08             	shl    esi,0x8
c0005f11:	0f be 57 01          	movsx  edx,BYTE PTR [edi+0x1]
c0005f15:	09 d6                	or     esi,edx
c0005f17:	83 f8 3b             	cmp    eax,0x3b
c0005f1a:	0f 84 92 00 00 00    	je     c0005fb2 <ucscompare+0xc6>
c0005f20:	49                   	dec    ecx
c0005f21:	83 e1 fe             	and    ecx,0xfffffffe
c0005f24:	83 c1 02             	add    ecx,0x2
c0005f27:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005f2b:	bb 00 00 00 00       	mov    ebx,0x0
c0005f30:	83 ec 0c             	sub    esp,0xc
c0005f33:	50                   	push   eax
c0005f34:	e8 b7 a9 ff ff       	call   c00008f0 <tolower>
c0005f39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005f3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005f40:	e8 ab a9 ff ff       	call   c00008f0 <tolower>
c0005f45:	83 c4 10             	add    esp,0x10
c0005f48:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0005f4c:	75 6e                	jne    c0005fbc <ucscompare+0xd0>
c0005f4e:	83 c3 02             	add    ebx,0x2
c0005f51:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0005f55:	74 26                	je     c0005f7d <ucscompare+0x91>
c0005f57:	0f be 44 1d 00       	movsx  eax,BYTE PTR [ebp+ebx*1+0x0]
c0005f5c:	c1 e0 08             	shl    eax,0x8
c0005f5f:	0f be 54 1d 01       	movsx  edx,BYTE PTR [ebp+ebx*1+0x1]
c0005f64:	09 d0                	or     eax,edx
c0005f66:	0f be 34 1f          	movsx  esi,BYTE PTR [edi+ebx*1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	0f be 54 1f 01       	movsx  edx,BYTE PTR [edi+ebx*1+0x1]
c0005f72:	09 d6                	or     esi,edx
c0005f74:	83 f8 3b             	cmp    eax,0x3b
c0005f77:	75 b7                	jne    c0005f30 <ucscompare+0x44>
c0005f79:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0005f7d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005f81:	0f be 04 0f          	movsx  eax,BYTE PTR [edi+ecx*1]
c0005f85:	c1 e0 08             	shl    eax,0x8
c0005f88:	0f be 54 0f 01       	movsx  edx,BYTE PTR [edi+ecx*1+0x1]
c0005f8d:	09 d0                	or     eax,edx
c0005f8f:	83 f8 2f             	cmp    eax,0x2f
c0005f92:	74 2f                	je     c0005fc3 <ucscompare+0xd7>
c0005f94:	85 c0                	test   eax,eax
c0005f96:	0f 95 c0             	setne  al
c0005f99:	25 ff 00 00 00       	and    eax,0xff
c0005f9e:	f7 d8                	neg    eax
c0005fa0:	83 c4 1c             	add    esp,0x1c
c0005fa3:	5b                   	pop    ebx
c0005fa4:	5e                   	pop    esi
c0005fa5:	5f                   	pop    edi
c0005fa6:	5d                   	pop    ebp
c0005fa7:	c3                   	ret    
c0005fa8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005fb0:	eb cb                	jmp    c0005f7d <ucscompare+0x91>
c0005fb2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005fba:	eb c1                	jmp    c0005f7d <ucscompare+0x91>
c0005fbc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0005fc1:	eb dd                	jmp    c0005fa0 <ucscompare+0xb4>
c0005fc3:	b8 00 00 00 00       	mov    eax,0x0
c0005fc8:	eb d6                	jmp    c0005fa0 <ucscompare+0xb4>

c0005fca <fncompare>:
c0005fca:	55                   	push   ebp
c0005fcb:	57                   	push   edi
c0005fcc:	56                   	push   esi
c0005fcd:	53                   	push   ebx
c0005fce:	83 ec 1c             	sub    esp,0x1c
c0005fd1:	89 cd                	mov    ebp,ecx
c0005fd3:	85 d2                	test   edx,edx
c0005fd5:	7e 71                	jle    c0006048 <fncompare+0x7e>
c0005fd7:	89 c7                	mov    edi,eax
c0005fd9:	89 d6                	mov    esi,edx
c0005fdb:	8a 00                	mov    al,BYTE PTR [eax]
c0005fdd:	3c 3b                	cmp    al,0x3b
c0005fdf:	74 6e                	je     c000604f <fncompare+0x85>
c0005fe1:	bb 00 00 00 00       	mov    ebx,0x0
c0005fe6:	eb 32                	jmp    c000601a <fncompare+0x50>
c0005fe8:	83 ec 0c             	sub    esp,0xc
c0005feb:	0f be c0             	movsx  eax,al
c0005fee:	50                   	push   eax
c0005fef:	e8 fc a8 ff ff       	call   c00008f0 <tolower>
c0005ff4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ff8:	0f be 44 1d 00       	movsx  eax,BYTE PTR [ebp+ebx*1+0x0]
c0005ffd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006000:	e8 eb a8 ff ff       	call   c00008f0 <tolower>
c0006005:	83 c4 10             	add    esp,0x10
c0006008:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000600c:	75 48                	jne    c0006056 <fncompare+0x8c>
c000600e:	43                   	inc    ebx
c000600f:	39 de                	cmp    esi,ebx
c0006011:	74 19                	je     c000602c <fncompare+0x62>
c0006013:	8a 04 1f             	mov    al,BYTE PTR [edi+ebx*1]
c0006016:	3c 3b                	cmp    al,0x3b
c0006018:	74 12                	je     c000602c <fncompare+0x62>
c000601a:	3c 2e                	cmp    al,0x2e
c000601c:	75 ca                	jne    c0005fe8 <fncompare+0x1e>
c000601e:	8d 56 ff             	lea    edx,[esi-0x1]
c0006021:	39 da                	cmp    edx,ebx
c0006023:	74 07                	je     c000602c <fncompare+0x62>
c0006025:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c000602a:	75 bc                	jne    c0005fe8 <fncompare+0x1e>
c000602c:	8a 44 1d 00          	mov    al,BYTE PTR [ebp+ebx*1+0x0]
c0006030:	3c 2f                	cmp    al,0x2f
c0006032:	74 29                	je     c000605d <fncompare+0x93>
c0006034:	84 c0                	test   al,al
c0006036:	0f 95 c0             	setne  al
c0006039:	25 ff 00 00 00       	and    eax,0xff
c000603e:	f7 d8                	neg    eax
c0006040:	83 c4 1c             	add    esp,0x1c
c0006043:	5b                   	pop    ebx
c0006044:	5e                   	pop    esi
c0006045:	5f                   	pop    edi
c0006046:	5d                   	pop    ebp
c0006047:	c3                   	ret    
c0006048:	bb 00 00 00 00       	mov    ebx,0x0
c000604d:	eb dd                	jmp    c000602c <fncompare+0x62>
c000604f:	bb 00 00 00 00       	mov    ebx,0x0
c0006054:	eb d6                	jmp    c000602c <fncompare+0x62>
c0006056:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000605b:	eb e3                	jmp    c0006040 <fncompare+0x76>
c000605d:	b8 00 00 00 00       	mov    eax,0x0
c0006062:	eb dc                	jmp    c0006040 <fncompare+0x76>

c0006064 <isoReadDiscSector>:
c0006064:	83 ec 0c             	sub    esp,0xc
c0006067:	0f be 05 e0 fa 01 c0 	movsx  eax,BYTE PTR ds:0xc001fae0
c000606e:	50                   	push   eax
c000606f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006073:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006077:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000607b:	e8 f0 18 01 00       	call   c0017970 <isoReadDiscSectorHelper>
c0006080:	83 c4 1c             	add    esp,0x1c
c0006083:	c3                   	ret    

c0006084 <bread_cache>:
c0006084:	55                   	push   ebp
c0006085:	57                   	push   edi
c0006086:	56                   	push   esi
c0006087:	53                   	push   ebx
c0006088:	83 ec 0c             	sub    esp,0xc
c000608b:	89 c6                	mov    esi,eax
c000608d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0006090:	3b 10                	cmp    edx,DWORD PTR [eax]
c0006092:	74 6a                	je     c00060fe <bread_cache+0x7a>
c0006094:	89 d7                	mov    edi,edx
c0006096:	ba 0e 00 00 00       	mov    edx,0xe
c000609b:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000609e:	39 38                	cmp    DWORD PTR [eax],edi
c00060a0:	74 61                	je     c0006103 <bread_cache+0x7f>
c00060a2:	4a                   	dec    edx
c00060a3:	83 fa ff             	cmp    edx,0xffffffff
c00060a6:	75 f3                	jne    c000609b <bread_cache+0x17>
c00060a8:	8b 06                	mov    eax,DWORD PTR [esi]
c00060aa:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00060ad:	74 69                	je     c0006118 <bread_cache+0x94>
c00060af:	bb 01 00 00 00       	mov    ebx,0x1
c00060b4:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00060b7:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00060ba:	74 0b                	je     c00060c7 <bread_cache+0x43>
c00060bc:	43                   	inc    ebx
c00060bd:	83 fb 10             	cmp    ebx,0x10
c00060c0:	75 f2                	jne    c00060b4 <bread_cache+0x30>
c00060c2:	bb 00 00 00 00       	mov    ebx,0x0
c00060c7:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00060ca:	83 ec 04             	sub    esp,0x4
c00060cd:	6a 01                	push   0x1
c00060cf:	57                   	push   edi
c00060d0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00060d3:	83 c0 04             	add    eax,0x4
c00060d6:	50                   	push   eax
c00060d7:	e8 88 ff ff ff       	call   c0006064 <isoReadDiscSector>
c00060dc:	83 c4 10             	add    esp,0x10
c00060df:	85 c0                	test   eax,eax
c00060e1:	78 2e                	js     c0006111 <bread_cache+0x8d>
c00060e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00060e6:	89 38                	mov    DWORD PTR [eax],edi
c00060e8:	89 da                	mov    edx,ebx
c00060ea:	89 f0                	mov    eax,esi
c00060ec:	e8 b9 fd ff ff       	call   c0005eaa <bgrad_cache>
c00060f1:	b8 0f 00 00 00       	mov    eax,0xf
c00060f6:	83 c4 0c             	add    esp,0xc
c00060f9:	5b                   	pop    ebx
c00060fa:	5e                   	pop    esi
c00060fb:	5f                   	pop    edi
c00060fc:	5d                   	pop    ebp
c00060fd:	c3                   	ret    
c00060fe:	ba 0f 00 00 00       	mov    edx,0xf
c0006103:	89 f0                	mov    eax,esi
c0006105:	e8 a0 fd ff ff       	call   c0005eaa <bgrad_cache>
c000610a:	b8 0f 00 00 00       	mov    eax,0xf
c000610f:	eb e5                	jmp    c00060f6 <bread_cache+0x72>
c0006111:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006116:	eb de                	jmp    c00060f6 <bread_cache+0x72>
c0006118:	bb 00 00 00 00       	mov    ebx,0x0
c000611d:	eb a8                	jmp    c00060c7 <bread_cache+0x43>

c000611f <biread>:
c000611f:	83 ec 0c             	sub    esp,0xc
c0006122:	89 c2                	mov    edx,eax
c0006124:	b8 00 fb 01 c0       	mov    eax,0xc001fb00
c0006129:	e8 56 ff ff ff       	call   c0006084 <bread_cache>
c000612e:	83 c4 0c             	add    esp,0xc
c0006131:	c3                   	ret    

c0006132 <bdread>:
c0006132:	83 ec 0c             	sub    esp,0xc
c0006135:	89 c2                	mov    edx,eax
c0006137:	b8 a0 fa 01 c0       	mov    eax,0xc001faa0
c000613c:	e8 43 ff ff ff       	call   c0006084 <bread_cache>
c0006141:	83 c4 0c             	add    esp,0xc
c0006144:	c3                   	ret    

c0006145 <strnicmp>:
c0006145:	55                   	push   ebp
c0006146:	57                   	push   edi
c0006147:	56                   	push   esi
c0006148:	53                   	push   ebx
c0006149:	83 ec 0c             	sub    esp,0xc
c000614c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006150:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006154:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006158:	85 ff                	test   edi,edi
c000615a:	74 51                	je     c00061ad <strnicmp+0x68>
c000615c:	8a 03                	mov    al,BYTE PTR [ebx]
c000615e:	84 c0                	test   al,al
c0006160:	74 52                	je     c00061b4 <strnicmp+0x6f>
c0006162:	8a 16                	mov    dl,BYTE PTR [esi]
c0006164:	84 d2                	test   dl,dl
c0006166:	74 53                	je     c00061bb <strnicmp+0x76>
c0006168:	01 df                	add    edi,ebx
c000616a:	eb 32                	jmp    c000619e <strnicmp+0x59>
c000616c:	83 ec 0c             	sub    esp,0xc
c000616f:	0f be c0             	movsx  eax,al
c0006172:	50                   	push   eax
c0006173:	e8 78 a7 ff ff       	call   c00008f0 <tolower>
c0006178:	89 c5                	mov    ebp,eax
c000617a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000617d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006180:	e8 6b a7 ff ff       	call   c00008f0 <tolower>
c0006185:	43                   	inc    ebx
c0006186:	46                   	inc    esi
c0006187:	83 c4 10             	add    esp,0x10
c000618a:	29 c5                	sub    ebp,eax
c000618c:	75 39                	jne    c00061c7 <strnicmp+0x82>
c000618e:	39 fb                	cmp    ebx,edi
c0006190:	74 30                	je     c00061c2 <strnicmp+0x7d>
c0006192:	8a 03                	mov    al,BYTE PTR [ebx]
c0006194:	84 c0                	test   al,al
c0006196:	74 39                	je     c00061d1 <strnicmp+0x8c>
c0006198:	8a 16                	mov    dl,BYTE PTR [esi]
c000619a:	84 d2                	test   dl,dl
c000619c:	74 08                	je     c00061a6 <strnicmp+0x61>
c000619e:	38 d0                	cmp    al,dl
c00061a0:	75 ca                	jne    c000616c <strnicmp+0x27>
c00061a2:	43                   	inc    ebx
c00061a3:	46                   	inc    esi
c00061a4:	eb e8                	jmp    c000618e <strnicmp+0x49>
c00061a6:	bd 00 00 00 00       	mov    ebp,0x0
c00061ab:	eb 1a                	jmp    c00061c7 <strnicmp+0x82>
c00061ad:	bd 00 00 00 00       	mov    ebp,0x0
c00061b2:	eb 13                	jmp    c00061c7 <strnicmp+0x82>
c00061b4:	bd 00 00 00 00       	mov    ebp,0x0
c00061b9:	eb 0c                	jmp    c00061c7 <strnicmp+0x82>
c00061bb:	bd 00 00 00 00       	mov    ebp,0x0
c00061c0:	eb 05                	jmp    c00061c7 <strnicmp+0x82>
c00061c2:	bd 00 00 00 00       	mov    ebp,0x0
c00061c7:	89 e8                	mov    eax,ebp
c00061c9:	83 c4 0c             	add    esp,0xc
c00061cc:	5b                   	pop    ebx
c00061cd:	5e                   	pop    esi
c00061ce:	5f                   	pop    edi
c00061cf:	5d                   	pop    ebp
c00061d0:	c3                   	ret    
c00061d1:	bd 00 00 00 00       	mov    ebp,0x0
c00061d6:	eb ef                	jmp    c00061c7 <strnicmp+0x82>

c00061d8 <find_object>:
c00061d8:	55                   	push   ebp
c00061d9:	57                   	push   edi
c00061da:	56                   	push   esi
c00061db:	53                   	push   ebx
c00061dc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00061e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00061e6:	89 d3                	mov    ebx,edx
c00061e8:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00061ec:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c00061f3:	83 3d 34 09 02 c0 00 	cmp    DWORD PTR ds:0xc0020934,0x0
c00061fa:	75 14                	jne    c0006210 <find_object+0x38>
c00061fc:	85 f6                	test   esi,esi
c00061fe:	0f 8e f0 01 00 00    	jle    c00063f4 <find_object+0x21c>
c0006204:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006207:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000620b:	e9 9f 01 00 00       	jmp    c00063af <find_object+0x1d7>
c0006210:	89 c2                	mov    edx,eax
c0006212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006216:	e8 49 fb ff ff       	call   c0005d64 <utf2ucs>
c000621b:	eb df                	jmp    c00061fc <find_object+0x24>
c000621d:	31 d2                	xor    edx,edx
c000621f:	8a 55 20             	mov    dl,BYTE PTR [ebp+0x20]
c0006222:	89 c6                	mov    esi,eax
c0006224:	81 e6 ff 00 00 00    	and    esi,0xff
c000622a:	29 d6                	sub    esi,edx
c000622c:	8d 5c 15 21          	lea    ebx,[ebp+edx*1+0x21]
c0006230:	f6 45 20 01          	test   BYTE PTR [ebp+0x20],0x1
c0006234:	74 3d                	je     c0006273 <find_object+0x9b>
c0006236:	83 ee 21             	sub    esi,0x21
c0006239:	83 fe 03             	cmp    esi,0x3
c000623c:	7e 08                	jle    c0006246 <find_object+0x6e>
c000623e:	8a 43 03             	mov    al,BYTE PTR [ebx+0x3]
c0006241:	48                   	dec    eax
c0006242:	3c 01                	cmp    al,0x1
c0006244:	76 69                	jbe    c00062af <find_object+0xd7>
c0006246:	31 d2                	xor    edx,edx
c0006248:	8a 55 20             	mov    dl,BYTE PTR [ebp+0x20]
c000624b:	8d 45 21             	lea    eax,[ebp+0x21]
c000624e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006252:	e8 73 fd ff ff       	call   c0005fca <fncompare>
c0006257:	85 c0                	test   eax,eax
c0006259:	0f 85 b1 00 00 00    	jne    c0006310 <find_object+0x138>
c000625f:	31 c0                	xor    eax,eax
c0006261:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c0006264:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0006268:	0f 85 a2 00 00 00    	jne    c0006310 <find_object+0x138>
c000626e:	e9 02 01 00 00       	jmp    c0006375 <find_object+0x19d>
c0006273:	43                   	inc    ebx
c0006274:	83 ee 22             	sub    esi,0x22
c0006277:	eb c0                	jmp    c0006239 <find_object+0x61>
c0006279:	0f be 7b 02          	movsx  edi,BYTE PTR [ebx+0x2]
c000627d:	83 ef 05             	sub    edi,0x5
c0006280:	83 ec 04             	sub    esp,0x4
c0006283:	57                   	push   edi
c0006284:	8d 43 05             	lea    eax,[ebx+0x5]
c0006287:	50                   	push   eax
c0006288:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000628c:	50                   	push   eax
c000628d:	e8 be a3 ff ff       	call   c0000650 <strncpy>
c0006292:	c6 44 3c 30 00       	mov    BYTE PTR [esp+edi*1+0x30],0x0
c0006297:	83 c4 10             	add    esp,0x10
c000629a:	0f be 43 02          	movsx  eax,BYTE PTR [ebx+0x2]
c000629e:	29 c6                	sub    esi,eax
c00062a0:	01 c3                	add    ebx,eax
c00062a2:	83 fe 03             	cmp    esi,0x3
c00062a5:	7e 21                	jle    c00062c8 <find_object+0xf0>
c00062a7:	8a 43 03             	mov    al,BYTE PTR [ebx+0x3]
c00062aa:	48                   	dec    eax
c00062ab:	3c 01                	cmp    al,0x1
c00062ad:	77 19                	ja     c00062c8 <find_object+0xf0>
c00062af:	83 ec 04             	sub    esp,0x4
c00062b2:	6a 02                	push   0x2
c00062b4:	68 00 d5 01 c0       	push   0xc001d500
c00062b9:	53                   	push   ebx
c00062ba:	e8 c1 a4 ff ff       	call   c0000780 <strncmp>
c00062bf:	83 c4 10             	add    esp,0x10
c00062c2:	85 c0                	test   eax,eax
c00062c4:	75 d4                	jne    c000629a <find_object+0xc2>
c00062c6:	eb b1                	jmp    c0006279 <find_object+0xa1>
c00062c8:	85 ff                	test   edi,edi
c00062ca:	0f 8e 76 ff ff ff    	jle    c0006246 <find_object+0x6e>
c00062d0:	83 ec 08             	sub    esp,0x8
c00062d3:	6a 2f                	push   0x2f
c00062d5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00062d9:	57                   	push   edi
c00062da:	e8 71 a4 ff ff       	call   c0000750 <strchr>
c00062df:	83 c4 10             	add    esp,0x10
c00062e2:	85 c0                	test   eax,eax
c00062e4:	0f 84 98 00 00 00    	je     c0006382 <find_object+0x1aa>
c00062ea:	29 f8                	sub    eax,edi
c00062ec:	83 ec 04             	sub    esp,0x4
c00062ef:	50                   	push   eax
c00062f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00062f4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00062f8:	50                   	push   eax
c00062f9:	e8 47 fe ff ff       	call   c0006145 <strnicmp>
c00062fe:	83 c4 10             	add    esp,0x10
c0006301:	85 c0                	test   eax,eax
c0006303:	75 0b                	jne    c0006310 <find_object+0x138>
c0006305:	31 c0                	xor    eax,eax
c0006307:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c000630a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000630e:	74 65                	je     c0006375 <find_object+0x19d>
c0006310:	31 c0                	xor    eax,eax
c0006312:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006315:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006319:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000631d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006323:	7f 71                	jg     c0006396 <find_object+0x1be>
c0006325:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006329:	39 c1                	cmp    ecx,eax
c000632b:	7d 69                	jge    c0006396 <find_object+0x1be>
c000632d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006331:	8b 04 85 00 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0500]
c0006338:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000633c:	8d 6c 10 04          	lea    ebp,[eax+edx*1+0x4]
c0006340:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006343:	84 c0                	test   al,al
c0006345:	74 4f                	je     c0006396 <find_object+0x1be>
c0006347:	8b 3d 34 09 02 c0    	mov    edi,DWORD PTR ds:0xc0020934
c000634d:	85 ff                	test   edi,edi
c000634f:	0f 84 c8 fe ff ff    	je     c000621d <find_object+0x45>
c0006355:	31 c9                	xor    ecx,ecx
c0006357:	8a 4d 20             	mov    cl,BYTE PTR [ebp+0x20]
c000635a:	8d 45 21             	lea    eax,[ebp+0x21]
c000635d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006361:	e8 86 fb ff ff       	call   c0005eec <ucscompare>
c0006366:	85 c0                	test   eax,eax
c0006368:	75 a6                	jne    c0006310 <find_object+0x138>
c000636a:	31 c0                	xor    eax,eax
c000636c:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c000636f:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0006373:	75 9b                	jne    c0006310 <find_object+0x138>
c0006375:	89 e8                	mov    eax,ebp
c0006377:	81 c4 2c 01 00 00    	add    esp,0x12c
c000637d:	5b                   	pop    ebx
c000637e:	5e                   	pop    esi
c000637f:	5f                   	pop    edi
c0006380:	5d                   	pop    ebp
c0006381:	c3                   	ret    
c0006382:	83 ec 0c             	sub    esp,0xc
c0006385:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006389:	e8 d2 a1 ff ff       	call   c0000560 <strlen>
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	e9 56 ff ff ff       	jmp    c00062ec <find_object+0x114>
c0006396:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000639a:	81 ac 24 40 01 00 00 00 08 00 00 	sub    DWORD PTR [esp+0x140],0x800
c00063a5:	83 bc 24 40 01 00 00 00 	cmp    DWORD PTR [esp+0x140],0x0
c00063ad:	7e 3e                	jle    c00063ed <find_object+0x215>
c00063af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063b3:	e8 67 fd ff ff       	call   c000611f <biread>
c00063b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00063bc:	85 c0                	test   eax,eax
c00063be:	78 3e                	js     c00063fe <find_object+0x226>
c00063c0:	8b 94 24 40 01 00 00 	mov    edx,DWORD PTR [esp+0x140]
c00063c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00063cb:	85 d2                	test   edx,edx
c00063cd:	7e c7                	jle    c0006396 <find_object+0x1be>
c00063cf:	8b 04 85 00 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0500]
c00063d6:	8d 68 04             	lea    ebp,[eax+0x4]
c00063d9:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00063dc:	84 c0                	test   al,al
c00063de:	74 b6                	je     c0006396 <find_object+0x1be>
c00063e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00063e8:	e9 5a ff ff ff       	jmp    c0006347 <find_object+0x16f>
c00063ed:	bd 00 00 00 00       	mov    ebp,0x0
c00063f2:	eb 81                	jmp    c0006375 <find_object+0x19d>
c00063f4:	bd 00 00 00 00       	mov    ebp,0x0
c00063f9:	e9 77 ff ff ff       	jmp    c0006375 <find_object+0x19d>
c00063fe:	bd 00 00 00 00       	mov    ebp,0x0
c0006403:	e9 6d ff ff ff       	jmp    c0006375 <find_object+0x19d>

c0006408 <find_object_path>:
c0006408:	55                   	push   ebp
c0006409:	57                   	push   edi
c000640a:	56                   	push   esi
c000640b:	53                   	push   ebx
c000640c:	83 ec 1c             	sub    esp,0x1c
c000640f:	89 c6                	mov    esi,eax
c0006411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006415:	89 cf                	mov    edi,ecx
c0006417:	eb 03                	jmp    c000641c <find_object_path+0x14>
c0006419:	8d 73 01             	lea    esi,[ebx+0x1]
c000641c:	83 ec 08             	sub    esp,0x8
c000641f:	6a 2f                	push   0x2f
c0006421:	56                   	push   esi
c0006422:	e8 29 a3 ff ff       	call   c0000750 <strchr>
c0006427:	89 c3                	mov    ebx,eax
c0006429:	83 c4 10             	add    esp,0x10
c000642c:	85 c0                	test   eax,eax
c000642e:	74 33                	je     c0006463 <find_object_path+0x5b>
c0006430:	39 de                	cmp    esi,ebx
c0006432:	74 e5                	je     c0006419 <find_object_path+0x11>
c0006434:	8d 47 0a             	lea    eax,[edi+0xa]
c0006437:	e8 42 fa ff ff       	call   c0005e7e <iso_733>
c000643c:	89 c5                	mov    ebp,eax
c000643e:	8d 47 02             	lea    eax,[edi+0x2]
c0006441:	e8 38 fa ff ff       	call   c0005e7e <iso_733>
c0006446:	83 ec 0c             	sub    esp,0xc
c0006449:	55                   	push   ebp
c000644a:	89 c1                	mov    ecx,eax
c000644c:	ba 01 00 00 00       	mov    edx,0x1
c0006451:	89 f0                	mov    eax,esi
c0006453:	e8 80 fd ff ff       	call   c00061d8 <find_object>
c0006458:	89 c7                	mov    edi,eax
c000645a:	83 c4 10             	add    esp,0x10
c000645d:	85 c0                	test   eax,eax
c000645f:	75 b8                	jne    c0006419 <find_object_path+0x11>
c0006461:	eb 0e                	jmp    c0006471 <find_object_path+0x69>
c0006463:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006466:	75 11                	jne    c0006479 <find_object_path+0x71>
c0006468:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000646d:	74 32                	je     c00064a1 <find_object_path+0x99>
c000646f:	89 f8                	mov    eax,edi
c0006471:	83 c4 1c             	add    esp,0x1c
c0006474:	5b                   	pop    ebx
c0006475:	5e                   	pop    esi
c0006476:	5f                   	pop    edi
c0006477:	5d                   	pop    ebp
c0006478:	c3                   	ret    
c0006479:	8d 47 0a             	lea    eax,[edi+0xa]
c000647c:	e8 fd f9 ff ff       	call   c0005e7e <iso_733>
c0006481:	89 c3                	mov    ebx,eax
c0006483:	8d 47 02             	lea    eax,[edi+0x2]
c0006486:	e8 f3 f9 ff ff       	call   c0005e7e <iso_733>
c000648b:	83 ec 0c             	sub    esp,0xc
c000648e:	53                   	push   ebx
c000648f:	89 c1                	mov    ecx,eax
c0006491:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006495:	89 f0                	mov    eax,esi
c0006497:	e8 3c fd ff ff       	call   c00061d8 <find_object>
c000649c:	83 c4 10             	add    esp,0x10
c000649f:	eb d0                	jmp    c0006471 <find_object_path+0x69>
c00064a1:	b8 00 00 00 00       	mov    eax,0x0
c00064a6:	eb c9                	jmp    c0006471 <find_object_path+0x69>

c00064a8 <stricmp>:
c00064a8:	55                   	push   ebp
c00064a9:	57                   	push   edi
c00064aa:	56                   	push   esi
c00064ab:	53                   	push   ebx
c00064ac:	83 ec 0c             	sub    esp,0xc
c00064af:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00064b3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00064b7:	46                   	inc    esi
c00064b8:	47                   	inc    edi
c00064b9:	0f b6 6f ff          	movzx  ebp,BYTE PTR [edi-0x1]
c00064bd:	81 e5 ff 00 00 00    	and    ebp,0xff
c00064c3:	83 ec 0c             	sub    esp,0xc
c00064c6:	31 c0                	xor    eax,eax
c00064c8:	8a 46 ff             	mov    al,BYTE PTR [esi-0x1]
c00064cb:	50                   	push   eax
c00064cc:	e8 ff a3 ff ff       	call   c00008d0 <toupper>
c00064d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064d4:	e8 17 a4 ff ff       	call   c00008f0 <tolower>
c00064d9:	89 c3                	mov    ebx,eax
c00064db:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00064de:	e8 ed a3 ff ff       	call   c00008d0 <toupper>
c00064e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e6:	e8 05 a4 ff ff       	call   c00008f0 <tolower>
c00064eb:	83 c4 10             	add    esp,0x10
c00064ee:	39 c3                	cmp    ebx,eax
c00064f0:	75 04                	jne    c00064f6 <stricmp+0x4e>
c00064f2:	85 db                	test   ebx,ebx
c00064f4:	75 c1                	jne    c00064b7 <stricmp+0xf>
c00064f6:	29 c3                	sub    ebx,eax
c00064f8:	89 d8                	mov    eax,ebx
c00064fa:	83 c4 0c             	add    esp,0xc
c00064fd:	5b                   	pop    ebx
c00064fe:	5e                   	pop    esi
c00064ff:	5f                   	pop    edi
c0006500:	5d                   	pop    ebp
c0006501:	c3                   	ret    

c0006502 <iso_open>:
c0006502:	55                   	push   ebp
c0006503:	57                   	push   edi
c0006504:	56                   	push   esi
c0006505:	53                   	push   ebx
c0006506:	83 ec 0c             	sub    esp,0xc
c0006509:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000650e:	0f 95 c0             	setne  al
c0006511:	25 ff 00 00 00       	and    eax,0xff
c0006516:	89 c7                	mov    edi,eax
c0006518:	b9 00 09 02 c0       	mov    ecx,0xc0020900
c000651d:	89 c2                	mov    edx,eax
c000651f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006523:	e8 e0 fe ff ff       	call   c0006408 <find_object_path>
c0006528:	85 c0                	test   eax,eax
c000652a:	0f 84 93 00 00 00    	je     c00065c3 <iso_open+0xc1>
c0006530:	89 c6                	mov    esi,eax
c0006532:	83 3d c0 ff 01 c0 00 	cmp    DWORD PTR ds:0xc001ffc0,0x0
c0006539:	0f 84 92 00 00 00    	je     c00065d1 <iso_open+0xcf>
c000653f:	ba 54 00 02 c0       	mov    edx,0xc0020054
c0006544:	bb 01 00 00 00       	mov    ebx,0x1
c0006549:	83 3a 00             	cmp    DWORD PTR [edx],0x0
c000654c:	74 13                	je     c0006561 <iso_open+0x5f>
c000654e:	43                   	inc    ebx
c000654f:	81 c2 94 00 00 00    	add    edx,0x94
c0006555:	83 fb 10             	cmp    ebx,0x10
c0006558:	75 ef                	jne    c0006549 <iso_open+0x47>
c000655a:	bb ff ff ff ff       	mov    ebx,0xffffffff
c000655f:	eb 58                	jmp    c00065b9 <iso_open+0xb7>
c0006561:	8d 04 db             	lea    eax,[ebx+ebx*8]
c0006564:	8d 04 83             	lea    eax,[ebx+eax*4]
c0006567:	c7 04 85 c0 ff 01 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffe0040],0xffffffff
c0006572:	83 fb 0f             	cmp    ebx,0xf
c0006575:	7f 53                	jg     c00065ca <iso_open+0xc8>
c0006577:	8d 46 02             	lea    eax,[esi+0x2]
c000657a:	e8 ff f8 ff ff       	call   c0005e7e <iso_733>
c000657f:	8d 14 db             	lea    edx,[ebx+ebx*8]
c0006582:	8d 14 93             	lea    edx,[ebx+edx*4]
c0006585:	c1 e2 02             	shl    edx,0x2
c0006588:	8d aa c0 ff 01 c0    	lea    ebp,[edx-0x3ffe0040]
c000658e:	89 82 c0 ff 01 c0    	mov    DWORD PTR [edx-0x3ffe0040],eax
c0006594:	89 ba c4 ff 01 c0    	mov    DWORD PTR [edx-0x3ffe003c],edi
c000659a:	c7 82 c8 ff 01 c0 00 00 00 00 	mov    DWORD PTR [edx-0x3ffe0038],0x0
c00065a4:	8d 46 0a             	lea    eax,[esi+0xa]
c00065a7:	e8 d2 f8 ff ff       	call   c0005e7e <iso_733>
c00065ac:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00065af:	c7 85 90 00 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x90],0x0
c00065b9:	89 d8                	mov    eax,ebx
c00065bb:	83 c4 0c             	add    esp,0xc
c00065be:	5b                   	pop    ebx
c00065bf:	5e                   	pop    esi
c00065c0:	5f                   	pop    edi
c00065c1:	5d                   	pop    ebp
c00065c2:	c3                   	ret    
c00065c3:	bb ff ff ff ff       	mov    ebx,0xffffffff
c00065c8:	eb ef                	jmp    c00065b9 <iso_open+0xb7>
c00065ca:	bb ff ff ff ff       	mov    ebx,0xffffffff
c00065cf:	eb e8                	jmp    c00065b9 <iso_open+0xb7>
c00065d1:	c7 05 c0 ff 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001ffc0,0xffffffff
c00065db:	bb 00 00 00 00       	mov    ebx,0x0
c00065e0:	eb 95                	jmp    c0006577 <iso_open+0x75>

c00065e2 <iso_close>:
c00065e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065e6:	83 f8 0f             	cmp    eax,0xf
c00065e9:	7f 11                	jg     c00065fc <iso_close+0x1a>
c00065eb:	8d 14 c0             	lea    edx,[eax+eax*8]
c00065ee:	8d 04 90             	lea    eax,[eax+edx*4]
c00065f1:	c7 04 85 c0 ff 01 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffe0040],0x0
c00065fc:	c3                   	ret    

c00065fd <iso_read>:
c00065fd:	55                   	push   ebp
c00065fe:	57                   	push   edi
c00065ff:	56                   	push   esi
c0006600:	53                   	push   ebx
c0006601:	83 ec 1c             	sub    esp,0x1c
c0006604:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0006608:	83 fd 0f             	cmp    ebp,0xf
c000660b:	0f 8f ba 01 00 00    	jg     c00067cb <iso_read+0x1ce>
c0006611:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c0006615:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c0006619:	83 3c 85 c0 ff 01 c0 00 	cmp    DWORD PTR [eax*4-0x3ffe0040],0x0
c0006621:	0f 84 b0 01 00 00    	je     c00067d7 <iso_read+0x1da>
c0006627:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c000662b:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c000662f:	8b 04 85 50 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdffb0]
c0006636:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000663a:	85 c0                	test   eax,eax
c000663c:	0f 85 a1 01 00 00    	jne    c00067e3 <iso_read+0x1e6>
c0006642:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0006647:	0f 84 71 01 00 00    	je     c00067be <iso_read+0x1c1>
c000664d:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c0006651:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c0006655:	8d 14 85 c0 ff 01 c0 	lea    edx,[eax*4-0x3ffe0040]
c000665c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c000665f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0006662:	29 c2                	sub    edx,eax
c0006664:	89 d1                	mov    ecx,edx
c0006666:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c000666a:	76 04                	jbe    c0006670 <iso_read+0x73>
c000666c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006670:	85 c9                	test   ecx,ecx
c0006672:	0f 84 42 01 00 00    	je     c00067ba <iso_read+0x1bd>
c0006678:	8d 1c ed 00 00 00 00 	lea    ebx,[ebp*8+0x0]
c000667f:	e9 b7 00 00 00       	jmp    c000673b <iso_read+0x13e>
c0006684:	8d 91 ff 07 00 00    	lea    edx,[ecx+0x7ff]
c000668a:	e9 e9 00 00 00       	jmp    c0006778 <iso_read+0x17b>
c000668f:	ba 20 00 00 00       	mov    edx,0x20
c0006694:	e9 e2 00 00 00       	jmp    c000677b <iso_read+0x17e>
c0006699:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000669d:	39 ca                	cmp    edx,ecx
c000669f:	7e 04                	jle    c00066a5 <iso_read+0xa8>
c00066a1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00066a5:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c00066a8:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c00066ac:	c1 e8 0b             	shr    eax,0xb
c00066af:	03 04 95 c0 ff 01 c0 	add    eax,DWORD PTR [edx*4-0x3ffe0040]
c00066b6:	e8 77 fa ff ff       	call   c0006132 <bdread>
c00066bb:	85 c0                	test   eax,eax
c00066bd:	0f 88 2c 01 00 00    	js     c00067ef <iso_read+0x1f2>
c00066c3:	8b 14 85 a0 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0560]
c00066ca:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00066cd:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00066d1:	8b 04 85 c8 ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0038]
c00066d8:	25 ff 07 00 00       	and    eax,0x7ff
c00066dd:	8d 74 02 04          	lea    esi,[edx+eax*1+0x4]
c00066e1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00066e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066eb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00066ef:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c00066f3:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00066f6:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00066fa:	8d 14 85 c0 ff 01 c0 	lea    edx,[eax*4-0x3ffe0040]
c0006701:	89 f8                	mov    eax,edi
c0006703:	03 42 08             	add    eax,DWORD PTR [edx+0x8]
c0006706:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006709:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c000670d:	29 7c 24 38          	sub    DWORD PTR [esp+0x38],edi
c0006711:	0f 84 a7 00 00 00    	je     c00067be <iso_read+0x1c1>
c0006717:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c000671a:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c000671e:	8b 14 95 cc ff 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0034]
c0006725:	29 c2                	sub    edx,eax
c0006727:	89 d1                	mov    ecx,edx
c0006729:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c000672d:	76 04                	jbe    c0006733 <iso_read+0x136>
c000672f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006733:	85 c9                	test   ecx,ecx
c0006735:	0f 84 83 00 00 00    	je     c00067be <iso_read+0x1c1>
c000673b:	89 c6                	mov    esi,eax
c000673d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006743:	ba 00 08 00 00       	mov    edx,0x800
c0006748:	29 f2                	sub    edx,esi
c000674a:	81 fa 00 08 00 00    	cmp    edx,0x800
c0006750:	0f 85 43 ff ff ff    	jne    c0006699 <iso_read+0x9c>
c0006756:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000675c:	0f 8e 37 ff ff ff    	jle    c0006699 <iso_read+0x9c>
c0006762:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006768:	0f 8f 21 ff ff ff    	jg     c000668f <iso_read+0x92>
c000676e:	89 ca                	mov    edx,ecx
c0006770:	85 c9                	test   ecx,ecx
c0006772:	0f 88 0c ff ff ff    	js     c0006684 <iso_read+0x87>
c0006778:	c1 fa 0b             	sar    edx,0xb
c000677b:	89 d6                	mov    esi,edx
c000677d:	c1 e6 0b             	shl    esi,0xb
c0006780:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006784:	83 ec 04             	sub    esp,0x4
c0006787:	52                   	push   edx
c0006788:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c000678b:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c000678f:	c1 e8 0b             	shr    eax,0xb
c0006792:	03 04 95 c0 ff 01 c0 	add    eax,DWORD PTR [edx*4-0x3ffe0040]
c0006799:	50                   	push   eax
c000679a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000679e:	e8 c1 f8 ff ff       	call   c0006064 <isoReadDiscSector>
c00067a3:	83 c4 10             	add    esp,0x10
c00067a6:	85 c0                	test   eax,eax
c00067a8:	0f 8f 3d ff ff ff    	jg     c00066eb <iso_read+0xee>
c00067ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067b3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067b8:	eb 09                	jmp    c00067c3 <iso_read+0x1c6>
c00067ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00067be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00067c2:	99                   	cdq    
c00067c3:	83 c4 1c             	add    esp,0x1c
c00067c6:	5b                   	pop    ebx
c00067c7:	5e                   	pop    esi
c00067c8:	5f                   	pop    edi
c00067c9:	5d                   	pop    ebp
c00067ca:	c3                   	ret    
c00067cb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067d0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067d5:	eb ec                	jmp    c00067c3 <iso_read+0x1c6>
c00067d7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067dc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067e1:	eb e0                	jmp    c00067c3 <iso_read+0x1c6>
c00067e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067ed:	eb d4                	jmp    c00067c3 <iso_read+0x1c6>
c00067ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067f4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067f9:	eb c8                	jmp    c00067c3 <iso_read+0x1c6>

c00067fb <iso_seek>:
c00067fb:	53                   	push   ebx
c00067fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006800:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006804:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006808:	83 f8 0f             	cmp    eax,0xf
c000680b:	0f 8f a4 00 00 00    	jg     c00068b5 <iso_seek+0xba>
c0006811:	8d 1c c0             	lea    ebx,[eax+eax*8]
c0006814:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0006817:	83 3c 9d c0 ff 01 c0 00 	cmp    DWORD PTR [ebx*4-0x3ffe0040],0x0
c000681f:	0f 84 9c 00 00 00    	je     c00068c1 <iso_seek+0xc6>
c0006825:	8d 1c c0             	lea    ebx,[eax+eax*8]
c0006828:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000682b:	83 3c 9d 50 00 02 c0 00 	cmp    DWORD PTR [ebx*4-0x3ffdffb0],0x0
c0006833:	0f 85 94 00 00 00    	jne    c00068cd <iso_seek+0xd2>
c0006839:	83 fa 01             	cmp    edx,0x1
c000683c:	74 53                	je     c0006891 <iso_seek+0x96>
c000683e:	83 fa 02             	cmp    edx,0x2
c0006841:	74 5d                	je     c00068a0 <iso_seek+0xa5>
c0006843:	85 d2                	test   edx,edx
c0006845:	74 0c                	je     c0006853 <iso_seek+0x58>
c0006847:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000684c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006851:	eb 3c                	jmp    c000688f <iso_seek+0x94>
c0006853:	89 0c 9d c8 ff 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0038],ecx
c000685a:	8d 14 c0             	lea    edx,[eax+eax*8]
c000685d:	8d 14 90             	lea    edx,[eax+edx*4]
c0006860:	8b 0c 95 cc ff 01 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffe0034]
c0006867:	39 0c 95 c8 ff 01 c0 	cmp    DWORD PTR [edx*4-0x3ffe0038],ecx
c000686e:	76 0d                	jbe    c000687d <iso_seek+0x82>
c0006870:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006873:	8d 14 90             	lea    edx,[eax+edx*4]
c0006876:	89 0c 95 c8 ff 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0038],ecx
c000687d:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006880:	8d 04 90             	lea    eax,[eax+edx*4]
c0006883:	8b 04 85 c8 ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0038]
c000688a:	ba 00 00 00 00       	mov    edx,0x0
c000688f:	5b                   	pop    ebx
c0006890:	c3                   	ret    
c0006891:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006894:	8d 14 90             	lea    edx,[eax+edx*4]
c0006897:	01 0c 95 c8 ff 01 c0 	add    DWORD PTR [edx*4-0x3ffe0038],ecx
c000689e:	eb ba                	jmp    c000685a <iso_seek+0x5f>
c00068a0:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068a3:	8d 14 90             	lea    edx,[eax+edx*4]
c00068a6:	8d 14 95 c0 ff 01 c0 	lea    edx,[edx*4-0x3ffe0040]
c00068ad:	03 4a 0c             	add    ecx,DWORD PTR [edx+0xc]
c00068b0:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068b3:	eb a5                	jmp    c000685a <iso_seek+0x5f>
c00068b5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068ba:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068bf:	eb ce                	jmp    c000688f <iso_seek+0x94>
c00068c1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068c6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068cb:	eb c2                	jmp    c000688f <iso_seek+0x94>
c00068cd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068d2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068d7:	eb b6                	jmp    c000688f <iso_seek+0x94>

c00068d9 <iso_tell>:
c00068d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00068dd:	83 f8 0f             	cmp    eax,0xf
c00068e0:	7f 33                	jg     c0006915 <iso_tell+0x3c>
c00068e2:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068e5:	8d 14 90             	lea    edx,[eax+edx*4]
c00068e8:	83 3c 95 c0 ff 01 c0 00 	cmp    DWORD PTR [edx*4-0x3ffe0040],0x0
c00068f0:	74 2e                	je     c0006920 <iso_tell+0x47>
c00068f2:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068f5:	8d 14 90             	lea    edx,[eax+edx*4]
c00068f8:	83 3c 95 50 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdffb0],0x0
c0006900:	75 29                	jne    c000692b <iso_tell+0x52>
c0006902:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006905:	8d 04 90             	lea    eax,[eax+edx*4]
c0006908:	8b 04 85 c8 ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0038]
c000690f:	ba 00 00 00 00       	mov    edx,0x0
c0006914:	c3                   	ret    
c0006915:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000691a:	ba ff ff ff ff       	mov    edx,0xffffffff
c000691f:	c3                   	ret    
c0006920:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006925:	ba ff ff ff ff       	mov    edx,0xffffffff
c000692a:	c3                   	ret    
c000692b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006930:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006935:	c3                   	ret    

c0006936 <iso_total>:
c0006936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000693a:	83 f8 0f             	cmp    eax,0xf
c000693d:	7f 2e                	jg     c000696d <iso_total+0x37>
c000693f:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006942:	8d 14 90             	lea    edx,[eax+edx*4]
c0006945:	83 3c 95 c0 ff 01 c0 00 	cmp    DWORD PTR [edx*4-0x3ffe0040],0x0
c000694d:	74 24                	je     c0006973 <iso_total+0x3d>
c000694f:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006952:	8d 14 90             	lea    edx,[eax+edx*4]
c0006955:	83 3c 95 50 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdffb0],0x0
c000695d:	75 1a                	jne    c0006979 <iso_total+0x43>
c000695f:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006962:	8d 04 90             	lea    eax,[eax+edx*4]
c0006965:	8b 04 85 cc ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0034]
c000696c:	c3                   	ret    
c000696d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006972:	c3                   	ret    
c0006973:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006978:	c3                   	ret    
c0006979:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000697e:	c3                   	ret    

c000697f <fn_postprocess>:
c000697f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006983:	8a 01                	mov    al,BYTE PTR [ecx]
c0006985:	84 c0                	test   al,al
c0006987:	74 25                	je     c00069ae <fn_postprocess+0x2f>
c0006989:	3c 3b                	cmp    al,0x3b
c000698b:	74 21                	je     c00069ae <fn_postprocess+0x2f>
c000698d:	89 c8                	mov    eax,ecx
c000698f:	40                   	inc    eax
c0006990:	8a 10                	mov    dl,BYTE PTR [eax]
c0006992:	84 d2                	test   dl,dl
c0006994:	74 05                	je     c000699b <fn_postprocess+0x1c>
c0006996:	80 fa 3b             	cmp    dl,0x3b
c0006999:	75 f4                	jne    c000698f <fn_postprocess+0x10>
c000699b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000699e:	39 c1                	cmp    ecx,eax
c00069a0:	73 06                	jae    c00069a8 <fn_postprocess+0x29>
c00069a2:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069a6:	74 01                	je     c00069a9 <fn_postprocess+0x2a>
c00069a8:	c3                   	ret    
c00069a9:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ad:	c3                   	ret    
c00069ae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00069b1:	eb f5                	jmp    c00069a8 <fn_postprocess+0x29>

c00069b3 <iso_readdir>:
c00069b3:	55                   	push   ebp
c00069b4:	57                   	push   edi
c00069b5:	56                   	push   esi
c00069b6:	53                   	push   ebx
c00069b7:	83 ec 1c             	sub    esp,0x1c
c00069ba:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00069be:	83 fe 0f             	cmp    esi,0xf
c00069c1:	0f 8f 7a 02 00 00    	jg     c0006c41 <iso_readdir+0x28e>
c00069c7:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069ca:	8d 04 86             	lea    eax,[esi+eax*4]
c00069cd:	83 3c 85 c0 ff 01 c0 00 	cmp    DWORD PTR [eax*4-0x3ffe0040],0x0
c00069d5:	0f 84 70 02 00 00    	je     c0006c4b <iso_readdir+0x298>
c00069db:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069de:	8d 04 86             	lea    eax,[esi+eax*4]
c00069e1:	83 3c 85 c4 ff 01 c0 00 	cmp    DWORD PTR [eax*4-0x3ffe003c],0x0
c00069e9:	0f 84 66 02 00 00    	je     c0006c55 <iso_readdir+0x2a2>
c00069ef:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069f2:	8d 04 86             	lea    eax,[esi+eax*4]
c00069f5:	83 3c 85 50 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdffb0],0x0
c00069fd:	0f 85 5c 02 00 00    	jne    c0006c5f <iso_readdir+0x2ac>
c0006a03:	8d 04 f6             	lea    eax,[esi+esi*8]
c0006a06:	8d 14 86             	lea    edx,[esi+eax*4]
c0006a09:	8b 04 95 c8 ff 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0038]
c0006a10:	8b 0c 95 cc ff 01 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffe0034]
c0006a17:	39 c8                	cmp    eax,ecx
c0006a19:	73 57                	jae    c0006a72 <iso_readdir+0xbf>
c0006a1b:	8d 14 f6             	lea    edx,[esi+esi*8]
c0006a1e:	8d 3c 96             	lea    edi,[esi+edx*4]
c0006a21:	c1 e7 02             	shl    edi,0x2
c0006a24:	c1 e8 0b             	shr    eax,0xb
c0006a27:	03 87 c0 ff 01 c0    	add    eax,DWORD PTR [edi-0x3ffe0040]
c0006a2d:	e8 ed f6 ff ff       	call   c000611f <biread>
c0006a32:	85 c0                	test   eax,eax
c0006a34:	0f 88 2f 02 00 00    	js     c0006c69 <iso_readdir+0x2b6>
c0006a3a:	8b 14 85 00 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0500]
c0006a41:	83 c2 04             	add    edx,0x4
c0006a44:	8b 87 c8 ff 01 c0    	mov    eax,DWORD PTR [edi-0x3ffe0038]
c0006a4a:	89 c3                	mov    ebx,eax
c0006a4c:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0006a52:	01 d3                	add    ebx,edx
c0006a54:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0006a56:	84 c9                	test   cl,cl
c0006a58:	75 22                	jne    c0006a7c <iso_readdir+0xc9>
c0006a5a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0006a5f:	05 00 08 00 00       	add    eax,0x800
c0006a64:	89 87 c8 ff 01 c0    	mov    DWORD PTR [edi-0x3ffe0038],eax
c0006a6a:	3b 87 cc ff 01 c0    	cmp    eax,DWORD PTR [edi-0x3ffe0034]
c0006a70:	72 b2                	jb     c0006a24 <iso_readdir+0x71>
c0006a72:	b8 00 00 00 00       	mov    eax,0x0
c0006a77:	e9 83 00 00 00       	jmp    c0006aff <iso_readdir+0x14c>
c0006a7c:	8d 3c f6             	lea    edi,[esi+esi*8]
c0006a7f:	8d 3c be             	lea    edi,[esi+edi*4]
c0006a82:	3b 04 bd cc ff 01 c0 	cmp    eax,DWORD PTR [edi*4-0x3ffe0034]
c0006a89:	0f 83 e4 01 00 00    	jae    c0006c73 <iso_readdir+0x2c0>
c0006a8f:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006a93:	75 06                	jne    c0006a9b <iso_readdir+0xe8>
c0006a95:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c0006a99:	74 6c                	je     c0006b07 <iso_readdir+0x154>
c0006a9b:	83 3d 34 09 02 c0 00 	cmp    DWORD PTR ds:0xc0020934,0x0
c0006aa2:	0f 84 9d 00 00 00    	je     c0006b45 <iso_readdir+0x192>
c0006aa8:	31 c9                	xor    ecx,ecx
c0006aaa:	8a 4b 20             	mov    cl,BYTE PTR [ebx+0x20]
c0006aad:	8d 53 21             	lea    edx,[ebx+0x21]
c0006ab0:	8d 04 f6             	lea    eax,[esi+esi*8]
c0006ab3:	8d 04 86             	lea    eax,[esi+eax*4]
c0006ab6:	8d 04 85 d8 ff 01 c0 	lea    eax,[eax*4-0x3ffe0028]
c0006abd:	e8 c5 f2 ff ff       	call   c0005d87 <ucs2utfn>
c0006ac2:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006ac6:	0f 85 66 01 00 00    	jne    c0006c32 <iso_readdir+0x27f>
c0006acc:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006acf:	e8 aa f3 ff ff       	call   c0005e7e <iso_733>
c0006ad4:	ba 00 00 00 00       	mov    edx,0x0
c0006ad9:	8d 0c f6             	lea    ecx,[esi+esi*8]
c0006adc:	c1 e1 02             	shl    ecx,0x2
c0006adf:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0006ae2:	8d 3c bd c0 ff 01 c0 	lea    edi,[edi*4-0x3ffe0040]
c0006ae9:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0006aec:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c0006aef:	31 c0                	xor    eax,eax
c0006af1:	8a 03                	mov    al,BYTE PTR [ebx]
c0006af3:	01 47 08             	add    DWORD PTR [edi+0x8],eax
c0006af6:	01 ce                	add    esi,ecx
c0006af8:	8d 04 b5 d0 ff 01 c0 	lea    eax,[esi*4-0x3ffe0030]
c0006aff:	83 c4 1c             	add    esp,0x1c
c0006b02:	5b                   	pop    ebx
c0006b03:	5e                   	pop    esi
c0006b04:	5f                   	pop    edi
c0006b05:	5d                   	pop    ebp
c0006b06:	c3                   	ret    
c0006b07:	81 e1 ff 00 00 00    	and    ecx,0xff
c0006b0d:	01 c8                	add    eax,ecx
c0006b0f:	8d 3c bd c0 ff 01 c0 	lea    edi,[edi*4-0x3ffe0040]
c0006b16:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0006b19:	89 c1                	mov    ecx,eax
c0006b1b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006b21:	31 db                	xor    ebx,ebx
c0006b23:	8a 1c 0a             	mov    bl,BYTE PTR [edx+ecx*1]
c0006b26:	89 d9                	mov    ecx,ebx
c0006b28:	01 c8                	add    eax,ecx
c0006b2a:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0006b2d:	25 ff 07 00 00       	and    eax,0x7ff
c0006b32:	8d 1c 02             	lea    ebx,[edx+eax*1]
c0006b35:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006b38:	0f 85 5d ff ff ff    	jne    c0006a9b <iso_readdir+0xe8>
c0006b3e:	b8 00 00 00 00       	mov    eax,0x0
c0006b43:	eb ba                	jmp    c0006aff <iso_readdir+0x14c>
c0006b45:	8d 3c f6             	lea    edi,[esi+esi*8]
c0006b48:	c1 e7 02             	shl    edi,0x2
c0006b4b:	8d 04 37             	lea    eax,[edi+esi*1]
c0006b4e:	8d 2c 85 d8 ff 01 c0 	lea    ebp,[eax*4-0x3ffe0028]
c0006b55:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0006b59:	83 ec 04             	sub    esp,0x4
c0006b5c:	31 c0                	xor    eax,eax
c0006b5e:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b61:	50                   	push   eax
c0006b62:	8d 43 21             	lea    eax,[ebx+0x21]
c0006b65:	50                   	push   eax
c0006b66:	55                   	push   ebp
c0006b67:	e8 e4 9a ff ff       	call   c0000650 <strncpy>
c0006b6c:	31 c0                	xor    eax,eax
c0006b6e:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b71:	01 f7                	add    edi,esi
c0006b73:	c6 84 b8 d8 ff 01 c0 00 	mov    BYTE PTR [eax+edi*4-0x3ffe0028],0x0
c0006b7b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b7e:	e8 fc fd ff ff       	call   c000697f <fn_postprocess>
c0006b83:	31 c0                	xor    eax,eax
c0006b85:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b88:	0f b6 2b             	movzx  ebp,BYTE PTR [ebx]
c0006b8b:	81 e5 ff 00 00 00    	and    ebp,0xff
c0006b91:	29 c5                	sub    ebp,eax
c0006b93:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c0006b97:	83 c4 10             	add    esp,0x10
c0006b9a:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006b9e:	74 25                	je     c0006bc5 <iso_readdir+0x212>
c0006ba0:	83 ed 21             	sub    ebp,0x21
c0006ba3:	83 fd 03             	cmp    ebp,0x3
c0006ba6:	0f 8e 16 ff ff ff    	jle    c0006ac2 <iso_readdir+0x10f>
c0006bac:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006baf:	48                   	dec    eax
c0006bb0:	3c 01                	cmp    al,0x1
c0006bb2:	0f 87 0a ff ff ff    	ja     c0006ac2 <iso_readdir+0x10f>
c0006bb8:	8d 04 f5 00 00 00 00 	lea    eax,[esi*8+0x0]
c0006bbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bc3:	eb 23                	jmp    c0006be8 <iso_readdir+0x235>
c0006bc5:	47                   	inc    edi
c0006bc6:	83 ed 22             	sub    ebp,0x22
c0006bc9:	eb d8                	jmp    c0006ba3 <iso_readdir+0x1f0>
c0006bcb:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bcf:	29 c5                	sub    ebp,eax
c0006bd1:	01 c7                	add    edi,eax
c0006bd3:	83 fd 03             	cmp    ebp,0x3
c0006bd6:	0f 8e e6 fe ff ff    	jle    c0006ac2 <iso_readdir+0x10f>
c0006bdc:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006bdf:	48                   	dec    eax
c0006be0:	3c 01                	cmp    al,0x1
c0006be2:	0f 87 da fe ff ff    	ja     c0006ac2 <iso_readdir+0x10f>
c0006be8:	83 ec 04             	sub    esp,0x4
c0006beb:	6a 02                	push   0x2
c0006bed:	68 00 d5 01 c0       	push   0xc001d500
c0006bf2:	57                   	push   edi
c0006bf3:	e8 88 9b ff ff       	call   c0000780 <strncmp>
c0006bf8:	83 c4 10             	add    esp,0x10
c0006bfb:	85 c0                	test   eax,eax
c0006bfd:	75 cc                	jne    c0006bcb <iso_readdir+0x218>
c0006bff:	83 ec 04             	sub    esp,0x4
c0006c02:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006c06:	83 e8 05             	sub    eax,0x5
c0006c09:	50                   	push   eax
c0006c0a:	8d 47 05             	lea    eax,[edi+0x5]
c0006c0d:	50                   	push   eax
c0006c0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0006c12:	e8 39 9a ff ff       	call   c0000650 <strncpy>
c0006c17:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006c1b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006c1f:	8d 14 31             	lea    edx,[ecx+esi*1]
c0006c22:	8d 14 96             	lea    edx,[esi+edx*4]
c0006c25:	c6 84 90 d3 ff 01 c0 00 	mov    BYTE PTR [eax+edx*4-0x3ffe002d],0x0
c0006c2d:	83 c4 10             	add    esp,0x10
c0006c30:	eb 99                	jmp    c0006bcb <iso_readdir+0x218>
c0006c32:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006c37:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006c3c:	e9 98 fe ff ff       	jmp    c0006ad9 <iso_readdir+0x126>
c0006c41:	b8 00 00 00 00       	mov    eax,0x0
c0006c46:	e9 b4 fe ff ff       	jmp    c0006aff <iso_readdir+0x14c>
c0006c4b:	b8 00 00 00 00       	mov    eax,0x0
c0006c50:	e9 aa fe ff ff       	jmp    c0006aff <iso_readdir+0x14c>
c0006c55:	b8 00 00 00 00       	mov    eax,0x0
c0006c5a:	e9 a0 fe ff ff       	jmp    c0006aff <iso_readdir+0x14c>
c0006c5f:	b8 00 00 00 00       	mov    eax,0x0
c0006c64:	e9 96 fe ff ff       	jmp    c0006aff <iso_readdir+0x14c>
c0006c69:	b8 00 00 00 00       	mov    eax,0x0
c0006c6e:	e9 8c fe ff ff       	jmp    c0006aff <iso_readdir+0x14c>
c0006c73:	b8 00 00 00 00       	mov    eax,0x0
c0006c78:	e9 82 fe ff ff       	jmp    c0006aff <iso_readdir+0x14c>

c0006c7d <iso_reset>:
c0006c7d:	e8 50 f2 ff ff       	call   c0005ed2 <iso_break_all>
c0006c82:	e8 45 f2 ff ff       	call   c0005ecc <bclear>
c0006c87:	b8 00 00 00 00       	mov    eax,0x0
c0006c8c:	c3                   	ret    

c0006c8d <init_percd>:
c0006c8d:	57                   	push   edi
c0006c8e:	56                   	push   esi
c0006c8f:	53                   	push   ebx
c0006c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c94:	a2 e0 fa 01 c0       	mov    ds:0xc001fae0,al
c0006c99:	e8 df ff ff ff       	call   c0006c7d <iso_reset>
c0006c9e:	c7 05 34 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020934,0x0
c0006ca8:	bb 01 00 00 00       	mov    ebx,0x1
c0006cad:	eb 06                	jmp    c0006cb5 <init_percd+0x28>
c0006caf:	43                   	inc    ebx
c0006cb0:	83 fb 04             	cmp    ebx,0x4
c0006cb3:	74 53                	je     c0006d08 <init_percd+0x7b>
c0006cb5:	a1 2c 09 02 c0       	mov    eax,ds:0xc002092c
c0006cba:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006cbe:	e8 5c f4 ff ff       	call   c000611f <biread>
c0006cc3:	89 c6                	mov    esi,eax
c0006cc5:	85 c0                	test   eax,eax
c0006cc7:	0f 88 c1 00 00 00    	js     c0006d8e <init_percd+0x101>
c0006ccd:	83 ec 04             	sub    esp,0x4
c0006cd0:	6a 06                	push   0x6
c0006cd2:	68 03 d5 01 c0       	push   0xc001d503
c0006cd7:	8b 04 85 00 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0500]
c0006cde:	83 c0 04             	add    eax,0x4
c0006ce1:	50                   	push   eax
c0006ce2:	e8 c9 96 ff ff       	call   c00003b0 <memcmp>
c0006ce7:	83 c4 10             	add    esp,0x10
c0006cea:	85 c0                	test   eax,eax
c0006cec:	75 c1                	jne    c0006caf <init_percd+0x22>
c0006cee:	8b 04 b5 00 fb 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0500]
c0006cf5:	83 c0 5c             	add    eax,0x5c
c0006cf8:	e8 23 f1 ff ff       	call   c0005e20 <isjoliet>
c0006cfd:	a3 34 09 02 c0       	mov    ds:0xc0020934,eax
c0006d02:	85 c0                	test   eax,eax
c0006d04:	74 a9                	je     c0006caf <init_percd+0x22>
c0006d06:	eb 09                	jmp    c0006d11 <init_percd+0x84>
c0006d08:	83 3d 34 09 02 c0 00 	cmp    DWORD PTR ds:0xc0020934,0x0
c0006d0f:	74 42                	je     c0006d53 <init_percd+0xc6>
c0006d11:	8b 34 b5 00 fb 01 c0 	mov    esi,DWORD PTR [esi*4-0x3ffe0500]
c0006d18:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d1e:	bf 00 09 02 c0       	mov    edi,0xc0020900
c0006d23:	b9 22 00 00 00       	mov    ecx,0x22
c0006d28:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d2a:	b8 02 09 02 c0       	mov    eax,0xc0020902
c0006d2f:	e8 4a f1 ff ff       	call   c0005e7e <iso_733>
c0006d34:	a3 28 09 02 c0       	mov    ds:0xc0020928,eax
c0006d39:	b8 0a 09 02 c0       	mov    eax,0xc002090a
c0006d3e:	e8 3b f1 ff ff       	call   c0005e7e <iso_733>
c0006d43:	a3 24 09 02 c0       	mov    ds:0xc0020924,eax
c0006d48:	bb 00 00 00 00       	mov    ebx,0x0
c0006d4d:	89 d8                	mov    eax,ebx
c0006d4f:	5b                   	pop    ebx
c0006d50:	5e                   	pop    esi
c0006d51:	5f                   	pop    edi
c0006d52:	c3                   	ret    
c0006d53:	a1 2c 09 02 c0       	mov    eax,ds:0xc002092c
c0006d58:	83 c0 10             	add    eax,0x10
c0006d5b:	e8 bf f3 ff ff       	call   c000611f <biread>
c0006d60:	89 c6                	mov    esi,eax
c0006d62:	85 c0                	test   eax,eax
c0006d64:	78 e7                	js     c0006d4d <init_percd+0xc0>
c0006d66:	83 ec 04             	sub    esp,0x4
c0006d69:	6a 06                	push   0x6
c0006d6b:	68 0a d5 01 c0       	push   0xc001d50a
c0006d70:	8b 04 85 00 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0500]
c0006d77:	83 c0 04             	add    eax,0x4
c0006d7a:	50                   	push   eax
c0006d7b:	e8 30 96 ff ff       	call   c00003b0 <memcmp>
c0006d80:	83 c4 10             	add    esp,0x10
c0006d83:	85 c0                	test   eax,eax
c0006d85:	74 8a                	je     c0006d11 <init_percd+0x84>
c0006d87:	bb ff ff ff ff       	mov    ebx,0xffffffff
c0006d8c:	eb bf                	jmp    c0006d4d <init_percd+0xc0>
c0006d8e:	89 c3                	mov    ebx,eax
c0006d90:	eb bb                	jmp    c0006d4d <init_percd+0xc0>

c0006d92 <iso_ioctl>:
c0006d92:	e8 e6 fe ff ff       	call   c0006c7d <iso_reset>
c0006d97:	b8 00 00 00 00       	mov    eax,0x0
c0006d9c:	c3                   	ret    

c0006d9d <fs_iso9660_init>:
c0006d9d:	53                   	push   ebx
c0006d9e:	83 ec 0c             	sub    esp,0xc
c0006da1:	68 40 09 00 00       	push   0x940
c0006da6:	6a 00                	push   0x0
c0006da8:	68 c0 ff 01 c0       	push   0xc001ffc0
c0006dad:	e8 3e 97 ff ff       	call   c00004f0 <memset>
c0006db2:	c7 05 c0 ff 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001ffc0,0xffffffff
c0006dbc:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006dc3:	e8 89 10 00 00       	call   c0007e51 <malloc>
c0006dc8:	a3 30 09 02 c0       	mov    ds:0xc0020930,eax
c0006dcd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006dd4:	e8 78 10 00 00       	call   c0007e51 <malloc>
c0006dd9:	a3 a0 ff 01 c0       	mov    ds:0xc001ffa0,eax
c0006dde:	83 c4 10             	add    esp,0x10
c0006de1:	bb 00 00 00 00       	mov    ebx,0x0
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	68 04 08 00 00       	push   0x804
c0006dee:	e8 5e 10 00 00       	call   c0007e51 <malloc>
c0006df3:	89 04 9d 00 fb 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0500],eax
c0006dfa:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006e00:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006e07:	e8 45 10 00 00       	call   c0007e51 <malloc>
c0006e0c:	89 04 9d a0 fa 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0560],eax
c0006e13:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006e19:	43                   	inc    ebx
c0006e1a:	83 c4 10             	add    esp,0x10
c0006e1d:	83 fb 10             	cmp    ebx,0x10
c0006e20:	75 c4                	jne    c0006de6 <fs_iso9660_init+0x49>
c0006e22:	b8 00 00 00 00       	mov    eax,0x0
c0006e27:	83 c4 08             	add    esp,0x8
c0006e2a:	5b                   	pop    ebx
c0006e2b:	c3                   	ret    

c0006e2c <fs_iso9660_shutdown>:
c0006e2c:	53                   	push   ebx
c0006e2d:	83 ec 08             	sub    esp,0x8
c0006e30:	bb 00 00 00 00       	mov    ebx,0x0
c0006e35:	83 ec 0c             	sub    esp,0xc
c0006e38:	ff 34 9d 00 fb 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0500]
c0006e3f:	e8 1d 10 00 00       	call   c0007e61 <free>
c0006e44:	83 c4 04             	add    esp,0x4
c0006e47:	ff 34 9d a0 fa 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0560]
c0006e4e:	e8 0e 10 00 00       	call   c0007e61 <free>
c0006e53:	43                   	inc    ebx
c0006e54:	83 c4 10             	add    esp,0x10
c0006e57:	83 fb 10             	cmp    ebx,0x10
c0006e5a:	75 d9                	jne    c0006e35 <fs_iso9660_shutdown+0x9>
c0006e5c:	a1 30 09 02 c0       	mov    eax,ds:0xc0020930
c0006e61:	85 c0                	test   eax,eax
c0006e63:	74 0c                	je     c0006e71 <fs_iso9660_shutdown+0x45>
c0006e65:	83 ec 0c             	sub    esp,0xc
c0006e68:	50                   	push   eax
c0006e69:	e8 f3 0f 00 00       	call   c0007e61 <free>
c0006e6e:	83 c4 10             	add    esp,0x10
c0006e71:	a1 a0 ff 01 c0       	mov    eax,ds:0xc001ffa0
c0006e76:	85 c0                	test   eax,eax
c0006e78:	74 0c                	je     c0006e86 <fs_iso9660_shutdown+0x5a>
c0006e7a:	83 ec 0c             	sub    esp,0xc
c0006e7d:	50                   	push   eax
c0006e7e:	e8 de 0f 00 00       	call   c0007e61 <free>
c0006e83:	83 c4 10             	add    esp,0x10
c0006e86:	c7 05 a0 ff 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001ffa0,0x0
c0006e90:	c7 05 30 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020930,0x0
c0006e9a:	b8 00 00 00 00       	mov    eax,0x0
c0006e9f:	83 c4 08             	add    esp,0x8
c0006ea2:	5b                   	pop    ebx
c0006ea3:	c3                   	ret    

c0006ea4 <CPU::current()>:
c0006ea4:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0006ea9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0006eaf:	c3                   	ret    

c0006eb0 <operator new(unsigned long)>:
c0006eb0:	e9 9c 0f 00 00       	jmp    c0007e51 <malloc>

c0006eb5 <operator delete(void*)>:
c0006eb5:	e9 b7 0f 00 00       	jmp    c0007e71 <rfree>

c0006eba <disableIRQs()>:
c0006eba:	fa                   	cli    
c0006ebb:	c3                   	ret    

c0006ebc <enableIRQs()>:
c0006ebc:	fb                   	sti    
c0006ebd:	c3                   	ret    

c0006ebe <lockScheduler()>:
c0006ebe:	fa                   	cli    
c0006ebf:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0006ec5:	c3                   	ret    

c0006ec6 <unlockScheduler()>:
c0006ec6:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0006ecb:	48                   	dec    eax
c0006ecc:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0006ed1:	75 01                	jne    c0006ed4 <unlockScheduler()+0xe>
c0006ed3:	fb                   	sti    
c0006ed4:	c3                   	ret    

c0006ed5 <lockStuff()>:
c0006ed5:	fa                   	cli    
c0006ed6:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0006edc:	ff 05 04 3e 02 c0    	inc    DWORD PTR ds:0xc0023e04
c0006ee2:	c3                   	ret    

c0006ee3 <unlockStuff()>:
c0006ee3:	83 ec 0c             	sub    esp,0xc
c0006ee6:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0006eeb:	48                   	dec    eax
c0006eec:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c0006ef1:	75 18                	jne    c0006f0b <unlockStuff()+0x28>
c0006ef3:	83 3d 00 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e00,0x0
c0006efa:	74 0f                	je     c0006f0b <unlockStuff()+0x28>
c0006efc:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c0006f06:	e8 79 cb 00 00       	call   c0013a84 <schedule()>
c0006f0b:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0006f10:	48                   	dec    eax
c0006f11:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0006f16:	75 01                	jne    c0006f19 <unlockStuff()+0x36>
c0006f18:	fb                   	sti    
c0006f19:	83 c4 0c             	add    esp,0xc
c0006f1c:	c3                   	ret    

c0006f1d <Virt::getAKernelVAS()>:
c0006f1d:	a1 30 0a 02 c0       	mov    eax,ds:0xc0020a30
c0006f22:	c3                   	ret    

c0006f23 <__not_memcpy>:
c0006f23:	57                   	push   edi
c0006f24:	56                   	push   esi
c0006f25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0006f2d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006f31:	89 c7                	mov    edi,eax
c0006f33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006f35:	5e                   	pop    esi
c0006f36:	5f                   	pop    edi
c0006f37:	c3                   	ret    

c0006f38 <Krnl::resolveCompatibilitySymbol(char*)>:
c0006f38:	83 ec 0c             	sub    esp,0xc
c0006f3b:	83 ec 08             	sub    esp,0x8
c0006f3e:	68 11 d5 01 c0       	push   0xc001d511
c0006f43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f47:	e8 b4 97 ff ff       	call   c0000700 <strcmp>
c0006f4c:	83 c4 10             	add    esp,0x10
c0006f4f:	85 c0                	test   eax,eax
c0006f51:	0f 94 c0             	sete   al
c0006f54:	84 c0                	test   al,al
c0006f56:	74 0c                	je     c0006f64 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0006f58:	b8 38 09 02 c0       	mov    eax,0xc0020938
c0006f5d:	e9 ea 00 00 00       	jmp    c000704c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006f62:	66 90                	xchg   ax,ax
c0006f64:	83 ec 08             	sub    esp,0x8
c0006f67:	68 1a d5 01 c0       	push   0xc001d51a
c0006f6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f70:	e8 8b 97 ff ff       	call   c0000700 <strcmp>
c0006f75:	83 c4 10             	add    esp,0x10
c0006f78:	85 c0                	test   eax,eax
c0006f7a:	0f 94 c0             	sete   al
c0006f7d:	84 c0                	test   al,al
c0006f7f:	74 0b                	je     c0006f8c <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0006f81:	b8 b0 c1 01 c0       	mov    eax,0xc001c1b0
c0006f86:	e9 c1 00 00 00       	jmp    c000704c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006f8b:	90                   	nop
c0006f8c:	83 ec 08             	sub    esp,0x8
c0006f8f:	68 24 d5 01 c0       	push   0xc001d524
c0006f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006f98:	e8 63 97 ff ff       	call   c0000700 <strcmp>
c0006f9d:	83 c4 10             	add    esp,0x10
c0006fa0:	85 c0                	test   eax,eax
c0006fa2:	0f 94 c0             	sete   al
c0006fa5:	84 c0                	test   al,al
c0006fa7:	74 0b                	je     c0006fb4 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0006fa9:	b8 e4 be 01 c0       	mov    eax,0xc001bee4
c0006fae:	e9 99 00 00 00       	jmp    c000704c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006fb3:	90                   	nop
c0006fb4:	83 ec 08             	sub    esp,0x8
c0006fb7:	68 2d d5 01 c0       	push   0xc001d52d
c0006fbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fc0:	e8 3b 97 ff ff       	call   c0000700 <strcmp>
c0006fc5:	83 c4 10             	add    esp,0x10
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	0f 94 c0             	sete   al
c0006fcd:	84 c0                	test   al,al
c0006fcf:	74 07                	je     c0006fd8 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c0006fd1:	b8 b0 c2 01 c0       	mov    eax,0xc001c2b0
c0006fd6:	eb 74                	jmp    c000704c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006fd8:	83 ec 08             	sub    esp,0x8
c0006fdb:	68 37 d5 01 c0       	push   0xc001d537
c0006fe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006fe4:	e8 17 97 ff ff       	call   c0000700 <strcmp>
c0006fe9:	83 c4 10             	add    esp,0x10
c0006fec:	85 c0                	test   eax,eax
c0006fee:	0f 94 c0             	sete   al
c0006ff1:	84 c0                	test   al,al
c0006ff3:	74 07                	je     c0006ffc <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c0006ff5:	b8 30 c0 01 c0       	mov    eax,0xc001c030
c0006ffa:	eb 50                	jmp    c000704c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006ffc:	83 ec 08             	sub    esp,0x8
c0006fff:	68 40 d5 01 c0       	push   0xc001d540
c0007004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007008:	e8 f3 96 ff ff       	call   c0000700 <strcmp>
c000700d:	83 c4 10             	add    esp,0x10
c0007010:	85 c0                	test   eax,eax
c0007012:	0f 94 c0             	sete   al
c0007015:	84 c0                	test   al,al
c0007017:	74 07                	je     c0007020 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0007019:	b8 3c 09 02 c0       	mov    eax,0xc002093c
c000701e:	eb 2c                	jmp    c000704c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007020:	83 ec 08             	sub    esp,0x8
c0007023:	68 4d d5 01 c0       	push   0xc001d54d
c0007028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000702c:	e8 cf 96 ff ff       	call   c0000700 <strcmp>
c0007031:	83 c4 10             	add    esp,0x10
c0007034:	85 c0                	test   eax,eax
c0007036:	0f 94 c0             	sete   al
c0007039:	84 c0                	test   al,al
c000703b:	74 07                	je     c0007044 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c000703d:	b8 3d 09 02 c0       	mov    eax,0xc002093d
c0007042:	eb 08                	jmp    c000704c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0007044:	b8 00 00 00 00       	mov    eax,0x0
c0007049:	8d 76 00             	lea    esi,[esi+0x0]
c000704c:	83 c4 0c             	add    esp,0xc
c000704f:	c3                   	ret    

c0007050 <Computer::close(int, int, void*)>:
c0007050:	57                   	push   edi
c0007051:	56                   	push   esi
c0007052:	53                   	push   ebx
c0007053:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007057:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000705b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000705f:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0007065:	83 ec 0c             	sub    esp,0xc
c0007068:	50                   	push   eax
c0007069:	e8 d0 50 00 00       	call   c000c13e <Device::closeAll()>
c000706e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0007074:	83 c4 10             	add    esp,0x10
c0007077:	8b 10                	mov    edx,DWORD PTR [eax]
c0007079:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000707d:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0007085:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007089:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000708d:	5b                   	pop    ebx
c000708e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0007091:	5e                   	pop    esi
c0007092:	5f                   	pop    edi
c0007093:	ff e0                	jmp    eax

c0007095 <Krnl::firstTask()>:
c0007095:	53                   	push   ebx
c0007096:	83 ec 14             	sub    esp,0x14
c0007099:	fb                   	sti    
c000709a:	68 5a d5 01 c0       	push   0xc001d55a
c000709f:	e8 07 0e 00 00       	call   c0007eab <Krnl::setBootMessage(char const*)>
c00070a4:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c00070ab:	e8 a1 0d 00 00       	call   c0007e51 <malloc>
c00070b0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00070b7:	89 c3                	mov    ebx,eax
c00070b9:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00070be:	50                   	push   eax
c00070bf:	68 73 d5 01 c0       	push   0xc001d573
c00070c4:	6a 01                	push   0x1
c00070c6:	53                   	push   ebx
c00070c7:	e8 8c c5 00 00       	call   c0013658 <Process::Process(bool, char const*, Process*, char**)>
c00070cc:	83 c4 20             	add    esp,0x20
c00070cf:	68 ff 00 00 00       	push   0xff
c00070d4:	6a 00                	push   0x0
c00070d6:	68 ab 78 00 c0       	push   0xc00078ab
c00070db:	53                   	push   ebx
c00070dc:	e8 83 c7 00 00       	call   c0013864 <Process::createThread(void (*)(void*), void*, int)>
c00070e1:	8b 15 30 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e30
c00070e7:	6a 7a                	push   0x7a
c00070e9:	6a 00                	push   0x0
c00070eb:	68 b8 42 01 c0       	push   0xc00142b8
c00070f0:	52                   	push   edx
c00070f1:	e8 6e c7 00 00       	call   c0013864 <Process::createThread(void (*)(void*), void*, int)>
c00070f6:	83 c4 14             	add    esp,0x14
c00070f9:	a3 e8 3d 02 c0       	mov    ds:0xc0023de8,eax
c00070fe:	68 70 d6 01 c0       	push   0xc001d670
c0007103:	c6 05 3d 09 02 c0 01 	mov    BYTE PTR ds:0xc002093d,0x1
c000710a:	e8 9c 0d 00 00       	call   c0007eab <Krnl::setBootMessage(char const*)>
c000710f:	e8 83 d5 00 00       	call   c0014697 <Vm::initialise8086()>
c0007114:	e8 69 3e 00 00       	call   c000af82 <Fs::initVFS()>
c0007119:	c7 04 24 80 d5 01 c0 	mov    DWORD PTR [esp],0xc001d580
c0007120:	e8 86 0d 00 00       	call   c0007eab <Krnl::setBootMessage(char const*)>
c0007125:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000712a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007130:	8b 10                	mov    edx,DWORD PTR [eax]
c0007132:	6a 00                	push   0x0
c0007134:	6a 00                	push   0x0
c0007136:	6a 00                	push   0x0
c0007138:	50                   	push   eax
c0007139:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000713c:	83 c4 14             	add    esp,0x14
c000713f:	68 70 d6 01 c0       	push   0xc001d670
c0007144:	e8 62 0d 00 00       	call   c0007eab <Krnl::setBootMessage(char const*)>
c0007149:	e8 9c ad 00 00       	call   c0011eea <Sys::loadSyscalls()>
c000714e:	e8 d3 94 00 00       	call   c0010626 <Krnl::loadSystemEnv()>
c0007153:	e8 98 97 00 00       	call   c00108f0 <Krnl::setupPowerManager()>
c0007158:	83 c4 0c             	add    esp,0xc
c000715b:	6a 3a                	push   0x3a
c000715d:	68 9a d5 01 c0       	push   0xc001d59a
c0007162:	68 a3 d5 01 c0       	push   0xc001d5a3
c0007167:	e8 ae 9c 00 00       	call   c0010e1a <Reg::readIntWithDefault(char*, char*, int)>
c000716c:	89 04 24             	mov    DWORD PTR [esp],eax
c000716f:	e8 1c 49 00 00       	call   c000ba90 <User::loadClockSettings(int)>
c0007174:	c7 04 24 94 d6 01 c0 	mov    DWORD PTR [esp],0xc001d694
c000717b:	e8 2b 0d 00 00       	call   c0007eab <Krnl::setBootMessage(char const*)>
c0007180:	59                   	pop    ecx
c0007181:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0007186:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000718c:	53                   	push   ebx
c000718d:	e8 aa 4f 00 00       	call   c000c13c <Device::loadDriversForAll()>
c0007192:	c7 04 24 ab d5 01 c0 	mov    DWORD PTR [esp],0xc001d5ab
c0007199:	e8 0d 0d 00 00       	call   c0007eab <Krnl::setBootMessage(char const*)>
c000719e:	58                   	pop    eax
c000719f:	8b 1d 38 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020938
c00071a5:	5a                   	pop    edx
c00071a6:	6a 01                	push   0x1
c00071a8:	68 bc d5 01 c0       	push   0xc001d5bc
c00071ad:	e8 e0 be 00 00       	call   c0013092 <Thr::loadDLL(char const*, bool)>
c00071b2:	59                   	pop    ecx
c00071b3:	5a                   	pop    edx
c00071b4:	53                   	push   ebx
c00071b5:	50                   	push   eax
c00071b6:	e8 08 c1 00 00       	call   c00132c3 <Thr::executeDLL(unsigned long, void*)>
c00071bb:	83 c4 10             	add    esp,0x10
c00071be:	83 ec 0c             	sub    esp,0xc
c00071c1:	6a 02                	push   0x2
c00071c3:	e8 b8 ca 00 00       	call   c0013c80 <blockTask(TaskState)>
c00071c8:	83 c4 10             	add    esp,0x10
c00071cb:	eb f1                	jmp    c00071be <Krnl::firstTask()+0x129>
c00071cd:	90                   	nop

c00071ce <Computer::Computer()>:
c00071ce:	83 ec 0c             	sub    esp,0xc
c00071d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071d5:	83 ec 08             	sub    esp,0x8
c00071d8:	68 d8 d5 01 c0       	push   0xc001d5d8
c00071dd:	50                   	push   eax
c00071de:	e8 d5 4f 00 00       	call   c000c1b8 <Device::Device(char const*)>
c00071e3:	83 c4 10             	add    esp,0x10
c00071e6:	ba e0 d6 01 c0       	mov    edx,0xc001d6e0
c00071eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071ef:	89 10                	mov    DWORD PTR [eax],edx
c00071f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f5:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00071ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007203:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000720d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007211:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0007217:	83 ca 04             	or     edx,0x4
c000721a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0007220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007224:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000722a:	31 d2                	xor    edx,edx
c000722c:	88 c2                	mov    dl,al
c000722e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007232:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0007239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000723d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0007243:	31 d2                	xor    edx,edx
c0007245:	88 c2                	mov    dl,al
c0007247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000724b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0007250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007254:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000725a:	8d 50 01             	lea    edx,[eax+0x1]
c000725d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007261:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0007267:	31 d2                	xor    edx,edx
c0007269:	88 c2                	mov    dl,al
c000726b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000726f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0007273:	83 e1 3f             	and    ecx,0x3f
c0007276:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000727a:	90                   	nop
c000727b:	83 c4 0c             	add    esp,0xc
c000727e:	c3                   	ret    
c000727f:	90                   	nop

c0007280 <Computer::setBootMessage(char const*)>:
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::detectFeatures()>:
c0007282:	55                   	push   ebp
c0007283:	57                   	push   edi
c0007284:	56                   	push   esi
c0007285:	53                   	push   ebx
c0007286:	83 ec 1c             	sub    esp,0x1c
c0007289:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000728d:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0007297:	e8 7d 8f ff ff       	call   c0000219 <detectCPUID>
c000729c:	85 c0                	test   eax,eax
c000729e:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00072a4:	0f 95 c2             	setne  dl
c00072a7:	83 e0 fd             	and    eax,0xfffffffd
c00072aa:	01 d2                	add    edx,edx
c00072ac:	09 d0                	or     eax,edx
c00072ae:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00072b4:	a8 02                	test   al,0x2
c00072b6:	75 46                	jne    c00072fe <Computer::detectFeatures()+0x7c>
c00072b8:	f6 05 51 09 02 c0 04 	test   BYTE PTR ds:0xc0020951,0x4
c00072bf:	74 07                	je     c00072c8 <Computer::detectFeatures()+0x46>
c00072c1:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c00072c8:	e8 a9 4b 01 00       	call   c001be76 <x87Detect>
c00072cd:	83 e0 01             	and    eax,0x1
c00072d0:	c1 e0 04             	shl    eax,0x4
c00072d3:	88 c2                	mov    dl,al
c00072d5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00072db:	83 e0 ef             	and    eax,0xffffffef
c00072de:	09 d0                	or     eax,edx
c00072e0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00072e6:	a8 10                	test   al,0x10
c00072e8:	0f 85 2a 01 00 00    	jne    c0007418 <Computer::detectFeatures()+0x196>
c00072ee:	84 c0                	test   al,al
c00072f0:	0f 88 45 01 00 00    	js     c000743b <Computer::detectFeatures()+0x1b9>
c00072f6:	83 c4 1c             	add    esp,0x1c
c00072f9:	5b                   	pop    ebx
c00072fa:	5e                   	pop    esi
c00072fb:	5f                   	pop    edi
c00072fc:	5d                   	pop    ebp
c00072fd:	c3                   	ret    
c00072fe:	83 ec 0c             	sub    esp,0xc
c0007301:	6a 20                	push   0x20
c0007303:	e8 40 84 00 00       	call   c000f748 <CPU::cpuidCheckEDX(unsigned int)>
c0007308:	83 e0 01             	and    eax,0x1
c000730b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0007312:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007318:	83 e0 f7             	and    eax,0xfffffff7
c000731b:	09 d0                	or     eax,edx
c000731d:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007323:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000732a:	e8 19 84 00 00       	call   c000f748 <CPU::cpuidCheckEDX(unsigned int)>
c000732f:	83 e0 01             	and    eax,0x1
c0007332:	88 c2                	mov    dl,al
c0007334:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000733a:	83 e0 fe             	and    eax,0xfffffffe
c000733d:	09 d0                	or     eax,edx
c000733f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007345:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000734c:	e8 f7 83 00 00       	call   c000f748 <CPU::cpuidCheckEDX(unsigned int)>
c0007351:	c1 e0 07             	shl    eax,0x7
c0007354:	88 c2                	mov    dl,al
c0007356:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000735c:	83 e0 7f             	and    eax,0x7f
c000735f:	09 d0                	or     eax,edx
c0007361:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007367:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000736e:	e8 d5 83 00 00       	call   c000f748 <CPU::cpuidCheckEDX(unsigned int)>
c0007373:	83 c4 10             	add    esp,0x10
c0007376:	83 e0 01             	and    eax,0x1
c0007379:	c1 e0 05             	shl    eax,0x5
c000737c:	88 c2                	mov    dl,al
c000737e:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007384:	83 e0 df             	and    eax,0xffffffdf
c0007387:	09 d0                	or     eax,edx
c0007389:	f7 05 50 09 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0020950,0x401
c0007393:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007399:	0f 84 c2 00 00 00    	je     c0007461 <Computer::detectFeatures()+0x1df>
c000739f:	83 e0 fe             	and    eax,0xfffffffe
c00073a2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073a8:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00073ae:	88 c2                	mov    dl,al
c00073b0:	83 e2 09             	and    edx,0x9
c00073b3:	fe ca                	dec    dl
c00073b5:	75 09                	jne    c00073c0 <Computer::detectFeatures()+0x13e>
c00073b7:	83 e0 fe             	and    eax,0xfffffffe
c00073ba:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00073c0:	83 ec 0c             	sub    esp,0xc
c00073c3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00073c7:	50                   	push   eax
c00073c8:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c00073cc:	55                   	push   ebp
c00073cd:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00073d1:	57                   	push   edi
c00073d2:	8d 74 24 18          	lea    esi,[esp+0x18]
c00073d6:	56                   	push   esi
c00073d7:	68 00 00 00 80       	push   0x80000000
c00073dc:	e8 e3 82 00 00       	call   c000f6c4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00073e1:	83 c4 20             	add    esp,0x20
c00073e4:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c00073eb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00073ef:	0f 86 c3 fe ff ff    	jbe    c00072b8 <Computer::detectFeatures()+0x36>
c00073f5:	83 ec 0c             	sub    esp,0xc
c00073f8:	50                   	push   eax
c00073f9:	55                   	push   ebp
c00073fa:	57                   	push   edi
c00073fb:	56                   	push   esi
c00073fc:	68 01 00 00 80       	push   0x80000001
c0007401:	e8 be 82 00 00       	call   c000f6c4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007406:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0007410:	83 c4 20             	add    esp,0x20
c0007413:	e9 a0 fe ff ff       	jmp    c00072b8 <Computer::detectFeatures()+0x36>
c0007418:	e8 13 4a 01 00       	call   c001be30 <absolutelyNoChanceInHell>
c000741d:	88 c2                	mov    dl,al
c000741f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007425:	c1 e2 07             	shl    edx,0x7
c0007428:	83 e0 7f             	and    eax,0x7f
c000742b:	09 d0                	or     eax,edx
c000742d:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007433:	84 c0                	test   al,al
c0007435:	0f 89 bb fe ff ff    	jns    c00072f6 <Computer::detectFeatures()+0x74>
c000743b:	e8 70 47 01 00       	call   c001bbb0 <avxDetect>
c0007440:	83 e0 01             	and    eax,0x1
c0007443:	c1 e0 05             	shl    eax,0x5
c0007446:	88 c2                	mov    dl,al
c0007448:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000744e:	83 e0 df             	and    eax,0xffffffdf
c0007451:	09 d0                	or     eax,edx
c0007453:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007459:	83 c4 1c             	add    esp,0x1c
c000745c:	5b                   	pop    ebx
c000745d:	5e                   	pop    esi
c000745e:	5f                   	pop    edi
c000745f:	5d                   	pop    ebp
c0007460:	c3                   	ret    
c0007461:	83 ec 0c             	sub    esp,0xc
c0007464:	68 00 02 00 00       	push   0x200
c0007469:	e8 da 82 00 00       	call   c000f748 <CPU::cpuidCheckEDX(unsigned int)>
c000746e:	83 c4 10             	add    esp,0x10
c0007471:	83 e0 01             	and    eax,0x1
c0007474:	88 c2                	mov    dl,al
c0007476:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000747c:	83 e0 fe             	and    eax,0xfffffffe
c000747f:	09 d0                	or     eax,edx
c0007481:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007487:	e9 1c ff ff ff       	jmp    c00073a8 <Computer::detectFeatures()+0x126>

c000748c <Computer::displayFeatures()>:
c000748c:	c3                   	ret    
c000748d:	90                   	nop

c000748e <Computer::rdmsr(unsigned int)>:
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007495:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000749c:	74 0a                	je     c00074a8 <Computer::rdmsr(unsigned int)+0x1a>
c000749e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00074a2:	0f 32                	rdmsr  
c00074a4:	83 c4 0c             	add    esp,0xc
c00074a7:	c3                   	ret    
c00074a8:	83 ec 0c             	sub    esp,0xc
c00074ab:	68 e1 d5 01 c0       	push   0xc001d5e1
c00074b0:	e8 7a 92 00 00       	call   c001072f <Krnl::panic(char const*)>
c00074b5:	83 c4 10             	add    esp,0x10
c00074b8:	eb e4                	jmp    c000749e <Computer::rdmsr(unsigned int)+0x10>

c00074ba <Computer::wrmsr(unsigned int, unsigned long long)>:
c00074ba:	57                   	push   edi
c00074bb:	56                   	push   esi
c00074bc:	52                   	push   edx
c00074bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074c1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00074c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00074c9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00074d0:	74 0e                	je     c00074e0 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00074d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00074d6:	89 f0                	mov    eax,esi
c00074d8:	89 fa                	mov    edx,edi
c00074da:	0f 30                	wrmsr  
c00074dc:	58                   	pop    eax
c00074dd:	5e                   	pop    esi
c00074de:	5f                   	pop    edi
c00074df:	c3                   	ret    
c00074e0:	83 ec 0c             	sub    esp,0xc
c00074e3:	68 e7 d5 01 c0       	push   0xc001d5e7
c00074e8:	e8 42 92 00 00       	call   c001072f <Krnl::panic(char const*)>
c00074ed:	83 c4 10             	add    esp,0x10
c00074f0:	eb e0                	jmp    c00074d2 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00074f2 <Computer::shutdown()>:
c00074f2:	83 ec 0c             	sub    esp,0xc
c00074f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074f9:	8b 10                	mov    edx,DWORD PTR [eax]
c00074fb:	6a 00                	push   0x0
c00074fd:	6a 00                	push   0x0
c00074ff:	6a 00                	push   0x0
c0007501:	50                   	push   eax
c0007502:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007505:	83 c4 1c             	add    esp,0x1c
c0007508:	c3                   	ret    
c0007509:	90                   	nop

c000750a <Computer::restart()>:
c000750a:	83 ec 0c             	sub    esp,0xc
c000750d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007511:	8b 10                	mov    edx,DWORD PTR [eax]
c0007513:	6a 00                	push   0x0
c0007515:	6a 00                	push   0x0
c0007517:	6a 01                	push   0x1
c0007519:	50                   	push   eax
c000751a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000751d:	83 c4 1c             	add    esp,0x1c
c0007520:	c3                   	ret    
c0007521:	90                   	nop

c0007522 <Computer::sleep()>:
c0007522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007526:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000752c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007530:	e9 8b 7c 00 00       	jmp    c000f1c0 <ACPI::sleep()>
c0007535:	90                   	nop

c0007536 <Computer::nmiEnabled()>:
c0007536:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000753a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007540:	c3                   	ret    
c0007541:	90                   	nop

c0007542 <Computer::readCMOS(unsigned char)>:
c0007542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007546:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000754d:	19 c0                	sbb    eax,eax
c000754f:	83 e0 80             	and    eax,0xffffff80
c0007552:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0007556:	e6 70                	out    0x70,al
c0007558:	e4 71                	in     al,0x71
c000755a:	c3                   	ret    
c000755b:	90                   	nop

c000755c <Computer::enableNMI(bool)>:
c000755c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007564:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000756a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0007572:	eb ce                	jmp    c0007542 <Computer::readCMOS(unsigned char)>

c0007574 <Computer::open(int, int, void*)>:
c0007574:	56                   	push   esi
c0007575:	53                   	push   ebx
c0007576:	83 ec 10             	sub    esp,0x10
c0007579:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000757d:	f6 05 50 09 02 c0 04 	test   BYTE PTR ds:0xc0020950,0x4
c0007584:	68 ed d5 01 c0       	push   0xc001d5ed
c0007589:	0f 94 05 20 f8 01 c0 	sete   BYTE PTR ds:0xc001f820
c0007590:	e8 16 09 00 00       	call   c0007eab <Krnl::setBootMessage(char const*)>
c0007595:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000759c:	e8 b0 08 00 00       	call   c0007e51 <malloc>
c00075a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00075a4:	89 c6                	mov    esi,eax
c00075a6:	e8 ad 77 00 00       	call   c000ed58 <ACPI::ACPI()>
c00075ab:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00075b1:	58                   	pop    eax
c00075b2:	5a                   	pop    edx
c00075b3:	56                   	push   esi
c00075b4:	53                   	push   ebx
c00075b5:	e8 66 4a 00 00       	call   c000c020 <Device::addChild(Device*)>
c00075ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00075bd:	e8 c0 fc ff ff       	call   c0007282 <Computer::detectFeatures()>
c00075c2:	59                   	pop    ecx
c00075c3:	5e                   	pop    esi
c00075c4:	6a 01                	push   0x1
c00075c6:	53                   	push   ebx
c00075c7:	e8 90 ff ff ff       	call   c000755c <Computer::enableNMI(bool)>
c00075cc:	c7 04 24 05 d6 01 c0 	mov    DWORD PTR [esp],0xc001d605
c00075d3:	e8 d3 08 00 00       	call   c0007eab <Krnl::setBootMessage(char const*)>
c00075d8:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c00075df:	e8 6d 08 00 00       	call   c0007e51 <malloc>
c00075e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00075e7:	89 c6                	mov    esi,eax
c00075e9:	e8 12 82 00 00       	call   c000f800 <CPU::CPU()>
c00075ee:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00075f4:	58                   	pop    eax
c00075f5:	5a                   	pop    edx
c00075f6:	56                   	push   esi
c00075f7:	53                   	push   ebx
c00075f8:	e8 23 4a 00 00       	call   c000c020 <Device::addChild(Device*)>
c00075fd:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007603:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007607:	8b 10                	mov    edx,DWORD PTR [eax]
c0007609:	51                   	push   ecx
c000760a:	6a 00                	push   0x0
c000760c:	6a 00                	push   0x0
c000760e:	50                   	push   eax
c000760f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007612:	83 c4 14             	add    esp,0x14
c0007615:	68 b4 d6 01 c0       	push   0xc001d6b4
c000761a:	e8 8c 08 00 00       	call   c0007eab <Krnl::setBootMessage(char const*)>
c000761f:	e8 34 e1 00 00       	call   c0015758 <HalInitialiseCoprocessor()>
c0007624:	c7 04 24 1f d6 01 c0 	mov    DWORD PTR [esp],0xc001d61f
c000762b:	e8 7b 08 00 00       	call   c0007eab <Krnl::setBootMessage(char const*)>
c0007630:	c7 04 24 95 70 00 c0 	mov    DWORD PTR [esp],0xc0007095
c0007637:	e8 40 c3 00 00       	call   c001397c <setupMultitasking(void (*)())>
c000763c:	83 c4 14             	add    esp,0x14
c000763f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007644:	5b                   	pop    ebx
c0007645:	5e                   	pop    esi
c0007646:	c3                   	ret    
c0007647:	90                   	nop

c0007648 <Computer::disableNMI()>:
c0007648:	6a 00                	push   0x0
c000764a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000764e:	50                   	push   eax
c000764f:	e8 08 ff ff ff       	call   c000755c <Computer::enableNMI(bool)>
c0007654:	5a                   	pop    edx
c0007655:	59                   	pop    ecx
c0007656:	c3                   	ret    
c0007657:	90                   	nop

c0007658 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007658:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000765c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007663:	19 c0                	sbb    eax,eax
c0007665:	83 e0 80             	and    eax,0xffffff80
c0007668:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000766c:	e6 70                	out    0x70,al
c000766e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007672:	e6 71                	out    0x71,al
c0007674:	c3                   	ret    
c0007675:	90                   	nop

c0007676 <Computer::handleNMI()>:
c0007676:	56                   	push   esi
c0007677:	53                   	push   ebx
c0007678:	83 ec 10             	sub    esp,0x10
c000767b:	e4 92                	in     al,0x92
c000767d:	89 c6                	mov    esi,eax
c000767f:	e4 61                	in     al,0x61
c0007681:	68 3a d6 01 c0       	push   0xc001d63a
c0007686:	88 c3                	mov    bl,al
c0007688:	e8 53 35 00 00       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c000768d:	83 c4 10             	add    esp,0x10
c0007690:	83 e6 10             	and    esi,0x10
c0007693:	75 0d                	jne    c00076a2 <Computer::handleNMI()+0x2c>
c0007695:	f6 c3 40             	test   bl,0x40
c0007698:	75 1d                	jne    c00076b7 <Computer::handleNMI()+0x41>
c000769a:	84 db                	test   bl,bl
c000769c:	78 2d                	js     c00076cb <Computer::handleNMI()+0x55>
c000769e:	58                   	pop    eax
c000769f:	5b                   	pop    ebx
c00076a0:	5e                   	pop    esi
c00076a1:	c3                   	ret    
c00076a2:	83 ec 0c             	sub    esp,0xc
c00076a5:	68 4b d6 01 c0       	push   0xc001d64b
c00076aa:	e8 80 90 00 00       	call   c001072f <Krnl::panic(char const*)>
c00076af:	83 c4 10             	add    esp,0x10
c00076b2:	f6 c3 40             	test   bl,0x40
c00076b5:	74 e3                	je     c000769a <Computer::handleNMI()+0x24>
c00076b7:	83 ec 0c             	sub    esp,0xc
c00076ba:	68 58 d6 01 c0       	push   0xc001d658
c00076bf:	e8 6b 90 00 00       	call   c001072f <Krnl::panic(char const*)>
c00076c4:	83 c4 10             	add    esp,0x10
c00076c7:	84 db                	test   bl,bl
c00076c9:	79 d3                	jns    c000769e <Computer::handleNMI()+0x28>
c00076cb:	c7 44 24 10 62 d6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d662
c00076d3:	5a                   	pop    edx
c00076d4:	5b                   	pop    ebx
c00076d5:	5e                   	pop    esi
c00076d6:	e9 54 90 00 00       	jmp    c001072f <Krnl::panic(char const*)>
c00076db:	90                   	nop

c00076dc <GDTEntry::setBase(unsigned int)>:
c00076dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076e4:	89 c1                	mov    ecx,eax
c00076e6:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00076ea:	c1 e9 10             	shr    ecx,0x10
c00076ed:	c1 e8 18             	shr    eax,0x18
c00076f0:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00076f3:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00076f6:	c3                   	ret    
c00076f7:	90                   	nop

c00076f8 <GDTEntry::setLimit(unsigned int)>:
c00076f8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00076fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007700:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007703:	66 89 01             	mov    WORD PTR [ecx],ax
c0007706:	83 e2 f0             	and    edx,0xfffffff0
c0007709:	c1 e8 10             	shr    eax,0x10
c000770c:	83 e0 0f             	and    eax,0xf
c000770f:	09 d0                	or     eax,edx
c0007711:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007714:	c3                   	ret    
c0007715:	90                   	nop

c0007716 <GDT::GDT()>:
c0007716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000771a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007724:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000772a:	90                   	nop
c000772b:	c3                   	ret    

c000772c <GDT::addEntry(GDTEntry)>:
c000772c:	53                   	push   ebx
c000772d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007731:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007735:	8b 02                	mov    eax,DWORD PTR [edx]
c0007737:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000773b:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000773f:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007743:	8d 48 01             	lea    ecx,[eax+0x1]
c0007746:	c1 e0 03             	shl    eax,0x3
c0007749:	89 0a                	mov    DWORD PTR [edx],ecx
c000774b:	5b                   	pop    ebx
c000774c:	c3                   	ret    
c000774d:	90                   	nop

c000774e <GDT::getNumberOfEntries()>:
c000774e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007752:	8b 00                	mov    eax,DWORD PTR [eax]
c0007754:	c3                   	ret    
c0007755:	90                   	nop

c0007756 <GDT::flush()>:
c0007756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000775a:	8b 10                	mov    edx,DWORD PTR [eax]
c000775c:	83 c0 04             	add    eax,0x4
c000775f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0007766:	a3 42 09 02 c0       	mov    ds:0xc0020942,eax
c000776b:	66 89 15 40 09 02 c0 	mov    WORD PTR ds:0xc0020940,dx
c0007772:	e9 06 8c ff ff       	jmp    c000037d <loadGDT>
c0007777:	90                   	nop

c0007778 <GDT::setup()>:
c0007778:	57                   	push   edi
c0007779:	56                   	push   esi
c000777a:	53                   	push   ebx
c000777b:	83 ec 30             	sub    esp,0x30
c000777e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007782:	6a 00                	push   0x0
c0007784:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007788:	56                   	push   esi
c0007789:	e8 4e ff ff ff       	call   c00076dc <GDTEntry::setBase(unsigned int)>
c000778e:	6a 00                	push   0x0
c0007790:	56                   	push   esi
c0007791:	e8 62 ff ff ff       	call   c00076f8 <GDTEntry::setLimit(unsigned int)>
c0007796:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000779e:	6a 00                	push   0x0
c00077a0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00077a4:	56                   	push   esi
c00077a5:	e8 32 ff ff ff       	call   c00076dc <GDTEntry::setBase(unsigned int)>
c00077aa:	68 ff ff ff 00       	push   0xffffff
c00077af:	56                   	push   esi
c00077b0:	e8 43 ff ff ff       	call   c00076f8 <GDTEntry::setLimit(unsigned int)>
c00077b5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00077b9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00077bd:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00077c1:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00077c5:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00077ca:	0d 00 9a c0 00       	or     eax,0xc09a00
c00077cf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00077d3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00077d7:	89 f8                	mov    eax,edi
c00077d9:	89 fa                	mov    edx,edi
c00077db:	80 e4 f7             	and    ah,0xf7
c00077de:	80 ce 60             	or     dh,0x60
c00077e1:	89 c7                	mov    edi,eax
c00077e3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00077e7:	80 cc 60             	or     ah,0x60
c00077ea:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00077ee:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00077f2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00077fa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077fe:	83 c4 20             	add    esp,0x20
c0007801:	6a 00                	push   0x0
c0007803:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007807:	50                   	push   eax
c0007808:	e8 cf fe ff ff       	call   c00076dc <GDTEntry::setBase(unsigned int)>
c000780d:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007811:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007815:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000781a:	6a 00                	push   0x0
c000781c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007820:	50                   	push   eax
c0007821:	e8 b6 fe ff ff       	call   c00076dc <GDTEntry::setBase(unsigned int)>
c0007826:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000782b:	83 c4 0c             	add    esp,0xc
c000782e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007832:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007836:	53                   	push   ebx
c0007837:	e8 f0 fe ff ff       	call   c000772c <GDT::addEntry(GDTEntry)>
c000783c:	83 c4 0c             	add    esp,0xc
c000783f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007843:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007847:	53                   	push   ebx
c0007848:	e8 df fe ff ff       	call   c000772c <GDT::addEntry(GDTEntry)>
c000784d:	83 c4 0c             	add    esp,0xc
c0007850:	57                   	push   edi
c0007851:	56                   	push   esi
c0007852:	53                   	push   ebx
c0007853:	e8 d4 fe ff ff       	call   c000772c <GDT::addEntry(GDTEntry)>
c0007858:	83 c4 0c             	add    esp,0xc
c000785b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000785f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007863:	53                   	push   ebx
c0007864:	e8 c3 fe ff ff       	call   c000772c <GDT::addEntry(GDTEntry)>
c0007869:	83 c4 0c             	add    esp,0xc
c000786c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007870:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007874:	53                   	push   ebx
c0007875:	e8 b2 fe ff ff       	call   c000772c <GDT::addEntry(GDTEntry)>
c000787a:	83 c4 0c             	add    esp,0xc
c000787d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007881:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007885:	53                   	push   ebx
c0007886:	e8 a1 fe ff ff       	call   c000772c <GDT::addEntry(GDTEntry)>
c000788b:	83 c4 0c             	add    esp,0xc
c000788e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007892:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007896:	53                   	push   ebx
c0007897:	e8 90 fe ff ff       	call   c000772c <GDT::addEntry(GDTEntry)>
c000789c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000789f:	e8 b2 fe ff ff       	call   c0007756 <GDT::flush()>
c00078a4:	83 c4 40             	add    esp,0x40
c00078a7:	5b                   	pop    ebx
c00078a8:	5e                   	pop    esi
c00078a9:	5f                   	pop    edi
c00078aa:	c3                   	ret    

c00078ab <idleFunction(void*)>:
c00078ab:	83 ec 0c             	sub    esp,0xc
c00078ae:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00078b3:	48                   	dec    eax
c00078b4:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00078b9:	75 01                	jne    c00078bc <idleFunction(void*)+0x11>
c00078bb:	fb                   	sti    
c00078bc:	f4                   	hlt    
c00078bd:	e8 70 4b 01 00       	call   c001c432 <idleCommon()>
c00078c2:	eb f8                	jmp    c00078bc <idleFunction(void*)+0x11>

c00078c4 <IDTEntry::IDTEntry(bool)>:
c00078c4:	83 ec 04             	sub    esp,0x4
c00078c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00078cb:	88 04 24             	mov    BYTE PTR [esp],al
c00078ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078d2:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00078d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078dc:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00078e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078e4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00078e7:	83 e2 f0             	and    edx,0xfffffff0
c00078ea:	83 ca 0e             	or     edx,0xe
c00078ed:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00078f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078f4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00078f7:	83 e2 ef             	and    edx,0xffffffef
c00078fa:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00078fd:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007901:	74 05                	je     c0007908 <IDTEntry::IDTEntry(bool)+0x44>
c0007903:	b2 03                	mov    dl,0x3
c0007905:	eb 05                	jmp    c000790c <IDTEntry::IDTEntry(bool)+0x48>
c0007907:	90                   	nop
c0007908:	b2 00                	mov    dl,0x0
c000790a:	66 90                	xchg   ax,ax
c000790c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007910:	83 e2 03             	and    edx,0x3
c0007913:	88 d1                	mov    cl,dl
c0007915:	c1 e1 05             	shl    ecx,0x5
c0007918:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000791b:	83 e2 9f             	and    edx,0xffffff9f
c000791e:	09 ca                	or     edx,ecx
c0007920:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007923:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007927:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000792a:	83 ca 80             	or     edx,0xffffff80
c000792d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007930:	90                   	nop
c0007931:	83 c4 04             	add    esp,0x4
c0007934:	c3                   	ret    
c0007935:	90                   	nop

c0007936 <IDTEntry::setOffset(unsigned int)>:
c0007936:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000793a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000793e:	66 89 02             	mov    WORD PTR [edx],ax
c0007941:	c1 e8 10             	shr    eax,0x10
c0007944:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0007948:	c3                   	ret    
c0007949:	90                   	nop
c000794a:	66 90                	xchg   ax,ax

c000794c <IDT::IDT()>:
c000794c:	90                   	nop
c000794d:	c3                   	ret    

c000794e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000794e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007952:	83 c0 30             	add    eax,0x30
c0007955:	c3                   	ret    

c0007956 <IDT::addEntry(IDTEntry, int)>:
c0007956:	53                   	push   ebx
c0007957:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000795b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000795f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007963:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007967:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000796a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000796e:	5b                   	pop    ebx
c000796f:	c3                   	ret    

c0007970 <IDT::addEntry(int, void (*)(), bool)>:
c0007970:	53                   	push   ebx
c0007971:	83 ec 10             	sub    esp,0x10
c0007974:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0007979:	50                   	push   eax
c000797a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000797e:	53                   	push   ebx
c000797f:	e8 40 ff ff ff       	call   c00078c4 <IDTEntry::IDTEntry(bool)>
c0007984:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007988:	53                   	push   ebx
c0007989:	e8 a8 ff ff ff       	call   c0007936 <IDTEntry::setOffset(unsigned int)>
c000798e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007992:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007996:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000799a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000799e:	e8 b3 ff ff ff       	call   c0007956 <IDT::addEntry(IDTEntry, int)>
c00079a3:	83 c4 30             	add    esp,0x30
c00079a6:	5b                   	pop    ebx
c00079a7:	c3                   	ret    

c00079a8 <IDT::flush()>:
c00079a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079ac:	66 c7 05 48 09 02 c0 ff 07 	mov    WORD PTR ds:0xc0020948,0x7ff
c00079b5:	a3 4a 09 02 c0       	mov    ds:0xc002094a,eax
c00079ba:	0f 01 1d 48 09 02 c0 	lidtd  ds:0xc0020948
c00079c1:	c3                   	ret    

c00079c2 <IDT::setup()>:
c00079c2:	57                   	push   edi
c00079c3:	56                   	push   esi
c00079c4:	53                   	push   ebx
c00079c5:	83 ec 10             	sub    esp,0x10
c00079c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00079cc:	6a 00                	push   0x0
c00079ce:	68 40 bc 01 c0       	push   0xc001bc40
c00079d3:	6a 00                	push   0x0
c00079d5:	53                   	push   ebx
c00079d6:	e8 95 ff ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c00079db:	6a 00                	push   0x0
c00079dd:	68 50 bc 01 c0       	push   0xc001bc50
c00079e2:	6a 01                	push   0x1
c00079e4:	53                   	push   ebx
c00079e5:	e8 86 ff ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c00079ea:	83 c4 20             	add    esp,0x20
c00079ed:	6a 00                	push   0x0
c00079ef:	68 5a bc 01 c0       	push   0xc001bc5a
c00079f4:	6a 02                	push   0x2
c00079f6:	53                   	push   ebx
c00079f7:	e8 74 ff ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c00079fc:	6a 00                	push   0x0
c00079fe:	68 64 bc 01 c0       	push   0xc001bc64
c0007a03:	6a 03                	push   0x3
c0007a05:	53                   	push   ebx
c0007a06:	e8 65 ff ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007a0b:	83 c4 20             	add    esp,0x20
c0007a0e:	6a 00                	push   0x0
c0007a10:	68 6e bc 01 c0       	push   0xc001bc6e
c0007a15:	6a 04                	push   0x4
c0007a17:	53                   	push   ebx
c0007a18:	e8 53 ff ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007a1d:	6a 00                	push   0x0
c0007a1f:	68 78 bc 01 c0       	push   0xc001bc78
c0007a24:	6a 05                	push   0x5
c0007a26:	53                   	push   ebx
c0007a27:	e8 44 ff ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007a2c:	83 c4 20             	add    esp,0x20
c0007a2f:	6a 00                	push   0x0
c0007a31:	68 82 bc 01 c0       	push   0xc001bc82
c0007a36:	6a 06                	push   0x6
c0007a38:	53                   	push   ebx
c0007a39:	e8 32 ff ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007a3e:	6a 00                	push   0x0
c0007a40:	68 8c bc 01 c0       	push   0xc001bc8c
c0007a45:	6a 07                	push   0x7
c0007a47:	53                   	push   ebx
c0007a48:	e8 23 ff ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007a4d:	83 c4 20             	add    esp,0x20
c0007a50:	6a 00                	push   0x0
c0007a52:	68 96 bc 01 c0       	push   0xc001bc96
c0007a57:	6a 08                	push   0x8
c0007a59:	53                   	push   ebx
c0007a5a:	e8 11 ff ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007a5f:	6a 00                	push   0x0
c0007a61:	68 9e bc 01 c0       	push   0xc001bc9e
c0007a66:	6a 09                	push   0x9
c0007a68:	53                   	push   ebx
c0007a69:	e8 02 ff ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007a6e:	83 c4 20             	add    esp,0x20
c0007a71:	6a 00                	push   0x0
c0007a73:	68 a8 bc 01 c0       	push   0xc001bca8
c0007a78:	6a 0a                	push   0xa
c0007a7a:	53                   	push   ebx
c0007a7b:	e8 f0 fe ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007a80:	6a 00                	push   0x0
c0007a82:	68 b0 bc 01 c0       	push   0xc001bcb0
c0007a87:	6a 0b                	push   0xb
c0007a89:	53                   	push   ebx
c0007a8a:	e8 e1 fe ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007a8f:	83 c4 20             	add    esp,0x20
c0007a92:	6a 00                	push   0x0
c0007a94:	68 b8 bc 01 c0       	push   0xc001bcb8
c0007a99:	6a 0c                	push   0xc
c0007a9b:	53                   	push   ebx
c0007a9c:	e8 cf fe ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007aa1:	6a 00                	push   0x0
c0007aa3:	68 c0 bc 01 c0       	push   0xc001bcc0
c0007aa8:	6a 0d                	push   0xd
c0007aaa:	53                   	push   ebx
c0007aab:	e8 c0 fe ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007ab0:	83 c4 20             	add    esp,0x20
c0007ab3:	6a 00                	push   0x0
c0007ab5:	68 c8 bc 01 c0       	push   0xc001bcc8
c0007aba:	6a 0e                	push   0xe
c0007abc:	53                   	push   ebx
c0007abd:	e8 ae fe ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007ac2:	6a 00                	push   0x0
c0007ac4:	68 d0 bc 01 c0       	push   0xc001bcd0
c0007ac9:	6a 0f                	push   0xf
c0007acb:	53                   	push   ebx
c0007acc:	e8 9f fe ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007ad1:	83 c4 20             	add    esp,0x20
c0007ad4:	6a 00                	push   0x0
c0007ad6:	68 da bc 01 c0       	push   0xc001bcda
c0007adb:	6a 10                	push   0x10
c0007add:	53                   	push   ebx
c0007ade:	e8 8d fe ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007ae3:	6a 00                	push   0x0
c0007ae5:	68 e4 bc 01 c0       	push   0xc001bce4
c0007aea:	6a 11                	push   0x11
c0007aec:	53                   	push   ebx
c0007aed:	e8 7e fe ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007af2:	83 c4 20             	add    esp,0x20
c0007af5:	6a 00                	push   0x0
c0007af7:	68 ee bc 01 c0       	push   0xc001bcee
c0007afc:	6a 12                	push   0x12
c0007afe:	53                   	push   ebx
c0007aff:	e8 6c fe ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007b04:	6a 01                	push   0x1
c0007b06:	68 88 bd 01 c0       	push   0xc001bd88
c0007b0b:	6a 60                	push   0x60
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 5d fe ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007b13:	83 c4 20             	add    esp,0x20
c0007b16:	6a 00                	push   0x0
c0007b18:	68 8f bd 01 c0       	push   0xc001bd8f
c0007b1d:	6a 20                	push   0x20
c0007b1f:	53                   	push   ebx
c0007b20:	e8 4b fe ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007b25:	6a 00                	push   0x0
c0007b27:	68 7a bd 01 c0       	push   0xc001bd7a
c0007b2c:	6a 21                	push   0x21
c0007b2e:	53                   	push   ebx
c0007b2f:	e8 3c fe ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007b34:	83 c4 20             	add    esp,0x20
c0007b37:	6a 00                	push   0x0
c0007b39:	68 81 bd 01 c0       	push   0xc001bd81
c0007b3e:	6a 22                	push   0x22
c0007b40:	53                   	push   ebx
c0007b41:	e8 2a fe ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007b46:	6a 00                	push   0x0
c0007b48:	68 f8 bc 01 c0       	push   0xc001bcf8
c0007b4d:	6a 23                	push   0x23
c0007b4f:	53                   	push   ebx
c0007b50:	e8 1b fe ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	6a 00                	push   0x0
c0007b5a:	68 02 bd 01 c0       	push   0xc001bd02
c0007b5f:	6a 24                	push   0x24
c0007b61:	53                   	push   ebx
c0007b62:	e8 09 fe ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007b67:	6a 00                	push   0x0
c0007b69:	68 0c bd 01 c0       	push   0xc001bd0c
c0007b6e:	6a 25                	push   0x25
c0007b70:	53                   	push   ebx
c0007b71:	e8 fa fd ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007b76:	83 c4 20             	add    esp,0x20
c0007b79:	6a 00                	push   0x0
c0007b7b:	68 16 bd 01 c0       	push   0xc001bd16
c0007b80:	6a 26                	push   0x26
c0007b82:	53                   	push   ebx
c0007b83:	e8 e8 fd ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007b88:	6a 00                	push   0x0
c0007b8a:	68 20 bd 01 c0       	push   0xc001bd20
c0007b8f:	6a 27                	push   0x27
c0007b91:	53                   	push   ebx
c0007b92:	e8 d9 fd ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007b97:	83 c4 20             	add    esp,0x20
c0007b9a:	6a 00                	push   0x0
c0007b9c:	68 2a bd 01 c0       	push   0xc001bd2a
c0007ba1:	6a 28                	push   0x28
c0007ba3:	53                   	push   ebx
c0007ba4:	e8 c7 fd ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007ba9:	6a 00                	push   0x0
c0007bab:	68 34 bd 01 c0       	push   0xc001bd34
c0007bb0:	6a 29                	push   0x29
c0007bb2:	53                   	push   ebx
c0007bb3:	e8 b8 fd ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007bb8:	83 c4 20             	add    esp,0x20
c0007bbb:	6a 00                	push   0x0
c0007bbd:	68 3e bd 01 c0       	push   0xc001bd3e
c0007bc2:	6a 2a                	push   0x2a
c0007bc4:	53                   	push   ebx
c0007bc5:	e8 a6 fd ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007bca:	6a 00                	push   0x0
c0007bcc:	68 48 bd 01 c0       	push   0xc001bd48
c0007bd1:	6a 2b                	push   0x2b
c0007bd3:	53                   	push   ebx
c0007bd4:	e8 97 fd ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007bd9:	83 c4 20             	add    esp,0x20
c0007bdc:	6a 00                	push   0x0
c0007bde:	68 52 bd 01 c0       	push   0xc001bd52
c0007be3:	6a 2c                	push   0x2c
c0007be5:	53                   	push   ebx
c0007be6:	e8 85 fd ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007beb:	6a 00                	push   0x0
c0007bed:	68 5c bd 01 c0       	push   0xc001bd5c
c0007bf2:	6a 2d                	push   0x2d
c0007bf4:	53                   	push   ebx
c0007bf5:	e8 76 fd ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007bfa:	83 c4 20             	add    esp,0x20
c0007bfd:	6a 00                	push   0x0
c0007bff:	68 66 bd 01 c0       	push   0xc001bd66
c0007c04:	6a 2e                	push   0x2e
c0007c06:	53                   	push   ebx
c0007c07:	e8 64 fd ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007c0c:	6a 00                	push   0x0
c0007c0e:	68 70 bd 01 c0       	push   0xc001bd70
c0007c13:	6a 2f                	push   0x2f
c0007c15:	53                   	push   ebx
c0007c16:	e8 55 fd ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007c1b:	83 c4 20             	add    esp,0x20
c0007c1e:	6a 00                	push   0x0
c0007c20:	68 c6 bd 01 c0       	push   0xc001bdc6
c0007c25:	6a 30                	push   0x30
c0007c27:	53                   	push   ebx
c0007c28:	e8 43 fd ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007c2d:	6a 00                	push   0x0
c0007c2f:	68 d0 bd 01 c0       	push   0xc001bdd0
c0007c34:	6a 31                	push   0x31
c0007c36:	53                   	push   ebx
c0007c37:	e8 34 fd ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007c3c:	83 c4 20             	add    esp,0x20
c0007c3f:	6a 00                	push   0x0
c0007c41:	68 da bd 01 c0       	push   0xc001bdda
c0007c46:	6a 32                	push   0x32
c0007c48:	53                   	push   ebx
c0007c49:	e8 22 fd ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007c4e:	6a 00                	push   0x0
c0007c50:	68 e4 bd 01 c0       	push   0xc001bde4
c0007c55:	6a 33                	push   0x33
c0007c57:	53                   	push   ebx
c0007c58:	e8 13 fd ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007c5d:	83 c4 20             	add    esp,0x20
c0007c60:	6a 00                	push   0x0
c0007c62:	68 ee bd 01 c0       	push   0xc001bdee
c0007c67:	6a 34                	push   0x34
c0007c69:	53                   	push   ebx
c0007c6a:	e8 01 fd ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007c6f:	6a 00                	push   0x0
c0007c71:	68 f8 bd 01 c0       	push   0xc001bdf8
c0007c76:	6a 35                	push   0x35
c0007c78:	53                   	push   ebx
c0007c79:	e8 f2 fc ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007c7e:	83 c4 20             	add    esp,0x20
c0007c81:	6a 00                	push   0x0
c0007c83:	68 02 be 01 c0       	push   0xc001be02
c0007c88:	6a 36                	push   0x36
c0007c8a:	53                   	push   ebx
c0007c8b:	e8 e0 fc ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007c90:	6a 00                	push   0x0
c0007c92:	68 0c be 01 c0       	push   0xc001be0c
c0007c97:	6a 37                	push   0x37
c0007c99:	53                   	push   ebx
c0007c9a:	e8 d1 fc ff ff       	call   c0007970 <IDT::addEntry(int, void (*)(), bool)>
c0007c9f:	83 c4 1c             	add    esp,0x1c
c0007ca2:	6a 03                	push   0x3
c0007ca4:	6a 02                	push   0x2
c0007ca6:	ff 35 30 0a 02 c0    	push   DWORD PTR ds:0xc0020a30
c0007cac:	e8 75 24 00 00       	call   c000a126 <VAS::allocatePages(int, int)>
c0007cb1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007cb8:	89 c6                	mov    esi,eax
c0007cba:	e8 92 01 00 00       	call   c0007e51 <malloc>
c0007cbf:	81 c6 00 20 00 00    	add    esi,0x2000
c0007cc5:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cc8:	89 c7                	mov    edi,eax
c0007cca:	e8 01 16 00 00       	call   c00092d0 <TSS::TSS()>
c0007ccf:	83 c4 0c             	add    esp,0xc
c0007cd2:	68 96 bc 01 c0       	push   0xc001bc96
c0007cd7:	56                   	push   esi
c0007cd8:	57                   	push   edi
c0007cd9:	e8 36 16 00 00       	call   c0009314 <TSS::setup(unsigned long, unsigned long)>
c0007cde:	89 c6                	mov    esi,eax
c0007ce0:	58                   	pop    eax
c0007ce1:	5a                   	pop    edx
c0007ce2:	6a 00                	push   0x0
c0007ce4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007ce8:	50                   	push   eax
c0007ce9:	e8 d6 fb ff ff       	call   c00078c4 <IDTEntry::IDTEntry(bool)>
c0007cee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007cf2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007cf7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007cfe:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007d04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d08:	80 ce 05             	or     dh,0x5
c0007d0b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007d0e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007d12:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007d16:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007d19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007d1c:	e8 87 fc ff ff       	call   c00079a8 <IDT::flush()>
c0007d21:	83 c4 20             	add    esp,0x20
c0007d24:	5b                   	pop    ebx
c0007d25:	5e                   	pop    esi
c0007d26:	5f                   	pop    edi
c0007d27:	c3                   	ret    

c0007d28 <sbrk>:
c0007d28:	55                   	push   ebp
c0007d29:	57                   	push   edi
c0007d2a:	56                   	push   esi
c0007d2b:	53                   	push   ebx
c0007d2c:	83 ec 1c             	sub    esp,0x1c
c0007d2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007d33:	85 c0                	test   eax,eax
c0007d35:	74 5f                	je     c0007d96 <sbrk+0x6e>
c0007d37:	78 64                	js     c0007d9d <sbrk+0x75>
c0007d39:	8b 15 bc f6 01 c0    	mov    edx,DWORD PTR ds:0xc001f6bc
c0007d3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007d43:	05 ff 0f 00 00       	add    eax,0xfff
c0007d48:	89 c5                	mov    ebp,eax
c0007d4a:	78 69                	js     c0007db5 <sbrk+0x8d>
c0007d4c:	c1 fd 0c             	sar    ebp,0xc
c0007d4f:	bb 00 00 00 00       	mov    ebx,0x0
c0007d54:	8b 35 30 0a 02 c0    	mov    esi,DWORD PTR ds:0xc0020a30
c0007d5a:	8b 3d bc f6 01 c0    	mov    edi,DWORD PTR ds:0xc001f6bc
c0007d60:	e8 b9 04 00 00       	call   c000821e <Phys::allocatePage()>
c0007d65:	68 01 04 00 00       	push   0x401
c0007d6a:	57                   	push   edi
c0007d6b:	50                   	push   eax
c0007d6c:	56                   	push   esi
c0007d6d:	e8 b0 22 00 00       	call   c000a022 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007d72:	81 05 bc f6 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f6bc,0x1000
c0007d7c:	43                   	inc    ebx
c0007d7d:	83 c4 10             	add    esp,0x10
c0007d80:	39 dd                	cmp    ebp,ebx
c0007d82:	75 d0                	jne    c0007d54 <sbrk+0x2c>
c0007d84:	0f 20 d8             	mov    eax,cr3
c0007d87:	0f 22 d8             	mov    cr3,eax
c0007d8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d8e:	83 c4 1c             	add    esp,0x1c
c0007d91:	5b                   	pop    ebx
c0007d92:	5e                   	pop    esi
c0007d93:	5f                   	pop    edi
c0007d94:	5d                   	pop    ebp
c0007d95:	c3                   	ret    
c0007d96:	a1 bc f6 01 c0       	mov    eax,ds:0xc001f6bc
c0007d9b:	eb f1                	jmp    c0007d8e <sbrk+0x66>
c0007d9d:	83 ec 08             	sub    esp,0x8
c0007da0:	50                   	push   eax
c0007da1:	68 04 d7 01 c0       	push   0xc001d704
c0007da6:	e8 35 2e 00 00       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0007dab:	83 c4 10             	add    esp,0x10
c0007dae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007db3:	eb d9                	jmp    c0007d8e <sbrk+0x66>
c0007db5:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007dbb:	eb 8f                	jmp    c0007d4c <sbrk+0x24>

c0007dbd <mmap>:
c0007dbd:	83 ec 18             	sub    esp,0x18
c0007dc0:	68 34 d7 01 c0       	push   0xc001d734
c0007dc5:	e8 65 89 00 00       	call   c001072f <Krnl::panic(char const*)>
c0007dca:	b8 00 00 00 00       	mov    eax,0x0
c0007dcf:	83 c4 1c             	add    esp,0x1c
c0007dd2:	c3                   	ret    

c0007dd3 <munmap>:
c0007dd3:	83 ec 18             	sub    esp,0x18
c0007dd6:	68 39 d7 01 c0       	push   0xc001d739
c0007ddb:	e8 4f 89 00 00       	call   c001072f <Krnl::panic(char const*)>
c0007de0:	b8 00 00 00 00       	mov    eax,0x0
c0007de5:	83 c4 1c             	add    esp,0x1c
c0007de8:	c3                   	ret    

c0007de9 <liballoc_lock()>:
c0007de9:	fa                   	cli    
c0007dea:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0007df0:	b8 00 00 00 00       	mov    eax,0x0
c0007df5:	c3                   	ret    

c0007df6 <liballoc_unlock()>:
c0007df6:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0007dfb:	48                   	dec    eax
c0007dfc:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0007e01:	75 01                	jne    c0007e04 <liballoc_unlock()+0xe>
c0007e03:	fb                   	sti    
c0007e04:	b8 00 00 00 00       	mov    eax,0x0
c0007e09:	c3                   	ret    

c0007e0a <liballoc_alloc(int)>:
c0007e0a:	83 ec 10             	sub    esp,0x10
c0007e0d:	6a 01                	push   0x1
c0007e0f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007e13:	ff 35 30 0a 02 c0    	push   DWORD PTR ds:0xc0020a30
c0007e19:	e8 08 23 00 00       	call   c000a126 <VAS::allocatePages(int, int)>
c0007e1e:	83 c4 1c             	add    esp,0x1c
c0007e21:	c3                   	ret    

c0007e22 <liballoc_free(void*, int)>:
c0007e22:	83 ec 14             	sub    esp,0x14
c0007e25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007e29:	ff 35 30 0a 02 c0    	push   DWORD PTR ds:0xc0020a30
c0007e2f:	e8 ae 1f 00 00       	call   c0009de2 <VAS::freeAllocatedPages(unsigned long)>
c0007e34:	b8 00 00 00 00       	mov    eax,0x0
c0007e39:	83 c4 1c             	add    esp,0x1c
c0007e3c:	c3                   	ret    

c0007e3d <realloc>:
c0007e3d:	83 ec 14             	sub    esp,0x14
c0007e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e48:	e8 04 97 ff ff       	call   c0001551 <dlrealloc>
c0007e4d:	83 c4 1c             	add    esp,0x1c
c0007e50:	c3                   	ret    

c0007e51 <malloc>:
c0007e51:	83 ec 18             	sub    esp,0x18
c0007e54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e58:	e8 b7 91 ff ff       	call   c0001014 <dlmalloc>
c0007e5d:	83 c4 1c             	add    esp,0x1c
c0007e60:	c3                   	ret    

c0007e61 <free>:
c0007e61:	83 ec 18             	sub    esp,0x18
c0007e64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e68:	e8 4c 8e ff ff       	call   c0000cb9 <dlfree>
c0007e6d:	83 c4 1c             	add    esp,0x1c
c0007e70:	c3                   	ret    

c0007e71 <rfree>:
c0007e71:	83 ec 18             	sub    esp,0x18
c0007e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e78:	e8 3c 8e ff ff       	call   c0000cb9 <dlfree>
c0007e7d:	83 c4 1c             	add    esp,0x1c
c0007e80:	c3                   	ret    

c0007e81 <calloc>:
c0007e81:	56                   	push   esi
c0007e82:	53                   	push   ebx
c0007e83:	83 ec 10             	sub    esp,0x10
c0007e86:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007e8a:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007e8f:	53                   	push   ebx
c0007e90:	e8 bc ff ff ff       	call   c0007e51 <malloc>
c0007e95:	89 c6                	mov    esi,eax
c0007e97:	83 c4 0c             	add    esp,0xc
c0007e9a:	53                   	push   ebx
c0007e9b:	6a 00                	push   0x0
c0007e9d:	50                   	push   eax
c0007e9e:	e8 4d 86 ff ff       	call   c00004f0 <memset>
c0007ea3:	89 f0                	mov    eax,esi
c0007ea5:	83 c4 14             	add    esp,0x14
c0007ea8:	5b                   	pop    ebx
c0007ea9:	5e                   	pop    esi
c0007eaa:	c3                   	ret    

c0007eab <Krnl::setBootMessage(char const*)>:
c0007eab:	57                   	push   edi
c0007eac:	56                   	push   esi
c0007ead:	53                   	push   ebx
c0007eae:	81 ec a4 00 00 00    	sub    esp,0xa4
c0007eb4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0007ebb:	68 9e 00 00 00       	push   0x9e
c0007ec0:	6a 00                	push   0x0
c0007ec2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0007ec6:	56                   	push   esi
c0007ec7:	e8 24 86 ff ff       	call   c00004f0 <memset>
c0007ecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007ecf:	e8 8c 86 ff ff       	call   c0000560 <strlen>
c0007ed4:	ba 50 00 00 00       	mov    edx,0x50
c0007ed9:	83 c4 10             	add    esp,0x10
c0007edc:	29 c2                	sub    edx,eax
c0007ede:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0007ee2:	d1 ea                	shr    edx,1
c0007ee4:	84 c0                	test   al,al
c0007ee6:	74 19                	je     c0007f01 <Krnl::setBootMessage(char const*)+0x56>
c0007ee8:	01 d2                	add    edx,edx
c0007eea:	43                   	inc    ebx
c0007eeb:	01 f2                	add    edx,esi
c0007eed:	80 cc 0f             	or     ah,0xf
c0007ef0:	83 c2 02             	add    edx,0x2
c0007ef3:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0007ef7:	43                   	inc    ebx
c0007ef8:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0007efd:	84 c0                	test   al,al
c0007eff:	75 ec                	jne    c0007eed <Krnl::setBootMessage(char const*)+0x42>
c0007f01:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0007f06:	b9 9e 00 00 00       	mov    ecx,0x9e
c0007f0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f0d:	81 c4 a0 00 00 00    	add    esp,0xa0
c0007f13:	5b                   	pop    ebx
c0007f14:	5e                   	pop    esi
c0007f15:	5f                   	pop    edi
c0007f16:	c3                   	ret    

c0007f17 <kernel_main>:
c0007f17:	55                   	push   ebp
c0007f18:	57                   	push   edi
c0007f19:	bf f9 03 00 00       	mov    edi,0x3f9
c0007f1e:	56                   	push   esi
c0007f1f:	89 fa                	mov    edx,edi
c0007f21:	53                   	push   ebx
c0007f22:	31 f6                	xor    esi,esi
c0007f24:	83 ec 38             	sub    esp,0x38
c0007f27:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007f2c:	a3 50 09 02 c0       	mov    ds:0xc0020950,eax
c0007f31:	89 f0                	mov    eax,esi
c0007f33:	ee                   	out    dx,al
c0007f34:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007f39:	b0 80                	mov    al,0x80
c0007f3b:	89 da                	mov    edx,ebx
c0007f3d:	ee                   	out    dx,al
c0007f3e:	b1 03                	mov    cl,0x3
c0007f40:	ba f8 03 00 00       	mov    edx,0x3f8
c0007f45:	88 c8                	mov    al,cl
c0007f47:	ee                   	out    dx,al
c0007f48:	89 f0                	mov    eax,esi
c0007f4a:	89 fa                	mov    edx,edi
c0007f4c:	ee                   	out    dx,al
c0007f4d:	88 c8                	mov    al,cl
c0007f4f:	89 da                	mov    edx,ebx
c0007f51:	ee                   	out    dx,al
c0007f52:	b0 c7                	mov    al,0xc7
c0007f54:	ba fa 03 00 00       	mov    edx,0x3fa
c0007f59:	ee                   	out    dx,al
c0007f5a:	b0 0b                	mov    al,0xb
c0007f5c:	ba fc 03 00 00       	mov    edx,0x3fc
c0007f61:	ee                   	out    dx,al
c0007f62:	68 40 d7 01 c0       	push   0xc001d740
c0007f67:	e8 74 2c 00 00       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0007f6c:	0f be 05 c0 f6 01 c0 	movsx  eax,BYTE PTR ds:0xc001f6c0
c0007f73:	83 c4 10             	add    esp,0x10
c0007f76:	84 c0                	test   al,al
c0007f78:	74 5c                	je     c0007fd6 <kernel_main+0xbf>
c0007f7a:	31 db                	xor    ebx,ebx
c0007f7c:	bd 0a 00 00 00       	mov    ebp,0xa
c0007f81:	bf 05 00 00 00       	mov    edi,0x5
c0007f86:	31 f6                	xor    esi,esi
c0007f88:	eb 14                	jmp    c0007f9e <kernel_main+0x87>
c0007f8a:	47                   	inc    edi
c0007f8b:	bd 0a 00 00 00       	mov    ebp,0xa
c0007f90:	31 f6                	xor    esi,esi
c0007f92:	43                   	inc    ebx
c0007f93:	0f be 83 c0 f6 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe0940]
c0007f9a:	84 c0                	test   al,al
c0007f9c:	74 38                	je     c0007fd6 <kernel_main+0xbf>
c0007f9e:	80 be f6 f6 01 c0 db 	cmp    BYTE PTR [esi-0x3ffe090a],0xdb
c0007fa5:	0f 84 97 00 00 00    	je     c0008042 <kernel_main+0x12b>
c0007fab:	3c 0d                	cmp    al,0xd
c0007fad:	74 e3                	je     c0007f92 <kernel_main+0x7b>
c0007faf:	3c 0a                	cmp    al,0xa
c0007fb1:	74 d7                	je     c0007f8a <kernel_main+0x73>
c0007fb3:	83 ec 0c             	sub    esp,0xc
c0007fb6:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0007fba:	57                   	push   edi
c0007fbb:	43                   	inc    ebx
c0007fbc:	52                   	push   edx
c0007fbd:	46                   	inc    esi
c0007fbe:	6a 00                	push   0x0
c0007fc0:	6a 0e                	push   0xe
c0007fc2:	50                   	push   eax
c0007fc3:	e8 c4 e4 00 00       	call   c001648c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0007fc8:	83 c4 20             	add    esp,0x20
c0007fcb:	0f be 83 c0 f6 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe0940]
c0007fd2:	84 c0                	test   al,al
c0007fd4:	75 c8                	jne    c0007f9e <kernel_main+0x87>
c0007fd6:	83 ec 0c             	sub    esp,0xc
c0007fd9:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007fde:	05 ff 0f 00 00       	add    eax,0xfff
c0007fe3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007fe8:	50                   	push   eax
c0007fe9:	e8 82 03 00 00       	call   c0008370 <Phys::physicalMemorySetup(unsigned int)>
c0007fee:	e8 59 1b 00 00       	call   c0009b4c <Virt::virtualMemorySetup()>
c0007ff3:	58                   	pop    eax
c0007ff4:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007ff8:	53                   	push   ebx
c0007ff9:	e8 0a 1c 00 00       	call   c0009c08 <VAS::VAS()>
c0007ffe:	89 1d 30 0a 02 c0    	mov    DWORD PTR ds:0xc0020a30,ebx
c0008004:	e8 17 80 ff ff       	call   c0000020 <callGlobalConstructors>
c0008009:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0008010:	e8 3c fe ff ff       	call   c0007e51 <malloc>
c0008015:	89 04 24             	mov    DWORD PTR [esp],eax
c0008018:	89 c6                	mov    esi,eax
c000801a:	e8 af f1 ff ff       	call   c00071ce <Computer::Computer()>
c000801f:	6a 00                	push   0x0
c0008021:	89 35 38 09 02 c0    	mov    DWORD PTR ds:0xc0020938,esi
c0008027:	6a 00                	push   0x0
c0008029:	6a 00                	push   0x0
c000802b:	56                   	push   esi
c000802c:	e8 43 f5 ff ff       	call   c0007574 <Computer::open(int, int, void*)>
c0008031:	83 c4 14             	add    esp,0x14
c0008034:	53                   	push   ebx
c0008035:	e8 84 1e 00 00       	call   c0009ebe <VAS::~VAS()>
c000803a:	83 c4 3c             	add    esp,0x3c
c000803d:	5b                   	pop    ebx
c000803e:	5e                   	pop    esi
c000803f:	5f                   	pop    edi
c0008040:	5d                   	pop    ebp
c0008041:	c3                   	ret    
c0008042:	31 d2                	xor    edx,edx
c0008044:	8a 96 f5 f6 01 c0    	mov    dl,BYTE PTR [esi-0x3ffe090b]
c000804a:	83 e2 fe             	and    edx,0xfffffffe
c000804d:	81 fa ba 00 00 00    	cmp    edx,0xba
c0008053:	0f 85 52 ff ff ff    	jne    c0007fab <kernel_main+0x94>
c0008059:	45                   	inc    ebp
c000805a:	e9 4c ff ff ff       	jmp    c0007fab <kernel_main+0x94>

c000805f <Phys::allocateDMA(unsigned long)>:
c000805f:	55                   	push   ebp
c0008060:	31 ed                	xor    ebp,ebp
c0008062:	57                   	push   edi
c0008063:	56                   	push   esi
c0008064:	53                   	push   ebx
c0008065:	31 db                	xor    ebx,ebx
c0008067:	83 ec 1c             	sub    esp,0x1c
c000806a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000806e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0008076:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000807c:	31 c0                	xor    eax,eax
c000807e:	c1 ef 0c             	shr    edi,0xc
c0008081:	eb 19                	jmp    c000809c <Phys::allocateDMA(unsigned long)+0x3d>
c0008083:	85 c0                	test   eax,eax
c0008085:	75 06                	jne    c000808d <Phys::allocateDMA(unsigned long)+0x2e>
c0008087:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000808b:	89 dd                	mov    ebp,ebx
c000808d:	8d 70 01             	lea    esi,[eax+0x1]
c0008090:	39 f7                	cmp    edi,esi
c0008092:	74 33                	je     c00080c7 <Phys::allocateDMA(unsigned long)+0x68>
c0008094:	89 f0                	mov    eax,esi
c0008096:	43                   	inc    ebx
c0008097:	83 fb 0f             	cmp    ebx,0xf
c000809a:	7f 11                	jg     c00080ad <Phys::allocateDMA(unsigned long)+0x4e>
c000809c:	80 bb 6c 09 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdf694],0x0
c00080a3:	74 de                	je     c0008083 <Phys::allocateDMA(unsigned long)+0x24>
c00080a5:	31 c0                	xor    eax,eax
c00080a7:	43                   	inc    ebx
c00080a8:	83 fb 0f             	cmp    ebx,0xf
c00080ab:	7e ef                	jle    c000809c <Phys::allocateDMA(unsigned long)+0x3d>
c00080ad:	83 ec 0c             	sub    esp,0xc
c00080b0:	68 58 d7 01 c0       	push   0xc001d758
c00080b5:	e8 75 86 00 00       	call   c001072f <Krnl::panic(char const*)>
c00080ba:	83 c4 10             	add    esp,0x10
c00080bd:	31 c0                	xor    eax,eax
c00080bf:	83 c4 1c             	add    esp,0x1c
c00080c2:	5b                   	pop    ebx
c00080c3:	5e                   	pop    esi
c00080c4:	5f                   	pop    edi
c00080c5:	5d                   	pop    ebp
c00080c6:	c3                   	ret    
c00080c7:	89 e9                	mov    ecx,ebp
c00080c9:	c1 f9 04             	sar    ecx,0x4
c00080cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00080d0:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c00080d4:	89 ca                	mov    edx,ecx
c00080d6:	4a                   	dec    edx
c00080d7:	79 03                	jns    c00080dc <Phys::allocateDMA(unsigned long)+0x7d>
c00080d9:	8d 51 0e             	lea    edx,[ecx+0xe]
c00080dc:	c1 fa 04             	sar    edx,0x4
c00080df:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c00080e3:	74 08                	je     c00080ed <Phys::allocateDMA(unsigned long)+0x8e>
c00080e5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00080e9:	31 c0                	xor    eax,eax
c00080eb:	eb ba                	jmp    c00080a7 <Phys::allocateDMA(unsigned long)+0x48>
c00080ed:	85 f6                	test   esi,esi
c00080ef:	74 15                	je     c0008106 <Phys::allocateDMA(unsigned long)+0xa7>
c00080f1:	8d 95 6c 09 02 c0    	lea    edx,[ebp-0x3ffdf694]
c00080f7:	8d 84 05 6d 09 02 c0 	lea    eax,[ebp+eax*1-0x3ffdf693]
c00080fe:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0008101:	42                   	inc    edx
c0008102:	39 d0                	cmp    eax,edx
c0008104:	75 f8                	jne    c00080fe <Phys::allocateDMA(unsigned long)+0x9f>
c0008106:	01 3d 64 09 02 c0    	add    DWORD PTR ds:0xc0020964,edi
c000810c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008110:	85 c0                	test   eax,eax
c0008112:	74 17                	je     c000812b <Phys::allocateDMA(unsigned long)+0xcc>
c0008114:	83 ec 0c             	sub    esp,0xc
c0008117:	68 58 d7 01 c0       	push   0xc001d758
c000811c:	e8 0e 86 00 00       	call   c001072f <Krnl::panic(char const*)>
c0008121:	83 c4 10             	add    esp,0x10
c0008124:	89 f0                	mov    eax,esi
c0008126:	e9 6b ff ff ff       	jmp    c0008096 <Phys::allocateDMA(unsigned long)+0x37>
c000812b:	c1 e5 0c             	shl    ebp,0xc
c000812e:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0008134:	eb 89                	jmp    c00080bf <Phys::allocateDMA(unsigned long)+0x60>

c0008136 <Phys::freeDMA(unsigned long, unsigned long)>:
c0008136:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000813a:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0008140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008144:	c1 ea 0c             	shr    edx,0xc
c0008147:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000814c:	29 15 64 09 02 c0    	sub    DWORD PTR ds:0xc0020964,edx
c0008152:	c1 e8 0c             	shr    eax,0xc
c0008155:	85 d2                	test   edx,edx
c0008157:	74 0f                	je     c0008168 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0008159:	05 6c 09 02 c0       	add    eax,0xc002096c
c000815e:	01 c2                	add    edx,eax
c0008160:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0008163:	40                   	inc    eax
c0008164:	39 d0                	cmp    eax,edx
c0008166:	75 f8                	jne    c0008160 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0008168:	c3                   	ret    

c0008169 <Phys::setPageState(unsigned long, bool)>:
c0008169:	56                   	push   esi
c000816a:	ba 01 00 00 00       	mov    edx,0x1
c000816f:	53                   	push   ebx
c0008170:	8b 35 04 f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f804
c0008176:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000817a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000817e:	89 c8                	mov    eax,ecx
c0008180:	83 e1 07             	and    ecx,0x7
c0008183:	c1 e8 03             	shr    eax,0x3
c0008186:	d3 e3                	shl    ebx,cl
c0008188:	01 c6                	add    esi,eax
c000818a:	d3 e2                	shl    edx,cl
c000818c:	f7 d2                	not    edx
c000818e:	20 16                	and    BYTE PTR [esi],dl
c0008190:	03 05 04 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f804
c0008196:	08 18                	or     BYTE PTR [eax],bl
c0008198:	5b                   	pop    ebx
c0008199:	5e                   	pop    esi
c000819a:	c3                   	ret    

c000819b <Phys::getPageState(unsigned long)>:
c000819b:	53                   	push   ebx
c000819c:	8b 15 04 f8 01 c0    	mov    edx,DWORD PTR ds:0xc001f804
c00081a2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00081a6:	31 db                	xor    ebx,ebx
c00081a8:	89 c8                	mov    eax,ecx
c00081aa:	83 e1 07             	and    ecx,0x7
c00081ad:	c1 e8 03             	shr    eax,0x3
c00081b0:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c00081b3:	89 d8                	mov    eax,ebx
c00081b5:	5b                   	pop    ebx
c00081b6:	d3 f8                	sar    eax,cl
c00081b8:	83 e0 01             	and    eax,0x1
c00081bb:	c3                   	ret    

c00081bc <Phys::freePage(unsigned long)>:
c00081bc:	53                   	push   ebx
c00081bd:	83 ec 08             	sub    esp,0x8
c00081c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081c4:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c00081ca:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00081d0:	76 3a                	jbe    c000820c <Phys::freePage(unsigned long)+0x50>
c00081d2:	c1 e8 0c             	shr    eax,0xc
c00081d5:	50                   	push   eax
c00081d6:	89 c3                	mov    ebx,eax
c00081d8:	e8 be ff ff ff       	call   c000819b <Phys::getPageState(unsigned long)>
c00081dd:	5a                   	pop    edx
c00081de:	84 c0                	test   al,al
c00081e0:	74 19                	je     c00081fb <Phys::freePage(unsigned long)+0x3f>
c00081e2:	83 ec 08             	sub    esp,0x8
c00081e5:	ff 0d 64 09 02 c0    	dec    DWORD PTR ds:0xc0020964
c00081eb:	6a 00                	push   0x0
c00081ed:	53                   	push   ebx
c00081ee:	e8 76 ff ff ff       	call   c0008169 <Phys::setPageState(unsigned long, bool)>
c00081f3:	83 c4 10             	add    esp,0x10
c00081f6:	83 c4 08             	add    esp,0x8
c00081f9:	5b                   	pop    ebx
c00081fa:	c3                   	ret    
c00081fb:	c7 44 24 10 fd d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d7fd
c0008203:	83 c4 08             	add    esp,0x8
c0008206:	5b                   	pop    ebx
c0008207:	e9 23 85 00 00       	jmp    c001072f <Krnl::panic(char const*)>
c000820c:	68 00 10 00 00       	push   0x1000
c0008211:	50                   	push   eax
c0008212:	e8 1f ff ff ff       	call   c0008136 <Phys::freeDMA(unsigned long, unsigned long)>
c0008217:	59                   	pop    ecx
c0008218:	5b                   	pop    ebx
c0008219:	83 c4 08             	add    esp,0x8
c000821c:	5b                   	pop    ebx
c000821d:	c3                   	ret    

c000821e <Phys::allocatePage()>:
c000821e:	56                   	push   esi
c000821f:	53                   	push   ebx
c0008220:	83 ec 14             	sub    esp,0x14
c0008223:	8b 35 58 09 02 c0    	mov    esi,DWORD PTR ds:0xc0020958
c0008229:	89 f3                	mov    ebx,esi
c000822b:	eb 0a                	jmp    c0008237 <Phys::allocatePage()+0x19>
c000822d:	89 1d 58 09 02 c0    	mov    DWORD PTR ds:0xc0020958,ebx
c0008233:	39 de                	cmp    esi,ebx
c0008235:	74 24                	je     c000825b <Phys::allocatePage()+0x3d>
c0008237:	53                   	push   ebx
c0008238:	e8 5e ff ff ff       	call   c000819b <Phys::getPageState(unsigned long)>
c000823d:	5a                   	pop    edx
c000823e:	84 c0                	test   al,al
c0008240:	74 5f                	je     c00082a1 <Phys::allocatePage()+0x83>
c0008242:	43                   	inc    ebx
c0008243:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0008249:	75 e2                	jne    c000822d <Phys::allocatePage()+0xf>
c000824b:	31 db                	xor    ebx,ebx
c000824d:	c7 05 58 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020958,0x0
c0008257:	39 de                	cmp    esi,ebx
c0008259:	75 dc                	jne    c0008237 <Phys::allocatePage()+0x19>
c000825b:	83 ec 0c             	sub    esp,0xc
c000825e:	80 35 7c 09 02 c0 01 	xor    BYTE PTR ds:0xc002097c,0x1
c0008265:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000826a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000826d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0008273:	50                   	push   eax
c0008274:	e8 87 26 00 00       	call   c000a900 <VAS::scanForEviction()>
c0008279:	83 c4 10             	add    esp,0x10
c000827c:	85 c0                	test   eax,eax
c000827e:	75 3f                	jne    c00082bf <Phys::allocatePage()+0xa1>
c0008280:	83 ec 0c             	sub    esp,0xc
c0008283:	68 80 d7 01 c0       	push   0xc001d780
c0008288:	e8 a2 84 00 00       	call   c001072f <Krnl::panic(char const*)>
c000828d:	83 c4 10             	add    esp,0x10
c0008290:	8b 1d 58 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020958
c0008296:	53                   	push   ebx
c0008297:	e8 ff fe ff ff       	call   c000819b <Phys::getPageState(unsigned long)>
c000829c:	5a                   	pop    edx
c000829d:	84 c0                	test   al,al
c000829f:	75 a1                	jne    c0008242 <Phys::allocatePage()+0x24>
c00082a1:	6a 01                	push   0x1
c00082a3:	53                   	push   ebx
c00082a4:	e8 c0 fe ff ff       	call   c0008169 <Phys::setPageState(unsigned long, bool)>
c00082a9:	a1 58 09 02 c0       	mov    eax,ds:0xc0020958
c00082ae:	5a                   	pop    edx
c00082af:	ff 05 64 09 02 c0    	inc    DWORD PTR ds:0xc0020964
c00082b5:	c1 e0 0c             	shl    eax,0xc
c00082b8:	59                   	pop    ecx
c00082b9:	83 c4 14             	add    esp,0x14
c00082bc:	5b                   	pop    ebx
c00082bd:	5e                   	pop    esi
c00082be:	c3                   	ret    
c00082bf:	83 ec 08             	sub    esp,0x8
c00082c2:	89 c2                	mov    edx,eax
c00082c4:	6a 01                	push   0x1
c00082c6:	c1 ea 0c             	shr    edx,0xc
c00082c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00082cd:	52                   	push   edx
c00082ce:	e8 96 fe ff ff       	call   c0008169 <Phys::setPageState(unsigned long, bool)>
c00082d3:	83 c4 10             	add    esp,0x10
c00082d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082da:	eb dd                	jmp    c00082b9 <Phys::allocatePage()+0x9b>

c00082dc <Phys::allocateContiguousPages(int)>:
c00082dc:	57                   	push   edi
c00082dd:	56                   	push   esi
c00082de:	53                   	push   ebx
c00082df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082e3:	fa                   	cli    
c00082e4:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c00082ea:	31 db                	xor    ebx,ebx
c00082ec:	85 db                	test   ebx,ebx
c00082ee:	75 11                	jne    c0008301 <Phys::allocateContiguousPages(int)+0x25>
c00082f0:	e8 29 ff ff ff       	call   c000821e <Phys::allocatePage()>
c00082f5:	83 fe 01             	cmp    esi,0x1
c00082f8:	89 c7                	mov    edi,eax
c00082fa:	74 21                	je     c000831d <Phys::allocateContiguousPages(int)+0x41>
c00082fc:	bb 01 00 00 00       	mov    ebx,0x1
c0008301:	e8 18 ff ff ff       	call   c000821e <Phys::allocatePage()>
c0008306:	89 da                	mov    edx,ebx
c0008308:	c1 e2 0c             	shl    edx,0xc
c000830b:	01 fa                	add    edx,edi
c000830d:	39 c2                	cmp    edx,eax
c000830f:	74 20                	je     c0008331 <Phys::allocateContiguousPages(int)+0x55>
c0008311:	bb 01 00 00 00       	mov    ebx,0x1
c0008316:	89 c7                	mov    edi,eax
c0008318:	83 fe 01             	cmp    esi,0x1
c000831b:	75 e4                	jne    c0008301 <Phys::allocateContiguousPages(int)+0x25>
c000831d:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0008322:	48                   	dec    eax
c0008323:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0008328:	75 01                	jne    c000832b <Phys::allocateContiguousPages(int)+0x4f>
c000832a:	fb                   	sti    
c000832b:	89 f8                	mov    eax,edi
c000832d:	5b                   	pop    ebx
c000832e:	5e                   	pop    esi
c000832f:	5f                   	pop    edi
c0008330:	c3                   	ret    
c0008331:	43                   	inc    ebx
c0008332:	39 f3                	cmp    ebx,esi
c0008334:	75 b6                	jne    c00082ec <Phys::allocateContiguousPages(int)+0x10>
c0008336:	eb e5                	jmp    c000831d <Phys::allocateContiguousPages(int)+0x41>

c0008338 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0008338:	56                   	push   esi
c0008339:	53                   	push   ebx
c000833a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000833e:	39 1d 5c 09 02 c0    	cmp    DWORD PTR ds:0xc002095c,ebx
c0008344:	73 06                	jae    c000834c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0008346:	89 1d 5c 09 02 c0    	mov    DWORD PTR ds:0xc002095c,ebx
c000834c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008350:	c1 eb 0c             	shr    ebx,0xc
c0008353:	c1 e8 0c             	shr    eax,0xc
c0008356:	39 d8                	cmp    eax,ebx
c0008358:	73 13                	jae    c000836d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000835a:	6a 00                	push   0x0
c000835c:	8d 70 01             	lea    esi,[eax+0x1]
c000835f:	50                   	push   eax
c0008360:	e8 04 fe ff ff       	call   c0008169 <Phys::setPageState(unsigned long, bool)>
c0008365:	5a                   	pop    edx
c0008366:	89 f0                	mov    eax,esi
c0008368:	59                   	pop    ecx
c0008369:	39 f3                	cmp    ebx,esi
c000836b:	75 ed                	jne    c000835a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000836d:	5b                   	pop    ebx
c000836e:	5e                   	pop    esi
c000836f:	c3                   	ret    

c0008370 <Phys::physicalMemorySetup(unsigned int)>:
c0008370:	55                   	push   ebp
c0008371:	57                   	push   edi
c0008372:	56                   	push   esi
c0008373:	53                   	push   ebx
c0008374:	31 db                	xor    ebx,ebx
c0008376:	83 ec 40             	sub    esp,0x40
c0008379:	6a 10                	push   0x10
c000837b:	6a 00                	push   0x0
c000837d:	68 6c 09 02 c0       	push   0xc002096c
c0008382:	e8 69 81 ff ff       	call   c00004f0 <memset>
c0008387:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000838b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008390:	05 00 10 00 00       	add    eax,0x1000
c0008395:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008399:	5a                   	pop    edx
c000839a:	59                   	pop    ecx
c000839b:	50                   	push   eax
c000839c:	68 13 d8 01 c0       	push   0xc001d813
c00083a1:	e8 3a 28 00 00       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c00083a6:	83 c4 10             	add    esp,0x10
c00083a9:	83 ec 08             	sub    esp,0x8
c00083ac:	6a 01                	push   0x1
c00083ae:	53                   	push   ebx
c00083af:	43                   	inc    ebx
c00083b0:	e8 b4 fd ff ff       	call   c0008169 <Phys::setPageState(unsigned long, bool)>
c00083b5:	83 c4 10             	add    esp,0x10
c00083b8:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00083be:	75 e9                	jne    c00083a9 <Phys::physicalMemorySetup(unsigned int)+0x39>
c00083c0:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c00083c6:	66 85 c0             	test   ax,ax
c00083c9:	0f 84 97 01 00 00    	je     c0008566 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00083cf:	89 c7                	mov    edi,eax
c00083d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00083d9:	81 e7 ff ff 00 00    	and    edi,0xffff
c00083df:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00083e4:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00083e8:	eb 15                	jmp    c00083ff <Phys::physicalMemorySetup(unsigned int)+0x8f>
c00083ea:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00083ee:	83 c3 18             	add    ebx,0x18
c00083f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083f5:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00083f9:	0f 84 77 01 00 00    	je     c0008576 <Phys::physicalMemorySetup(unsigned int)+0x206>
c00083ff:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008402:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008405:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0008408:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000840c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008410:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008412:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008415:	01 f0                	add    eax,esi
c0008417:	55                   	push   ebp
c0008418:	11 fa                	adc    edx,edi
c000841a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000841e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008422:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008426:	50                   	push   eax
c0008427:	56                   	push   esi
c0008428:	68 b0 d7 01 c0       	push   0xc001d7b0
c000842d:	e8 ae 27 00 00       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0008432:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008436:	83 c4 10             	add    esp,0x10
c0008439:	09 f8                	or     eax,edi
c000843b:	0f 85 35 01 00 00    	jne    c0008576 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0008441:	4d                   	dec    ebp
c0008442:	75 a6                	jne    c00083ea <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008444:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008448:	ba 00 00 08 00       	mov    edx,0x80000
c000844d:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0008451:	39 f2                	cmp    edx,esi
c0008453:	89 c1                	mov    ecx,eax
c0008455:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000845d:	19 f9                	sbb    ecx,edi
c000845f:	0f 82 a7 00 00 00    	jb     c000850c <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0008465:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008469:	89 c1                	mov    ecx,eax
c000846b:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000846f:	0f 83 97 00 00 00    	jae    c000850c <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0008475:	ba 00 00 0a 00       	mov    edx,0xa0000
c000847a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000847e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008482:	39 fa                	cmp    edx,edi
c0008484:	19 e8                	sbb    eax,ebp
c0008486:	0f 82 9a 01 00 00    	jb     c0008626 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c000848c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008490:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008494:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000849a:	ba ff 1f 00 00       	mov    edx,0x1fff
c000849f:	83 d5 ff             	adc    ebp,0xffffffff
c00084a2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00084a6:	31 c0                	xor    eax,eax
c00084a8:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00084ac:	39 fa                	cmp    edx,edi
c00084ae:	89 c1                	mov    ecx,eax
c00084b0:	19 e9                	sbb    ecx,ebp
c00084b2:	0f 83 32 ff ff ff    	jae    c00083ea <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00084b8:	be 00 00 08 00       	mov    esi,0x80000
c00084bd:	51                   	push   ecx
c00084be:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00084c2:	57                   	push   edi
c00084c3:	56                   	push   esi
c00084c4:	68 d4 d7 01 c0       	push   0xc001d7d4
c00084c9:	e8 12 27 00 00       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c00084ce:	5d                   	pop    ebp
c00084cf:	58                   	pop    eax
c00084d0:	57                   	push   edi
c00084d1:	56                   	push   esi
c00084d2:	e8 61 fe ff ff       	call   c0008338 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00084d7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00084db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00084df:	83 c4 0c             	add    esp,0xc
c00084e2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00084e6:	03 05 68 09 02 c0    	add    eax,DWORD PTR ds:0xc0020968
c00084ec:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00084f3:	a3 68 09 02 c0       	mov    ds:0xc0020968,eax
c00084f8:	52                   	push   edx
c00084f9:	50                   	push   eax
c00084fa:	68 39 d8 01 c0       	push   0xc001d839
c00084ff:	e8 dc 26 00 00       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0008504:	83 c4 10             	add    esp,0x10
c0008507:	e9 de fe ff ff       	jmp    c00083ea <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000850c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0008510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008518:	39 ea                	cmp    edx,ebp
c000851a:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000851e:	0f 82 c6 fe ff ff    	jb     c00083ea <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008524:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008529:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000852d:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0008531:	0f 83 b3 fe ff ff    	jae    c00083ea <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008537:	39 ee                	cmp    esi,ebp
c0008539:	89 f8                	mov    eax,edi
c000853b:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000853f:	0f 83 78 ff ff ff    	jae    c00084bd <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0008545:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008549:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000854d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0008551:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008555:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008559:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000855d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008561:	e9 57 ff ff ff       	jmp    c00084bd <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0008566:	83 ec 0c             	sub    esp,0xc
c0008569:	68 2b d8 01 c0       	push   0xc001d82b
c000856e:	e8 bc 81 00 00       	call   c001072f <Krnl::panic(char const*)>
c0008573:	83 c4 10             	add    esp,0x10
c0008576:	83 ec 08             	sub    esp,0x8
c0008579:	bb 60 00 00 00       	mov    ebx,0x60
c000857e:	6a 00                	push   0x0
c0008580:	6a 06                	push   0x6
c0008582:	e8 e2 fb ff ff       	call   c0008169 <Phys::setPageState(unsigned long, bool)>
c0008587:	58                   	pop    eax
c0008588:	5a                   	pop    edx
c0008589:	6a 00                	push   0x0
c000858b:	6a 07                	push   0x7
c000858d:	e8 d7 fb ff ff       	call   c0008169 <Phys::setPageState(unsigned long, bool)>
c0008592:	83 05 68 09 02 c0 02 	add    DWORD PTR ds:0xc0020968,0x2
c0008599:	83 c4 10             	add    esp,0x10
c000859c:	83 ec 08             	sub    esp,0x8
c000859f:	6a 00                	push   0x0
c00085a1:	53                   	push   ebx
c00085a2:	43                   	inc    ebx
c00085a3:	e8 c1 fb ff ff       	call   c0008169 <Phys::setPageState(unsigned long, bool)>
c00085a8:	83 c4 10             	add    esp,0x10
c00085ab:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00085b1:	75 e9                	jne    c000859c <Phys::physicalMemorySetup(unsigned int)+0x22c>
c00085b3:	a1 68 09 02 c0       	mov    eax,ds:0xc0020968
c00085b8:	bb 40 01 00 00       	mov    ebx,0x140
c00085bd:	83 c0 20             	add    eax,0x20
c00085c0:	a3 68 09 02 c0       	mov    ds:0xc0020968,eax
c00085c5:	eb 22                	jmp    c00085e9 <Phys::physicalMemorySetup(unsigned int)+0x279>
c00085c7:	83 ec 08             	sub    esp,0x8
c00085ca:	6a 00                	push   0x0
c00085cc:	53                   	push   ebx
c00085cd:	43                   	inc    ebx
c00085ce:	e8 96 fb ff ff       	call   c0008169 <Phys::setPageState(unsigned long, bool)>
c00085d3:	a1 68 09 02 c0       	mov    eax,ds:0xc0020968
c00085d8:	83 c4 10             	add    esp,0x10
c00085db:	40                   	inc    eax
c00085dc:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00085e2:	a3 68 09 02 c0       	mov    ds:0xc0020968,eax
c00085e7:	74 07                	je     c00085f0 <Phys::physicalMemorySetup(unsigned int)+0x280>
c00085e9:	3d ff 03 00 00       	cmp    eax,0x3ff
c00085ee:	7e d7                	jle    c00085c7 <Phys::physicalMemorySetup(unsigned int)+0x257>
c00085f0:	bb d0 01 00 00       	mov    ebx,0x1d0
c00085f5:	3d ff 07 00 00       	cmp    eax,0x7ff
c00085fa:	7f 22                	jg     c000861e <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c00085fc:	83 ec 08             	sub    esp,0x8
c00085ff:	6a 00                	push   0x0
c0008601:	53                   	push   ebx
c0008602:	43                   	inc    ebx
c0008603:	e8 61 fb ff ff       	call   c0008169 <Phys::setPageState(unsigned long, bool)>
c0008608:	a1 68 09 02 c0       	mov    eax,ds:0xc0020968
c000860d:	83 c4 10             	add    esp,0x10
c0008610:	40                   	inc    eax
c0008611:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0008617:	a3 68 09 02 c0       	mov    ds:0xc0020968,eax
c000861c:	75 d7                	jne    c00085f5 <Phys::physicalMemorySetup(unsigned int)+0x285>
c000861e:	83 c4 3c             	add    esp,0x3c
c0008621:	5b                   	pop    ebx
c0008622:	5e                   	pop    esi
c0008623:	5f                   	pop    edi
c0008624:	5d                   	pop    ebp
c0008625:	c3                   	ret    
c0008626:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000862e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008636:	e9 51 fe ff ff       	jmp    c000848c <Phys::physicalMemorySetup(unsigned int)+0x11c>
c000863b:	90                   	nop

c000863c <Pipe::isAtty()>:
c000863c:	31 c0                	xor    eax,eax
c000863e:	c3                   	ret    
c000863f:	90                   	nop

c0008640 <Pipe::~Pipe()>:
c0008640:	83 ec 0c             	sub    esp,0xc
c0008643:	ba 98 d8 01 c0       	mov    edx,0xc001d898
c0008648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000864c:	89 10                	mov    DWORD PTR [eax],edx
c000864e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008652:	83 ec 0c             	sub    esp,0xc
c0008655:	50                   	push   eax
c0008656:	e8 d1 10 00 00       	call   c000972c <UnixFile::~UnixFile()>
c000865b:	83 c4 10             	add    esp,0x10
c000865e:	90                   	nop
c000865f:	83 c4 0c             	add    esp,0xc
c0008662:	c3                   	ret    
c0008663:	90                   	nop

c0008664 <Pipe::~Pipe()>:
c0008664:	83 ec 0c             	sub    esp,0xc
c0008667:	83 ec 0c             	sub    esp,0xc
c000866a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000866e:	e8 cd ff ff ff       	call   c0008640 <Pipe::~Pipe()>
c0008673:	83 c4 10             	add    esp,0x10
c0008676:	83 ec 08             	sub    esp,0x8
c0008679:	6a 20                	push   0x20
c000867b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000867f:	e8 66 24 00 00       	call   c000aaea <operator delete(void*, unsigned long)>
c0008684:	83 c4 10             	add    esp,0x10
c0008687:	83 c4 0c             	add    esp,0xc
c000868a:	c3                   	ret    
c000868b:	90                   	nop

c000868c <Pipe::write(unsigned long long, void*, int*)>:
c000868c:	55                   	push   ebp
c000868d:	57                   	push   edi
c000868e:	56                   	push   esi
c000868f:	53                   	push   ebx
c0008690:	83 ec 1c             	sub    esp,0x1c
c0008693:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008697:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000869b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000869e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00086a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00086a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00086a9:	89 d8                	mov    eax,ebx
c00086ab:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00086ae:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00086b2:	89 d6                	mov    esi,edx
c00086b4:	89 d7                	mov    edi,edx
c00086b6:	c1 ff 1f             	sar    edi,0x1f
c00086b9:	03 34 24             	add    esi,DWORD PTR [esp]
c00086bc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00086c0:	c1 f8 1f             	sar    eax,0x1f
c00086c3:	39 f3                	cmp    ebx,esi
c00086c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086cd:	19 f8                	sbb    eax,edi
c00086cf:	b8 01 00 00 00       	mov    eax,0x1
c00086d4:	72 6e                	jb     c0008744 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00086d6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00086d9:	01 d0                	add    eax,edx
c00086db:	99                   	cdq    
c00086dc:	f7 fb                	idiv   ebx
c00086de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086e2:	29 d3                	sub    ebx,edx
c00086e4:	89 d7                	mov    edi,edx
c00086e6:	89 de                	mov    esi,ebx
c00086e8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00086eb:	c1 fb 1f             	sar    ebx,0x1f
c00086ee:	39 f2                	cmp    edx,esi
c00086f0:	19 d8                	sbb    eax,ebx
c00086f2:	b8 00 00 00 00       	mov    eax,0x0
c00086f7:	72 04                	jb     c00086fd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00086f9:	89 d0                	mov    eax,edx
c00086fb:	29 f0                	sub    eax,esi
c00086fd:	89 d3                	mov    ebx,edx
c00086ff:	29 c3                	sub    ebx,eax
c0008701:	74 0b                	je     c000870e <Pipe::write(unsigned long long, void*, int*)+0x82>
c0008703:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0008706:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000870a:	89 d9                	mov    ecx,ebx
c000870c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870e:	85 c0                	test   eax,eax
c0008710:	74 0d                	je     c000871f <Pipe::write(unsigned long long, void*, int*)+0x93>
c0008712:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0008716:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008719:	89 de                	mov    esi,ebx
c000871b:	89 c1                	mov    ecx,eax
c000871d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000871f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008722:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008727:	75 10                	jne    c0008739 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008729:	83 ec 0c             	sub    esp,0xc
c000872c:	68 55 d8 01 c0       	push   0xc001d855
c0008731:	e8 f9 7f 00 00       	call   c001072f <Krnl::panic(char const*)>
c0008736:	83 c4 10             	add    esp,0x10
c0008739:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000873d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008740:	89 08                	mov    DWORD PTR [eax],ecx
c0008742:	31 c0                	xor    eax,eax
c0008744:	83 c4 1c             	add    esp,0x1c
c0008747:	5b                   	pop    ebx
c0008748:	5e                   	pop    esi
c0008749:	5f                   	pop    edi
c000874a:	5d                   	pop    ebp
c000874b:	c3                   	ret    

c000874c <Pipe::read(unsigned long long, void*, int*)>:
c000874c:	55                   	push   ebp
c000874d:	57                   	push   edi
c000874e:	56                   	push   esi
c000874f:	53                   	push   ebx
c0008750:	83 ec 1c             	sub    esp,0x1c
c0008753:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008757:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000875b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000875f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008762:	89 c8                	mov    eax,ecx
c0008764:	99                   	cdq    
c0008765:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008769:	74 24                	je     c000878f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000876b:	39 f9                	cmp    ecx,edi
c000876d:	89 d1                	mov    ecx,edx
c000876f:	19 f1                	sbb    ecx,esi
c0008771:	73 1c                	jae    c000878f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008773:	fa                   	cli    
c0008774:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c000877a:	e8 05 b3 00 00       	call   c0013a84 <schedule()>
c000877f:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0008784:	48                   	dec    eax
c0008785:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000878a:	75 d3                	jne    c000875f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000878c:	fb                   	sti    
c000878d:	eb d0                	jmp    c000875f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000878f:	39 f8                	cmp    eax,edi
c0008791:	89 d1                	mov    ecx,edx
c0008793:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008796:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000879a:	19 f1                	sbb    ecx,esi
c000879c:	73 07                	jae    c00087a5 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000879e:	89 04 24             	mov    DWORD PTR [esp],eax
c00087a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00087a5:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00087a8:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00087ab:	29 f7                	sub    edi,esi
c00087ad:	89 f8                	mov    eax,edi
c00087af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00087b3:	99                   	cdq    
c00087b4:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00087b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00087bb:	19 d0                	sbb    eax,edx
c00087bd:	73 07                	jae    c00087c6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00087bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00087c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087c6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00087c9:	89 ea                	mov    edx,ebp
c00087cb:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00087cf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00087d4:	74 0d                	je     c00087e3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00087d6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087d9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00087dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00087e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00087e3:	85 d2                	test   edx,edx
c00087e5:	74 11                	je     c00087f8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00087e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087eb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00087ee:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00087f2:	89 d1                	mov    ecx,edx
c00087f4:	89 c7                	mov    edi,eax
c00087f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00087f8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00087fb:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00087fe:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008801:	99                   	cdq    
c0008802:	89 f7                	mov    edi,esi
c0008804:	03 04 24             	add    eax,DWORD PTR [esp]
c0008807:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000880b:	c1 ff 1f             	sar    edi,0x1f
c000880e:	57                   	push   edi
c000880f:	56                   	push   esi
c0008810:	52                   	push   edx
c0008811:	50                   	push   eax
c0008812:	e8 99 3a 01 00       	call   c001c2b0 <__umoddi3>
c0008817:	83 c4 10             	add    esp,0x10
c000881a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000881d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008822:	75 10                	jne    c0008834 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008824:	83 ec 0c             	sub    esp,0xc
c0008827:	68 72 d8 01 c0       	push   0xc001d872
c000882c:	e8 fe 7e 00 00       	call   c001072f <Krnl::panic(char const*)>
c0008831:	83 c4 10             	add    esp,0x10
c0008834:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008838:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000883b:	89 10                	mov    DWORD PTR [eax],edx
c000883d:	83 c4 1c             	add    esp,0x1c
c0008840:	31 c0                	xor    eax,eax
c0008842:	5b                   	pop    ebx
c0008843:	5e                   	pop    esi
c0008844:	5f                   	pop    edi
c0008845:	5d                   	pop    ebp
c0008846:	c3                   	ret    
c0008847:	90                   	nop

c0008848 <Pipe::Pipe(int)>:
c0008848:	83 ec 0c             	sub    esp,0xc
c000884b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000884f:	83 ec 08             	sub    esp,0x8
c0008852:	6a 00                	push   0x0
c0008854:	50                   	push   eax
c0008855:	e8 f0 0c 00 00       	call   c000954a <UnixFile::UnixFile(int)>
c000885a:	83 c4 10             	add    esp,0x10
c000885d:	ba 98 d8 01 c0       	mov    edx,0xc001d898
c0008862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008866:	89 10                	mov    DWORD PTR [eax],edx
c0008868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000886c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008870:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008877:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000887e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008882:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008889:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000888d:	83 ec 0c             	sub    esp,0xc
c0008890:	50                   	push   eax
c0008891:	e8 bb f5 ff ff       	call   c0007e51 <malloc>
c0008896:	83 c4 10             	add    esp,0x10
c0008899:	89 c2                	mov    edx,eax
c000889b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000889f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00088a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088a6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00088aa:	90                   	nop
c00088ab:	83 c4 0c             	add    esp,0xc
c00088ae:	c3                   	ret    
c00088af:	90                   	nop

c00088b0 <VgaText::isAtty()>:
c00088b0:	b0 01                	mov    al,0x1
c00088b2:	c3                   	ret    
c00088b3:	90                   	nop

c00088b4 <VgaText::~VgaText()>:
c00088b4:	83 ec 0c             	sub    esp,0xc
c00088b7:	ba 20 d9 01 c0       	mov    edx,0xc001d920
c00088bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088c0:	89 10                	mov    DWORD PTR [eax],edx
c00088c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088c6:	83 ec 0c             	sub    esp,0xc
c00088c9:	50                   	push   eax
c00088ca:	e8 5d 0e 00 00       	call   c000972c <UnixFile::~UnixFile()>
c00088cf:	83 c4 10             	add    esp,0x10
c00088d2:	90                   	nop
c00088d3:	83 c4 0c             	add    esp,0xc
c00088d6:	c3                   	ret    
c00088d7:	90                   	nop

c00088d8 <VgaText::~VgaText()>:
c00088d8:	83 ec 0c             	sub    esp,0xc
c00088db:	83 ec 0c             	sub    esp,0xc
c00088de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00088e2:	e8 cd ff ff ff       	call   c00088b4 <VgaText::~VgaText()>
c00088e7:	83 c4 10             	add    esp,0x10
c00088ea:	83 ec 08             	sub    esp,0x8
c00088ed:	68 34 01 00 00       	push   0x134
c00088f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00088f6:	e8 ef 21 00 00       	call   c000aaea <operator delete(void*, unsigned long)>
c00088fb:	83 c4 10             	add    esp,0x10
c00088fe:	83 c4 0c             	add    esp,0xc
c0008901:	c3                   	ret    

c0008902 <VgaText::read(unsigned long long, void*, int*)>:
c0008902:	83 ec 10             	sub    esp,0x10
c0008905:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008909:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000890d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008911:	e8 24 45 00 00       	call   c000ce3a <readKeyboard(VgaText*, char*, unsigned long)>
c0008916:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000891a:	89 02                	mov    DWORD PTR [edx],eax
c000891c:	31 c0                	xor    eax,eax
c000891e:	83 c4 1c             	add    esp,0x1c
c0008921:	c3                   	ret    

c0008922 <setTerminalScrollLock(bool)>:
c0008922:	c3                   	ret    

c0008923 <doTerminalCycle()>:
c0008923:	c3                   	ret    

c0008924 <addToTerminalCycle(VgaText*)>:
c0008924:	c3                   	ret    

c0008925 <scrollTerminalScrollLock(int)>:
c0008925:	c3                   	ret    

c0008926 <VgaText::updateTitle()>:
c0008926:	c3                   	ret    
c0008927:	90                   	nop

c0008928 <VgaText::load()>:
c0008928:	c3                   	ret    
c0008929:	90                   	nop

c000892a <VgaText::updateCursor()>:
c000892a:	83 ec 14             	sub    esp,0x14
c000892d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008931:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008934:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008937:	e8 bc db 00 00       	call   c00164f8 <HalConsoleCursorUpdate(int, int)>
c000893c:	83 c4 1c             	add    esp,0x1c
c000893f:	c3                   	ret    

c0008940 <VgaText::doANSI_SGR(int)>:
c0008940:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008948:	85 d2                	test   edx,edx
c000894a:	75 0b                	jne    c0008957 <VgaText::doANSI_SGR(int)+0x17>
c000894c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000894f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008952:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008955:	eb 59                	jmp    c00089b0 <VgaText::doANSI_SGR(int)+0x70>
c0008957:	83 fa 07             	cmp    edx,0x7
c000895a:	75 0b                	jne    c0008967 <VgaText::doANSI_SGR(int)+0x27>
c000895c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000895f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008962:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008965:	eb 49                	jmp    c00089b0 <VgaText::doANSI_SGR(int)+0x70>
c0008967:	83 fa 1b             	cmp    edx,0x1b
c000896a:	74 e0                	je     c000894c <VgaText::doANSI_SGR(int)+0xc>
c000896c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000896f:	83 f9 07             	cmp    ecx,0x7
c0008972:	77 09                	ja     c000897d <VgaText::doANSI_SGR(int)+0x3d>
c0008974:	8b 14 8d 40 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe07c0]
c000897b:	eb 20                	jmp    c000899d <VgaText::doANSI_SGR(int)+0x5d>
c000897d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008980:	83 f9 07             	cmp    ecx,0x7
c0008983:	77 09                	ja     c000898e <VgaText::doANSI_SGR(int)+0x4e>
c0008985:	8b 14 8d 40 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe07c0]
c000898c:	eb 22                	jmp    c00089b0 <VgaText::doANSI_SGR(int)+0x70>
c000898e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008991:	83 f9 07             	cmp    ecx,0x7
c0008994:	77 0b                	ja     c00089a1 <VgaText::doANSI_SGR(int)+0x61>
c0008996:	8b 14 95 f8 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0908]
c000899d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00089a0:	c3                   	ret    
c00089a1:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00089a4:	83 f9 07             	cmp    ecx,0x7
c00089a7:	77 0a                	ja     c00089b3 <VgaText::doANSI_SGR(int)+0x73>
c00089a9:	8b 14 95 d0 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0930]
c00089b0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00089b3:	c3                   	ret    

c00089b4 <VgaText::setDefaultBgColour(VgaColour)>:
c00089b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00089b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00089bc:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00089bf:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00089c2:	c3                   	ret    
c00089c3:	90                   	nop

c00089c4 <VgaText::setDefaultFgColour(VgaColour)>:
c00089c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00089c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00089cc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00089cf:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00089d2:	c3                   	ret    
c00089d3:	90                   	nop

c00089d4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00089d4:	53                   	push   ebx
c00089d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00089d9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00089dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00089e1:	51                   	push   ecx
c00089e2:	e8 cd ff ff ff       	call   c00089b4 <VgaText::setDefaultBgColour(VgaColour)>
c00089e7:	58                   	pop    eax
c00089e8:	5a                   	pop    edx
c00089e9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00089ed:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00089f1:	5b                   	pop    ebx
c00089f2:	eb d0                	jmp    c00089c4 <VgaText::setDefaultFgColour(VgaColour)>

c00089f4 <VgaText::setTitleTextColour(VgaColour)>:
c00089f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00089f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00089fc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00089ff:	c3                   	ret    

c0008a00 <VgaText::setTitleColour(VgaColour)>:
c0008a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008a04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008a08:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008a0b:	c3                   	ret    

c0008a0c <VgaText::setTitle(char*)>:
c0008a0c:	c3                   	ret    
c0008a0d:	90                   	nop

c0008a0e <VgaText::combineColours(unsigned char, unsigned char)>:
c0008a0e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008a12:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008a17:	83 e0 0f             	and    eax,0xf
c0008a1a:	c1 e2 04             	shl    edx,0x4
c0008a1d:	09 d0                	or     eax,edx
c0008a1f:	c3                   	ret    

c0008a20 <VgaText::scrollScreen()>:
c0008a20:	55                   	push   ebp
c0008a21:	b9 01 00 00 00       	mov    ecx,0x1
c0008a26:	57                   	push   edi
c0008a27:	56                   	push   esi
c0008a28:	53                   	push   ebx
c0008a29:	83 ec 0c             	sub    esp,0xc
c0008a2c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a30:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0008a36:	31 ff                	xor    edi,edi
c0008a38:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008a3b:	83 f9 18             	cmp    ecx,0x18
c0008a3e:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0008a41:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0008a48:	75 27                	jne    c0008a71 <VgaText::scrollScreen()+0x51>
c0008a4a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008a4d:	01 f5                	add    ebp,esi
c0008a4f:	f7 c7 01 00 00 00    	test   edi,0x1
c0008a55:	74 16                	je     c0008a6d <VgaText::scrollScreen()+0x4d>
c0008a57:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008a5b:	50                   	push   eax
c0008a5c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008a60:	50                   	push   eax
c0008a61:	e8 a8 ff ff ff       	call   c0008a0e <VgaText::combineColours(unsigned char, unsigned char)>
c0008a66:	5a                   	pop    edx
c0008a67:	5a                   	pop    edx
c0008a68:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0008a6b:	eb 04                	jmp    c0008a71 <VgaText::scrollScreen()+0x51>
c0008a6d:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0008a71:	47                   	inc    edi
c0008a72:	46                   	inc    esi
c0008a73:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008a79:	75 bd                	jne    c0008a38 <VgaText::scrollScreen()+0x18>
c0008a7b:	41                   	inc    ecx
c0008a7c:	83 f9 19             	cmp    ecx,0x19
c0008a7f:	75 af                	jne    c0008a30 <VgaText::scrollScreen()+0x10>
c0008a81:	39 1d 84 09 02 c0    	cmp    DWORD PTR ds:0xc0020984,ebx
c0008a87:	75 1f                	jne    c0008aa8 <VgaText::scrollScreen()+0x88>
c0008a89:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008a8d:	74 05                	je     c0008a94 <VgaText::scrollScreen()+0x74>
c0008a8f:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008a92:	eb 14                	jmp    c0008aa8 <VgaText::scrollScreen()+0x88>
c0008a94:	50                   	push   eax
c0008a95:	50                   	push   eax
c0008a96:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008a9a:	50                   	push   eax
c0008a9b:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008a9f:	50                   	push   eax
c0008aa0:	e8 df d8 00 00       	call   c0016384 <HalConsoleScroll(int, int)>
c0008aa5:	83 c4 10             	add    esp,0x10
c0008aa8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008aac:	83 c4 0c             	add    esp,0xc
c0008aaf:	5b                   	pop    ebx
c0008ab0:	5e                   	pop    esi
c0008ab1:	5f                   	pop    edi
c0008ab2:	5d                   	pop    ebp
c0008ab3:	e9 72 fe ff ff       	jmp    c000892a <VgaText::updateCursor()>

c0008ab8 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008ab8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008abd:	c1 e0 08             	shl    eax,0x8
c0008ac0:	89 c2                	mov    edx,eax
c0008ac2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0008ac7:	09 d0                	or     eax,edx
c0008ac9:	c3                   	ret    

c0008aca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008aca:	55                   	push   ebp
c0008acb:	57                   	push   edi
c0008acc:	56                   	push   esi
c0008acd:	53                   	push   ebx
c0008ace:	83 ec 1c             	sub    esp,0x1c
c0008ad1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008ad5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008ad9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008add:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ae1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0008ae5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008ae9:	0f b6 c3             	movzx  eax,bl
c0008aec:	50                   	push   eax
c0008aed:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008af2:	50                   	push   eax
c0008af3:	e8 16 ff ff ff       	call   c0008a0e <VgaText::combineColours(unsigned char, unsigned char)>
c0008af8:	5a                   	pop    edx
c0008af9:	0f b6 c0             	movzx  eax,al
c0008afc:	59                   	pop    ecx
c0008afd:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008b02:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008b06:	50                   	push   eax
c0008b07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008b0b:	e8 a8 ff ff ff       	call   c0008ab8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008b10:	5a                   	pop    edx
c0008b11:	66 6b d7 50          	imul   dx,di,0x50
c0008b15:	59                   	pop    ecx
c0008b16:	01 f2                	add    edx,esi
c0008b18:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008b1b:	0f b7 d2             	movzx  edx,dx
c0008b1e:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008b22:	39 2d 84 09 02 c0    	cmp    DWORD PTR ds:0xc0020984,ebp
c0008b28:	75 28                	jne    c0008b52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c0008b2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b2e:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008b32:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008b36:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008b3a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008b3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008b42:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008b46:	83 c4 1c             	add    esp,0x1c
c0008b49:	5b                   	pop    ebx
c0008b4a:	5e                   	pop    esi
c0008b4b:	5f                   	pop    edi
c0008b4c:	5d                   	pop    ebp
c0008b4d:	e9 3a d9 00 00       	jmp    c001648c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008b52:	83 c4 1c             	add    esp,0x1c
c0008b55:	5b                   	pop    ebx
c0008b56:	5e                   	pop    esi
c0008b57:	5f                   	pop    edi
c0008b58:	5d                   	pop    ebp
c0008b59:	c3                   	ret    

c0008b5a <VgaText::getCursorX()>:
c0008b5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b5e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008b61:	c3                   	ret    

c0008b62 <VgaText::getCursorY()>:
c0008b62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b66:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008b69:	c3                   	ret    

c0008b6a <VgaText::setCursor(int, int)>:
c0008b6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008b72:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008b75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008b79:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008b7c:	e9 a9 fd ff ff       	jmp    c000892a <VgaText::updateCursor()>

c0008b81 <setActiveTerminal(VgaText*)>:
c0008b81:	53                   	push   ebx
c0008b82:	83 ec 08             	sub    esp,0x8
c0008b85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b89:	85 db                	test   ebx,ebx
c0008b8b:	75 11                	jne    c0008b9e <setActiveTerminal(VgaText*)+0x1d>
c0008b8d:	c7 44 24 10 ac d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d8ac
c0008b95:	83 c4 08             	add    esp,0x8
c0008b98:	5b                   	pop    ebx
c0008b99:	e9 91 7b 00 00       	jmp    c001072f <Krnl::panic(char const*)>
c0008b9e:	a1 84 09 02 c0       	mov    eax,ds:0xc0020984
c0008ba3:	85 c0                	test   eax,eax
c0008ba5:	74 0c                	je     c0008bb3 <setActiveTerminal(VgaText*)+0x32>
c0008ba7:	83 ec 0c             	sub    esp,0xc
c0008baa:	50                   	push   eax
c0008bab:	e8 7a fd ff ff       	call   c000892a <VgaText::updateCursor()>
c0008bb0:	83 c4 10             	add    esp,0x10
c0008bb3:	89 1d 84 09 02 c0    	mov    DWORD PTR ds:0xc0020984,ebx
c0008bb9:	50                   	push   eax
c0008bba:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bbd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bc0:	53                   	push   ebx
c0008bc1:	e8 a4 ff ff ff       	call   c0008b6a <VgaText::setCursor(int, int)>
c0008bc6:	83 c4 18             	add    esp,0x18
c0008bc9:	5b                   	pop    ebx
c0008bca:	c3                   	ret    
c0008bcb:	90                   	nop

c0008bcc <VgaText::clearScreen()>:
c0008bcc:	57                   	push   edi
c0008bcd:	56                   	push   esi
c0008bce:	31 f6                	xor    esi,esi
c0008bd0:	53                   	push   ebx
c0008bd1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008bd5:	52                   	push   edx
c0008bd6:	6a 00                	push   0x0
c0008bd8:	6a 00                	push   0x0
c0008bda:	53                   	push   ebx
c0008bdb:	e8 8a ff ff ff       	call   c0008b6a <VgaText::setCursor(int, int)>
c0008be0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008be7:	83 c4 10             	add    esp,0x10
c0008bea:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008bed:	7e 20                	jle    c0008c0f <VgaText::clearScreen()+0x43>
c0008bef:	31 ff                	xor    edi,edi
c0008bf1:	50                   	push   eax
c0008bf2:	50                   	push   eax
c0008bf3:	56                   	push   esi
c0008bf4:	57                   	push   edi
c0008bf5:	47                   	inc    edi
c0008bf6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bf9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bfc:	6a 20                	push   0x20
c0008bfe:	53                   	push   ebx
c0008bff:	e8 c6 fe ff ff       	call   c0008aca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008c04:	83 c4 20             	add    esp,0x20
c0008c07:	83 ff 50             	cmp    edi,0x50
c0008c0a:	75 e5                	jne    c0008bf1 <VgaText::clearScreen()+0x25>
c0008c0c:	46                   	inc    esi
c0008c0d:	eb db                	jmp    c0008bea <VgaText::clearScreen()+0x1e>
c0008c0f:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c16:	5b                   	pop    ebx
c0008c17:	5e                   	pop    esi
c0008c18:	5f                   	pop    edi
c0008c19:	c3                   	ret    

c0008c1a <VgaText::setCursorX(int)>:
c0008c1a:	83 ec 10             	sub    esp,0x10
c0008c1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c21:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008c24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008c28:	50                   	push   eax
c0008c29:	e8 3c ff ff ff       	call   c0008b6a <VgaText::setCursor(int, int)>
c0008c2e:	83 c4 1c             	add    esp,0x1c
c0008c31:	c3                   	ret    

c0008c32 <VgaText::setCursorY(int)>:
c0008c32:	83 ec 10             	sub    esp,0x10
c0008c35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008c3d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008c40:	50                   	push   eax
c0008c41:	e8 24 ff ff ff       	call   c0008b6a <VgaText::setCursor(int, int)>
c0008c46:	83 c4 1c             	add    esp,0x1c
c0008c49:	c3                   	ret    

c0008c4a <VgaText::incrementCursor(bool)>:
c0008c4a:	56                   	push   esi
c0008c4b:	53                   	push   ebx
c0008c4c:	51                   	push   ecx
c0008c4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008c51:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008c55:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008c58:	40                   	inc    eax
c0008c59:	83 f8 50             	cmp    eax,0x50
c0008c5c:	74 05                	je     c0008c63 <VgaText::incrementCursor(bool)+0x19>
c0008c5e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c61:	eb 24                	jmp    c0008c87 <VgaText::incrementCursor(bool)+0x3d>
c0008c63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008c66:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008c6d:	8d 50 01             	lea    edx,[eax+0x1]
c0008c70:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008c73:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008c76:	75 0f                	jne    c0008c87 <VgaText::incrementCursor(bool)+0x3d>
c0008c78:	83 ec 0c             	sub    esp,0xc
c0008c7b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008c7e:	53                   	push   ebx
c0008c7f:	e8 9c fd ff ff       	call   c0008a20 <VgaText::scrollScreen()>
c0008c84:	83 c4 10             	add    esp,0x10
c0008c87:	89 f0                	mov    eax,esi
c0008c89:	84 c0                	test   al,al
c0008c8b:	74 0c                	je     c0008c99 <VgaText::incrementCursor(bool)+0x4f>
c0008c8d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c91:	5a                   	pop    edx
c0008c92:	5b                   	pop    ebx
c0008c93:	5e                   	pop    esi
c0008c94:	e9 91 fc ff ff       	jmp    c000892a <VgaText::updateCursor()>
c0008c99:	58                   	pop    eax
c0008c9a:	5b                   	pop    ebx
c0008c9b:	5e                   	pop    esi
c0008c9c:	c3                   	ret    
c0008c9d:	90                   	nop

c0008c9e <VgaText::decrementCursor(bool)>:
c0008c9e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008ca2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008ca6:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008ca9:	85 c0                	test   eax,eax
c0008cab:	74 04                	je     c0008cb1 <VgaText::decrementCursor(bool)+0x13>
c0008cad:	48                   	dec    eax
c0008cae:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008cb1:	84 c9                	test   cl,cl
c0008cb3:	74 09                	je     c0008cbe <VgaText::decrementCursor(bool)+0x20>
c0008cb5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008cb9:	e9 6c fc ff ff       	jmp    c000892a <VgaText::updateCursor()>
c0008cbe:	c3                   	ret    
c0008cbf:	90                   	nop

c0008cc0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008cc0:	53                   	push   ebx
c0008cc1:	83 ec 08             	sub    esp,0x8
c0008cc4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008cc8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ccc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008cd4:	3c 07                	cmp    al,0x7
c0008cd6:	75 21                	jne    c0008cf9 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c0008cd8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008ce0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008ce8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008cf0:	83 c4 08             	add    esp,0x8
c0008cf3:	5b                   	pop    ebx
c0008cf4:	e9 3e 2d 00 00       	jmp    c000ba37 <Krnl::beep(int, int, bool)>
c0008cf9:	3c 0d                	cmp    al,0xd
c0008cfb:	75 09                	jne    c0008d06 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008cfd:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008d04:	eb 2c                	jmp    c0008d32 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008d06:	3c 0a                	cmp    al,0xa
c0008d08:	75 31                	jne    c0008d3b <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008d0a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008d0d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008d14:	8d 50 01             	lea    edx,[eax+0x1]
c0008d17:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008d1a:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008d1d:	75 0f                	jne    c0008d2e <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008d1f:	83 ec 0c             	sub    esp,0xc
c0008d22:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008d25:	53                   	push   ebx
c0008d26:	e8 f5 fc ff ff       	call   c0008a20 <VgaText::scrollScreen()>
c0008d2b:	83 c4 10             	add    esp,0x10
c0008d2e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008d32:	83 c4 08             	add    esp,0x8
c0008d35:	5b                   	pop    ebx
c0008d36:	e9 ef fb ff ff       	jmp    c000892a <VgaText::updateCursor()>
c0008d3b:	3c 08                	cmp    al,0x8
c0008d3d:	75 25                	jne    c0008d64 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0008d3f:	50                   	push   eax
c0008d40:	50                   	push   eax
c0008d41:	6a 01                	push   0x1
c0008d43:	53                   	push   ebx
c0008d44:	e8 55 ff ff ff       	call   c0008c9e <VgaText::decrementCursor(bool)>
c0008d49:	5a                   	pop    edx
c0008d4a:	59                   	pop    ecx
c0008d4b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008d4e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008d51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008d54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008d57:	6a 20                	push   0x20
c0008d59:	53                   	push   ebx
c0008d5a:	e8 6b fd ff ff       	call   c0008aca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008d5f:	83 c4 28             	add    esp,0x28
c0008d62:	5b                   	pop    ebx
c0008d63:	c3                   	ret    
c0008d64:	83 ec 08             	sub    esp,0x8
c0008d67:	0f be c0             	movsx  eax,al
c0008d6a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008d6d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008d70:	51                   	push   ecx
c0008d71:	52                   	push   edx
c0008d72:	50                   	push   eax
c0008d73:	53                   	push   ebx
c0008d74:	e8 51 fd ff ff       	call   c0008aca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008d79:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008d7d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008d85:	83 c4 28             	add    esp,0x28
c0008d88:	5b                   	pop    ebx
c0008d89:	e9 bc fe ff ff       	jmp    c0008c4a <VgaText::incrementCursor(bool)>

c0008d8e <VgaText::putchar(char)>:
c0008d8e:	56                   	push   esi
c0008d8f:	53                   	push   ebx
c0008d90:	83 ec 14             	sub    esp,0x14
c0008d93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d97:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008d9b:	3c 5b                	cmp    al,0x5b
c0008d9d:	75 18                	jne    c0008db7 <VgaText::putchar(char)+0x29>
c0008d9f:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008da3:	74 1f                	je     c0008dc4 <VgaText::putchar(char)+0x36>
c0008da5:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008dab:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008db2:	e9 bd 00 00 00       	jmp    c0008e74 <VgaText::putchar(char)+0xe6>
c0008db7:	3c 1b                	cmp    al,0x1b
c0008db9:	75 09                	jne    c0008dc4 <VgaText::putchar(char)+0x36>
c0008dbb:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008dbf:	e9 b0 00 00 00       	jmp    c0008e74 <VgaText::putchar(char)+0xe6>
c0008dc4:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0008dc7:	84 c9                	test   cl,cl
c0008dc9:	0f 84 92 00 00 00    	je     c0008e61 <VgaText::putchar(char)+0xd3>
c0008dcf:	8d 50 c0             	lea    edx,[eax-0x40]
c0008dd2:	80 fa 3e             	cmp    dl,0x3e
c0008dd5:	77 76                	ja     c0008e4d <VgaText::putchar(char)+0xbf>
c0008dd7:	3c 6d                	cmp    al,0x6d
c0008dd9:	75 47                	jne    c0008e22 <VgaText::putchar(char)+0x94>
c0008ddb:	31 f6                	xor    esi,esi
c0008ddd:	31 d2                	xor    edx,edx
c0008ddf:	31 c0                	xor    eax,eax
c0008de1:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008de4:	7e 2d                	jle    c0008e13 <VgaText::putchar(char)+0x85>
c0008de6:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008deb:	80 fa 3b             	cmp    dl,0x3b
c0008dee:	75 17                	jne    c0008e07 <VgaText::putchar(char)+0x79>
c0008df0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0008df4:	50                   	push   eax
c0008df5:	53                   	push   ebx
c0008df6:	e8 45 fb ff ff       	call   c0008940 <VgaText::doANSI_SGR(int)>
c0008dfb:	59                   	pop    ecx
c0008dfc:	31 d2                	xor    edx,edx
c0008dfe:	58                   	pop    eax
c0008dff:	31 c0                	xor    eax,eax
c0008e01:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008e05:	eb 09                	jmp    c0008e10 <VgaText::putchar(char)+0x82>
c0008e07:	6b c0 0a             	imul   eax,eax,0xa
c0008e0a:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008e0e:	88 ca                	mov    dl,cl
c0008e10:	46                   	inc    esi
c0008e11:	eb ce                	jmp    c0008de1 <VgaText::putchar(char)+0x53>
c0008e13:	84 d2                	test   dl,dl
c0008e15:	74 2e                	je     c0008e45 <VgaText::putchar(char)+0xb7>
c0008e17:	50                   	push   eax
c0008e18:	53                   	push   ebx
c0008e19:	e8 22 fb ff ff       	call   c0008940 <VgaText::doANSI_SGR(int)>
c0008e1e:	58                   	pop    eax
c0008e1f:	5a                   	pop    edx
c0008e20:	eb 23                	jmp    c0008e45 <VgaText::putchar(char)+0xb7>
c0008e22:	3c 4a                	cmp    al,0x4a
c0008e24:	75 1f                	jne    c0008e45 <VgaText::putchar(char)+0xb7>
c0008e26:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008e2a:	75 19                	jne    c0008e45 <VgaText::putchar(char)+0xb7>
c0008e2c:	83 ec 0c             	sub    esp,0xc
c0008e2f:	53                   	push   ebx
c0008e30:	e8 97 fd ff ff       	call   c0008bcc <VgaText::clearScreen()>
c0008e35:	83 c4 0c             	add    esp,0xc
c0008e38:	6a 00                	push   0x0
c0008e3a:	6a 00                	push   0x0
c0008e3c:	53                   	push   ebx
c0008e3d:	e8 28 fd ff ff       	call   c0008b6a <VgaText::setCursor(int, int)>
c0008e42:	83 c4 10             	add    esp,0x10
c0008e45:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008e4b:	eb 27                	jmp    c0008e74 <VgaText::putchar(char)+0xe6>
c0008e4d:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0008e50:	83 fa 0e             	cmp    edx,0xe
c0008e53:	7f 1f                	jg     c0008e74 <VgaText::putchar(char)+0xe6>
c0008e55:	8d 4a 01             	lea    ecx,[edx+0x1]
c0008e58:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008e5b:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0008e5f:	eb 13                	jmp    c0008e74 <VgaText::putchar(char)+0xe6>
c0008e61:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e64:	0f be c0             	movsx  eax,al
c0008e67:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e6a:	50                   	push   eax
c0008e6b:	53                   	push   ebx
c0008e6c:	e8 4f fe ff ff       	call   c0008cc0 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008e71:	83 c4 10             	add    esp,0x10
c0008e74:	83 c4 14             	add    esp,0x14
c0008e77:	5b                   	pop    ebx
c0008e78:	5e                   	pop    esi
c0008e79:	c3                   	ret    

c0008e7a <VgaText::putx(unsigned int)>:
c0008e7a:	57                   	push   edi
c0008e7b:	b9 11 00 00 00       	mov    ecx,0x11
c0008e80:	56                   	push   esi
c0008e81:	be ba d8 01 c0       	mov    esi,0xc001d8ba
c0008e86:	53                   	push   ebx
c0008e87:	83 ec 20             	sub    esp,0x20
c0008e8a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008e8e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008e92:	fc                   	cld    
c0008e93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008e95:	be 08 00 00 00       	mov    esi,0x8
c0008e9a:	50                   	push   eax
c0008e9b:	50                   	push   eax
c0008e9c:	89 d8                	mov    eax,ebx
c0008e9e:	c1 e3 04             	shl    ebx,0x4
c0008ea1:	c1 e8 1c             	shr    eax,0x1c
c0008ea4:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008ea9:	50                   	push   eax
c0008eaa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008eae:	e8 db fe ff ff       	call   c0008d8e <VgaText::putchar(char)>
c0008eb3:	83 c4 10             	add    esp,0x10
c0008eb6:	4e                   	dec    esi
c0008eb7:	75 e1                	jne    c0008e9a <VgaText::putx(unsigned int)+0x20>
c0008eb9:	83 c4 20             	add    esp,0x20
c0008ebc:	5b                   	pop    ebx
c0008ebd:	5e                   	pop    esi
c0008ebe:	5f                   	pop    edi
c0008ebf:	c3                   	ret    

c0008ec0 <VgaText::puts(char const*)>:
c0008ec0:	53                   	push   ebx
c0008ec1:	83 ec 08             	sub    esp,0x8
c0008ec4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ec8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ecb:	84 c0                	test   al,al
c0008ecd:	74 12                	je     c0008ee1 <VgaText::puts(char const*)+0x21>
c0008ecf:	43                   	inc    ebx
c0008ed0:	51                   	push   ecx
c0008ed1:	51                   	push   ecx
c0008ed2:	50                   	push   eax
c0008ed3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ed7:	e8 b2 fe ff ff       	call   c0008d8e <VgaText::putchar(char)>
c0008edc:	83 c4 10             	add    esp,0x10
c0008edf:	eb e7                	jmp    c0008ec8 <VgaText::puts(char const*)+0x8>
c0008ee1:	83 c4 08             	add    esp,0x8
c0008ee4:	5b                   	pop    ebx
c0008ee5:	c3                   	ret    

c0008ee6 <VgaText::write(unsigned long long, void*, int*)>:
c0008ee6:	55                   	push   ebp
c0008ee7:	57                   	push   edi
c0008ee8:	56                   	push   esi
c0008ee9:	53                   	push   ebx
c0008eea:	83 ec 0c             	sub    esp,0xc
c0008eed:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ef1:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ef5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ef9:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008f00:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008f03:	39 eb                	cmp    ebx,ebp
c0008f05:	74 13                	je     c0008f1a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008f07:	43                   	inc    ebx
c0008f08:	50                   	push   eax
c0008f09:	50                   	push   eax
c0008f0a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008f0e:	50                   	push   eax
c0008f0f:	56                   	push   esi
c0008f10:	e8 79 fe ff ff       	call   c0008d8e <VgaText::putchar(char)>
c0008f15:	83 c4 10             	add    esp,0x10
c0008f18:	eb e9                	jmp    c0008f03 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008f1a:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008f21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f25:	89 38                	mov    DWORD PTR [eax],edi
c0008f27:	83 c4 0c             	add    esp,0xc
c0008f2a:	31 c0                	xor    eax,eax
c0008f2c:	5b                   	pop    ebx
c0008f2d:	5e                   	pop    esi
c0008f2e:	5f                   	pop    edi
c0008f2f:	5d                   	pop    ebp
c0008f30:	c3                   	ret    
c0008f31:	90                   	nop

c0008f32 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008f32:	55                   	push   ebp
c0008f33:	57                   	push   edi
c0008f34:	56                   	push   esi
c0008f35:	53                   	push   ebx
c0008f36:	83 ec 0c             	sub    esp,0xc
c0008f39:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008f3d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008f42:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008f49:	50                   	push   eax
c0008f4a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008f4f:	50                   	push   eax
c0008f50:	e8 b9 fa ff ff       	call   c0008a0e <VgaText::combineColours(unsigned char, unsigned char)>
c0008f55:	5a                   	pop    edx
c0008f56:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008f5b:	59                   	pop    ecx
c0008f5c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008f5f:	89 c5                	mov    ebp,eax
c0008f61:	0f b7 f6             	movzx  esi,si
c0008f64:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008f68:	01 f6                	add    esi,esi
c0008f6a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008f6d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008f70:	84 c0                	test   al,al
c0008f72:	0f 84 f4 00 00 00    	je     c000906c <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0008f78:	3c 0d                	cmp    al,0xd
c0008f7a:	75 0c                	jne    c0008f88 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008f7c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008f83:	e9 de 00 00 00       	jmp    c0009066 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008f88:	3c 0a                	cmp    al,0xa
c0008f8a:	75 45                	jne    c0008fd1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008f8c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008f8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008f96:	8d 48 01             	lea    ecx,[eax+0x1]
c0008f99:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008f9c:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008f9f:	75 0f                	jne    c0008fb0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008fa1:	83 ec 0c             	sub    esp,0xc
c0008fa4:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008fa7:	53                   	push   ebx
c0008fa8:	e8 73 fa ff ff       	call   c0008a20 <VgaText::scrollScreen()>
c0008fad:	83 c4 10             	add    esp,0x10
c0008fb0:	83 ec 0c             	sub    esp,0xc
c0008fb3:	53                   	push   ebx
c0008fb4:	e8 71 f9 ff ff       	call   c000892a <VgaText::updateCursor()>
c0008fb9:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008fc4:	0f b7 f6             	movzx  esi,si
c0008fc7:	01 f6                	add    esi,esi
c0008fc9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008fcc:	e9 95 00 00 00       	jmp    c0009066 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008fd1:	3c 08                	cmp    al,0x8
c0008fd3:	75 35                	jne    c000900a <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0008fd5:	51                   	push   ecx
c0008fd6:	51                   	push   ecx
c0008fd7:	6a 01                	push   0x1
c0008fd9:	53                   	push   ebx
c0008fda:	e8 bf fc ff ff       	call   c0008c9e <VgaText::decrementCursor(bool)>
c0008fdf:	5e                   	pop    esi
c0008fe0:	58                   	pop    eax
c0008fe1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008fe4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008fe7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008fea:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008fed:	6a 20                	push   0x20
c0008fef:	53                   	push   ebx
c0008ff0:	e8 d5 fa ff ff       	call   c0008aca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008ff5:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008ffa:	83 c4 20             	add    esp,0x20
c0008ffd:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0009000:	0f b7 f6             	movzx  esi,si
c0009003:	01 f6                	add    esi,esi
c0009005:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0009008:	eb 5c                	jmp    c0009066 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c000900a:	52                   	push   edx
c000900b:	52                   	push   edx
c000900c:	89 ea                	mov    edx,ebp
c000900e:	0f b6 ca             	movzx  ecx,dl
c0009011:	51                   	push   ecx
c0009012:	50                   	push   eax
c0009013:	e8 a0 fa ff ff       	call   c0008ab8 <VgaText::combineCharAndColour(char, unsigned char)>
c0009018:	83 c4 10             	add    esp,0x10
c000901b:	66 89 06             	mov    WORD PTR [esi],ax
c000901e:	39 1d 84 09 02 c0    	cmp    DWORD PTR ds:0xc0020984,ebx
c0009024:	75 1d                	jne    c0009043 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0009026:	83 ec 0c             	sub    esp,0xc
c0009029:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000902c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000902f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0009033:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0009037:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000903a:	50                   	push   eax
c000903b:	e8 4c d4 00 00       	call   c001648c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0009040:	83 c4 20             	add    esp,0x20
c0009043:	83 c6 02             	add    esi,0x2
c0009046:	50                   	push   eax
c0009047:	50                   	push   eax
c0009048:	6a 00                	push   0x0
c000904a:	53                   	push   ebx
c000904b:	e8 fa fb ff ff       	call   c0008c4a <VgaText::incrementCursor(bool)>
c0009050:	83 c4 10             	add    esp,0x10
c0009053:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0009057:	75 0d                	jne    c0009066 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0009059:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000905e:	0f b7 f6             	movzx  esi,si
c0009061:	01 f6                	add    esi,esi
c0009063:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0009066:	47                   	inc    edi
c0009067:	e9 01 ff ff ff       	jmp    c0008f6d <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c000906c:	83 ec 0c             	sub    esp,0xc
c000906f:	53                   	push   ebx
c0009070:	e8 b5 f8 ff ff       	call   c000892a <VgaText::updateCursor()>
c0009075:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000907c:	83 c4 1c             	add    esp,0x1c
c000907f:	5b                   	pop    ebx
c0009080:	5e                   	pop    esi
c0009081:	5f                   	pop    edi
c0009082:	5d                   	pop    ebp
c0009083:	c3                   	ret    

c0009084 <VgaText::VgaText(char const*)>:
c0009084:	56                   	push   esi
c0009085:	53                   	push   ebx
c0009086:	83 ec 04             	sub    esp,0x4
c0009089:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000908d:	83 ec 08             	sub    esp,0x8
c0009090:	6a 00                	push   0x0
c0009092:	50                   	push   eax
c0009093:	e8 b2 04 00 00       	call   c000954a <UnixFile::UnixFile(int)>
c0009098:	83 c4 10             	add    esp,0x10
c000909b:	ba 20 d9 01 c0       	mov    edx,0xc001d920
c00090a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090a4:	89 10                	mov    DWORD PTR [eax],edx
c00090a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090aa:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00090b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090b5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00090bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090c0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00090c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090c8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00090cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00090d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090db:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00090e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090e6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00090ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00090f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090fc:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0009103:	83 ec 0c             	sub    esp,0xc
c0009106:	6a 01                	push   0x1
c0009108:	e8 80 08 00 00       	call   c000998d <Virt::allocateKernelVirtualPages(int)>
c000910d:	83 c4 10             	add    esp,0x10
c0009110:	89 c2                	mov    edx,eax
c0009112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009116:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009119:	8b 1d 30 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a30
c000911f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009123:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009126:	89 c6                	mov    esi,eax
c0009128:	e8 f1 f0 ff ff       	call   c000821e <Phys::allocatePage()>
c000912d:	68 05 0c 00 00       	push   0xc05
c0009132:	56                   	push   esi
c0009133:	50                   	push   eax
c0009134:	53                   	push   ebx
c0009135:	e8 e8 0e 00 00       	call   c000a022 <VAS::mapPage(unsigned long, unsigned long, int)>
c000913a:	83 c4 10             	add    esp,0x10
c000913d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009141:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009144:	83 ec 04             	sub    esp,0x4
c0009147:	68 a0 0f 00 00       	push   0xfa0
c000914c:	6a 00                	push   0x0
c000914e:	50                   	push   eax
c000914f:	e8 9c 73 ff ff       	call   c00004f0 <memset>
c0009154:	83 c4 10             	add    esp,0x10
c0009157:	83 ec 04             	sub    esp,0x4
c000915a:	6a 00                	push   0x0
c000915c:	6a 07                	push   0x7
c000915e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009162:	e8 6d f8 ff ff       	call   c00089d4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0009167:	83 c4 10             	add    esp,0x10
c000916a:	83 ec 04             	sub    esp,0x4
c000916d:	6a 00                	push   0x0
c000916f:	6a 00                	push   0x0
c0009171:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009175:	e8 f0 f9 ff ff       	call   c0008b6a <VgaText::setCursor(int, int)>
c000917a:	83 c4 10             	add    esp,0x10
c000917d:	83 ec 0c             	sub    esp,0xc
c0009180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009184:	e8 43 fa ff ff       	call   c0008bcc <VgaText::clearScreen()>
c0009189:	83 c4 10             	add    esp,0x10
c000918c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009190:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0009194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009198:	05 82 00 00 00       	add    eax,0x82
c000919d:	83 ec 04             	sub    esp,0x4
c00091a0:	6a 30                	push   0x30
c00091a2:	6a 00                	push   0x0
c00091a4:	50                   	push   eax
c00091a5:	e8 46 73 ff ff       	call   c00004f0 <memset>
c00091aa:	83 c4 10             	add    esp,0x10
c00091ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091b1:	05 b2 00 00 00       	add    eax,0xb2
c00091b6:	83 ec 04             	sub    esp,0x4
c00091b9:	68 80 00 00 00       	push   0x80
c00091be:	6a 00                	push   0x0
c00091c0:	50                   	push   eax
c00091c1:	e8 2a 73 ff ff       	call   c00004f0 <memset>
c00091c6:	83 c4 10             	add    esp,0x10
c00091c9:	90                   	nop
c00091ca:	83 c4 04             	add    esp,0x4
c00091cd:	5b                   	pop    ebx
c00091ce:	5e                   	pop    esi
c00091cf:	c3                   	ret    

c00091d0 <VgaText::receiveKey(unsigned char)>:
c00091d0:	57                   	push   edi
c00091d1:	56                   	push   esi
c00091d2:	53                   	push   ebx
c00091d3:	83 ec 10             	sub    esp,0x10
c00091d6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00091da:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00091de:	84 db                	test   bl,bl
c00091e0:	0f 84 ba 00 00 00    	je     c00092a0 <VgaText::receiveKey(unsigned char)+0xd0>
c00091e6:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c00091ec:	80 fb 08             	cmp    bl,0x8
c00091ef:	75 2c                	jne    c000921d <VgaText::receiveKey(unsigned char)+0x4d>
c00091f1:	83 ec 0c             	sub    esp,0xc
c00091f4:	57                   	push   edi
c00091f5:	e8 66 73 ff ff       	call   c0000560 <strlen>
c00091fa:	83 c4 10             	add    esp,0x10
c00091fd:	85 c0                	test   eax,eax
c00091ff:	74 41                	je     c0009242 <VgaText::receiveKey(unsigned char)+0x72>
c0009201:	50                   	push   eax
c0009202:	50                   	push   eax
c0009203:	6a 08                	push   0x8
c0009205:	56                   	push   esi
c0009206:	e8 83 fb ff ff       	call   c0008d8e <VgaText::putchar(char)>
c000920b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000920e:	e8 4d 73 ff ff       	call   c0000560 <strlen>
c0009213:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c000921b:	eb 22                	jmp    c000923f <VgaText::receiveKey(unsigned char)+0x6f>
c000921d:	0f be c3             	movsx  eax,bl
c0009220:	52                   	push   edx
c0009221:	52                   	push   edx
c0009222:	50                   	push   eax
c0009223:	56                   	push   esi
c0009224:	e8 65 fb ff ff       	call   c0008d8e <VgaText::putchar(char)>
c0009229:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000922d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0009232:	59                   	pop    ecx
c0009233:	58                   	pop    eax
c0009234:	8d 44 24 16          	lea    eax,[esp+0x16]
c0009238:	50                   	push   eax
c0009239:	57                   	push   edi
c000923a:	e8 a1 75 ff ff       	call   c00007e0 <strcat>
c000923f:	83 c4 10             	add    esp,0x10
c0009242:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0009249:	75 05                	jne    c0009250 <VgaText::receiveKey(unsigned char)+0x80>
c000924b:	80 fb 0a             	cmp    bl,0xa
c000924e:	75 50                	jne    c00092a0 <VgaText::receiveKey(unsigned char)+0xd0>
c0009250:	83 ec 0c             	sub    esp,0xc
c0009253:	81 c6 b2 00 00 00    	add    esi,0xb2
c0009259:	56                   	push   esi
c000925a:	e8 01 73 ff ff       	call   c0000560 <strlen>
c000925f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009262:	89 c3                	mov    ebx,eax
c0009264:	e8 f7 72 ff ff       	call   c0000560 <strlen>
c0009269:	83 c4 10             	add    esp,0x10
c000926c:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0009270:	3d 80 00 00 00       	cmp    eax,0x80
c0009275:	76 10                	jbe    c0009287 <VgaText::receiveKey(unsigned char)+0xb7>
c0009277:	83 ec 0c             	sub    esp,0xc
c000927a:	68 cb d8 01 c0       	push   0xc001d8cb
c000927f:	e8 ab 74 00 00       	call   c001072f <Krnl::panic(char const*)>
c0009284:	83 c4 10             	add    esp,0x10
c0009287:	50                   	push   eax
c0009288:	50                   	push   eax
c0009289:	57                   	push   edi
c000928a:	56                   	push   esi
c000928b:	e8 50 75 ff ff       	call   c00007e0 <strcat>
c0009290:	83 c4 0c             	add    esp,0xc
c0009293:	6a 30                	push   0x30
c0009295:	6a 00                	push   0x0
c0009297:	57                   	push   edi
c0009298:	e8 53 72 ff ff       	call   c00004f0 <memset>
c000929d:	83 c4 10             	add    esp,0x10
c00092a0:	83 c4 10             	add    esp,0x10
c00092a3:	5b                   	pop    ebx
c00092a4:	5e                   	pop    esi
c00092a5:	5f                   	pop    edi
c00092a6:	c3                   	ret    
c00092a7:	90                   	nop

c00092a8 <VgaText::doUpdate()>:
c00092a8:	c3                   	ret    

c00092a9 <newTerminal(char*)>:
c00092a9:	83 ec 28             	sub    esp,0x28
c00092ac:	68 34 01 00 00       	push   0x134
c00092b1:	e8 9b eb ff ff       	call   c0007e51 <malloc>
c00092b6:	5a                   	pop    edx
c00092b7:	59                   	pop    ecx
c00092b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00092bc:	50                   	push   eax
c00092bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00092c1:	e8 be fd ff ff       	call   c0009084 <VgaText::VgaText(char const*)>
c00092c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092ca:	83 c4 2c             	add    esp,0x2c
c00092cd:	c3                   	ret    
c00092ce:	66 90                	xchg   ax,ax

c00092d0 <TSS::TSS()>:
c00092d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00092db:	90                   	nop
c00092dc:	c3                   	ret    
c00092dd:	90                   	nop
c00092de:	66 90                	xchg   ax,ax

c00092e0 <TSS::setESP(unsigned long)>:
c00092e0:	55                   	push   ebp
c00092e1:	89 e5                	mov    ebp,esp
c00092e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092e9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00092ec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00092ef:	90                   	nop
c00092f0:	5d                   	pop    ebp
c00092f1:	c3                   	ret    
c00092f2:	66 90                	xchg   ax,ax

c00092f4 <TSS::flush()>:
c00092f4:	55                   	push   ebp
c00092f5:	89 e5                	mov    ebp,esp
c00092f7:	83 ec 10             	sub    esp,0x10
c00092fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00092fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00092ff:	83 c8 03             	or     eax,0x3
c0009302:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0009306:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000930a:	66 89 d0             	mov    ax,dx
c000930d:	0f 00 d8             	ltr    ax
c0009310:	90                   	nop
c0009311:	c9                   	leave  
c0009312:	c3                   	ret    
c0009313:	90                   	nop

c0009314 <TSS::setup(unsigned long, unsigned long)>:
c0009314:	55                   	push   ebp
c0009315:	89 e5                	mov    ebp,esp
c0009317:	83 ec 18             	sub    esp,0x18
c000931a:	83 ec 0c             	sub    esp,0xc
c000931d:	6a 68                	push   0x68
c000931f:	e8 2d eb ff ff       	call   c0007e51 <malloc>
c0009324:	83 c4 10             	add    esp,0x10
c0009327:	89 c2                	mov    edx,eax
c0009329:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000932c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000932f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009332:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009335:	83 ec 04             	sub    esp,0x4
c0009338:	6a 68                	push   0x68
c000933a:	6a 00                	push   0x0
c000933c:	50                   	push   eax
c000933d:	e8 ae 71 ff ff       	call   c00004f0 <memset>
c0009342:	83 c4 10             	add    esp,0x10
c0009345:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009348:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000934b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0009351:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009354:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009357:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000935d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009360:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009363:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009366:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000936c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000936f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0009375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009378:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000937b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0009381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009384:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009387:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000938d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009390:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009393:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0009399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000939c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000939f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00093a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093ab:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00093b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00093ba:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00093bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093c3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00093c6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00093c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093cf:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00093d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093dc:	0f 20 da             	mov    edx,cr3
c00093df:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00093e2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00093e5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00093e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093ee:	83 ec 08             	sub    esp,0x8
c00093f1:	50                   	push   eax
c00093f2:	8d 45 ec             	lea    eax,[ebp-0x14]
c00093f5:	50                   	push   eax
c00093f6:	e8 e1 e2 ff ff       	call   c00076dc <GDTEntry::setBase(unsigned int)>
c00093fb:	83 c4 10             	add    esp,0x10
c00093fe:	83 ec 08             	sub    esp,0x8
c0009401:	6a 68                	push   0x68
c0009403:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009406:	50                   	push   eax
c0009407:	e8 ec e2 ff ff       	call   c00076f8 <GDTEntry::setLimit(unsigned int)>
c000940c:	83 c4 10             	add    esp,0x10
c000940f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009413:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009416:	83 e0 0f             	and    eax,0xf
c0009419:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000941c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000941f:	83 c8 40             	or     eax,0x40
c0009422:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009425:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000942a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009430:	05 78 01 00 00       	add    eax,0x178
c0009435:	83 ec 04             	sub    esp,0x4
c0009438:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000943b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000943e:	50                   	push   eax
c000943f:	e8 e8 e2 ff ff       	call   c000772c <GDT::addEntry(GDTEntry)>
c0009444:	83 c4 10             	add    esp,0x10
c0009447:	89 c2                	mov    edx,eax
c0009449:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000944c:	89 10                	mov    DWORD PTR [eax],edx
c000944e:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0009453:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009459:	05 78 01 00 00       	add    eax,0x178
c000945e:	83 ec 0c             	sub    esp,0xc
c0009461:	50                   	push   eax
c0009462:	e8 ef e2 ff ff       	call   c0007756 <GDT::flush()>
c0009467:	83 c4 10             	add    esp,0x10
c000946a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000946d:	8b 00                	mov    eax,DWORD PTR [eax]
c000946f:	c9                   	leave  
c0009470:	c3                   	ret    
c0009471:	90                   	nop

c0009472 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0009472:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009476:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000947a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000947d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009482:	75 08                	jne    c000948c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0009484:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000948a:	eb 38                	jmp    c00094c4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000948c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009491:	75 17                	jne    c00094aa <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009493:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009498:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000949b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00094a1:	8b 10                	mov    edx,DWORD PTR [eax]
c00094a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00094a7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00094aa:	89 c1                	mov    ecx,eax
c00094ac:	83 e1 fd             	and    ecx,0xfffffffd
c00094af:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00094b5:	74 cd                	je     c0009484 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00094b7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00094bc:	83 e0 ef             	and    eax,0xffffffef
c00094bf:	83 f8 08             	cmp    eax,0x8
c00094c2:	76 c0                	jbe    c0009484 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00094c4:	31 c0                	xor    eax,eax
c00094c6:	c3                   	ret    
c00094c7:	90                   	nop

c00094c8 <ReservedFilename::isAtty()>:
c00094c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094cc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00094cf:	31 c0                	xor    eax,eax
c00094d1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00094d7:	74 09                	je     c00094e2 <ReservedFilename::isAtty()+0x1a>
c00094d9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00094df:	0f 94 c0             	sete   al
c00094e2:	c3                   	ret    
c00094e3:	90                   	nop

c00094e4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00094e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094e8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00094ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00094ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00094f3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00094f8:	75 08                	jne    c0009502 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00094fa:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009500:	eb 3d                	jmp    c000953f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009502:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009507:	75 17                	jne    c0009520 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009509:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000950e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009511:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009517:	8b 10                	mov    edx,DWORD PTR [eax]
c0009519:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000951d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009520:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009525:	75 04                	jne    c000952b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009527:	89 0a                	mov    DWORD PTR [edx],ecx
c0009529:	eb 14                	jmp    c000953f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000952b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0009530:	74 c8                	je     c00094fa <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0009532:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009537:	83 e0 ef             	and    eax,0xffffffef
c000953a:	83 f8 08             	cmp    eax,0x8
c000953d:	76 bb                	jbe    c00094fa <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000953f:	31 c0                	xor    eax,eax
c0009541:	c3                   	ret    

c0009542 <UnixFile::getFileDescriptor()>:
c0009542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009546:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009549:	c3                   	ret    

c000954a <UnixFile::UnixFile(int)>:
c000954a:	53                   	push   ebx
c000954b:	83 ec 28             	sub    esp,0x28
c000954e:	ba e8 d9 01 c0       	mov    edx,0xc001d9e8
c0009553:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009557:	89 10                	mov    DWORD PTR [eax],edx
c0009559:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0009561:	0f 8f 8c 01 00 00    	jg     c00096f3 <UnixFile::UnixFile(int)+0x1a9>
c0009567:	a1 80 f8 01 c0       	mov    eax,ds:0xc001f880
c000956c:	8d 50 01             	lea    edx,[eax+0x1]
c000956f:	89 15 80 f8 01 c0    	mov    DWORD PTR ds:0xc001f880,edx
c0009575:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009579:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000957c:	83 ec 08             	sub    esp,0x8
c000957f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009583:	68 18 0a 02 c0       	push   0xc0020a18
c0009588:	e8 0b 2f 01 00       	call   c001c498 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000958d:	83 c4 10             	add    esp,0x10
c0009590:	a0 14 0a 02 c0       	mov    al,ds:0xc0020a14
c0009595:	83 f0 01             	xor    eax,0x1
c0009598:	84 c0                	test   al,al
c000959a:	0f 84 54 01 00 00    	je     c00096f4 <UnixFile::UnixFile(int)+0x1aa>
c00095a0:	c6 05 14 0a 02 c0 01 	mov    BYTE PTR ds:0xc0020a14,0x1
c00095a7:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00095af:	83 ec 0c             	sub    esp,0xc
c00095b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00095b6:	e8 96 e8 ff ff       	call   c0007e51 <malloc>
c00095bb:	83 c4 10             	add    esp,0x10
c00095be:	89 c3                	mov    ebx,eax
c00095c0:	83 ec 08             	sub    esp,0x8
c00095c3:	68 03 ff ff 0f       	push   0xfffff03
c00095c8:	53                   	push   ebx
c00095c9:	e8 2c 01 00 00       	call   c00096fa <ReservedFilename::ReservedFilename(int)>
c00095ce:	83 c4 10             	add    esp,0x10
c00095d1:	89 1d 0c 0a 02 c0    	mov    DWORD PTR ds:0xc0020a0c,ebx
c00095d7:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00095df:	83 ec 0c             	sub    esp,0xc
c00095e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095e6:	e8 66 e8 ff ff       	call   c0007e51 <malloc>
c00095eb:	83 c4 10             	add    esp,0x10
c00095ee:	89 c3                	mov    ebx,eax
c00095f0:	83 ec 08             	sub    esp,0x8
c00095f3:	68 01 ff ff 0f       	push   0xfffff01
c00095f8:	53                   	push   ebx
c00095f9:	e8 fc 00 00 00       	call   c00096fa <ReservedFilename::ReservedFilename(int)>
c00095fe:	83 c4 10             	add    esp,0x10
c0009601:	89 1d 10 0a 02 c0    	mov    DWORD PTR ds:0xc0020a10,ebx
c0009607:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000960f:	83 ec 0c             	sub    esp,0xc
c0009612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009616:	e8 36 e8 ff ff       	call   c0007e51 <malloc>
c000961b:	83 c4 10             	add    esp,0x10
c000961e:	89 c3                	mov    ebx,eax
c0009620:	83 ec 08             	sub    esp,0x8
c0009623:	68 00 ff ff 0f       	push   0xfffff00
c0009628:	53                   	push   ebx
c0009629:	e8 cc 00 00 00       	call   c00096fa <ReservedFilename::ReservedFilename(int)>
c000962e:	83 c4 10             	add    esp,0x10
c0009631:	89 1d 04 0a 02 c0    	mov    DWORD PTR ds:0xc0020a04,ebx
c0009637:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000963f:	83 ec 0c             	sub    esp,0xc
c0009642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009646:	e8 06 e8 ff ff       	call   c0007e51 <malloc>
c000964b:	83 c4 10             	add    esp,0x10
c000964e:	89 c3                	mov    ebx,eax
c0009650:	83 ec 08             	sub    esp,0x8
c0009653:	68 02 ff ff 0f       	push   0xfffff02
c0009658:	53                   	push   ebx
c0009659:	e8 9c 00 00 00       	call   c00096fa <ReservedFilename::ReservedFilename(int)>
c000965e:	83 c4 10             	add    esp,0x10
c0009661:	89 1d 08 0a 02 c0    	mov    DWORD PTR ds:0xc0020a08,ebx
c0009667:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000966f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0009674:	7f 7e                	jg     c00096f4 <UnixFile::UnixFile(int)+0x1aa>
c0009676:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000967e:	83 ec 0c             	sub    esp,0xc
c0009681:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009685:	e8 c7 e7 ff ff       	call   c0007e51 <malloc>
c000968a:	83 c4 10             	add    esp,0x10
c000968d:	89 c3                	mov    ebx,eax
c000968f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009693:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009698:	83 ec 08             	sub    esp,0x8
c000969b:	50                   	push   eax
c000969c:	53                   	push   ebx
c000969d:	e8 58 00 00 00       	call   c00096fa <ReservedFilename::ReservedFilename(int)>
c00096a2:	83 c4 10             	add    esp,0x10
c00096a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096a9:	89 1c 85 e0 09 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf620],ebx
c00096b0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00096b8:	83 ec 0c             	sub    esp,0xc
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 8d e7 ff ff       	call   c0007e51 <malloc>
c00096c4:	83 c4 10             	add    esp,0x10
c00096c7:	89 c3                	mov    ebx,eax
c00096c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096cd:	05 20 ff ff 0f       	add    eax,0xfffff20
c00096d2:	83 ec 08             	sub    esp,0x8
c00096d5:	50                   	push   eax
c00096d6:	53                   	push   ebx
c00096d7:	e8 1e 00 00 00       	call   c00096fa <ReservedFilename::ReservedFilename(int)>
c00096dc:	83 c4 10             	add    esp,0x10
c00096df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096e3:	89 1c 85 a0 09 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf660],ebx
c00096ea:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00096ee:	e9 7c ff ff ff       	jmp    c000966f <UnixFile::UnixFile(int)+0x125>
c00096f3:	90                   	nop
c00096f4:	83 c4 28             	add    esp,0x28
c00096f7:	5b                   	pop    ebx
c00096f8:	c3                   	ret    
c00096f9:	90                   	nop

c00096fa <ReservedFilename::ReservedFilename(int)>:
c00096fa:	83 ec 0c             	sub    esp,0xc
c00096fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009701:	83 ec 08             	sub    esp,0x8
c0009704:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009708:	50                   	push   eax
c0009709:	e8 3c fe ff ff       	call   c000954a <UnixFile::UnixFile(int)>
c000970e:	83 c4 10             	add    esp,0x10
c0009711:	ba 04 da 01 c0       	mov    edx,0xc001da04
c0009716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000971a:	89 10                	mov    DWORD PTR [eax],edx
c000971c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009720:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009724:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009727:	90                   	nop
c0009728:	83 c4 0c             	add    esp,0xc
c000972b:	c3                   	ret    

c000972c <UnixFile::~UnixFile()>:
c000972c:	83 ec 1c             	sub    esp,0x1c
c000972f:	ba e8 d9 01 c0       	mov    edx,0xc001d9e8
c0009734:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009738:	89 10                	mov    DWORD PTR [eax],edx
c000973a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000973e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009741:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0009746:	7f 73                	jg     c00097bb <UnixFile::~UnixFile()+0x8f>
c0009748:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009750:	83 ec 0c             	sub    esp,0xc
c0009753:	68 18 0a 02 c0       	push   0xc0020a18
c0009758:	e8 0f 2e 01 00       	call   c001c56c <LinkedList<UnixFile>::getFirstElement()>
c000975d:	83 c4 10             	add    esp,0x10
c0009760:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009764:	83 ec 0c             	sub    esp,0xc
c0009767:	68 18 0a 02 c0       	push   0xc0020a18
c000976c:	e8 03 2e 01 00       	call   c001c574 <LinkedList<UnixFile>::removeFirst()>
c0009771:	83 c4 10             	add    esp,0x10
c0009774:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009778:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000977c:	74 40                	je     c00097be <UnixFile::~UnixFile()+0x92>
c000977e:	83 ec 08             	sub    esp,0x8
c0009781:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009785:	68 18 0a 02 c0       	push   0xc0020a18
c000978a:	e8 09 2d 01 00       	call   c001c498 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000978f:	83 c4 10             	add    esp,0x10
c0009792:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009796:	8d 50 01             	lea    edx,[eax+0x1]
c0009799:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000979d:	3d 88 13 00 00       	cmp    eax,0x1388
c00097a2:	0f 94 c0             	sete   al
c00097a5:	84 c0                	test   al,al
c00097a7:	74 a7                	je     c0009750 <UnixFile::~UnixFile()+0x24>
c00097a9:	83 ec 0c             	sub    esp,0xc
c00097ac:	68 c0 d9 01 c0       	push   0xc001d9c0
c00097b1:	e8 79 6f 00 00       	call   c001072f <Krnl::panic(char const*)>
c00097b6:	83 c4 10             	add    esp,0x10
c00097b9:	eb 95                	jmp    c0009750 <UnixFile::~UnixFile()+0x24>
c00097bb:	90                   	nop
c00097bc:	eb 01                	jmp    c00097bf <UnixFile::~UnixFile()+0x93>
c00097be:	90                   	nop
c00097bf:	90                   	nop
c00097c0:	83 c4 1c             	add    esp,0x1c
c00097c3:	c3                   	ret    

c00097c4 <UnixFile::~UnixFile()>:
c00097c4:	83 ec 0c             	sub    esp,0xc
c00097c7:	83 ec 0c             	sub    esp,0xc
c00097ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097ce:	e8 59 ff ff ff       	call   c000972c <UnixFile::~UnixFile()>
c00097d3:	83 c4 10             	add    esp,0x10
c00097d6:	83 ec 08             	sub    esp,0x8
c00097d9:	6a 0c                	push   0xc
c00097db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097df:	e8 06 13 00 00       	call   c000aaea <operator delete(void*, unsigned long)>
c00097e4:	83 c4 10             	add    esp,0x10
c00097e7:	83 c4 0c             	add    esp,0xc
c00097ea:	c3                   	ret    
c00097eb:	90                   	nop

c00097ec <ReservedFilename::~ReservedFilename()>:
c00097ec:	83 ec 0c             	sub    esp,0xc
c00097ef:	ba 04 da 01 c0       	mov    edx,0xc001da04
c00097f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097f8:	89 10                	mov    DWORD PTR [eax],edx
c00097fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097fe:	83 ec 0c             	sub    esp,0xc
c0009801:	50                   	push   eax
c0009802:	e8 25 ff ff ff       	call   c000972c <UnixFile::~UnixFile()>
c0009807:	83 c4 10             	add    esp,0x10
c000980a:	90                   	nop
c000980b:	83 c4 0c             	add    esp,0xc
c000980e:	c3                   	ret    
c000980f:	90                   	nop

c0009810 <ReservedFilename::~ReservedFilename()>:
c0009810:	83 ec 0c             	sub    esp,0xc
c0009813:	83 ec 0c             	sub    esp,0xc
c0009816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000981a:	e8 cd ff ff ff       	call   c00097ec <ReservedFilename::~ReservedFilename()>
c000981f:	83 c4 10             	add    esp,0x10
c0009822:	83 ec 08             	sub    esp,0x8
c0009825:	6a 0c                	push   0xc
c0009827:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000982b:	e8 ba 12 00 00       	call   c000aaea <operator delete(void*, unsigned long)>
c0009830:	83 c4 10             	add    esp,0x10
c0009833:	83 c4 0c             	add    esp,0xc
c0009836:	c3                   	ret    

c0009837 <getFromFileDescriptor(int)>:
c0009837:	53                   	push   ebx
c0009838:	83 ec 08             	sub    esp,0x8
c000983b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000983f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009845:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000984b:	7f 2c                	jg     c0009879 <getFromFileDescriptor(int)+0x42>
c000984d:	83 ec 0c             	sub    esp,0xc
c0009850:	68 18 0a 02 c0       	push   0xc0020a18
c0009855:	e8 12 2d 01 00       	call   c001c56c <LinkedList<UnixFile>::getFirstElement()>
c000985a:	83 c4 10             	add    esp,0x10
c000985d:	85 c0                	test   eax,eax
c000985f:	75 04                	jne    c0009865 <getFromFileDescriptor(int)+0x2e>
c0009861:	31 c0                	xor    eax,eax
c0009863:	eb 6e                	jmp    c00098d3 <getFromFileDescriptor(int)+0x9c>
c0009865:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009868:	74 69                	je     c00098d3 <getFromFileDescriptor(int)+0x9c>
c000986a:	52                   	push   edx
c000986b:	52                   	push   edx
c000986c:	50                   	push   eax
c000986d:	68 18 0a 02 c0       	push   0xc0020a18
c0009872:	e8 9f 2d 01 00       	call   c001c616 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009877:	eb e1                	jmp    c000985a <getFromFileDescriptor(int)+0x23>
c0009879:	a1 0c 0a 02 c0       	mov    eax,ds:0xc0020a0c
c000987e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009884:	74 4d                	je     c00098d3 <getFromFileDescriptor(int)+0x9c>
c0009886:	a1 10 0a 02 c0       	mov    eax,ds:0xc0020a10
c000988b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009891:	74 40                	je     c00098d3 <getFromFileDescriptor(int)+0x9c>
c0009893:	a1 08 0a 02 c0       	mov    eax,ds:0xc0020a08
c0009898:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000989e:	74 33                	je     c00098d3 <getFromFileDescriptor(int)+0x9c>
c00098a0:	a1 04 0a 02 c0       	mov    eax,ds:0xc0020a04
c00098a5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00098ab:	74 26                	je     c00098d3 <getFromFileDescriptor(int)+0x9c>
c00098ad:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00098b3:	83 f8 08             	cmp    eax,0x8
c00098b6:	77 09                	ja     c00098c1 <getFromFileDescriptor(int)+0x8a>
c00098b8:	8b 04 85 e0 09 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf620]
c00098bf:	eb 12                	jmp    c00098d3 <getFromFileDescriptor(int)+0x9c>
c00098c1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00098c7:	83 fb 08             	cmp    ebx,0x8
c00098ca:	77 95                	ja     c0009861 <getFromFileDescriptor(int)+0x2a>
c00098cc:	8b 04 9d a0 09 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdf660]
c00098d3:	83 c4 08             	add    esp,0x8
c00098d6:	5b                   	pop    ebx
c00098d7:	c3                   	ret    

c00098d8 <__static_initialization_and_destruction_0(int, int)>:
c00098d8:	83 ec 0c             	sub    esp,0xc
c00098db:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00098e0:	75 34                	jne    c0009916 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00098e2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00098ea:	75 2a                	jne    c0009916 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00098ec:	83 ec 0c             	sub    esp,0xc
c00098ef:	68 18 0a 02 c0       	push   0xc0020a18
c00098f4:	e8 5d 2b 01 00       	call   c001c456 <LinkedList<UnixFile>::LinkedList()>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	83 ec 04             	sub    esp,0x4
c00098ff:	68 b8 f6 01 c0       	push   0xc001f6b8
c0009904:	68 18 0a 02 c0       	push   0xc0020a18
c0009909:	68 54 c4 01 c0       	push   0xc001c454
c000990e:	e8 87 11 00 00       	call   c000aa9a <__cxa_atexit>
c0009913:	83 c4 10             	add    esp,0x10
c0009916:	90                   	nop
c0009917:	83 c4 0c             	add    esp,0xc
c000991a:	c3                   	ret    

c000991b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000991b:	83 ec 0c             	sub    esp,0xc
c000991e:	83 ec 08             	sub    esp,0x8
c0009921:	68 ff ff 00 00       	push   0xffff
c0009926:	6a 01                	push   0x1
c0009928:	e8 ab ff ff ff       	call   c00098d8 <__static_initialization_and_destruction_0(int, int)>
c000992d:	83 c4 10             	add    esp,0x10
c0009930:	83 c4 0c             	add    esp,0xc
c0009933:	c3                   	ret    

c0009934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009934:	53                   	push   ebx
c0009935:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009939:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000993d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0009943:	89 c8                	mov    eax,ecx
c0009945:	d1 e8                	shr    eax,1
c0009947:	03 05 88 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f888
c000994d:	83 e1 01             	and    ecx,0x1
c0009950:	8a 10                	mov    dl,BYTE PTR [eax]
c0009952:	75 09                	jne    c000995d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0009954:	83 e2 f0             	and    edx,0xfffffff0
c0009957:	09 da                	or     edx,ebx
c0009959:	88 10                	mov    BYTE PTR [eax],dl
c000995b:	5b                   	pop    ebx
c000995c:	c3                   	ret    
c000995d:	c1 e3 04             	shl    ebx,0x4
c0009960:	83 e2 0f             	and    edx,0xf
c0009963:	09 da                	or     edx,ebx
c0009965:	88 10                	mov    BYTE PTR [eax],dl
c0009967:	5b                   	pop    ebx
c0009968:	c3                   	ret    

c0009969 <Virt::getPageState(unsigned long)>:
c0009969:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000996d:	8b 0d 88 f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f888
c0009973:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009979:	89 d0                	mov    eax,edx
c000997b:	d1 e8                	shr    eax,1
c000997d:	83 e2 01             	and    edx,0x1
c0009980:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009983:	75 04                	jne    c0009989 <Virt::getPageState(unsigned long)+0x20>
c0009985:	83 e0 0f             	and    eax,0xf
c0009988:	c3                   	ret    
c0009989:	c0 e8 04             	shr    al,0x4
c000998c:	c3                   	ret    

c000998d <Virt::allocateKernelVirtualPages(int)>:
c000998d:	55                   	push   ebp
c000998e:	31 ed                	xor    ebp,ebp
c0009990:	57                   	push   edi
c0009991:	56                   	push   esi
c0009992:	53                   	push   ebx
c0009993:	31 db                	xor    ebx,ebx
c0009995:	83 ec 1c             	sub    esp,0x1c
c0009998:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000999c:	8b 3d 84 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f884
c00099a2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00099a7:	57                   	push   edi
c00099a8:	e8 bc ff ff ff       	call   c0009969 <Virt::getPageState(unsigned long)>
c00099ad:	5a                   	pop    edx
c00099ae:	84 c0                	test   al,al
c00099b0:	75 3a                	jne    c00099ec <Virt::allocateKernelVirtualPages(int)+0x5f>
c00099b2:	85 db                	test   ebx,ebx
c00099b4:	75 02                	jne    c00099b8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00099b6:	89 fd                	mov    ebp,edi
c00099b8:	43                   	inc    ebx
c00099b9:	39 f3                	cmp    ebx,esi
c00099bb:	74 5a                	je     c0009a17 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00099bd:	47                   	inc    edi
c00099be:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00099c4:	76 31                	jbe    c00099f7 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00099c6:	c7 05 84 f8 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f884,0xc8000
c00099d0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00099d5:	75 28                	jne    c00099ff <Virt::allocateKernelVirtualPages(int)+0x72>
c00099d7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00099dc:	bf 00 80 0c 00       	mov    edi,0xc8000
c00099e1:	57                   	push   edi
c00099e2:	e8 82 ff ff ff       	call   c0009969 <Virt::getPageState(unsigned long)>
c00099e7:	5a                   	pop    edx
c00099e8:	84 c0                	test   al,al
c00099ea:	74 c6                	je     c00099b2 <Virt::allocateKernelVirtualPages(int)+0x25>
c00099ec:	31 db                	xor    ebx,ebx
c00099ee:	47                   	inc    edi
c00099ef:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00099f5:	77 cf                	ja     c00099c6 <Virt::allocateKernelVirtualPages(int)+0x39>
c00099f7:	89 3d 84 f8 01 c0    	mov    DWORD PTR ds:0xc001f884,edi
c00099fd:	eb a8                	jmp    c00099a7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00099ff:	83 ec 0c             	sub    esp,0xc
c0009a02:	68 18 da 01 c0       	push   0xc001da18
c0009a07:	e8 23 6d 00 00       	call   c001072f <Krnl::panic(char const*)>
c0009a0c:	8b 3d 84 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f884
c0009a12:	83 c4 10             	add    esp,0x10
c0009a15:	eb 90                	jmp    c00099a7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009a17:	89 2d 84 f8 01 c0    	mov    DWORD PTR ds:0xc001f884,ebp
c0009a1d:	4b                   	dec    ebx
c0009a1e:	74 5f                	je     c0009a7f <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009a20:	85 f6                	test   esi,esi
c0009a22:	74 3d                	je     c0009a61 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009a24:	89 e8                	mov    eax,ebp
c0009a26:	31 db                	xor    ebx,ebx
c0009a28:	8d 7e ff             	lea    edi,[esi-0x1]
c0009a2b:	eb 14                	jmp    c0009a41 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009a2d:	6a 01                	push   0x1
c0009a2f:	43                   	inc    ebx
c0009a30:	50                   	push   eax
c0009a31:	e8 fe fe ff ff       	call   c0009934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a36:	58                   	pop    eax
c0009a37:	39 f3                	cmp    ebx,esi
c0009a39:	5a                   	pop    edx
c0009a3a:	74 25                	je     c0009a61 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009a3c:	a1 84 f8 01 c0       	mov    eax,ds:0xc001f884
c0009a41:	8d 50 01             	lea    edx,[eax+0x1]
c0009a44:	85 db                	test   ebx,ebx
c0009a46:	89 15 84 f8 01 c0    	mov    DWORD PTR ds:0xc001f884,edx
c0009a4c:	74 20                	je     c0009a6e <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009a4e:	39 df                	cmp    edi,ebx
c0009a50:	75 db                	jne    c0009a2d <Virt::allocateKernelVirtualPages(int)+0xa0>
c0009a52:	6a 03                	push   0x3
c0009a54:	43                   	inc    ebx
c0009a55:	50                   	push   eax
c0009a56:	e8 d9 fe ff ff       	call   c0009934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a5b:	59                   	pop    ecx
c0009a5c:	39 f3                	cmp    ebx,esi
c0009a5e:	58                   	pop    eax
c0009a5f:	75 db                	jne    c0009a3c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009a61:	83 c4 1c             	add    esp,0x1c
c0009a64:	89 e8                	mov    eax,ebp
c0009a66:	5b                   	pop    ebx
c0009a67:	c1 e0 0c             	shl    eax,0xc
c0009a6a:	5e                   	pop    esi
c0009a6b:	5f                   	pop    edi
c0009a6c:	5d                   	pop    ebp
c0009a6d:	c3                   	ret    
c0009a6e:	6a 02                	push   0x2
c0009a70:	bb 01 00 00 00       	mov    ebx,0x1
c0009a75:	50                   	push   eax
c0009a76:	e8 b9 fe ff ff       	call   c0009934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a7b:	58                   	pop    eax
c0009a7c:	5a                   	pop    edx
c0009a7d:	eb bd                	jmp    c0009a3c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009a7f:	6a 04                	push   0x4
c0009a81:	8d 45 01             	lea    eax,[ebp+0x1]
c0009a84:	55                   	push   ebp
c0009a85:	a3 84 f8 01 c0       	mov    ds:0xc001f884,eax
c0009a8a:	e8 a5 fe ff ff       	call   c0009934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a8f:	59                   	pop    ecx
c0009a90:	89 e8                	mov    eax,ebp
c0009a92:	5b                   	pop    ebx
c0009a93:	c1 e0 0c             	shl    eax,0xc
c0009a96:	83 c4 1c             	add    esp,0x1c
c0009a99:	5b                   	pop    ebx
c0009a9a:	5e                   	pop    esi
c0009a9b:	5f                   	pop    edi
c0009a9c:	5d                   	pop    ebp
c0009a9d:	c3                   	ret    

c0009a9e <Virt::freeSwapfilePage(unsigned long)>:
c0009a9e:	53                   	push   ebx
c0009a9f:	8b 15 2c 0a 02 c0    	mov    edx,DWORD PTR ds:0xc0020a2c
c0009aa5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009aa9:	b8 01 00 00 00       	mov    eax,0x1
c0009aae:	89 cb                	mov    ebx,ecx
c0009ab0:	d3 e0                	shl    eax,cl
c0009ab2:	c1 eb 05             	shr    ebx,0x5
c0009ab5:	f7 d0                	not    eax
c0009ab7:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0009aba:	5b                   	pop    ebx
c0009abb:	c3                   	ret    

c0009abc <Virt::swapIDToSector(unsigned long)>:
c0009abc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ac0:	0f af 05 8c f8 01 c0 	imul   eax,DWORD PTR ds:0xc001f88c
c0009ac7:	03 05 94 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f894
c0009acd:	c3                   	ret    

c0009ace <Virt::allocateSwapfilePage()>:
c0009ace:	55                   	push   ebp
c0009acf:	31 d2                	xor    edx,edx
c0009ad1:	57                   	push   edi
c0009ad2:	56                   	push   esi
c0009ad3:	53                   	push   ebx
c0009ad4:	83 ec 0c             	sub    esp,0xc
c0009ad7:	8b 0d 8c f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f88c
c0009add:	a1 90 f8 01 c0       	mov    eax,ds:0xc001f890
c0009ae2:	f7 f1                	div    ecx
c0009ae4:	39 0d 90 f8 01 c0    	cmp    DWORD PTR ds:0xc001f890,ecx
c0009aea:	72 2d                	jb     c0009b19 <Virt::allocateSwapfilePage()+0x4b>
c0009aec:	8b 35 2c 0a 02 c0    	mov    esi,DWORD PTR ds:0xc0020a2c
c0009af2:	8b 16                	mov    edx,DWORD PTR [esi]
c0009af4:	f6 c2 01             	test   dl,0x1
c0009af7:	74 3c                	je     c0009b35 <Virt::allocateSwapfilePage()+0x67>
c0009af9:	31 c9                	xor    ecx,ecx
c0009afb:	bf 01 00 00 00       	mov    edi,0x1
c0009b00:	eb 12                	jmp    c0009b14 <Virt::allocateSwapfilePage()+0x46>
c0009b02:	89 fd                	mov    ebp,edi
c0009b04:	89 ca                	mov    edx,ecx
c0009b06:	d3 e5                	shl    ebp,cl
c0009b08:	c1 ea 05             	shr    edx,0x5
c0009b0b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009b0e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009b10:	85 ea                	test   edx,ebp
c0009b12:	74 2a                	je     c0009b3e <Virt::allocateSwapfilePage()+0x70>
c0009b14:	41                   	inc    ecx
c0009b15:	39 c8                	cmp    eax,ecx
c0009b17:	77 e9                	ja     c0009b02 <Virt::allocateSwapfilePage()+0x34>
c0009b19:	83 ec 0c             	sub    esp,0xc
c0009b1c:	68 7f db 01 c0       	push   0xc001db7f
c0009b21:	e8 09 6c 00 00       	call   c001072f <Krnl::panic(char const*)>
c0009b26:	83 c4 10             	add    esp,0x10
c0009b29:	31 c9                	xor    ecx,ecx
c0009b2b:	83 c4 0c             	add    esp,0xc
c0009b2e:	89 c8                	mov    eax,ecx
c0009b30:	5b                   	pop    ebx
c0009b31:	5e                   	pop    esi
c0009b32:	5f                   	pop    edi
c0009b33:	5d                   	pop    ebp
c0009b34:	c3                   	ret    
c0009b35:	89 f3                	mov    ebx,esi
c0009b37:	bd 01 00 00 00       	mov    ebp,0x1
c0009b3c:	31 c9                	xor    ecx,ecx
c0009b3e:	09 ea                	or     edx,ebp
c0009b40:	89 c8                	mov    eax,ecx
c0009b42:	89 13                	mov    DWORD PTR [ebx],edx
c0009b44:	83 c4 0c             	add    esp,0xc
c0009b47:	5b                   	pop    ebx
c0009b48:	5e                   	pop    esi
c0009b49:	5f                   	pop    edi
c0009b4a:	5d                   	pop    ebp
c0009b4b:	c3                   	ret    

c0009b4c <Virt::virtualMemorySetup()>:
c0009b4c:	53                   	push   ebx
c0009b4d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009b52:	6a 0f                	push   0xf
c0009b54:	53                   	push   ebx
c0009b55:	43                   	inc    ebx
c0009b56:	e8 d9 fd ff ff       	call   c0009934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b5b:	58                   	pop    eax
c0009b5c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009b62:	5a                   	pop    edx
c0009b63:	75 ed                	jne    c0009b52 <Virt::virtualMemorySetup()+0x6>
c0009b65:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009b6a:	6a 00                	push   0x0
c0009b6c:	53                   	push   ebx
c0009b6d:	43                   	inc    ebx
c0009b6e:	e8 c1 fd ff ff       	call   c0009934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b73:	59                   	pop    ecx
c0009b74:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009b7a:	58                   	pop    eax
c0009b7b:	75 ed                	jne    c0009b6a <Virt::virtualMemorySetup()+0x1e>
c0009b7d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009b82:	6a 0f                	push   0xf
c0009b84:	53                   	push   ebx
c0009b85:	43                   	inc    ebx
c0009b86:	e8 a9 fd ff ff       	call   c0009934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b8b:	58                   	pop    eax
c0009b8c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009b92:	5a                   	pop    edx
c0009b93:	75 ed                	jne    c0009b82 <Virt::virtualMemorySetup()+0x36>
c0009b95:	5b                   	pop    ebx
c0009b96:	c3                   	ret    

c0009b97 <Virt::setupPageSwapping(int)>:
c0009b97:	53                   	push   ebx
c0009b98:	83 ec 0c             	sub    esp,0xc
c0009b9b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009b9f:	a1 a8 2e 02 c0       	mov    eax,ds:0xc0022ea8
c0009ba4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009baa:	8b 10                	mov    edx,DWORD PTR [eax]
c0009bac:	53                   	push   ebx
c0009bad:	c1 e3 0b             	shl    ebx,0xb
c0009bb0:	68 96 db 01 c0       	push   0xc001db96
c0009bb5:	50                   	push   eax
c0009bb6:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009bb9:	89 1d 90 f8 01 c0    	mov    DWORD PTR ds:0xc001f890,ebx
c0009bbf:	c6 05 98 f8 01 c0 43 	mov    BYTE PTR ds:0xc001f898,0x43
c0009bc6:	c1 eb 08             	shr    ebx,0x8
c0009bc9:	a3 94 f8 01 c0       	mov    ds:0xc001f894,eax
c0009bce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009bd1:	c7 05 8c f8 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f88c,0x8
c0009bdb:	e8 71 e2 ff ff       	call   c0007e51 <malloc>
c0009be0:	83 c4 0c             	add    esp,0xc
c0009be3:	89 c1                	mov    ecx,eax
c0009be5:	a3 2c 0a 02 c0       	mov    ds:0xc0020a2c,eax
c0009bea:	31 d2                	xor    edx,edx
c0009bec:	a1 90 f8 01 c0       	mov    eax,ds:0xc001f890
c0009bf1:	f7 35 8c f8 01 c0    	div    DWORD PTR ds:0xc001f88c
c0009bf7:	c1 e8 05             	shr    eax,0x5
c0009bfa:	50                   	push   eax
c0009bfb:	6a 00                	push   0x0
c0009bfd:	51                   	push   ecx
c0009bfe:	e8 ed 68 ff ff       	call   c00004f0 <memset>
c0009c03:	83 c4 18             	add    esp,0x18
c0009c06:	5b                   	pop    ebx
c0009c07:	c3                   	ret    

c0009c08 <VAS::VAS()>:
c0009c08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c17:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009c1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c22:	a3 30 0a 02 c0       	mov    ds:0xc0020a30,eax
c0009c27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c2b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009c2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c33:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009c36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c3a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009c41:	90                   	nop
c0009c42:	c3                   	ret    
c0009c43:	90                   	nop

c0009c44 <VAS::VAS(VAS*)>:
c0009c44:	83 ec 0c             	sub    esp,0xc
c0009c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c4b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c56:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009c5d:	83 ec 0c             	sub    esp,0xc
c0009c60:	68 38 da 01 c0       	push   0xc001da38
c0009c65:	e8 c5 6a 00 00       	call   c001072f <Krnl::panic(char const*)>
c0009c6a:	83 c4 10             	add    esp,0x10
c0009c6d:	90                   	nop
c0009c6e:	83 c4 0c             	add    esp,0xc
c0009c71:	c3                   	ret    

c0009c72 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0009c72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c76:	89 c2                	mov    edx,eax
c0009c78:	c1 e8 0a             	shr    eax,0xa
c0009c7b:	c1 ea 16             	shr    edx,0x16
c0009c7e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009c83:	19 c9                	sbb    ecx,ecx
c0009c85:	c1 e2 0c             	shl    edx,0xc
c0009c88:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009c8e:	25 fc 0f 00 00       	and    eax,0xffc
c0009c93:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009c9a:	01 d0                	add    eax,edx
c0009c9c:	c3                   	ret    
c0009c9d:	90                   	nop

c0009c9e <VAS::getPageTableEntry(unsigned long)>:
c0009c9e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ca2:	89 ca                	mov    edx,ecx
c0009ca4:	c1 e9 0a             	shr    ecx,0xa
c0009ca7:	c1 ea 16             	shr    edx,0x16
c0009caa:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009cb0:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009cb6:	c1 e0 0c             	shl    eax,0xc
c0009cb9:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009cbc:	c3                   	ret    

c0009cbd <Virt::freeKernelVirtualPages(unsigned long)>:
c0009cbd:	57                   	push   edi
c0009cbe:	56                   	push   esi
c0009cbf:	be 01 00 00 00       	mov    esi,0x1
c0009cc4:	53                   	push   ebx
c0009cc5:	83 ec 10             	sub    esp,0x10
c0009cc8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009ccc:	c1 eb 0c             	shr    ebx,0xc
c0009ccf:	eb 3f                	jmp    c0009d10 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009cd1:	83 ec 08             	sub    esp,0x8
c0009cd4:	a1 30 0a 02 c0       	mov    eax,ds:0xc0020a30
c0009cd9:	57                   	push   edi
c0009cda:	50                   	push   eax
c0009cdb:	e8 be ff ff ff       	call   c0009c9e <VAS::getPageTableEntry(unsigned long)>
c0009ce0:	83 c4 10             	add    esp,0x10
c0009ce3:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ce5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009ce9:	f6 c4 04             	test   ah,0x4
c0009cec:	75 60                	jne    c0009d4e <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009cee:	80 fa 04             	cmp    dl,0x4
c0009cf1:	74 79                	je     c0009d6c <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0009cf3:	80 fa 02             	cmp    dl,0x2
c0009cf6:	0f 84 89 00 00 00    	je     c0009d85 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009cfc:	80 fa 03             	cmp    dl,0x3
c0009cff:	0f 84 ae 00 00 00    	je     c0009db3 <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0009d05:	fe ca                	dec    dl
c0009d07:	0f 84 93 00 00 00    	je     c0009da0 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009d0d:	43                   	inc    ebx
c0009d0e:	31 f6                	xor    esi,esi
c0009d10:	53                   	push   ebx
c0009d11:	89 df                	mov    edi,ebx
c0009d13:	e8 51 fc ff ff       	call   c0009969 <Virt::getPageState(unsigned long)>
c0009d18:	c1 e7 0c             	shl    edi,0xc
c0009d1b:	5a                   	pop    edx
c0009d1c:	84 c0                	test   al,al
c0009d1e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009d22:	75 ad                	jne    c0009cd1 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0009d24:	83 ec 0c             	sub    esp,0xc
c0009d27:	68 ad db 01 c0       	push   0xc001dbad
c0009d2c:	e8 fe 69 00 00       	call   c001072f <Krnl::panic(char const*)>
c0009d31:	5a                   	pop    edx
c0009d32:	59                   	pop    ecx
c0009d33:	57                   	push   edi
c0009d34:	8b 3d 30 0a 02 c0    	mov    edi,DWORD PTR ds:0xc0020a30
c0009d3a:	57                   	push   edi
c0009d3b:	e8 5e ff ff ff       	call   c0009c9e <VAS::getPageTableEntry(unsigned long)>
c0009d40:	83 c4 10             	add    esp,0x10
c0009d43:	8b 00                	mov    eax,DWORD PTR [eax]
c0009d45:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009d49:	f6 c4 04             	test   ah,0x4
c0009d4c:	74 bf                	je     c0009d0d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009d4e:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0009d52:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009d57:	83 ec 0c             	sub    esp,0xc
c0009d5a:	50                   	push   eax
c0009d5b:	e8 5c e4 ff ff       	call   c00081bc <Phys::freePage(unsigned long)>
c0009d60:	83 c4 10             	add    esp,0x10
c0009d63:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009d67:	80 fa 04             	cmp    dl,0x4
c0009d6a:	75 87                	jne    c0009cf3 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009d6c:	89 f0                	mov    eax,esi
c0009d6e:	84 c0                	test   al,al
c0009d70:	75 47                	jne    c0009db9 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c0009d72:	c7 44 24 20 5c da 01 c0 	mov    DWORD PTR [esp+0x20],0xc001da5c
c0009d7a:	83 c4 10             	add    esp,0x10
c0009d7d:	5b                   	pop    ebx
c0009d7e:	5e                   	pop    esi
c0009d7f:	5f                   	pop    edi
c0009d80:	e9 aa 69 00 00       	jmp    c001072f <Krnl::panic(char const*)>
c0009d85:	89 f0                	mov    eax,esi
c0009d87:	84 c0                	test   al,al
c0009d89:	75 15                	jne    c0009da0 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009d8b:	83 ec 0c             	sub    esp,0xc
c0009d8e:	68 c9 db 01 c0       	push   0xc001dbc9
c0009d93:	e8 97 69 00 00       	call   c001072f <Krnl::panic(char const*)>
c0009d98:	83 c4 10             	add    esp,0x10
c0009d9b:	e9 6d ff ff ff       	jmp    c0009d0d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009da0:	83 ec 08             	sub    esp,0x8
c0009da3:	6a 00                	push   0x0
c0009da5:	53                   	push   ebx
c0009da6:	e8 89 fb ff ff       	call   c0009934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009dab:	83 c4 10             	add    esp,0x10
c0009dae:	e9 5a ff ff ff       	jmp    c0009d0d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009db3:	89 f0                	mov    eax,esi
c0009db5:	84 c0                	test   al,al
c0009db7:	75 15                	jne    c0009dce <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009db9:	83 ec 08             	sub    esp,0x8
c0009dbc:	6a 00                	push   0x0
c0009dbe:	53                   	push   ebx
c0009dbf:	e8 70 fb ff ff       	call   c0009934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009dc4:	83 c4 10             	add    esp,0x10
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	5b                   	pop    ebx
c0009dcb:	5e                   	pop    esi
c0009dcc:	5f                   	pop    edi
c0009dcd:	c3                   	ret    
c0009dce:	c7 44 24 20 e5 db 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dbe5
c0009dd6:	83 c4 10             	add    esp,0x10
c0009dd9:	5b                   	pop    ebx
c0009dda:	5e                   	pop    esi
c0009ddb:	5f                   	pop    edi
c0009ddc:	e9 4e 69 00 00       	jmp    c001072f <Krnl::panic(char const*)>
c0009de1:	90                   	nop

c0009de2 <VAS::freeAllocatedPages(unsigned long)>:
c0009de2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009de6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009dea:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009dee:	74 09                	je     c0009df9 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009df0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009df4:	e9 c4 fe ff ff       	jmp    c0009cbd <Virt::freeKernelVirtualPages(unsigned long)>
c0009df9:	c7 44 24 04 80 da 01 c0 	mov    DWORD PTR [esp+0x4],0xc001da80
c0009e01:	e9 da 0d 00 00       	jmp    c000abe0 <Dbg::kprintf(char const*, ...)>

c0009e06 <VAS::virtualToPhysical(unsigned long)>:
c0009e06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e0a:	50                   	push   eax
c0009e0b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009e0f:	52                   	push   edx
c0009e10:	e8 89 fe ff ff       	call   c0009c9e <VAS::getPageTableEntry(unsigned long)>
c0009e15:	59                   	pop    ecx
c0009e16:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e18:	5a                   	pop    edx
c0009e19:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009e1e:	c3                   	ret    
c0009e1f:	90                   	nop

c0009e20 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009e20:	55                   	push   ebp
c0009e21:	57                   	push   edi
c0009e22:	56                   	push   esi
c0009e23:	53                   	push   ebx
c0009e24:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009e28:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009e2c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009e30:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009e34:	85 db                	test   ebx,ebx
c0009e36:	7e 22                	jle    c0009e5a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009e38:	c1 e3 0c             	shl    ebx,0xc
c0009e3b:	01 f3                	add    ebx,esi
c0009e3d:	56                   	push   esi
c0009e3e:	81 c6 00 10 00 00    	add    esi,0x1000
c0009e44:	55                   	push   ebp
c0009e45:	e8 54 fe ff ff       	call   c0009c9e <VAS::getPageTableEntry(unsigned long)>
c0009e4a:	5a                   	pop    edx
c0009e4b:	59                   	pop    ecx
c0009e4c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009e4e:	21 f9                	and    ecx,edi
c0009e50:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0009e54:	39 f3                	cmp    ebx,esi
c0009e56:	89 08                	mov    DWORD PTR [eax],ecx
c0009e58:	75 e3                	jne    c0009e3d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009e5a:	5b                   	pop    ebx
c0009e5b:	5e                   	pop    esi
c0009e5c:	5f                   	pop    edi
c0009e5d:	5d                   	pop    ebp
c0009e5e:	c3                   	ret    
c0009e5f:	90                   	nop

c0009e60 <VAS::setToWriteCombining(unsigned long, int)>:
c0009e60:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0009e65:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e6b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009e72:	75 01                	jne    c0009e75 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009e74:	c3                   	ret    
c0009e75:	68 80 00 00 00       	push   0x80
c0009e7a:	6a ff                	push   0xffffffff
c0009e7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009e80:	50                   	push   eax
c0009e81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009e85:	52                   	push   edx
c0009e86:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009e8a:	51                   	push   ecx
c0009e8b:	e8 90 ff ff ff       	call   c0009e20 <VAS::reflagRange(unsigned long, int, int, int)>
c0009e90:	83 c4 14             	add    esp,0x14
c0009e93:	c3                   	ret    

c0009e94 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009e94:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e9d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009ea0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ea4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009ea7:	19 c0                	sbb    eax,eax
c0009ea9:	83 ca 03             	or     edx,0x3
c0009eac:	83 e0 fc             	and    eax,0xfffffffc
c0009eaf:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009eb6:	0f 20 d8             	mov    eax,cr3
c0009eb9:	0f 22 d8             	mov    cr3,eax
c0009ebc:	c3                   	ret    
c0009ebd:	90                   	nop

c0009ebe <VAS::~VAS()>:
c0009ebe:	83 ec 2c             	sub    esp,0x2c
c0009ec1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009ec9:	fa                   	cli    
c0009eca:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0009ecf:	40                   	inc    eax
c0009ed0:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0009ed5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009eda:	8b 00                	mov    eax,DWORD PTR [eax]
c0009edc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009edf:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009ee5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009ee9:	6a 01                	push   0x1
c0009eeb:	50                   	push   eax
c0009eec:	e8 a3 ff ff ff       	call   c0009e94 <VAS::mapOtherVASIn(bool, VAS*)>
c0009ef1:	83 c4 0c             	add    esp,0xc
c0009ef4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009efc:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009f04:	0f 8f d4 00 00 00    	jg     c0009fde <VAS::~VAS()+0x120>
c0009f0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f0e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f11:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f15:	c1 e2 02             	shl    edx,0x2
c0009f18:	01 d0                	add    eax,edx
c0009f1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f24:	83 e0 01             	and    eax,0x1
c0009f27:	0f 84 a8 00 00 00    	je     c0009fd5 <VAS::~VAS()+0x117>
c0009f2d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009f35:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009f3d:	7f 72                	jg     c0009fb1 <VAS::~VAS()+0xf3>
c0009f3f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f43:	c1 e0 0a             	shl    eax,0xa
c0009f46:	89 c2                	mov    edx,eax
c0009f48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009f4c:	01 d0                	add    eax,edx
c0009f4e:	c1 e0 0c             	shl    eax,0xc
c0009f51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f55:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009f5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f5c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009f5f:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009f65:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009f69:	6a 01                	push   0x1
c0009f6b:	50                   	push   eax
c0009f6c:	e8 01 fd ff ff       	call   c0009c72 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009f71:	83 c4 0c             	add    esp,0xc
c0009f74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009f86:	25 01 04 00 00       	and    eax,0x401
c0009f8b:	3d 01 04 00 00       	cmp    eax,0x401
c0009f90:	75 19                	jne    c0009fab <VAS::~VAS()+0xed>
c0009f92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009f96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f9b:	83 ec 0c             	sub    esp,0xc
c0009f9e:	50                   	push   eax
c0009f9f:	e8 18 e2 ff ff       	call   c00081bc <Phys::freePage(unsigned long)>
c0009fa4:	83 c4 10             	add    esp,0x10
c0009fa7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009fab:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009faf:	eb 84                	jmp    c0009f35 <VAS::~VAS()+0x77>
c0009fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fb5:	25 00 04 00 00       	and    eax,0x400
c0009fba:	74 19                	je     c0009fd5 <VAS::~VAS()+0x117>
c0009fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fc0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fc5:	83 ec 0c             	sub    esp,0xc
c0009fc8:	50                   	push   eax
c0009fc9:	e8 ee e1 ff ff       	call   c00081bc <Phys::freePage(unsigned long)>
c0009fce:	83 c4 10             	add    esp,0x10
c0009fd1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009fd5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009fd9:	e9 1e ff ff ff       	jmp    c0009efc <VAS::~VAS()+0x3e>
c0009fde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fe2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	50                   	push   eax
c0009fe9:	e8 cf fc ff ff       	call   c0009cbd <Virt::freeKernelVirtualPages(unsigned long)>
c0009fee:	83 c4 10             	add    esp,0x10
c0009ff1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ff5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009ff8:	83 ec 0c             	sub    esp,0xc
c0009ffb:	50                   	push   eax
c0009ffc:	e8 bb e1 ff ff       	call   c00081bc <Phys::freePage(unsigned long)>
c000a001:	83 c4 10             	add    esp,0x10
c000a004:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000a008:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000a00d:	48                   	dec    eax
c000a00e:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000a013:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000a018:	85 c0                	test   eax,eax
c000a01a:	75 01                	jne    c000a01d <VAS::~VAS()+0x15f>
c000a01c:	fb                   	sti    
c000a01d:	90                   	nop
c000a01e:	83 c4 2c             	add    esp,0x2c
c000a021:	c3                   	ret    

c000a022 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000a022:	55                   	push   ebp
c000a023:	57                   	push   edi
c000a024:	56                   	push   esi
c000a025:	53                   	push   ebx
c000a026:	83 ec 1c             	sub    esp,0x1c
c000a029:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000a02d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a031:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000a037:	77 0b                	ja     c000a044 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000a039:	0f 20 d8             	mov    eax,cr3
c000a03c:	0f 20 d8             	mov    eax,cr3
c000a03f:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000a042:	75 47                	jne    c000a08b <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000a044:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a048:	09 d8                	or     eax,ebx
c000a04a:	a9 ff 0f 00 00       	test   eax,0xfff
c000a04f:	75 57                	jne    c000a0a8 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c000a051:	89 de                	mov    esi,ebx
c000a053:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a056:	c1 ee 16             	shr    esi,0x16
c000a059:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000a060:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000a064:	74 54                	je     c000a0ba <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000a066:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a06a:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000a070:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a074:	c1 e6 0c             	shl    esi,0xc
c000a077:	c1 eb 0a             	shr    ebx,0xa
c000a07a:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000a080:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000a083:	83 c4 1c             	add    esp,0x1c
c000a086:	5b                   	pop    ebx
c000a087:	5e                   	pop    esi
c000a088:	5f                   	pop    edi
c000a089:	5d                   	pop    ebp
c000a08a:	c3                   	ret    
c000a08b:	83 ec 0c             	sub    esp,0xc
c000a08e:	68 a4 da 01 c0       	push   0xc001daa4
c000a093:	e8 48 0b 00 00       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c000a098:	83 c4 10             	add    esp,0x10
c000a09b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a09f:	09 d8                	or     eax,ebx
c000a0a1:	a9 ff 0f 00 00       	test   eax,0xfff
c000a0a6:	74 a9                	je     c000a051 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000a0a8:	83 ec 0c             	sub    esp,0xc
c000a0ab:	68 0c db 01 c0       	push   0xc001db0c
c000a0b0:	e8 7a 66 00 00       	call   c001072f <Krnl::panic(char const*)>
c000a0b5:	83 c4 10             	add    esp,0x10
c000a0b8:	eb 97                	jmp    c000a051 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000a0ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a0be:	e8 5b e1 ff ff       	call   c000821e <Phys::allocatePage()>
c000a0c3:	83 ec 0c             	sub    esp,0xc
c000a0c6:	89 c5                	mov    ebp,eax
c000a0c8:	8b 0d 30 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a30
c000a0ce:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a0d2:	6a 01                	push   0x1
c000a0d4:	e8 b4 f8 ff ff       	call   c000998d <Virt::allocateKernelVirtualPages(int)>
c000a0d9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a0e0:	6a 01                	push   0x1
c000a0e2:	50                   	push   eax
c000a0e3:	55                   	push   ebp
c000a0e4:	81 cd 07 04 00 00    	or     ebp,0x407
c000a0ea:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a0ee:	51                   	push   ecx
c000a0ef:	e8 28 02 00 00       	call   c000a31c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0f4:	83 c4 1c             	add    esp,0x1c
c000a0f7:	68 00 10 00 00       	push   0x1000
c000a0fc:	6a 00                	push   0x0
c000a0fe:	50                   	push   eax
c000a0ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a103:	e8 e8 63 ff ff       	call   c00004f0 <memset>
c000a108:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a10c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a10f:	e8 a9 fb ff ff       	call   c0009cbd <Virt::freeKernelVirtualPages(unsigned long)>
c000a114:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a118:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a11b:	83 c4 10             	add    esp,0x10
c000a11e:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000a121:	e9 40 ff ff ff       	jmp    c000a066 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000a126 <VAS::allocatePages(int, int)>:
c000a126:	55                   	push   ebp
c000a127:	57                   	push   edi
c000a128:	56                   	push   esi
c000a129:	53                   	push   ebx
c000a12a:	83 ec 1c             	sub    esp,0x1c
c000a12d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a131:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a136:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a13c:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a142:	83 e0 01             	and    eax,0x1
c000a145:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000a149:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a14d:	0f 85 cc 00 00 00    	jne    c000a21f <VAS::allocatePages(int, int)+0xf9>
c000a153:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a156:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a15a:	85 c0                	test   eax,eax
c000a15c:	0f 84 a1 00 00 00    	je     c000a203 <VAS::allocatePages(int, int)+0xdd>
c000a162:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a166:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a16a:	c1 e6 0c             	shl    esi,0xc
c000a16d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000a171:	85 c0                	test   eax,eax
c000a173:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000a176:	7e 33                	jle    c000a1ab <VAS::allocatePages(int, int)+0x85>
c000a178:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a17c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a180:	81 cd 00 04 00 00    	or     ebp,0x400
c000a186:	e8 93 e0 ff ff       	call   c000821e <Phys::allocatePage()>
c000a18b:	55                   	push   ebp
c000a18c:	53                   	push   ebx
c000a18d:	50                   	push   eax
c000a18e:	57                   	push   edi
c000a18f:	e8 8e fe ff ff       	call   c000a022 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a194:	83 c4 10             	add    esp,0x10
c000a197:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a19c:	74 03                	je     c000a1a1 <VAS::allocatePages(int, int)+0x7b>
c000a19e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a1a1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a1a7:	39 de                	cmp    esi,ebx
c000a1a9:	75 db                	jne    c000a186 <VAS::allocatePages(int, int)+0x60>
c000a1ab:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a1b0:	75 12                	jne    c000a1c4 <VAS::allocatePages(int, int)+0x9e>
c000a1b2:	0f 20 d8             	mov    eax,cr3
c000a1b5:	0f 22 d8             	mov    cr3,eax
c000a1b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1bc:	83 c4 1c             	add    esp,0x1c
c000a1bf:	5b                   	pop    ebx
c000a1c0:	5e                   	pop    esi
c000a1c1:	5f                   	pop    edi
c000a1c2:	5d                   	pop    ebp
c000a1c3:	c3                   	ret    
c000a1c4:	c1 ee 0a             	shr    esi,0xa
c000a1c7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a1cb:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000a1d1:	c1 eb 0a             	shr    ebx,0xa
c000a1d4:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000a1da:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a1e0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a1e6:	39 c3                	cmp    ebx,eax
c000a1e8:	77 ce                	ja     c000a1b8 <VAS::allocatePages(int, int)+0x92>
c000a1ea:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a1ed:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a1f3:	39 d8                	cmp    eax,ebx
c000a1f5:	73 f3                	jae    c000a1ea <VAS::allocatePages(int, int)+0xc4>
c000a1f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1fb:	83 c4 1c             	add    esp,0x1c
c000a1fe:	5b                   	pop    ebx
c000a1ff:	5e                   	pop    esi
c000a200:	5f                   	pop    edi
c000a201:	5d                   	pop    ebp
c000a202:	c3                   	ret    
c000a203:	83 ec 0c             	sub    esp,0xc
c000a206:	68 30 db 01 c0       	push   0xc001db30
c000a20b:	e8 1f 65 00 00       	call   c001072f <Krnl::panic(char const*)>
c000a210:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a213:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a217:	83 c4 10             	add    esp,0x10
c000a21a:	e9 43 ff ff ff       	jmp    c000a162 <VAS::allocatePages(int, int)+0x3c>
c000a21f:	83 ec 0c             	sub    esp,0xc
c000a222:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000a226:	51                   	push   ecx
c000a227:	e8 61 f7 ff ff       	call   c000998d <Virt::allocateKernelVirtualPages(int)>
c000a22c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a230:	83 c4 10             	add    esp,0x10
c000a233:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000a238:	0f 87 9b 00 00 00    	ja     c000a2d9 <VAS::allocatePages(int, int)+0x1b3>
c000a23e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a242:	85 d2                	test   edx,edx
c000a244:	7e 3c                	jle    c000a282 <VAS::allocatePages(int, int)+0x15c>
c000a246:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a24a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a24e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a252:	c1 e5 0c             	shl    ebp,0xc
c000a255:	81 ce 00 04 00 00    	or     esi,0x400
c000a25b:	01 dd                	add    ebp,ebx
c000a25d:	e8 bc df ff ff       	call   c000821e <Phys::allocatePage()>
c000a262:	56                   	push   esi
c000a263:	53                   	push   ebx
c000a264:	50                   	push   eax
c000a265:	57                   	push   edi
c000a266:	e8 b7 fd ff ff       	call   c000a022 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a273:	74 03                	je     c000a278 <VAS::allocatePages(int, int)+0x152>
c000a275:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a278:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a27e:	39 dd                	cmp    ebp,ebx
c000a280:	75 db                	jne    c000a25d <VAS::allocatePages(int, int)+0x137>
c000a282:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a287:	0f 84 25 ff ff ff    	je     c000a1b2 <VAS::allocatePages(int, int)+0x8c>
c000a28d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a291:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a295:	89 d3                	mov    ebx,edx
c000a297:	c1 e0 0c             	shl    eax,0xc
c000a29a:	c1 eb 0a             	shr    ebx,0xa
c000a29d:	01 d0                	add    eax,edx
c000a29f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a2a5:	c1 e8 0a             	shr    eax,0xa
c000a2a8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a2ae:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2b3:	2d 00 00 40 00       	sub    eax,0x400000
c000a2b8:	39 c3                	cmp    ebx,eax
c000a2ba:	0f 87 f8 fe ff ff    	ja     c000a1b8 <VAS::allocatePages(int, int)+0x92>
c000a2c0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a2c3:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a2c9:	39 d8                	cmp    eax,ebx
c000a2cb:	73 f3                	jae    c000a2c0 <VAS::allocatePages(int, int)+0x19a>
c000a2cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2d1:	83 c4 1c             	add    esp,0x1c
c000a2d4:	5b                   	pop    ebx
c000a2d5:	5e                   	pop    esi
c000a2d6:	5f                   	pop    edi
c000a2d7:	5d                   	pop    ebp
c000a2d8:	c3                   	ret    
c000a2d9:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a2de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2e4:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000a2eb:	0f 84 4d ff ff ff    	je     c000a23e <VAS::allocatePages(int, int)+0x118>
c000a2f1:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000a2f9:	e9 40 ff ff ff       	jmp    c000a23e <VAS::allocatePages(int, int)+0x118>

c000a2fe <VAS::setCPUSpecific(unsigned long)>:
c000a2fe:	83 ec 0c             	sub    esp,0xc
c000a301:	6a 05                	push   0x5
c000a303:	68 00 00 40 c2       	push   0xc2400000
c000a308:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a30c:	50                   	push   eax
c000a30d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a311:	52                   	push   edx
c000a312:	e8 0b fd ff ff       	call   c000a022 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a317:	83 c4 1c             	add    esp,0x1c
c000a31a:	c3                   	ret    
c000a31b:	90                   	nop

c000a31c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000a31c:	55                   	push   ebp
c000a31d:	57                   	push   edi
c000a31e:	56                   	push   esi
c000a31f:	53                   	push   ebx
c000a320:	83 ec 1c             	sub    esp,0x1c
c000a323:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a328:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a32c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a332:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a336:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a33c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a340:	83 e0 01             	and    eax,0x1
c000a343:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a347:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a34b:	85 c0                	test   eax,eax
c000a34d:	7e 39                	jle    c000a388 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000a34f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a353:	89 f3                	mov    ebx,esi
c000a355:	c1 e0 0c             	shl    eax,0xc
c000a358:	01 f0                	add    eax,esi
c000a35a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a364:	29 f0                	sub    eax,esi
c000a366:	01 d8                	add    eax,ebx
c000a368:	50                   	push   eax
c000a369:	57                   	push   edi
c000a36a:	e8 b3 fc ff ff       	call   c000a022 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a36f:	83 c4 10             	add    esp,0x10
c000a372:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a377:	74 03                	je     c000a37c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000a379:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a37c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a382:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000a386:	75 d6                	jne    c000a35e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a388:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a38d:	75 10                	jne    c000a39f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000a38f:	0f 20 d8             	mov    eax,cr3
c000a392:	0f 22 d8             	mov    cr3,eax
c000a395:	83 c4 1c             	add    esp,0x1c
c000a398:	89 f0                	mov    eax,esi
c000a39a:	5b                   	pop    ebx
c000a39b:	5e                   	pop    esi
c000a39c:	5f                   	pop    edi
c000a39d:	5d                   	pop    ebp
c000a39e:	c3                   	ret    
c000a39f:	89 f3                	mov    ebx,esi
c000a3a1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a3a5:	c1 eb 0a             	shr    ebx,0xa
c000a3a8:	c1 e0 0c             	shl    eax,0xc
c000a3ab:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3b1:	01 f0                	add    eax,esi
c000a3b3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a3b9:	c1 e8 0a             	shr    eax,0xa
c000a3bc:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a3c1:	2d 00 00 40 00       	sub    eax,0x400000
c000a3c6:	39 c3                	cmp    ebx,eax
c000a3c8:	77 cb                	ja     c000a395 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000a3ca:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a3cd:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a3d3:	39 d8                	cmp    eax,ebx
c000a3d5:	73 f3                	jae    c000a3ca <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000a3d7:	83 c4 1c             	add    esp,0x1c
c000a3da:	89 f0                	mov    eax,esi
c000a3dc:	5b                   	pop    ebx
c000a3dd:	5e                   	pop    esi
c000a3de:	5f                   	pop    edi
c000a3df:	5d                   	pop    ebp
c000a3e0:	c3                   	ret    
c000a3e1:	90                   	nop

c000a3e2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a3e2:	55                   	push   ebp
c000a3e3:	57                   	push   edi
c000a3e4:	56                   	push   esi
c000a3e5:	53                   	push   ebx
c000a3e6:	83 ec 1c             	sub    esp,0x1c
c000a3e9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a3ed:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a3f1:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000a3f5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000a3f9:	a9 ff 0f 00 00       	test   eax,0xfff
c000a3fe:	75 4a                	jne    c000a44a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000a400:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a404:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a407:	c1 eb 16             	shr    ebx,0x16
c000a40a:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000a411:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000a415:	74 4d                	je     c000a464 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000a417:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a41b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000a41f:	c1 e8 0a             	shr    eax,0xa
c000a422:	80 fa 01             	cmp    dl,0x1
c000a425:	19 d2                	sbb    edx,edx
c000a427:	c1 e3 0c             	shl    ebx,0xc
c000a42a:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000a42e:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000a434:	25 fc 0f 00 00       	and    eax,0xffc
c000a439:	01 d8                	add    eax,ebx
c000a43b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000a442:	83 c4 1c             	add    esp,0x1c
c000a445:	5b                   	pop    ebx
c000a446:	5e                   	pop    esi
c000a447:	5f                   	pop    edi
c000a448:	5d                   	pop    ebp
c000a449:	c3                   	ret    
c000a44a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a44e:	83 ec 0c             	sub    esp,0xc
c000a451:	68 5c db 01 c0       	push   0xc001db5c
c000a456:	e8 d4 62 00 00       	call   c001072f <Krnl::panic(char const*)>
c000a45b:	83 c4 10             	add    esp,0x10
c000a45e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a462:	eb 9c                	jmp    c000a400 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	e8 b1 dd ff ff       	call   c000821e <Phys::allocatePage()>
c000a46d:	83 ec 0c             	sub    esp,0xc
c000a470:	89 c5                	mov    ebp,eax
c000a472:	8b 0d 30 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020a30
c000a478:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a47c:	6a 01                	push   0x1
c000a47e:	e8 0a f5 ff ff       	call   c000998d <Virt::allocateKernelVirtualPages(int)>
c000a483:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a48a:	6a 01                	push   0x1
c000a48c:	50                   	push   eax
c000a48d:	55                   	push   ebp
c000a48e:	81 cd 07 04 00 00    	or     ebp,0x407
c000a494:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a498:	51                   	push   ecx
c000a499:	e8 7e fe ff ff       	call   c000a31c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a49e:	83 c4 1c             	add    esp,0x1c
c000a4a1:	68 00 10 00 00       	push   0x1000
c000a4a6:	6a 00                	push   0x0
c000a4a8:	50                   	push   eax
c000a4a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a4ad:	e8 3e 60 ff ff       	call   c00004f0 <memset>
c000a4b2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a4b6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a4b9:	e8 ff f7 ff ff       	call   c0009cbd <Virt::freeKernelVirtualPages(unsigned long)>
c000a4be:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a4c1:	83 c4 10             	add    esp,0x10
c000a4c4:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000a4c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a4cb:	e9 47 ff ff ff       	jmp    c000a417 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000a4d0 <VAS::VAS(bool)>:
c000a4d0:	53                   	push   ebx
c000a4d1:	83 ec 28             	sub    esp,0x28
c000a4d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a4d8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a4dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a4e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4eb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a4f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4f6:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a4fa:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a4fd:	e8 1c dd ff ff       	call   c000821e <Phys::allocatePage()>
c000a502:	89 c2                	mov    edx,eax
c000a504:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a508:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a50b:	8b 1d 30 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a30
c000a511:	83 ec 0c             	sub    esp,0xc
c000a514:	6a 01                	push   0x1
c000a516:	e8 72 f4 ff ff       	call   c000998d <Virt::allocateKernelVirtualPages(int)>
c000a51b:	83 c4 10             	add    esp,0x10
c000a51e:	89 c2                	mov    edx,eax
c000a520:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a524:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a527:	83 ec 0c             	sub    esp,0xc
c000a52a:	6a 03                	push   0x3
c000a52c:	6a 01                	push   0x1
c000a52e:	52                   	push   edx
c000a52f:	50                   	push   eax
c000a530:	53                   	push   ebx
c000a531:	e8 e6 fd ff ff       	call   c000a31c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a536:	83 c4 20             	add    esp,0x20
c000a539:	89 c2                	mov    edx,eax
c000a53b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a53f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a542:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a54a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a552:	7f 1c                	jg     c000a570 <VAS::VAS(bool)+0xa0>
c000a554:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a558:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a55b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a55f:	c1 e2 02             	shl    edx,0x2
c000a562:	01 d0                	add    eax,edx
c000a564:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a56a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000a56e:	eb da                	jmp    c000a54a <VAS::VAS(bool)+0x7a>
c000a570:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a578:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a580:	7f 7a                	jg     c000a5fc <VAS::VAS(bool)+0x12c>
c000a582:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a586:	2d 00 02 00 00       	sub    eax,0x200
c000a58b:	c1 e0 0c             	shl    eax,0xc
c000a58e:	83 c8 03             	or     eax,0x3
c000a591:	89 c2                	mov    edx,eax
c000a593:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a598:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a59e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a5a4:	83 e0 10             	and    eax,0x10
c000a5a7:	84 c0                	test   al,al
c000a5a9:	74 07                	je     c000a5b2 <VAS::VAS(bool)+0xe2>
c000a5ab:	b8 00 01 00 00       	mov    eax,0x100
c000a5b0:	eb 05                	jmp    c000a5b7 <VAS::VAS(bool)+0xe7>
c000a5b2:	b8 00 00 00 00       	mov    eax,0x0
c000a5b7:	09 d0                	or     eax,edx
c000a5b9:	89 c1                	mov    ecx,eax
c000a5bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a5bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a5c2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a5c6:	c1 e2 02             	shl    edx,0x2
c000a5c9:	01 d0                	add    eax,edx
c000a5cb:	89 ca                	mov    edx,ecx
c000a5cd:	89 10                	mov    DWORD PTR [eax],edx
c000a5cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a5d3:	2d 40 03 00 00       	sub    eax,0x340
c000a5d8:	83 f8 7f             	cmp    eax,0x7f
c000a5db:	77 16                	ja     c000a5f3 <VAS::VAS(bool)+0x123>
c000a5dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a5e1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a5e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a5e8:	c1 e2 02             	shl    edx,0x2
c000a5eb:	01 d0                	add    eax,edx
c000a5ed:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a5f3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000a5f7:	e9 7c ff ff ff       	jmp    c000a578 <VAS::VAS(bool)+0xa8>
c000a5fc:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a601:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a607:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a60d:	83 e0 10             	and    eax,0x10
c000a610:	84 c0                	test   al,al
c000a612:	74 07                	je     c000a61b <VAS::VAS(bool)+0x14b>
c000a614:	b8 03 41 00 00       	mov    eax,0x4103
c000a619:	eb 05                	jmp    c000a620 <VAS::VAS(bool)+0x150>
c000a61b:	b8 03 40 00 00       	mov    eax,0x4003
c000a620:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a624:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a627:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a62d:	89 02                	mov    DWORD PTR [edx],eax
c000a62f:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a634:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a63a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a640:	83 ec 08             	sub    esp,0x8
c000a643:	50                   	push   eax
c000a644:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a648:	e8 b1 fc ff ff       	call   c000a2fe <VAS::setCPUSpecific(unsigned long)>
c000a64d:	83 c4 10             	add    esp,0x10
c000a650:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a654:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a657:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a65c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a662:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a668:	83 e0 10             	and    eax,0x10
c000a66b:	84 c0                	test   al,al
c000a66d:	74 07                	je     c000a676 <VAS::VAS(bool)+0x1a6>
c000a66f:	b8 00 01 00 00       	mov    eax,0x100
c000a674:	eb 05                	jmp    c000a67b <VAS::VAS(bool)+0x1ab>
c000a676:	b8 00 00 00 00       	mov    eax,0x0
c000a67b:	09 c2                	or     edx,eax
c000a67d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a681:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a684:	05 fc 0f 00 00       	add    eax,0xffc
c000a689:	83 ca 03             	or     edx,0x3
c000a68c:	89 10                	mov    DWORD PTR [eax],edx
c000a68e:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a693:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a699:	83 ec 0c             	sub    esp,0xc
c000a69c:	50                   	push   eax
c000a69d:	e8 12 1c 00 00       	call   c000c2b4 <Device::getName()>
c000a6a2:	83 c4 10             	add    esp,0x10
c000a6a5:	83 ec 08             	sub    esp,0x8
c000a6a8:	68 ff db 01 c0       	push   0xc001dbff
c000a6ad:	50                   	push   eax
c000a6ae:	e8 4d 60 ff ff       	call   c0000700 <strcmp>
c000a6b3:	83 c4 10             	add    esp,0x10
c000a6b6:	85 c0                	test   eax,eax
c000a6b8:	0f 94 c0             	sete   al
c000a6bb:	84 c0                	test   al,al
c000a6bd:	0f 84 87 00 00 00    	je     c000a74a <VAS::VAS(bool)+0x27a>
c000a6c3:	fa                   	cli    
c000a6c4:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000a6c9:	40                   	inc    eax
c000a6ca:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000a6cf:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a6d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a6da:	05 7c 09 00 00       	add    eax,0x97c
c000a6df:	83 ec 0c             	sub    esp,0xc
c000a6e2:	50                   	push   eax
c000a6e3:	e8 66 d2 ff ff       	call   c000794e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a6e8:	83 c4 10             	add    esp,0x10
c000a6eb:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a6f0:	89 c3                	mov    ebx,eax
c000a6f2:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000a6f7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a6fd:	05 7c 09 00 00       	add    eax,0x97c
c000a702:	83 ec 0c             	sub    esp,0xc
c000a705:	50                   	push   eax
c000a706:	e8 43 d2 ff ff       	call   c000794e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a70b:	83 c4 10             	add    esp,0x10
c000a70e:	83 ec 08             	sub    esp,0x8
c000a711:	50                   	push   eax
c000a712:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a716:	e8 83 f5 ff ff       	call   c0009c9e <VAS::getPageTableEntry(unsigned long)>
c000a71b:	83 c4 10             	add    esp,0x10
c000a71e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a720:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a725:	6a 11                	push   0x11
c000a727:	53                   	push   ebx
c000a728:	50                   	push   eax
c000a729:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a72d:	e8 f0 f8 ff ff       	call   c000a022 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a732:	83 c4 10             	add    esp,0x10
c000a735:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000a73a:	48                   	dec    eax
c000a73b:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000a740:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000a745:	85 c0                	test   eax,eax
c000a747:	75 01                	jne    c000a74a <VAS::VAS(bool)+0x27a>
c000a749:	fb                   	sti    
c000a74a:	90                   	nop
c000a74b:	83 c4 28             	add    esp,0x28
c000a74e:	5b                   	pop    ebx
c000a74f:	c3                   	ret    

c000a750 <VAS::evict(unsigned long)>:
c000a750:	55                   	push   ebp
c000a751:	57                   	push   edi
c000a752:	56                   	push   esi
c000a753:	53                   	push   ebx
c000a754:	83 ec 1c             	sub    esp,0x1c
c000a757:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a75b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a75f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a763:	e8 66 f3 ff ff       	call   c0009ace <Virt::allocateSwapfilePage()>
c000a768:	8b 0d 8c f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f88c
c000a76e:	89 c7                	mov    edi,eax
c000a770:	85 c9                	test   ecx,ecx
c000a772:	7e 3e                	jle    c000a7b2 <VAS::evict(unsigned long)+0x62>
c000a774:	89 ee                	mov    esi,ebp
c000a776:	31 db                	xor    ebx,ebx
c000a778:	83 ec 0c             	sub    esp,0xc
c000a77b:	57                   	push   edi
c000a77c:	e8 3b f3 ff ff       	call   c0009abc <Virt::swapIDToSector(unsigned long)>
c000a781:	89 34 24             	mov    DWORD PTR [esp],esi
c000a784:	01 d8                	add    eax,ebx
c000a786:	6a 01                	push   0x1
c000a788:	31 d2                	xor    edx,edx
c000a78a:	43                   	inc    ebx
c000a78b:	52                   	push   edx
c000a78c:	81 c6 00 02 00 00    	add    esi,0x200
c000a792:	50                   	push   eax
c000a793:	0f be 05 98 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f898
c000a79a:	8b 14 85 9c 2d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd264]
c000a7a1:	52                   	push   edx
c000a7a2:	e8 8d 2b 00 00       	call   c000d334 <LogicalDisk::write(unsigned long long, int, void*)>
c000a7a7:	83 c4 20             	add    esp,0x20
c000a7aa:	39 1d 8c f8 01 c0    	cmp    DWORD PTR ds:0xc001f88c,ebx
c000a7b0:	7f c6                	jg     c000a778 <VAS::evict(unsigned long)+0x28>
c000a7b2:	83 ec 08             	sub    esp,0x8
c000a7b5:	c1 e7 0b             	shl    edi,0xb
c000a7b8:	55                   	push   ebp
c000a7b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a7bd:	50                   	push   eax
c000a7be:	e8 db f4 ff ff       	call   c0009c9e <VAS::getPageTableEntry(unsigned long)>
c000a7c3:	8b 10                	mov    edx,DWORD PTR [eax]
c000a7c5:	89 d1                	mov    ecx,edx
c000a7c7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a7cd:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a7d3:	09 cf                	or     edi,ecx
c000a7d5:	89 38                	mov    DWORD PTR [eax],edi
c000a7d7:	89 14 24             	mov    DWORD PTR [esp],edx
c000a7da:	ff 05 28 0a 02 c0    	inc    DWORD PTR ds:0xc0020a28
c000a7e0:	e8 d7 d9 ff ff       	call   c00081bc <Phys::freePage(unsigned long)>
c000a7e5:	0f 20 d8             	mov    eax,cr3
c000a7e8:	0f 22 d8             	mov    cr3,eax
c000a7eb:	a1 24 0a 02 c0       	mov    eax,ds:0xc0020a24
c000a7f0:	c7 44 24 40 0d dc 01 c0 	mov    DWORD PTR [esp+0x40],0xc001dc0d
c000a7f8:	8d 50 01             	lea    edx,[eax+0x1]
c000a7fb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a7ff:	89 15 24 0a 02 c0    	mov    DWORD PTR ds:0xc0020a24,edx
c000a805:	83 c4 2c             	add    esp,0x2c
c000a808:	5b                   	pop    ebx
c000a809:	5e                   	pop    esi
c000a80a:	5f                   	pop    edi
c000a80b:	5d                   	pop    ebp
c000a80c:	e9 cf 03 00 00       	jmp    c000abe0 <Dbg::kprintf(char const*, ...)>
c000a811:	90                   	nop

c000a812 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a812:	55                   	push   ebp
c000a813:	57                   	push   edi
c000a814:	56                   	push   esi
c000a815:	53                   	push   ebx
c000a816:	83 ec 14             	sub    esp,0x14
c000a819:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a81d:	53                   	push   ebx
c000a81e:	68 1e dc 01 c0       	push   0xc001dc1e
c000a823:	e8 b8 03 00 00       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c000a828:	83 c4 10             	add    esp,0x10
c000a82b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a831:	74 21                	je     c000a854 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a833:	83 ec 08             	sub    esp,0x8
c000a836:	53                   	push   ebx
c000a837:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a83b:	57                   	push   edi
c000a83c:	e8 5d f4 ff ff       	call   c0009c9e <VAS::getPageTableEntry(unsigned long)>
c000a841:	83 c4 10             	add    esp,0x10
c000a844:	89 c6                	mov    esi,eax
c000a846:	85 c0                	test   eax,eax
c000a848:	74 0a                	je     c000a854 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a84a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a84c:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a852:	74 0a                	je     c000a85e <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a854:	31 c0                	xor    eax,eax
c000a856:	83 c4 0c             	add    esp,0xc
c000a859:	5b                   	pop    ebx
c000a85a:	5e                   	pop    esi
c000a85b:	5f                   	pop    edi
c000a85c:	5d                   	pop    ebp
c000a85d:	c3                   	ret    
c000a85e:	e8 bb d9 ff ff       	call   c000821e <Phys::allocatePage()>
c000a863:	c1 ed 0b             	shr    ebp,0xb
c000a866:	8b 16                	mov    edx,DWORD PTR [esi]
c000a868:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a86e:	09 c2                	or     edx,eax
c000a870:	81 ca 01 08 00 00    	or     edx,0x801
c000a876:	89 16                	mov    DWORD PTR [esi],edx
c000a878:	8b 35 8c f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f88c
c000a87e:	85 f6                	test   esi,esi
c000a880:	7e 3e                	jle    c000a8c0 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a882:	89 df                	mov    edi,ebx
c000a884:	31 f6                	xor    esi,esi
c000a886:	83 ec 0c             	sub    esp,0xc
c000a889:	55                   	push   ebp
c000a88a:	e8 2d f2 ff ff       	call   c0009abc <Virt::swapIDToSector(unsigned long)>
c000a88f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a892:	01 f0                	add    eax,esi
c000a894:	6a 01                	push   0x1
c000a896:	31 d2                	xor    edx,edx
c000a898:	46                   	inc    esi
c000a899:	52                   	push   edx
c000a89a:	81 c7 00 02 00 00    	add    edi,0x200
c000a8a0:	50                   	push   eax
c000a8a1:	0f be 05 98 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f898
c000a8a8:	8b 0c 85 9c 2d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd264]
c000a8af:	51                   	push   ecx
c000a8b0:	e8 13 2a 00 00       	call   c000d2c8 <LogicalDisk::read(unsigned long long, int, void*)>
c000a8b5:	83 c4 20             	add    esp,0x20
c000a8b8:	39 35 8c f8 01 c0    	cmp    DWORD PTR ds:0xc001f88c,esi
c000a8be:	7f c6                	jg     c000a886 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a8c0:	a1 28 0a 02 c0       	mov    eax,ds:0xc0020a28
c000a8c5:	48                   	dec    eax
c000a8c6:	52                   	push   edx
c000a8c7:	a3 28 0a 02 c0       	mov    ds:0xc0020a28,eax
c000a8cc:	50                   	push   eax
c000a8cd:	53                   	push   ebx
c000a8ce:	68 31 dc 01 c0       	push   0xc001dc31
c000a8d3:	e8 08 03 00 00       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c000a8d8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a8db:	e8 be f1 ff ff       	call   c0009a9e <Virt::freeSwapfilePage(unsigned long)>
c000a8e0:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000a8e5:	83 c4 10             	add    esp,0x10
c000a8e8:	48                   	dec    eax
c000a8e9:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000a8ee:	85 c0                	test   eax,eax
c000a8f0:	75 01                	jne    c000a8f3 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a8f2:	fb                   	sti    
c000a8f3:	0f 20 d8             	mov    eax,cr3
c000a8f6:	0f 22 d8             	mov    cr3,eax
c000a8f9:	b0 01                	mov    al,0x1
c000a8fb:	e9 56 ff ff ff       	jmp    c000a856 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a900 <VAS::scanForEviction()>:
c000a900:	57                   	push   edi
c000a901:	31 ff                	xor    edi,edi
c000a903:	56                   	push   esi
c000a904:	53                   	push   ebx
c000a905:	83 ec 10             	sub    esp,0x10
c000a908:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a90c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a90f:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a915:	75 0e                	jne    c000a925 <VAS::scanForEviction()+0x25>
c000a917:	89 da                	mov    edx,ebx
c000a919:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a91c:	c1 ea 16             	shr    edx,0x16
c000a91f:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a923:	74 4e                	je     c000a973 <VAS::scanForEviction()+0x73>
c000a925:	53                   	push   ebx
c000a926:	56                   	push   esi
c000a927:	e8 72 f3 ff ff       	call   c0009c9e <VAS::getPageTableEntry(unsigned long)>
c000a92c:	5a                   	pop    edx
c000a92d:	8b 10                	mov    edx,DWORD PTR [eax]
c000a92f:	59                   	pop    ecx
c000a930:	89 d1                	mov    ecx,edx
c000a932:	81 e1 01 08 00 00    	and    ecx,0x801
c000a938:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a93e:	74 3e                	je     c000a97e <VAS::scanForEviction()+0x7e>
c000a940:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a946:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a94c:	76 2b                	jbe    c000a979 <VAS::scanForEviction()+0x79>
c000a94e:	47                   	inc    edi
c000a94f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a956:	83 ff 03             	cmp    edi,0x3
c000a959:	74 32                	je     c000a98d <VAS::scanForEviction()+0x8d>
c000a95b:	31 db                	xor    ebx,ebx
c000a95d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a963:	75 c0                	jne    c000a925 <VAS::scanForEviction()+0x25>
c000a965:	89 da                	mov    edx,ebx
c000a967:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a96a:	c1 ea 16             	shr    edx,0x16
c000a96d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a971:	75 b2                	jne    c000a925 <VAS::scanForEviction()+0x25>
c000a973:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a979:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a97c:	eb 91                	jmp    c000a90f <VAS::scanForEviction()+0xf>
c000a97e:	f6 c2 20             	test   dl,0x20
c000a981:	74 13                	je     c000a996 <VAS::scanForEviction()+0x96>
c000a983:	83 e2 df             	and    edx,0xffffffdf
c000a986:	89 10                	mov    DWORD PTR [eax],edx
c000a988:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a98b:	eb b3                	jmp    c000a940 <VAS::scanForEviction()+0x40>
c000a98d:	83 c4 10             	add    esp,0x10
c000a990:	31 c0                	xor    eax,eax
c000a992:	5b                   	pop    ebx
c000a993:	5e                   	pop    esi
c000a994:	5f                   	pop    edi
c000a995:	c3                   	ret    
c000a996:	83 ec 08             	sub    esp,0x8
c000a999:	89 d0                	mov    eax,edx
c000a99b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a9a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a9a4:	53                   	push   ebx
c000a9a5:	68 46 dc 01 c0       	push   0xc001dc46
c000a9aa:	e8 31 02 00 00       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c000a9af:	58                   	pop    eax
c000a9b0:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a9b3:	5a                   	pop    edx
c000a9b4:	51                   	push   ecx
c000a9b5:	56                   	push   esi
c000a9b6:	e8 95 fd ff ff       	call   c000a750 <VAS::evict(unsigned long)>
c000a9bb:	5b                   	pop    ebx
c000a9bc:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a9bf:	5f                   	pop    edi
c000a9c0:	50                   	push   eax
c000a9c1:	68 5a dc 01 c0       	push   0xc001dc5a
c000a9c6:	e8 15 02 00 00       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c000a9cb:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a9d2:	83 c4 10             	add    esp,0x10
c000a9d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a9d9:	83 c4 10             	add    esp,0x10
c000a9dc:	5b                   	pop    ebx
c000a9dd:	5e                   	pop    esi
c000a9de:	5f                   	pop    edi
c000a9df:	c3                   	ret    

c000a9e0 <mapVASFirstTime>:
c000a9e0:	55                   	push   ebp
c000a9e1:	57                   	push   edi
c000a9e2:	56                   	push   esi
c000a9e3:	53                   	push   ebx
c000a9e4:	83 ec 0c             	sub    esp,0xc
c000a9e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a9ec:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a9ef:	4a                   	dec    edx
c000a9f0:	0f 84 8c 00 00 00    	je     c000aa82 <mapVASFirstTime+0xa2>
c000a9f6:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a9f9:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a9fc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000aa01:	c1 e5 15             	shl    ebp,0x15
c000aa04:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000aa09:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000aa0f:	29 eb                	sub    ebx,ebp
c000aa11:	29 ef                	sub    edi,ebp
c000aa13:	e8 06 d8 ff ff       	call   c000821e <Phys::allocatePage()>
c000aa18:	83 ec 0c             	sub    esp,0xc
c000aa1b:	68 03 04 00 00       	push   0x403
c000aa20:	6a 01                	push   0x1
c000aa22:	53                   	push   ebx
c000aa23:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000aa29:	50                   	push   eax
c000aa2a:	56                   	push   esi
c000aa2b:	e8 ec f8 ff ff       	call   c000a31c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000aa30:	83 c4 20             	add    esp,0x20
c000aa33:	39 fb                	cmp    ebx,edi
c000aa35:	75 dc                	jne    c000aa13 <mapVASFirstTime+0x33>
c000aa37:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000aa3c:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000aa41:	29 eb                	sub    ebx,ebp
c000aa43:	29 ef                	sub    edi,ebp
c000aa45:	e8 d4 d7 ff ff       	call   c000821e <Phys::allocatePage()>
c000aa4a:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000aa4e:	19 d2                	sbb    edx,edx
c000aa50:	83 ec 0c             	sub    esp,0xc
c000aa53:	83 e2 04             	and    edx,0x4
c000aa56:	81 c2 03 04 00 00    	add    edx,0x403
c000aa5c:	52                   	push   edx
c000aa5d:	6a 01                	push   0x1
c000aa5f:	53                   	push   ebx
c000aa60:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000aa66:	50                   	push   eax
c000aa67:	56                   	push   esi
c000aa68:	e8 af f8 ff ff       	call   c000a31c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000aa6d:	83 c4 20             	add    esp,0x20
c000aa70:	39 df                	cmp    edi,ebx
c000aa72:	75 d1                	jne    c000aa45 <mapVASFirstTime+0x65>
c000aa74:	0f 20 d8             	mov    eax,cr3
c000aa77:	0f 22 d8             	mov    cr3,eax
c000aa7a:	83 c4 0c             	add    esp,0xc
c000aa7d:	5b                   	pop    ebx
c000aa7e:	5e                   	pop    esi
c000aa7f:	5f                   	pop    edi
c000aa80:	5d                   	pop    ebp
c000aa81:	c3                   	ret    
c000aa82:	83 ec 0c             	sub    esp,0xc
c000aa85:	68 6d dc 01 c0       	push   0xc001dc6d
c000aa8a:	e8 51 01 00 00       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c000aa8f:	83 c4 10             	add    esp,0x10
c000aa92:	83 c4 0c             	add    esp,0xc
c000aa95:	5b                   	pop    ebx
c000aa96:	5e                   	pop    esi
c000aa97:	5f                   	pop    edi
c000aa98:	5d                   	pop    ebp
c000aa99:	c3                   	ret    

c000aa9a <__cxa_atexit>:
c000aa9a:	31 c0                	xor    eax,eax
c000aa9c:	c3                   	ret    

c000aa9d <__cxa_finalize>:
c000aa9d:	c3                   	ret    

c000aa9e <__stack_chk_fail>:
c000aa9e:	55                   	push   ebp
c000aa9f:	89 e5                	mov    ebp,esp
c000aaa1:	83 ec 10             	sub    esp,0x10
c000aaa4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aaa7:	68 86 dc 01 c0       	push   0xc001dc86
c000aaac:	e8 2f 01 00 00       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c000aab1:	58                   	pop    eax
c000aab2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000aab5:	5a                   	pop    edx
c000aab6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000aab9:	68 86 dc 01 c0       	push   0xc001dc86
c000aabe:	e8 1d 01 00 00       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c000aac3:	c7 04 24 8e dc 01 c0 	mov    DWORD PTR [esp],0xc001dc8e
c000aaca:	e8 60 5c 00 00       	call   c001072f <Krnl::panic(char const*)>
c000aacf:	83 c4 10             	add    esp,0x10
c000aad2:	c9                   	leave  
c000aad3:	c3                   	ret    

c000aad4 <__cxa_pure_virtual>:
c000aad4:	83 ec 18             	sub    esp,0x18
c000aad7:	68 a6 dc 01 c0       	push   0xc001dca6
c000aadc:	e8 4e 5c 00 00       	call   c001072f <Krnl::panic(char const*)>
c000aae1:	83 c4 1c             	add    esp,0x1c
c000aae4:	c3                   	ret    

c000aae5 <operator new[](unsigned long)>:
c000aae5:	e9 67 d3 ff ff       	jmp    c0007e51 <malloc>

c000aaea <operator delete(void*, unsigned long)>:
c000aaea:	e9 82 d3 ff ff       	jmp    c0007e71 <rfree>

c000aaef <operator delete[](void*)>:
c000aaef:	e9 7d d3 ff ff       	jmp    c0007e71 <rfree>

c000aaf4 <operator delete[](void*, unsigned long)>:
c000aaf4:	e9 78 d3 ff ff       	jmp    c0007e71 <rfree>

c000aaf9 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000aaf9:	55                   	push   ebp
c000aafa:	b9 04 00 00 00       	mov    ecx,0x4
c000aaff:	57                   	push   edi
c000ab00:	56                   	push   esi
c000ab01:	be bb d8 01 c0       	mov    esi,0xc001d8bb
c000ab06:	53                   	push   ebx
c000ab07:	83 ec 20             	sub    esp,0x20
c000ab0a:	a1 ba d8 01 c0       	mov    eax,ds:0xc001d8ba
c000ab0f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ab13:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000ab17:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ab1b:	a1 c7 d8 01 c0       	mov    eax,ds:0xc001d8c7
c000ab20:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000ab24:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab28:	fc                   	cld    
c000ab29:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ab2b:	89 ee                	mov    esi,ebp
c000ab2d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ab31:	eb 02                	jmp    c000ab35 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000ab33:	89 c6                	mov    esi,eax
c000ab35:	31 d2                	xor    edx,edx
c000ab37:	41                   	inc    ecx
c000ab38:	89 f0                	mov    eax,esi
c000ab3a:	f7 f3                	div    ebx
c000ab3c:	39 de                	cmp    esi,ebx
c000ab3e:	73 f3                	jae    c000ab33 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000ab40:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ab43:	eb 02                	jmp    c000ab47 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000ab45:	89 c5                	mov    ebp,eax
c000ab47:	31 d2                	xor    edx,edx
c000ab49:	49                   	dec    ecx
c000ab4a:	89 e8                	mov    eax,ebp
c000ab4c:	f7 f3                	div    ebx
c000ab4e:	39 dd                	cmp    ebp,ebx
c000ab50:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000ab54:	88 11                	mov    BYTE PTR [ecx],dl
c000ab56:	73 ed                	jae    c000ab45 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000ab58:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ab5c:	83 c4 20             	add    esp,0x20
c000ab5f:	5b                   	pop    ebx
c000ab60:	5e                   	pop    esi
c000ab61:	5f                   	pop    edi
c000ab62:	5d                   	pop    ebp
c000ab63:	c3                   	ret    

c000ab64 <Dbg::logc(char)>:
c000ab64:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ab68:	f6 05 50 09 02 c0 10 	test   BYTE PTR ds:0xc0020950,0x10
c000ab6f:	75 12                	jne    c000ab83 <Dbg::logc(char)+0x1f>
c000ab71:	ba fd 03 00 00       	mov    edx,0x3fd
c000ab76:	ec                   	in     al,dx
c000ab77:	a8 20                	test   al,0x20
c000ab79:	74 fb                	je     c000ab76 <Dbg::logc(char)+0x12>
c000ab7b:	ba f8 03 00 00       	mov    edx,0x3f8
c000ab80:	88 c8                	mov    al,cl
c000ab82:	ee                   	out    dx,al
c000ab83:	c3                   	ret    

c000ab84 <Dbg::logs(char*)>:
c000ab84:	53                   	push   ebx
c000ab85:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ab89:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ab8c:	84 c0                	test   al,al
c000ab8e:	74 0f                	je     c000ab9f <Dbg::logs(char*)+0x1b>
c000ab90:	50                   	push   eax
c000ab91:	43                   	inc    ebx
c000ab92:	e8 cd ff ff ff       	call   c000ab64 <Dbg::logc(char)>
c000ab97:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ab9a:	5a                   	pop    edx
c000ab9b:	84 c0                	test   al,al
c000ab9d:	75 f1                	jne    c000ab90 <Dbg::logs(char*)+0xc>
c000ab9f:	5b                   	pop    ebx
c000aba0:	c3                   	ret    

c000aba1 <Dbg::logWriteInt(unsigned int)>:
c000aba1:	83 ec 10             	sub    esp,0x10
c000aba4:	6a 0a                	push   0xa
c000aba6:	8d 44 24 08          	lea    eax,[esp+0x8]
c000abaa:	50                   	push   eax
c000abab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000abaf:	50                   	push   eax
c000abb0:	e8 44 ff ff ff       	call   c000aaf9 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000abb5:	50                   	push   eax
c000abb6:	e8 c9 ff ff ff       	call   c000ab84 <Dbg::logs(char*)>
c000abbb:	83 c4 20             	add    esp,0x20
c000abbe:	c3                   	ret    

c000abbf <Dbg::logWriteIntBase(unsigned int, int)>:
c000abbf:	83 ec 10             	sub    esp,0x10
c000abc2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000abc6:	50                   	push   eax
c000abc7:	8d 44 24 08          	lea    eax,[esp+0x8]
c000abcb:	50                   	push   eax
c000abcc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000abd0:	52                   	push   edx
c000abd1:	e8 23 ff ff ff       	call   c000aaf9 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000abd6:	50                   	push   eax
c000abd7:	e8 a8 ff ff ff       	call   c000ab84 <Dbg::logs(char*)>
c000abdc:	83 c4 20             	add    esp,0x20
c000abdf:	c3                   	ret    

c000abe0 <Dbg::kprintf(char const*, ...)>:
c000abe0:	55                   	push   ebp
c000abe1:	57                   	push   edi
c000abe2:	56                   	push   esi
c000abe3:	53                   	push   ebx
c000abe4:	83 ec 0c             	sub    esp,0xc
c000abe7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000abeb:	f6 05 50 09 02 c0 10 	test   BYTE PTR ds:0xc0020950,0x10
c000abf2:	74 08                	je     c000abfc <Dbg::kprintf(char const*, ...)+0x1c>
c000abf4:	83 c4 0c             	add    esp,0xc
c000abf7:	5b                   	pop    ebx
c000abf8:	5e                   	pop    esi
c000abf9:	5f                   	pop    edi
c000abfa:	5d                   	pop    ebp
c000abfb:	c3                   	ret    
c000abfc:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ac00:	31 ff                	xor    edi,edi
c000ac02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ac06:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ac09:	84 c0                	test   al,al
c000ac0b:	74 e7                	je     c000abf4 <Dbg::kprintf(char const*, ...)+0x14>
c000ac0d:	8d 77 01             	lea    esi,[edi+0x1]
c000ac10:	3c 25                	cmp    al,0x25
c000ac12:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000ac15:	75 47                	jne    c000ac5e <Dbg::kprintf(char const*, ...)+0x7e>
c000ac17:	83 c7 02             	add    edi,0x2
c000ac1a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ac1d:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000ac20:	83 e8 25             	sub    eax,0x25
c000ac23:	3c 53                	cmp    al,0x53
c000ac25:	0f 87 d2 00 00 00    	ja     c000acfd <Dbg::kprintf(char const*, ...)+0x11d>
c000ac2b:	25 ff 00 00 00       	and    eax,0xff
c000ac30:	ff 24 85 bc dc 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2344]
c000ac37:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ac3b:	89 c8                	mov    eax,ecx
c000ac3d:	83 c1 04             	add    ecx,0x4
c000ac40:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ac44:	8b 28                	mov    ebp,DWORD PTR [eax]
c000ac46:	55                   	push   ebp
c000ac47:	e8 55 ff ff ff       	call   c000aba1 <Dbg::logWriteInt(unsigned int)>
c000ac4c:	58                   	pop    eax
c000ac4d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ac50:	84 c0                	test   al,al
c000ac52:	74 a0                	je     c000abf4 <Dbg::kprintf(char const*, ...)+0x14>
c000ac54:	8d 77 01             	lea    esi,[edi+0x1]
c000ac57:	3c 25                	cmp    al,0x25
c000ac59:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000ac5c:	74 b9                	je     c000ac17 <Dbg::kprintf(char const*, ...)+0x37>
c000ac5e:	50                   	push   eax
c000ac5f:	89 f7                	mov    edi,esi
c000ac61:	e8 fe fe ff ff       	call   c000ab64 <Dbg::logc(char)>
c000ac66:	89 ee                	mov    esi,ebp
c000ac68:	58                   	pop    eax
c000ac69:	eb e2                	jmp    c000ac4d <Dbg::kprintf(char const*, ...)+0x6d>
c000ac6b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ac6f:	89 c8                	mov    eax,ecx
c000ac71:	83 c1 04             	add    ecx,0x4
c000ac74:	8b 00                	mov    eax,DWORD PTR [eax]
c000ac76:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ac7a:	50                   	push   eax
c000ac7b:	e8 04 ff ff ff       	call   c000ab84 <Dbg::logs(char*)>
c000ac80:	58                   	pop    eax
c000ac81:	eb ca                	jmp    c000ac4d <Dbg::kprintf(char const*, ...)+0x6d>
c000ac83:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ac87:	89 d0                	mov    eax,edx
c000ac89:	83 c2 04             	add    edx,0x4
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	8b 00                	mov    eax,DWORD PTR [eax]
c000ac92:	50                   	push   eax
c000ac93:	e8 09 ff ff ff       	call   c000aba1 <Dbg::logWriteInt(unsigned int)>
c000ac98:	58                   	pop    eax
c000ac99:	eb b2                	jmp    c000ac4d <Dbg::kprintf(char const*, ...)+0x6d>
c000ac9b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ac9f:	89 d0                	mov    eax,edx
c000aca1:	83 c2 04             	add    edx,0x4
c000aca4:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aca7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acab:	50                   	push   eax
c000acac:	e8 b3 fe ff ff       	call   c000ab64 <Dbg::logc(char)>
c000acb1:	58                   	pop    eax
c000acb2:	eb 99                	jmp    c000ac4d <Dbg::kprintf(char const*, ...)+0x6d>
c000acb4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000acb8:	89 c8                	mov    eax,ecx
c000acba:	83 c1 04             	add    ecx,0x4
c000acbd:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000acc1:	6a 10                	push   0x10
c000acc3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000acc5:	51                   	push   ecx
c000acc6:	e8 f4 fe ff ff       	call   c000abbf <Dbg::logWriteIntBase(unsigned int, int)>
c000accb:	5d                   	pop    ebp
c000accc:	58                   	pop    eax
c000accd:	e9 7b ff ff ff       	jmp    c000ac4d <Dbg::kprintf(char const*, ...)+0x6d>
c000acd2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000acd6:	89 d0                	mov    eax,edx
c000acd8:	83 c2 08             	add    edx,0x8
c000acdb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acdf:	6a 10                	push   0x10
c000ace1:	8b 00                	mov    eax,DWORD PTR [eax]
c000ace3:	50                   	push   eax
c000ace4:	e8 d6 fe ff ff       	call   c000abbf <Dbg::logWriteIntBase(unsigned int, int)>
c000ace9:	58                   	pop    eax
c000acea:	5a                   	pop    edx
c000aceb:	e9 5d ff ff ff       	jmp    c000ac4d <Dbg::kprintf(char const*, ...)+0x6d>
c000acf0:	6a 25                	push   0x25
c000acf2:	e8 6d fe ff ff       	call   c000ab64 <Dbg::logc(char)>
c000acf7:	5a                   	pop    edx
c000acf8:	e9 50 ff ff ff       	jmp    c000ac4d <Dbg::kprintf(char const*, ...)+0x6d>
c000acfd:	6a 25                	push   0x25
c000acff:	e8 60 fe ff ff       	call   c000ab64 <Dbg::logc(char)>
c000ad04:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000ad08:	50                   	push   eax
c000ad09:	e8 56 fe ff ff       	call   c000ab64 <Dbg::logc(char)>
c000ad0e:	5a                   	pop    edx
c000ad0f:	59                   	pop    ecx
c000ad10:	e9 38 ff ff ff       	jmp    c000ac4d <Dbg::kprintf(char const*, ...)+0x6d>
c000ad15:	90                   	nop

c000ad16 <File::read(unsigned long long, void*, int*)>:
c000ad16:	53                   	push   ebx
c000ad17:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad1b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad1f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad26:	3c 19                	cmp    al,0x19
c000ad28:	77 35                	ja     c000ad5f <File::read(unsigned long long, void*, int*)+0x49>
c000ad2a:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000ad31:	85 c0                	test   eax,eax
c000ad33:	74 2a                	je     c000ad5f <File::read(unsigned long long, void*, int*)+0x49>
c000ad35:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ad3b:	85 c0                	test   eax,eax
c000ad3d:	74 20                	je     c000ad5f <File::read(unsigned long long, void*, int*)+0x49>
c000ad3f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad43:	74 21                	je     c000ad66 <File::read(unsigned long long, void*, int*)+0x50>
c000ad45:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ad47:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ad4b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ad51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad55:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad59:	5b                   	pop    ebx
c000ad5a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ad5d:	ff e0                	jmp    eax
c000ad5f:	b8 0b 00 00 00       	mov    eax,0xb
c000ad64:	eb 05                	jmp    c000ad6b <File::read(unsigned long long, void*, int*)+0x55>
c000ad66:	b8 05 00 00 00       	mov    eax,0x5
c000ad6b:	5b                   	pop    ebx
c000ad6c:	c3                   	ret    
c000ad6d:	90                   	nop

c000ad6e <File::write(unsigned long long, void*, int*)>:
c000ad6e:	53                   	push   ebx
c000ad6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad73:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad77:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad7e:	3c 19                	cmp    al,0x19
c000ad80:	77 35                	ja     c000adb7 <File::write(unsigned long long, void*, int*)+0x49>
c000ad82:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000ad89:	85 c0                	test   eax,eax
c000ad8b:	74 2a                	je     c000adb7 <File::write(unsigned long long, void*, int*)+0x49>
c000ad8d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ad93:	85 c0                	test   eax,eax
c000ad95:	74 20                	je     c000adb7 <File::write(unsigned long long, void*, int*)+0x49>
c000ad97:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad9b:	74 21                	je     c000adbe <File::write(unsigned long long, void*, int*)+0x50>
c000ad9d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ad9f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ada3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ada9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adb1:	5b                   	pop    ebx
c000adb2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000adb5:	ff e0                	jmp    eax
c000adb7:	b8 0b 00 00 00       	mov    eax,0xb
c000adbc:	eb 05                	jmp    c000adc3 <File::write(unsigned long long, void*, int*)+0x55>
c000adbe:	b8 05 00 00 00       	mov    eax,0x5
c000adc3:	5b                   	pop    ebx
c000adc4:	c3                   	ret    
c000adc5:	90                   	nop

c000adc6 <Directory::read(unsigned long long, void*, int*)>:
c000adc6:	53                   	push   ebx
c000adc7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000adcb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000adcf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000add6:	3c 19                	cmp    al,0x19
c000add8:	77 35                	ja     c000ae0f <Directory::read(unsigned long long, void*, int*)+0x49>
c000adda:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000ade1:	85 c0                	test   eax,eax
c000ade3:	74 2a                	je     c000ae0f <Directory::read(unsigned long long, void*, int*)+0x49>
c000ade5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000adeb:	85 c0                	test   eax,eax
c000aded:	74 20                	je     c000ae0f <Directory::read(unsigned long long, void*, int*)+0x49>
c000adef:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adf3:	74 21                	je     c000ae16 <Directory::read(unsigned long long, void*, int*)+0x50>
c000adf5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000adf7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000adfb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ae01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae09:	5b                   	pop    ebx
c000ae0a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ae0d:	ff e0                	jmp    eax
c000ae0f:	b8 0b 00 00 00       	mov    eax,0xb
c000ae14:	eb 05                	jmp    c000ae1b <Directory::read(unsigned long long, void*, int*)+0x55>
c000ae16:	b8 05 00 00 00       	mov    eax,0x5
c000ae1b:	5b                   	pop    ebx
c000ae1c:	c3                   	ret    
c000ae1d:	90                   	nop

c000ae1e <Directory::write(unsigned long long, void*, int*)>:
c000ae1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae22:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ae29:	b8 0b 00 00 00       	mov    eax,0xb
c000ae2e:	80 fa 19             	cmp    dl,0x19
c000ae31:	77 18                	ja     c000ae4b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae33:	8b 14 95 a0 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd160]
c000ae3a:	85 d2                	test   edx,edx
c000ae3c:	74 0d                	je     c000ae4b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ae3e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000ae45:	19 c0                	sbb    eax,eax
c000ae47:	83 e0 0a             	and    eax,0xa
c000ae4a:	40                   	inc    eax
c000ae4b:	c3                   	ret    

c000ae4c <File::isAtty()>:
c000ae4c:	31 c0                	xor    eax,eax
c000ae4e:	c3                   	ret    
c000ae4f:	90                   	nop

c000ae50 <Directory::isAtty()>:
c000ae50:	31 c0                	xor    eax,eax
c000ae52:	c3                   	ret    
c000ae53:	90                   	nop

c000ae54 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ae54:	b8 0a 00 00 00       	mov    eax,0xa
c000ae59:	c3                   	ret    

c000ae5a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ae5a:	b8 0a 00 00 00       	mov    eax,0xa
c000ae5f:	c3                   	ret    

c000ae60 <Filesystem::allocateSwapfile(char const*, int)>:
c000ae60:	31 c0                	xor    eax,eax
c000ae62:	31 d2                	xor    edx,edx
c000ae64:	c3                   	ret    
c000ae65:	90                   	nop

c000ae66 <File::~File()>:
c000ae66:	83 ec 0c             	sub    esp,0xc
c000ae69:	ba 7c de 01 c0       	mov    edx,0xc001de7c
c000ae6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae72:	89 10                	mov    DWORD PTR [eax],edx
c000ae74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae78:	83 ec 0c             	sub    esp,0xc
c000ae7b:	50                   	push   eax
c000ae7c:	e8 ab e8 ff ff       	call   c000972c <UnixFile::~UnixFile()>
c000ae81:	83 c4 10             	add    esp,0x10
c000ae84:	90                   	nop
c000ae85:	83 c4 0c             	add    esp,0xc
c000ae88:	c3                   	ret    
c000ae89:	90                   	nop

c000ae8a <File::~File()>:
c000ae8a:	83 ec 0c             	sub    esp,0xc
c000ae8d:	83 ec 0c             	sub    esp,0xc
c000ae90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae94:	e8 cd ff ff ff       	call   c000ae66 <File::~File()>
c000ae99:	83 c4 10             	add    esp,0x10
c000ae9c:	83 ec 08             	sub    esp,0x8
c000ae9f:	68 14 01 00 00       	push   0x114
c000aea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aea8:	e8 3d fc ff ff       	call   c000aaea <operator delete(void*, unsigned long)>
c000aead:	83 c4 10             	add    esp,0x10
c000aeb0:	83 c4 0c             	add    esp,0xc
c000aeb3:	c3                   	ret    

c000aeb4 <Directory::~Directory()>:
c000aeb4:	83 ec 0c             	sub    esp,0xc
c000aeb7:	ba 98 de 01 c0       	mov    edx,0xc001de98
c000aebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec0:	89 10                	mov    DWORD PTR [eax],edx
c000aec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec6:	83 ec 0c             	sub    esp,0xc
c000aec9:	50                   	push   eax
c000aeca:	e8 5d e8 ff ff       	call   c000972c <UnixFile::~UnixFile()>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	90                   	nop
c000aed3:	83 c4 0c             	add    esp,0xc
c000aed6:	c3                   	ret    
c000aed7:	90                   	nop

c000aed8 <Directory::~Directory()>:
c000aed8:	83 ec 0c             	sub    esp,0xc
c000aedb:	83 ec 0c             	sub    esp,0xc
c000aede:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aee2:	e8 cd ff ff ff       	call   c000aeb4 <Directory::~Directory()>
c000aee7:	83 c4 10             	add    esp,0x10
c000aeea:	83 ec 08             	sub    esp,0x8
c000aeed:	68 14 01 00 00       	push   0x114
c000aef2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aef6:	e8 ef fb ff ff       	call   c000aaea <operator delete(void*, unsigned long)>
c000aefb:	83 c4 10             	add    esp,0x10
c000aefe:	83 c4 0c             	add    esp,0xc
c000af01:	c3                   	ret    

c000af02 <Filesystem::Filesystem()>:
c000af02:	ba 14 de 01 c0       	mov    edx,0xc001de14
c000af07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af0b:	89 10                	mov    DWORD PTR [eax],edx
c000af0d:	8b 15 34 0a 02 c0    	mov    edx,DWORD PTR ds:0xc0020a34
c000af13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af17:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000af1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af1e:	a3 34 0a 02 c0       	mov    ds:0xc0020a34,eax
c000af23:	90                   	nop
c000af24:	c3                   	ret    
c000af25:	90                   	nop

c000af26 <Filesystem::~Filesystem()>:
c000af26:	ba 14 de 01 c0       	mov    edx,0xc001de14
c000af2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af2f:	89 10                	mov    DWORD PTR [eax],edx
c000af31:	90                   	nop
c000af32:	c3                   	ret    
c000af33:	90                   	nop

c000af34 <Filesystem::~Filesystem()>:
c000af34:	83 ec 0c             	sub    esp,0xc
c000af37:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000af3b:	e8 e6 ff ff ff       	call   c000af26 <Filesystem::~Filesystem()>
c000af40:	83 c4 04             	add    esp,0x4
c000af43:	83 ec 08             	sub    esp,0x8
c000af46:	6a 08                	push   0x8
c000af48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af4c:	e8 99 fb ff ff       	call   c000aaea <operator delete(void*, unsigned long)>
c000af51:	83 c4 10             	add    esp,0x10
c000af54:	83 c4 0c             	add    esp,0xc
c000af57:	c3                   	ret    

c000af58 <Fs::getcwd(Process*, char*, int)>:
c000af58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000af5c:	31 c0                	xor    eax,eax
c000af5e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000af61:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af65:	7d 15                	jge    c000af7c <Fs::getcwd(Process*, char*, int)+0x24>
c000af67:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000af6b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000af72:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000af75:	84 c9                	test   cl,cl
c000af77:	74 06                	je     c000af7f <Fs::getcwd(Process*, char*, int)+0x27>
c000af79:	40                   	inc    eax
c000af7a:	eb e2                	jmp    c000af5e <Fs::getcwd(Process*, char*, int)+0x6>
c000af7c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000af7f:	31 c0                	xor    eax,eax
c000af81:	c3                   	ret    

c000af82 <Fs::initVFS()>:
c000af82:	83 ec 18             	sub    esp,0x18
c000af85:	6a 08                	push   0x8
c000af87:	e8 c5 ce ff ff       	call   c0007e51 <malloc>
c000af8c:	89 04 24             	mov    DWORD PTR [esp],eax
c000af8f:	e8 a4 c2 00 00       	call   c0017238 <FAT::FAT()>
c000af94:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000af9b:	e8 b1 ce ff ff       	call   c0007e51 <malloc>
c000afa0:	89 04 24             	mov    DWORD PTR [esp],eax
c000afa3:	e8 72 cf 00 00       	call   c0017f1a <ISO9660::ISO9660()>
c000afa8:	83 c4 1c             	add    esp,0x1c
c000afab:	c3                   	ret    

c000afac <Fs::standardiseFiles(char*, char const*, char const*)>:
c000afac:	55                   	push   ebp
c000afad:	57                   	push   edi
c000afae:	56                   	push   esi
c000afaf:	53                   	push   ebx
c000afb0:	81 ec 10 04 00 00    	sub    esp,0x410
c000afb6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000afbd:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000afc4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000afcb:	68 00 04 00 00       	push   0x400
c000afd0:	6a 00                	push   0x0
c000afd2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000afd6:	56                   	push   esi
c000afd7:	e8 14 55 ff ff       	call   c00004f0 <memset>
c000afdc:	83 c4 10             	add    esp,0x10
c000afdf:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000afe3:	75 0b                	jne    c000aff0 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000afe5:	50                   	push   eax
c000afe6:	50                   	push   eax
c000afe7:	57                   	push   edi
c000afe8:	56                   	push   esi
c000afe9:	e8 32 56 ff ff       	call   c0000620 <strcpy>
c000afee:	eb 41                	jmp    c000b031 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000aff0:	8a 07                	mov    al,BYTE PTR [edi]
c000aff2:	3c 5c                	cmp    al,0x5c
c000aff4:	74 04                	je     c000affa <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000aff6:	3c 2f                	cmp    al,0x2f
c000aff8:	75 18                	jne    c000b012 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000affa:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000affd:	3c 60                	cmp    al,0x60
c000afff:	7e 03                	jle    c000b004 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000b001:	83 e8 20             	sub    eax,0x20
c000b004:	88 04 24             	mov    BYTE PTR [esp],al
c000b007:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b00e:	50                   	push   eax
c000b00f:	50                   	push   eax
c000b010:	eb 18                	jmp    c000b02a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000b012:	50                   	push   eax
c000b013:	50                   	push   eax
c000b014:	55                   	push   ebp
c000b015:	56                   	push   esi
c000b016:	e8 05 56 ff ff       	call   c0000620 <strcpy>
c000b01b:	5a                   	pop    edx
c000b01c:	59                   	pop    ecx
c000b01d:	68 bf ea 01 c0       	push   0xc001eabf
c000b022:	56                   	push   esi
c000b023:	e8 b8 57 ff ff       	call   c00007e0 <strcat>
c000b028:	5d                   	pop    ebp
c000b029:	58                   	pop    eax
c000b02a:	57                   	push   edi
c000b02b:	56                   	push   esi
c000b02c:	e8 af 57 ff ff       	call   c00007e0 <strcat>
c000b031:	83 c4 10             	add    esp,0x10
c000b034:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b037:	3c 60                	cmp    al,0x60
c000b039:	7e 03                	jle    c000b03e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000b03b:	83 e8 20             	sub    eax,0x20
c000b03e:	88 04 24             	mov    BYTE PTR [esp],al
c000b041:	88 03                	mov    BYTE PTR [ebx],al
c000b043:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b04a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b050:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b054:	bf 03 00 00 00       	mov    edi,0x3
c000b059:	b8 03 00 00 00       	mov    eax,0x3
c000b05e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000b061:	84 d2                	test   dl,dl
c000b063:	0f 84 91 00 00 00    	je     c000b0fa <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000b069:	8d 4f 01             	lea    ecx,[edi+0x1]
c000b06c:	80 fa 5c             	cmp    dl,0x5c
c000b06f:	74 05                	je     c000b076 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000b071:	80 fa 2f             	cmp    dl,0x2f
c000b074:	75 12                	jne    c000b088 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000b076:	89 c5                	mov    ebp,eax
c000b078:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b07d:	74 09                	je     c000b088 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000b07f:	40                   	inc    eax
c000b080:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b084:	89 cf                	mov    edi,ecx
c000b086:	eb d6                	jmp    c000b05e <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000b088:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b08d:	75 5b                	jne    c000b0ea <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000b08f:	80 fa 2e             	cmp    dl,0x2e
c000b092:	75 56                	jne    c000b0ea <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000b094:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000b098:	74 19                	je     c000b0b3 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000b09a:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000b09f:	74 53                	je     c000b0f4 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000b0a1:	89 f9                	mov    ecx,edi
c000b0a3:	41                   	inc    ecx
c000b0a4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000b0a7:	80 fa 2f             	cmp    dl,0x2f
c000b0aa:	74 f7                	je     c000b0a3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000b0ac:	80 fa 5c             	cmp    dl,0x5c
c000b0af:	74 f2                	je     c000b0a3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000b0b1:	eb d1                	jmp    c000b084 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0b3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000b0b8:	74 3a                	je     c000b0f4 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000b0ba:	83 f8 03             	cmp    eax,0x3
c000b0bd:	74 c5                	je     c000b084 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0bf:	41                   	inc    ecx
c000b0c0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000b0c3:	80 fa 2f             	cmp    dl,0x2f
c000b0c6:	74 f7                	je     c000b0bf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000b0c8:	80 fa 5c             	cmp    dl,0x5c
c000b0cb:	74 f2                	je     c000b0bf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000b0cd:	48                   	dec    eax
c000b0ce:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b0d2:	75 06                	jne    c000b0da <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000b0d4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b0d8:	eb f3                	jmp    c000b0cd <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000b0da:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b0de:	74 07                	je     c000b0e7 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b0e0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b0e4:	48                   	dec    eax
c000b0e5:	eb f3                	jmp    c000b0da <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000b0e7:	40                   	inc    eax
c000b0e8:	eb 9a                	jmp    c000b084 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0ea:	80 fa 2f             	cmp    dl,0x2f
c000b0ed:	74 95                	je     c000b084 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0ef:	80 fa 5c             	cmp    dl,0x5c
c000b0f2:	74 90                	je     c000b084 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0f4:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000b0f7:	40                   	inc    eax
c000b0f8:	eb 8a                	jmp    c000b084 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000b0fa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b0fe:	83 ec 0c             	sub    esp,0xc
c000b101:	53                   	push   ebx
c000b102:	e8 59 54 ff ff       	call   c0000560 <strlen>
c000b107:	83 c4 10             	add    esp,0x10
c000b10a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b10f:	75 26                	jne    c000b137 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000b111:	83 ec 0c             	sub    esp,0xc
c000b114:	53                   	push   ebx
c000b115:	e8 46 54 ff ff       	call   c0000560 <strlen>
c000b11a:	83 c4 10             	add    esp,0x10
c000b11d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b122:	74 26                	je     c000b14a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000b124:	83 ec 0c             	sub    esp,0xc
c000b127:	53                   	push   ebx
c000b128:	e8 33 54 ff ff       	call   c0000560 <strlen>
c000b12d:	83 c4 10             	add    esp,0x10
c000b130:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b135:	eb c7                	jmp    c000b0fe <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000b137:	83 ec 0c             	sub    esp,0xc
c000b13a:	53                   	push   ebx
c000b13b:	e8 20 54 ff ff       	call   c0000560 <strlen>
c000b140:	83 c4 10             	add    esp,0x10
c000b143:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b148:	74 c7                	je     c000b111 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000b14a:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b150:	5b                   	pop    ebx
c000b151:	5e                   	pop    esi
c000b152:	5f                   	pop    edi
c000b153:	5d                   	pop    ebp
c000b154:	c3                   	ret    
c000b155:	90                   	nop

c000b156 <File::File(char const*, Process*)>:
c000b156:	83 ec 0c             	sub    esp,0xc
c000b159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b15d:	83 ec 08             	sub    esp,0x8
c000b160:	6a 00                	push   0x0
c000b162:	50                   	push   eax
c000b163:	e8 e2 e3 ff ff       	call   c000954a <UnixFile::UnixFile(int)>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	ba 7c de 01 c0       	mov    edx,0xc001de7c
c000b170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b174:	89 10                	mov    DWORD PTR [eax],edx
c000b176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b17a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b184:	83 c0 0d             	add    eax,0xd
c000b187:	83 ec 04             	sub    esp,0x4
c000b18a:	52                   	push   edx
c000b18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b18f:	50                   	push   eax
c000b190:	e8 17 fe ff ff       	call   c000afac <Fs::standardiseFiles(char*, char const*, char const*)>
c000b195:	83 c4 10             	add    esp,0x10
c000b198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b19c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b19f:	8d 50 bf             	lea    edx,[eax-0x41]
c000b1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1a6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b1ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1b0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b1b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1b8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1be:	25 ff 00 00 00       	and    eax,0xff
c000b1c3:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000b1ca:	85 c0                	test   eax,eax
c000b1cc:	74 42                	je     c000b210 <File::File(char const*, Process*)+0xba>
c000b1ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1d2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1d8:	25 ff 00 00 00       	and    eax,0xff
c000b1dd:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000b1e4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b1ea:	85 c0                	test   eax,eax
c000b1ec:	75 22                	jne    c000b210 <File::File(char const*, Process*)+0xba>
c000b1ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b1f8:	25 ff 00 00 00       	and    eax,0xff
c000b1fd:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000b204:	83 ec 0c             	sub    esp,0xc
c000b207:	50                   	push   eax
c000b208:	e8 f9 1f 00 00       	call   c000d206 <LogicalDisk::mount()>
c000b20d:	83 c4 10             	add    esp,0x10
c000b210:	90                   	nop
c000b211:	83 c4 0c             	add    esp,0xc
c000b214:	c3                   	ret    
c000b215:	90                   	nop

c000b216 <File::open(FileOpenMode)>:
c000b216:	53                   	push   ebx
c000b217:	b8 0b 00 00 00       	mov    eax,0xb
c000b21c:	83 ec 08             	sub    esp,0x8
c000b21f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b223:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b22a:	80 fa 19             	cmp    dl,0x19
c000b22d:	77 40                	ja     c000b26f <File::open(FileOpenMode)+0x59>
c000b22f:	8b 14 95 a0 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd160]
c000b236:	85 d2                	test   edx,edx
c000b238:	74 35                	je     c000b26f <File::open(FileOpenMode)+0x59>
c000b23a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b240:	85 d2                	test   edx,edx
c000b242:	74 2b                	je     c000b26f <File::open(FileOpenMode)+0x59>
c000b244:	b8 06 00 00 00       	mov    eax,0x6
c000b249:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b24d:	75 20                	jne    c000b26f <File::open(FileOpenMode)+0x59>
c000b24f:	8b 02                	mov    eax,DWORD PTR [edx]
c000b251:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b257:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25b:	51                   	push   ecx
c000b25c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b25f:	51                   	push   ecx
c000b260:	52                   	push   edx
c000b261:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b264:	83 c4 10             	add    esp,0x10
c000b267:	85 c0                	test   eax,eax
c000b269:	75 04                	jne    c000b26f <File::open(FileOpenMode)+0x59>
c000b26b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b26f:	83 c4 08             	add    esp,0x8
c000b272:	5b                   	pop    ebx
c000b273:	c3                   	ret    

c000b274 <File::close()>:
c000b274:	53                   	push   ebx
c000b275:	b8 0b 00 00 00       	mov    eax,0xb
c000b27a:	83 ec 08             	sub    esp,0x8
c000b27d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b281:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b288:	80 fa 19             	cmp    dl,0x19
c000b28b:	77 41                	ja     c000b2ce <File::close()+0x5a>
c000b28d:	8b 1c 95 a0 2e 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd160]
c000b294:	85 db                	test   ebx,ebx
c000b296:	74 36                	je     c000b2ce <File::close()+0x5a>
c000b298:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b29f:	74 2d                	je     c000b2ce <File::close()+0x5a>
c000b2a1:	b8 05 00 00 00       	mov    eax,0x5
c000b2a6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b2aa:	74 22                	je     c000b2ce <File::close()+0x5a>
c000b2ac:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b2b0:	8b 04 95 a0 2e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd160]
c000b2b7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b2bd:	53                   	push   ebx
c000b2be:	53                   	push   ebx
c000b2bf:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2c1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b2c7:	50                   	push   eax
c000b2c8:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000b2cb:	83 c4 10             	add    esp,0x10
c000b2ce:	83 c4 08             	add    esp,0x8
c000b2d1:	5b                   	pop    ebx
c000b2d2:	c3                   	ret    
c000b2d3:	90                   	nop

c000b2d4 <File::seek(unsigned long long)>:
c000b2d4:	56                   	push   esi
c000b2d5:	53                   	push   ebx
c000b2d6:	b8 0b 00 00 00       	mov    eax,0xb
c000b2db:	51                   	push   ecx
c000b2dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b2e0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b2e4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b2eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b2ef:	80 fa 19             	cmp    dl,0x19
c000b2f2:	77 31                	ja     c000b325 <File::seek(unsigned long long)+0x51>
c000b2f4:	8b 14 95 a0 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd160]
c000b2fb:	85 d2                	test   edx,edx
c000b2fd:	74 26                	je     c000b325 <File::seek(unsigned long long)+0x51>
c000b2ff:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b305:	85 d2                	test   edx,edx
c000b307:	74 1c                	je     c000b325 <File::seek(unsigned long long)+0x51>
c000b309:	b8 05 00 00 00       	mov    eax,0x5
c000b30e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b312:	74 11                	je     c000b325 <File::seek(unsigned long long)+0x51>
c000b314:	8b 02                	mov    eax,DWORD PTR [edx]
c000b316:	53                   	push   ebx
c000b317:	51                   	push   ecx
c000b318:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b31e:	52                   	push   edx
c000b31f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b322:	83 c4 10             	add    esp,0x10
c000b325:	5a                   	pop    edx
c000b326:	5b                   	pop    ebx
c000b327:	5e                   	pop    esi
c000b328:	c3                   	ret    
c000b329:	90                   	nop

c000b32a <File::tell(unsigned long long*)>:
c000b32a:	83 ec 0c             	sub    esp,0xc
c000b32d:	b8 0b 00 00 00       	mov    eax,0xb
c000b332:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b336:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b33d:	80 fa 19             	cmp    dl,0x19
c000b340:	77 34                	ja     c000b376 <File::tell(unsigned long long*)+0x4c>
c000b342:	8b 14 95 a0 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd160]
c000b349:	85 d2                	test   edx,edx
c000b34b:	74 29                	je     c000b376 <File::tell(unsigned long long*)+0x4c>
c000b34d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b353:	85 d2                	test   edx,edx
c000b355:	74 1f                	je     c000b376 <File::tell(unsigned long long*)+0x4c>
c000b357:	b8 05 00 00 00       	mov    eax,0x5
c000b35c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b360:	74 14                	je     c000b376 <File::tell(unsigned long long*)+0x4c>
c000b362:	50                   	push   eax
c000b363:	8b 02                	mov    eax,DWORD PTR [edx]
c000b365:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b369:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b36f:	52                   	push   edx
c000b370:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b373:	83 c4 10             	add    esp,0x10
c000b376:	83 c4 0c             	add    esp,0xc
c000b379:	c3                   	ret    

c000b37a <File::rewind()>:
c000b37a:	83 ec 10             	sub    esp,0x10
c000b37d:	6a 00                	push   0x0
c000b37f:	6a 00                	push   0x0
c000b381:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b385:	e8 4a ff ff ff       	call   c000b2d4 <File::seek(unsigned long long)>
c000b38a:	83 c4 1c             	add    esp,0x1c
c000b38d:	c3                   	ret    

c000b38e <File::unlink()>:
c000b38e:	83 ec 0c             	sub    esp,0xc
c000b391:	b8 0b 00 00 00       	mov    eax,0xb
c000b396:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b39a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3a1:	80 f9 19             	cmp    cl,0x19
c000b3a4:	77 2f                	ja     c000b3d5 <File::unlink()+0x47>
c000b3a6:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b3ad:	85 c9                	test   ecx,ecx
c000b3af:	74 24                	je     c000b3d5 <File::unlink()+0x47>
c000b3b1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b3b7:	85 c9                	test   ecx,ecx
c000b3b9:	74 1a                	je     c000b3d5 <File::unlink()+0x47>
c000b3bb:	b8 06 00 00 00       	mov    eax,0x6
c000b3c0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3c4:	75 0f                	jne    c000b3d5 <File::unlink()+0x47>
c000b3c6:	83 c2 0d             	add    edx,0xd
c000b3c9:	50                   	push   eax
c000b3ca:	50                   	push   eax
c000b3cb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b3cd:	52                   	push   edx
c000b3ce:	51                   	push   ecx
c000b3cf:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b3d2:	83 c4 10             	add    esp,0x10
c000b3d5:	83 c4 0c             	add    esp,0xc
c000b3d8:	c3                   	ret    
c000b3d9:	90                   	nop

c000b3da <File::rename(char const*)>:
c000b3da:	83 ec 0c             	sub    esp,0xc
c000b3dd:	b8 0b 00 00 00       	mov    eax,0xb
c000b3e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3e6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3ed:	80 f9 19             	cmp    cl,0x19
c000b3f0:	77 32                	ja     c000b424 <File::rename(char const*)+0x4a>
c000b3f2:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b3f9:	85 c9                	test   ecx,ecx
c000b3fb:	74 27                	je     c000b424 <File::rename(char const*)+0x4a>
c000b3fd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b403:	85 c9                	test   ecx,ecx
c000b405:	74 1d                	je     c000b424 <File::rename(char const*)+0x4a>
c000b407:	b8 06 00 00 00       	mov    eax,0x6
c000b40c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b410:	75 12                	jne    c000b424 <File::rename(char const*)+0x4a>
c000b412:	83 c2 0d             	add    edx,0xd
c000b415:	50                   	push   eax
c000b416:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b418:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b41c:	52                   	push   edx
c000b41d:	51                   	push   ecx
c000b41e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b421:	83 c4 10             	add    esp,0x10
c000b424:	83 c4 0c             	add    esp,0xc
c000b427:	c3                   	ret    

c000b428 <File::chfatattr(unsigned char, unsigned char)>:
c000b428:	57                   	push   edi
c000b429:	b8 0b 00 00 00       	mov    eax,0xb
c000b42e:	56                   	push   esi
c000b42f:	53                   	push   ebx
c000b430:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b434:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b438:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b43f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b443:	80 f9 19             	cmp    cl,0x19
c000b446:	77 37                	ja     c000b47f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b448:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b44f:	85 c9                	test   ecx,ecx
c000b451:	74 2c                	je     c000b47f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b453:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b459:	85 c9                	test   ecx,ecx
c000b45b:	74 22                	je     c000b47f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b45d:	b8 06 00 00 00       	mov    eax,0x6
c000b462:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b466:	75 17                	jne    c000b47f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b468:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b46a:	89 f0                	mov    eax,esi
c000b46c:	83 c2 0d             	add    edx,0xd
c000b46f:	0f b6 f0             	movzx  esi,al
c000b472:	0f b6 db             	movzx  ebx,bl
c000b475:	56                   	push   esi
c000b476:	53                   	push   ebx
c000b477:	52                   	push   edx
c000b478:	51                   	push   ecx
c000b479:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b47c:	83 c4 10             	add    esp,0x10
c000b47f:	5b                   	pop    ebx
c000b480:	5e                   	pop    esi
c000b481:	5f                   	pop    edi
c000b482:	c3                   	ret    
c000b483:	90                   	nop

c000b484 <File::exists()>:
c000b484:	83 ec 0c             	sub    esp,0xc
c000b487:	31 c0                	xor    eax,eax
c000b489:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b48d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b494:	80 f9 19             	cmp    cl,0x19
c000b497:	77 24                	ja     c000b4bd <File::exists()+0x39>
c000b499:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b4a0:	85 c9                	test   ecx,ecx
c000b4a2:	74 19                	je     c000b4bd <File::exists()+0x39>
c000b4a4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b4aa:	85 c9                	test   ecx,ecx
c000b4ac:	74 0f                	je     c000b4bd <File::exists()+0x39>
c000b4ae:	83 c2 0d             	add    edx,0xd
c000b4b1:	50                   	push   eax
c000b4b2:	50                   	push   eax
c000b4b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4b5:	52                   	push   edx
c000b4b6:	51                   	push   ecx
c000b4b7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	83 c4 0c             	add    esp,0xc
c000b4c0:	c3                   	ret    
c000b4c1:	90                   	nop

c000b4c2 <File::stat(unsigned long long*, bool*)>:
c000b4c2:	56                   	push   esi
c000b4c3:	53                   	push   ebx
c000b4c4:	50                   	push   eax
c000b4c5:	b8 0b 00 00 00       	mov    eax,0xb
c000b4ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b4ce:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b4d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b4d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b4dd:	80 f9 19             	cmp    cl,0x19
c000b4e0:	77 3d                	ja     c000b51f <File::stat(unsigned long long*, bool*)+0x5d>
c000b4e2:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b4e9:	85 c9                	test   ecx,ecx
c000b4eb:	74 32                	je     c000b51f <File::stat(unsigned long long*, bool*)+0x5d>
c000b4ed:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b4f3:	85 c9                	test   ecx,ecx
c000b4f5:	74 28                	je     c000b51f <File::stat(unsigned long long*, bool*)+0x5d>
c000b4f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4f9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b4fd:	74 13                	je     c000b512 <File::stat(unsigned long long*, bool*)+0x50>
c000b4ff:	83 ec 04             	sub    esp,0x4
c000b502:	56                   	push   esi
c000b503:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b509:	51                   	push   ecx
c000b50a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b50d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b510:	eb 0a                	jmp    c000b51c <File::stat(unsigned long long*, bool*)+0x5a>
c000b512:	53                   	push   ebx
c000b513:	83 c2 0d             	add    edx,0xd
c000b516:	56                   	push   esi
c000b517:	52                   	push   edx
c000b518:	51                   	push   ecx
c000b519:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b51c:	83 c4 10             	add    esp,0x10
c000b51f:	5a                   	pop    edx
c000b520:	5b                   	pop    ebx
c000b521:	5e                   	pop    esi
c000b522:	c3                   	ret    

c000b523 <Fs::setcwd(Process*, char*)>:
c000b523:	55                   	push   ebp
c000b524:	57                   	push   edi
c000b525:	56                   	push   esi
c000b526:	53                   	push   ebx
c000b527:	81 ec 20 02 00 00    	sub    esp,0x220
c000b52d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b534:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b53a:	57                   	push   edi
c000b53b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b542:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b546:	56                   	push   esi
c000b547:	e8 60 fa ff ff       	call   c000afac <Fs::standardiseFiles(char*, char const*, char const*)>
c000b54c:	89 34 24             	mov    DWORD PTR [esp],esi
c000b54f:	e8 0c 50 ff ff       	call   c0000560 <strlen>
c000b554:	83 c4 10             	add    esp,0x10
c000b557:	83 f8 02             	cmp    eax,0x2
c000b55a:	77 15                	ja     c000b571 <Fs::setcwd(Process*, char*)+0x4e>
c000b55c:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b561:	83 eb 41             	sub    ebx,0x41
c000b564:	8b 04 9d a0 2e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd160]
c000b56b:	85 c0                	test   eax,eax
c000b56d:	75 1c                	jne    c000b58b <Fs::setcwd(Process*, char*)+0x68>
c000b56f:	eb 2f                	jmp    c000b5a0 <Fs::setcwd(Process*, char*)+0x7d>
c000b571:	83 ec 0c             	sub    esp,0xc
c000b574:	56                   	push   esi
c000b575:	e8 e6 4f ff ff       	call   c0000560 <strlen>
c000b57a:	83 c4 10             	add    esp,0x10
c000b57d:	83 f8 03             	cmp    eax,0x3
c000b580:	75 57                	jne    c000b5d9 <Fs::setcwd(Process*, char*)+0xb6>
c000b582:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b587:	75 50                	jne    c000b5d9 <Fs::setcwd(Process*, char*)+0xb6>
c000b589:	eb d1                	jmp    c000b55c <Fs::setcwd(Process*, char*)+0x39>
c000b58b:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000b592:	75 0c                	jne    c000b5a0 <Fs::setcwd(Process*, char*)+0x7d>
c000b594:	83 ec 0c             	sub    esp,0xc
c000b597:	50                   	push   eax
c000b598:	e8 69 1c 00 00       	call   c000d206 <LogicalDisk::mount()>
c000b59d:	83 c4 10             	add    esp,0x10
c000b5a0:	b8 03 00 00 00       	mov    eax,0x3
c000b5a5:	83 fb 19             	cmp    ebx,0x19
c000b5a8:	0f 87 c6 00 00 00    	ja     c000b674 <Fs::setcwd(Process*, char*)+0x151>
c000b5ae:	8b 14 9d a0 2e 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd160]
c000b5b5:	b8 05 00 00 00       	mov    eax,0x5
c000b5ba:	85 d2                	test   edx,edx
c000b5bc:	0f 84 b2 00 00 00    	je     c000b674 <Fs::setcwd(Process*, char*)+0x151>
c000b5c2:	b8 06 00 00 00       	mov    eax,0x6
c000b5c7:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b5ce:	0f 85 92 00 00 00    	jne    c000b666 <Fs::setcwd(Process*, char*)+0x143>
c000b5d4:	e9 9b 00 00 00       	jmp    c000b674 <Fs::setcwd(Process*, char*)+0x151>
c000b5d9:	83 ec 0c             	sub    esp,0xc
c000b5dc:	68 14 01 00 00       	push   0x114
c000b5e1:	e8 6b c8 ff ff       	call   c0007e51 <malloc>
c000b5e6:	83 c4 0c             	add    esp,0xc
c000b5e9:	89 c3                	mov    ebx,eax
c000b5eb:	55                   	push   ebp
c000b5ec:	56                   	push   esi
c000b5ed:	50                   	push   eax
c000b5ee:	e8 63 fb ff ff       	call   c000b156 <File::File(char const*, Process*)>
c000b5f3:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b5f8:	83 c4 0c             	add    esp,0xc
c000b5fb:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b5ff:	50                   	push   eax
c000b600:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b604:	50                   	push   eax
c000b605:	53                   	push   ebx
c000b606:	e8 b7 fe ff ff       	call   c000b4c2 <File::stat(unsigned long long*, bool*)>
c000b60b:	83 c4 10             	add    esp,0x10
c000b60e:	83 f8 02             	cmp    eax,0x2
c000b611:	74 04                	je     c000b617 <Fs::setcwd(Process*, char*)+0xf4>
c000b613:	85 c0                	test   eax,eax
c000b615:	74 1c                	je     c000b633 <Fs::setcwd(Process*, char*)+0x110>
c000b617:	b8 01 00 00 00       	mov    eax,0x1
c000b61c:	85 db                	test   ebx,ebx
c000b61e:	74 54                	je     c000b674 <Fs::setcwd(Process*, char*)+0x151>
c000b620:	83 ec 0c             	sub    esp,0xc
c000b623:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b625:	53                   	push   ebx
c000b626:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b629:	83 c4 10             	add    esp,0x10
c000b62c:	b8 01 00 00 00       	mov    eax,0x1
c000b631:	eb 41                	jmp    c000b674 <Fs::setcwd(Process*, char*)+0x151>
c000b633:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b638:	75 1c                	jne    c000b656 <Fs::setcwd(Process*, char*)+0x133>
c000b63a:	b8 02 00 00 00       	mov    eax,0x2
c000b63f:	85 db                	test   ebx,ebx
c000b641:	74 31                	je     c000b674 <Fs::setcwd(Process*, char*)+0x151>
c000b643:	83 ec 0c             	sub    esp,0xc
c000b646:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b648:	53                   	push   ebx
c000b649:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b64c:	83 c4 10             	add    esp,0x10
c000b64f:	b8 02 00 00 00       	mov    eax,0x2
c000b654:	eb 1e                	jmp    c000b674 <Fs::setcwd(Process*, char*)+0x151>
c000b656:	85 db                	test   ebx,ebx
c000b658:	74 0c                	je     c000b666 <Fs::setcwd(Process*, char*)+0x143>
c000b65a:	83 ec 0c             	sub    esp,0xc
c000b65d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b65f:	53                   	push   ebx
c000b660:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b663:	83 c4 10             	add    esp,0x10
c000b666:	50                   	push   eax
c000b667:	50                   	push   eax
c000b668:	56                   	push   esi
c000b669:	57                   	push   edi
c000b66a:	e8 b1 4f ff ff       	call   c0000620 <strcpy>
c000b66f:	83 c4 10             	add    esp,0x10
c000b672:	31 c0                	xor    eax,eax
c000b674:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b67a:	5b                   	pop    ebx
c000b67b:	5e                   	pop    esi
c000b67c:	5f                   	pop    edi
c000b67d:	5d                   	pop    ebp
c000b67e:	c3                   	ret    
c000b67f:	90                   	nop

c000b680 <Directory::Directory(char const*, Process*)>:
c000b680:	83 ec 0c             	sub    esp,0xc
c000b683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b687:	83 ec 08             	sub    esp,0x8
c000b68a:	6a 00                	push   0x0
c000b68c:	50                   	push   eax
c000b68d:	e8 b8 de ff ff       	call   c000954a <UnixFile::UnixFile(int)>
c000b692:	83 c4 10             	add    esp,0x10
c000b695:	ba 98 de 01 c0       	mov    edx,0xc001de98
c000b69a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b69e:	89 10                	mov    DWORD PTR [eax],edx
c000b6a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b6a4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b6aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6ae:	83 c0 0d             	add    eax,0xd
c000b6b1:	83 ec 04             	sub    esp,0x4
c000b6b4:	52                   	push   edx
c000b6b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6b9:	50                   	push   eax
c000b6ba:	e8 ed f8 ff ff       	call   c000afac <Fs::standardiseFiles(char*, char const*, char const*)>
c000b6bf:	83 c4 10             	add    esp,0x10
c000b6c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6c6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b6c9:	8d 50 bf             	lea    edx,[eax-0x41]
c000b6cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6d0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b6d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6da:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6e2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b6e8:	25 ff 00 00 00       	and    eax,0xff
c000b6ed:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000b6f4:	85 c0                	test   eax,eax
c000b6f6:	74 42                	je     c000b73a <Directory::Directory(char const*, Process*)+0xba>
c000b6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6fc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b702:	25 ff 00 00 00       	and    eax,0xff
c000b707:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000b70e:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b714:	85 c0                	test   eax,eax
c000b716:	75 22                	jne    c000b73a <Directory::Directory(char const*, Process*)+0xba>
c000b718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b71c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b722:	25 ff 00 00 00       	and    eax,0xff
c000b727:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c000b72e:	83 ec 0c             	sub    esp,0xc
c000b731:	50                   	push   eax
c000b732:	e8 cf 1a 00 00       	call   c000d206 <LogicalDisk::mount()>
c000b737:	83 c4 10             	add    esp,0x10
c000b73a:	90                   	nop
c000b73b:	83 c4 0c             	add    esp,0xc
c000b73e:	c3                   	ret    
c000b73f:	90                   	nop

c000b740 <Directory::open()>:
c000b740:	53                   	push   ebx
c000b741:	b8 0b 00 00 00       	mov    eax,0xb
c000b746:	83 ec 08             	sub    esp,0x8
c000b749:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b74d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b754:	80 fa 19             	cmp    dl,0x19
c000b757:	77 3d                	ja     c000b796 <Directory::open()+0x56>
c000b759:	8b 14 95 a0 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd160]
c000b760:	85 d2                	test   edx,edx
c000b762:	74 32                	je     c000b796 <Directory::open()+0x56>
c000b764:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b76a:	85 d2                	test   edx,edx
c000b76c:	74 28                	je     c000b796 <Directory::open()+0x56>
c000b76e:	b8 06 00 00 00       	mov    eax,0x6
c000b773:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b777:	75 1d                	jne    c000b796 <Directory::open()+0x56>
c000b779:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b77f:	50                   	push   eax
c000b780:	8b 02                	mov    eax,DWORD PTR [edx]
c000b782:	51                   	push   ecx
c000b783:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b786:	51                   	push   ecx
c000b787:	52                   	push   edx
c000b788:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b78b:	83 c4 10             	add    esp,0x10
c000b78e:	85 c0                	test   eax,eax
c000b790:	75 04                	jne    c000b796 <Directory::open()+0x56>
c000b792:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b796:	83 c4 08             	add    esp,0x8
c000b799:	5b                   	pop    ebx
c000b79a:	c3                   	ret    
c000b79b:	90                   	nop

c000b79c <Directory::close()>:
c000b79c:	53                   	push   ebx
c000b79d:	b8 0b 00 00 00       	mov    eax,0xb
c000b7a2:	83 ec 08             	sub    esp,0x8
c000b7a5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b7a9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b7b0:	80 fa 19             	cmp    dl,0x19
c000b7b3:	77 41                	ja     c000b7f6 <Directory::close()+0x5a>
c000b7b5:	8b 1c 95 a0 2e 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd160]
c000b7bc:	85 db                	test   ebx,ebx
c000b7be:	74 36                	je     c000b7f6 <Directory::close()+0x5a>
c000b7c0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b7c7:	74 2d                	je     c000b7f6 <Directory::close()+0x5a>
c000b7c9:	b8 05 00 00 00       	mov    eax,0x5
c000b7ce:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b7d2:	74 22                	je     c000b7f6 <Directory::close()+0x5a>
c000b7d4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b7d8:	8b 04 95 a0 2e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd160]
c000b7df:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b7e5:	53                   	push   ebx
c000b7e6:	53                   	push   ebx
c000b7e7:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7e9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b7ef:	50                   	push   eax
c000b7f0:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b7f3:	83 c4 10             	add    esp,0x10
c000b7f6:	83 c4 08             	add    esp,0x8
c000b7f9:	5b                   	pop    ebx
c000b7fa:	c3                   	ret    
c000b7fb:	90                   	nop

c000b7fc <Directory::unlink()>:
c000b7fc:	83 ec 0c             	sub    esp,0xc
c000b7ff:	b8 0b 00 00 00       	mov    eax,0xb
c000b804:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b808:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b80f:	80 f9 19             	cmp    cl,0x19
c000b812:	77 2f                	ja     c000b843 <Directory::unlink()+0x47>
c000b814:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b81b:	85 c9                	test   ecx,ecx
c000b81d:	74 24                	je     c000b843 <Directory::unlink()+0x47>
c000b81f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b825:	85 c9                	test   ecx,ecx
c000b827:	74 1a                	je     c000b843 <Directory::unlink()+0x47>
c000b829:	b8 06 00 00 00       	mov    eax,0x6
c000b82e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b832:	75 0f                	jne    c000b843 <Directory::unlink()+0x47>
c000b834:	83 c2 0d             	add    edx,0xd
c000b837:	50                   	push   eax
c000b838:	50                   	push   eax
c000b839:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b83b:	52                   	push   edx
c000b83c:	51                   	push   ecx
c000b83d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b840:	83 c4 10             	add    esp,0x10
c000b843:	83 c4 0c             	add    esp,0xc
c000b846:	c3                   	ret    
c000b847:	90                   	nop

c000b848 <Directory::rename(char const*)>:
c000b848:	83 ec 0c             	sub    esp,0xc
c000b84b:	b8 0b 00 00 00       	mov    eax,0xb
c000b850:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b854:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b85b:	80 f9 19             	cmp    cl,0x19
c000b85e:	77 32                	ja     c000b892 <Directory::rename(char const*)+0x4a>
c000b860:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b867:	85 c9                	test   ecx,ecx
c000b869:	74 27                	je     c000b892 <Directory::rename(char const*)+0x4a>
c000b86b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b871:	85 c9                	test   ecx,ecx
c000b873:	74 1d                	je     c000b892 <Directory::rename(char const*)+0x4a>
c000b875:	b8 06 00 00 00       	mov    eax,0x6
c000b87a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b87e:	75 12                	jne    c000b892 <Directory::rename(char const*)+0x4a>
c000b880:	83 c2 0d             	add    edx,0xd
c000b883:	50                   	push   eax
c000b884:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b886:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b88a:	52                   	push   edx
c000b88b:	51                   	push   ecx
c000b88c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b88f:	83 c4 10             	add    esp,0x10
c000b892:	83 c4 0c             	add    esp,0xc
c000b895:	c3                   	ret    

c000b896 <Directory::exists()>:
c000b896:	83 ec 0c             	sub    esp,0xc
c000b899:	31 c0                	xor    eax,eax
c000b89b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b89f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b8a6:	80 f9 19             	cmp    cl,0x19
c000b8a9:	77 24                	ja     c000b8cf <Directory::exists()+0x39>
c000b8ab:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b8b2:	85 c9                	test   ecx,ecx
c000b8b4:	74 19                	je     c000b8cf <Directory::exists()+0x39>
c000b8b6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b8bc:	85 c9                	test   ecx,ecx
c000b8be:	74 0f                	je     c000b8cf <Directory::exists()+0x39>
c000b8c0:	83 c2 0d             	add    edx,0xd
c000b8c3:	50                   	push   eax
c000b8c4:	50                   	push   eax
c000b8c5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b8c7:	52                   	push   edx
c000b8c8:	51                   	push   ecx
c000b8c9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b8cc:	83 c4 10             	add    esp,0x10
c000b8cf:	83 c4 0c             	add    esp,0xc
c000b8d2:	c3                   	ret    
c000b8d3:	90                   	nop

c000b8d4 <Directory::read(dirent*)>:
c000b8d4:	83 ec 1c             	sub    esp,0x1c
c000b8d7:	b8 0b 00 00 00       	mov    eax,0xb
c000b8dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b8e0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b8e7:	80 fa 19             	cmp    dl,0x19
c000b8ea:	77 30                	ja     c000b91c <Directory::read(dirent*)+0x48>
c000b8ec:	8b 14 95 a0 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd160]
c000b8f3:	85 d2                	test   edx,edx
c000b8f5:	74 25                	je     c000b91c <Directory::read(dirent*)+0x48>
c000b8f7:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b8fe:	74 1c                	je     c000b91c <Directory::read(dirent*)+0x48>
c000b900:	83 ec 0c             	sub    esp,0xc
c000b903:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b905:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b909:	52                   	push   edx
c000b90a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b90e:	6a 00                	push   0x0
c000b910:	68 10 01 00 00       	push   0x110
c000b915:	51                   	push   ecx
c000b916:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b919:	83 c4 20             	add    esp,0x20
c000b91c:	83 c4 1c             	add    esp,0x1c
c000b91f:	c3                   	ret    

c000b920 <Directory::create()>:
c000b920:	83 ec 0c             	sub    esp,0xc
c000b923:	b8 0b 00 00 00       	mov    eax,0xb
c000b928:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b92c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b933:	80 f9 19             	cmp    cl,0x19
c000b936:	77 2f                	ja     c000b967 <Directory::create()+0x47>
c000b938:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c000b93f:	85 c9                	test   ecx,ecx
c000b941:	74 24                	je     c000b967 <Directory::create()+0x47>
c000b943:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b949:	85 c9                	test   ecx,ecx
c000b94b:	74 1a                	je     c000b967 <Directory::create()+0x47>
c000b94d:	b8 06 00 00 00       	mov    eax,0x6
c000b952:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b956:	75 0f                	jne    c000b967 <Directory::create()+0x47>
c000b958:	83 c2 0d             	add    edx,0xd
c000b95b:	50                   	push   eax
c000b95c:	50                   	push   eax
c000b95d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b95f:	52                   	push   edx
c000b960:	51                   	push   ecx
c000b961:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b964:	83 c4 10             	add    esp,0x10
c000b967:	83 c4 0c             	add    esp,0xc
c000b96a:	c3                   	ret    
c000b96b:	90                   	nop

c000b96c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b96c:	b8 0a 00 00 00       	mov    eax,0xa
c000b971:	c3                   	ret    
c000b972:	66 90                	xchg   ax,ax

c000b974 <Bus::Bus(char const*)>:
c000b974:	83 ec 0c             	sub    esp,0xc
c000b977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b97b:	83 ec 08             	sub    esp,0x8
c000b97e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b982:	50                   	push   eax
c000b983:	e8 30 08 00 00       	call   c000c1b8 <Device::Device(char const*)>
c000b988:	83 c4 10             	add    esp,0x10
c000b98b:	ba b4 de 01 c0       	mov    edx,0xc001deb4
c000b990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b994:	89 10                	mov    DWORD PTR [eax],edx
c000b996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b99a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b9a4:	90                   	nop
c000b9a5:	83 c4 0c             	add    esp,0xc
c000b9a8:	c3                   	ret    
c000b9a9:	90                   	nop
c000b9aa:	66 90                	xchg   ax,ax

c000b9ac <Bus::~Bus()>:
c000b9ac:	83 ec 0c             	sub    esp,0xc
c000b9af:	ba b4 de 01 c0       	mov    edx,0xc001deb4
c000b9b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9b8:	89 10                	mov    DWORD PTR [eax],edx
c000b9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9be:	83 ec 0c             	sub    esp,0xc
c000b9c1:	50                   	push   eax
c000b9c2:	e8 5b 05 00 00       	call   c000bf22 <Device::~Device()>
c000b9c7:	83 c4 10             	add    esp,0x10
c000b9ca:	90                   	nop
c000b9cb:	83 c4 0c             	add    esp,0xc
c000b9ce:	c3                   	ret    
c000b9cf:	90                   	nop

c000b9d0 <Bus::~Bus()>:
c000b9d0:	83 ec 0c             	sub    esp,0xc
c000b9d3:	83 ec 0c             	sub    esp,0xc
c000b9d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9da:	e8 cd ff ff ff       	call   c000b9ac <Bus::~Bus()>
c000b9df:	83 c4 10             	add    esp,0x10
c000b9e2:	83 ec 08             	sub    esp,0x8
c000b9e5:	68 58 01 00 00       	push   0x158
c000b9ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9ee:	e8 f7 f0 ff ff       	call   c000aaea <operator delete(void*, unsigned long)>
c000b9f3:	83 c4 10             	add    esp,0x10
c000b9f6:	83 c4 0c             	add    esp,0xc
c000b9f9:	c3                   	ret    

c000b9fa <beepThread(void*)>:
c000b9fa:	83 ec 0c             	sub    esp,0xc
c000b9fd:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000ba02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba06:	48                   	dec    eax
c000ba07:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000ba0c:	75 01                	jne    c000ba0f <beepThread(void*)+0x15>
c000ba0e:	fb                   	sti    
c000ba0f:	83 ec 0c             	sub    esp,0xc
c000ba12:	6b c2 0a             	imul   eax,edx,0xa
c000ba15:	50                   	push   eax
c000ba16:	e8 69 83 00 00       	call   c0013d84 <milliTenthSleep(unsigned int)>
c000ba1b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000ba22:	e8 a5 9f 00 00       	call   c00159cc <HalMakeBeep(int)>
c000ba27:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ba2f:	83 c4 1c             	add    esp,0x1c
c000ba32:	e9 49 82 00 00       	jmp    c0013c80 <blockTask(TaskState)>

c000ba37 <Krnl::beep(int, int, bool)>:
c000ba37:	56                   	push   esi
c000ba38:	53                   	push   ebx
c000ba39:	83 ec 10             	sub    esp,0x10
c000ba3c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ba40:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ba44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba48:	e8 7f 9f 00 00       	call   c00159cc <HalMakeBeep(int)>
c000ba4d:	83 c4 10             	add    esp,0x10
c000ba50:	89 f0                	mov    eax,esi
c000ba52:	84 c0                	test   al,al
c000ba54:	74 1e                	je     c000ba74 <Krnl::beep(int, int, bool)+0x3d>
c000ba56:	83 ec 0c             	sub    esp,0xc
c000ba59:	6b db 0a             	imul   ebx,ebx,0xa
c000ba5c:	53                   	push   ebx
c000ba5d:	e8 22 83 00 00       	call   c0013d84 <milliTenthSleep(unsigned int)>
c000ba62:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000ba6a:	83 c4 14             	add    esp,0x14
c000ba6d:	5b                   	pop    ebx
c000ba6e:	5e                   	pop    esi
c000ba6f:	e9 58 9f 00 00       	jmp    c00159cc <HalMakeBeep(int)>
c000ba74:	68 e6 00 00 00       	push   0xe6
c000ba79:	53                   	push   ebx
c000ba7a:	68 fa b9 00 c0       	push   0xc000b9fa
c000ba7f:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c000ba85:	e8 da 7d 00 00       	call   c0013864 <Process::createThread(void (*)(void*), void*, int)>
c000ba8a:	83 c4 14             	add    esp,0x14
c000ba8d:	5b                   	pop    ebx
c000ba8e:	5e                   	pop    esi
c000ba8f:	c3                   	ret    

c000ba90 <User::loadClockSettings(int)>:
c000ba90:	53                   	push   ebx
c000ba91:	83 ec 14             	sub    esp,0x14
c000ba94:	68 14 01 00 00       	push   0x114
c000ba99:	e8 b3 c3 ff ff       	call   c0007e51 <malloc>
c000ba9e:	83 c4 0c             	add    esp,0xc
c000baa1:	89 c3                	mov    ebx,eax
c000baa3:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c000baa9:	68 d8 de 01 c0       	push   0xc001ded8
c000baae:	50                   	push   eax
c000baaf:	e8 a2 f6 ff ff       	call   c000b156 <File::File(char const*, Process*)>
c000bab4:	58                   	pop    eax
c000bab5:	5a                   	pop    edx
c000bab6:	6a 01                	push   0x1
c000bab8:	53                   	push   ebx
c000bab9:	e8 58 f7 ff ff       	call   c000b216 <File::open(FileOpenMode)>
c000babe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bac1:	e8 ae f7 ff ff       	call   c000b274 <File::close()>
c000bac6:	83 c4 10             	add    esp,0x10
c000bac9:	85 db                	test   ebx,ebx
c000bacb:	74 0f                	je     c000badc <User::loadClockSettings(int)+0x4c>
c000bacd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bacf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000bad3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bad6:	83 c4 08             	add    esp,0x8
c000bad9:	5b                   	pop    ebx
c000bada:	ff e0                	jmp    eax
c000badc:	83 c4 08             	add    esp,0x8
c000badf:	5b                   	pop    ebx
c000bae0:	c3                   	ret    
c000bae1:	90                   	nop

c000bae2 <Clock::Clock(char const*)>:
c000bae2:	83 ec 0c             	sub    esp,0xc
c000bae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bae9:	83 ec 08             	sub    esp,0x8
c000baec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf0:	50                   	push   eax
c000baf1:	e8 c2 06 00 00       	call   c000c1b8 <Device::Device(char const*)>
c000baf6:	83 c4 10             	add    esp,0x10
c000baf9:	ba 00 df 01 c0       	mov    edx,0xc001df00
c000bafe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb02:	89 10                	mov    DWORD PTR [eax],edx
c000bb04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb08:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000bb12:	90                   	nop
c000bb13:	83 c4 0c             	add    esp,0xc
c000bb16:	c3                   	ret    
c000bb17:	90                   	nop

c000bb18 <Clock::~Clock()>:
c000bb18:	83 ec 0c             	sub    esp,0xc
c000bb1b:	ba 00 df 01 c0       	mov    edx,0xc001df00
c000bb20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb24:	89 10                	mov    DWORD PTR [eax],edx
c000bb26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb2a:	83 ec 0c             	sub    esp,0xc
c000bb2d:	50                   	push   eax
c000bb2e:	e8 ef 03 00 00       	call   c000bf22 <Device::~Device()>
c000bb33:	83 c4 10             	add    esp,0x10
c000bb36:	90                   	nop
c000bb37:	83 c4 0c             	add    esp,0xc
c000bb3a:	c3                   	ret    
c000bb3b:	90                   	nop

c000bb3c <Clock::~Clock()>:
c000bb3c:	83 ec 0c             	sub    esp,0xc
c000bb3f:	83 ec 0c             	sub    esp,0xc
c000bb42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb46:	e8 cd ff ff ff       	call   c000bb18 <Clock::~Clock()>
c000bb4b:	83 c4 10             	add    esp,0x10
c000bb4e:	83 ec 08             	sub    esp,0x8
c000bb51:	68 58 01 00 00       	push   0x158
c000bb56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb5a:	e8 8b ef ff ff       	call   c000aaea <operator delete(void*, unsigned long)>
c000bb5f:	83 c4 10             	add    esp,0x10
c000bb62:	83 c4 0c             	add    esp,0xc
c000bb65:	c3                   	ret    

c000bb66 <Clock::timeInSecondsLocal()>:
c000bb66:	53                   	push   ebx
c000bb67:	83 ec 14             	sub    esp,0x14
c000bb6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bb6e:	8b 10                	mov    edx,DWORD PTR [eax]
c000bb70:	50                   	push   eax
c000bb71:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bb74:	0f b6 0d 38 0a 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020a38
c000bb7b:	03 0d 3c 0a 02 c0    	add    ecx,DWORD PTR ds:0xc0020a3c
c000bb81:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bb87:	89 cb                	mov    ebx,ecx
c000bb89:	c1 fb 1f             	sar    ebx,0x1f
c000bb8c:	01 c8                	add    eax,ecx
c000bb8e:	11 da                	adc    edx,ebx
c000bb90:	83 c4 10             	add    esp,0x10
c000bb93:	31 c9                	xor    ecx,ecx
c000bb95:	80 3d 39 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020a39,0x0
c000bb9c:	74 05                	je     c000bba3 <Clock::timeInSecondsLocal()+0x3d>
c000bb9e:	b9 08 07 00 00       	mov    ecx,0x708
c000bba3:	31 db                	xor    ebx,ebx
c000bba5:	01 c8                	add    eax,ecx
c000bba7:	11 da                	adc    edx,ebx
c000bba9:	83 c4 08             	add    esp,0x8
c000bbac:	5b                   	pop    ebx
c000bbad:	c3                   	ret    

c000bbae <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000bbae:	57                   	push   edi
c000bbaf:	56                   	push   esi
c000bbb0:	53                   	push   ebx
c000bbb1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bbb5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbb9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bbbb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bbbf:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000bbc2:	0f b6 05 38 0a 02 c0 	movzx  eax,BYTE PTR ds:0xc0020a38
c000bbc9:	03 05 3c 0a 02 c0    	add    eax,DWORD PTR ds:0xc0020a3c
c000bbcf:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000bbd5:	99                   	cdq    
c000bbd6:	29 c6                	sub    esi,eax
c000bbd8:	19 d7                	sbb    edi,edx
c000bbda:	89 f0                	mov    eax,esi
c000bbdc:	89 fa                	mov    edx,edi
c000bbde:	31 f6                	xor    esi,esi
c000bbe0:	80 3d 39 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020a39,0x0
c000bbe7:	74 05                	je     c000bbee <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000bbe9:	be 08 07 00 00       	mov    esi,0x708
c000bbee:	31 ff                	xor    edi,edi
c000bbf0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000bbf4:	29 f0                	sub    eax,esi
c000bbf6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bbfa:	19 fa                	sbb    edx,edi
c000bbfc:	89 d8                	mov    eax,ebx
c000bbfe:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bc02:	5b                   	pop    ebx
c000bc03:	5e                   	pop    esi
c000bc04:	5f                   	pop    edi
c000bc05:	ff e0                	jmp    eax

c000bc07 <datetimeToSeconds(datetime_t)>:
c000bc07:	55                   	push   ebp
c000bc08:	57                   	push   edi
c000bc09:	56                   	push   esi
c000bc0a:	53                   	push   ebx
c000bc0b:	83 ec 14             	sub    esp,0x14
c000bc0e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc12:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bc16:	89 d3                	mov    ebx,edx
c000bc18:	0f b6 c6             	movzx  eax,dh
c000bc1b:	c1 eb 10             	shr    ebx,0x10
c000bc1e:	48                   	dec    eax
c000bc1f:	66 81 eb 6c 07       	sub    bx,0x76c
c000bc24:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000bc28:	0f b6 f5             	movzx  esi,ch
c000bc2b:	89 cf                	mov    edi,ecx
c000bc2d:	6b f6 3c             	imul   esi,esi,0x3c
c000bc30:	c1 ef 10             	shr    edi,0x10
c000bc33:	0f b6 c9             	movzx  ecx,cl
c000bc36:	89 f8                	mov    eax,edi
c000bc38:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bc3e:	0f b6 f8             	movzx  edi,al
c000bc41:	0f b6 d2             	movzx  edx,dl
c000bc44:	01 fe                	add    esi,edi
c000bc46:	01 f1                	add    ecx,esi
c000bc48:	0f b7 f3             	movzx  esi,bx
c000bc4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000bc4f:	c1 f9 1f             	sar    ecx,0x1f
c000bc52:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000bc57:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bc5b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000bc60:	8b 0c 8d 40 df 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe20c0]
c000bc67:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000bc6b:	76 29                	jbe    c000bc96 <datetimeToSeconds(datetime_t)+0x8f>
c000bc6d:	f6 c3 03             	test   bl,0x3
c000bc70:	75 24                	jne    c000bc96 <datetimeToSeconds(datetime_t)+0x8f>
c000bc72:	31 d2                	xor    edx,edx
c000bc74:	bf 64 00 00 00       	mov    edi,0x64
c000bc79:	89 d8                	mov    eax,ebx
c000bc7b:	66 f7 f7             	div    di
c000bc7e:	66 85 d2             	test   dx,dx
c000bc81:	75 12                	jne    c000bc95 <datetimeToSeconds(datetime_t)+0x8e>
c000bc83:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000bc89:	bf 90 01 00 00       	mov    edi,0x190
c000bc8e:	99                   	cdq    
c000bc8f:	f7 ff                	idiv   edi
c000bc91:	85 d2                	test   edx,edx
c000bc93:	75 01                	jne    c000bc96 <datetimeToSeconds(datetime_t)+0x8f>
c000bc95:	41                   	inc    ecx
c000bc96:	66 83 fb 46          	cmp    bx,0x46
c000bc9a:	76 45                	jbe    c000bce1 <datetimeToSeconds(datetime_t)+0xda>
c000bc9c:	bb 46 00 00 00       	mov    ebx,0x46
c000bca1:	bf 64 00 00 00       	mov    edi,0x64
c000bca6:	bd 90 01 00 00       	mov    ebp,0x190
c000bcab:	b8 6d 01 00 00       	mov    eax,0x16d
c000bcb0:	f6 c3 03             	test   bl,0x3
c000bcb3:	75 23                	jne    c000bcd8 <datetimeToSeconds(datetime_t)+0xd1>
c000bcb5:	89 d8                	mov    eax,ebx
c000bcb7:	99                   	cdq    
c000bcb8:	f7 ff                	idiv   edi
c000bcba:	b8 6e 01 00 00       	mov    eax,0x16e
c000bcbf:	85 d2                	test   edx,edx
c000bcc1:	75 15                	jne    c000bcd8 <datetimeToSeconds(datetime_t)+0xd1>
c000bcc3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000bcc9:	99                   	cdq    
c000bcca:	f7 fd                	idiv   ebp
c000bccc:	31 c0                	xor    eax,eax
c000bcce:	85 d2                	test   edx,edx
c000bcd0:	0f 94 c0             	sete   al
c000bcd3:	05 6d 01 00 00       	add    eax,0x16d
c000bcd8:	01 c1                	add    ecx,eax
c000bcda:	43                   	inc    ebx
c000bcdb:	39 f3                	cmp    ebx,esi
c000bcdd:	7c cc                	jl     c000bcab <datetimeToSeconds(datetime_t)+0xa4>
c000bcdf:	eb 3b                	jmp    c000bd1c <datetimeToSeconds(datetime_t)+0x115>
c000bce1:	74 39                	je     c000bd1c <datetimeToSeconds(datetime_t)+0x115>
c000bce3:	b8 45 00 00 00       	mov    eax,0x45
c000bce8:	89 c2                	mov    edx,eax
c000bcea:	83 e2 03             	and    edx,0x3
c000bced:	39 f0                	cmp    eax,esi
c000bcef:	7e 13                	jle    c000bd04 <datetimeToSeconds(datetime_t)+0xfd>
c000bcf1:	85 d2                	test   edx,edx
c000bcf3:	0f 94 c2             	sete   dl
c000bcf6:	48                   	dec    eax
c000bcf7:	0f b6 d2             	movzx  edx,dl
c000bcfa:	81 c2 6d 01 00 00    	add    edx,0x16d
c000bd00:	29 d1                	sub    ecx,edx
c000bd02:	eb e4                	jmp    c000bce8 <datetimeToSeconds(datetime_t)+0xe1>
c000bd04:	b8 6d 01 00 00       	mov    eax,0x16d
c000bd09:	85 d2                	test   edx,edx
c000bd0b:	75 0d                	jne    c000bd1a <datetimeToSeconds(datetime_t)+0x113>
c000bd0d:	31 c0                	xor    eax,eax
c000bd0f:	66 85 db             	test   bx,bx
c000bd12:	0f 95 c0             	setne  al
c000bd15:	05 6d 01 00 00       	add    eax,0x16d
c000bd1a:	29 c1                	sub    ecx,eax
c000bd1c:	b8 80 51 01 00       	mov    eax,0x15180
c000bd21:	f7 e9                	imul   ecx
c000bd23:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bd27:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000bd2b:	83 c4 14             	add    esp,0x14
c000bd2e:	5b                   	pop    ebx
c000bd2f:	5e                   	pop    esi
c000bd30:	5f                   	pop    edi
c000bd31:	5d                   	pop    ebp
c000bd32:	c3                   	ret    
c000bd33:	90                   	nop

c000bd34 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bd34:	57                   	push   edi
c000bd35:	56                   	push   esi
c000bd36:	53                   	push   ebx
c000bd37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd3b:	8b 06                	mov    eax,DWORD PTR [esi]
c000bd3d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bd40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd48:	e8 ba fe ff ff       	call   c000bc07 <datetimeToSeconds(datetime_t)>
c000bd4d:	59                   	pop    ecx
c000bd4e:	0f b6 0d 38 0a 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020a38
c000bd55:	5b                   	pop    ebx
c000bd56:	03 0d 3c 0a 02 c0    	add    ecx,DWORD PTR ds:0xc0020a3c
c000bd5c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bd62:	89 cb                	mov    ebx,ecx
c000bd64:	c1 fb 1f             	sar    ebx,0x1f
c000bd67:	29 c8                	sub    eax,ecx
c000bd69:	19 da                	sbb    edx,ebx
c000bd6b:	31 c9                	xor    ecx,ecx
c000bd6d:	80 3d 39 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020a39,0x0
c000bd74:	74 05                	je     c000bd7b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bd76:	b9 08 07 00 00       	mov    ecx,0x708
c000bd7b:	31 db                	xor    ebx,ebx
c000bd7d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bd81:	29 c8                	sub    eax,ecx
c000bd83:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd87:	19 da                	sbb    edx,ebx
c000bd89:	89 f8                	mov    eax,edi
c000bd8b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd8f:	5b                   	pop    ebx
c000bd90:	5e                   	pop    esi
c000bd91:	5f                   	pop    edi
c000bd92:	ff e0                	jmp    eax

c000bd94 <secondsToDatetime(unsigned long long)>:
c000bd94:	55                   	push   ebp
c000bd95:	57                   	push   edi
c000bd96:	56                   	push   esi
c000bd97:	53                   	push   ebx
c000bd98:	83 ec 1c             	sub    esp,0x1c
c000bd9b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bd9f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bda3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bda7:	6a 00                	push   0x0
c000bda9:	68 80 51 01 00       	push   0x15180
c000bdae:	55                   	push   ebp
c000bdaf:	57                   	push   edi
c000bdb0:	e8 fb 03 01 00       	call   c001c1b0 <__udivdi3>
c000bdb5:	83 c4 10             	add    esp,0x10
c000bdb8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bdbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdc2:	6a 00                	push   0x0
c000bdc4:	68 80 51 01 00       	push   0x15180
c000bdc9:	55                   	push   ebp
c000bdca:	57                   	push   edi
c000bdcb:	bf 10 0e 00 00       	mov    edi,0xe10
c000bdd0:	e8 db 04 01 00       	call   c001c2b0 <__umoddi3>
c000bdd5:	83 c4 10             	add    esp,0x10
c000bdd8:	99                   	cdq    
c000bdd9:	f7 ff                	idiv   edi
c000bddb:	bf 3c 00 00 00       	mov    edi,0x3c
c000bde0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bde3:	89 d0                	mov    eax,edx
c000bde5:	99                   	cdq    
c000bde6:	f7 ff                	idiv   edi
c000bde8:	85 db                	test   ebx,ebx
c000bdea:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bded:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bdf0:	79 11                	jns    c000be03 <secondsToDatetime(unsigned long long)+0x6f>
c000bdf2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bdf6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bdfc:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be01:	eb 07                	jmp    c000be0a <secondsToDatetime(unsigned long long)+0x76>
c000be03:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be08:	89 d8                	mov    eax,ebx
c000be0a:	bf b4 05 00 00       	mov    edi,0x5b4
c000be0f:	99                   	cdq    
c000be10:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000be15:	f7 f9                	idiv   ecx
c000be17:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000be1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be20:	31 d2                	xor    edx,edx
c000be22:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000be2a:	01 c3                	add    ebx,eax
c000be2c:	89 d8                	mov    eax,ebx
c000be2e:	f7 f1                	div    ecx
c000be30:	31 d2                	xor    edx,edx
c000be32:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000be35:	89 d8                	mov    eax,ebx
c000be37:	f7 f7                	div    edi
c000be39:	31 d2                	xor    edx,edx
c000be3b:	29 c1                	sub    ecx,eax
c000be3d:	89 d8                	mov    eax,ebx
c000be3f:	f7 f5                	div    ebp
c000be41:	bd 6d 01 00 00       	mov    ebp,0x16d
c000be46:	29 c1                	sub    ecx,eax
c000be48:	31 d2                	xor    edx,edx
c000be4a:	89 c8                	mov    eax,ecx
c000be4c:	f7 f5                	div    ebp
c000be4e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000be53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000be57:	31 d2                	xor    edx,edx
c000be59:	89 c8                	mov    eax,ecx
c000be5b:	f7 f5                	div    ebp
c000be5d:	31 d2                	xor    edx,edx
c000be5f:	01 c3                	add    ebx,eax
c000be61:	89 c8                	mov    eax,ecx
c000be63:	f7 f7                	div    edi
c000be65:	bf 99 00 00 00       	mov    edi,0x99
c000be6a:	29 c3                	sub    ebx,eax
c000be6c:	31 d2                	xor    edx,edx
c000be6e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000be76:	29 c3                	sub    ebx,eax
c000be78:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000be7b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000be7e:	bb 05 00 00 00       	mov    ebx,0x5
c000be83:	83 c1 02             	add    ecx,0x2
c000be86:	89 c8                	mov    eax,ecx
c000be88:	f7 f7                	div    edi
c000be8a:	31 d2                	xor    edx,edx
c000be8c:	89 c7                	mov    edi,eax
c000be8e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000be94:	83 c0 02             	add    eax,0x2
c000be97:	f7 f3                	div    ebx
c000be99:	89 eb                	mov    ebx,ebp
c000be9b:	29 c3                	sub    ebx,eax
c000be9d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bea3:	88 1e                	mov    BYTE PTR [esi],bl
c000bea5:	19 c0                	sbb    eax,eax
c000bea7:	31 d2                	xor    edx,edx
c000bea9:	83 e0 0c             	and    eax,0xc
c000beac:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000beb0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000beb8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bebc:	83 f9 01             	cmp    ecx,0x1
c000bebf:	0f 96 c2             	setbe  dl
c000bec2:	41                   	inc    ecx
c000bec3:	01 d0                	add    eax,edx
c000bec5:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bec8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000becc:	83 c4 1c             	add    esp,0x1c
c000becf:	89 f0                	mov    eax,esi
c000bed1:	5b                   	pop    ebx
c000bed2:	5e                   	pop    esi
c000bed3:	5f                   	pop    edi
c000bed4:	5d                   	pop    ebp
c000bed5:	c2 04 00             	ret    0x4

c000bed8 <Clock::timeInDatetimeLocal()>:
c000bed8:	53                   	push   ebx
c000bed9:	83 ec 14             	sub    esp,0x14
c000bedc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bee0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bee4:	e8 7d fc ff ff       	call   c000bb66 <Clock::timeInSecondsLocal()>
c000bee9:	83 c4 0c             	add    esp,0xc
c000beec:	52                   	push   edx
c000beed:	50                   	push   eax
c000beee:	53                   	push   ebx
c000beef:	e8 a0 fe ff ff       	call   c000bd94 <secondsToDatetime(unsigned long long)>
c000bef4:	89 d8                	mov    eax,ebx
c000bef6:	83 c4 14             	add    esp,0x14
c000bef9:	5b                   	pop    ebx
c000befa:	c2 04 00             	ret    0x4
c000befd:	90                   	nop

c000befe <Device::hibernate()>:
c000befe:	c3                   	ret    
c000beff:	90                   	nop

c000bf00 <Device::wake()>:
c000bf00:	c3                   	ret    
c000bf01:	90                   	nop

c000bf02 <Device::detect()>:
c000bf02:	c3                   	ret    
c000bf03:	90                   	nop

c000bf04 <Device::disableLegacy()>:
c000bf04:	c3                   	ret    
c000bf05:	90                   	nop

c000bf06 <Device::powerSaving(PowerSavingLevel)>:
c000bf06:	c3                   	ret    
c000bf07:	90                   	nop

c000bf08 <DriverlessDevice::close(int, int, void*)>:
c000bf08:	31 c0                	xor    eax,eax
c000bf0a:	c3                   	ret    
c000bf0b:	90                   	nop

c000bf0c <DriverlessDevice::detect()>:
c000bf0c:	c3                   	ret    
c000bf0d:	90                   	nop

c000bf0e <DriverlessDevice::open(int, int, void*)>:
c000bf0e:	83 ec 18             	sub    esp,0x18
c000bf11:	68 70 df 01 c0       	push   0xc001df70
c000bf16:	e8 14 48 00 00       	call   c001072f <Krnl::panic(char const*)>
c000bf1b:	83 c8 ff             	or     eax,0xffffffff
c000bf1e:	83 c4 1c             	add    esp,0x1c
c000bf21:	c3                   	ret    

c000bf22 <Device::~Device()>:
c000bf22:	ba d0 df 01 c0       	mov    edx,0xc001dfd0
c000bf27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf2b:	89 10                	mov    DWORD PTR [eax],edx
c000bf2d:	90                   	nop
c000bf2e:	c3                   	ret    
c000bf2f:	90                   	nop

c000bf30 <Device::~Device()>:
c000bf30:	83 ec 0c             	sub    esp,0xc
c000bf33:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bf37:	e8 e6 ff ff ff       	call   c000bf22 <Device::~Device()>
c000bf3c:	83 c4 04             	add    esp,0x4
c000bf3f:	83 ec 08             	sub    esp,0x8
c000bf42:	68 58 01 00 00       	push   0x158
c000bf47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4b:	e8 9a eb ff ff       	call   c000aaea <operator delete(void*, unsigned long)>
c000bf50:	83 c4 10             	add    esp,0x10
c000bf53:	83 c4 0c             	add    esp,0xc
c000bf56:	c3                   	ret    
c000bf57:	90                   	nop

c000bf58 <Device::findAndLoadDriver()>:
c000bf58:	c7 44 24 04 8e df 01 c0 	mov    DWORD PTR [esp+0x4],0xc001df8e
c000bf60:	e9 7b ec ff ff       	jmp    c000abe0 <Dbg::kprintf(char const*, ...)>
c000bf65:	90                   	nop

c000bf66 <Device::preOpenPCI(PCIDeviceInfo)>:
c000bf66:	57                   	push   edi
c000bf67:	b9 09 00 00 00       	mov    ecx,0x9
c000bf6c:	56                   	push   esi
c000bf6d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bf71:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bf75:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bf7f:	81 c7 18 01 00 00    	add    edi,0x118
c000bf85:	fc                   	cld    
c000bf86:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bf88:	5e                   	pop    esi
c000bf89:	5f                   	pop    edi
c000bf8a:	c3                   	ret    
c000bf8b:	90                   	nop

c000bf8c <Device::preOpenACPI(void*, char*, char*)>:
c000bf8c:	57                   	push   edi
c000bf8d:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bf92:	56                   	push   esi
c000bf93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf9b:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bfa5:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bfab:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bfb1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bfb5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfb7:	b9 0e 00 00 00       	mov    ecx,0xe
c000bfbc:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bfc2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bfc6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfc8:	5e                   	pop    esi
c000bfc9:	5f                   	pop    edi
c000bfca:	c3                   	ret    
c000bfcb:	90                   	nop

c000bfcc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bfcc:	53                   	push   ebx
c000bfcd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bfd1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bfd5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bfd9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bfdd:	0f b6 c0             	movzx  eax,al
c000bfe0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bfe4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfe8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bfec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bff0:	5b                   	pop    ebx
c000bff1:	e9 a6 05 00 00       	jmp    c000c59c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bff6 <Device::getParent()>:
c000bff6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bffa:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c000:	c3                   	ret    
c000c001:	90                   	nop

c000c002 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c002:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c006:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c00a:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c00f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c013:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c017:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c01b:	e9 e8 06 00 00       	jmp    c000c708 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c020 <Device::addChild(Device*)>:
c000c020:	53                   	push   ebx
c000c021:	83 ec 08             	sub    esp,0x8
c000c024:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c028:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c02c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c032:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c038:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c03a:	85 d2                	test   edx,edx
c000c03c:	74 04                	je     c000c042 <Device::addChild(Device*)+0x22>
c000c03e:	89 d3                	mov    ebx,edx
c000c040:	eb f6                	jmp    c000c038 <Device::addChild(Device*)+0x18>
c000c042:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c045:	83 ec 0c             	sub    esp,0xc
c000c048:	6a 08                	push   0x8
c000c04a:	e8 02 be ff ff       	call   c0007e51 <malloc>
c000c04f:	89 03                	mov    DWORD PTR [ebx],eax
c000c051:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c057:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c05e:	83 c4 18             	add    esp,0x18
c000c061:	5b                   	pop    ebx
c000c062:	c3                   	ret    
c000c063:	90                   	nop

c000c064 <Device::removeAllChildren()>:
c000c064:	56                   	push   esi
c000c065:	53                   	push   ebx
c000c066:	52                   	push   edx
c000c067:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c06b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c071:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c074:	74 17                	je     c000c08d <Device::removeAllChildren()+0x29>
c000c076:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c079:	85 c0                	test   eax,eax
c000c07b:	74 0c                	je     c000c089 <Device::removeAllChildren()+0x25>
c000c07d:	83 ec 0c             	sub    esp,0xc
c000c080:	8b 10                	mov    edx,DWORD PTR [eax]
c000c082:	50                   	push   eax
c000c083:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c086:	83 c4 10             	add    esp,0x10
c000c089:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c08b:	eb e4                	jmp    c000c071 <Device::removeAllChildren()+0xd>
c000c08d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c093:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c099:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c09f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c0a6:	58                   	pop    eax
c000c0a7:	5b                   	pop    ebx
c000c0a8:	5e                   	pop    esi
c000c0a9:	c3                   	ret    

c000c0aa <Device::hibernateAll()>:
c000c0aa:	53                   	push   ebx
c000c0ab:	83 ec 14             	sub    esp,0x14
c000c0ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0b4:	53                   	push   ebx
c000c0b5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c0b8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0be:	83 c4 10             	add    esp,0x10
c000c0c1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0c4:	74 0f                	je     c000c0d5 <Device::hibernateAll()+0x2b>
c000c0c6:	83 ec 0c             	sub    esp,0xc
c000c0c9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0cc:	e8 d9 ff ff ff       	call   c000c0aa <Device::hibernateAll()>
c000c0d1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0d3:	eb e9                	jmp    c000c0be <Device::hibernateAll()+0x14>
c000c0d5:	83 c4 08             	add    esp,0x8
c000c0d8:	5b                   	pop    ebx
c000c0d9:	c3                   	ret    

c000c0da <Device::wakeAll()>:
c000c0da:	53                   	push   ebx
c000c0db:	83 ec 14             	sub    esp,0x14
c000c0de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0e4:	53                   	push   ebx
c000c0e5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c0e8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0ee:	83 c4 10             	add    esp,0x10
c000c0f1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0f4:	74 0f                	je     c000c105 <Device::wakeAll()+0x2b>
c000c0f6:	83 ec 0c             	sub    esp,0xc
c000c0f9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0fc:	e8 d9 ff ff ff       	call   c000c0da <Device::wakeAll()>
c000c101:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c103:	eb e9                	jmp    c000c0ee <Device::wakeAll()+0x14>
c000c105:	83 c4 08             	add    esp,0x8
c000c108:	5b                   	pop    ebx
c000c109:	c3                   	ret    

c000c10a <Device::detectAll()>:
c000c10a:	53                   	push   ebx
c000c10b:	83 ec 14             	sub    esp,0x14
c000c10e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c112:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c114:	53                   	push   ebx
c000c115:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c118:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c11e:	83 c4 10             	add    esp,0x10
c000c121:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c124:	74 0f                	je     c000c135 <Device::detectAll()+0x2b>
c000c126:	83 ec 0c             	sub    esp,0xc
c000c129:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c12c:	e8 d9 ff ff ff       	call   c000c10a <Device::detectAll()>
c000c131:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c133:	eb e9                	jmp    c000c11e <Device::detectAll()+0x14>
c000c135:	83 c4 08             	add    esp,0x8
c000c138:	5b                   	pop    ebx
c000c139:	c3                   	ret    

c000c13a <Device::disableLegacyAll()>:
c000c13a:	c3                   	ret    
c000c13b:	90                   	nop

c000c13c <Device::loadDriversForAll()>:
c000c13c:	c3                   	ret    
c000c13d:	90                   	nop

c000c13e <Device::closeAll()>:
c000c13e:	53                   	push   ebx
c000c13f:	83 ec 08             	sub    esp,0x8
c000c142:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c146:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c148:	6a 00                	push   0x0
c000c14a:	6a 00                	push   0x0
c000c14c:	6a 00                	push   0x0
c000c14e:	53                   	push   ebx
c000c14f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c152:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c158:	83 c4 10             	add    esp,0x10
c000c15b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c15e:	74 0f                	je     c000c16f <Device::closeAll()+0x31>
c000c160:	83 ec 0c             	sub    esp,0xc
c000c163:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c166:	e8 d3 ff ff ff       	call   c000c13e <Device::closeAll()>
c000c16b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c16d:	eb e9                	jmp    c000c158 <Device::closeAll()+0x1a>
c000c16f:	83 c4 08             	add    esp,0x8
c000c172:	5b                   	pop    ebx
c000c173:	c3                   	ret    

c000c174 <Device::powerSavingAll(PowerSavingLevel)>:
c000c174:	56                   	push   esi
c000c175:	53                   	push   ebx
c000c176:	83 ec 0c             	sub    esp,0xc
c000c179:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c17d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c181:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c183:	56                   	push   esi
c000c184:	53                   	push   ebx
c000c185:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c188:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c18e:	83 c4 10             	add    esp,0x10
c000c191:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c194:	74 0f                	je     c000c1a5 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c196:	52                   	push   edx
c000c197:	52                   	push   edx
c000c198:	56                   	push   esi
c000c199:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c19c:	e8 d3 ff ff ff       	call   c000c174 <Device::powerSavingAll(PowerSavingLevel)>
c000c1a1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c1a3:	eb e9                	jmp    c000c18e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c1a5:	58                   	pop    eax
c000c1a6:	5b                   	pop    ebx
c000c1a7:	5e                   	pop    esi
c000c1a8:	c3                   	ret    
c000c1a9:	90                   	nop

c000c1aa <Device::setName(char const*)>:
c000c1aa:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c1b2:	e9 69 44 ff ff       	jmp    c0000620 <strcpy>
c000c1b7:	90                   	nop

c000c1b8 <Device::Device(char const*)>:
c000c1b8:	83 ec 1c             	sub    esp,0x1c
c000c1bb:	ba d0 df 01 c0       	mov    edx,0xc001dfd0
c000c1c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1c4:	89 10                	mov    DWORD PTR [eax],edx
c000c1c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1ca:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c1d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1d8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c1e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1e6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c1f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1f4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c1fe:	83 ec 08             	sub    esp,0x8
c000c201:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c205:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c209:	e8 9c ff ff ff       	call   c000c1aa <Device::setName(char const*)>
c000c20e:	83 c4 10             	add    esp,0x10
c000c211:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c219:	83 ec 0c             	sub    esp,0xc
c000c21c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c220:	e8 2c bc ff ff       	call   c0007e51 <malloc>
c000c225:	83 c4 10             	add    esp,0x10
c000c228:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c22e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c235:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c239:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c23f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c243:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c249:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c24f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c253:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c259:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c264:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c26b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c26f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c276:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c27a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c284:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c288:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c292:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c296:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c2a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2a4:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c2ae:	90                   	nop
c000c2af:	83 c4 1c             	add    esp,0x1c
c000c2b2:	c3                   	ret    
c000c2b3:	90                   	nop

c000c2b4 <Device::getName()>:
c000c2b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c2b8:	05 d0 00 00 00       	add    eax,0xd0
c000c2bd:	c3                   	ret    

c000c2be <DriverlessDevice::DriverlessDevice(char const*)>:
c000c2be:	83 ec 0c             	sub    esp,0xc
c000c2c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2c5:	83 ec 08             	sub    esp,0x8
c000c2c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2cc:	50                   	push   eax
c000c2cd:	e8 e6 fe ff ff       	call   c000c1b8 <Device::Device(char const*)>
c000c2d2:	83 c4 10             	add    esp,0x10
c000c2d5:	ba fc df 01 c0       	mov    edx,0xc001dffc
c000c2da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2de:	89 10                	mov    DWORD PTR [eax],edx
c000c2e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2e4:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000c2ee:	90                   	nop
c000c2ef:	83 c4 0c             	add    esp,0xc
c000c2f2:	c3                   	ret    
c000c2f3:	90                   	nop

c000c2f4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c2f4:	57                   	push   edi
c000c2f5:	56                   	push   esi
c000c2f6:	53                   	push   ebx
c000c2f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c2fb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c2ff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c303:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c309:	75 0c                	jne    c000c317 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c30b:	52                   	push   edx
c000c30c:	52                   	push   edx
c000c30d:	53                   	push   ebx
c000c30e:	56                   	push   esi
c000c30f:	e8 4e 03 01 00       	call   c001c662 <LinkedList<Device>::addElement(Device*)>
c000c314:	83 c4 10             	add    esp,0x10
c000c317:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c31d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c320:	74 12                	je     c000c334 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c322:	50                   	push   eax
c000c323:	57                   	push   edi
c000c324:	56                   	push   esi
c000c325:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c328:	e8 c7 ff ff ff       	call   c000c2f4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c32d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c32f:	83 c4 10             	add    esp,0x10
c000c332:	eb e9                	jmp    c000c31d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c334:	5b                   	pop    ebx
c000c335:	5e                   	pop    esi
c000c336:	5f                   	pop    edi
c000c337:	c3                   	ret    

c000c338 <getDevicesOfType(DeviceType)>:
c000c338:	53                   	push   ebx
c000c339:	83 ec 14             	sub    esp,0x14
c000c33c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c340:	53                   	push   ebx
c000c341:	e8 f8 03 01 00       	call   c001c73e <LinkedList<Device>::LinkedList()>
c000c346:	83 c4 0c             	add    esp,0xc
c000c349:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c34d:	53                   	push   ebx
c000c34e:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c000c354:	e8 9b ff ff ff       	call   c000c2f4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c359:	89 d8                	mov    eax,ebx
c000c35b:	83 c4 18             	add    esp,0x18
c000c35e:	5b                   	pop    ebx
c000c35f:	c2 04 00             	ret    0x4
c000c362:	66 90                	xchg   ax,ax

c000c364 <HardDiskController::HardDiskController(char const*)>:
c000c364:	83 ec 0c             	sub    esp,0xc
c000c367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c36b:	83 ec 08             	sub    esp,0x8
c000c36e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c372:	50                   	push   eax
c000c373:	e8 40 fe ff ff       	call   c000c1b8 <Device::Device(char const*)>
c000c378:	83 c4 10             	add    esp,0x10
c000c37b:	ba 28 e0 01 c0       	mov    edx,0xc001e028
c000c380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c384:	89 10                	mov    DWORD PTR [eax],edx
c000c386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c38a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c394:	90                   	nop
c000c395:	83 c4 0c             	add    esp,0xc
c000c398:	c3                   	ret    
c000c399:	90                   	nop
c000c39a:	66 90                	xchg   ax,ax

c000c39c <HardDiskController::~HardDiskController()>:
c000c39c:	83 ec 0c             	sub    esp,0xc
c000c39f:	ba 28 e0 01 c0       	mov    edx,0xc001e028
c000c3a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3a8:	89 10                	mov    DWORD PTR [eax],edx
c000c3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3ae:	83 ec 0c             	sub    esp,0xc
c000c3b1:	50                   	push   eax
c000c3b2:	e8 6b fb ff ff       	call   c000bf22 <Device::~Device()>
c000c3b7:	83 c4 10             	add    esp,0x10
c000c3ba:	90                   	nop
c000c3bb:	83 c4 0c             	add    esp,0xc
c000c3be:	c3                   	ret    
c000c3bf:	90                   	nop

c000c3c0 <HardDiskController::~HardDiskController()>:
c000c3c0:	83 ec 0c             	sub    esp,0xc
c000c3c3:	83 ec 0c             	sub    esp,0xc
c000c3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ca:	e8 cd ff ff ff       	call   c000c39c <HardDiskController::~HardDiskController()>
c000c3cf:	83 c4 10             	add    esp,0x10
c000c3d2:	83 ec 08             	sub    esp,0x8
c000c3d5:	68 58 01 00 00       	push   0x158
c000c3da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3de:	e8 07 e7 ff ff       	call   c000aaea <operator delete(void*, unsigned long)>
c000c3e3:	83 c4 10             	add    esp,0x10
c000c3e6:	83 c4 0c             	add    esp,0xc
c000c3e9:	c3                   	ret    

c000c3ea <PhysicalDisk::eject()>:
c000c3ea:	83 c8 ff             	or     eax,0xffffffff
c000c3ed:	c3                   	ret    

c000c3ee <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c3ee:	83 ec 0c             	sub    esp,0xc
c000c3f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3f5:	83 ec 08             	sub    esp,0x8
c000c3f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3fc:	50                   	push   eax
c000c3fd:	e8 b6 fd ff ff       	call   c000c1b8 <Device::Device(char const*)>
c000c402:	83 c4 10             	add    esp,0x10
c000c405:	ba 54 e0 01 c0       	mov    edx,0xc001e054
c000c40a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c40e:	89 10                	mov    DWORD PTR [eax],edx
c000c410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c414:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c41b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c42a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c438:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c43c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c446:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c450:	90                   	nop
c000c451:	83 c4 0c             	add    esp,0xc
c000c454:	c3                   	ret    
c000c455:	90                   	nop

c000c456 <PhysicalDisk::startCache()>:
c000c456:	56                   	push   esi
c000c457:	53                   	push   ebx
c000c458:	83 ec 10             	sub    esp,0x10
c000c45b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c45f:	6a 44                	push   0x44
c000c461:	e8 eb b9 ff ff       	call   c0007e51 <malloc>
c000c466:	89 c6                	mov    esi,eax
c000c468:	58                   	pop    eax
c000c469:	5a                   	pop    edx
c000c46a:	53                   	push   ebx
c000c46b:	56                   	push   esi
c000c46c:	e8 ab 15 00 00       	call   c000da1c <VCache::VCache(PhysicalDisk*)>
c000c471:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c477:	83 c4 14             	add    esp,0x14
c000c47a:	5b                   	pop    ebx
c000c47b:	5e                   	pop    esi
c000c47c:	c3                   	ret    
c000c47d:	90                   	nop

c000c47e <PhysicalDisk::~PhysicalDisk()>:
c000c47e:	83 ec 0c             	sub    esp,0xc
c000c481:	ba 54 e0 01 c0       	mov    edx,0xc001e054
c000c486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c48a:	89 10                	mov    DWORD PTR [eax],edx
c000c48c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c490:	83 ec 0c             	sub    esp,0xc
c000c493:	50                   	push   eax
c000c494:	e8 89 fa ff ff       	call   c000bf22 <Device::~Device()>
c000c499:	83 c4 10             	add    esp,0x10
c000c49c:	90                   	nop
c000c49d:	83 c4 0c             	add    esp,0xc
c000c4a0:	c3                   	ret    
c000c4a1:	90                   	nop

c000c4a2 <PhysicalDisk::~PhysicalDisk()>:
c000c4a2:	83 ec 0c             	sub    esp,0xc
c000c4a5:	83 ec 0c             	sub    esp,0xc
c000c4a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4ac:	e8 cd ff ff ff       	call   c000c47e <PhysicalDisk::~PhysicalDisk()>
c000c4b1:	83 c4 10             	add    esp,0x10
c000c4b4:	83 ec 08             	sub    esp,0x8
c000c4b7:	68 6c 01 00 00       	push   0x16c
c000c4bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c0:	e8 25 e6 ff ff       	call   c000aaea <operator delete(void*, unsigned long)>
c000c4c5:	83 c4 10             	add    esp,0x10
c000c4c8:	83 c4 0c             	add    esp,0xc
c000c4cb:	c3                   	ret    

c000c4cc <int_handler>:
c000c4cc:	55                   	push   ebp
c000c4cd:	57                   	push   edi
c000c4ce:	56                   	push   esi
c000c4cf:	53                   	push   ebx
c000c4d0:	83 ec 0c             	sub    esp,0xc
c000c4d3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c4d7:	80 3d c0 33 02 c0 00 	cmp    BYTE PTR ds:0xc00233c0,0x0
c000c4de:	74 0b                	je     c000c4eb <int_handler+0x1f>
c000c4e0:	fa                   	cli    
c000c4e1:	f4                   	hlt    
c000c4e2:	80 3d c0 33 02 c0 00 	cmp    BYTE PTR ds:0xc00233c0,0x0
c000c4e9:	75 f5                	jne    c000c4e0 <int_handler+0x14>
c000c4eb:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c4ee:	8d 46 e0             	lea    eax,[esi-0x20]
c000c4f1:	83 f8 17             	cmp    eax,0x17
c000c4f4:	76 3e                	jbe    c000c534 <int_handler+0x68>
c000c4f6:	c1 e6 04             	shl    esi,0x4
c000c4f9:	31 db                	xor    ebx,ebx
c000c4fb:	8d ae 40 1a 02 c0    	lea    ebp,[esi-0x3ffde5c0]
c000c501:	81 c6 40 0a 02 c0    	add    esi,0xc0020a40
c000c507:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c50b:	85 c0                	test   eax,eax
c000c50d:	74 13                	je     c000c522 <int_handler+0x56>
c000c50f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c512:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c516:	74 2a                	je     c000c542 <int_handler+0x76>
c000c518:	83 ec 08             	sub    esp,0x8
c000c51b:	52                   	push   edx
c000c51c:	57                   	push   edi
c000c51d:	ff d0                	call   eax
c000c51f:	83 c4 10             	add    esp,0x10
c000c522:	43                   	inc    ebx
c000c523:	83 fb 04             	cmp    ebx,0x4
c000c526:	75 df                	jne    c000c507 <int_handler+0x3b>
c000c528:	83 c4 0c             	add    esp,0xc
c000c52b:	31 c0                	xor    eax,eax
c000c52d:	5b                   	pop    ebx
c000c52e:	31 d2                	xor    edx,edx
c000c530:	5e                   	pop    esi
c000c531:	5f                   	pop    edi
c000c532:	5d                   	pop    ebp
c000c533:	c3                   	ret    
c000c534:	83 ec 0c             	sub    esp,0xc
c000c537:	50                   	push   eax
c000c538:	e8 cc 94 00 00       	call   c0015a09 <HalEndOfInterrupt(int)>
c000c53d:	83 c4 10             	add    esp,0x10
c000c540:	eb b4                	jmp    c000c4f6 <int_handler+0x2a>
c000c542:	83 ec 08             	sub    esp,0x8
c000c545:	52                   	push   edx
c000c546:	57                   	push   edi
c000c547:	ff d0                	call   eax
c000c549:	83 c4 10             	add    esp,0x10
c000c54c:	83 c4 0c             	add    esp,0xc
c000c54f:	5b                   	pop    ebx
c000c550:	5e                   	pop    esi
c000c551:	5f                   	pop    edi
c000c552:	5d                   	pop    ebp
c000c553:	c3                   	ret    

c000c554 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c554:	56                   	push   esi
c000c555:	31 c0                	xor    eax,eax
c000c557:	53                   	push   ebx
c000c558:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c55c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c560:	89 ca                	mov    edx,ecx
c000c562:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c566:	c1 e2 04             	shl    edx,0x4
c000c569:	83 bc 82 40 1a 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffde5c0],0x0
c000c571:	74 15                	je     c000c588 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000c573:	40                   	inc    eax
c000c574:	83 f8 04             	cmp    eax,0x4
c000c577:	75 f0                	jne    c000c569 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c579:	c7 44 24 0c 84 e0 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e084
c000c581:	5b                   	pop    ebx
c000c582:	5e                   	pop    esi
c000c583:	e9 a7 41 00 00       	jmp    c001072f <Krnl::panic(char const*)>
c000c588:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c58b:	89 1c 85 40 1a 02 c0 	mov    DWORD PTR [eax*4-0x3ffde5c0],ebx
c000c592:	89 34 85 40 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf5c0],esi
c000c599:	5b                   	pop    ebx
c000c59a:	5e                   	pop    esi
c000c59b:	c3                   	ret    

c000c59c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c59c:	57                   	push   edi
c000c59d:	8b 15 38 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020938
c000c5a3:	56                   	push   esi
c000c5a4:	53                   	push   ebx
c000c5a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c5a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c5ad:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c5b4:	74 5b                	je     c000c611 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c5b6:	89 c7                	mov    edi,eax
c000c5b8:	84 c0                	test   al,al
c000c5ba:	74 24                	je     c000c5e0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c5bc:	83 fe 0f             	cmp    esi,0xf
c000c5bf:	0f 8f d9 00 00 00    	jg     c000c69e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000c5c5:	8a 86 a0 f8 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0760]
c000c5cb:	25 ff 00 00 00       	and    eax,0xff
c000c5d0:	66 8b bc 00 e0 31 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdce20]
c000c5d8:	89 c6                	mov    esi,eax
c000c5da:	66 d1 ef             	shr    di,1
c000c5dd:	83 e7 01             	and    edi,0x1
c000c5e0:	83 ec 08             	sub    esp,0x8
c000c5e3:	a1 00 48 02 c0       	mov    eax,ds:0xc0024800
c000c5e8:	31 db                	xor    ebx,ebx
c000c5ea:	50                   	push   eax
c000c5eb:	68 91 e0 01 c0       	push   0xc001e091
c000c5f0:	e8 eb e5 ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c000c5f5:	83 c4 10             	add    esp,0x10
c000c5f8:	a1 00 48 02 c0       	mov    eax,ds:0xc0024800
c000c5fd:	85 c0                	test   eax,eax
c000c5ff:	7f 51                	jg     c000c652 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c601:	83 ec 0c             	sub    esp,0xc
c000c604:	68 a8 e0 01 c0       	push   0xc001e0a8
c000c609:	e8 21 41 00 00       	call   c001072f <Krnl::panic(char const*)>
c000c60e:	83 c4 10             	add    esp,0x10
c000c611:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c614:	31 d2                	xor    edx,edx
c000c616:	89 c8                	mov    eax,ecx
c000c618:	c1 e0 04             	shl    eax,0x4
c000c61b:	8b 9c 90 40 1a 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffde5c0]
c000c622:	85 db                	test   ebx,ebx
c000c624:	0f 84 8b 00 00 00    	je     c000c6b5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c62a:	42                   	inc    edx
c000c62b:	83 fa 04             	cmp    edx,0x4
c000c62e:	75 eb                	jne    c000c61b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c630:	83 ec 0c             	sub    esp,0xc
c000c633:	68 fc e0 01 c0       	push   0xc001e0fc
c000c638:	e8 f2 40 00 00       	call   c001072f <Krnl::panic(char const*)>
c000c63d:	83 c4 10             	add    esp,0x10
c000c640:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c645:	5b                   	pop    ebx
c000c646:	5e                   	pop    esi
c000c647:	5f                   	pop    edi
c000c648:	c3                   	ret    
c000c649:	43                   	inc    ebx
c000c64a:	39 1d 00 48 02 c0    	cmp    DWORD PTR ds:0xc0024800,ebx
c000c650:	7e af                	jle    c000c601 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c652:	83 ec 08             	sub    esp,0x8
c000c655:	8b 04 9d 20 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb7e0]
c000c65c:	56                   	push   esi
c000c65d:	50                   	push   eax
c000c65e:	e8 27 f0 00 00       	call   c001b68a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c663:	83 c4 10             	add    esp,0x10
c000c666:	84 c0                	test   al,al
c000c668:	74 df                	je     c000c649 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c66a:	81 e7 ff 00 00 00    	and    edi,0xff
c000c670:	50                   	push   eax
c000c671:	8d 46 20             	lea    eax,[esi+0x20]
c000c674:	57                   	push   edi
c000c675:	25 ff 00 00 00       	and    eax,0xff
c000c67a:	6a 00                	push   0x0
c000c67c:	50                   	push   eax
c000c67d:	89 f0                	mov    eax,esi
c000c67f:	6a 00                	push   0x0
c000c681:	25 ff 00 00 00       	and    eax,0xff
c000c686:	6a 00                	push   0x0
c000c688:	50                   	push   eax
c000c689:	8b 04 9d 20 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb7e0]
c000c690:	50                   	push   eax
c000c691:	e8 6e f1 00 00       	call   c001b804 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c696:	83 c4 20             	add    esp,0x20
c000c699:	e9 73 ff ff ff       	jmp    c000c611 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c69e:	83 ec 0c             	sub    esp,0xc
c000c6a1:	31 ff                	xor    edi,edi
c000c6a3:	68 c4 e0 01 c0       	push   0xc001e0c4
c000c6a8:	e8 82 40 00 00       	call   c001072f <Krnl::panic(char const*)>
c000c6ad:	83 c4 10             	add    esp,0x10
c000c6b0:	e9 2b ff ff ff       	jmp    c000c5e0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c6b5:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c6b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6bc:	89 14 85 40 1a 02 c0 	mov    DWORD PTR [eax*4-0x3ffde5c0],edx
c000c6c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c6c7:	5b                   	pop    ebx
c000c6c8:	89 14 85 40 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf5c0],edx
c000c6cf:	89 f0                	mov    eax,esi
c000c6d1:	5e                   	pop    esi
c000c6d2:	5f                   	pop    edi
c000c6d3:	c3                   	ret    

c000c6d4 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c6d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c6d8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c6dc:	c1 e0 04             	shl    eax,0x4
c000c6df:	8d 50 10             	lea    edx,[eax+0x10]
c000c6e2:	39 88 40 1a 02 c0    	cmp    DWORD PTR [eax-0x3ffde5c0],ecx
c000c6e8:	74 08                	je     c000c6f2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c6ea:	83 c0 04             	add    eax,0x4
c000c6ed:	39 d0                	cmp    eax,edx
c000c6ef:	75 f1                	jne    c000c6e2 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c6f1:	c3                   	ret    
c000c6f2:	c7 80 40 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5c0],0x0
c000c6fc:	c7 80 40 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5c0],0x0
c000c706:	eb e2                	jmp    c000c6ea <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c708 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c708:	53                   	push   ebx
c000c709:	83 ec 08             	sub    esp,0x8
c000c70c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c710:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c715:	74 0e                	je     c000c725 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c717:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000c71c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c723:	75 37                	jne    c000c75c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c729:	83 c0 20             	add    eax,0x20
c000c72c:	c1 e0 04             	shl    eax,0x4
c000c72f:	8d 50 10             	lea    edx,[eax+0x10]
c000c732:	39 98 40 1a 02 c0    	cmp    DWORD PTR [eax-0x3ffde5c0],ebx
c000c738:	74 0c                	je     c000c746 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c73a:	83 c0 04             	add    eax,0x4
c000c73d:	39 d0                	cmp    eax,edx
c000c73f:	75 f1                	jne    c000c732 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c741:	83 c4 08             	add    esp,0x8
c000c744:	5b                   	pop    ebx
c000c745:	c3                   	ret    
c000c746:	c7 80 40 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5c0],0x0
c000c750:	c7 80 40 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5c0],0x0
c000c75a:	eb de                	jmp    c000c73a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c75c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c761:	7f 12                	jg     c000c775 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c763:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c767:	31 c0                	xor    eax,eax
c000c769:	8a 81 a0 f8 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0760]
c000c76f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c773:	eb b0                	jmp    c000c725 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c775:	83 ec 0c             	sub    esp,0xc
c000c778:	68 b5 e0 01 c0       	push   0xc001e0b5
c000c77d:	e8 ad 3f 00 00       	call   c001072f <Krnl::panic(char const*)>
c000c782:	83 c4 10             	add    esp,0x10
c000c785:	eb 9e                	jmp    c000c725 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c787 <setupINTS()>:
c000c787:	31 c0                	xor    eax,eax
c000c789:	c7 80 40 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5c0],0x0
c000c793:	c7 80 40 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5c0],0x0
c000c79d:	c7 80 44 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5bc],0x0
c000c7a7:	c7 80 44 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5bc],0x0
c000c7b1:	c7 80 48 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5b8],0x0
c000c7bb:	c7 80 48 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5b8],0x0
c000c7c5:	c7 80 4c 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde5b4],0x0
c000c7cf:	c7 80 4c 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf5b4],0x0
c000c7d9:	83 c0 10             	add    eax,0x10
c000c7dc:	3d 00 10 00 00       	cmp    eax,0x1000
c000c7e1:	75 a6                	jne    c000c789 <setupINTS()+0x2>
c000c7e3:	c3                   	ret    

c000c7e4 <convertLegacyIRQNumber(int)>:
c000c7e4:	83 ec 0c             	sub    esp,0xc
c000c7e7:	8b 15 38 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020938
c000c7ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7f1:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c7f8:	74 0f                	je     c000c809 <convertLegacyIRQNumber(int)+0x25>
c000c7fa:	83 f8 0f             	cmp    eax,0xf
c000c7fd:	7f 0e                	jg     c000c80d <convertLegacyIRQNumber(int)+0x29>
c000c7ff:	31 c9                	xor    ecx,ecx
c000c801:	8a 88 a0 f8 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0760]
c000c807:	89 c8                	mov    eax,ecx
c000c809:	83 c4 0c             	add    esp,0xc
c000c80c:	c3                   	ret    
c000c80d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c811:	83 ec 0c             	sub    esp,0xc
c000c814:	68 c4 e0 01 c0       	push   0xc001e0c4
c000c819:	e8 11 3f 00 00       	call   c001072f <Krnl::panic(char const*)>
c000c81e:	83 c4 10             	add    esp,0x10
c000c821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c825:	83 c4 0c             	add    esp,0xc
c000c828:	c3                   	ret    
c000c829:	90                   	nop

c000c82a <startGUI(void*)>:
c000c82a:	55                   	push   ebp
c000c82b:	89 e5                	mov    ebp,esp
c000c82d:	53                   	push   ebx
c000c82e:	83 ec 04             	sub    esp,0x4
c000c831:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000c836:	48                   	dec    eax
c000c837:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000c83c:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000c841:	85 c0                	test   eax,eax
c000c843:	75 01                	jne    c000c846 <startGUI(void*)+0x1c>
c000c845:	fb                   	sti    
c000c846:	8b 1d 38 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020938
c000c84c:	83 ec 08             	sub    esp,0x8
c000c84f:	6a 01                	push   0x1
c000c851:	68 21 e1 01 c0       	push   0xc001e121
c000c856:	e8 37 68 00 00       	call   c0013092 <Thr::loadDLL(char const*, bool)>
c000c85b:	83 c4 10             	add    esp,0x10
c000c85e:	83 ec 08             	sub    esp,0x8
c000c861:	53                   	push   ebx
c000c862:	50                   	push   eax
c000c863:	e8 5b 6a 00 00       	call   c00132c3 <Thr::executeDLL(unsigned long, void*)>
c000c868:	83 c4 10             	add    esp,0x10
c000c86b:	8b 1d 38 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020938
c000c871:	83 ec 08             	sub    esp,0x8
c000c874:	6a 01                	push   0x1
c000c876:	68 3b e1 01 c0       	push   0xc001e13b
c000c87b:	e8 12 68 00 00       	call   c0013092 <Thr::loadDLL(char const*, bool)>
c000c880:	83 c4 10             	add    esp,0x10
c000c883:	83 ec 08             	sub    esp,0x8
c000c886:	53                   	push   ebx
c000c887:	50                   	push   eax
c000c888:	e8 36 6a 00 00       	call   c00132c3 <Thr::executeDLL(unsigned long, void*)>
c000c88d:	83 c4 10             	add    esp,0x10
c000c890:	90                   	nop
c000c891:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c894:	c9                   	leave  
c000c895:	c3                   	ret    

c000c896 <startGUIVESA(void*)>:
c000c896:	55                   	push   ebp
c000c897:	89 e5                	mov    ebp,esp
c000c899:	53                   	push   ebx
c000c89a:	83 ec 04             	sub    esp,0x4
c000c89d:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000c8a2:	48                   	dec    eax
c000c8a3:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000c8a8:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000c8ad:	85 c0                	test   eax,eax
c000c8af:	75 01                	jne    c000c8b2 <startGUIVESA(void*)+0x1c>
c000c8b1:	fb                   	sti    
c000c8b2:	8b 1d 38 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020938
c000c8b8:	83 ec 08             	sub    esp,0x8
c000c8bb:	6a 01                	push   0x1
c000c8bd:	68 59 e1 01 c0       	push   0xc001e159
c000c8c2:	e8 cb 67 00 00       	call   c0013092 <Thr::loadDLL(char const*, bool)>
c000c8c7:	83 c4 10             	add    esp,0x10
c000c8ca:	83 ec 08             	sub    esp,0x8
c000c8cd:	53                   	push   ebx
c000c8ce:	50                   	push   eax
c000c8cf:	e8 ef 69 00 00       	call   c00132c3 <Thr::executeDLL(unsigned long, void*)>
c000c8d4:	83 c4 10             	add    esp,0x10
c000c8d7:	8b 1d 38 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020938
c000c8dd:	83 ec 08             	sub    esp,0x8
c000c8e0:	6a 01                	push   0x1
c000c8e2:	68 3b e1 01 c0       	push   0xc001e13b
c000c8e7:	e8 a6 67 00 00       	call   c0013092 <Thr::loadDLL(char const*, bool)>
c000c8ec:	83 c4 10             	add    esp,0x10
c000c8ef:	83 ec 08             	sub    esp,0x8
c000c8f2:	53                   	push   ebx
c000c8f3:	50                   	push   eax
c000c8f4:	e8 ca 69 00 00       	call   c00132c3 <Thr::executeDLL(unsigned long, void*)>
c000c8f9:	83 c4 10             	add    esp,0x10
c000c8fc:	90                   	nop
c000c8fd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c900:	c9                   	leave  
c000c901:	c3                   	ret    

c000c902 <sendKeyToTerminal(unsigned char)>:
c000c902:	55                   	push   ebp
c000c903:	89 e5                	mov    ebp,esp
c000c905:	83 ec 28             	sub    esp,0x28
c000c908:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c90b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c90e:	8b 15 84 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020984
c000c914:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c917:	25 ff 00 00 00       	and    eax,0xff
c000c91c:	83 ec 08             	sub    esp,0x8
c000c91f:	50                   	push   eax
c000c920:	52                   	push   edx
c000c921:	e8 aa c8 ff ff       	call   c00091d0 <VgaText::receiveKey(unsigned char)>
c000c926:	83 c4 10             	add    esp,0x10
c000c929:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c92d:	0f 85 8f 00 00 00    	jne    c000c9c2 <sendKeyToTerminal(unsigned char)+0xc0>
c000c933:	fa                   	cli    
c000c934:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000c939:	40                   	inc    eax
c000c93a:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000c93f:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c000c944:	40                   	inc    eax
c000c945:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c000c94a:	a1 40 2a 02 c0       	mov    eax,ds:0xc0022a40
c000c94f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c952:	c7 05 40 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a40,0x0
c000c95c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c960:	74 1f                	je     c000c981 <sendKeyToTerminal(unsigned char)+0x7f>
c000c962:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c965:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c968:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c96b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c96e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c971:	83 ec 0c             	sub    esp,0xc
c000c974:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c977:	e8 cc 75 00 00       	call   c0013f48 <unblockTask(ThreadControlBlock*)>
c000c97c:	83 c4 10             	add    esp,0x10
c000c97f:	eb db                	jmp    c000c95c <sendKeyToTerminal(unsigned char)+0x5a>
c000c981:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c000c986:	48                   	dec    eax
c000c987:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c000c98c:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c000c991:	85 c0                	test   eax,eax
c000c993:	75 18                	jne    c000c9ad <sendKeyToTerminal(unsigned char)+0xab>
c000c995:	a1 00 3e 02 c0       	mov    eax,ds:0xc0023e00
c000c99a:	85 c0                	test   eax,eax
c000c99c:	74 0f                	je     c000c9ad <sendKeyToTerminal(unsigned char)+0xab>
c000c99e:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c000c9a8:	e8 d7 70 00 00       	call   c0013a84 <schedule()>
c000c9ad:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000c9b2:	48                   	dec    eax
c000c9b3:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000c9b8:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000c9bd:	85 c0                	test   eax,eax
c000c9bf:	75 01                	jne    c000c9c2 <sendKeyToTerminal(unsigned char)+0xc0>
c000c9c1:	fb                   	sti    
c000c9c2:	90                   	nop
c000c9c3:	c9                   	leave  
c000c9c4:	c3                   	ret    

c000c9c5 <sendKeyboardToken(KeyboardToken)>:
c000c9c5:	55                   	push   ebp
c000c9c6:	89 e5                	mov    ebp,esp
c000c9c8:	83 ec 18             	sub    esp,0x18
c000c9cb:	e8 ab 3e 00 00       	call   c001087b <Krnl::userIOReceived()>
c000c9d0:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c9d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9d6:	25 ff ff 00 00       	and    eax,0xffff
c000c9db:	83 f2 01             	xor    edx,0x1
c000c9de:	88 90 60 2a 02 c0    	mov    BYTE PTR [eax-0x3ffdd5a0],dl
c000c9e4:	a1 48 2a 02 c0       	mov    eax,ds:0xc0022a48
c000c9e9:	85 c0                	test   eax,eax
c000c9eb:	74 24                	je     c000ca11 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c9ed:	8b 0d 48 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022a48
c000c9f3:	83 ec 04             	sub    esp,0x4
c000c9f6:	68 60 2a 02 c0       	push   0xc0022a60
c000c9fb:	83 ec 08             	sub    esp,0x8
c000c9fe:	89 e2                	mov    edx,esp
c000ca00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca03:	89 02                	mov    DWORD PTR [edx],eax
c000ca05:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ca08:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ca0c:	ff d1                	call   ecx
c000ca0e:	83 c4 10             	add    esp,0x10
c000ca11:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ca15:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000ca18:	a0 68 2e 02 c0       	mov    al,ds:0xc0022e68
c000ca1d:	38 c2                	cmp    dl,al
c000ca1f:	74 1e                	je     c000ca3f <sendKeyboardToken(KeyboardToken)+0x7a>
c000ca21:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000ca24:	a2 68 2e 02 c0       	mov    ds:0xc0022e68,al
c000ca29:	a0 68 2e 02 c0       	mov    al,ds:0xc0022e68
c000ca2e:	25 ff 00 00 00       	and    eax,0xff
c000ca33:	83 ec 0c             	sub    esp,0xc
c000ca36:	50                   	push   eax
c000ca37:	e8 e6 be ff ff       	call   c0008922 <setTerminalScrollLock(bool)>
c000ca3c:	83 c4 10             	add    esp,0x10
c000ca3f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000ca42:	84 c0                	test   al,al
c000ca44:	0f 84 ae 00 00 00    	je     c000caf8 <sendKeyboardToken(KeyboardToken)+0x133>
c000ca4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca4d:	66 3d 10 03          	cmp    ax,0x310
c000ca51:	75 06                	jne    c000ca59 <sendKeyboardToken(KeyboardToken)+0x94>
c000ca53:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000ca59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca5c:	66 3d 11 03          	cmp    ax,0x311
c000ca60:	75 06                	jne    c000ca68 <sendKeyboardToken(KeyboardToken)+0xa3>
c000ca62:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000ca68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca6b:	66 3d 12 03          	cmp    ax,0x312
c000ca6f:	75 06                	jne    c000ca77 <sendKeyboardToken(KeyboardToken)+0xb2>
c000ca71:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000ca77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca7a:	66 3d 13 03          	cmp    ax,0x313
c000ca7e:	75 06                	jne    c000ca86 <sendKeyboardToken(KeyboardToken)+0xc1>
c000ca80:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000ca86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca89:	66 3d 14 03          	cmp    ax,0x314
c000ca8d:	75 06                	jne    c000ca95 <sendKeyboardToken(KeyboardToken)+0xd0>
c000ca8f:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000ca95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca98:	66 3d 15 03          	cmp    ax,0x315
c000ca9c:	75 06                	jne    c000caa4 <sendKeyboardToken(KeyboardToken)+0xdf>
c000ca9e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000caa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caa7:	66 3d 16 03          	cmp    ax,0x316
c000caab:	75 06                	jne    c000cab3 <sendKeyboardToken(KeyboardToken)+0xee>
c000caad:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000cab3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cab6:	66 3d 17 03          	cmp    ax,0x317
c000caba:	75 06                	jne    c000cac2 <sendKeyboardToken(KeyboardToken)+0xfd>
c000cabc:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000cac2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cac5:	66 3d 18 03          	cmp    ax,0x318
c000cac9:	75 06                	jne    c000cad1 <sendKeyboardToken(KeyboardToken)+0x10c>
c000cacb:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000cad1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cad4:	66 3d 19 03          	cmp    ax,0x319
c000cad8:	75 06                	jne    c000cae0 <sendKeyboardToken(KeyboardToken)+0x11b>
c000cada:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000cae0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cae3:	66 3d 1a 03          	cmp    ax,0x31a
c000cae7:	0f 85 c9 00 00 00    	jne    c000cbb6 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000caed:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000caf3:	e9 be 00 00 00       	jmp    c000cbb6 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000caf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cafb:	66 3d 10 03          	cmp    ax,0x310
c000caff:	75 0a                	jne    c000cb0b <sendKeyboardToken(KeyboardToken)+0x146>
c000cb01:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000cb07:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb0e:	66 3d 11 03          	cmp    ax,0x311
c000cb12:	75 0a                	jne    c000cb1e <sendKeyboardToken(KeyboardToken)+0x159>
c000cb14:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000cb1a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb21:	66 3d 12 03          	cmp    ax,0x312
c000cb25:	75 0a                	jne    c000cb31 <sendKeyboardToken(KeyboardToken)+0x16c>
c000cb27:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000cb2d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb34:	66 3d 13 03          	cmp    ax,0x313
c000cb38:	75 0a                	jne    c000cb44 <sendKeyboardToken(KeyboardToken)+0x17f>
c000cb3a:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000cb40:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb47:	66 3d 14 03          	cmp    ax,0x314
c000cb4b:	75 0a                	jne    c000cb57 <sendKeyboardToken(KeyboardToken)+0x192>
c000cb4d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000cb53:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb5a:	66 3d 15 03          	cmp    ax,0x315
c000cb5e:	75 0a                	jne    c000cb6a <sendKeyboardToken(KeyboardToken)+0x1a5>
c000cb60:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cb66:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb6d:	66 3d 16 03          	cmp    ax,0x316
c000cb71:	75 0a                	jne    c000cb7d <sendKeyboardToken(KeyboardToken)+0x1b8>
c000cb73:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000cb79:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb80:	66 3d 17 03          	cmp    ax,0x317
c000cb84:	75 0a                	jne    c000cb90 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000cb86:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000cb8c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cb90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb93:	66 3d 18 03          	cmp    ax,0x318
c000cb97:	75 0a                	jne    c000cba3 <sendKeyboardToken(KeyboardToken)+0x1de>
c000cb99:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000cb9f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cba3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cba6:	66 3d 19 03          	cmp    ax,0x319
c000cbaa:	75 0a                	jne    c000cbb6 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000cbac:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000cbb2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbb9:	66 3d 00 02          	cmp    ax,0x200
c000cbbd:	75 2c                	jne    c000cbeb <sendKeyboardToken(KeyboardToken)+0x226>
c000cbbf:	a0 60 2e 02 c0       	mov    al,ds:0xc0022e60
c000cbc4:	83 f0 01             	xor    eax,0x1
c000cbc7:	84 c0                	test   al,al
c000cbc9:	74 20                	je     c000cbeb <sendKeyboardToken(KeyboardToken)+0x226>
c000cbcb:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c000cbd0:	6a 01                	push   0x1
c000cbd2:	6a 00                	push   0x0
c000cbd4:	68 2a c8 00 c0       	push   0xc000c82a
c000cbd9:	50                   	push   eax
c000cbda:	e8 85 6c 00 00       	call   c0013864 <Process::createThread(void (*)(void*), void*, int)>
c000cbdf:	83 c4 10             	add    esp,0x10
c000cbe2:	c6 05 60 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022e60,0x1
c000cbe9:	eb 33                	jmp    c000cc1e <sendKeyboardToken(KeyboardToken)+0x259>
c000cbeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbee:	66 3d 01 02          	cmp    ax,0x201
c000cbf2:	75 2a                	jne    c000cc1e <sendKeyboardToken(KeyboardToken)+0x259>
c000cbf4:	a0 60 2e 02 c0       	mov    al,ds:0xc0022e60
c000cbf9:	83 f0 01             	xor    eax,0x1
c000cbfc:	84 c0                	test   al,al
c000cbfe:	74 1e                	je     c000cc1e <sendKeyboardToken(KeyboardToken)+0x259>
c000cc00:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c000cc05:	6a 01                	push   0x1
c000cc07:	6a 00                	push   0x0
c000cc09:	68 96 c8 00 c0       	push   0xc000c896
c000cc0e:	50                   	push   eax
c000cc0f:	e8 50 6c 00 00       	call   c0013864 <Process::createThread(void (*)(void*), void*, int)>
c000cc14:	83 c4 10             	add    esp,0x10
c000cc17:	c6 05 60 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022e60,0x1
c000cc1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc21:	66 3d 1d 03          	cmp    ax,0x31d
c000cc25:	75 06                	jne    c000cc2d <sendKeyboardToken(KeyboardToken)+0x268>
c000cc27:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000cc2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc30:	66 3d 1c 03          	cmp    ax,0x31c
c000cc34:	75 06                	jne    c000cc3c <sendKeyboardToken(KeyboardToken)+0x277>
c000cc36:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000cc3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc3f:	66 3d 1b 03          	cmp    ax,0x31b
c000cc43:	75 06                	jne    c000cc4b <sendKeyboardToken(KeyboardToken)+0x286>
c000cc45:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000cc4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc4e:	66 3d 1e 03          	cmp    ax,0x31e
c000cc52:	75 06                	jne    c000cc5a <sendKeyboardToken(KeyboardToken)+0x295>
c000cc54:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cc5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc5d:	66 3d 1f 03          	cmp    ax,0x31f
c000cc61:	75 06                	jne    c000cc69 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000cc63:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cc69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc6c:	66 3d 1a 03          	cmp    ax,0x31a
c000cc70:	75 06                	jne    c000cc78 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000cc72:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cc78:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cc7c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc7f:	83 f0 01             	xor    eax,0x1
c000cc82:	84 c0                	test   al,al
c000cc84:	74 7b                	je     c000cd01 <sendKeyboardToken(KeyboardToken)+0x33c>
c000cc86:	a0 61 2b 02 c0       	mov    al,ds:0xc0022b61
c000cc8b:	84 c0                	test   al,al
c000cc8d:	74 43                	je     c000ccd2 <sendKeyboardToken(KeyboardToken)+0x30d>
c000cc8f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cc93:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000cc97:	74 2d                	je     c000ccc6 <sendKeyboardToken(KeyboardToken)+0x301>
c000cc99:	8b 15 64 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022e64
c000cc9f:	89 d0                	mov    eax,edx
c000cca1:	c1 e0 02             	shl    eax,0x2
c000cca4:	01 d0                	add    eax,edx
c000cca6:	01 c0                	add    eax,eax
c000cca8:	a3 64 2e 02 c0       	mov    ds:0xc0022e64,eax
c000ccad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccb0:	25 ff ff 00 00       	and    eax,0xffff
c000ccb5:	8d 50 d0             	lea    edx,[eax-0x30]
c000ccb8:	a1 64 2e 02 c0       	mov    eax,ds:0xc0022e64
c000ccbd:	01 d0                	add    eax,edx
c000ccbf:	a3 64 2e 02 c0       	mov    ds:0xc0022e64,eax
c000ccc4:	eb 71                	jmp    c000cd37 <sendKeyboardToken(KeyboardToken)+0x372>
c000ccc6:	c7 05 64 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e64,0x0
c000ccd0:	eb 65                	jmp    c000cd37 <sendKeyboardToken(KeyboardToken)+0x372>
c000ccd2:	a1 64 2e 02 c0       	mov    eax,ds:0xc0022e64
c000ccd7:	85 c0                	test   eax,eax
c000ccd9:	74 1a                	je     c000ccf5 <sendKeyboardToken(KeyboardToken)+0x330>
c000ccdb:	a1 64 2e 02 c0       	mov    eax,ds:0xc0022e64
c000cce0:	25 ff 00 00 00       	and    eax,0xff
c000cce5:	83 ec 0c             	sub    esp,0xc
c000cce8:	50                   	push   eax
c000cce9:	e8 14 fc ff ff       	call   c000c902 <sendKeyToTerminal(unsigned char)>
c000ccee:	83 c4 10             	add    esp,0x10
c000ccf1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ccf5:	c7 05 64 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e64,0x0
c000ccff:	eb 36                	jmp    c000cd37 <sendKeyboardToken(KeyboardToken)+0x372>
c000cd01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd04:	66 3d 01 01          	cmp    ax,0x101
c000cd08:	75 2d                	jne    c000cd37 <sendKeyboardToken(KeyboardToken)+0x372>
c000cd0a:	a1 64 2e 02 c0       	mov    eax,ds:0xc0022e64
c000cd0f:	85 c0                	test   eax,eax
c000cd11:	74 1a                	je     c000cd2d <sendKeyboardToken(KeyboardToken)+0x368>
c000cd13:	a1 64 2e 02 c0       	mov    eax,ds:0xc0022e64
c000cd18:	25 ff 00 00 00       	and    eax,0xff
c000cd1d:	83 ec 0c             	sub    esp,0xc
c000cd20:	50                   	push   eax
c000cd21:	e8 dc fb ff ff       	call   c000c902 <sendKeyToTerminal(unsigned char)>
c000cd26:	83 c4 10             	add    esp,0x10
c000cd29:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cd2d:	c7 05 64 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e64,0x0
c000cd37:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cd3a:	83 f0 01             	xor    eax,0x1
c000cd3d:	84 c0                	test   al,al
c000cd3f:	74 4e                	je     c000cd8f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd41:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cd44:	83 f0 01             	xor    eax,0x1
c000cd47:	84 c0                	test   al,al
c000cd49:	74 44                	je     c000cd8f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd4b:	a0 60 2b 02 c0       	mov    al,ds:0xc0022b60
c000cd50:	83 f0 01             	xor    eax,0x1
c000cd53:	84 c0                	test   al,al
c000cd55:	74 38                	je     c000cd8f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd5a:	66 83 f8 1f          	cmp    ax,0x1f
c000cd5e:	76 09                	jbe    c000cd69 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000cd60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd63:	66 83 f8 7e          	cmp    ax,0x7e
c000cd67:	76 12                	jbe    c000cd7b <sendKeyboardToken(KeyboardToken)+0x3b6>
c000cd69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd6c:	66 83 f8 0a          	cmp    ax,0xa
c000cd70:	74 09                	je     c000cd7b <sendKeyboardToken(KeyboardToken)+0x3b6>
c000cd72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd75:	66 83 f8 08          	cmp    ax,0x8
c000cd79:	75 14                	jne    c000cd8f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cd7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd7e:	25 ff 00 00 00       	and    eax,0xff
c000cd83:	83 ec 0c             	sub    esp,0xc
c000cd86:	50                   	push   eax
c000cd87:	e8 76 fb ff ff       	call   c000c902 <sendKeyToTerminal(unsigned char)>
c000cd8c:	83 c4 10             	add    esp,0x10
c000cd8f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cd92:	83 f0 01             	xor    eax,0x1
c000cd95:	84 c0                	test   al,al
c000cd97:	74 51                	je     c000cdea <sendKeyboardToken(KeyboardToken)+0x425>
c000cd99:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cd9c:	83 f0 01             	xor    eax,0x1
c000cd9f:	84 c0                	test   al,al
c000cda1:	74 47                	je     c000cdea <sendKeyboardToken(KeyboardToken)+0x425>
c000cda3:	a0 60 2b 02 c0       	mov    al,ds:0xc0022b60
c000cda8:	84 c0                	test   al,al
c000cdaa:	74 3e                	je     c000cdea <sendKeyboardToken(KeyboardToken)+0x425>
c000cdac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdaf:	66 83 f8 3f          	cmp    ax,0x3f
c000cdb3:	76 35                	jbe    c000cdea <sendKeyboardToken(KeyboardToken)+0x425>
c000cdb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdb8:	66 83 f8 7f          	cmp    ax,0x7f
c000cdbc:	77 2c                	ja     c000cdea <sendKeyboardToken(KeyboardToken)+0x425>
c000cdbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdc1:	88 c2                	mov    dl,al
c000cdc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdc6:	66 83 f8 5f          	cmp    ax,0x5f
c000cdca:	76 04                	jbe    c000cdd0 <sendKeyboardToken(KeyboardToken)+0x40b>
c000cdcc:	b0 20                	mov    al,0x20
c000cdce:	eb 02                	jmp    c000cdd2 <sendKeyboardToken(KeyboardToken)+0x40d>
c000cdd0:	b0 00                	mov    al,0x0
c000cdd2:	29 c2                	sub    edx,eax
c000cdd4:	88 d0                	mov    al,dl
c000cdd6:	83 e8 40             	sub    eax,0x40
c000cdd9:	25 ff 00 00 00       	and    eax,0xff
c000cdde:	83 ec 0c             	sub    esp,0xc
c000cde1:	50                   	push   eax
c000cde2:	e8 1b fb ff ff       	call   c000c902 <sendKeyToTerminal(unsigned char)>
c000cde7:	83 c4 10             	add    esp,0x10
c000cdea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cded:	66 3d 00 03          	cmp    ax,0x300
c000cdf1:	75 0f                	jne    c000ce02 <sendKeyboardToken(KeyboardToken)+0x43d>
c000cdf3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cdf6:	83 f0 01             	xor    eax,0x1
c000cdf9:	84 c0                	test   al,al
c000cdfb:	74 05                	je     c000ce02 <sendKeyboardToken(KeyboardToken)+0x43d>
c000cdfd:	e8 21 bb ff ff       	call   c0008923 <doTerminalCycle()>
c000ce02:	90                   	nop
c000ce03:	c9                   	leave  
c000ce04:	c3                   	ret    

c000ce05 <clearInternalKeybuffer(VgaText*)>:
c000ce05:	55                   	push   ebp
c000ce06:	89 e5                	mov    ebp,esp
c000ce08:	83 ec 08             	sub    esp,0x8
c000ce0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce0e:	05 b2 00 00 00       	add    eax,0xb2
c000ce13:	83 ec 0c             	sub    esp,0xc
c000ce16:	50                   	push   eax
c000ce17:	e8 44 37 ff ff       	call   c0000560 <strlen>
c000ce1c:	83 c4 10             	add    esp,0x10
c000ce1f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce22:	81 c2 b2 00 00 00    	add    edx,0xb2
c000ce28:	83 ec 04             	sub    esp,0x4
c000ce2b:	50                   	push   eax
c000ce2c:	6a 00                	push   0x0
c000ce2e:	52                   	push   edx
c000ce2f:	e8 bc 36 ff ff       	call   c00004f0 <memset>
c000ce34:	83 c4 10             	add    esp,0x10
c000ce37:	90                   	nop
c000ce38:	c9                   	leave  
c000ce39:	c3                   	ret    

c000ce3a <readKeyboard(VgaText*, char*, unsigned long)>:
c000ce3a:	55                   	push   ebp
c000ce3b:	89 e5                	mov    ebp,esp
c000ce3d:	83 ec 18             	sub    esp,0x18
c000ce40:	a1 48 2a 02 c0       	mov    eax,ds:0xc0022a48
c000ce45:	85 c0                	test   eax,eax
c000ce47:	74 2a                	je     c000ce73 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ce49:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ce4f:	8b 0d 48 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022a48
c000ce55:	83 ec 04             	sub    esp,0x4
c000ce58:	68 60 2a 02 c0       	push   0xc0022a60
c000ce5d:	83 ec 08             	sub    esp,0x8
c000ce60:	89 e2                	mov    edx,esp
c000ce62:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000ce65:	89 02                	mov    DWORD PTR [edx],eax
c000ce67:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ce6a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ce6e:	ff d1                	call   ecx
c000ce70:	83 c4 10             	add    esp,0x10
c000ce73:	fb                   	sti    
c000ce74:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ce7b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ce7f:	0f 84 a1 00 00 00    	je     c000cf26 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000ce85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce88:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000ce8e:	84 c0                	test   al,al
c000ce90:	75 28                	jne    c000ceba <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000ce92:	fa                   	cli    
c000ce93:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000ce98:	40                   	inc    eax
c000ce99:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000ce9e:	e8 e1 6b 00 00       	call   c0013a84 <schedule()>
c000cea3:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000cea8:	48                   	dec    eax
c000cea9:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000ceae:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000ceb3:	85 c0                	test   eax,eax
c000ceb5:	75 ce                	jne    c000ce85 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ceb7:	fb                   	sti    
c000ceb8:	eb cb                	jmp    c000ce85 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ceba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cebd:	8d 50 01             	lea    edx,[eax+0x1]
c000cec0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cec3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cec6:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000cecc:	88 10                	mov    BYTE PTR [eax],dl
c000cece:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ced1:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000ced7:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000ceda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cedd:	05 b2 00 00 00       	add    eax,0xb2
c000cee2:	83 ec 0c             	sub    esp,0xc
c000cee5:	50                   	push   eax
c000cee6:	e8 75 36 ff ff       	call   c0000560 <strlen>
c000ceeb:	83 c4 10             	add    esp,0x10
c000ceee:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cef1:	81 c2 b2 00 00 00    	add    edx,0xb2
c000cef7:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cefa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cefd:	81 c2 b2 00 00 00    	add    edx,0xb2
c000cf03:	83 ec 04             	sub    esp,0x4
c000cf06:	50                   	push   eax
c000cf07:	51                   	push   ecx
c000cf08:	52                   	push   edx
c000cf09:	e8 f2 34 ff ff       	call   c0000400 <memmove>
c000cf0e:	83 c4 10             	add    esp,0x10
c000cf11:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000cf14:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000cf17:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000cf1b:	0f 85 5a ff ff ff    	jne    c000ce7b <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000cf21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf24:	eb 03                	jmp    c000cf29 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000cf26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf29:	c9                   	leave  
c000cf2a:	c3                   	ret    
c000cf2b:	90                   	nop

c000cf2c <Keyboard::Keyboard(char const*)>:
c000cf2c:	83 ec 0c             	sub    esp,0xc
c000cf2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf33:	83 ec 08             	sub    esp,0x8
c000cf36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3a:	50                   	push   eax
c000cf3b:	e8 78 f2 ff ff       	call   c000c1b8 <Device::Device(char const*)>
c000cf40:	83 c4 10             	add    esp,0x10
c000cf43:	ba 7c e1 01 c0       	mov    edx,0xc001e17c
c000cf48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf4c:	89 10                	mov    DWORD PTR [eax],edx
c000cf4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf52:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000cf5c:	c6 05 44 2a 02 c0 01 	mov    BYTE PTR ds:0xc0022a44,0x1
c000cf63:	90                   	nop
c000cf64:	83 c4 0c             	add    esp,0xc
c000cf67:	c3                   	ret    

c000cf68 <Keyboard::~Keyboard()>:
c000cf68:	83 ec 0c             	sub    esp,0xc
c000cf6b:	ba 7c e1 01 c0       	mov    edx,0xc001e17c
c000cf70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf74:	89 10                	mov    DWORD PTR [eax],edx
c000cf76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf7a:	83 ec 0c             	sub    esp,0xc
c000cf7d:	50                   	push   eax
c000cf7e:	e8 9f ef ff ff       	call   c000bf22 <Device::~Device()>
c000cf83:	83 c4 10             	add    esp,0x10
c000cf86:	90                   	nop
c000cf87:	83 c4 0c             	add    esp,0xc
c000cf8a:	c3                   	ret    
c000cf8b:	90                   	nop

c000cf8c <Keyboard::~Keyboard()>:
c000cf8c:	83 ec 0c             	sub    esp,0xc
c000cf8f:	83 ec 0c             	sub    esp,0xc
c000cf92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf96:	e8 cd ff ff ff       	call   c000cf68 <Keyboard::~Keyboard()>
c000cf9b:	83 c4 10             	add    esp,0x10
c000cf9e:	83 ec 08             	sub    esp,0x8
c000cfa1:	68 5c 01 00 00       	push   0x15c
c000cfa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfaa:	e8 3b db ff ff       	call   c000aaea <operator delete(void*, unsigned long)>
c000cfaf:	83 c4 10             	add    esp,0x10
c000cfb2:	83 c4 0c             	add    esp,0xc
c000cfb5:	c3                   	ret    

c000cfb6 <LogicalDisk::close(int, int, void*)>:
c000cfb6:	83 c8 ff             	or     eax,0xffffffff
c000cfb9:	c3                   	ret    

c000cfba <LogicalDisk::~LogicalDisk()>:
c000cfba:	83 ec 0c             	sub    esp,0xc
c000cfbd:	ba f4 e1 01 c0       	mov    edx,0xc001e1f4
c000cfc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc6:	89 10                	mov    DWORD PTR [eax],edx
c000cfc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfcc:	83 ec 0c             	sub    esp,0xc
c000cfcf:	50                   	push   eax
c000cfd0:	e8 4d ef ff ff       	call   c000bf22 <Device::~Device()>
c000cfd5:	83 c4 10             	add    esp,0x10
c000cfd8:	90                   	nop
c000cfd9:	83 c4 0c             	add    esp,0xc
c000cfdc:	c3                   	ret    
c000cfdd:	90                   	nop

c000cfde <LogicalDisk::~LogicalDisk()>:
c000cfde:	83 ec 0c             	sub    esp,0xc
c000cfe1:	83 ec 0c             	sub    esp,0xc
c000cfe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfe8:	e8 cd ff ff ff       	call   c000cfba <LogicalDisk::~LogicalDisk()>
c000cfed:	83 c4 10             	add    esp,0x10
c000cff0:	83 ec 08             	sub    esp,0x8
c000cff3:	68 74 01 00 00       	push   0x174
c000cff8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cffc:	e8 e9 da ff ff       	call   c000aaea <operator delete(void*, unsigned long)>
c000d001:	83 c4 10             	add    esp,0x10
c000d004:	83 c4 0c             	add    esp,0xc
c000d007:	c3                   	ret    

c000d008 <LogicalDisk::open(int, int, void*)>:
c000d008:	83 ec 18             	sub    esp,0x18
c000d00b:	68 a8 e1 01 c0       	push   0xc001e1a8
c000d010:	e8 1a 37 00 00       	call   c001072f <Krnl::panic(char const*)>
c000d015:	83 c8 ff             	or     eax,0xffffffff
c000d018:	83 c4 1c             	add    esp,0x1c
c000d01b:	c3                   	ret    

c000d01c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d01c:	53                   	push   ebx
c000d01d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d021:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d025:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d029:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d02f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d035:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d03b:	77 10                	ja     c000d04d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d03d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d043:	89 d3                	mov    ebx,edx
c000d045:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d04b:	72 05                	jb     c000d052 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d04d:	83 c8 ff             	or     eax,0xffffffff
c000d050:	89 c2                	mov    edx,eax
c000d052:	5b                   	pop    ebx
c000d053:	c3                   	ret    

c000d054 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d054:	56                   	push   esi
c000d055:	83 c8 ff             	or     eax,0xffffffff
c000d058:	53                   	push   ebx
c000d059:	89 c2                	mov    edx,eax
c000d05b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d05f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d063:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d067:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d06d:	77 27                	ja     c000d096 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d06f:	89 d8                	mov    eax,ebx
c000d071:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d077:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d07d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d082:	89 c2                	mov    edx,eax
c000d084:	73 10                	jae    c000d096 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d086:	89 c8                	mov    eax,ecx
c000d088:	89 da                	mov    edx,ebx
c000d08a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d090:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d096:	5b                   	pop    ebx
c000d097:	5e                   	pop    esi
c000d098:	c3                   	ret    
c000d099:	90                   	nop

c000d09a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d09a:	83 ec 1c             	sub    esp,0x1c
c000d09d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d0ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d0b1:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d0b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d0bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0c0:	83 ec 08             	sub    esp,0x8
c000d0c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0c7:	50                   	push   eax
c000d0c8:	e8 eb f0 ff ff       	call   c000c1b8 <Device::Device(char const*)>
c000d0cd:	83 c4 10             	add    esp,0x10
c000d0d0:	ba f4 e1 01 c0       	mov    edx,0xc001e1f4
c000d0d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0d9:	89 10                	mov    DWORD PTR [eax],edx
c000d0db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0df:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d0e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0ea:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d0f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d0f5:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d0ff:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d103:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d107:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d10b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d111:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d117:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d11b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d11e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d122:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d128:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d12e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d132:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d136:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d13c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d140:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000d14a:	90                   	nop
c000d14b:	83 c4 1c             	add    esp,0x1c
c000d14e:	c3                   	ret    
c000d14f:	90                   	nop

c000d150 <LogicalDisk::assignDriveLetter()>:
c000d150:	55                   	push   ebp
c000d151:	57                   	push   edi
c000d152:	56                   	push   esi
c000d153:	53                   	push   ebx
c000d154:	83 ec 14             	sub    esp,0x14
c000d157:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d15b:	8b 3d 80 2e 02 c0    	mov    edi,DWORD PTR ds:0xc0022e80
c000d161:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d167:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d16b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000d171:	8b 3d 84 2e 02 c0    	mov    edi,DWORD PTR ds:0xc0022e84
c000d177:	3c 01                	cmp    al,0x1
c000d179:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000d17d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000d181:	19 c0                	sbb    eax,eax
c000d183:	83 e0 02             	and    eax,0x2
c000d186:	83 c0 41             	add    eax,0x41
c000d189:	0f be e8             	movsx  ebp,al
c000d18c:	3c 43                	cmp    al,0x43
c000d18e:	75 10                	jne    c000d1a0 <LogicalDisk::assignDriveLetter()+0x50>
c000d190:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d197:	75 5d                	jne    c000d1f6 <LogicalDisk::assignDriveLetter()+0xa6>
c000d199:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000d19e:	75 56                	jne    c000d1f6 <LogicalDisk::assignDriveLetter()+0xa6>
c000d1a0:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d1a3:	ba 01 00 00 00       	mov    edx,0x1
c000d1a8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000d1ac:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000d1b0:	d3 e2                	shl    edx,cl
c000d1b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d1b6:	89 d7                	mov    edi,edx
c000d1b8:	89 d6                	mov    esi,edx
c000d1ba:	c1 ff 1f             	sar    edi,0x1f
c000d1bd:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000d1c1:	21 f9                	and    ecx,edi
c000d1c3:	09 d1                	or     ecx,edx
c000d1c5:	75 2f                	jne    c000d1f6 <LogicalDisk::assignDriveLetter()+0xa6>
c000d1c7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d1cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1cf:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d1d5:	09 f2                	or     edx,esi
c000d1d7:	89 15 80 2e 02 c0    	mov    DWORD PTR ds:0xc0022e80,edx
c000d1dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1e1:	09 fa                	or     edx,edi
c000d1e3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d1e7:	89 15 84 2e 02 c0    	mov    DWORD PTR ds:0xc0022e84,edx
c000d1ed:	89 1c bd a0 2e 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd160],ebx
c000d1f4:	eb 08                	jmp    c000d1fe <LogicalDisk::assignDriveLetter()+0xae>
c000d1f6:	45                   	inc    ebp
c000d1f7:	40                   	inc    eax
c000d1f8:	3c 5b                	cmp    al,0x5b
c000d1fa:	75 90                	jne    c000d18c <LogicalDisk::assignDriveLetter()+0x3c>
c000d1fc:	31 c0                	xor    eax,eax
c000d1fe:	83 c4 14             	add    esp,0x14
c000d201:	5b                   	pop    ebx
c000d202:	5e                   	pop    esi
c000d203:	5f                   	pop    edi
c000d204:	5d                   	pop    ebp
c000d205:	c3                   	ret    

c000d206 <LogicalDisk::mount()>:
c000d206:	56                   	push   esi
c000d207:	53                   	push   ebx
c000d208:	53                   	push   ebx
c000d209:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d20d:	8b 1d 34 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a34
c000d213:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000d21d:	85 db                	test   ebx,ebx
c000d21f:	74 27                	je     c000d248 <LogicalDisk::mount()+0x42>
c000d221:	51                   	push   ecx
c000d222:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d229:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d22b:	83 e8 41             	sub    eax,0x41
c000d22e:	50                   	push   eax
c000d22f:	56                   	push   esi
c000d230:	53                   	push   ebx
c000d231:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d234:	83 c4 10             	add    esp,0x10
c000d237:	84 c0                	test   al,al
c000d239:	74 08                	je     c000d243 <LogicalDisk::mount()+0x3d>
c000d23b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000d241:	eb 07                	jmp    c000d24a <LogicalDisk::mount()+0x44>
c000d243:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d246:	eb d5                	jmp    c000d21d <LogicalDisk::mount()+0x17>
c000d248:	31 c0                	xor    eax,eax
c000d24a:	5a                   	pop    edx
c000d24b:	5b                   	pop    ebx
c000d24c:	5e                   	pop    esi
c000d24d:	c3                   	ret    

c000d24e <LogicalDisk::unmount()>:
c000d24e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d252:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000d25c:	c3                   	ret    
c000d25d:	90                   	nop

c000d25e <LogicalDisk::eject()>:
c000d25e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d262:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d268:	8b 10                	mov    edx,DWORD PTR [eax]
c000d26a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d26e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d271:	90                   	nop

c000d272 <LogicalDisk::unassignDriveLetter()>:
c000d272:	57                   	push   edi
c000d273:	56                   	push   esi
c000d274:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d278:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d27f:	84 c9                	test   cl,cl
c000d281:	75 0f                	jne    c000d292 <LogicalDisk::unassignDriveLetter()+0x20>
c000d283:	c7 44 24 0c cc e1 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e1cc
c000d28b:	5e                   	pop    esi
c000d28c:	5f                   	pop    edi
c000d28d:	e9 9d 34 00 00       	jmp    c001072f <Krnl::panic(char const*)>
c000d292:	83 e9 41             	sub    ecx,0x41
c000d295:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d29c:	b8 01 00 00 00       	mov    eax,0x1
c000d2a1:	c7 04 8d a0 2e 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd160],0x0
c000d2ac:	d3 e0                	shl    eax,cl
c000d2ae:	89 c7                	mov    edi,eax
c000d2b0:	f7 d0                	not    eax
c000d2b2:	c1 ff 1f             	sar    edi,0x1f
c000d2b5:	21 05 80 2e 02 c0    	and    DWORD PTR ds:0xc0022e80,eax
c000d2bb:	89 fe                	mov    esi,edi
c000d2bd:	f7 d6                	not    esi
c000d2bf:	21 35 84 2e 02 c0    	and    DWORD PTR ds:0xc0022e84,esi
c000d2c5:	5e                   	pop    esi
c000d2c6:	5f                   	pop    edi
c000d2c7:	c3                   	ret    

c000d2c8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d2c8:	57                   	push   edi
c000d2c9:	56                   	push   esi
c000d2ca:	53                   	push   ebx
c000d2cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d2cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d2d3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d2d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d2db:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d2e1:	77 41                	ja     c000d324 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d2e3:	99                   	cdq    
c000d2e4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d2ea:	01 c8                	add    eax,ecx
c000d2ec:	11 da                	adc    edx,ebx
c000d2ee:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d2f4:	19 d7                	sbb    edi,edx
c000d2f6:	72 33                	jb     c000d32b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d2f8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d2fe:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d304:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d308:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d30c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d312:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d318:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d31c:	5b                   	pop    ebx
c000d31d:	5e                   	pop    esi
c000d31e:	5f                   	pop    edi
c000d31f:	e9 32 0a 00 00       	jmp    c000dd56 <VCache::read(unsigned long long, int, void*)>
c000d324:	b8 05 00 00 00       	mov    eax,0x5
c000d329:	eb 05                	jmp    c000d330 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d32b:	b8 07 00 00 00       	mov    eax,0x7
c000d330:	5b                   	pop    ebx
c000d331:	5e                   	pop    esi
c000d332:	5f                   	pop    edi
c000d333:	c3                   	ret    

c000d334 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d334:	57                   	push   edi
c000d335:	56                   	push   esi
c000d336:	53                   	push   ebx
c000d337:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d33b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d33f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d343:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d347:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d34d:	77 41                	ja     c000d390 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d34f:	99                   	cdq    
c000d350:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d356:	01 c8                	add    eax,ecx
c000d358:	11 da                	adc    edx,ebx
c000d35a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d360:	19 d7                	sbb    edi,edx
c000d362:	72 33                	jb     c000d397 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d364:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d36a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d370:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d374:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d378:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d37e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d384:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d388:	5b                   	pop    ebx
c000d389:	5e                   	pop    esi
c000d38a:	5f                   	pop    edi
c000d38b:	e9 cc 08 00 00       	jmp    c000dc5c <VCache::write(unsigned long long, int, void*)>
c000d390:	b8 05 00 00 00       	mov    eax,0x5
c000d395:	eb 05                	jmp    c000d39c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d397:	b8 07 00 00 00       	mov    eax,0x7
c000d39c:	5b                   	pop    ebx
c000d39d:	5e                   	pop    esi
c000d39e:	5f                   	pop    edi
c000d39f:	c3                   	ret    

c000d3a0 <Mouse::Mouse(char const*)>:
c000d3a0:	83 ec 0c             	sub    esp,0xc
c000d3a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3a7:	83 ec 08             	sub    esp,0x8
c000d3aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ae:	50                   	push   eax
c000d3af:	e8 04 ee ff ff       	call   c000c1b8 <Device::Device(char const*)>
c000d3b4:	83 c4 10             	add    esp,0x10
c000d3b7:	ba 20 e2 01 c0       	mov    edx,0xc001e220
c000d3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3c0:	89 10                	mov    DWORD PTR [eax],edx
c000d3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3c6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d3d0:	90                   	nop
c000d3d1:	83 c4 0c             	add    esp,0xc
c000d3d4:	c3                   	ret    
c000d3d5:	90                   	nop
c000d3d6:	66 90                	xchg   ax,ax

c000d3d8 <Mouse::~Mouse()>:
c000d3d8:	83 ec 0c             	sub    esp,0xc
c000d3db:	ba 20 e2 01 c0       	mov    edx,0xc001e220
c000d3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3e4:	89 10                	mov    DWORD PTR [eax],edx
c000d3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ea:	83 ec 0c             	sub    esp,0xc
c000d3ed:	50                   	push   eax
c000d3ee:	e8 2f eb ff ff       	call   c000bf22 <Device::~Device()>
c000d3f3:	83 c4 10             	add    esp,0x10
c000d3f6:	90                   	nop
c000d3f7:	83 c4 0c             	add    esp,0xc
c000d3fa:	c3                   	ret    
c000d3fb:	90                   	nop

c000d3fc <Mouse::~Mouse()>:
c000d3fc:	83 ec 0c             	sub    esp,0xc
c000d3ff:	83 ec 0c             	sub    esp,0xc
c000d402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d406:	e8 cd ff ff ff       	call   c000d3d8 <Mouse::~Mouse()>
c000d40b:	83 c4 10             	add    esp,0x10
c000d40e:	83 ec 08             	sub    esp,0x8
c000d411:	68 58 01 00 00       	push   0x158
c000d416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d41a:	e8 cb d6 ff ff       	call   c000aaea <operator delete(void*, unsigned long)>
c000d41f:	83 c4 10             	add    esp,0x10
c000d422:	83 c4 0c             	add    esp,0xc
c000d425:	c3                   	ret    

c000d426 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d426:	55                   	push   ebp
c000d427:	57                   	push   edi
c000d428:	56                   	push   esi
c000d429:	53                   	push   ebx
c000d42a:	81 ec 28 01 00 00    	sub    esp,0x128
c000d430:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d437:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d43e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d445:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d44c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d450:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d454:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d45b:	e8 54 ee ff ff       	call   c000c2b4 <Device::getName()>
c000d460:	5a                   	pop    edx
c000d461:	59                   	pop    ecx
c000d462:	50                   	push   eax
c000d463:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d467:	55                   	push   ebp
c000d468:	e8 b3 31 ff ff       	call   c0000620 <strcpy>
c000d46d:	5b                   	pop    ebx
c000d46e:	58                   	pop    eax
c000d46f:	68 44 e2 01 c0       	push   0xc001e244
c000d474:	55                   	push   ebp
c000d475:	e8 66 33 ff ff       	call   c00007e0 <strcat>
c000d47a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000d481:	e8 cb a9 ff ff       	call   c0007e51 <malloc>
c000d486:	83 c4 0c             	add    esp,0xc
c000d489:	89 c3                	mov    ebx,eax
c000d48b:	57                   	push   edi
c000d48c:	56                   	push   esi
c000d48d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d491:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d495:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d49c:	55                   	push   ebp
c000d49d:	50                   	push   eax
c000d49e:	e8 f7 fb ff ff       	call   c000d09a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d4a3:	83 c4 14             	add    esp,0x14
c000d4a6:	53                   	push   ebx
c000d4a7:	e8 a4 fc ff ff       	call   c000d150 <LogicalDisk::assignDriveLetter()>
c000d4ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d4af:	e8 52 fd ff ff       	call   c000d206 <LogicalDisk::mount()>
c000d4b4:	58                   	pop    eax
c000d4b5:	5a                   	pop    edx
c000d4b6:	53                   	push   ebx
c000d4b7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d4be:	e8 5d eb ff ff       	call   c000c020 <Device::addChild(Device*)>
c000d4c3:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d4c9:	5b                   	pop    ebx
c000d4ca:	5e                   	pop    esi
c000d4cb:	5f                   	pop    edi
c000d4cc:	5d                   	pop    ebp
c000d4cd:	c3                   	ret    

c000d4ce <createPartitionsForDisk(PhysicalDisk*)>:
c000d4ce:	55                   	push   ebp
c000d4cf:	57                   	push   edi
c000d4d0:	56                   	push   esi
c000d4d1:	53                   	push   ebx
c000d4d2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d4d8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d4df:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d4e5:	3d 00 02 00 00       	cmp    eax,0x200
c000d4ea:	74 27                	je     c000d513 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d4ec:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d4f2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d4f8:	83 ec 10             	sub    esp,0x10
c000d4fb:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d4ff:	99                   	cdq    
c000d500:	c1 e6 0a             	shl    esi,0xa
c000d503:	52                   	push   edx
c000d504:	89 fd                	mov    ebp,edi
c000d506:	50                   	push   eax
c000d507:	55                   	push   ebp
c000d508:	56                   	push   esi
c000d509:	e8 a2 ec 00 00       	call   c001c1b0 <__udivdi3>
c000d50e:	e9 b1 00 00 00       	jmp    c000d5c4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d513:	83 ec 0c             	sub    esp,0xc
c000d516:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d518:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d51c:	56                   	push   esi
c000d51d:	6a 01                	push   0x1
c000d51f:	6a 00                	push   0x0
c000d521:	6a 00                	push   0x0
c000d523:	53                   	push   ebx
c000d524:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d527:	83 c4 20             	add    esp,0x20
c000d52a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d532:	75 0a                	jne    c000d53e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d534:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d53c:	74 2c                	je     c000d56a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d53e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d544:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d54a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d550:	83 ec 10             	sub    esp,0x10
c000d553:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d557:	89 f7                	mov    edi,esi
c000d559:	c1 e0 0a             	shl    eax,0xa
c000d55c:	c1 ff 1f             	sar    edi,0x1f
c000d55f:	57                   	push   edi
c000d560:	56                   	push   esi
c000d561:	52                   	push   edx
c000d562:	50                   	push   eax
c000d563:	e8 48 ec 00 00       	call   c001c1b0 <__udivdi3>
c000d568:	eb 5a                	jmp    c000d5c4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d56a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d571:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d578:	83 e1 7f             	and    ecx,0x7f
c000d57b:	83 e0 7f             	and    eax,0x7f
c000d57e:	01 c1                	add    ecx,eax
c000d580:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d587:	83 e0 7f             	and    eax,0x7f
c000d58a:	01 c1                	add    ecx,eax
c000d58c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d593:	83 e0 7f             	and    eax,0x7f
c000d596:	00 c1                	add    cl,al
c000d598:	74 41                	je     c000d5db <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d59a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d5a0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d5a6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d5ac:	83 ec 10             	sub    esp,0x10
c000d5af:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d5b3:	89 f7                	mov    edi,esi
c000d5b5:	c1 e0 0a             	shl    eax,0xa
c000d5b8:	c1 ff 1f             	sar    edi,0x1f
c000d5bb:	57                   	push   edi
c000d5bc:	56                   	push   esi
c000d5bd:	52                   	push   edx
c000d5be:	50                   	push   eax
c000d5bf:	e8 ec eb 00 00       	call   c001c1b0 <__udivdi3>
c000d5c4:	83 c4 14             	add    esp,0x14
c000d5c7:	52                   	push   edx
c000d5c8:	50                   	push   eax
c000d5c9:	6a 00                	push   0x0
c000d5cb:	6a 00                	push   0x0
c000d5cd:	53                   	push   ebx
c000d5ce:	e8 53 fe ff ff       	call   c000d426 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d5d3:	83 c4 20             	add    esp,0x20
c000d5d6:	e9 79 01 00 00       	jmp    c000d754 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d5db:	89 f0                	mov    eax,esi
c000d5dd:	31 f6                	xor    esi,esi
c000d5df:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d5e6:	75 02                	jne    c000d5ea <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d5e8:	89 f1                	mov    ecx,esi
c000d5ea:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d5f1:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d5f8:	c1 e2 08             	shl    edx,0x8
c000d5fb:	c1 e7 10             	shl    edi,0x10
c000d5fe:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d606:	09 fa                	or     edx,edi
c000d608:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d610:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d617:	83 c0 10             	add    eax,0x10
c000d61a:	09 fa                	or     edx,edi
c000d61c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d623:	c1 e7 18             	shl    edi,0x18
c000d626:	09 fa                	or     edx,edi
c000d628:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d62f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d633:	c1 e7 10             	shl    edi,0x10
c000d636:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d63d:	c1 e2 08             	shl    edx,0x8
c000d640:	09 fa                	or     edx,edi
c000d642:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d649:	09 fa                	or     edx,edi
c000d64b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d652:	c1 e7 18             	shl    edi,0x18
c000d655:	09 fa                	or     edx,edi
c000d657:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d65b:	46                   	inc    esi
c000d65c:	83 fe 04             	cmp    esi,0x4
c000d65f:	0f 85 7a ff ff ff    	jne    c000d5df <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d669:	83 f0 01             	xor    eax,0x1
c000d66c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d670:	75 57                	jne    c000d6c9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d672:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d676:	83 f0 01             	xor    eax,0x1
c000d679:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d67d:	75 4a                	jne    c000d6c9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d67f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d683:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d68b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d693:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d699:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d69f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d6a5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d6a9:	89 f7                	mov    edi,esi
c000d6ab:	c1 e0 0a             	shl    eax,0xa
c000d6ae:	c1 ff 1f             	sar    edi,0x1f
c000d6b1:	57                   	push   edi
c000d6b2:	56                   	push   esi
c000d6b3:	52                   	push   edx
c000d6b4:	50                   	push   eax
c000d6b5:	e8 f6 ea 00 00       	call   c001c1b0 <__udivdi3>
c000d6ba:	83 c4 10             	add    esp,0x10
c000d6bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6c1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6c5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d6c9:	84 c9                	test   cl,cl
c000d6cb:	74 53                	je     c000d720 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d6cd:	0f b6 c9             	movzx  ecx,cl
c000d6d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6d8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d6dc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d6e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6e8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d6ec:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d6f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d6f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d6f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d6fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d700:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d704:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d708:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d70c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d710:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d714:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d718:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d71c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d720:	31 ed                	xor    ebp,ebp
c000d722:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d726:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d72a:	89 f8                	mov    eax,edi
c000d72c:	09 f0                	or     eax,esi
c000d72e:	74 1e                	je     c000d74e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d730:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d734:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d738:	89 d1                	mov    ecx,edx
c000d73a:	09 c1                	or     ecx,eax
c000d73c:	74 10                	je     c000d74e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d73e:	83 ec 0c             	sub    esp,0xc
c000d741:	57                   	push   edi
c000d742:	56                   	push   esi
c000d743:	52                   	push   edx
c000d744:	50                   	push   eax
c000d745:	53                   	push   ebx
c000d746:	e8 db fc ff ff       	call   c000d426 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d74b:	83 c4 20             	add    esp,0x20
c000d74e:	45                   	inc    ebp
c000d74f:	83 fd 04             	cmp    ebp,0x4
c000d752:	75 ce                	jne    c000d722 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d754:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d75a:	5b                   	pop    ebx
c000d75b:	5e                   	pop    esi
c000d75c:	5f                   	pop    edi
c000d75d:	5d                   	pop    ebp
c000d75e:	c3                   	ret    
c000d75f:	90                   	nop

c000d760 <Serial::Serial(char const*)>:
c000d760:	83 ec 0c             	sub    esp,0xc
c000d763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d767:	83 ec 08             	sub    esp,0x8
c000d76a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d76e:	50                   	push   eax
c000d76f:	e8 44 ea ff ff       	call   c000c1b8 <Device::Device(char const*)>
c000d774:	83 c4 10             	add    esp,0x10
c000d777:	ba 58 e2 01 c0       	mov    edx,0xc001e258
c000d77c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d780:	89 10                	mov    DWORD PTR [eax],edx
c000d782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d786:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d790:	90                   	nop
c000d791:	83 c4 0c             	add    esp,0xc
c000d794:	c3                   	ret    
c000d795:	90                   	nop
c000d796:	66 90                	xchg   ax,ax

c000d798 <Serial::~Serial()>:
c000d798:	83 ec 0c             	sub    esp,0xc
c000d79b:	ba 58 e2 01 c0       	mov    edx,0xc001e258
c000d7a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7a4:	89 10                	mov    DWORD PTR [eax],edx
c000d7a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7aa:	83 ec 0c             	sub    esp,0xc
c000d7ad:	50                   	push   eax
c000d7ae:	e8 6f e7 ff ff       	call   c000bf22 <Device::~Device()>
c000d7b3:	83 c4 10             	add    esp,0x10
c000d7b6:	90                   	nop
c000d7b7:	83 c4 0c             	add    esp,0xc
c000d7ba:	c3                   	ret    
c000d7bb:	90                   	nop

c000d7bc <Serial::~Serial()>:
c000d7bc:	83 ec 0c             	sub    esp,0xc
c000d7bf:	83 ec 0c             	sub    esp,0xc
c000d7c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c6:	e8 cd ff ff ff       	call   c000d798 <Serial::~Serial()>
c000d7cb:	83 c4 10             	add    esp,0x10
c000d7ce:	83 ec 08             	sub    esp,0x8
c000d7d1:	68 58 01 00 00       	push   0x158
c000d7d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7da:	e8 0b d3 ff ff       	call   c000aaea <operator delete(void*, unsigned long)>
c000d7df:	83 c4 10             	add    esp,0x10
c000d7e2:	83 c4 0c             	add    esp,0xc
c000d7e5:	c3                   	ret    
c000d7e6:	66 90                	xchg   ax,ax

c000d7e8 <Timer::Timer(char const*)>:
c000d7e8:	83 ec 0c             	sub    esp,0xc
c000d7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ef:	83 ec 08             	sub    esp,0x8
c000d7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7f6:	50                   	push   eax
c000d7f7:	e8 bc e9 ff ff       	call   c000c1b8 <Device::Device(char const*)>
c000d7fc:	83 c4 10             	add    esp,0x10
c000d7ff:	ba 9c e2 01 c0       	mov    edx,0xc001e29c
c000d804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d808:	89 10                	mov    DWORD PTR [eax],edx
c000d80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d80e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d818:	90                   	nop
c000d819:	83 c4 0c             	add    esp,0xc
c000d81c:	c3                   	ret    
c000d81d:	90                   	nop
c000d81e:	66 90                	xchg   ax,ax

c000d820 <Timer::~Timer()>:
c000d820:	83 ec 0c             	sub    esp,0xc
c000d823:	ba 9c e2 01 c0       	mov    edx,0xc001e29c
c000d828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d82c:	89 10                	mov    DWORD PTR [eax],edx
c000d82e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d832:	83 ec 0c             	sub    esp,0xc
c000d835:	50                   	push   eax
c000d836:	e8 e7 e6 ff ff       	call   c000bf22 <Device::~Device()>
c000d83b:	83 c4 10             	add    esp,0x10
c000d83e:	90                   	nop
c000d83f:	83 c4 0c             	add    esp,0xc
c000d842:	c3                   	ret    
c000d843:	90                   	nop

c000d844 <Timer::~Timer()>:
c000d844:	83 ec 0c             	sub    esp,0xc
c000d847:	83 ec 0c             	sub    esp,0xc
c000d84a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d84e:	e8 cd ff ff ff       	call   c000d820 <Timer::~Timer()>
c000d853:	83 c4 10             	add    esp,0x10
c000d856:	83 ec 08             	sub    esp,0x8
c000d859:	68 5c 01 00 00       	push   0x15c
c000d85e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d862:	e8 83 d2 ff ff       	call   c000aaea <operator delete(void*, unsigned long)>
c000d867:	83 c4 10             	add    esp,0x10
c000d86a:	83 c4 0c             	add    esp,0xc
c000d86d:	c3                   	ret    

c000d86e <Timer::read()>:
c000d86e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d872:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d878:	c3                   	ret    

c000d879 <setupTimer(int)>:
c000d879:	53                   	push   ebx
c000d87a:	83 ec 14             	sub    esp,0x14
c000d87d:	68 5c 01 00 00       	push   0x15c
c000d882:	e8 ca a5 ff ff       	call   c0007e51 <malloc>
c000d887:	89 04 24             	mov    DWORD PTR [esp],eax
c000d88a:	89 c3                	mov    ebx,eax
c000d88c:	e8 93 e2 00 00       	call   c001bb24 <PIT::PIT()>
c000d891:	58                   	pop    eax
c000d892:	5a                   	pop    edx
c000d893:	53                   	push   ebx
c000d894:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c000d89a:	e8 81 e7 ff ff       	call   c000c020 <Device::addChild(Device*)>
c000d89f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d8a1:	6a 00                	push   0x0
c000d8a3:	6a 00                	push   0x0
c000d8a5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d8a9:	53                   	push   ebx
c000d8aa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d8ad:	89 d8                	mov    eax,ebx
c000d8af:	83 c4 28             	add    esp,0x28
c000d8b2:	5b                   	pop    ebx
c000d8b3:	c3                   	ret    

c000d8b4 <timerHandler(unsigned int)>:
c000d8b4:	56                   	push   esi
c000d8b5:	53                   	push   ebx
c000d8b6:	51                   	push   ecx
c000d8b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8bb:	01 05 0c 2f 02 c0    	add    DWORD PTR ds:0xc0022f0c,eax
c000d8c1:	80 3d 3d 09 02 c0 00 	cmp    BYTE PTR ds:0xc002093d,0x0
c000d8c8:	0f 84 4a 01 00 00    	je     c000da18 <timerHandler(unsigned int)+0x164>
c000d8ce:	fa                   	cli    
c000d8cf:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c000d8d5:	83 ec 0c             	sub    esp,0xc
c000d8d8:	ff 05 04 3e 02 c0    	inc    DWORD PTR ds:0xc0023e04
c000d8de:	68 18 3e 02 c0       	push   0xc0023e18
c000d8e3:	e8 98 ee 00 00       	call   c001c780 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8e8:	83 c4 10             	add    esp,0x10
c000d8eb:	84 c0                	test   al,al
c000d8ed:	0f 85 a1 00 00 00    	jne    c000d994 <timerHandler(unsigned int)+0xe0>
c000d8f3:	83 ec 0c             	sub    esp,0xc
c000d8f6:	68 18 3e 02 c0       	push   0xc0023e18
c000d8fb:	e8 9c ee 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d900:	83 c4 10             	add    esp,0x10
c000d903:	89 c6                	mov    esi,eax
c000d905:	8d 76 00             	lea    esi,[esi+0x0]
c000d908:	83 ec 0c             	sub    esp,0xc
c000d90b:	68 18 3e 02 c0       	push   0xc0023e18
c000d910:	e8 87 ee 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d915:	c7 04 24 18 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e18
c000d91c:	89 c3                	mov    ebx,eax
c000d91e:	e8 81 ee 00 00       	call   c001c7a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d923:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	3b 05 0c 2f 02 c0    	cmp    eax,DWORD PTR ds:0xc0022f0c
c000d92f:	77 23                	ja     c000d954 <timerHandler(unsigned int)+0xa0>
c000d931:	83 ec 0c             	sub    esp,0xc
c000d934:	53                   	push   ebx
c000d935:	e8 0e 66 00 00       	call   c0013f48 <unblockTask(ThreadControlBlock*)>
c000d93a:	83 c4 10             	add    esp,0x10
c000d93d:	39 de                	cmp    esi,ebx
c000d93f:	75 27                	jne    c000d968 <timerHandler(unsigned int)+0xb4>
c000d941:	83 ec 0c             	sub    esp,0xc
c000d944:	68 18 3e 02 c0       	push   0xc0023e18
c000d949:	e8 4e ee 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d94e:	89 c6                	mov    esi,eax
c000d950:	eb 12                	jmp    c000d964 <timerHandler(unsigned int)+0xb0>
c000d952:	66 90                	xchg   ax,ax
c000d954:	52                   	push   edx
c000d955:	52                   	push   edx
c000d956:	53                   	push   ebx
c000d957:	68 18 3e 02 c0       	push   0xc0023e18
c000d95c:	e8 fb ee 00 00       	call   c001c85c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d961:	8d 76 00             	lea    esi,[esi+0x0]
c000d964:	83 c4 10             	add    esp,0x10
c000d967:	90                   	nop
c000d968:	83 ec 0c             	sub    esp,0xc
c000d96b:	68 18 3e 02 c0       	push   0xc0023e18
c000d970:	e8 0b ee 00 00       	call   c001c780 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d975:	83 c4 10             	add    esp,0x10
c000d978:	84 c0                	test   al,al
c000d97a:	75 18                	jne    c000d994 <timerHandler(unsigned int)+0xe0>
c000d97c:	83 ec 0c             	sub    esp,0xc
c000d97f:	68 18 3e 02 c0       	push   0xc0023e18
c000d984:	e8 13 ee 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d989:	83 c4 10             	add    esp,0x10
c000d98c:	39 f0                	cmp    eax,esi
c000d98e:	0f 85 74 ff ff ff    	jne    c000d908 <timerHandler(unsigned int)+0x54>
c000d994:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d999:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d99d:	74 41                	je     c000d9e0 <timerHandler(unsigned int)+0x12c>
c000d99f:	80 3d 3c 09 02 c0 00 	cmp    BYTE PTR ds:0xc002093c,0x0
c000d9a6:	74 38                	je     c000d9e0 <timerHandler(unsigned int)+0x12c>
c000d9a8:	fa                   	cli    
c000d9a9:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c000d9af:	a1 0c 2f 02 c0       	mov    eax,ds:0xc0022f0c
c000d9b4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d9ba:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d9bd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d9c3:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d9c6:	72 08                	jb     c000d9d0 <timerHandler(unsigned int)+0x11c>
c000d9c8:	e8 b7 60 00 00       	call   c0013a84 <schedule()>
c000d9cd:	8d 76 00             	lea    esi,[esi+0x0]
c000d9d0:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000d9d5:	48                   	dec    eax
c000d9d6:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000d9db:	75 03                	jne    c000d9e0 <timerHandler(unsigned int)+0x12c>
c000d9dd:	fb                   	sti    
c000d9de:	66 90                	xchg   ax,ax
c000d9e0:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c000d9e5:	48                   	dec    eax
c000d9e6:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c000d9eb:	75 1b                	jne    c000da08 <timerHandler(unsigned int)+0x154>
c000d9ed:	83 3d 00 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e00,0x0
c000d9f4:	74 12                	je     c000da08 <timerHandler(unsigned int)+0x154>
c000d9f6:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c000da00:	e8 7f 60 00 00       	call   c0013a84 <schedule()>
c000da05:	8d 76 00             	lea    esi,[esi+0x0]
c000da08:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c000da0d:	48                   	dec    eax
c000da0e:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c000da13:	75 03                	jne    c000da18 <timerHandler(unsigned int)+0x164>
c000da15:	fb                   	sti    
c000da16:	66 90                	xchg   ax,ax
c000da18:	58                   	pop    eax
c000da19:	5b                   	pop    ebx
c000da1a:	5e                   	pop    esi
c000da1b:	c3                   	ret    

c000da1c <VCache::VCache(PhysicalDisk*)>:
c000da1c:	53                   	push   ebx
c000da1d:	83 ec 18             	sub    esp,0x18
c000da20:	ba cc e2 01 c0       	mov    edx,0xc001e2cc
c000da25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da29:	89 10                	mov    DWORD PTR [eax],edx
c000da2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da2f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000da36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da3a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000da41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da45:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000da4c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000da53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da57:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000da5e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000da65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da69:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000da70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da74:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da7c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000da83:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000da8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da8e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da96:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000da9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da9e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000daa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daa6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000daad:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000dab5:	83 ec 0c             	sub    esp,0xc
c000dab8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dabc:	e8 90 a3 ff ff       	call   c0007e51 <malloc>
c000dac1:	83 c4 10             	add    esp,0x10
c000dac4:	89 c3                	mov    ebx,eax
c000dac6:	83 ec 0c             	sub    esp,0xc
c000dac9:	53                   	push   ebx
c000daca:	e8 81 5d 00 00       	call   c0013850 <Mutex::Mutex()>
c000dacf:	83 c4 10             	add    esp,0x10
c000dad2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dad6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000dad9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dadd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dae1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000dae4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000daef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000daf3:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000daf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dafd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000db00:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db04:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000db0a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000db10:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000db14:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000db17:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000db1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db1e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000db22:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db26:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000db2c:	05 00 01 00 00       	add    eax,0x100
c000db31:	c1 e0 04             	shl    eax,0x4
c000db34:	83 ec 0c             	sub    esp,0xc
c000db37:	50                   	push   eax
c000db38:	e8 14 a3 ff ff       	call   c0007e51 <malloc>
c000db3d:	83 c4 10             	add    esp,0x10
c000db40:	89 c2                	mov    edx,eax
c000db42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db46:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000db49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db4d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000db54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db58:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000db5c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000db60:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000db66:	c1 e0 06             	shl    eax,0x6
c000db69:	83 ec 0c             	sub    esp,0xc
c000db6c:	50                   	push   eax
c000db6d:	e8 df a2 ff ff       	call   c0007e51 <malloc>
c000db72:	83 c4 10             	add    esp,0x10
c000db75:	89 c2                	mov    edx,eax
c000db77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db7b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000db7e:	90                   	nop
c000db7f:	83 c4 18             	add    esp,0x18
c000db82:	5b                   	pop    ebx
c000db83:	c3                   	ret    

c000db84 <VCache::invalidateReadBuffer()>:
c000db84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db88:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000db8e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000db92:	c3                   	ret    
c000db93:	90                   	nop

c000db94 <VCache::writeWriteBuffer()>:
c000db94:	53                   	push   ebx
c000db95:	83 ec 08             	sub    esp,0x8
c000db98:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db9c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dba0:	74 1e                	je     c000dbc0 <VCache::writeWriteBuffer()+0x2c>
c000dba2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dba5:	83 ec 0c             	sub    esp,0xc
c000dba8:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbaa:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000dbad:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000dbb0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000dbb3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dbb6:	50                   	push   eax
c000dbb7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000dbba:	83 c4 20             	add    esp,0x20
c000dbbd:	8d 76 00             	lea    esi,[esi+0x0]
c000dbc0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dbc7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000dbce:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000dbd2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000dbd9:	83 c4 08             	add    esp,0x8
c000dbdc:	5b                   	pop    ebx
c000dbdd:	c3                   	ret    
c000dbde:	66 90                	xchg   ax,ax

c000dbe0 <VCache::~VCache()>:
c000dbe0:	83 ec 0c             	sub    esp,0xc
c000dbe3:	ba cc e2 01 c0       	mov    edx,0xc001e2cc
c000dbe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbec:	89 10                	mov    DWORD PTR [eax],edx
c000dbee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbf2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000dbf5:	84 c0                	test   al,al
c000dbf7:	74 0f                	je     c000dc08 <VCache::~VCache()+0x28>
c000dbf9:	83 ec 0c             	sub    esp,0xc
c000dbfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc00:	e8 8f ff ff ff       	call   c000db94 <VCache::writeWriteBuffer()>
c000dc05:	83 c4 10             	add    esp,0x10
c000dc08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc0c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dc0f:	83 ec 0c             	sub    esp,0xc
c000dc12:	50                   	push   eax
c000dc13:	e8 49 a2 ff ff       	call   c0007e61 <free>
c000dc18:	83 c4 10             	add    esp,0x10
c000dc1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc1f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000dc22:	83 ec 0c             	sub    esp,0xc
c000dc25:	50                   	push   eax
c000dc26:	e8 36 a2 ff ff       	call   c0007e61 <free>
c000dc2b:	83 c4 10             	add    esp,0x10
c000dc2e:	90                   	nop
c000dc2f:	83 c4 0c             	add    esp,0xc
c000dc32:	c3                   	ret    
c000dc33:	90                   	nop

c000dc34 <VCache::~VCache()>:
c000dc34:	83 ec 0c             	sub    esp,0xc
c000dc37:	83 ec 0c             	sub    esp,0xc
c000dc3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc3e:	e8 9d ff ff ff       	call   c000dbe0 <VCache::~VCache()>
c000dc43:	83 c4 10             	add    esp,0x10
c000dc46:	83 ec 08             	sub    esp,0x8
c000dc49:	6a 44                	push   0x44
c000dc4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc4f:	e8 96 ce ff ff       	call   c000aaea <operator delete(void*, unsigned long)>
c000dc54:	83 c4 10             	add    esp,0x10
c000dc57:	83 c4 0c             	add    esp,0xc
c000dc5a:	c3                   	ret    
c000dc5b:	90                   	nop

c000dc5c <VCache::write(unsigned long long, int, void*)>:
c000dc5c:	55                   	push   ebp
c000dc5d:	31 c0                	xor    eax,eax
c000dc5f:	57                   	push   edi
c000dc60:	56                   	push   esi
c000dc61:	53                   	push   ebx
c000dc62:	83 ec 0c             	sub    esp,0xc
c000dc65:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000dc69:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dc6d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dc71:	8d 76 00             	lea    esi,[esi+0x0]
c000dc74:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c000dc78:	7d 1a                	jge    c000dc94 <VCache::write(unsigned long long, int, void*)+0x38>
c000dc7a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000dc7d:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000dc83:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000dc87:	0f af c8             	imul   ecx,eax
c000dc8a:	01 ca                	add    edx,ecx
c000dc8c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000dc8e:	40                   	inc    eax
c000dc8f:	eb e3                	jmp    c000dc74 <VCache::write(unsigned long long, int, void*)+0x18>
c000dc91:	8d 76 00             	lea    esi,[esi+0x0]
c000dc94:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dc98:	74 0a                	je     c000dca4 <VCache::write(unsigned long long, int, void*)+0x48>
c000dc9a:	53                   	push   ebx
c000dc9b:	e8 e4 fe ff ff       	call   c000db84 <VCache::invalidateReadBuffer()>
c000dca0:	58                   	pop    eax
c000dca1:	8d 76 00             	lea    esi,[esi+0x0]
c000dca4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dca8:	74 5e                	je     c000dd08 <VCache::write(unsigned long long, int, void*)+0xac>
c000dcaa:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000dcad:	89 e8                	mov    eax,ebp
c000dcaf:	99                   	cdq    
c000dcb0:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dcb3:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dcb6:	89 c1                	mov    ecx,eax
c000dcb8:	89 d0                	mov    eax,edx
c000dcba:	31 f1                	xor    ecx,esi
c000dcbc:	31 f8                	xor    eax,edi
c000dcbe:	09 c1                	or     ecx,eax
c000dcc0:	75 3a                	jne    c000dcfc <VCache::write(unsigned long long, int, void*)+0xa0>
c000dcc2:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000dcc7:	75 33                	jne    c000dcfc <VCache::write(unsigned long long, int, void*)+0xa0>
c000dcc9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dccc:	89 ef                	mov    edi,ebp
c000dcce:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dcd4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dcd8:	0f af f9             	imul   edi,ecx
c000dcdb:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000dcde:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dce0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dce3:	40                   	inc    eax
c000dce4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dce7:	83 f8 40             	cmp    eax,0x40
c000dcea:	75 60                	jne    c000dd4c <VCache::write(unsigned long long, int, void*)+0xf0>
c000dcec:	83 ec 0c             	sub    esp,0xc
c000dcef:	53                   	push   ebx
c000dcf0:	e8 9f fe ff ff       	call   c000db94 <VCache::writeWriteBuffer()>
c000dcf5:	83 c4 10             	add    esp,0x10
c000dcf8:	eb 52                	jmp    c000dd4c <VCache::write(unsigned long long, int, void*)+0xf0>
c000dcfa:	66 90                	xchg   ax,ax
c000dcfc:	83 ec 0c             	sub    esp,0xc
c000dcff:	53                   	push   ebx
c000dd00:	e8 8f fe ff ff       	call   c000db94 <VCache::writeWriteBuffer()>
c000dd05:	83 c4 10             	add    esp,0x10
c000dd08:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dd0b:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c000dd10:	7f 22                	jg     c000dd34 <VCache::write(unsigned long long, int, void*)+0xd8>
c000dd12:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000dd15:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000dd18:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000dd1c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dd20:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000dd23:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dd26:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dd2c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dd30:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd32:	eb 18                	jmp    c000dd4c <VCache::write(unsigned long long, int, void*)+0xf0>
c000dd34:	83 ec 0c             	sub    esp,0xc
c000dd37:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd39:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dd3d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dd41:	57                   	push   edi
c000dd42:	56                   	push   esi
c000dd43:	50                   	push   eax
c000dd44:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000dd47:	83 c4 20             	add    esp,0x20
c000dd4a:	66 90                	xchg   ax,ax
c000dd4c:	83 c4 0c             	add    esp,0xc
c000dd4f:	31 c0                	xor    eax,eax
c000dd51:	5b                   	pop    ebx
c000dd52:	5e                   	pop    esi
c000dd53:	5f                   	pop    edi
c000dd54:	5d                   	pop    ebp
c000dd55:	c3                   	ret    

c000dd56 <VCache::read(unsigned long long, int, void*)>:
c000dd56:	55                   	push   ebp
c000dd57:	31 c0                	xor    eax,eax
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 1c             	sub    esp,0x1c
c000dd5f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd63:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000dd67:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000dd6b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dd6f:	90                   	nop
c000dd70:	39 e8                	cmp    eax,ebp
c000dd72:	7d 18                	jge    c000dd8c <VCache::read(unsigned long long, int, void*)+0x36>
c000dd74:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000dd77:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000dd7d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000dd81:	0f af c8             	imul   ecx,eax
c000dd84:	01 ca                	add    edx,ecx
c000dd86:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000dd88:	40                   	inc    eax
c000dd89:	eb e5                	jmp    c000dd70 <VCache::read(unsigned long long, int, void*)+0x1a>
c000dd8b:	90                   	nop
c000dd8c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dd90:	74 0e                	je     c000dda0 <VCache::read(unsigned long long, int, void*)+0x4a>
c000dd92:	83 ec 0c             	sub    esp,0xc
c000dd95:	53                   	push   ebx
c000dd96:	e8 f9 fd ff ff       	call   c000db94 <VCache::writeWriteBuffer()>
c000dd9b:	83 c4 10             	add    esp,0x10
c000dd9e:	66 90                	xchg   ax,ax
c000dda0:	83 fd 01             	cmp    ebp,0x1
c000dda3:	0f 85 87 00 00 00    	jne    c000de30 <VCache::read(unsigned long long, int, void*)+0xda>
c000dda9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ddac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ddb0:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000ddb7:	75 77                	jne    c000de30 <VCache::read(unsigned long long, int, void*)+0xda>
c000ddb9:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000ddbc:	89 e9                	mov    ecx,ebp
c000ddbe:	f7 d9                	neg    ecx
c000ddc0:	89 c8                	mov    eax,ecx
c000ddc2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ddc6:	c1 f8 1f             	sar    eax,0x1f
c000ddc9:	21 f1                	and    ecx,esi
c000ddcb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ddcf:	89 c8                	mov    eax,ecx
c000ddd1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ddd5:	21 f9                	and    ecx,edi
c000ddd7:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dddb:	89 ca                	mov    edx,ecx
c000dddd:	74 0d                	je     c000ddec <VCache::read(unsigned long long, int, void*)+0x96>
c000dddf:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000dde2:	75 08                	jne    c000ddec <VCache::read(unsigned long long, int, void*)+0x96>
c000dde4:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000dde7:	74 27                	je     c000de10 <VCache::read(unsigned long long, int, void*)+0xba>
c000dde9:	8d 76 00             	lea    esi,[esi+0x0]
c000ddec:	83 ec 0c             	sub    esp,0xc
c000ddef:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000ddf3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ddf7:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000ddfa:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ddfd:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000ddff:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000de02:	55                   	push   ebp
c000de03:	52                   	push   edx
c000de04:	50                   	push   eax
c000de05:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000de09:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000de0c:	83 c4 20             	add    esp,0x20
c000de0f:	90                   	nop
c000de10:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000de13:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000de17:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000de1d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000de20:	48                   	dec    eax
c000de21:	21 c6                	and    esi,eax
c000de23:	0f af f1             	imul   esi,ecx
c000de26:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000de29:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de2b:	eb 23                	jmp    c000de50 <VCache::read(unsigned long long, int, void*)+0xfa>
c000de2d:	8d 76 00             	lea    esi,[esi+0x0]
c000de30:	83 ec 0c             	sub    esp,0xc
c000de33:	53                   	push   ebx
c000de34:	e8 4b fd ff ff       	call   c000db84 <VCache::invalidateReadBuffer()>
c000de39:	5a                   	pop    edx
c000de3a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000de3d:	8b 10                	mov    edx,DWORD PTR [eax]
c000de3f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000de43:	55                   	push   ebp
c000de44:	57                   	push   edi
c000de45:	56                   	push   esi
c000de46:	50                   	push   eax
c000de47:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000de4a:	83 c4 20             	add    esp,0x20
c000de4d:	8d 76 00             	lea    esi,[esi+0x0]
c000de50:	83 c4 1c             	add    esp,0x1c
c000de53:	31 c0                	xor    eax,eax
c000de55:	5b                   	pop    ebx
c000de56:	5e                   	pop    esi
c000de57:	5f                   	pop    edi
c000de58:	5d                   	pop    ebp
c000de59:	c3                   	ret    

c000de5a <Video::putrect(int, int, int, int, unsigned int)>:
c000de5a:	55                   	push   ebp
c000de5b:	57                   	push   edi
c000de5c:	56                   	push   esi
c000de5d:	53                   	push   ebx
c000de5e:	83 ec 1c             	sub    esp,0x1c
c000de61:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000de65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de69:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000de6d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000de71:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de79:	01 df                	add    edi,ebx
c000de7b:	39 fb                	cmp    ebx,edi
c000de7d:	7d 1f                	jge    c000de9e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000de7f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de83:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000de87:	7d 12                	jge    c000de9b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000de89:	8b 16                	mov    edx,DWORD PTR [esi]
c000de8b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de8f:	53                   	push   ebx
c000de90:	55                   	push   ebp
c000de91:	45                   	inc    ebp
c000de92:	56                   	push   esi
c000de93:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000de96:	83 c4 10             	add    esp,0x10
c000de99:	eb e8                	jmp    c000de83 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000de9b:	43                   	inc    ebx
c000de9c:	eb dd                	jmp    c000de7b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000de9e:	83 c4 1c             	add    esp,0x1c
c000dea1:	5b                   	pop    ebx
c000dea2:	5e                   	pop    esi
c000dea3:	5f                   	pop    edi
c000dea4:	5d                   	pop    ebp
c000dea5:	c3                   	ret    

c000dea6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000dea6:	55                   	push   ebp
c000dea7:	57                   	push   edi
c000dea8:	31 ff                	xor    edi,edi
c000deaa:	56                   	push   esi
c000deab:	53                   	push   ebx
c000deac:	83 ec 1c             	sub    esp,0x1c
c000deaf:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000deb3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000deb7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000debe:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000dec3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec7:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000decb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000decf:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ded2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ded6:	01 f9                	add    ecx,edi
c000ded8:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000dedc:	7d 2f                	jge    c000df0d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000dede:	31 f6                	xor    esi,esi
c000dee0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dee4:	01 f2                	add    edx,esi
c000dee6:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000deea:	7d 1a                	jge    c000df06 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000deec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000deef:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000def2:	46                   	inc    esi
c000def3:	51                   	push   ecx
c000def4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000def8:	52                   	push   edx
c000def9:	55                   	push   ebp
c000defa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000defd:	83 c4 10             	add    esp,0x10
c000df00:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000df04:	eb da                	jmp    c000dee0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000df06:	47                   	inc    edi
c000df07:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000df0b:	eb c5                	jmp    c000ded2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000df0d:	83 c4 1c             	add    esp,0x1c
c000df10:	5b                   	pop    ebx
c000df11:	5e                   	pop    esi
c000df12:	5f                   	pop    edi
c000df13:	5d                   	pop    ebp
c000df14:	c3                   	ret    
c000df15:	90                   	nop

c000df16 <Video::blit(unsigned int*, int, int, int, int)>:
c000df16:	55                   	push   ebp
c000df17:	57                   	push   edi
c000df18:	56                   	push   esi
c000df19:	53                   	push   ebx
c000df1a:	83 ec 1c             	sub    esp,0x1c
c000df1d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df21:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000df25:	85 c0                	test   eax,eax
c000df27:	79 02                	jns    c000df2b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000df29:	31 c0                	xor    eax,eax
c000df2b:	c1 e0 02             	shl    eax,0x2
c000df2e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000df32:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000df36:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000df3a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000df3e:	39 d8                	cmp    eax,ebx
c000df40:	7e 49                	jle    c000df8b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000df42:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df48:	7c 41                	jl     c000df8b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000df4a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000df4e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000df52:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000df56:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000df5a:	39 f9                	cmp    ecx,edi
c000df5c:	7e 22                	jle    c000df80 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000df5e:	83 c5 04             	add    ebp,0x4
c000df61:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df67:	7c 14                	jl     c000df7d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000df69:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df6b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000df6e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df72:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df76:	56                   	push   esi
c000df77:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000df7a:	83 c4 10             	add    esp,0x10
c000df7d:	47                   	inc    edi
c000df7e:	eb d2                	jmp    c000df52 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000df80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df84:	43                   	inc    ebx
c000df85:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000df89:	eb ab                	jmp    c000df36 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000df8b:	83 c4 1c             	add    esp,0x1c
c000df8e:	5b                   	pop    ebx
c000df8f:	5e                   	pop    esi
c000df90:	5f                   	pop    edi
c000df91:	5d                   	pop    ebp
c000df92:	c3                   	ret    
c000df93:	90                   	nop

c000df94 <Video::clearScreen(unsigned int)>:
c000df94:	57                   	push   edi
c000df95:	56                   	push   esi
c000df96:	53                   	push   ebx
c000df97:	31 db                	xor    ebx,ebx
c000df99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df9d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000dfa3:	7e 1f                	jle    c000dfc4 <Video::clearScreen(unsigned int)+0x30>
c000dfa5:	31 ff                	xor    edi,edi
c000dfa7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000dfad:	7e 12                	jle    c000dfc1 <Video::clearScreen(unsigned int)+0x2d>
c000dfaf:	8b 06                	mov    eax,DWORD PTR [esi]
c000dfb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfb5:	53                   	push   ebx
c000dfb6:	57                   	push   edi
c000dfb7:	47                   	inc    edi
c000dfb8:	56                   	push   esi
c000dfb9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dfbc:	83 c4 10             	add    esp,0x10
c000dfbf:	eb e6                	jmp    c000dfa7 <Video::clearScreen(unsigned int)+0x13>
c000dfc1:	43                   	inc    ebx
c000dfc2:	eb d9                	jmp    c000df9d <Video::clearScreen(unsigned int)+0x9>
c000dfc4:	5b                   	pop    ebx
c000dfc5:	5e                   	pop    esi
c000dfc6:	5f                   	pop    edi
c000dfc7:	c3                   	ret    

c000dfc8 <Video::putpixel(int, int, unsigned int)>:
c000dfc8:	c7 44 24 04 d4 e2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e2d4
c000dfd0:	e9 5a 27 00 00       	jmp    c001072f <Krnl::panic(char const*)>
c000dfd5:	90                   	nop

c000dfd6 <Video::Video(char const*)>:
c000dfd6:	83 ec 0c             	sub    esp,0xc
c000dfd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfdd:	83 ec 08             	sub    esp,0x8
c000dfe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe4:	50                   	push   eax
c000dfe5:	e8 ce e1 ff ff       	call   c000c1b8 <Device::Device(char const*)>
c000dfea:	83 c4 10             	add    esp,0x10
c000dfed:	ba 44 e3 01 c0       	mov    edx,0xc001e344
c000dff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff6:	89 10                	mov    DWORD PTR [eax],edx
c000dff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dffc:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e006:	90                   	nop
c000e007:	83 c4 0c             	add    esp,0xc
c000e00a:	c3                   	ret    
c000e00b:	90                   	nop

c000e00c <Video::~Video()>:
c000e00c:	83 ec 0c             	sub    esp,0xc
c000e00f:	ba 44 e3 01 c0       	mov    edx,0xc001e344
c000e014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e018:	89 10                	mov    DWORD PTR [eax],edx
c000e01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e01e:	83 ec 0c             	sub    esp,0xc
c000e021:	50                   	push   eax
c000e022:	e8 fb de ff ff       	call   c000bf22 <Device::~Device()>
c000e027:	83 c4 10             	add    esp,0x10
c000e02a:	90                   	nop
c000e02b:	83 c4 0c             	add    esp,0xc
c000e02e:	c3                   	ret    
c000e02f:	90                   	nop

c000e030 <Video::~Video()>:
c000e030:	83 ec 0c             	sub    esp,0xc
c000e033:	83 ec 0c             	sub    esp,0xc
c000e036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e03a:	e8 cd ff ff ff       	call   c000e00c <Video::~Video()>
c000e03f:	83 c4 10             	add    esp,0x10
c000e042:	83 ec 08             	sub    esp,0x8
c000e045:	68 64 01 00 00       	push   0x164
c000e04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e04e:	e8 97 ca ff ff       	call   c000aaea <operator delete(void*, unsigned long)>
c000e053:	83 c4 10             	add    esp,0x10
c000e056:	83 c4 0c             	add    esp,0xc
c000e059:	c3                   	ret    

c000e05a <Video::isMonochrome()>:
c000e05a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e05e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e064:	c3                   	ret    
c000e065:	90                   	nop

c000e066 <Video::getWidth()>:
c000e066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e06a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e070:	c3                   	ret    
c000e071:	90                   	nop

c000e072 <Video::getHeight()>:
c000e072:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e076:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e07c:	c3                   	ret    
c000e07d:	90                   	nop

c000e07e <Video::drawCursor(int, int, unsigned char*, int)>:
c000e07e:	55                   	push   ebp
c000e07f:	57                   	push   edi
c000e080:	56                   	push   esi
c000e081:	53                   	push   ebx
c000e082:	83 ec 2c             	sub    esp,0x2c
c000e085:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e089:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e08d:	83 f8 01             	cmp    eax,0x1
c000e090:	19 c9                	sbb    ecx,ecx
c000e092:	31 db                	xor    ebx,ebx
c000e094:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e098:	89 cd                	mov    ebp,ecx
c000e09a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e0a2:	f7 d5                	not    ebp
c000e0a4:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e0aa:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e0ae:	01 d8                	add    eax,ebx
c000e0b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0b4:	56                   	push   esi
c000e0b5:	e8 b8 ff ff ff       	call   c000e072 <Video::getHeight()>
c000e0ba:	59                   	pop    ecx
c000e0bb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e0bf:	7e 70                	jle    c000e131 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000e0c1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0c5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e0c9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e0cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e0d0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0d4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e0db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0df:	89 f8                	mov    eax,edi
c000e0e1:	83 c0 20             	add    eax,0x20
c000e0e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e0e8:	56                   	push   esi
c000e0e9:	e8 78 ff ff ff       	call   c000e066 <Video::getWidth()>
c000e0ee:	5a                   	pop    edx
c000e0ef:	39 c7                	cmp    edi,eax
c000e0f1:	7d 34                	jge    c000e127 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000e0f3:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e0f8:	74 05                	je     c000e0ff <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000e0fa:	8b 06                	mov    eax,DWORD PTR [esi]
c000e0fc:	55                   	push   ebp
c000e0fd:	eb 0d                	jmp    c000e10c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000e0ff:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e104:	74 12                	je     c000e118 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000e106:	8b 06                	mov    eax,DWORD PTR [esi]
c000e108:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e10c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e110:	57                   	push   edi
c000e111:	56                   	push   esi
c000e112:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e115:	83 c4 10             	add    esp,0x10
c000e118:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e11c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e120:	47                   	inc    edi
c000e121:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e125:	75 c1                	jne    c000e0e8 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000e127:	43                   	inc    ebx
c000e128:	83 fb 20             	cmp    ebx,0x20
c000e12b:	0f 85 79 ff ff ff    	jne    c000e0aa <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000e131:	83 c4 2c             	add    esp,0x2c
c000e134:	5b                   	pop    ebx
c000e135:	5e                   	pop    esi
c000e136:	5f                   	pop    edi
c000e137:	5d                   	pop    ebp
c000e138:	c3                   	ret    
c000e139:	90                   	nop

c000e13a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e13a:	55                   	push   ebp
c000e13b:	57                   	push   edi
c000e13c:	56                   	push   esi
c000e13d:	53                   	push   ebx
c000e13e:	83 ec 28             	sub    esp,0x28
c000e141:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e145:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e149:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e14d:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e151:	c1 e6 08             	shl    esi,0x8
c000e154:	01 c6                	add    esi,eax
c000e156:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e15a:	c1 e0 08             	shl    eax,0x8
c000e15d:	01 d0                	add    eax,edx
c000e15f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e163:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e167:	0f af c6             	imul   eax,esi
c000e16a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e171:	50                   	push   eax
c000e172:	e8 da 9c ff ff       	call   c0007e51 <malloc>
c000e177:	83 c4 10             	add    esp,0x10
c000e17a:	89 c7                	mov    edi,eax
c000e17c:	85 c0                	test   eax,eax
c000e17e:	75 10                	jne    c000e190 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e180:	83 ec 0c             	sub    esp,0xc
c000e183:	68 f5 e2 01 c0       	push   0xc001e2f5
c000e188:	e8 a2 25 00 00       	call   c001072f <Krnl::panic(char const*)>
c000e18d:	83 c4 10             	add    esp,0x10
c000e190:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000e193:	ba 12 00 00 00       	mov    edx,0x12
c000e198:	84 c0                	test   al,al
c000e19a:	74 11                	je     c000e1ad <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000e19c:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e1a0:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e1a4:	c1 fa 03             	sar    edx,0x3
c000e1a7:	0f af d1             	imul   edx,ecx
c000e1aa:	83 c2 12             	add    edx,0x12
c000e1ad:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e1b1:	74 04                	je     c000e1b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000e1b3:	85 f6                	test   esi,esi
c000e1b5:	75 12                	jne    c000e1c9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000e1b7:	83 ec 0c             	sub    esp,0xc
c000e1ba:	68 05 e3 01 c0       	push   0xc001e305
c000e1bf:	e8 1c ca ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c000e1c4:	e9 b8 00 00 00       	jmp    c000e281 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000e1c9:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e1cd:	80 f9 02             	cmp    cl,0x2
c000e1d0:	0f 85 96 00 00 00    	jne    c000e26c <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000e1d6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e1db:	75 0e                	jne    c000e1eb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000e1dd:	84 c0                	test   al,al
c000e1df:	75 0a                	jne    c000e1eb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000e1e1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e1e4:	83 e8 18             	sub    eax,0x18
c000e1e7:	a8 f7                	test   al,0xf7
c000e1e9:	74 0a                	je     c000e1f5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000e1eb:	83 ec 0c             	sub    esp,0xc
c000e1ee:	68 1a e3 01 c0       	push   0xc001e31a
c000e1f3:	eb 7f                	jmp    c000e274 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000e1f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e1fd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e205:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e209:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e211:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e215:	75 0c                	jne    c000e223 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000e217:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e21c:	c1 e0 18             	shl    eax,0x18
c000e21f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e223:	45                   	inc    ebp
c000e224:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e229:	c1 e1 10             	shl    ecx,0x10
c000e22c:	89 c8                	mov    eax,ecx
c000e22e:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e233:	c1 e1 08             	shl    ecx,0x8
c000e236:	09 c1                	or     ecx,eax
c000e238:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e23c:	09 c1                	or     ecx,eax
c000e23e:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e242:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e246:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e24a:	c1 f8 03             	sar    eax,0x3
c000e24d:	01 c2                	add    edx,eax
c000e24f:	89 e8                	mov    eax,ebp
c000e251:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e255:	39 c6                	cmp    esi,eax
c000e257:	7f b0                	jg     c000e209 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000e259:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e25d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e261:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e264:	7e 22                	jle    c000e288 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000e266:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000e26a:	eb 99                	jmp    c000e205 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000e26c:	50                   	push   eax
c000e26d:	50                   	push   eax
c000e26e:	51                   	push   ecx
c000e26f:	68 28 e3 01 c0       	push   0xc001e328
c000e274:	e8 67 c9 ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c000e279:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e27c:	e8 e0 9b ff ff       	call   c0007e61 <free>
c000e281:	83 c4 10             	add    esp,0x10
c000e284:	31 ff                	xor    edi,edi
c000e286:	eb 0f                	jmp    c000e297 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000e288:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e28c:	89 30                	mov    DWORD PTR [eax],esi
c000e28e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e292:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000e295:	89 30                	mov    DWORD PTR [eax],esi
c000e297:	83 c4 1c             	add    esp,0x1c
c000e29a:	89 f8                	mov    eax,edi
c000e29c:	5b                   	pop    ebx
c000e29d:	5e                   	pop    esi
c000e29e:	5f                   	pop    edi
c000e29f:	5d                   	pop    ebp
c000e2a0:	c3                   	ret    
c000e2a1:	90                   	nop

c000e2a2 <Video::putTGA(int, int, unsigned char*, int)>:
c000e2a2:	55                   	push   ebp
c000e2a3:	57                   	push   edi
c000e2a4:	56                   	push   esi
c000e2a5:	53                   	push   ebx
c000e2a6:	83 ec 28             	sub    esp,0x28
c000e2a9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e2ad:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e2b1:	50                   	push   eax
c000e2b2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e2b6:	50                   	push   eax
c000e2b7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e2bb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e2bf:	56                   	push   esi
c000e2c0:	e8 75 fe ff ff       	call   c000e13a <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e2c5:	83 c4 20             	add    esp,0x20
c000e2c8:	85 c0                	test   eax,eax
c000e2ca:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e2ce:	74 35                	je     c000e305 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e2d0:	89 c7                	mov    edi,eax
c000e2d2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e2d6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e2da:	39 d8                	cmp    eax,ebx
c000e2dc:	7e 27                	jle    c000e305 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e2de:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e2e2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e2e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e2ea:	39 e8                	cmp    eax,ebp
c000e2ec:	7e 14                	jle    c000e302 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e2ee:	8b 06                	mov    eax,DWORD PTR [esi]
c000e2f0:	83 c7 04             	add    edi,0x4
c000e2f3:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000e2f6:	53                   	push   ebx
c000e2f7:	55                   	push   ebp
c000e2f8:	45                   	inc    ebp
c000e2f9:	56                   	push   esi
c000e2fa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e2fd:	83 c4 10             	add    esp,0x10
c000e300:	eb e0                	jmp    c000e2e2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e302:	43                   	inc    ebx
c000e303:	eb cd                	jmp    c000e2d2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e305:	83 c4 1c             	add    esp,0x1c
c000e308:	5b                   	pop    ebx
c000e309:	5e                   	pop    esi
c000e30a:	5f                   	pop    edi
c000e30b:	5d                   	pop    ebp
c000e30c:	c3                   	ret    
c000e30d:	66 90                	xchg   ax,ax
c000e30f:	90                   	nop

c000e310 <ACPI::close(int, int, void*)>:
c000e310:	83 ec 1c             	sub    esp,0x1c
c000e313:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e31b:	74 0b                	je     c000e328 <ACPI::close(int, int, void*)+0x18>
c000e31d:	b8 00 00 00 00       	mov    eax,0x0
c000e322:	e9 9d 00 00 00       	jmp    c000e3c4 <ACPI::close(int, int, void*)+0xb4>
c000e327:	90                   	nop
c000e328:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e32d:	75 29                	jne    c000e358 <ACPI::close(int, int, void*)+0x48>
c000e32f:	a1 28 2f 02 c0       	mov    eax,ds:0xc0022f28
c000e334:	85 c0                	test   eax,eax
c000e336:	74 08                	je     c000e340 <ACPI::close(int, int, void*)+0x30>
c000e338:	a1 28 2f 02 c0       	mov    eax,ds:0xc0022f28
c000e33d:	ff d0                	call   eax
c000e33f:	90                   	nop
c000e340:	83 ec 0c             	sub    esp,0xc
c000e343:	68 84 e3 01 c0       	push   0xc001e384
c000e348:	e8 e2 23 00 00       	call   c001072f <Krnl::panic(char const*)>
c000e34d:	83 c4 10             	add    esp,0x10
c000e350:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e355:	eb 6d                	jmp    c000e3c4 <ACPI::close(int, int, void*)+0xb4>
c000e357:	90                   	nop
c000e358:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e35d:	75 5d                	jne    c000e3bc <ACPI::close(int, int, void*)+0xac>
c000e35f:	a1 24 2f 02 c0       	mov    eax,ds:0xc0022f24
c000e364:	85 c0                	test   eax,eax
c000e366:	74 08                	je     c000e370 <ACPI::close(int, int, void*)+0x60>
c000e368:	a1 24 2f 02 c0       	mov    eax,ds:0xc0022f24
c000e36d:	ff d0                	call   eax
c000e36f:	90                   	nop
c000e370:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e375:	8d 76 00             	lea    esi,[esi+0x0]
c000e378:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e37c:	25 ff 00 00 00       	and    eax,0xff
c000e381:	83 e0 02             	and    eax,0x2
c000e384:	74 1e                	je     c000e3a4 <ACPI::close(int, int, void*)+0x94>
c000e386:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e38d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e391:	89 c2                	mov    edx,eax
c000e393:	ec                   	in     al,dx
c000e394:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e398:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e39c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e3a0:	eb d6                	jmp    c000e378 <ACPI::close(int, int, void*)+0x68>
c000e3a2:	66 90                	xchg   ax,ax
c000e3a4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e3ab:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e3b0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e3b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e3b8:	ee                   	out    dx,al
c000e3b9:	8d 76 00             	lea    esi,[esi+0x0]
c000e3bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e3c1:	8d 76 00             	lea    esi,[esi+0x0]
c000e3c4:	83 c4 1c             	add    esp,0x1c
c000e3c7:	c3                   	ret    

c000e3c8 <findRSDP()>:
c000e3c8:	83 ec 1c             	sub    esp,0x1c
c000e3cb:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e3d0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e3d6:	83 e0 04             	and    eax,0x4
c000e3d9:	84 c0                	test   al,al
c000e3db:	75 07                	jne    c000e3e4 <findRSDP()+0x1c>
c000e3dd:	b8 00 00 00 00       	mov    eax,0x0
c000e3e2:	eb 70                	jmp    c000e454 <findRSDP()+0x8c>
c000e3e4:	a1 68 09 02 c0       	mov    eax,ds:0xc0020968
c000e3e9:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e3ee:	7f 1c                	jg     c000e40c <findRSDP()+0x44>
c000e3f0:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e3f5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3fb:	83 e2 fb             	and    edx,0xfffffffb
c000e3fe:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e404:	b8 00 00 00 00       	mov    eax,0x0
c000e409:	eb 49                	jmp    c000e454 <findRSDP()+0x8c>
c000e40b:	90                   	nop
c000e40c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e414:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e41c:	77 2e                	ja     c000e44c <findRSDP()+0x84>
c000e41e:	83 ec 04             	sub    esp,0x4
c000e421:	6a 08                	push   0x8
c000e423:	68 1f e4 01 c0       	push   0xc001e41f
c000e428:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e42c:	e8 7f 1f ff ff       	call   c00003b0 <memcmp>
c000e431:	83 c4 10             	add    esp,0x10
c000e434:	85 c0                	test   eax,eax
c000e436:	0f 94 c0             	sete   al
c000e439:	84 c0                	test   al,al
c000e43b:	74 07                	je     c000e444 <findRSDP()+0x7c>
c000e43d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e441:	eb 11                	jmp    c000e454 <findRSDP()+0x8c>
c000e443:	90                   	nop
c000e444:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e449:	eb c9                	jmp    c000e414 <findRSDP()+0x4c>
c000e44b:	90                   	nop
c000e44c:	b8 00 00 00 00       	mov    eax,0x0
c000e451:	8d 76 00             	lea    esi,[esi+0x0]
c000e454:	83 c4 1c             	add    esp,0x1c
c000e457:	c3                   	ret    

c000e458 <loadACPITables(unsigned char*)>:
c000e458:	57                   	push   edi
c000e459:	56                   	push   esi
c000e45a:	53                   	push   ebx
c000e45b:	83 ec 60             	sub    esp,0x60
c000e45e:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e463:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e469:	83 e0 04             	and    eax,0x4
c000e46c:	84 c0                	test   al,al
c000e46e:	0f 84 3c 02 00 00    	je     c000e6b0 <loadACPITables(unsigned char*)+0x258>
c000e474:	a0 40 31 02 c0       	mov    al,ds:0xc0023140
c000e479:	84 c0                	test   al,al
c000e47b:	74 77                	je     c000e4f4 <loadACPITables(unsigned char*)+0x9c>
c000e47d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e481:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e485:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e489:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e48c:	83 e8 24             	sub    eax,0x24
c000e48f:	c1 e8 03             	shr    eax,0x3
c000e492:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e496:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e49e:	66 90                	xchg   ax,ax
c000e4a0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e4a4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e4a8:	0f 8d b6 00 00 00    	jge    c000e564 <loadACPITables(unsigned char*)+0x10c>
c000e4ae:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4b2:	83 c0 24             	add    eax,0x24
c000e4b5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e4b9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e4bd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e4c1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e4c5:	c1 e0 03             	shl    eax,0x3
c000e4c8:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e4cc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e4d0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e4d3:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4d5:	89 c1                	mov    ecx,eax
c000e4d7:	a1 2c 2f 02 c0       	mov    eax,ds:0xc0022f2c
c000e4dc:	8d 50 01             	lea    edx,[eax+0x1]
c000e4df:	89 15 2c 2f 02 c0    	mov    DWORD PTR ds:0xc0022f2c,edx
c000e4e5:	89 ca                	mov    edx,ecx
c000e4e7:	89 14 c5 44 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd0bc],edx
c000e4ee:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000e4f2:	eb ac                	jmp    c000e4a0 <loadACPITables(unsigned char*)+0x48>
c000e4f4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4f8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e4fc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e500:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e503:	83 e8 24             	sub    eax,0x24
c000e506:	c1 e8 02             	shr    eax,0x2
c000e509:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e50d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e515:	8d 76 00             	lea    esi,[esi+0x0]
c000e518:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e51c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e520:	7d 42                	jge    c000e564 <loadACPITables(unsigned char*)+0x10c>
c000e522:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e526:	83 c0 24             	add    eax,0x24
c000e529:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e52d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e531:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e535:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e539:	c1 e0 02             	shl    eax,0x2
c000e53c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e540:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e544:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e546:	a1 2c 2f 02 c0       	mov    eax,ds:0xc0022f2c
c000e54b:	8d 50 01             	lea    edx,[eax+0x1]
c000e54e:	89 15 2c 2f 02 c0    	mov    DWORD PTR ds:0xc0022f2c,edx
c000e554:	89 ca                	mov    edx,ecx
c000e556:	89 14 c5 44 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd0bc],edx
c000e55d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000e561:	eb b5                	jmp    c000e518 <loadACPITables(unsigned char*)+0xc0>
c000e563:	90                   	nop
c000e564:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e56c:	a1 2c 2f 02 c0       	mov    eax,ds:0xc0022f2c
c000e571:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e575:	0f 8d 39 01 00 00    	jge    c000e6b4 <loadACPITables(unsigned char*)+0x25c>
c000e57b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e57f:	8b 04 c5 44 2f 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd0bc]
c000e586:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e58a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e58e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e592:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e596:	25 ff 0f 00 00       	and    eax,0xfff
c000e59b:	89 c6                	mov    esi,eax
c000e59d:	8b 1d 30 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a30
c000e5a3:	83 ec 0c             	sub    esp,0xc
c000e5a6:	6a 01                	push   0x1
c000e5a8:	e8 e0 b3 ff ff       	call   c000998d <Virt::allocateKernelVirtualPages(int)>
c000e5ad:	83 c4 10             	add    esp,0x10
c000e5b0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e5b4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e5ba:	83 ec 0c             	sub    esp,0xc
c000e5bd:	6a 01                	push   0x1
c000e5bf:	6a 01                	push   0x1
c000e5c1:	50                   	push   eax
c000e5c2:	52                   	push   edx
c000e5c3:	53                   	push   ebx
c000e5c4:	e8 53 bd ff ff       	call   c000a31c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e5c9:	83 c4 20             	add    esp,0x20
c000e5cc:	09 f0                	or     eax,esi
c000e5ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e5d2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e5d6:	c1 e0 03             	shl    eax,0x3
c000e5d9:	05 40 2f 02 c0       	add    eax,0xc0022f40
c000e5de:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e5ea:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e5f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e5fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e5fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e602:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e606:	89 c6                	mov    esi,eax
c000e608:	89 d7                	mov    edi,edx
c000e60a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e60c:	89 c8                	mov    eax,ecx
c000e60e:	89 fa                	mov    edx,edi
c000e610:	89 f3                	mov    ebx,esi
c000e612:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e616:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e61a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e61e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e622:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e625:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e629:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e62d:	05 00 10 00 00       	add    eax,0x1000
c000e632:	c1 e8 0c             	shr    eax,0xc
c000e635:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e639:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e63d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e641:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e645:	25 ff 0f 00 00       	and    eax,0xfff
c000e64a:	89 c6                	mov    esi,eax
c000e64c:	8b 1d 30 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a30
c000e652:	83 ec 0c             	sub    esp,0xc
c000e655:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e659:	e8 2f b3 ff ff       	call   c000998d <Virt::allocateKernelVirtualPages(int)>
c000e65e:	83 c4 10             	add    esp,0x10
c000e661:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e665:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e66b:	83 ec 0c             	sub    esp,0xc
c000e66e:	6a 01                	push   0x1
c000e670:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e674:	50                   	push   eax
c000e675:	52                   	push   edx
c000e676:	53                   	push   ebx
c000e677:	e8 a0 bc ff ff       	call   c000a31c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e67c:	83 c4 20             	add    esp,0x20
c000e67f:	09 f0                	or     eax,esi
c000e681:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e685:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e689:	83 ec 0c             	sub    esp,0xc
c000e68c:	50                   	push   eax
c000e68d:	e8 2b b6 ff ff       	call   c0009cbd <Virt::freeKernelVirtualPages(unsigned long)>
c000e692:	83 c4 10             	add    esp,0x10
c000e695:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e699:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e69d:	89 14 c5 44 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd0bc],edx
c000e6a4:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e6a8:	e9 bf fe ff ff       	jmp    c000e56c <loadACPITables(unsigned char*)+0x114>
c000e6ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e6b0:	90                   	nop
c000e6b1:	8d 76 00             	lea    esi,[esi+0x0]
c000e6b4:	83 c4 60             	add    esp,0x60
c000e6b7:	5b                   	pop    ebx
c000e6b8:	5e                   	pop    esi
c000e6b9:	5f                   	pop    edi
c000e6ba:	c3                   	ret    
c000e6bb:	90                   	nop

c000e6bc <findRSDT(unsigned char*)>:
c000e6bc:	57                   	push   edi
c000e6bd:	56                   	push   esi
c000e6be:	53                   	push   ebx
c000e6bf:	83 ec 50             	sub    esp,0x50
c000e6c2:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e6c7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e6cd:	83 e0 04             	and    eax,0x4
c000e6d0:	84 c0                	test   al,al
c000e6d2:	75 0c                	jne    c000e6e0 <findRSDT(unsigned char*)+0x24>
c000e6d4:	b8 00 00 00 00       	mov    eax,0x0
c000e6d9:	e9 26 01 00 00       	jmp    c000e804 <findRSDT(unsigned char*)+0x148>
c000e6de:	66 90                	xchg   ax,ax
c000e6e0:	89 e0                	mov    eax,esp
c000e6e2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e6e6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e6ea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e6ee:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e6f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6fa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e6fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e702:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e706:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e70a:	89 c6                	mov    esi,eax
c000e70c:	89 d7                	mov    edi,edx
c000e70e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e710:	89 c8                	mov    eax,ecx
c000e712:	89 fa                	mov    edx,edi
c000e714:	89 f3                	mov    ebx,esi
c000e716:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e71a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e71e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e722:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e726:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e72a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e732:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e736:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e73a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e73e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e742:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e746:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e74a:	25 ff 0f 00 00       	and    eax,0xfff
c000e74f:	89 c6                	mov    esi,eax
c000e751:	8b 1d 30 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a30
c000e757:	83 ec 0c             	sub    esp,0xc
c000e75a:	6a 02                	push   0x2
c000e75c:	e8 2c b2 ff ff       	call   c000998d <Virt::allocateKernelVirtualPages(int)>
c000e761:	83 c4 10             	add    esp,0x10
c000e764:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e768:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e76e:	83 ec 0c             	sub    esp,0xc
c000e771:	6a 01                	push   0x1
c000e773:	6a 02                	push   0x2
c000e775:	50                   	push   eax
c000e776:	52                   	push   edx
c000e777:	53                   	push   ebx
c000e778:	e8 9f bb ff ff       	call   c000a31c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e77d:	83 c4 20             	add    esp,0x20
c000e780:	09 f0                	or     eax,esi
c000e782:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e786:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e78a:	25 ff 0f 00 00       	and    eax,0xfff
c000e78f:	89 c6                	mov    esi,eax
c000e791:	8b 1d 30 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a30
c000e797:	83 ec 0c             	sub    esp,0xc
c000e79a:	6a 02                	push   0x2
c000e79c:	e8 ec b1 ff ff       	call   c000998d <Virt::allocateKernelVirtualPages(int)>
c000e7a1:	83 c4 10             	add    esp,0x10
c000e7a4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e7a8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e7ae:	83 ec 0c             	sub    esp,0xc
c000e7b1:	6a 01                	push   0x1
c000e7b3:	6a 02                	push   0x2
c000e7b5:	50                   	push   eax
c000e7b6:	52                   	push   edx
c000e7b7:	53                   	push   ebx
c000e7b8:	e8 5f bb ff ff       	call   c000a31c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e7bd:	83 c4 20             	add    esp,0x20
c000e7c0:	09 f0                	or     eax,esi
c000e7c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e7c6:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e7cb:	75 13                	jne    c000e7e0 <findRSDT(unsigned char*)+0x124>
c000e7cd:	c6 05 40 31 02 c0 00 	mov    BYTE PTR ds:0xc0023140,0x0
c000e7d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7dc:	eb 22                	jmp    c000e800 <findRSDT(unsigned char*)+0x144>
c000e7de:	66 90                	xchg   ax,ax
c000e7e0:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e7e5:	75 11                	jne    c000e7f8 <findRSDT(unsigned char*)+0x13c>
c000e7e7:	c6 05 40 31 02 c0 01 	mov    BYTE PTR ds:0xc0023140,0x1
c000e7ee:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e7f2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e7f6:	eb 08                	jmp    c000e800 <findRSDT(unsigned char*)+0x144>
c000e7f8:	b8 00 00 00 00       	mov    eax,0x0
c000e7fd:	eb 05                	jmp    c000e804 <findRSDT(unsigned char*)+0x148>
c000e7ff:	90                   	nop
c000e800:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e804:	83 c4 50             	add    esp,0x50
c000e807:	5b                   	pop    ebx
c000e808:	5e                   	pop    esi
c000e809:	5f                   	pop    edi
c000e80a:	c3                   	ret    
c000e80b:	90                   	nop

c000e80c <findDataTable(unsigned char*, char*)>:
c000e80c:	83 ec 1c             	sub    esp,0x1c
c000e80f:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e814:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e81a:	83 e0 04             	and    eax,0x4
c000e81d:	84 c0                	test   al,al
c000e81f:	75 07                	jne    c000e828 <findDataTable(unsigned char*, char*)+0x1c>
c000e821:	b8 00 00 00 00       	mov    eax,0x0
c000e826:	eb 58                	jmp    c000e880 <findDataTable(unsigned char*, char*)+0x74>
c000e828:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e830:	a1 2c 2f 02 c0       	mov    eax,ds:0xc0022f2c
c000e835:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e839:	7d 3d                	jge    c000e878 <findDataTable(unsigned char*, char*)+0x6c>
c000e83b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e83f:	c1 e0 03             	shl    eax,0x3
c000e842:	05 40 2f 02 c0       	add    eax,0xc0022f40
c000e847:	83 ec 04             	sub    esp,0x4
c000e84a:	6a 04                	push   0x4
c000e84c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e850:	50                   	push   eax
c000e851:	e8 5a 1b ff ff       	call   c00003b0 <memcmp>
c000e856:	83 c4 10             	add    esp,0x10
c000e859:	85 c0                	test   eax,eax
c000e85b:	0f 94 c0             	sete   al
c000e85e:	84 c0                	test   al,al
c000e860:	74 0e                	je     c000e870 <findDataTable(unsigned char*, char*)+0x64>
c000e862:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e866:	8b 04 c5 44 2f 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd0bc]
c000e86d:	eb 11                	jmp    c000e880 <findDataTable(unsigned char*, char*)+0x74>
c000e86f:	90                   	nop
c000e870:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e874:	eb ba                	jmp    c000e830 <findDataTable(unsigned char*, char*)+0x24>
c000e876:	66 90                	xchg   ax,ax
c000e878:	b8 00 00 00 00       	mov    eax,0x0
c000e87d:	8d 76 00             	lea    esi,[esi+0x0]
c000e880:	83 c4 1c             	add    esp,0x1c
c000e883:	c3                   	ret    

c000e884 <scanMADT()>:
c000e884:	53                   	push   ebx
c000e885:	83 ec 38             	sub    esp,0x38
c000e888:	a1 50 09 02 c0       	mov    eax,ds:0xc0020950
c000e88d:	25 00 04 00 00       	and    eax,0x400
c000e892:	74 14                	je     c000e8a8 <scanMADT()+0x24>
c000e894:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e899:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e89f:	83 e2 fb             	and    edx,0xfffffffb
c000e8a2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8a8:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e8ad:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e8b3:	83 e0 04             	and    eax,0x4
c000e8b6:	84 c0                	test   al,al
c000e8b8:	0f 84 8a 04 00 00    	je     c000ed48 <scanMADT()+0x4c4>
c000e8be:	e8 05 fb ff ff       	call   c000e3c8 <findRSDP()>
c000e8c3:	a3 4c 31 02 c0       	mov    ds:0xc002314c,eax
c000e8c8:	a1 4c 31 02 c0       	mov    eax,ds:0xc002314c
c000e8cd:	85 c0                	test   eax,eax
c000e8cf:	75 1b                	jne    c000e8ec <scanMADT()+0x68>
c000e8d1:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e8d6:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8dc:	83 e2 fb             	and    edx,0xfffffffb
c000e8df:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8e5:	e9 66 04 00 00       	jmp    c000ed50 <scanMADT()+0x4cc>
c000e8ea:	66 90                	xchg   ax,ax
c000e8ec:	a1 4c 31 02 c0       	mov    eax,ds:0xc002314c
c000e8f1:	83 ec 0c             	sub    esp,0xc
c000e8f4:	50                   	push   eax
c000e8f5:	e8 c2 fd ff ff       	call   c000e6bc <findRSDT(unsigned char*)>
c000e8fa:	83 c4 10             	add    esp,0x10
c000e8fd:	a3 48 31 02 c0       	mov    ds:0xc0023148,eax
c000e902:	a1 48 31 02 c0       	mov    eax,ds:0xc0023148
c000e907:	85 c0                	test   eax,eax
c000e909:	75 19                	jne    c000e924 <scanMADT()+0xa0>
c000e90b:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e910:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e916:	83 e2 fb             	and    edx,0xfffffffb
c000e919:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e91f:	e9 2c 04 00 00       	jmp    c000ed50 <scanMADT()+0x4cc>
c000e924:	a1 48 31 02 c0       	mov    eax,ds:0xc0023148
c000e929:	83 ec 0c             	sub    esp,0xc
c000e92c:	50                   	push   eax
c000e92d:	e8 26 fb ff ff       	call   c000e458 <loadACPITables(unsigned char*)>
c000e932:	83 c4 10             	add    esp,0x10
c000e935:	a1 48 31 02 c0       	mov    eax,ds:0xc0023148
c000e93a:	83 ec 08             	sub    esp,0x8
c000e93d:	68 28 e4 01 c0       	push   0xc001e428
c000e942:	50                   	push   eax
c000e943:	e8 c4 fe ff ff       	call   c000e80c <findDataTable(unsigned char*, char*)>
c000e948:	83 c4 10             	add    esp,0x10
c000e94b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e94f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e954:	75 1a                	jne    c000e970 <scanMADT()+0xec>
c000e956:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000e95b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e961:	83 e2 fe             	and    edx,0xfffffffe
c000e964:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e96a:	e9 e1 03 00 00       	jmp    c000ed50 <scanMADT()+0x4cc>
c000e96f:	90                   	nop
c000e970:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e978:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e97c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e97f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e983:	0f 87 c7 03 00 00    	ja     c000ed50 <scanMADT()+0x4cc>
c000e989:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e991:	0f 87 b9 03 00 00    	ja     c000ed50 <scanMADT()+0x4cc>
c000e997:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e99b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e99f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9a3:	8d 50 01             	lea    edx,[eax+0x1]
c000e9a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9ae:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9b2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e9b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9ba:	8d 50 01             	lea    edx,[eax+0x1]
c000e9bd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9c5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9c9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e9cd:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e9d2:	0f 86 74 03 00 00    	jbe    c000ed4c <scanMADT()+0x4c8>
c000e9d8:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e9dd:	75 5d                	jne    c000ea3c <scanMADT()+0x1b8>
c000e9df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9e3:	8d 50 01             	lea    edx,[eax+0x1]
c000e9e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9ea:	8a 15 40 33 02 c0    	mov    dl,BYTE PTR ds:0xc0023340
c000e9f0:	81 e2 ff 00 00 00    	and    edx,0xff
c000e9f6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9fa:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e9fe:	88 82 80 33 02 c0    	mov    BYTE PTR [edx-0x3ffdcc80],al
c000ea04:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ea08:	8d 42 01             	lea    eax,[edx+0x1]
c000ea0b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ea0f:	a0 40 33 02 c0       	mov    al,ds:0xc0023340
c000ea14:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea17:	88 0d 40 33 02 c0    	mov    BYTE PTR ds:0xc0023340,cl
c000ea1d:	25 ff 00 00 00       	and    eax,0xff
c000ea22:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea26:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000ea2a:	88 90 60 33 02 c0    	mov    BYTE PTR [eax-0x3ffdcca0],dl
c000ea30:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ea35:	e9 f6 02 00 00       	jmp    c000ed30 <scanMADT()+0x4ac>
c000ea3a:	66 90                	xchg   ax,ax
c000ea3c:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000ea41:	0f 85 29 01 00 00    	jne    c000eb70 <scanMADT()+0x2ec>
c000ea47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea4b:	8d 50 01             	lea    edx,[eax+0x1]
c000ea4e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea52:	8a 15 00 32 02 c0    	mov    dl,BYTE PTR ds:0xc0023200
c000ea58:	81 e2 ff 00 00 00    	and    edx,0xff
c000ea5e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea62:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea66:	88 82 20 32 02 c0    	mov    BYTE PTR [edx-0x3ffdcde0],al
c000ea6c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000ea70:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea74:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea78:	01 d0                	add    eax,edx
c000ea7a:	83 c0 2c             	add    eax,0x2c
c000ea7d:	8a 00                	mov    al,BYTE PTR [eax]
c000ea7f:	31 d2                	xor    edx,edx
c000ea81:	88 c2                	mov    dl,al
c000ea83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea87:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea8a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea8e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ea92:	25 ff 00 00 00       	and    eax,0xff
c000ea97:	c1 e0 08             	shl    eax,0x8
c000ea9a:	89 d1                	mov    ecx,edx
c000ea9c:	09 c1                	or     ecx,eax
c000ea9e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaa2:	8d 50 02             	lea    edx,[eax+0x2]
c000eaa5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eaa9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eaad:	25 ff 00 00 00       	and    eax,0xff
c000eab2:	c1 e0 10             	shl    eax,0x10
c000eab5:	09 c1                	or     ecx,eax
c000eab7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eabb:	8d 50 03             	lea    edx,[eax+0x3]
c000eabe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eac2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eac6:	25 ff 00 00 00       	and    eax,0xff
c000eacb:	c1 e0 18             	shl    eax,0x18
c000eace:	09 c1                	or     ecx,eax
c000ead0:	89 ca                	mov    edx,ecx
c000ead2:	a0 00 32 02 c0       	mov    al,ds:0xc0023200
c000ead7:	25 ff 00 00 00       	and    eax,0xff
c000eadc:	89 14 85 40 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcdc0],edx
c000eae3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eae8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eaec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaf0:	01 d0                	add    eax,edx
c000eaf2:	83 c0 2c             	add    eax,0x2c
c000eaf5:	8a 00                	mov    al,BYTE PTR [eax]
c000eaf7:	31 d2                	xor    edx,edx
c000eaf9:	88 c2                	mov    dl,al
c000eafb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaff:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb02:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb06:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eb0a:	25 ff 00 00 00       	and    eax,0xff
c000eb0f:	c1 e0 08             	shl    eax,0x8
c000eb12:	89 d1                	mov    ecx,edx
c000eb14:	09 c1                	or     ecx,eax
c000eb16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb1a:	8d 50 02             	lea    edx,[eax+0x2]
c000eb1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb21:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb25:	25 ff 00 00 00       	and    eax,0xff
c000eb2a:	c1 e0 10             	shl    eax,0x10
c000eb2d:	09 c1                	or     ecx,eax
c000eb2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb33:	8d 50 03             	lea    edx,[eax+0x3]
c000eb36:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb3a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb3e:	25 ff 00 00 00       	and    eax,0xff
c000eb43:	c1 e0 18             	shl    eax,0x18
c000eb46:	09 c1                	or     ecx,eax
c000eb48:	89 ca                	mov    edx,ecx
c000eb4a:	a0 00 32 02 c0       	mov    al,ds:0xc0023200
c000eb4f:	25 ff 00 00 00       	and    eax,0xff
c000eb54:	89 14 85 c0 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcd40],edx
c000eb5b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eb60:	a0 00 32 02 c0       	mov    al,ds:0xc0023200
c000eb65:	40                   	inc    eax
c000eb66:	a2 00 32 02 c0       	mov    ds:0xc0023200,al
c000eb6b:	e9 c0 01 00 00       	jmp    c000ed30 <scanMADT()+0x4ac>
c000eb70:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000eb75:	0f 85 fd 00 00 00    	jne    c000ec78 <scanMADT()+0x3f4>
c000eb7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb7f:	8d 50 01             	lea    edx,[eax+0x1]
c000eb82:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb86:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb8a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb8e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000eb92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb96:	8d 50 01             	lea    edx,[eax+0x1]
c000eb99:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eba1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eba5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000eba9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebb1:	01 d0                	add    eax,edx
c000ebb3:	83 c0 2c             	add    eax,0x2c
c000ebb6:	8a 00                	mov    al,BYTE PTR [eax]
c000ebb8:	31 d2                	xor    edx,edx
c000ebba:	88 c2                	mov    dl,al
c000ebbc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebc0:	8d 48 01             	lea    ecx,[eax+0x1]
c000ebc3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebc7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ebcb:	25 ff 00 00 00       	and    eax,0xff
c000ebd0:	c1 e0 08             	shl    eax,0x8
c000ebd3:	89 d1                	mov    ecx,edx
c000ebd5:	09 c1                	or     ecx,eax
c000ebd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebdb:	8d 50 02             	lea    edx,[eax+0x2]
c000ebde:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebe2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ebe6:	25 ff 00 00 00       	and    eax,0xff
c000ebeb:	c1 e0 10             	shl    eax,0x10
c000ebee:	09 c1                	or     ecx,eax
c000ebf0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebf4:	8d 50 03             	lea    edx,[eax+0x3]
c000ebf7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebfb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ebff:	25 ff 00 00 00       	and    eax,0xff
c000ec04:	c1 e0 18             	shl    eax,0x18
c000ec07:	09 c8                	or     eax,ecx
c000ec09:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec0d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ec12:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec1a:	01 d0                	add    eax,edx
c000ec1c:	83 c0 2c             	add    eax,0x2c
c000ec1f:	8a 00                	mov    al,BYTE PTR [eax]
c000ec21:	25 ff 00 00 00       	and    eax,0xff
c000ec26:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ec2a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ec2d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec31:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000ec35:	81 e2 ff 00 00 00    	and    edx,0xff
c000ec3b:	c1 e2 08             	shl    edx,0x8
c000ec3e:	09 d0                	or     eax,edx
c000ec40:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ec45:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec4a:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000ec4e:	25 ff 00 00 00       	and    eax,0xff
c000ec53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ec57:	88 90 a0 f8 01 c0    	mov    BYTE PTR [eax-0x3ffe0760],dl
c000ec5d:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000ec61:	31 d2                	xor    edx,edx
c000ec63:	88 c2                	mov    dl,al
c000ec65:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000ec6a:	66 89 84 12 e0 31 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdce20],ax
c000ec72:	e9 b9 00 00 00       	jmp    c000ed30 <scanMADT()+0x4ac>
c000ec77:	90                   	nop
c000ec78:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000ec7d:	0f 85 a1 00 00 00    	jne    c000ed24 <scanMADT()+0x4a0>
c000ec83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec87:	8d 50 01             	lea    edx,[eax+0x1]
c000ec8a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec8e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec92:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec96:	25 ff 00 00 00       	and    eax,0xff
c000ec9b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec9f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eca3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eca7:	01 d0                	add    eax,edx
c000eca9:	83 c0 2c             	add    eax,0x2c
c000ecac:	8a 00                	mov    al,BYTE PTR [eax]
c000ecae:	31 d2                	xor    edx,edx
c000ecb0:	88 c2                	mov    dl,al
c000ecb2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecb6:	8d 48 01             	lea    ecx,[eax+0x1]
c000ecb9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ecbd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ecc1:	25 ff 00 00 00       	and    eax,0xff
c000ecc6:	c1 e0 08             	shl    eax,0x8
c000ecc9:	09 d0                	or     eax,edx
c000eccb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eccf:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ecd4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecd8:	8d 50 01             	lea    edx,[eax+0x1]
c000ecdb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ecdf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ece3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ece7:	25 ff 00 00 00       	and    eax,0xff
c000ecec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ecf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecf4:	c1 e0 08             	shl    eax,0x8
c000ecf7:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ecfb:	89 c1                	mov    ecx,eax
c000ecfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed01:	c1 e0 18             	shl    eax,0x18
c000ed04:	89 c3                	mov    ebx,eax
c000ed06:	a1 50 31 02 c0       	mov    eax,ds:0xc0023150
c000ed0b:	8d 50 01             	lea    edx,[eax+0x1]
c000ed0e:	89 15 50 31 02 c0    	mov    DWORD PTR ds:0xc0023150,edx
c000ed14:	09 d9                	or     ecx,ebx
c000ed16:	89 ca                	mov    edx,ecx
c000ed18:	89 14 85 60 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcea0],edx
c000ed1f:	eb 0f                	jmp    c000ed30 <scanMADT()+0x4ac>
c000ed21:	8d 76 00             	lea    esi,[esi+0x0]
c000ed24:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000ed29:	75 05                	jne    c000ed30 <scanMADT()+0x4ac>
c000ed2b:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ed30:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000ed34:	31 d2                	xor    edx,edx
c000ed36:	88 c2                	mov    dl,al
c000ed38:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ed3c:	01 d0                	add    eax,edx
c000ed3e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed42:	e9 31 fc ff ff       	jmp    c000e978 <scanMADT()+0xf4>
c000ed47:	90                   	nop
c000ed48:	90                   	nop
c000ed49:	eb 05                	jmp    c000ed50 <scanMADT()+0x4cc>
c000ed4b:	90                   	nop
c000ed4c:	90                   	nop
c000ed4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed50:	83 c4 38             	add    esp,0x38
c000ed53:	5b                   	pop    ebx
c000ed54:	c3                   	ret    
c000ed55:	90                   	nop
c000ed56:	66 90                	xchg   ax,ax

c000ed58 <ACPI::ACPI()>:
c000ed58:	83 ec 0c             	sub    esp,0xc
c000ed5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed5f:	83 ec 08             	sub    esp,0x8
c000ed62:	68 2d e4 01 c0       	push   0xc001e42d
c000ed67:	50                   	push   eax
c000ed68:	e8 4b d4 ff ff       	call   c000c1b8 <Device::Device(char const*)>
c000ed6d:	83 c4 10             	add    esp,0x10
c000ed70:	ba 64 e5 01 c0       	mov    edx,0xc001e564
c000ed75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed79:	89 10                	mov    DWORD PTR [eax],edx
c000ed7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed7f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ed86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed8a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed98:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000eda2:	e8 dd fa ff ff       	call   c000e884 <scanMADT()>
c000eda7:	90                   	nop
c000eda8:	83 c4 0c             	add    esp,0xc
c000edab:	c3                   	ret    

c000edac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000edac:	83 ec 2c             	sub    esp,0x2c
c000edaf:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000edb3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edb7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000edbb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000edbf:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000edc4:	88 d0                	mov    al,dl
c000edc6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000edca:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000edcf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000edd7:	90                   	nop
c000edd8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eddc:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ede2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000ede6:	0f 8d 9c 00 00 00    	jge    c000ee88 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000edec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edf0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edf4:	83 c2 2a             	add    edx,0x2a
c000edf7:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000edfb:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000ee00:	75 7a                	jne    c000ee7c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000ee02:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee06:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee0a:	83 c2 2a             	add    edx,0x2a
c000ee0d:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000ee11:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000ee15:	75 65                	jne    c000ee7c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000ee17:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000ee1c:	74 3a                	je     c000ee58 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000ee1e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee22:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee26:	83 c2 2a             	add    edx,0x2a
c000ee29:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ee2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee34:	39 c2                	cmp    edx,eax
c000ee36:	74 10                	je     c000ee48 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000ee38:	83 ec 0c             	sub    esp,0xc
c000ee3b:	68 a8 e3 01 c0       	push   0xc001e3a8
c000ee40:	e8 ea 18 00 00       	call   c001072f <Krnl::panic(char const*)>
c000ee45:	83 c4 10             	add    esp,0x10
c000ee48:	83 ec 0c             	sub    esp,0xc
c000ee4b:	68 32 e4 01 c0       	push   0xc001e432
c000ee50:	e8 da 18 00 00       	call   c001072f <Krnl::panic(char const*)>
c000ee55:	83 c4 10             	add    esp,0x10
c000ee58:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee5c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee60:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee64:	83 c2 2a             	add    edx,0x2a
c000ee67:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ee6b:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee6d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee70:	89 01                	mov    DWORD PTR [ecx],eax
c000ee72:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ee75:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee7a:	66 90                	xchg   ax,ax
c000ee7c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ee80:	e9 53 ff ff ff       	jmp    c000edd8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ee85:	8d 76 00             	lea    esi,[esi+0x0]
c000ee88:	90                   	nop
c000ee89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee8d:	83 c4 2c             	add    esp,0x2c
c000ee90:	c2 04 00             	ret    0x4
c000ee93:	90                   	nop

c000ee94 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ee94:	83 ec 1c             	sub    esp,0x1c
c000ee97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee9b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ee9f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eea3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000eea8:	88 c8                	mov    al,cl
c000eeaa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000eeae:	88 d0                	mov    al,dl
c000eeb0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000eeb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeb8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eebe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eec5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000eec9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000eecd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eed1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eed7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000eedb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000eede:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eee2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000eee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeeb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eef1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000eef5:	8d 48 01             	lea    ecx,[eax+0x1]
c000eef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eefc:	83 c2 2a             	add    edx,0x2a
c000eeff:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ef03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef07:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ef0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef11:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ef14:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ef18:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ef1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef20:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef26:	8d 50 01             	lea    edx,[eax+0x1]
c000ef29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef2d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ef33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef37:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef3d:	3d 00 02 00 00       	cmp    eax,0x200
c000ef42:	75 10                	jne    c000ef54 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000ef44:	83 ec 0c             	sub    esp,0xc
c000ef47:	68 41 e4 01 c0       	push   0xc001e441
c000ef4c:	e8 de 17 00 00       	call   c001072f <Krnl::panic(char const*)>
c000ef51:	83 c4 10             	add    esp,0x10
c000ef54:	90                   	nop
c000ef55:	83 c4 1c             	add    esp,0x1c
c000ef58:	c3                   	ret    
c000ef59:	90                   	nop
c000ef5a:	66 90                	xchg   ax,ax

c000ef5c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ef5c:	b8 00 00 00 00       	mov    eax,0x0
c000ef61:	c3                   	ret    
c000ef62:	66 90                	xchg   ax,ax

c000ef64 <ACPI::detectPCI()>:
c000ef64:	53                   	push   ebx
c000ef65:	83 ec 28             	sub    esp,0x28
c000ef68:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ef6d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ef72:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000ef77:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef7d:	83 e0 04             	and    eax,0x4
c000ef80:	84 c0                	test   al,al
c000ef82:	74 2c                	je     c000efb0 <ACPI::detectPCI()+0x4c>
c000ef84:	a1 48 31 02 c0       	mov    eax,ds:0xc0023148
c000ef89:	83 ec 08             	sub    esp,0x8
c000ef8c:	68 5e e4 01 c0       	push   0xc001e45e
c000ef91:	50                   	push   eax
c000ef92:	e8 75 f8 ff ff       	call   c000e80c <findDataTable(unsigned char*, char*)>
c000ef97:	83 c4 10             	add    esp,0x10
c000ef9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef9e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000efa3:	74 0b                	je     c000efb0 <ACPI::detectPCI()+0x4c>
c000efa5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efaa:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efaf:	90                   	nop
c000efb0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000efb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efbc:	8a 00                	mov    al,BYTE PTR [eax]
c000efbe:	3c 01                	cmp    al,0x1
c000efc0:	75 0e                	jne    c000efd0 <ACPI::detectPCI()+0x6c>
c000efc2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efc7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efcc:	eb 2a                	jmp    c000eff8 <ACPI::detectPCI()+0x94>
c000efce:	66 90                	xchg   ax,ax
c000efd0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efd4:	8a 00                	mov    al,BYTE PTR [eax]
c000efd6:	3c 02                	cmp    al,0x2
c000efd8:	75 1e                	jne    c000eff8 <ACPI::detectPCI()+0x94>
c000efda:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efdf:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000efe4:	74 12                	je     c000eff8 <ACPI::detectPCI()+0x94>
c000efe6:	83 ec 0c             	sub    esp,0xc
c000efe9:	68 d8 e3 01 c0       	push   0xc001e3d8
c000efee:	e8 3c 17 00 00       	call   c001072f <Krnl::panic(char const*)>
c000eff3:	83 c4 10             	add    esp,0x10
c000eff6:	66 90                	xchg   ax,ax
c000eff8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000effc:	83 f0 01             	xor    eax,0x1
c000efff:	84 c0                	test   al,al
c000f001:	74 41                	je     c000f044 <ACPI::detectPCI()+0xe0>
c000f003:	e8 48 11 ff ff       	call   c0000150 <manualPCIProbe>
c000f008:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f00c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f011:	75 0d                	jne    c000f020 <ACPI::detectPCI()+0xbc>
c000f013:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f018:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f01d:	eb 25                	jmp    c000f044 <ACPI::detectPCI()+0xe0>
c000f01f:	90                   	nop
c000f020:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f025:	75 1d                	jne    c000f044 <ACPI::detectPCI()+0xe0>
c000f027:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f02c:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000f031:	74 11                	je     c000f044 <ACPI::detectPCI()+0xe0>
c000f033:	83 ec 0c             	sub    esp,0xc
c000f036:	68 d8 e3 01 c0       	push   0xc001e3d8
c000f03b:	e8 ef 16 00 00       	call   c001072f <Krnl::panic(char const*)>
c000f040:	83 c4 10             	add    esp,0x10
c000f043:	90                   	nop
c000f044:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000f049:	0f 84 85 00 00 00    	je     c000f0d4 <ACPI::detectPCI()+0x170>
c000f04f:	83 ec 0c             	sub    esp,0xc
c000f052:	68 63 e4 01 c0       	push   0xc001e463
c000f057:	e8 4f 8e ff ff       	call   c0007eab <Krnl::setBootMessage(char const*)>
c000f05c:	83 c4 10             	add    esp,0x10
c000f05f:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f067:	83 ec 0c             	sub    esp,0xc
c000f06a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f06e:	e8 de 8d ff ff       	call   c0007e51 <malloc>
c000f073:	83 c4 10             	add    esp,0x10
c000f076:	89 c3                	mov    ebx,eax
c000f078:	83 ec 0c             	sub    esp,0xc
c000f07b:	53                   	push   ebx
c000f07c:	e8 c9 94 00 00       	call   c001854a <PCI::PCI()>
c000f081:	83 c4 10             	add    esp,0x10
c000f084:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f088:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f08c:	83 ec 08             	sub    esp,0x8
c000f08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f093:	50                   	push   eax
c000f094:	e8 87 cf ff ff       	call   c000c020 <Device::addChild(Device*)>
c000f099:	83 c4 10             	add    esp,0x10
c000f09c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0a0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0a2:	83 c0 08             	add    eax,0x8
c000f0a5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0a7:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000f0ac:	74 0a                	je     c000f0b8 <ACPI::detectPCI()+0x154>
c000f0ae:	ba 01 00 00 00       	mov    edx,0x1
c000f0b3:	eb 0b                	jmp    c000f0c0 <ACPI::detectPCI()+0x15c>
c000f0b5:	8d 76 00             	lea    esi,[esi+0x0]
c000f0b8:	ba 02 00 00 00       	mov    edx,0x2
c000f0bd:	8d 76 00             	lea    esi,[esi+0x0]
c000f0c0:	6a 00                	push   0x0
c000f0c2:	6a 00                	push   0x0
c000f0c4:	52                   	push   edx
c000f0c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f0c9:	ff d0                	call   eax
c000f0cb:	83 c4 10             	add    esp,0x10
c000f0ce:	e9 91 00 00 00       	jmp    c000f164 <ACPI::detectPCI()+0x200>
c000f0d3:	90                   	nop
c000f0d4:	83 ec 0c             	sub    esp,0xc
c000f0d7:	68 7b e4 01 c0       	push   0xc001e47b
c000f0dc:	e8 ca 8d ff ff       	call   c0007eab <Krnl::setBootMessage(char const*)>
c000f0e1:	83 c4 10             	add    esp,0x10
c000f0e4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f0eb:	83 ec 0c             	sub    esp,0xc
c000f0ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f0f2:	e8 5a 8d ff ff       	call   c0007e51 <malloc>
c000f0f7:	83 c4 10             	add    esp,0x10
c000f0fa:	89 c3                	mov    ebx,eax
c000f0fc:	83 ec 0c             	sub    esp,0xc
c000f0ff:	53                   	push   ebx
c000f100:	e8 71 9f 00 00       	call   c0019076 <IDE::IDE()>
c000f105:	83 c4 10             	add    esp,0x10
c000f108:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f10c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f110:	83 ec 08             	sub    esp,0x8
c000f113:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f117:	50                   	push   eax
c000f118:	e8 03 cf ff ff       	call   c000c020 <Device::addChild(Device*)>
c000f11d:	83 c4 10             	add    esp,0x10
c000f120:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f124:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f12e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f132:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f13b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f13f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f148:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f14c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f14e:	83 c0 08             	add    eax,0x8
c000f151:	8b 00                	mov    eax,DWORD PTR [eax]
c000f153:	6a 00                	push   0x0
c000f155:	6a 00                	push   0x0
c000f157:	6a 00                	push   0x0
c000f159:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f15d:	ff d0                	call   eax
c000f15f:	83 c4 10             	add    esp,0x10
c000f162:	66 90                	xchg   ax,ax
c000f164:	90                   	nop
c000f165:	83 c4 28             	add    esp,0x28
c000f168:	5b                   	pop    ebx
c000f169:	c3                   	ret    
c000f16a:	66 90                	xchg   ax,ax

c000f16c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f16c:	83 ec 1c             	sub    esp,0x1c
c000f16f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f173:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f176:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f17a:	8b 15 38 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020938
c000f180:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f184:	25 ff 00 00 00       	and    eax,0xff
c000f189:	83 ec 08             	sub    esp,0x8
c000f18c:	50                   	push   eax
c000f18d:	52                   	push   edx
c000f18e:	e8 af 83 ff ff       	call   c0007542 <Computer::readCMOS(unsigned char)>
c000f193:	83 c4 10             	add    esp,0x10
c000f196:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f19a:	8b 15 38 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020938
c000f1a0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f1a4:	25 ff 00 00 00       	and    eax,0xff
c000f1a9:	83 ec 04             	sub    esp,0x4
c000f1ac:	6a 01                	push   0x1
c000f1ae:	50                   	push   eax
c000f1af:	52                   	push   edx
c000f1b0:	e8 a3 84 ff ff       	call   c0007658 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f1b5:	83 c4 10             	add    esp,0x10
c000f1b8:	90                   	nop
c000f1b9:	83 c4 1c             	add    esp,0x1c
c000f1bc:	c3                   	ret    
c000f1bd:	90                   	nop
c000f1be:	66 90                	xchg   ax,ax

c000f1c0 <ACPI::sleep()>:
c000f1c0:	83 ec 0c             	sub    esp,0xc
c000f1c3:	a1 20 2f 02 c0       	mov    eax,ds:0xc0022f20
c000f1c8:	85 c0                	test   eax,eax
c000f1ca:	74 08                	je     c000f1d4 <ACPI::sleep()+0x14>
c000f1cc:	a1 20 2f 02 c0       	mov    eax,ds:0xc0022f20
c000f1d1:	ff d0                	call   eax
c000f1d3:	90                   	nop
c000f1d4:	90                   	nop
c000f1d5:	83 c4 0c             	add    esp,0xc
c000f1d8:	c3                   	ret    
c000f1d9:	90                   	nop
c000f1da:	66 90                	xchg   ax,ax

c000f1dc <ACPI::open(int, int, void*)>:
c000f1dc:	57                   	push   edi
c000f1dd:	56                   	push   esi
c000f1de:	53                   	push   ebx
c000f1df:	81 ec 70 01 00 00    	sub    esp,0x170
c000f1e5:	83 ec 0c             	sub    esp,0xc
c000f1e8:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f1ef:	e8 70 fd ff ff       	call   c000ef64 <ACPI::detectPCI()>
c000f1f4:	83 c4 10             	add    esp,0x10
c000f1f7:	83 ec 0c             	sub    esp,0xc
c000f1fa:	68 00 e4 01 c0       	push   0xc001e400
c000f1ff:	e8 a7 8c ff ff       	call   c0007eab <Krnl::setBootMessage(char const*)>
c000f204:	83 c4 10             	add    esp,0x10
c000f207:	83 ec 0c             	sub    esp,0xc
c000f20a:	68 90 e4 01 c0       	push   0xc001e490
c000f20f:	e8 07 34 00 00       	call   c001261b <Thr::loadKernelSymbolTable(char const*)>
c000f214:	83 c4 10             	add    esp,0x10
c000f217:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000f21f:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000f22a:	83 ec 0c             	sub    esp,0xc
c000f22d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f234:	e8 18 8c ff ff       	call   c0007e51 <malloc>
c000f239:	83 c4 10             	add    esp,0x10
c000f23c:	89 c3                	mov    ebx,eax
c000f23e:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c000f243:	83 ec 04             	sub    esp,0x4
c000f246:	50                   	push   eax
c000f247:	68 ae e4 01 c0       	push   0xc001e4ae
c000f24c:	53                   	push   ebx
c000f24d:	e8 04 bf ff ff       	call   c000b156 <File::File(char const*, Process*)>
c000f252:	83 c4 10             	add    esp,0x10
c000f255:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000f25c:	83 ec 08             	sub    esp,0x8
c000f25f:	6a 01                	push   0x1
c000f261:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f268:	e8 a9 bf ff ff       	call   c000b216 <File::open(FileOpenMode)>
c000f26d:	83 c4 10             	add    esp,0x10
c000f270:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000f277:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000f27f:	75 17                	jne    c000f298 <ACPI::open(int, int, void*)+0xbc>
c000f281:	83 ec 0c             	sub    esp,0xc
c000f284:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f28b:	e8 e4 bf ff ff       	call   c000b274 <File::close()>
c000f290:	83 c4 10             	add    esp,0x10
c000f293:	eb 0b                	jmp    c000f2a0 <ACPI::open(int, int, void*)+0xc4>
c000f295:	8d 76 00             	lea    esi,[esi+0x0]
c000f298:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000f2a0:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000f2a8:	74 1e                	je     c000f2c8 <ACPI::open(int, int, void*)+0xec>
c000f2aa:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000f2b1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2b3:	83 c0 08             	add    eax,0x8
c000f2b6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2b8:	83 ec 0c             	sub    esp,0xc
c000f2bb:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f2c2:	ff d0                	call   eax
c000f2c4:	83 c4 10             	add    esp,0x10
c000f2c7:	90                   	nop
c000f2c8:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000f2cf:	83 f0 01             	xor    eax,0x1
c000f2d2:	84 c0                	test   al,al
c000f2d4:	74 42                	je     c000f318 <ACPI::open(int, int, void*)+0x13c>
c000f2d6:	83 ec 0c             	sub    esp,0xc
c000f2d9:	68 cc e4 01 c0       	push   0xc001e4cc
c000f2de:	e8 c8 8b ff ff       	call   c0007eab <Krnl::setBootMessage(char const*)>
c000f2e3:	83 c4 10             	add    esp,0x10
c000f2e6:	83 ec 04             	sub    esp,0x4
c000f2e9:	6a 0c                	push   0xc
c000f2eb:	68 e7 e4 01 c0       	push   0xc001e4e7
c000f2f0:	68 f8 e4 01 c0       	push   0xc001e4f8
c000f2f5:	e8 20 1b 00 00       	call   c0010e1a <Reg::readIntWithDefault(char*, char*, int)>
c000f2fa:	83 c4 10             	add    esp,0x10
c000f2fd:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f304:	83 ec 0c             	sub    esp,0xc
c000f307:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f30e:	e8 84 a8 ff ff       	call   c0009b97 <Virt::setupPageSwapping(int)>
c000f313:	83 c4 10             	add    esp,0x10
c000f316:	66 90                	xchg   ax,ax
c000f318:	83 ec 0c             	sub    esp,0xc
c000f31b:	68 80 d5 01 c0       	push   0xc001d580
c000f320:	e8 86 8b ff ff       	call   c0007eab <Krnl::setBootMessage(char const*)>
c000f325:	83 c4 10             	add    esp,0x10
c000f328:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f32f:	83 ec 08             	sub    esp,0x8
c000f332:	6a 12                	push   0x12
c000f334:	50                   	push   eax
c000f335:	e8 fe cf ff ff       	call   c000c338 <getDevicesOfType(DeviceType)>
c000f33a:	83 c4 0c             	add    esp,0xc
c000f33d:	8d 76 00             	lea    esi,[esi+0x0]
c000f340:	83 ec 0c             	sub    esp,0xc
c000f343:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f34a:	50                   	push   eax
c000f34b:	e8 3c d6 00 00       	call   c001c98c <LinkedList<Device>::isEmpty()>
c000f350:	83 c4 10             	add    esp,0x10
c000f353:	83 f0 01             	xor    eax,0x1
c000f356:	84 c0                	test   al,al
c000f358:	0f 84 46 01 00 00    	je     c000f4a4 <ACPI::open(int, int, void*)+0x2c8>
c000f35e:	83 ec 0c             	sub    esp,0xc
c000f361:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f368:	50                   	push   eax
c000f369:	e8 3a d6 00 00       	call   c001c9a8 <LinkedList<Device>::getFirstElement()>
c000f36e:	83 c4 10             	add    esp,0x10
c000f371:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f378:	83 ec 0c             	sub    esp,0xc
c000f37b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f382:	50                   	push   eax
c000f383:	e8 28 d6 00 00       	call   c001c9b0 <LinkedList<Device>::removeFirst()>
c000f388:	83 c4 10             	add    esp,0x10
c000f38b:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f392:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f399:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000f3a0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f3a4:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000f3aa:	ba 09 00 00 00       	mov    edx,0x9
c000f3af:	fc                   	cld    
c000f3b0:	89 c7                	mov    edi,eax
c000f3b2:	89 de                	mov    esi,ebx
c000f3b4:	89 d1                	mov    ecx,edx
c000f3b6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f3b8:	83 ec 08             	sub    esp,0x8
c000f3bb:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f3bf:	50                   	push   eax
c000f3c0:	83 ec 24             	sub    esp,0x24
c000f3c3:	89 e0                	mov    eax,esp
c000f3c5:	89 c3                	mov    ebx,eax
c000f3c7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000f3cb:	ba 09 00 00 00       	mov    edx,0x9
c000f3d0:	89 df                	mov    edi,ebx
c000f3d2:	89 c6                	mov    esi,eax
c000f3d4:	89 d1                	mov    ecx,edx
c000f3d6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f3d8:	e8 4f 96 00 00       	call   c0018a2c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f3dd:	83 c4 30             	add    esp,0x30
c000f3e0:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f3e7:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f3ef:	0f 84 4b ff ff ff    	je     c000f340 <ACPI::open(int, int, void*)+0x164>
c000f3f5:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f400:	83 ec 0c             	sub    esp,0xc
c000f403:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f40a:	e8 42 8a ff ff       	call   c0007e51 <malloc>
c000f40f:	83 c4 10             	add    esp,0x10
c000f412:	89 c3                	mov    ebx,eax
c000f414:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c000f419:	83 ec 04             	sub    esp,0x4
c000f41c:	50                   	push   eax
c000f41d:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f424:	53                   	push   ebx
c000f425:	e8 2c bd ff ff       	call   c000b156 <File::File(char const*, Process*)>
c000f42a:	83 c4 10             	add    esp,0x10
c000f42d:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f434:	83 ec 0c             	sub    esp,0xc
c000f437:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f43e:	e8 41 c0 ff ff       	call   c000b484 <File::exists()>
c000f443:	83 c4 10             	add    esp,0x10
c000f446:	84 c0                	test   al,al
c000f448:	74 2a                	je     c000f474 <ACPI::open(int, int, void*)+0x298>
c000f44a:	83 ec 08             	sub    esp,0x8
c000f44d:	6a 01                	push   0x1
c000f44f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f456:	e8 37 3c 00 00       	call   c0013092 <Thr::loadDLL(char const*, bool)>
c000f45b:	83 c4 10             	add    esp,0x10
c000f45e:	83 ec 08             	sub    esp,0x8
c000f461:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f468:	50                   	push   eax
c000f469:	e8 55 3e 00 00       	call   c00132c3 <Thr::executeDLL(unsigned long, void*)>
c000f46e:	83 c4 10             	add    esp,0x10
c000f471:	8d 76 00             	lea    esi,[esi+0x0]
c000f474:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f47c:	0f 84 be fe ff ff    	je     c000f340 <ACPI::open(int, int, void*)+0x164>
c000f482:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f489:	8b 00                	mov    eax,DWORD PTR [eax]
c000f48b:	83 c0 08             	add    eax,0x8
c000f48e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f490:	83 ec 0c             	sub    esp,0xc
c000f493:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f49a:	ff d0                	call   eax
c000f49c:	83 c4 10             	add    esp,0x10
c000f49f:	e9 9c fe ff ff       	jmp    c000f340 <ACPI::open(int, int, void*)+0x164>
c000f4a4:	83 ec 0c             	sub    esp,0xc
c000f4a7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f4ae:	50                   	push   eax
c000f4af:	e8 d4 d4 00 00       	call   c001c988 <LinkedList<Device>::~LinkedList()>
c000f4b4:	83 c4 10             	add    esp,0x10
c000f4b7:	8b 1d 38 09 02 c0    	mov    ebx,DWORD PTR ds:0xc0020938
c000f4bd:	83 ec 08             	sub    esp,0x8
c000f4c0:	6a 01                	push   0x1
c000f4c2:	68 ff e4 01 c0       	push   0xc001e4ff
c000f4c7:	e8 c6 3b 00 00       	call   c0013092 <Thr::loadDLL(char const*, bool)>
c000f4cc:	83 c4 10             	add    esp,0x10
c000f4cf:	83 ec 08             	sub    esp,0x8
c000f4d2:	53                   	push   ebx
c000f4d3:	50                   	push   eax
c000f4d4:	e8 ea 3d 00 00       	call   c00132c3 <Thr::executeDLL(unsigned long, void*)>
c000f4d9:	83 c4 10             	add    esp,0x10
c000f4dc:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000f4e1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f4e7:	83 e0 04             	and    eax,0x4
c000f4ea:	84 c0                	test   al,al
c000f4ec:	0f 84 16 01 00 00    	je     c000f608 <ACPI::open(int, int, void*)+0x42c>
c000f4f2:	83 ec 0c             	sub    esp,0xc
c000f4f5:	68 1c e5 01 c0       	push   0xc001e51c
c000f4fa:	e8 ac 89 ff ff       	call   c0007eab <Krnl::setBootMessage(char const*)>
c000f4ff:	83 c4 10             	add    esp,0x10
c000f502:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f50d:	83 ec 0c             	sub    esp,0xc
c000f510:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f517:	e8 35 89 ff ff       	call   c0007e51 <malloc>
c000f51c:	83 c4 10             	add    esp,0x10
c000f51f:	89 c3                	mov    ebx,eax
c000f521:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c000f526:	83 ec 04             	sub    esp,0x4
c000f529:	50                   	push   eax
c000f52a:	68 39 e5 01 c0       	push   0xc001e539
c000f52f:	53                   	push   ebx
c000f530:	e8 21 bc ff ff       	call   c000b156 <File::File(char const*, Process*)>
c000f535:	83 c4 10             	add    esp,0x10
c000f538:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f53f:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f547:	74 1b                	je     c000f564 <ACPI::open(int, int, void*)+0x388>
c000f549:	83 ec 0c             	sub    esp,0xc
c000f54c:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f553:	e8 2c bf ff ff       	call   c000b484 <File::exists()>
c000f558:	83 c4 10             	add    esp,0x10
c000f55b:	84 c0                	test   al,al
c000f55d:	74 05                	je     c000f564 <ACPI::open(int, int, void*)+0x388>
c000f55f:	b0 01                	mov    al,0x1
c000f561:	eb 05                	jmp    c000f568 <ACPI::open(int, int, void*)+0x38c>
c000f563:	90                   	nop
c000f564:	b0 00                	mov    al,0x0
c000f566:	66 90                	xchg   ax,ax
c000f568:	84 c0                	test   al,al
c000f56a:	74 28                	je     c000f594 <ACPI::open(int, int, void*)+0x3b8>
c000f56c:	83 ec 08             	sub    esp,0x8
c000f56f:	6a 01                	push   0x1
c000f571:	68 39 e5 01 c0       	push   0xc001e539
c000f576:	e8 17 3b 00 00       	call   c0013092 <Thr::loadDLL(char const*, bool)>
c000f57b:	83 c4 10             	add    esp,0x10
c000f57e:	83 ec 08             	sub    esp,0x8
c000f581:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f588:	50                   	push   eax
c000f589:	e8 35 3d 00 00       	call   c00132c3 <Thr::executeDLL(unsigned long, void*)>
c000f58e:	83 c4 10             	add    esp,0x10
c000f591:	8d 76 00             	lea    esi,[esi+0x0]
c000f594:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f59c:	74 2a                	je     c000f5c8 <ACPI::open(int, int, void*)+0x3ec>
c000f59e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f5a6:	74 20                	je     c000f5c8 <ACPI::open(int, int, void*)+0x3ec>
c000f5a8:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f5af:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5b1:	83 c0 08             	add    eax,0x8
c000f5b4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5b6:	83 ec 0c             	sub    esp,0xc
c000f5b9:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f5c0:	ff d0                	call   eax
c000f5c2:	83 c4 10             	add    esp,0x10
c000f5c5:	8d 76 00             	lea    esi,[esi+0x0]
c000f5c8:	a1 48 31 02 c0       	mov    eax,ds:0xc0023148
c000f5cd:	83 ec 08             	sub    esp,0x8
c000f5d0:	68 56 e5 01 c0       	push   0xc001e556
c000f5d5:	50                   	push   eax
c000f5d6:	e8 31 f2 ff ff       	call   c000e80c <findDataTable(unsigned char*, char*)>
c000f5db:	83 c4 10             	add    esp,0x10
c000f5de:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f5e5:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f5ed:	74 19                	je     c000f608 <ACPI::open(int, int, void*)+0x42c>
c000f5ef:	83 ec 08             	sub    esp,0x8
c000f5f2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f5f9:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f600:	e8 67 fb ff ff       	call   c000f16c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f605:	83 c4 10             	add    esp,0x10
c000f608:	b8 00 00 00 00       	mov    eax,0x0
c000f60d:	81 c4 70 01 00 00    	add    esp,0x170
c000f613:	5b                   	pop    ebx
c000f614:	5e                   	pop    esi
c000f615:	5f                   	pop    edi
c000f616:	c3                   	ret    
c000f617:	90                   	nop

c000f618 <CPU::close(int, int, void*)>:
c000f618:	31 c0                	xor    eax,eax
c000f61a:	c3                   	ret    
c000f61b:	90                   	nop

c000f61c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f61c:	60                   	pusha  
c000f61d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f625:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f629:	9c                   	pushf  
c000f62a:	fa                   	cli    
c000f62b:	0f 09                	wbinvd 
c000f62d:	0f 30                	wrmsr  
c000f62f:	9d                   	popf   
c000f630:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f634:	89 02                	mov    DWORD PTR [edx],eax
c000f636:	61                   	popa   
c000f637:	c3                   	ret    

c000f638 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f638:	60                   	pusha  
c000f639:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f63d:	9c                   	pushf  
c000f63e:	fa                   	cli    
c000f63f:	0f 09                	wbinvd 
c000f641:	31 c0                	xor    eax,eax
c000f643:	31 d2                	xor    edx,edx
c000f645:	0f 32                	rdmsr  
c000f647:	9d                   	popf   
c000f648:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f64c:	89 02                	mov    DWORD PTR [edx],eax
c000f64e:	61                   	popa   
c000f64f:	c3                   	ret    

c000f650 <CPU::AMD_K6_writeback(int, int, int)>:
c000f650:	56                   	push   esi
c000f651:	53                   	push   ebx
c000f652:	83 ec 10             	sub    esp,0x10
c000f655:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f659:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f65e:	75 5d                	jne    c000f6bd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f660:	83 f8 08             	cmp    eax,0x8
c000f663:	75 09                	jne    c000f66e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f665:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f66a:	7e 13                	jle    c000f67f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f66c:	eb 30                	jmp    c000f69e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f66e:	83 f8 06             	cmp    eax,0x6
c000f671:	7c 4a                	jl     c000f6bd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f673:	83 f8 07             	cmp    eax,0x7
c000f676:	7e 07                	jle    c000f67f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f678:	83 f8 09             	cmp    eax,0x9
c000f67b:	74 21                	je     c000f69e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f67d:	eb 3e                	jmp    c000f6bd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f67f:	89 e6                	mov    esi,esp
c000f681:	8b 1d 5c 09 02 c0    	mov    ebx,DWORD PTR ds:0xc002095c
c000f687:	56                   	push   esi
c000f688:	c1 eb 15             	shr    ebx,0x15
c000f68b:	68 82 00 00 c0       	push   0xc0000082
c000f690:	83 e3 7e             	and    ebx,0x7e
c000f693:	e8 a0 ff ff ff       	call   c000f638 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f698:	56                   	push   esi
c000f699:	6a 00                	push   0x0
c000f69b:	53                   	push   ebx
c000f69c:	eb 12                	jmp    c000f6b0 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f69e:	89 e3                	mov    ebx,esp
c000f6a0:	53                   	push   ebx
c000f6a1:	68 82 00 00 c0       	push   0xc0000082
c000f6a6:	e8 8d ff ff ff       	call   c000f638 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f6ab:	53                   	push   ebx
c000f6ac:	6a 00                	push   0x0
c000f6ae:	6a 00                	push   0x0
c000f6b0:	68 82 00 00 c0       	push   0xc0000082
c000f6b5:	e8 62 ff ff ff       	call   c000f61c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f6ba:	83 c4 18             	add    esp,0x18
c000f6bd:	83 c4 10             	add    esp,0x10
c000f6c0:	5b                   	pop    ebx
c000f6c1:	5e                   	pop    esi
c000f6c2:	c3                   	ret    
c000f6c3:	90                   	nop

c000f6c4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f6c4:	55                   	push   ebp
c000f6c5:	57                   	push   edi
c000f6c6:	56                   	push   esi
c000f6c7:	53                   	push   ebx
c000f6c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6cc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f6d0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f6d4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f6d8:	39 05 b0 f8 01 c0    	cmp    DWORD PTR ds:0xc001f8b0,eax
c000f6de:	75 23                	jne    c000f703 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f6e0:	a1 ac 33 02 c0       	mov    eax,ds:0xc00233ac
c000f6e5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f6e9:	89 06                	mov    DWORD PTR [esi],eax
c000f6eb:	a1 a8 33 02 c0       	mov    eax,ds:0xc00233a8
c000f6f0:	89 07                	mov    DWORD PTR [edi],eax
c000f6f2:	a1 a4 33 02 c0       	mov    eax,ds:0xc00233a4
c000f6f7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f6fa:	a1 a0 33 02 c0       	mov    eax,ds:0xc00233a0
c000f6ff:	89 02                	mov    DWORD PTR [edx],eax
c000f701:	eb 3f                	jmp    c000f742 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f703:	31 c9                	xor    ecx,ecx
c000f705:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f709:	0f a2                	cpuid  
c000f70b:	89 06                	mov    DWORD PTR [esi],eax
c000f70d:	89 1f                	mov    DWORD PTR [edi],ebx
c000f70f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f713:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f716:	89 10                	mov    DWORD PTR [eax],edx
c000f718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f71c:	a3 b0 f8 01 c0       	mov    ds:0xc001f8b0,eax
c000f721:	8b 06                	mov    eax,DWORD PTR [esi]
c000f723:	a3 ac 33 02 c0       	mov    ds:0xc00233ac,eax
c000f728:	8b 07                	mov    eax,DWORD PTR [edi]
c000f72a:	a3 a8 33 02 c0       	mov    ds:0xc00233a8,eax
c000f72f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f732:	a3 a4 33 02 c0       	mov    ds:0xc00233a4,eax
c000f737:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f73b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f73d:	a3 a0 33 02 c0       	mov    ds:0xc00233a0,eax
c000f742:	5b                   	pop    ebx
c000f743:	5e                   	pop    esi
c000f744:	5f                   	pop    edi
c000f745:	5d                   	pop    ebp
c000f746:	c3                   	ret    
c000f747:	90                   	nop

c000f748 <CPU::cpuidCheckEDX(unsigned int)>:
c000f748:	83 ec 10             	sub    esp,0x10
c000f74b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f74f:	50                   	push   eax
c000f750:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f754:	50                   	push   eax
c000f755:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f759:	50                   	push   eax
c000f75a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f75e:	50                   	push   eax
c000f75f:	6a 01                	push   0x1
c000f761:	e8 5e ff ff ff       	call   c000f6c4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f766:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f76a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f76e:	0f 95 c0             	setne  al
c000f771:	83 c4 24             	add    esp,0x24
c000f774:	c3                   	ret    
c000f775:	90                   	nop

c000f776 <CPU::cpuidCheckECX(unsigned int)>:
c000f776:	83 ec 10             	sub    esp,0x10
c000f779:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f77d:	50                   	push   eax
c000f77e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f782:	50                   	push   eax
c000f783:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f787:	50                   	push   eax
c000f788:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f78c:	50                   	push   eax
c000f78d:	6a 01                	push   0x1
c000f78f:	e8 30 ff ff ff       	call   c000f6c4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f794:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f798:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f79c:	0f 95 c0             	setne  al
c000f79f:	83 c4 24             	add    esp,0x24
c000f7a2:	c3                   	ret    
c000f7a3:	90                   	nop

c000f7a4 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f7a4:	83 ec 10             	sub    esp,0x10
c000f7a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7ab:	50                   	push   eax
c000f7ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7b0:	50                   	push   eax
c000f7b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7b5:	50                   	push   eax
c000f7b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7ba:	50                   	push   eax
c000f7bb:	6a 07                	push   0x7
c000f7bd:	e8 02 ff ff ff       	call   c000f6c4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7c6:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f7ca:	0f 95 c0             	setne  al
c000f7cd:	83 c4 24             	add    esp,0x24
c000f7d0:	c3                   	ret    
c000f7d1:	90                   	nop

c000f7d2 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f7d2:	83 ec 10             	sub    esp,0x10
c000f7d5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7d9:	50                   	push   eax
c000f7da:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7de:	50                   	push   eax
c000f7df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7e3:	50                   	push   eax
c000f7e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7e8:	50                   	push   eax
c000f7e9:	6a 07                	push   0x7
c000f7eb:	e8 d4 fe ff ff       	call   c000f6c4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7f4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f7f8:	0f 95 c0             	setne  al
c000f7fb:	83 c4 24             	add    esp,0x24
c000f7fe:	c3                   	ret    
c000f7ff:	90                   	nop

c000f800 <CPU::CPU()>:
c000f800:	83 ec 0c             	sub    esp,0xc
c000f803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f807:	83 ec 08             	sub    esp,0x8
c000f80a:	68 79 e6 01 c0       	push   0xc001e679
c000f80f:	50                   	push   eax
c000f810:	e8 a3 c9 ff ff       	call   c000c1b8 <Device::Device(char const*)>
c000f815:	83 c4 10             	add    esp,0x10
c000f818:	ba 00 e7 01 c0       	mov    edx,0xc001e700
c000f81d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f821:	89 10                	mov    DWORD PTR [eax],edx
c000f823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f827:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f835:	05 78 01 00 00       	add    eax,0x178
c000f83a:	83 ec 0c             	sub    esp,0xc
c000f83d:	50                   	push   eax
c000f83e:	e8 d3 7e ff ff       	call   c0007716 <GDT::GDT()>
c000f843:	83 c4 10             	add    esp,0x10
c000f846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f84a:	05 7c 09 00 00       	add    eax,0x97c
c000f84f:	83 ec 0c             	sub    esp,0xc
c000f852:	50                   	push   eax
c000f853:	e8 f4 80 ff ff       	call   c000794c <IDT::IDT()>
c000f858:	83 c4 10             	add    esp,0x10
c000f85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f85f:	05 7c 11 00 00       	add    eax,0x117c
c000f864:	83 ec 0c             	sub    esp,0xc
c000f867:	50                   	push   eax
c000f868:	e8 63 9a ff ff       	call   c00092d0 <TSS::TSS()>
c000f86d:	83 c4 10             	add    esp,0x10
c000f870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f874:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f87b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f87f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f889:	90                   	nop
c000f88a:	83 c4 0c             	add    esp,0xc
c000f88d:	c3                   	ret    

c000f88e <CPU::displayFeatures()>:
c000f88e:	c3                   	ret    
c000f88f:	90                   	nop

c000f890 <CPU::detectFeatures()>:
c000f890:	55                   	push   ebp
c000f891:	57                   	push   edi
c000f892:	56                   	push   esi
c000f893:	53                   	push   ebx
c000f894:	83 ec 30             	sub    esp,0x30
c000f897:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f89b:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f8a5:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f8ac:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f8b2:	6a 0d                	push   0xd
c000f8b4:	6a 00                	push   0x0
c000f8b6:	55                   	push   ebp
c000f8b7:	e8 34 0c ff ff       	call   c00004f0 <memset>
c000f8bc:	83 c4 10             	add    esp,0x10
c000f8bf:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000f8c4:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f8cb:	0f 84 d5 05 00 00    	je     c000fea6 <CPU::detectFeatures()+0x616>
c000f8d1:	83 ec 0c             	sub    esp,0xc
c000f8d4:	89 ef                	mov    edi,ebp
c000f8d6:	6a 10                	push   0x10
c000f8d8:	e8 6b fe ff ff       	call   c000f748 <CPU::cpuidCheckEDX(unsigned int)>
c000f8dd:	83 e0 01             	and    eax,0x1
c000f8e0:	8d 14 00             	lea    edx,[eax+eax*1]
c000f8e3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8e9:	83 e0 fd             	and    eax,0xfffffffd
c000f8ec:	09 d0                	or     eax,edx
c000f8ee:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8f4:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f8fb:	e8 48 fe ff ff       	call   c000f748 <CPU::cpuidCheckEDX(unsigned int)>
c000f900:	83 e0 01             	and    eax,0x1
c000f903:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f90a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f910:	83 e0 fb             	and    eax,0xfffffffb
c000f913:	09 d0                	or     eax,edx
c000f915:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f91b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f922:	e8 21 fe ff ff       	call   c000f748 <CPU::cpuidCheckEDX(unsigned int)>
c000f927:	83 e0 01             	and    eax,0x1
c000f92a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f931:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f937:	83 e0 f7             	and    eax,0xfffffff7
c000f93a:	09 d0                	or     eax,edx
c000f93c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f942:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f949:	e8 fa fd ff ff       	call   c000f748 <CPU::cpuidCheckEDX(unsigned int)>
c000f94e:	83 e0 01             	and    eax,0x1
c000f951:	c1 e0 04             	shl    eax,0x4
c000f954:	88 c2                	mov    dl,al
c000f956:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f95c:	83 e0 ef             	and    eax,0xffffffef
c000f95f:	09 d0                	or     eax,edx
c000f961:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f967:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f96e:	e8 d5 fd ff ff       	call   c000f748 <CPU::cpuidCheckEDX(unsigned int)>
c000f973:	83 e0 01             	and    eax,0x1
c000f976:	c1 e0 05             	shl    eax,0x5
c000f979:	88 c2                	mov    dl,al
c000f97b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f981:	83 e0 df             	and    eax,0xffffffdf
c000f984:	09 d0                	or     eax,edx
c000f986:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f98c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f993:	e8 b0 fd ff ff       	call   c000f748 <CPU::cpuidCheckEDX(unsigned int)>
c000f998:	83 e0 01             	and    eax,0x1
c000f99b:	8d 14 00             	lea    edx,[eax+eax*1]
c000f99e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f9a4:	83 e0 fd             	and    eax,0xfffffffd
c000f9a7:	09 d0                	or     eax,edx
c000f9a9:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f9af:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f9b6:	e8 8d fd ff ff       	call   c000f748 <CPU::cpuidCheckEDX(unsigned int)>
c000f9bb:	83 e0 01             	and    eax,0x1
c000f9be:	c1 e0 06             	shl    eax,0x6
c000f9c1:	88 c2                	mov    dl,al
c000f9c3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f9c9:	83 e0 bf             	and    eax,0xffffffbf
c000f9cc:	09 d0                	or     eax,edx
c000f9ce:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f9d4:	58                   	pop    eax
c000f9d5:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9d9:	50                   	push   eax
c000f9da:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9de:	50                   	push   eax
c000f9df:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f9e3:	56                   	push   esi
c000f9e4:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9e8:	50                   	push   eax
c000f9e9:	6a 00                	push   0x0
c000f9eb:	e8 d4 fc ff ff       	call   c000f6c4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9f0:	b8 04 00 00 00       	mov    eax,0x4
c000f9f5:	89 c1                	mov    ecx,eax
c000f9f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9f9:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f9ff:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000fa03:	89 c1                	mov    ecx,eax
c000fa05:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa07:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000fa0d:	8d 74 24 38          	lea    esi,[esp+0x38]
c000fa11:	89 c1                	mov    ecx,eax
c000fa13:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa15:	83 c4 18             	add    esp,0x18
c000fa18:	68 88 e5 01 c0       	push   0xc001e588
c000fa1d:	55                   	push   ebp
c000fa1e:	e8 dd 0c ff ff       	call   c0000700 <strcmp>
c000fa23:	83 c4 10             	add    esp,0x10
c000fa26:	85 c0                	test   eax,eax
c000fa28:	75 0f                	jne    c000fa39 <CPU::detectFeatures()+0x1a9>
c000fa2a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000fa34:	e9 22 02 00 00       	jmp    c000fc5b <CPU::detectFeatures()+0x3cb>
c000fa39:	50                   	push   eax
c000fa3a:	50                   	push   eax
c000fa3b:	68 95 e5 01 c0       	push   0xc001e595
c000fa40:	55                   	push   ebp
c000fa41:	e8 ba 0c ff ff       	call   c0000700 <strcmp>
c000fa46:	83 c4 10             	add    esp,0x10
c000fa49:	85 c0                	test   eax,eax
c000fa4b:	74 dd                	je     c000fa2a <CPU::detectFeatures()+0x19a>
c000fa4d:	50                   	push   eax
c000fa4e:	50                   	push   eax
c000fa4f:	68 a2 e5 01 c0       	push   0xc001e5a2
c000fa54:	55                   	push   ebp
c000fa55:	e8 a6 0c ff ff       	call   c0000700 <strcmp>
c000fa5a:	83 c4 10             	add    esp,0x10
c000fa5d:	85 c0                	test   eax,eax
c000fa5f:	74 2a                	je     c000fa8b <CPU::detectFeatures()+0x1fb>
c000fa61:	50                   	push   eax
c000fa62:	50                   	push   eax
c000fa63:	68 af e5 01 c0       	push   0xc001e5af
c000fa68:	55                   	push   ebp
c000fa69:	e8 92 0c ff ff       	call   c0000700 <strcmp>
c000fa6e:	83 c4 10             	add    esp,0x10
c000fa71:	85 c0                	test   eax,eax
c000fa73:	74 16                	je     c000fa8b <CPU::detectFeatures()+0x1fb>
c000fa75:	50                   	push   eax
c000fa76:	50                   	push   eax
c000fa77:	68 bc e5 01 c0       	push   0xc001e5bc
c000fa7c:	55                   	push   ebp
c000fa7d:	e8 7e 0c ff ff       	call   c0000700 <strcmp>
c000fa82:	83 c4 10             	add    esp,0x10
c000fa85:	85 c0                	test   eax,eax
c000fa87:	74 48                	je     c000fad1 <CPU::detectFeatures()+0x241>
c000fa89:	eb 0f                	jmp    c000fa9a <CPU::detectFeatures()+0x20a>
c000fa8b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fa95:	e9 c1 01 00 00       	jmp    c000fc5b <CPU::detectFeatures()+0x3cb>
c000fa9a:	50                   	push   eax
c000fa9b:	50                   	push   eax
c000fa9c:	68 c9 e5 01 c0       	push   0xc001e5c9
c000faa1:	55                   	push   ebp
c000faa2:	e8 59 0c ff ff       	call   c0000700 <strcmp>
c000faa7:	83 c4 10             	add    esp,0x10
c000faaa:	85 c0                	test   eax,eax
c000faac:	74 23                	je     c000fad1 <CPU::detectFeatures()+0x241>
c000faae:	57                   	push   edi
c000faaf:	57                   	push   edi
c000fab0:	68 d6 e5 01 c0       	push   0xc001e5d6
c000fab5:	55                   	push   ebp
c000fab6:	e8 45 0c ff ff       	call   c0000700 <strcmp>
c000fabb:	83 c4 10             	add    esp,0x10
c000fabe:	85 c0                	test   eax,eax
c000fac0:	75 1e                	jne    c000fae0 <CPU::detectFeatures()+0x250>
c000fac2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000facc:	e9 8a 01 00 00       	jmp    c000fc5b <CPU::detectFeatures()+0x3cb>
c000fad1:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fadb:	e9 7b 01 00 00       	jmp    c000fc5b <CPU::detectFeatures()+0x3cb>
c000fae0:	56                   	push   esi
c000fae1:	56                   	push   esi
c000fae2:	68 e3 e5 01 c0       	push   0xc001e5e3
c000fae7:	55                   	push   ebp
c000fae8:	e8 13 0c ff ff       	call   c0000700 <strcmp>
c000faed:	83 c4 10             	add    esp,0x10
c000faf0:	85 c0                	test   eax,eax
c000faf2:	75 0f                	jne    c000fb03 <CPU::detectFeatures()+0x273>
c000faf4:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fafe:	e9 58 01 00 00       	jmp    c000fc5b <CPU::detectFeatures()+0x3cb>
c000fb03:	51                   	push   ecx
c000fb04:	51                   	push   ecx
c000fb05:	68 a2 e5 01 c0       	push   0xc001e5a2
c000fb0a:	55                   	push   ebp
c000fb0b:	e8 f0 0b ff ff       	call   c0000700 <strcmp>
c000fb10:	83 c4 10             	add    esp,0x10
c000fb13:	85 c0                	test   eax,eax
c000fb15:	75 0f                	jne    c000fb26 <CPU::detectFeatures()+0x296>
c000fb17:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fb21:	e9 35 01 00 00       	jmp    c000fc5b <CPU::detectFeatures()+0x3cb>
c000fb26:	52                   	push   edx
c000fb27:	52                   	push   edx
c000fb28:	68 f0 e5 01 c0       	push   0xc001e5f0
c000fb2d:	55                   	push   ebp
c000fb2e:	e8 cd 0b ff ff       	call   c0000700 <strcmp>
c000fb33:	83 c4 10             	add    esp,0x10
c000fb36:	85 c0                	test   eax,eax
c000fb38:	75 0f                	jne    c000fb49 <CPU::detectFeatures()+0x2b9>
c000fb3a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fb44:	e9 12 01 00 00       	jmp    c000fc5b <CPU::detectFeatures()+0x3cb>
c000fb49:	50                   	push   eax
c000fb4a:	50                   	push   eax
c000fb4b:	68 fd e5 01 c0       	push   0xc001e5fd
c000fb50:	55                   	push   ebp
c000fb51:	e8 aa 0b ff ff       	call   c0000700 <strcmp>
c000fb56:	83 c4 10             	add    esp,0x10
c000fb59:	85 c0                	test   eax,eax
c000fb5b:	75 0f                	jne    c000fb6c <CPU::detectFeatures()+0x2dc>
c000fb5d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fb67:	e9 ef 00 00 00       	jmp    c000fc5b <CPU::detectFeatures()+0x3cb>
c000fb6c:	50                   	push   eax
c000fb6d:	50                   	push   eax
c000fb6e:	68 0a e6 01 c0       	push   0xc001e60a
c000fb73:	55                   	push   ebp
c000fb74:	e8 87 0b ff ff       	call   c0000700 <strcmp>
c000fb79:	83 c4 10             	add    esp,0x10
c000fb7c:	85 c0                	test   eax,eax
c000fb7e:	75 0f                	jne    c000fb8f <CPU::detectFeatures()+0x2ff>
c000fb80:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fb8a:	e9 cc 00 00 00       	jmp    c000fc5b <CPU::detectFeatures()+0x3cb>
c000fb8f:	50                   	push   eax
c000fb90:	50                   	push   eax
c000fb91:	68 17 e6 01 c0       	push   0xc001e617
c000fb96:	55                   	push   ebp
c000fb97:	e8 64 0b ff ff       	call   c0000700 <strcmp>
c000fb9c:	83 c4 10             	add    esp,0x10
c000fb9f:	85 c0                	test   eax,eax
c000fba1:	75 0f                	jne    c000fbb2 <CPU::detectFeatures()+0x322>
c000fba3:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fbad:	e9 a9 00 00 00       	jmp    c000fc5b <CPU::detectFeatures()+0x3cb>
c000fbb2:	50                   	push   eax
c000fbb3:	50                   	push   eax
c000fbb4:	68 24 e6 01 c0       	push   0xc001e624
c000fbb9:	55                   	push   ebp
c000fbba:	e8 41 0b ff ff       	call   c0000700 <strcmp>
c000fbbf:	83 c4 10             	add    esp,0x10
c000fbc2:	85 c0                	test   eax,eax
c000fbc4:	75 0f                	jne    c000fbd5 <CPU::detectFeatures()+0x345>
c000fbc6:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fbd0:	e9 86 00 00 00       	jmp    c000fc5b <CPU::detectFeatures()+0x3cb>
c000fbd5:	50                   	push   eax
c000fbd6:	50                   	push   eax
c000fbd7:	68 31 e6 01 c0       	push   0xc001e631
c000fbdc:	55                   	push   ebp
c000fbdd:	e8 1e 0b ff ff       	call   c0000700 <strcmp>
c000fbe2:	83 c4 10             	add    esp,0x10
c000fbe5:	85 c0                	test   eax,eax
c000fbe7:	75 0c                	jne    c000fbf5 <CPU::detectFeatures()+0x365>
c000fbe9:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fbf3:	eb 66                	jmp    c000fc5b <CPU::detectFeatures()+0x3cb>
c000fbf5:	50                   	push   eax
c000fbf6:	50                   	push   eax
c000fbf7:	68 3e e6 01 c0       	push   0xc001e63e
c000fbfc:	55                   	push   ebp
c000fbfd:	e8 fe 0a ff ff       	call   c0000700 <strcmp>
c000fc02:	83 c4 10             	add    esp,0x10
c000fc05:	85 c0                	test   eax,eax
c000fc07:	75 0c                	jne    c000fc15 <CPU::detectFeatures()+0x385>
c000fc09:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fc13:	eb 46                	jmp    c000fc5b <CPU::detectFeatures()+0x3cb>
c000fc15:	57                   	push   edi
c000fc16:	57                   	push   edi
c000fc17:	68 4b e6 01 c0       	push   0xc001e64b
c000fc1c:	55                   	push   ebp
c000fc1d:	e8 de 0a ff ff       	call   c0000700 <strcmp>
c000fc22:	83 c4 10             	add    esp,0x10
c000fc25:	85 c0                	test   eax,eax
c000fc27:	74 e0                	je     c000fc09 <CPU::detectFeatures()+0x379>
c000fc29:	56                   	push   esi
c000fc2a:	56                   	push   esi
c000fc2b:	68 58 e6 01 c0       	push   0xc001e658
c000fc30:	55                   	push   ebp
c000fc31:	e8 ca 0a ff ff       	call   c0000700 <strcmp>
c000fc36:	83 c4 10             	add    esp,0x10
c000fc39:	85 c0                	test   eax,eax
c000fc3b:	74 cc                	je     c000fc09 <CPU::detectFeatures()+0x379>
c000fc3d:	51                   	push   ecx
c000fc3e:	51                   	push   ecx
c000fc3f:	68 65 e6 01 c0       	push   0xc001e665
c000fc44:	55                   	push   ebp
c000fc45:	e8 b6 0a ff ff       	call   c0000700 <strcmp>
c000fc4a:	83 c4 10             	add    esp,0x10
c000fc4d:	85 c0                	test   eax,eax
c000fc4f:	74 b8                	je     c000fc09 <CPU::detectFeatures()+0x379>
c000fc51:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fc5b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fc60:	0f 86 be 00 00 00    	jbe    c000fd24 <CPU::detectFeatures()+0x494>
c000fc66:	83 ec 0c             	sub    esp,0xc
c000fc69:	68 80 00 00 00       	push   0x80
c000fc6e:	e8 31 fb ff ff       	call   c000f7a4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc73:	83 e0 01             	and    eax,0x1
c000fc76:	c1 e0 06             	shl    eax,0x6
c000fc79:	88 c2                	mov    dl,al
c000fc7b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc81:	83 e0 bf             	and    eax,0xffffffbf
c000fc84:	09 d0                	or     eax,edx
c000fc86:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc8c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fc93:	e8 0c fb ff ff       	call   c000f7a4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc98:	83 e0 01             	and    eax,0x1
c000fc9b:	c1 e0 04             	shl    eax,0x4
c000fc9e:	88 c2                	mov    dl,al
c000fca0:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fca6:	83 e0 ef             	and    eax,0xffffffef
c000fca9:	09 d0                	or     eax,edx
c000fcab:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fcb1:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fcb8:	e8 e7 fa ff ff       	call   c000f7a4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fcbd:	c1 e0 07             	shl    eax,0x7
c000fcc0:	88 c2                	mov    dl,al
c000fcc2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fcc8:	83 e0 7f             	and    eax,0x7f
c000fccb:	09 d0                	or     eax,edx
c000fccd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fcd3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fcda:	e8 f3 fa ff ff       	call   c000f7d2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fcdf:	83 e0 01             	and    eax,0x1
c000fce2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fce9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fcef:	83 e0 f7             	and    eax,0xfffffff7
c000fcf2:	09 d0                	or     eax,edx
c000fcf4:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fcfa:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fd01:	e8 cc fa ff ff       	call   c000f7d2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fd06:	83 c4 10             	add    esp,0x10
c000fd09:	83 e0 01             	and    eax,0x1
c000fd0c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fd13:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fd19:	83 e0 fb             	and    eax,0xfffffffb
c000fd1c:	09 d0                	or     eax,edx
c000fd1e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fd24:	83 ec 0c             	sub    esp,0xc
c000fd27:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd2b:	50                   	push   eax
c000fd2c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd30:	50                   	push   eax
c000fd31:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fd35:	56                   	push   esi
c000fd36:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd3a:	50                   	push   eax
c000fd3b:	6a 01                	push   0x1
c000fd3d:	e8 82 f9 ff ff       	call   c000f6c4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fd42:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fd46:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000fd4c:	88 ca                	mov    dl,cl
c000fd4e:	83 e0 f0             	and    eax,0xfffffff0
c000fd51:	83 e2 0f             	and    edx,0xf
c000fd54:	09 d0                	or     eax,edx
c000fd56:	88 ca                	mov    dl,cl
c000fd58:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000fd5e:	c0 ea 04             	shr    dl,0x4
c000fd61:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000fd65:	0f b6 c2             	movzx  eax,dl
c000fd68:	83 c4 20             	add    esp,0x20
c000fd6b:	c1 e0 06             	shl    eax,0x6
c000fd6e:	89 c7                	mov    edi,eax
c000fd70:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000fd76:	66 25 3f c0          	and    ax,0xc03f
c000fd7a:	09 f8                	or     eax,edi
c000fd7c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000fd83:	89 c8                	mov    eax,ecx
c000fd85:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000fd8c:	c1 e8 08             	shr    eax,0x8
c000fd8f:	83 e5 3f             	and    ebp,0x3f
c000fd92:	83 e0 0f             	and    eax,0xf
c000fd95:	89 c7                	mov    edi,eax
c000fd97:	c1 e7 06             	shl    edi,0x6
c000fd9a:	09 ef                	or     edi,ebp
c000fd9c:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000fda3:	89 fa                	mov    edx,edi
c000fda5:	83 e5 c0             	and    ebp,0xffffffc0
c000fda8:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fdae:	88 c2                	mov    dl,al
c000fdb0:	c0 ea 02             	shr    dl,0x2
c000fdb3:	89 d7                	mov    edi,edx
c000fdb5:	09 ef                	or     edi,ebp
c000fdb7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fdbd:	89 fa                	mov    edx,edi
c000fdbf:	83 e5 cf             	and    ebp,0xffffffcf
c000fdc2:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000fdc8:	89 cf                	mov    edi,ecx
c000fdca:	c1 ef 0c             	shr    edi,0xc
c000fdcd:	83 e7 03             	and    edi,0x3
c000fdd0:	c1 e7 04             	shl    edi,0x4
c000fdd3:	09 ef                	or     edi,ebp
c000fdd5:	3c 06                	cmp    al,0x6
c000fdd7:	89 fa                	mov    edx,edi
c000fdd9:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fddf:	74 04                	je     c000fde5 <CPU::detectFeatures()+0x555>
c000fde1:	3c 0f                	cmp    al,0xf
c000fde3:	75 5c                	jne    c000fe41 <CPU::detectFeatures()+0x5b1>
c000fde5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000fde9:	89 cf                	mov    edi,ecx
c000fdeb:	c1 ef 10             	shr    edi,0x10
c000fdee:	c1 e7 04             	shl    edi,0x4
c000fdf1:	09 fa                	or     edx,edi
c000fdf3:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000fdf9:	0f b6 d2             	movzx  edx,dl
c000fdfc:	66 81 e7 3f c0       	and    di,0xc03f
c000fe01:	c1 e2 06             	shl    edx,0x6
c000fe04:	09 fa                	or     edx,edi
c000fe06:	3c 0f                	cmp    al,0xf
c000fe08:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fe0f:	75 30                	jne    c000fe41 <CPU::detectFeatures()+0x5b1>
c000fe11:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000fe17:	c1 e9 14             	shr    ecx,0x14
c000fe1a:	83 e0 3f             	and    eax,0x3f
c000fe1d:	83 c1 0f             	add    ecx,0xf
c000fe20:	88 ca                	mov    dl,cl
c000fe22:	c0 e9 02             	shr    cl,0x2
c000fe25:	c1 e2 06             	shl    edx,0x6
c000fe28:	09 d0                	or     eax,edx
c000fe2a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000fe30:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000fe36:	83 e0 c0             	and    eax,0xffffffc0
c000fe39:	09 c1                	or     ecx,eax
c000fe3b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fe41:	83 ec 0c             	sub    esp,0xc
c000fe44:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000fe4b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fe4f:	50                   	push   eax
c000fe50:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fe54:	55                   	push   ebp
c000fe55:	56                   	push   esi
c000fe56:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fe5a:	57                   	push   edi
c000fe5b:	68 00 00 00 80       	push   0x80000000
c000fe60:	e8 5f f8 ff ff       	call   c000f6c4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe65:	83 c4 20             	add    esp,0x20
c000fe68:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fe70:	76 22                	jbe    c000fe94 <CPU::detectFeatures()+0x604>
c000fe72:	83 ec 0c             	sub    esp,0xc
c000fe75:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fe79:	50                   	push   eax
c000fe7a:	55                   	push   ebp
c000fe7b:	56                   	push   esi
c000fe7c:	57                   	push   edi
c000fe7d:	68 01 00 00 80       	push   0x80000001
c000fe82:	e8 3d f8 ff ff       	call   c000f6c4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe87:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fe91:	83 c4 20             	add    esp,0x20
c000fe94:	52                   	push   edx
c000fe95:	52                   	push   edx
c000fe96:	68 71 e6 01 c0       	push   0xc001e671
c000fe9b:	53                   	push   ebx
c000fe9c:	e8 09 c3 ff ff       	call   c000c1aa <Device::setName(char const*)>
c000fea1:	83 c4 10             	add    esp,0x10
c000fea4:	eb 67                	jmp    c000ff0d <CPU::detectFeatures()+0x67d>
c000fea6:	50                   	push   eax
c000fea7:	50                   	push   eax
c000fea8:	68 d6 e5 01 c0       	push   0xc001e5d6
c000fead:	55                   	push   ebp
c000feae:	e8 6d 07 ff ff       	call   c0000620 <strcpy>
c000feb3:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000febd:	e8 21 03 ff ff       	call   c00001e3 <is486>
c000fec2:	83 c4 10             	add    esp,0x10
c000fec5:	85 c0                	test   eax,eax
c000fec7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fecd:	74 1d                	je     c000feec <CPU::detectFeatures()+0x65c>
c000fecf:	83 c8 07             	or     eax,0x7
c000fed2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fed8:	0f 20 c0             	mov    eax,cr0
c000fedb:	83 e0 14             	and    eax,0x14
c000fede:	83 f8 04             	cmp    eax,0x4
c000fee1:	75 0e                	jne    c000fef1 <CPU::detectFeatures()+0x661>
c000fee3:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000feea:	eb 21                	jmp    c000ff0d <CPU::detectFeatures()+0x67d>
c000feec:	83 e0 f8             	and    eax,0xfffffff8
c000feef:	eb e1                	jmp    c000fed2 <CPU::detectFeatures()+0x642>
c000fef1:	e8 c8 02 ff ff       	call   c00001be <hasLegacyFPU>
c000fef6:	83 e0 01             	and    eax,0x1
c000fef9:	8d 14 00             	lea    edx,[eax+eax*1]
c000fefc:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff02:	83 e0 fd             	and    eax,0xfffffffd
c000ff05:	09 d0                	or     eax,edx
c000ff07:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ff0d:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000ff14:	74 0e                	je     c000ff24 <CPU::detectFeatures()+0x694>
c000ff16:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000ff1b:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000ff22:	eb 20                	jmp    c000ff44 <CPU::detectFeatures()+0x6b4>
c000ff24:	e8 95 02 ff ff       	call   c00001be <hasLegacyFPU>
c000ff29:	83 e0 01             	and    eax,0x1
c000ff2c:	8d 14 00             	lea    edx,[eax+eax*1]
c000ff2f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff35:	83 e0 fd             	and    eax,0xfffffffd
c000ff38:	09 d0                	or     eax,edx
c000ff3a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ff40:	a8 02                	test   al,0x2
c000ff42:	75 d2                	jne    c000ff16 <CPU::detectFeatures()+0x686>
c000ff44:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000ff4b:	83 c4 2c             	add    esp,0x2c
c000ff4e:	5b                   	pop    ebx
c000ff4f:	5e                   	pop    esi
c000ff50:	5f                   	pop    edi
c000ff51:	5d                   	pop    ebp
c000ff52:	c3                   	ret    
c000ff53:	90                   	nop

c000ff54 <CPU::setupSMEP()>:
c000ff54:	0f 20 e0             	mov    eax,cr4
c000ff57:	0d 00 00 10 00       	or     eax,0x100000
c000ff5c:	0f 22 e0             	mov    cr4,eax
c000ff5f:	c3                   	ret    

c000ff60 <CPU::setupUMIP()>:
c000ff60:	0f 20 e0             	mov    eax,cr4
c000ff63:	80 cc 08             	or     ah,0x8
c000ff66:	0f 22 e0             	mov    cr4,eax
c000ff69:	c3                   	ret    

c000ff6a <CPU::setupTSC()>:
c000ff6a:	0f 20 e0             	mov    eax,cr4
c000ff6d:	83 c8 04             	or     eax,0x4
c000ff70:	0f 22 e0             	mov    cr4,eax
c000ff73:	c3                   	ret    

c000ff74 <CPU::setupLargePages()>:
c000ff74:	0f 20 e0             	mov    eax,cr4
c000ff77:	83 c8 10             	or     eax,0x10
c000ff7a:	0f 22 e0             	mov    cr4,eax
c000ff7d:	c3                   	ret    

c000ff7e <CPU::setupPAT()>:
c000ff7e:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c000ff83:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ff8a:	74 2c                	je     c000ffb8 <CPU::setupPAT()+0x3a>
c000ff8c:	53                   	push   ebx
c000ff8d:	83 ec 10             	sub    esp,0x10
c000ff90:	68 77 02 00 00       	push   0x277
c000ff95:	50                   	push   eax
c000ff96:	e8 f3 74 ff ff       	call   c000748e <Computer::rdmsr(unsigned int)>
c000ff9b:	83 e2 f8             	and    edx,0xfffffff8
c000ff9e:	83 ca 01             	or     edx,0x1
c000ffa1:	52                   	push   edx
c000ffa2:	50                   	push   eax
c000ffa3:	68 77 02 00 00       	push   0x277
c000ffa8:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c000ffae:	e8 07 75 ff ff       	call   c00074ba <Computer::wrmsr(unsigned int, unsigned long long)>
c000ffb3:	83 c4 28             	add    esp,0x28
c000ffb6:	5b                   	pop    ebx
c000ffb7:	c3                   	ret    
c000ffb8:	c3                   	ret    
c000ffb9:	90                   	nop

c000ffba <CPU::setupMTRR()>:
c000ffba:	c3                   	ret    
c000ffbb:	90                   	nop

c000ffbc <CPU::setupGlobalPages()>:
c000ffbc:	0f 20 e0             	mov    eax,cr4
c000ffbf:	0c 80                	or     al,0x80
c000ffc1:	0f 22 e0             	mov    cr4,eax
c000ffc4:	c3                   	ret    
c000ffc5:	90                   	nop

c000ffc6 <CPU::allowUsermodeDataAccess()>:
c000ffc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffca:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ffd1:	74 03                	je     c000ffd6 <CPU::allowUsermodeDataAccess()+0x10>
c000ffd3:	0f 01 cb             	stac   
c000ffd6:	c3                   	ret    
c000ffd7:	90                   	nop

c000ffd8 <CPU::prohibitUsermodeDataAccess()>:
c000ffd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffdc:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ffe3:	74 03                	je     c000ffe8 <CPU::prohibitUsermodeDataAccess()+0x10>
c000ffe5:	0f 01 ca             	clac   
c000ffe8:	c3                   	ret    
c000ffe9:	90                   	nop

c000ffea <CPU::setupSMAP()>:
c000ffea:	0f 20 e0             	mov    eax,cr4
c000ffed:	0d 00 00 20 00       	or     eax,0x200000
c000fff2:	0f 22 e0             	mov    cr4,eax
c000fff5:	eb e1                	jmp    c000ffd8 <CPU::prohibitUsermodeDataAccess()>
c000fff7:	90                   	nop

c000fff8 <CPU::setupFeatures()>:
c000fff8:	53                   	push   ebx
c000fff9:	83 ec 08             	sub    esp,0x8
c000fffc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010000:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010007:	74 18                	je     c0010021 <CPU::setupFeatures()+0x29>
c0010009:	83 ec 0c             	sub    esp,0xc
c001000c:	68 7d e6 01 c0       	push   0xc001e67d
c0010011:	e8 ca ab ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0010016:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010019:	e8 42 ff ff ff       	call   c000ff60 <CPU::setupUMIP()>
c001001e:	83 c4 10             	add    esp,0x10
c0010021:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010028:	74 18                	je     c0010042 <CPU::setupFeatures()+0x4a>
c001002a:	83 ec 0c             	sub    esp,0xc
c001002d:	68 87 e6 01 c0       	push   0xc001e687
c0010032:	e8 a9 ab ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0010037:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001003a:	e8 2b ff ff ff       	call   c000ff6a <CPU::setupTSC()>
c001003f:	83 c4 10             	add    esp,0x10
c0010042:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010049:	74 18                	je     c0010063 <CPU::setupFeatures()+0x6b>
c001004b:	83 ec 0c             	sub    esp,0xc
c001004e:	68 90 e6 01 c0       	push   0xc001e690
c0010053:	e8 88 ab ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0010058:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001005b:	e8 14 ff ff ff       	call   c000ff74 <CPU::setupLargePages()>
c0010060:	83 c4 10             	add    esp,0x10
c0010063:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001006a:	74 18                	je     c0010084 <CPU::setupFeatures()+0x8c>
c001006c:	83 ec 0c             	sub    esp,0xc
c001006f:	68 99 e6 01 c0       	push   0xc001e699
c0010074:	e8 67 ab ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0010079:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001007c:	e8 3b ff ff ff       	call   c000ffbc <CPU::setupGlobalPages()>
c0010081:	83 c4 10             	add    esp,0x10
c0010084:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001008b:	74 18                	je     c00100a5 <CPU::setupFeatures()+0xad>
c001008d:	83 ec 0c             	sub    esp,0xc
c0010090:	68 ab e6 01 c0       	push   0xc001e6ab
c0010095:	e8 46 ab ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c001009a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001009d:	e8 dc fe ff ff       	call   c000ff7e <CPU::setupPAT()>
c00100a2:	83 c4 10             	add    esp,0x10
c00100a5:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c00100ac:	74 11                	je     c00100bf <CPU::setupFeatures()+0xc7>
c00100ae:	c7 44 24 10 b4 e6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e6b4
c00100b6:	83 c4 08             	add    esp,0x8
c00100b9:	5b                   	pop    ebx
c00100ba:	e9 21 ab ff ff       	jmp    c000abe0 <Dbg::kprintf(char const*, ...)>
c00100bf:	83 c4 08             	add    esp,0x8
c00100c2:	5b                   	pop    ebx
c00100c3:	c3                   	ret    

c00100c4 <CPU::open(int, int, void*)>:
c00100c4:	57                   	push   edi
c00100c5:	56                   	push   esi
c00100c6:	53                   	push   ebx
c00100c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00100cf:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00100d5:	83 ec 0c             	sub    esp,0xc
c00100d8:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00100de:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00100e4:	50                   	push   eax
c00100e5:	e8 8e 76 ff ff       	call   c0007778 <GDT::setup()>
c00100ea:	83 c4 0c             	add    esp,0xc
c00100ed:	6a 00                	push   0x0
c00100ef:	68 ef be ad de       	push   0xdeadbeef
c00100f4:	57                   	push   edi
c00100f5:	e8 1a 92 ff ff       	call   c0009314 <TSS::setup(unsigned long, unsigned long)>
c00100fa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00100fd:	e8 f2 91 ff ff       	call   c00092f4 <TSS::flush()>
c0010102:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010108:	89 04 24             	mov    DWORD PTR [esp],eax
c001010b:	e8 b2 78 ff ff       	call   c00079c2 <IDT::setup()>
c0010110:	b8 00 04 00 00       	mov    eax,0x400
c0010115:	0f 23 f8             	mov    db7,eax
c0010118:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010122:	e8 f7 80 ff ff       	call   c000821e <Phys::allocatePage()>
c0010127:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001012d:	89 30                	mov    DWORD PTR [eax],esi
c001012f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010135:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010138:	58                   	pop    eax
c0010139:	5a                   	pop    edx
c001013a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010140:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010144:	e8 b5 a1 ff ff       	call   c000a2fe <VAS::setCPUSpecific(unsigned long)>
c0010149:	c7 04 24 be e6 01 c0 	mov    DWORD PTR [esp],0xc001e6be
c0010150:	e8 56 7d ff ff       	call   c0007eab <Krnl::setBootMessage(char const*)>
c0010155:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010158:	e8 33 f7 ff ff       	call   c000f890 <CPU::detectFeatures()>
c001015d:	c7 04 24 e1 e6 01 c0 	mov    DWORD PTR [esp],0xc001e6e1
c0010164:	e8 42 7d ff ff       	call   c0007eab <Krnl::setBootMessage(char const*)>
c0010169:	e8 b8 56 00 00       	call   c0015826 <HalInitialise()>
c001016e:	a1 50 09 02 c0       	mov    eax,ds:0xc0020950
c0010173:	83 e0 10             	and    eax,0x10
c0010176:	83 f8 01             	cmp    eax,0x1
c0010179:	19 c0                	sbb    eax,eax
c001017b:	83 e0 46             	and    eax,0x46
c001017e:	83 c0 1e             	add    eax,0x1e
c0010181:	89 04 24             	mov    DWORD PTR [esp],eax
c0010184:	e8 f0 d6 ff ff       	call   c000d879 <setupTimer(int)>
c0010189:	83 c4 10             	add    esp,0x10
c001018c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010192:	f6 05 50 09 02 c0 20 	test   BYTE PTR ds:0xc0020950,0x20
c0010199:	74 0c                	je     c00101a7 <CPU::open(int, int, void*)+0xe3>
c001019b:	83 ec 0c             	sub    esp,0xc
c001019e:	53                   	push   ebx
c001019f:	e8 54 fe ff ff       	call   c000fff8 <CPU::setupFeatures()>
c00101a4:	83 c4 10             	add    esp,0x10
c00101a7:	5b                   	pop    ebx
c00101a8:	31 c0                	xor    eax,eax
c00101aa:	5e                   	pop    esi
c00101ab:	5f                   	pop    edi
c00101ac:	c3                   	ret    
c00101ad:	90                   	nop

c00101ae <EnvVarContainer::getEnv(char const*)>:
c00101ae:	57                   	push   edi
c00101af:	56                   	push   esi
c00101b0:	53                   	push   ebx
c00101b1:	31 db                	xor    ebx,ebx
c00101b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101b7:	39 1e                	cmp    DWORD PTR [esi],ebx
c00101b9:	7e 2b                	jle    c00101e6 <EnvVarContainer::getEnv(char const*)+0x38>
c00101bb:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00101c2:	50                   	push   eax
c00101c3:	50                   	push   eax
c00101c4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00101c7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00101ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00101ce:	e8 2d 05 ff ff       	call   c0000700 <strcmp>
c00101d3:	83 c4 10             	add    esp,0x10
c00101d6:	85 c0                	test   eax,eax
c00101d8:	75 09                	jne    c00101e3 <EnvVarContainer::getEnv(char const*)+0x35>
c00101da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00101dd:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00101e1:	eb 05                	jmp    c00101e8 <EnvVarContainer::getEnv(char const*)+0x3a>
c00101e3:	43                   	inc    ebx
c00101e4:	eb d1                	jmp    c00101b7 <EnvVarContainer::getEnv(char const*)+0x9>
c00101e6:	31 c0                	xor    eax,eax
c00101e8:	5b                   	pop    ebx
c00101e9:	5e                   	pop    esi
c00101ea:	5f                   	pop    edi
c00101eb:	c3                   	ret    

c00101ec <EnvVarContainer::setEnv(char const*, char const*)>:
c00101ec:	55                   	push   ebp
c00101ed:	57                   	push   edi
c00101ee:	56                   	push   esi
c00101ef:	53                   	push   ebx
c00101f0:	83 ec 28             	sub    esp,0x28
c00101f3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00101f7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00101fb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00101ff:	56                   	push   esi
c0010200:	e8 5b 03 ff ff       	call   c0000560 <strlen>
c0010205:	40                   	inc    eax
c0010206:	89 04 24             	mov    DWORD PTR [esp],eax
c0010209:	e8 43 7c ff ff       	call   c0007e51 <malloc>
c001020e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010211:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010215:	e8 46 03 ff ff       	call   c0000560 <strlen>
c001021a:	40                   	inc    eax
c001021b:	89 04 24             	mov    DWORD PTR [esp],eax
c001021e:	e8 2e 7c ff ff       	call   c0007e51 <malloc>
c0010223:	89 34 24             	mov    DWORD PTR [esp],esi
c0010226:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001022a:	e8 31 03 ff ff       	call   c0000560 <strlen>
c001022f:	83 c4 0c             	add    esp,0xc
c0010232:	40                   	inc    eax
c0010233:	50                   	push   eax
c0010234:	6a 00                	push   0x0
c0010236:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001023a:	e8 b1 02 ff ff       	call   c00004f0 <memset>
c001023f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010242:	e8 19 03 ff ff       	call   c0000560 <strlen>
c0010247:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001024b:	8d 48 01             	lea    ecx,[eax+0x1]
c001024e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010250:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010253:	89 de                	mov    esi,ebx
c0010255:	e8 06 03 ff ff       	call   c0000560 <strlen>
c001025a:	83 c4 0c             	add    esp,0xc
c001025d:	40                   	inc    eax
c001025e:	50                   	push   eax
c001025f:	6a 00                	push   0x0
c0010261:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010265:	e8 86 02 ff ff       	call   c00004f0 <memset>
c001026a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001026d:	e8 ee 02 ff ff       	call   c0000560 <strlen>
c0010272:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010276:	8d 48 01             	lea    ecx,[eax+0x1]
c0010279:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001027b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001027e:	40                   	inc    eax
c001027f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010282:	c1 e0 03             	shl    eax,0x3
c0010285:	5a                   	pop    edx
c0010286:	59                   	pop    ecx
c0010287:	50                   	push   eax
c0010288:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001028b:	e8 ad 7b ff ff       	call   c0007e3d <realloc>
c0010290:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010294:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010297:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001029a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001029e:	b9 08 00 00 00       	mov    ecx,0x8
c00102a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102a5:	83 c4 2c             	add    esp,0x2c
c00102a8:	5b                   	pop    ebx
c00102a9:	5e                   	pop    esi
c00102aa:	5f                   	pop    edi
c00102ab:	5d                   	pop    ebp
c00102ac:	c3                   	ret    
c00102ad:	90                   	nop

c00102ae <EnvVarContainer::deleteEnv(char const*)>:
c00102ae:	c3                   	ret    
c00102af:	90                   	nop

c00102b0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00102b0:	55                   	push   ebp
c00102b1:	57                   	push   edi
c00102b2:	56                   	push   esi
c00102b3:	53                   	push   ebx
c00102b4:	81 ec 38 01 00 00    	sub    esp,0x138
c00102ba:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00102c1:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00102c8:	68 14 01 00 00       	push   0x114
c00102cd:	e8 7f 7b ff ff       	call   c0007e51 <malloc>
c00102d2:	83 c4 0c             	add    esp,0xc
c00102d5:	89 c3                	mov    ebx,eax
c00102d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00102da:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00102e1:	50                   	push   eax
c00102e2:	e8 6f ae ff ff       	call   c000b156 <File::File(char const*, Process*)>
c00102e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102ea:	e8 95 b1 ff ff       	call   c000b484 <File::exists()>
c00102ef:	83 c4 10             	add    esp,0x10
c00102f2:	84 c0                	test   al,al
c00102f4:	75 31                	jne    c0010327 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00102f6:	50                   	push   eax
c00102f7:	50                   	push   eax
c00102f8:	6a 12                	push   0x12
c00102fa:	53                   	push   ebx
c00102fb:	e8 16 af ff ff       	call   c000b216 <File::open(FileOpenMode)>
c0010300:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010302:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010305:	89 34 24             	mov    DWORD PTR [esp],esi
c0010308:	e8 53 02 ff ff       	call   c0000560 <strlen>
c001030d:	5a                   	pop    edx
c001030e:	31 d2                	xor    edx,edx
c0010310:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010314:	51                   	push   ecx
c0010315:	56                   	push   esi
c0010316:	52                   	push   edx
c0010317:	50                   	push   eax
c0010318:	53                   	push   ebx
c0010319:	ff d7                	call   edi
c001031b:	83 c4 14             	add    esp,0x14
c001031e:	53                   	push   ebx
c001031f:	e8 50 af ff ff       	call   c000b274 <File::close()>
c0010324:	83 c4 10             	add    esp,0x10
c0010327:	56                   	push   esi
c0010328:	31 f6                	xor    esi,esi
c001032a:	68 00 01 00 00       	push   0x100
c001032f:	6a 00                	push   0x0
c0010331:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010335:	50                   	push   eax
c0010336:	e8 b5 01 ff ff       	call   c00004f0 <memset>
c001033b:	5f                   	pop    edi
c001033c:	58                   	pop    eax
c001033d:	6a 01                	push   0x1
c001033f:	53                   	push   ebx
c0010340:	e8 d1 ae ff ff       	call   c000b216 <File::open(FileOpenMode)>
c0010345:	83 c4 10             	add    esp,0x10
c0010348:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010350:	83 ec 0c             	sub    esp,0xc
c0010353:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010355:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010359:	51                   	push   ecx
c001035a:	8d 54 24 23          	lea    edx,[esp+0x23]
c001035e:	52                   	push   edx
c001035f:	6a 00                	push   0x0
c0010361:	6a 01                	push   0x1
c0010363:	53                   	push   ebx
c0010364:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010367:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001036b:	83 c4 20             	add    esp,0x20
c001036e:	3c 0d                	cmp    al,0xd
c0010370:	0f 84 09 01 00 00    	je     c001047f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010376:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001037b:	0f 84 ef 00 00 00    	je     c0010470 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0010381:	3c 0a                	cmp    al,0xa
c0010383:	74 13                	je     c0010398 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0010385:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001038a:	74 0c                	je     c0010398 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c001038c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010392:	0f 8e d8 00 00 00    	jle    c0010470 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0010398:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001039c:	83 ec 0c             	sub    esp,0xc
c001039f:	8d 78 01             	lea    edi,[eax+0x1]
c00103a2:	57                   	push   edi
c00103a3:	e8 a9 7a ff ff       	call   c0007e51 <malloc>
c00103a8:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00103ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00103b0:	8d 56 04             	lea    edx,[esi+0x4]
c00103b3:	89 14 24             	mov    DWORD PTR [esp],edx
c00103b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00103ba:	e8 92 7a ff ff       	call   c0007e51 <malloc>
c00103bf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00103c3:	83 c4 0c             	add    esp,0xc
c00103c6:	57                   	push   edi
c00103c7:	6a 00                	push   0x0
c00103c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00103cd:	e8 1e 01 ff ff       	call   c00004f0 <memset>
c00103d2:	8d 74 24 30          	lea    esi,[esp+0x30]
c00103d6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00103da:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00103de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103e0:	83 c4 0c             	add    esp,0xc
c00103e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00103e7:	52                   	push   edx
c00103e8:	6a 00                	push   0x0
c00103ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00103ee:	e8 fd 00 ff ff       	call   c00004f0 <memset>
c00103f3:	8d 74 24 30          	lea    esi,[esp+0x30]
c00103f7:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00103fb:	89 34 24             	mov    DWORD PTR [esp],esi
c00103fe:	e8 5d 01 ff ff       	call   c0000560 <strlen>
c0010403:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010407:	89 c1                	mov    ecx,eax
c0010409:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001040b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001040e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010411:	40                   	inc    eax
c0010412:	83 c4 10             	add    esp,0x10
c0010415:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010418:	85 d2                	test   edx,edx
c001041a:	75 0c                	jne    c0010428 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c001041c:	83 ec 0c             	sub    esp,0xc
c001041f:	6a 08                	push   0x8
c0010421:	e8 2b 7a ff ff       	call   c0007e51 <malloc>
c0010426:	eb 0c                	jmp    c0010434 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0010428:	c1 e0 03             	shl    eax,0x3
c001042b:	51                   	push   ecx
c001042c:	51                   	push   ecx
c001042d:	50                   	push   eax
c001042e:	52                   	push   edx
c001042f:	e8 09 7a ff ff       	call   c0007e3d <realloc>
c0010434:	83 c4 10             	add    esp,0x10
c0010437:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001043a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001043d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010440:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010444:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010448:	b9 08 00 00 00       	mov    ecx,0x8
c001044d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001044f:	31 f6                	xor    esi,esi
c0010451:	50                   	push   eax
c0010452:	68 00 01 00 00       	push   0x100
c0010457:	6a 00                	push   0x0
c0010459:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001045d:	50                   	push   eax
c001045e:	e8 8d 00 ff ff       	call   c00004f0 <memset>
c0010463:	83 c4 10             	add    esp,0x10
c0010466:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001046e:	eb 0f                	jmp    c001047f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010470:	3c 3d                	cmp    al,0x3d
c0010472:	74 07                	je     c001047b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0010474:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0010478:	46                   	inc    esi
c0010479:	eb 04                	jmp    c001047f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001047b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001047f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010484:	0f 85 c6 fe ff ff    	jne    c0010350 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001048a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010490:	5b                   	pop    ebx
c0010491:	5e                   	pop    esi
c0010492:	5f                   	pop    edi
c0010493:	5d                   	pop    ebp
c0010494:	c3                   	ret    
c0010495:	90                   	nop

c0010496 <EnvVarContainer::__loadSystem()>:
c0010496:	83 ec 10             	sub    esp,0x10
c0010499:	68 c0 f8 01 c0       	push   0xc001f8c0
c001049e:	68 24 e7 01 c0       	push   0xc001e724
c00104a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104a7:	e8 04 fe ff ff       	call   c00102b0 <EnvVarContainer::loadFrom(char const*, char const*)>
c00104ac:	83 c4 1c             	add    esp,0x1c
c00104af:	c3                   	ret    

c00104b0 <EnvVarContainer::__loadUser()>:
c00104b0:	c3                   	ret    
c00104b1:	90                   	nop

c00104b2 <EnvVarContainer::EnvVarContainer(Process*)>:
c00104b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104b6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00104bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104c4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00104c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00104d2:	90                   	nop
c00104d3:	c3                   	ret    

c00104d4 <EnvVarContainer::~EnvVarContainer()>:
c00104d4:	83 ec 0c             	sub    esp,0xc
c00104d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104de:	85 c0                	test   eax,eax
c00104e0:	74 1d                	je     c00104ff <EnvVarContainer::~EnvVarContainer()+0x2b>
c00104e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00104e8:	85 c0                	test   eax,eax
c00104ea:	74 13                	je     c00104ff <EnvVarContainer::~EnvVarContainer()+0x2b>
c00104ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104f3:	83 ec 0c             	sub    esp,0xc
c00104f6:	50                   	push   eax
c00104f7:	e8 65 79 ff ff       	call   c0007e61 <free>
c00104fc:	83 c4 10             	add    esp,0x10
c00104ff:	90                   	nop
c0010500:	83 c4 0c             	add    esp,0xc
c0010503:	c3                   	ret    

c0010504 <Krnl::getEnv(Process*, char const*)>:
c0010504:	53                   	push   ebx
c0010505:	83 ec 08             	sub    esp,0x8
c0010508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010510:	39 05 30 3e 02 c0    	cmp    DWORD PTR ds:0xc0023e30,eax
c0010516:	74 04                	je     c001051c <Krnl::getEnv(Process*, char const*)+0x18>
c0010518:	85 c0                	test   eax,eax
c001051a:	75 0b                	jne    c0010527 <Krnl::getEnv(Process*, char const*)+0x23>
c001051c:	a1 b0 33 02 c0       	mov    eax,ds:0xc00233b0
c0010521:	85 c0                	test   eax,eax
c0010523:	75 19                	jne    c001053e <Krnl::getEnv(Process*, char const*)+0x3a>
c0010525:	eb 27                	jmp    c001054e <Krnl::getEnv(Process*, char const*)+0x4a>
c0010527:	52                   	push   edx
c0010528:	52                   	push   edx
c0010529:	53                   	push   ebx
c001052a:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010530:	e8 79 fc ff ff       	call   c00101ae <EnvVarContainer::getEnv(char const*)>
c0010535:	83 c4 10             	add    esp,0x10
c0010538:	85 c0                	test   eax,eax
c001053a:	75 28                	jne    c0010564 <Krnl::getEnv(Process*, char const*)+0x60>
c001053c:	eb de                	jmp    c001051c <Krnl::getEnv(Process*, char const*)+0x18>
c001053e:	52                   	push   edx
c001053f:	52                   	push   edx
c0010540:	53                   	push   ebx
c0010541:	50                   	push   eax
c0010542:	e8 67 fc ff ff       	call   c00101ae <EnvVarContainer::getEnv(char const*)>
c0010547:	83 c4 10             	add    esp,0x10
c001054a:	85 c0                	test   eax,eax
c001054c:	75 16                	jne    c0010564 <Krnl::getEnv(Process*, char const*)+0x60>
c001054e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010552:	a1 b4 33 02 c0       	mov    eax,ds:0xc00233b4
c0010557:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001055b:	83 c4 08             	add    esp,0x8
c001055e:	5b                   	pop    ebx
c001055f:	e9 4a fc ff ff       	jmp    c00101ae <EnvVarContainer::getEnv(char const*)>
c0010564:	83 c4 08             	add    esp,0x8
c0010567:	5b                   	pop    ebx
c0010568:	c3                   	ret    

c0010569 <Krnl::setEnvSystem(char const*, char const*)>:
c0010569:	83 ec 10             	sub    esp,0x10
c001056c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010570:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010574:	ff 35 b4 33 02 c0    	push   DWORD PTR ds:0xc00233b4
c001057a:	e8 6d fc ff ff       	call   c00101ec <EnvVarContainer::setEnv(char const*, char const*)>
c001057f:	83 c4 1c             	add    esp,0x1c
c0010582:	c3                   	ret    

c0010583 <Krnl::setEnvUser(char const*, char const*)>:
c0010583:	a1 b0 33 02 c0       	mov    eax,ds:0xc00233b0
c0010588:	85 c0                	test   eax,eax
c001058a:	74 15                	je     c00105a1 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001058c:	83 ec 10             	sub    esp,0x10
c001058f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010593:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010597:	50                   	push   eax
c0010598:	e8 4f fc ff ff       	call   c00101ec <EnvVarContainer::setEnv(char const*, char const*)>
c001059d:	83 c4 1c             	add    esp,0x1c
c00105a0:	c3                   	ret    
c00105a1:	c3                   	ret    

c00105a2 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00105a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105a6:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00105ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00105b0:	e9 37 fc ff ff       	jmp    c00101ec <EnvVarContainer::setEnv(char const*, char const*)>

c00105b5 <Krnl::deleteEnvSystem(char const*)>:
c00105b5:	c3                   	ret    

c00105b6 <Krnl::deleteEnvUser(char const*)>:
c00105b6:	c3                   	ret    

c00105b7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c00105b7:	c3                   	ret    

c00105b8 <Krnl::newProcessEnv(Process*)>:
c00105b8:	83 ec 28             	sub    esp,0x28
c00105bb:	6a 0c                	push   0xc
c00105bd:	e8 8f 78 ff ff       	call   c0007e51 <malloc>
c00105c2:	5a                   	pop    edx
c00105c3:	59                   	pop    ecx
c00105c4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00105c8:	50                   	push   eax
c00105c9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00105cd:	e8 e0 fe ff ff       	call   c00104b2 <EnvVarContainer::EnvVarContainer(Process*)>
c00105d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00105d6:	83 c4 2c             	add    esp,0x2c
c00105d9:	c3                   	ret    

c00105da <Krnl::copyProcessEnv(Process*, Process*)>:
c00105da:	57                   	push   edi
c00105db:	56                   	push   esi
c00105dc:	53                   	push   ebx
c00105dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105e1:	83 ec 0c             	sub    esp,0xc
c00105e4:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00105ea:	6a 0c                	push   0xc
c00105ec:	e8 60 78 ff ff       	call   c0007e51 <malloc>
c00105f1:	89 c3                	mov    ebx,eax
c00105f3:	58                   	pop    eax
c00105f4:	5a                   	pop    edx
c00105f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105f9:	53                   	push   ebx
c00105fa:	e8 b3 fe ff ff       	call   c00104b2 <EnvVarContainer::EnvVarContainer(Process*)>
c00105ff:	8b 07                	mov    eax,DWORD PTR [edi]
c0010601:	89 03                	mov    DWORD PTR [ebx],eax
c0010603:	c1 e0 03             	shl    eax,0x3
c0010606:	89 04 24             	mov    DWORD PTR [esp],eax
c0010609:	e8 43 78 ff ff       	call   c0007e51 <malloc>
c001060e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010611:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010613:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010616:	c1 e1 03             	shl    ecx,0x3
c0010619:	89 c7                	mov    edi,eax
c001061b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001061d:	83 c4 10             	add    esp,0x10
c0010620:	89 d8                	mov    eax,ebx
c0010622:	5b                   	pop    ebx
c0010623:	5e                   	pop    esi
c0010624:	5f                   	pop    edi
c0010625:	c3                   	ret    

c0010626 <Krnl::loadSystemEnv()>:
c0010626:	53                   	push   ebx
c0010627:	83 ec 14             	sub    esp,0x14
c001062a:	6a 0c                	push   0xc
c001062c:	e8 20 78 ff ff       	call   c0007e51 <malloc>
c0010631:	89 c3                	mov    ebx,eax
c0010633:	58                   	pop    eax
c0010634:	5a                   	pop    edx
c0010635:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c001063b:	53                   	push   ebx
c001063c:	e8 71 fe ff ff       	call   c00104b2 <EnvVarContainer::EnvVarContainer(Process*)>
c0010641:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010644:	89 1d b4 33 02 c0    	mov    DWORD PTR ds:0xc00233b4,ebx
c001064a:	e8 47 fe ff ff       	call   c0010496 <EnvVarContainer::__loadSystem()>
c001064f:	83 c4 18             	add    esp,0x18
c0010652:	5b                   	pop    ebx
c0010653:	c3                   	ret    

c0010654 <Krnl::loadUserEnv()>:
c0010654:	53                   	push   ebx
c0010655:	83 ec 14             	sub    esp,0x14
c0010658:	6a 0c                	push   0xc
c001065a:	e8 f2 77 ff ff       	call   c0007e51 <malloc>
c001065f:	89 c3                	mov    ebx,eax
c0010661:	58                   	pop    eax
c0010662:	5a                   	pop    edx
c0010663:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c0010669:	53                   	push   ebx
c001066a:	e8 43 fe ff ff       	call   c00104b2 <EnvVarContainer::EnvVarContainer(Process*)>
c001066f:	89 1d b0 33 02 c0    	mov    DWORD PTR ds:0xc00233b0,ebx
c0010675:	83 c4 18             	add    esp,0x18
c0010678:	5b                   	pop    ebx
c0010679:	c3                   	ret    

c001067a <Krnl::flushEnv()>:
c001067a:	c3                   	ret    

c001067b <Krnl::getProcessTotalEnvCount(Process*)>:
c001067b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001067f:	8b 15 b0 33 02 c0    	mov    edx,DWORD PTR ds:0xc00233b0
c0010685:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001068b:	a1 b4 33 02 c0       	mov    eax,ds:0xc00233b4
c0010690:	8b 00                	mov    eax,DWORD PTR [eax]
c0010692:	03 01                	add    eax,DWORD PTR [ecx]
c0010694:	85 d2                	test   edx,edx
c0010696:	74 02                	je     c001069a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010698:	03 02                	add    eax,DWORD PTR [edx]
c001069a:	c3                   	ret    

c001069b <Krnl::getProcessEnvPair(Process*, int)>:
c001069b:	57                   	push   edi
c001069c:	56                   	push   esi
c001069d:	8b 35 b0 33 02 c0    	mov    esi,DWORD PTR ds:0xc00233b0
c00106a3:	53                   	push   ebx
c00106a4:	85 f6                	test   esi,esi
c00106a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106ae:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00106b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00106b8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00106ba:	75 16                	jne    c00106d2 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00106bc:	39 c2                	cmp    edx,eax
c00106be:	7c 16                	jl     c00106d6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00106c0:	8b 0d b4 33 02 c0    	mov    ecx,DWORD PTR ds:0xc00233b4
c00106c6:	8b 31                	mov    esi,DWORD PTR [ecx]
c00106c8:	01 c6                	add    esi,eax
c00106ca:	39 d6                	cmp    esi,edx
c00106cc:	7e 3c                	jle    c001070a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00106ce:	29 c2                	sub    edx,eax
c00106d0:	eb 04                	jmp    c00106d6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00106d2:	39 c2                	cmp    edx,eax
c00106d4:	7d 05                	jge    c00106db <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00106d6:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00106d9:	eb 20                	jmp    c00106fb <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00106db:	8b 3e                	mov    edi,DWORD PTR [esi]
c00106dd:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00106e0:	39 d1                	cmp    ecx,edx
c00106e2:	7e 04                	jle    c00106e8 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00106e4:	29 c2                	sub    edx,eax
c00106e6:	eb 10                	jmp    c00106f8 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00106e8:	8b 35 b4 33 02 c0    	mov    esi,DWORD PTR ds:0xc00233b4
c00106ee:	03 0e                	add    ecx,DWORD PTR [esi]
c00106f0:	39 d1                	cmp    ecx,edx
c00106f2:	7e 16                	jle    c001070a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00106f4:	29 c2                	sub    edx,eax
c00106f6:	29 fa                	sub    edx,edi
c00106f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00106fb:	8d 14 d0             	lea    edx,[eax+edx*8]
c00106fe:	8b 02                	mov    eax,DWORD PTR [edx]
c0010700:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010703:	89 03                	mov    DWORD PTR [ebx],eax
c0010705:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010708:	eb 1d                	jmp    c0010727 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001070a:	83 ec 0c             	sub    esp,0xc
c001070d:	68 46 e7 01 c0       	push   0xc001e746
c0010712:	e8 18 00 00 00       	call   c001072f <Krnl::panic(char const*)>
c0010717:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001071d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010724:	83 c4 10             	add    esp,0x10
c0010727:	89 d8                	mov    eax,ebx
c0010729:	5b                   	pop    ebx
c001072a:	5e                   	pop    esi
c001072b:	5f                   	pop    edi
c001072c:	c2 04 00             	ret    0x4

c001072f <Krnl::panic(char const*)>:
c001072f:	53                   	push   ebx
c0010730:	83 ec 10             	sub    esp,0x10
c0010733:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010737:	fa                   	cli    
c0010738:	c6 05 c0 33 02 c0 01 	mov    BYTE PTR ds:0xc00233c0,0x1
c001073f:	53                   	push   ebx
c0010740:	68 60 e7 01 c0       	push   0xc001e760
c0010745:	e8 96 a4 ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c001074a:	83 c4 0c             	add    esp,0xc
c001074d:	a1 84 09 02 c0       	mov    eax,ds:0xc0020984
c0010752:	6a 01                	push   0x1
c0010754:	6a 0f                	push   0xf
c0010756:	50                   	push   eax
c0010757:	e8 78 82 ff ff       	call   c00089d4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001075c:	5a                   	pop    edx
c001075d:	8b 0d 84 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020984
c0010763:	51                   	push   ecx
c0010764:	e8 63 84 ff ff       	call   c0008bcc <VgaText::clearScreen()>
c0010769:	58                   	pop    eax
c001076a:	8b 0d 84 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020984
c0010770:	5a                   	pop    edx
c0010771:	68 91 e7 01 c0       	push   0xc001e791
c0010776:	51                   	push   ecx
c0010777:	e8 90 82 ff ff       	call   c0008a0c <VgaText::setTitle(char*)>
c001077c:	83 c4 0c             	add    esp,0xc
c001077f:	a1 84 09 02 c0       	mov    eax,ds:0xc0020984
c0010784:	6a 01                	push   0x1
c0010786:	6a 0f                	push   0xf
c0010788:	50                   	push   eax
c0010789:	e8 46 82 ff ff       	call   c00089d4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001078e:	58                   	pop    eax
c001078f:	8b 0d 84 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020984
c0010795:	5a                   	pop    edx
c0010796:	68 79 e7 01 c0       	push   0xc001e779
c001079b:	51                   	push   ecx
c001079c:	e8 1f 87 ff ff       	call   c0008ec0 <VgaText::puts(char const*)>
c00107a1:	83 c4 0c             	add    esp,0xc
c00107a4:	a1 84 09 02 c0       	mov    eax,ds:0xc0020984
c00107a9:	6a 0f                	push   0xf
c00107ab:	6a 01                	push   0x1
c00107ad:	50                   	push   eax
c00107ae:	e8 21 82 ff ff       	call   c00089d4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00107b3:	58                   	pop    eax
c00107b4:	8b 0d 84 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020984
c00107ba:	5a                   	pop    edx
c00107bb:	68 82 e7 01 c0       	push   0xc001e782
c00107c0:	51                   	push   ecx
c00107c1:	e8 fa 86 ff ff       	call   c0008ec0 <VgaText::puts(char const*)>
c00107c6:	83 c4 0c             	add    esp,0xc
c00107c9:	a1 84 09 02 c0       	mov    eax,ds:0xc0020984
c00107ce:	6a 01                	push   0x1
c00107d0:	6a 0f                	push   0xf
c00107d2:	50                   	push   eax
c00107d3:	e8 fc 81 ff ff       	call   c00089d4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00107d8:	58                   	pop    eax
c00107d9:	8b 0d 84 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020984
c00107df:	5a                   	pop    edx
c00107e0:	68 8f e7 01 c0       	push   0xc001e78f
c00107e5:	51                   	push   ecx
c00107e6:	e8 d5 86 ff ff       	call   c0008ec0 <VgaText::puts(char const*)>
c00107eb:	58                   	pop    eax
c00107ec:	8b 0d 84 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020984
c00107f2:	5a                   	pop    edx
c00107f3:	68 a0 e7 01 c0       	push   0xc001e7a0
c00107f8:	51                   	push   ecx
c00107f9:	e8 c2 86 ff ff       	call   c0008ec0 <VgaText::puts(char const*)>
c00107fe:	58                   	pop    eax
c00107ff:	8b 0d 84 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020984
c0010805:	5a                   	pop    edx
c0010806:	68 92 e7 01 c0       	push   0xc001e792
c001080b:	51                   	push   ecx
c001080c:	e8 af 86 ff ff       	call   c0008ec0 <VgaText::puts(char const*)>
c0010811:	58                   	pop    eax
c0010812:	8b 0d 84 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020984
c0010818:	5a                   	pop    edx
c0010819:	53                   	push   ebx
c001081a:	51                   	push   ecx
c001081b:	e8 a0 86 ff ff       	call   c0008ec0 <VgaText::puts(char const*)>
c0010820:	5b                   	pop    ebx
c0010821:	58                   	pop    eax
c0010822:	a1 84 09 02 c0       	mov    eax,ds:0xc0020984
c0010827:	68 8f e7 01 c0       	push   0xc001e78f
c001082c:	50                   	push   eax
c001082d:	e8 8e 86 ff ff       	call   c0008ec0 <VgaText::puts(char const*)>
c0010832:	83 c4 10             	add    esp,0x10
c0010835:	eb fe                	jmp    c0010835 <Krnl::panic(char const*)+0x106>

c0010837 <Krnl::powerThread(void*)>:
c0010837:	83 ec 0c             	sub    esp,0xc
c001083a:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c001083f:	48                   	dec    eax
c0010840:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0010845:	75 01                	jne    c0010848 <Krnl::powerThread(void*)+0x11>
c0010847:	fb                   	sti    
c0010848:	83 ec 0c             	sub    esp,0xc
c001084b:	c6 05 e0 33 02 c0 00 	mov    BYTE PTR ds:0xc00233e0,0x0
c0010852:	6a 0a                	push   0xa
c0010854:	e8 3b 35 00 00       	call   c0013d94 <sleep(unsigned int)>
c0010859:	83 05 24 34 02 c0 0a 	add    DWORD PTR ds:0xc0023424,0xa
c0010860:	83 c4 10             	add    esp,0x10
c0010863:	eb e3                	jmp    c0010848 <Krnl::powerThread(void*)+0x11>

c0010865 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010865:	57                   	push   edi
c0010866:	b9 09 00 00 00       	mov    ecx,0x9
c001086b:	56                   	push   esi
c001086c:	bf 00 34 02 c0       	mov    edi,0xc0023400
c0010871:	fc                   	cld    
c0010872:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010876:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010878:	5e                   	pop    esi
c0010879:	5f                   	pop    edi
c001087a:	c3                   	ret    

c001087b <Krnl::userIOReceived()>:
c001087b:	c7 05 24 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023424,0x0
c0010885:	c3                   	ret    

c0010886 <Krnl::handlePowerButton()>:
c0010886:	83 ec 0c             	sub    esp,0xc
c0010889:	a1 00 34 02 c0       	mov    eax,ds:0xc0023400
c001088e:	83 f8 02             	cmp    eax,0x2
c0010891:	75 10                	jne    c00108a3 <Krnl::handlePowerButton()+0x1d>
c0010893:	83 ec 0c             	sub    esp,0xc
c0010896:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c001089c:	e8 51 6c ff ff       	call   c00074f2 <Computer::shutdown()>
c00108a1:	eb 11                	jmp    c00108b4 <Krnl::handlePowerButton()+0x2e>
c00108a3:	48                   	dec    eax
c00108a4:	75 11                	jne    c00108b7 <Krnl::handlePowerButton()+0x31>
c00108a6:	83 ec 0c             	sub    esp,0xc
c00108a9:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c00108af:	e8 6e 6c ff ff       	call   c0007522 <Computer::sleep()>
c00108b4:	83 c4 10             	add    esp,0x10
c00108b7:	83 c4 0c             	add    esp,0xc
c00108ba:	c3                   	ret    

c00108bb <Krnl::handleSleepButton()>:
c00108bb:	83 ec 0c             	sub    esp,0xc
c00108be:	a1 04 34 02 c0       	mov    eax,ds:0xc0023404
c00108c3:	83 f8 02             	cmp    eax,0x2
c00108c6:	75 10                	jne    c00108d8 <Krnl::handleSleepButton()+0x1d>
c00108c8:	83 ec 0c             	sub    esp,0xc
c00108cb:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c00108d1:	e8 1c 6c ff ff       	call   c00074f2 <Computer::shutdown()>
c00108d6:	eb 11                	jmp    c00108e9 <Krnl::handleSleepButton()+0x2e>
c00108d8:	48                   	dec    eax
c00108d9:	75 11                	jne    c00108ec <Krnl::handleSleepButton()+0x31>
c00108db:	83 ec 0c             	sub    esp,0xc
c00108de:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c00108e4:	e8 39 6c ff ff       	call   c0007522 <Computer::sleep()>
c00108e9:	83 c4 10             	add    esp,0x10
c00108ec:	83 c4 0c             	add    esp,0xc
c00108ef:	c3                   	ret    

c00108f0 <Krnl::setupPowerManager()>:
c00108f0:	83 ec 0c             	sub    esp,0xc
c00108f3:	c7 05 24 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023424,0x0
c00108fd:	68 f0 00 00 00       	push   0xf0
c0010902:	c6 05 e0 33 02 c0 00 	mov    BYTE PTR ds:0xc00233e0,0x0
c0010909:	6a 00                	push   0x0
c001090b:	68 37 08 01 c0       	push   0xc0010837
c0010910:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c0010916:	e8 49 2f 00 00       	call   c0013864 <Process::createThread(void (*)(void*), void*, int)>
c001091b:	c7 05 00 34 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0023400,0x2
c0010925:	c7 05 04 34 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023404,0x1
c001092f:	c7 05 08 34 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0023408,0x3
c0010939:	c7 05 0c 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002340c,0x0
c0010943:	c7 05 18 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023418,0x0
c001094d:	c7 05 10 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023410,0x0
c0010957:	c7 05 1c 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002341c,0x0
c0010961:	c7 05 14 34 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023414,0x3c
c001096b:	c7 05 20 34 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023420,0x3c
c0010975:	83 c4 1c             	add    esp,0x1c
c0010978:	c3                   	ret    

c0010979 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0010979:	55                   	push   ebp
c001097a:	57                   	push   edi
c001097b:	56                   	push   esi
c001097c:	53                   	push   ebx
c001097d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0010983:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001098a:	8a 1e                	mov    bl,BYTE PTR [esi]
c001098c:	8d 6e 01             	lea    ebp,[esi+0x1]
c001098f:	80 fb 40             	cmp    bl,0x40
c0010992:	75 1b                	jne    c00109af <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0010994:	8a 16                	mov    dl,BYTE PTR [esi]
c0010996:	84 d2                	test   dl,dl
c0010998:	0f 84 f1 00 00 00    	je     c0010a8f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001099e:	8d 46 01             	lea    eax,[esi+0x1]
c00109a1:	80 fa 3a             	cmp    dl,0x3a
c00109a4:	74 04                	je     c00109aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00109a6:	89 c6                	mov    esi,eax
c00109a8:	eb ea                	jmp    c0010994 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00109aa:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00109ad:	89 c6                	mov    esi,eax
c00109af:	50                   	push   eax
c00109b0:	6a 40                	push   0x40
c00109b2:	6a 00                	push   0x0
c00109b4:	8d 44 24 24          	lea    eax,[esp+0x24]
c00109b8:	50                   	push   eax
c00109b9:	e8 32 fb fe ff       	call   c00004f0 <memset>
c00109be:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00109c5:	31 c0                	xor    eax,eax
c00109c7:	83 c4 10             	add    esp,0x10
c00109ca:	8a 0f                	mov    cl,BYTE PTR [edi]
c00109cc:	84 c9                	test   cl,cl
c00109ce:	0f 84 bb 00 00 00    	je     c0010a8f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00109d4:	3d c7 00 00 00       	cmp    eax,0xc7
c00109d9:	0f 8f b0 00 00 00    	jg     c0010a8f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00109df:	80 f9 0a             	cmp    cl,0xa
c00109e2:	0f 85 98 00 00 00    	jne    c0010a80 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00109e8:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00109ed:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00109f1:	a8 df                	test   al,0xdf
c00109f3:	0f 94 c1             	sete   cl
c00109f6:	3c 23                	cmp    al,0x23
c00109f8:	0f 94 c2             	sete   dl
c00109fb:	08 d1                	or     cl,dl
c00109fd:	75 4a                	jne    c0010a49 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00109ff:	8d 50 f7             	lea    edx,[eax-0x9]
c0010a02:	80 fa 01             	cmp    dl,0x1
c0010a05:	76 42                	jbe    c0010a49 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a07:	3c 5b                	cmp    al,0x5b
c0010a09:	75 42                	jne    c0010a4d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0010a0b:	80 fb 40             	cmp    bl,0x40
c0010a0e:	75 39                	jne    c0010a49 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a10:	83 ec 0c             	sub    esp,0xc
c0010a13:	8d 54 24 65          	lea    edx,[esp+0x65]
c0010a17:	52                   	push   edx
c0010a18:	e8 43 fb fe ff       	call   c0000560 <strlen>
c0010a1d:	83 c4 10             	add    esp,0x10
c0010a20:	83 f8 3f             	cmp    eax,0x3f
c0010a23:	77 6a                	ja     c0010a8f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010a25:	50                   	push   eax
c0010a26:	50                   	push   eax
c0010a27:	8d 54 24 61          	lea    edx,[esp+0x61]
c0010a2b:	52                   	push   edx
c0010a2c:	8d 54 24 24          	lea    edx,[esp+0x24]
c0010a30:	52                   	push   edx
c0010a31:	e8 ea fb fe ff       	call   c0000620 <strcpy>
c0010a36:	58                   	pop    eax
c0010a37:	8d 54 24 24          	lea    edx,[esp+0x24]
c0010a3b:	52                   	push   edx
c0010a3c:	e8 1f fb fe ff       	call   c0000560 <strlen>
c0010a41:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0010a46:	83 c4 10             	add    esp,0x10
c0010a49:	31 d2                	xor    edx,edx
c0010a4b:	eb 3a                	jmp    c0010a87 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0010a4d:	80 fb 40             	cmp    bl,0x40
c0010a50:	74 06                	je     c0010a58 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0010a52:	8d 44 24 58          	lea    eax,[esp+0x58]
c0010a56:	eb 20                	jmp    c0010a78 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0010a58:	50                   	push   eax
c0010a59:	50                   	push   eax
c0010a5a:	55                   	push   ebp
c0010a5b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0010a5f:	50                   	push   eax
c0010a60:	e8 9b fc fe ff       	call   c0000700 <strcmp>
c0010a65:	83 c4 10             	add    esp,0x10
c0010a68:	85 c0                	test   eax,eax
c0010a6a:	75 dd                	jne    c0010a49 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010a6c:	eb e4                	jmp    c0010a52 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0010a6e:	8d 50 01             	lea    edx,[eax+0x1]
c0010a71:	80 f9 3d             	cmp    cl,0x3d
c0010a74:	74 1d                	je     c0010a93 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0010a76:	89 d0                	mov    eax,edx
c0010a78:	8a 08                	mov    cl,BYTE PTR [eax]
c0010a7a:	84 c9                	test   cl,cl
c0010a7c:	75 f0                	jne    c0010a6e <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0010a7e:	eb 0f                	jmp    c0010a8f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010a80:	8d 50 01             	lea    edx,[eax+0x1]
c0010a83:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0010a87:	47                   	inc    edi
c0010a88:	89 d0                	mov    eax,edx
c0010a8a:	e9 3b ff ff ff       	jmp    c00109ca <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0010a8f:	31 c0                	xor    eax,eax
c0010a91:	eb 33                	jmp    c0010ac6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0010a93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010a97:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0010a9a:	50                   	push   eax
c0010a9b:	50                   	push   eax
c0010a9c:	8d 44 24 60          	lea    eax,[esp+0x60]
c0010aa0:	50                   	push   eax
c0010aa1:	56                   	push   esi
c0010aa2:	e8 59 fc fe ff       	call   c0000700 <strcmp>
c0010aa7:	83 c4 10             	add    esp,0x10
c0010aaa:	85 c0                	test   eax,eax
c0010aac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010ab0:	75 97                	jne    c0010a49 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010ab2:	51                   	push   ecx
c0010ab3:	51                   	push   ecx
c0010ab4:	52                   	push   edx
c0010ab5:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0010abc:	e8 5f fb fe ff       	call   c0000620 <strcpy>
c0010ac1:	83 c4 10             	add    esp,0x10
c0010ac4:	b0 01                	mov    al,0x1
c0010ac6:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010acc:	5b                   	pop    ebx
c0010acd:	5e                   	pop    esi
c0010ace:	5f                   	pop    edi
c0010acf:	5d                   	pop    ebp
c0010ad0:	c3                   	ret    

c0010ad1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0010ad1:	57                   	push   edi
c0010ad2:	56                   	push   esi
c0010ad3:	53                   	push   ebx
c0010ad4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0010ada:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0010ae1:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0010ae8:	53                   	push   ebx
c0010ae9:	e8 72 fa fe ff       	call   c0000560 <strlen>
c0010aee:	89 34 24             	mov    DWORD PTR [esp],esi
c0010af1:	89 c7                	mov    edi,eax
c0010af3:	e8 68 fa fe ff       	call   c0000560 <strlen>
c0010af8:	83 c4 10             	add    esp,0x10
c0010afb:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0010aff:	3d ff 00 00 00       	cmp    eax,0xff
c0010b04:	0f 87 d3 00 00 00    	ja     c0010bdd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0010b0a:	57                   	push   edi
c0010b0b:	57                   	push   edi
c0010b0c:	56                   	push   esi
c0010b0d:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0010b11:	56                   	push   esi
c0010b12:	e8 09 fb fe ff       	call   c0000620 <strcpy>
c0010b17:	58                   	pop    eax
c0010b18:	5a                   	pop    edx
c0010b19:	68 bf ea 01 c0       	push   0xc001eabf
c0010b1e:	56                   	push   esi
c0010b1f:	e8 bc fc fe ff       	call   c00007e0 <strcat>
c0010b24:	59                   	pop    ecx
c0010b25:	5f                   	pop    edi
c0010b26:	53                   	push   ebx
c0010b27:	56                   	push   esi
c0010b28:	e8 b3 fc fe ff       	call   c00007e0 <strcat>
c0010b2d:	58                   	pop    eax
c0010b2e:	5a                   	pop    edx
c0010b2f:	68 da e7 01 c0       	push   0xc001e7da
c0010b34:	56                   	push   esi
c0010b35:	e8 a6 fc fe ff       	call   c00007e0 <strcat>
c0010b3a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010b41:	e8 0b 73 ff ff       	call   c0007e51 <malloc>
c0010b46:	83 c4 0c             	add    esp,0xc
c0010b49:	89 c3                	mov    ebx,eax
c0010b4b:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c0010b51:	56                   	push   esi
c0010b52:	50                   	push   eax
c0010b53:	e8 fe a5 ff ff       	call   c000b156 <File::File(char const*, Process*)>
c0010b58:	83 c4 10             	add    esp,0x10
c0010b5b:	85 db                	test   ebx,ebx
c0010b5d:	74 7e                	je     c0010bdd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0010b5f:	51                   	push   ecx
c0010b60:	51                   	push   ecx
c0010b61:	6a 01                	push   0x1
c0010b63:	53                   	push   ebx
c0010b64:	e8 ad a6 ff ff       	call   c000b216 <File::open(FileOpenMode)>
c0010b69:	83 c4 10             	add    esp,0x10
c0010b6c:	85 c0                	test   eax,eax
c0010b6e:	74 08                	je     c0010b78 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0010b70:	83 ec 0c             	sub    esp,0xc
c0010b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b75:	53                   	push   ebx
c0010b76:	eb 5f                	jmp    c0010bd7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0010b78:	52                   	push   edx
c0010b79:	8d 44 24 17          	lea    eax,[esp+0x17]
c0010b7d:	50                   	push   eax
c0010b7e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0010b82:	50                   	push   eax
c0010b83:	53                   	push   ebx
c0010b84:	e8 39 a9 ff ff       	call   c000b4c2 <File::stat(unsigned long long*, bool*)>
c0010b89:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010b8d:	83 c4 10             	add    esp,0x10
c0010b90:	89 c1                	mov    ecx,eax
c0010b92:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0010b96:	74 31                	je     c0010bc9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0010b98:	83 ec 0c             	sub    esp,0xc
c0010b9b:	50                   	push   eax
c0010b9c:	e8 b0 72 ff ff       	call   c0007e51 <malloc>
c0010ba1:	89 c6                	mov    esi,eax
c0010ba3:	58                   	pop    eax
c0010ba4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ba6:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010baa:	52                   	push   edx
c0010bab:	56                   	push   esi
c0010bac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010bb0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010bb4:	53                   	push   ebx
c0010bb5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010bb8:	83 c4 20             	add    esp,0x20
c0010bbb:	85 c0                	test   eax,eax
c0010bbd:	75 0a                	jne    c0010bc9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0010bbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bc3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0010bc7:	74 18                	je     c0010be1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0010bc9:	83 ec 0c             	sub    esp,0xc
c0010bcc:	53                   	push   ebx
c0010bcd:	e8 a2 a6 ff ff       	call   c000b274 <File::close()>
c0010bd2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010bd4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bd7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010bda:	83 c4 10             	add    esp,0x10
c0010bdd:	31 c0                	xor    eax,eax
c0010bdf:	eb 3b                	jmp    c0010c1c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0010be1:	83 ec 0c             	sub    esp,0xc
c0010be4:	53                   	push   ebx
c0010be5:	e8 8a a6 ff ff       	call   c000b274 <File::close()>
c0010bea:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010bec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010bf2:	83 c4 0c             	add    esp,0xc
c0010bf5:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0010bfc:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0010c03:	56                   	push   esi
c0010c04:	e8 70 fd ff ff       	call   c0010979 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0010c09:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c0c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0010c10:	e8 4c 72 ff ff       	call   c0007e61 <free>
c0010c15:	83 c4 10             	add    esp,0x10
c0010c18:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010c1c:	81 c4 20 01 00 00    	add    esp,0x120
c0010c22:	5b                   	pop    ebx
c0010c23:	5e                   	pop    esi
c0010c24:	5f                   	pop    edi
c0010c25:	c3                   	ret    

c0010c26 <Reg::getLine(char*, char*, char*)>:
c0010c26:	57                   	push   edi
c0010c27:	56                   	push   esi
c0010c28:	53                   	push   ebx
c0010c29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c2d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010c31:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010c35:	57                   	push   edi
c0010c36:	56                   	push   esi
c0010c37:	53                   	push   ebx
c0010c38:	68 df e7 01 c0       	push   0xc001e7df
c0010c3d:	e8 8f fe ff ff       	call   c0010ad1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0010c42:	83 c4 10             	add    esp,0x10
c0010c45:	84 c0                	test   al,al
c0010c47:	75 10                	jne    c0010c59 <Reg::getLine(char*, char*, char*)+0x33>
c0010c49:	57                   	push   edi
c0010c4a:	56                   	push   esi
c0010c4b:	53                   	push   ebx
c0010c4c:	68 04 e8 01 c0       	push   0xc001e804
c0010c51:	e8 7b fe ff ff       	call   c0010ad1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0010c56:	83 c4 10             	add    esp,0x10
c0010c59:	5b                   	pop    ebx
c0010c5a:	5e                   	pop    esi
c0010c5b:	5f                   	pop    edi
c0010c5c:	c3                   	ret    

c0010c5d <Reg::readInt(char*, char*, int*)>:
c0010c5d:	55                   	push   ebp
c0010c5e:	57                   	push   edi
c0010c5f:	56                   	push   esi
c0010c60:	53                   	push   ebx
c0010c61:	81 ec f0 00 00 00    	sub    esp,0xf0
c0010c67:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0010c6b:	57                   	push   edi
c0010c6c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0010c73:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0010c7a:	e8 a7 ff ff ff       	call   c0010c26 <Reg::getLine(char*, char*, char*)>
c0010c7f:	83 c4 10             	add    esp,0x10
c0010c82:	84 c0                	test   al,al
c0010c84:	0f 84 b3 00 00 00    	je     c0010d3d <Reg::readInt(char*, char*, int*)+0xe0>
c0010c8a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0010c8e:	80 fa 2b             	cmp    dl,0x2b
c0010c91:	74 0c                	je     c0010c9f <Reg::readInt(char*, char*, int*)+0x42>
c0010c93:	80 fa 2d             	cmp    dl,0x2d
c0010c96:	75 0e                	jne    c0010ca6 <Reg::readInt(char*, char*, int*)+0x49>
c0010c98:	ba 01 00 00 00       	mov    edx,0x1
c0010c9d:	eb 0b                	jmp    c0010caa <Reg::readInt(char*, char*, int*)+0x4d>
c0010c9f:	ba 01 00 00 00       	mov    edx,0x1
c0010ca4:	eb 02                	jmp    c0010ca8 <Reg::readInt(char*, char*, int*)+0x4b>
c0010ca6:	31 d2                	xor    edx,edx
c0010ca8:	31 c0                	xor    eax,eax
c0010caa:	be 0a 00 00 00       	mov    esi,0xa
c0010caf:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0010cb4:	75 20                	jne    c0010cd6 <Reg::readInt(char*, char*, int*)+0x79>
c0010cb6:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0010cba:	80 f9 78             	cmp    cl,0x78
c0010cbd:	75 0a                	jne    c0010cc9 <Reg::readInt(char*, char*, int*)+0x6c>
c0010cbf:	83 c2 02             	add    edx,0x2
c0010cc2:	be 10 00 00 00       	mov    esi,0x10
c0010cc7:	eb 0d                	jmp    c0010cd6 <Reg::readInt(char*, char*, int*)+0x79>
c0010cc9:	80 f9 62             	cmp    cl,0x62
c0010ccc:	75 08                	jne    c0010cd6 <Reg::readInt(char*, char*, int*)+0x79>
c0010cce:	83 c2 02             	add    edx,0x2
c0010cd1:	be 02 00 00 00       	mov    esi,0x2
c0010cd6:	01 d7                	add    edi,edx
c0010cd8:	31 d2                	xor    edx,edx
c0010cda:	8a 1f                	mov    bl,BYTE PTR [edi]
c0010cdc:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0010ce0:	80 fb 0d             	cmp    bl,0xd
c0010ce3:	0f 94 c3             	sete   bl
c0010ce6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0010ceb:	0f 94 c1             	sete   cl
c0010cee:	08 cb                	or     bl,cl
c0010cf0:	75 3a                	jne    c0010d2c <Reg::readInt(char*, char*, int*)+0xcf>
c0010cf2:	0f af d6             	imul   edx,esi
c0010cf5:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0010cfa:	83 fe 10             	cmp    esi,0x10
c0010cfd:	75 26                	jne    c0010d25 <Reg::readInt(char*, char*, int*)+0xc8>
c0010cff:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010d03:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0010d06:	89 e9                	mov    ecx,ebp
c0010d08:	80 f9 05             	cmp    cl,0x5
c0010d0b:	77 06                	ja     c0010d13 <Reg::readInt(char*, char*, int*)+0xb6>
c0010d0d:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0010d11:	eb 16                	jmp    c0010d29 <Reg::readInt(char*, char*, int*)+0xcc>
c0010d13:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010d17:	83 e9 61             	sub    ecx,0x61
c0010d1a:	80 f9 05             	cmp    cl,0x5
c0010d1d:	77 06                	ja     c0010d25 <Reg::readInt(char*, char*, int*)+0xc8>
c0010d1f:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0010d23:	eb 04                	jmp    c0010d29 <Reg::readInt(char*, char*, int*)+0xcc>
c0010d25:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0010d29:	47                   	inc    edi
c0010d2a:	eb ae                	jmp    c0010cda <Reg::readInt(char*, char*, int*)+0x7d>
c0010d2c:	84 c0                	test   al,al
c0010d2e:	74 02                	je     c0010d32 <Reg::readInt(char*, char*, int*)+0xd5>
c0010d30:	f7 da                	neg    edx
c0010d32:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0010d39:	89 10                	mov    DWORD PTR [eax],edx
c0010d3b:	88 d8                	mov    al,bl
c0010d3d:	81 c4 ec 00 00 00    	add    esp,0xec
c0010d43:	5b                   	pop    ebx
c0010d44:	5e                   	pop    esi
c0010d45:	5f                   	pop    edi
c0010d46:	5d                   	pop    ebp
c0010d47:	c3                   	ret    

c0010d48 <Reg::readString(char*, char*, char*, int)>:
c0010d48:	57                   	push   edi
c0010d49:	56                   	push   esi
c0010d4a:	53                   	push   ebx
c0010d4b:	81 ec d4 00 00 00    	sub    esp,0xd4
c0010d51:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0010d58:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0010d5c:	57                   	push   edi
c0010d5d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0010d64:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0010d6b:	e8 b6 fe ff ff       	call   c0010c26 <Reg::getLine(char*, char*, char*)>
c0010d70:	83 c4 10             	add    esp,0x10
c0010d73:	89 c6                	mov    esi,eax
c0010d75:	84 c0                	test   al,al
c0010d77:	74 44                	je     c0010dbd <Reg::readString(char*, char*, char*, int)+0x75>
c0010d79:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0010d80:	31 c0                	xor    eax,eax
c0010d82:	4a                   	dec    edx
c0010d83:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0010d86:	84 c9                	test   cl,cl
c0010d88:	74 0f                	je     c0010d99 <Reg::readString(char*, char*, char*, int)+0x51>
c0010d8a:	39 c2                	cmp    edx,eax
c0010d8c:	7e 0b                	jle    c0010d99 <Reg::readString(char*, char*, char*, int)+0x51>
c0010d8e:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0010d91:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0010d96:	40                   	inc    eax
c0010d97:	eb ea                	jmp    c0010d83 <Reg::readString(char*, char*, char*, int)+0x3b>
c0010d99:	83 ec 0c             	sub    esp,0xc
c0010d9c:	53                   	push   ebx
c0010d9d:	e8 be f7 fe ff       	call   c0000560 <strlen>
c0010da2:	83 c4 10             	add    esp,0x10
c0010da5:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0010daa:	75 11                	jne    c0010dbd <Reg::readString(char*, char*, char*, int)+0x75>
c0010dac:	83 ec 0c             	sub    esp,0xc
c0010daf:	53                   	push   ebx
c0010db0:	e8 ab f7 fe ff       	call   c0000560 <strlen>
c0010db5:	83 c4 10             	add    esp,0x10
c0010db8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0010dbd:	81 c4 d0 00 00 00    	add    esp,0xd0
c0010dc3:	89 f0                	mov    eax,esi
c0010dc5:	5b                   	pop    ebx
c0010dc6:	5e                   	pop    esi
c0010dc7:	5f                   	pop    edi
c0010dc8:	c3                   	ret    

c0010dc9 <Reg::readBool(char*, char*, bool*)>:
c0010dc9:	83 ec 20             	sub    esp,0x20
c0010dcc:	8d 44 24 10          	lea    eax,[esp+0x10]
c0010dd0:	50                   	push   eax
c0010dd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010dd5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010dd9:	e8 7f fe ff ff       	call   c0010c5d <Reg::readInt(char*, char*, int*)>
c0010dde:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010de3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010de7:	0f 95 02             	setne  BYTE PTR [edx]
c0010dea:	83 c4 2c             	add    esp,0x2c
c0010ded:	c3                   	ret    

c0010dee <Reg::readBoolWithDefault(char*, char*, bool)>:
c0010dee:	53                   	push   ebx
c0010def:	83 ec 1c             	sub    esp,0x1c
c0010df2:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0010df6:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010dfa:	50                   	push   eax
c0010dfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010dff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e03:	e8 c1 ff ff ff       	call   c0010dc9 <Reg::readBool(char*, char*, bool*)>
c0010e08:	83 c4 10             	add    esp,0x10
c0010e0b:	84 c0                	test   al,al
c0010e0d:	74 04                	je     c0010e13 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0010e0f:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0010e13:	88 d8                	mov    al,bl
c0010e15:	83 c4 18             	add    esp,0x18
c0010e18:	5b                   	pop    ebx
c0010e19:	c3                   	ret    

c0010e1a <Reg::readIntWithDefault(char*, char*, int)>:
c0010e1a:	53                   	push   ebx
c0010e1b:	83 ec 1c             	sub    esp,0x1c
c0010e1e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010e22:	8d 44 24 10          	lea    eax,[esp+0x10]
c0010e26:	50                   	push   eax
c0010e27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e2f:	e8 29 fe ff ff       	call   c0010c5d <Reg::readInt(char*, char*, int*)>
c0010e34:	83 c4 10             	add    esp,0x10
c0010e37:	84 c0                	test   al,al
c0010e39:	74 04                	je     c0010e3f <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0010e3b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010e3f:	89 d8                	mov    eax,ebx
c0010e41:	83 c4 18             	add    esp,0x18
c0010e44:	5b                   	pop    ebx
c0010e45:	c3                   	ret    

c0010e46 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0010e46:	57                   	push   edi
c0010e47:	56                   	push   esi
c0010e48:	56                   	push   esi
c0010e49:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010e4d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0010e51:	56                   	push   esi
c0010e52:	57                   	push   edi
c0010e53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e5b:	e8 e8 fe ff ff       	call   c0010d48 <Reg::readString(char*, char*, char*, int)>
c0010e60:	83 c4 10             	add    esp,0x10
c0010e63:	84 c0                	test   al,al
c0010e65:	75 1a                	jne    c0010e81 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0010e67:	51                   	push   ecx
c0010e68:	56                   	push   esi
c0010e69:	6a 00                	push   0x0
c0010e6b:	57                   	push   edi
c0010e6c:	e8 7f f6 fe ff       	call   c00004f0 <memset>
c0010e71:	8d 4e ff             	lea    ecx,[esi-0x1]
c0010e74:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e7a:	83 c4 10             	add    esp,0x10
c0010e7d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0010e81:	89 f8                	mov    eax,edi
c0010e83:	5a                   	pop    edx
c0010e84:	5e                   	pop    esi
c0010e85:	5f                   	pop    edi
c0010e86:	c3                   	ret    

c0010e87 <Sys::eject(regs*)>:
c0010e87:	83 ec 0c             	sub    esp,0xc
c0010e8a:	83 ca ff             	or     edx,0xffffffff
c0010e8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e91:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0010e94:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010e99:	83 e9 41             	sub    ecx,0x41
c0010e9c:	83 f9 19             	cmp    ecx,0x19
c0010e9f:	77 18                	ja     c0010eb9 <Sys::eject(regs*)+0x32>
c0010ea1:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c0010ea8:	85 c9                	test   ecx,ecx
c0010eaa:	74 0d                	je     c0010eb9 <Sys::eject(regs*)+0x32>
c0010eac:	83 ec 0c             	sub    esp,0xc
c0010eaf:	51                   	push   ecx
c0010eb0:	e8 a9 c3 ff ff       	call   c000d25e <LogicalDisk::eject()>
c0010eb5:	83 c4 10             	add    esp,0x10
c0010eb8:	99                   	cdq    
c0010eb9:	83 c4 0c             	add    esp,0xc
c0010ebc:	c3                   	ret    

c0010ebd <Sys::exit(regs*)>:
c0010ebd:	83 ec 18             	sub    esp,0x18
c0010ec0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ec4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010ec7:	e8 dc 34 00 00       	call   c00143a8 <terminateTask(int)>
c0010ecc:	83 c8 ff             	or     eax,0xffffffff
c0010ecf:	83 c4 1c             	add    esp,0x1c
c0010ed2:	89 c2                	mov    edx,eax
c0010ed4:	c3                   	ret    

c0010ed5 <Sys::getCwd(regs*)>:
c0010ed5:	83 ec 10             	sub    esp,0x10
c0010ed8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010edc:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0010edf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010ee2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ee7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010eea:	e8 69 a0 ff ff       	call   c000af58 <Fs::getcwd(Process*, char*, int)>
c0010eef:	83 c4 1c             	add    esp,0x1c
c0010ef2:	99                   	cdq    
c0010ef3:	c3                   	ret    

c0010ef4 <Sys::getPID(regs*)>:
c0010ef4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ef9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010efc:	8b 00                	mov    eax,DWORD PTR [eax]
c0010efe:	99                   	cdq    
c0010eff:	c3                   	ret    

c0010f00 <Sys::getRAMData(regs*)>:
c0010f00:	8b 0d 68 09 02 c0    	mov    ecx,DWORD PTR ds:0xc0020968
c0010f06:	69 05 64 09 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0020964,0xc8
c0010f10:	99                   	cdq    
c0010f11:	f7 f9                	idiv   ecx
c0010f13:	c1 e0 18             	shl    eax,0x18
c0010f16:	09 c8                	or     eax,ecx
c0010f18:	99                   	cdq    
c0010f19:	c3                   	ret    

c0010f1a <Sys::getVGAPtr(regs*)>:
c0010f1a:	55                   	push   ebp
c0010f1b:	57                   	push   edi
c0010f1c:	56                   	push   esi
c0010f1d:	53                   	push   ebx
c0010f1e:	83 ec 18             	sub    esp,0x18
c0010f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010f25:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010f28:	e8 7b 2f 00 00       	call   c0013ea8 <Thr::processFromPID(int)>
c0010f2d:	83 c4 10             	add    esp,0x10
c0010f30:	89 c1                	mov    ecx,eax
c0010f32:	b8 01 00 00 00       	mov    eax,0x1
c0010f37:	85 c9                	test   ecx,ecx
c0010f39:	74 57                	je     c0010f92 <Sys::getVGAPtr(regs*)+0x78>
c0010f3b:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0010f41:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0010f45:	74 0c                	je     c0010f53 <Sys::getVGAPtr(regs*)+0x39>
c0010f47:	83 ec 0c             	sub    esp,0xc
c0010f4a:	55                   	push   ebp
c0010f4b:	e8 31 7c ff ff       	call   c0008b81 <setActiveTerminal(VgaText*)>
c0010f50:	83 c4 10             	add    esp,0x10
c0010f53:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0010f56:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010f59:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0010f5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f60:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010f63:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f66:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0010f6c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f6f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0010f72:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0010f78:	50                   	push   eax
c0010f79:	50                   	push   eax
c0010f7a:	68 1f e8 01 c0       	push   0xc001e81f
c0010f7f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f82:	05 a8 0f 00 00       	add    eax,0xfa8
c0010f87:	50                   	push   eax
c0010f88:	e8 93 f6 fe ff       	call   c0000620 <strcpy>
c0010f8d:	83 c4 10             	add    esp,0x10
c0010f90:	31 c0                	xor    eax,eax
c0010f92:	83 c4 0c             	add    esp,0xc
c0010f95:	31 d2                	xor    edx,edx
c0010f97:	5b                   	pop    ebx
c0010f98:	5e                   	pop    esi
c0010f99:	5f                   	pop    edi
c0010f9a:	5d                   	pop    ebp
c0010f9b:	c3                   	ret    

c0010f9c <Sys::loadDLL(regs*)>:
c0010f9c:	56                   	push   esi
c0010f9d:	53                   	push   ebx
c0010f9e:	31 d2                	xor    edx,edx
c0010fa0:	51                   	push   ecx
c0010fa1:	b8 01 00 00 00       	mov    eax,0x1
c0010fa6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010faa:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0010fae:	0f 84 8c 00 00 00    	je     c0011040 <Sys::loadDLL(regs*)+0xa4>
c0010fb4:	83 ec 0c             	sub    esp,0xc
c0010fb7:	68 14 01 00 00       	push   0x114
c0010fbc:	e8 90 6e ff ff       	call   c0007e51 <malloc>
c0010fc1:	83 c4 0c             	add    esp,0xc
c0010fc4:	89 c3                	mov    ebx,eax
c0010fc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fcb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010fce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0010fd1:	53                   	push   ebx
c0010fd2:	e8 7f a1 ff ff       	call   c000b156 <File::File(char const*, Process*)>
c0010fd7:	83 c4 10             	add    esp,0x10
c0010fda:	31 d2                	xor    edx,edx
c0010fdc:	b8 02 00 00 00       	mov    eax,0x2
c0010fe1:	85 db                	test   ebx,ebx
c0010fe3:	74 5b                	je     c0011040 <Sys::loadDLL(regs*)+0xa4>
c0010fe5:	83 ec 0c             	sub    esp,0xc
c0010fe8:	53                   	push   ebx
c0010fe9:	e8 96 a4 ff ff       	call   c000b484 <File::exists()>
c0010fee:	83 c4 10             	add    esp,0x10
c0010ff1:	84 c0                	test   al,al
c0010ff3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ff5:	75 11                	jne    c0011008 <Sys::loadDLL(regs*)+0x6c>
c0010ff7:	83 ec 0c             	sub    esp,0xc
c0010ffa:	53                   	push   ebx
c0010ffb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010ffe:	83 c4 10             	add    esp,0x10
c0011001:	b8 03 00 00 00       	mov    eax,0x3
c0011006:	eb 36                	jmp    c001103e <Sys::loadDLL(regs*)+0xa2>
c0011008:	83 ec 0c             	sub    esp,0xc
c001100b:	53                   	push   ebx
c001100c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001100f:	58                   	pop    eax
c0011010:	5a                   	pop    edx
c0011011:	6a 00                	push   0x0
c0011013:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011016:	e8 77 20 00 00       	call   c0013092 <Thr::loadDLL(char const*, bool)>
c001101b:	83 c4 10             	add    esp,0x10
c001101e:	89 c1                	mov    ecx,eax
c0011020:	31 d2                	xor    edx,edx
c0011022:	b8 04 00 00 00       	mov    eax,0x4
c0011027:	85 c9                	test   ecx,ecx
c0011029:	74 15                	je     c0011040 <Sys::loadDLL(regs*)+0xa4>
c001102b:	53                   	push   ebx
c001102c:	53                   	push   ebx
c001102d:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0011033:	51                   	push   ecx
c0011034:	e8 8a 22 00 00       	call   c00132c3 <Thr::executeDLL(unsigned long, void*)>
c0011039:	83 c4 10             	add    esp,0x10
c001103c:	31 c0                	xor    eax,eax
c001103e:	31 d2                	xor    edx,edx
c0011040:	59                   	pop    ecx
c0011041:	5b                   	pop    ebx
c0011042:	5e                   	pop    esi
c0011043:	c3                   	ret    

c0011044 <Sys::read(regs*)>:
c0011044:	57                   	push   edi
c0011045:	56                   	push   esi
c0011046:	53                   	push   ebx
c0011047:	83 ec 10             	sub    esp,0x10
c001104a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001104e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011051:	83 f8 02             	cmp    eax,0x2
c0011054:	77 10                	ja     c0011066 <Sys::read(regs*)+0x22>
c0011056:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001105b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001105e:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011064:	eb 0e                	jmp    c0011074 <Sys::read(regs*)+0x30>
c0011066:	83 ec 0c             	sub    esp,0xc
c0011069:	50                   	push   eax
c001106a:	e8 c8 87 ff ff       	call   c0009837 <getFromFileDescriptor(int)>
c001106f:	83 c4 10             	add    esp,0x10
c0011072:	89 c1                	mov    ecx,eax
c0011074:	83 c8 ff             	or     eax,0xffffffff
c0011077:	85 c9                	test   ecx,ecx
c0011079:	89 c2                	mov    edx,eax
c001107b:	74 28                	je     c00110a5 <Sys::read(regs*)+0x61>
c001107d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011085:	31 ff                	xor    edi,edi
c0011087:	83 ec 0c             	sub    esp,0xc
c001108a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001108c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011090:	52                   	push   edx
c0011091:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011094:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011097:	57                   	push   edi
c0011098:	56                   	push   esi
c0011099:	51                   	push   ecx
c001109a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001109d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00110a1:	83 c4 20             	add    esp,0x20
c00110a4:	99                   	cdq    
c00110a5:	83 c4 10             	add    esp,0x10
c00110a8:	5b                   	pop    ebx
c00110a9:	5e                   	pop    esi
c00110aa:	5f                   	pop    edi
c00110ab:	c3                   	ret    

c00110ac <Sys::sbrk(regs*)>:
c00110ac:	56                   	push   esi
c00110ad:	53                   	push   ebx
c00110ae:	50                   	push   eax
c00110af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00110b8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110bb:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00110be:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00110c4:	85 db                	test   ebx,ebx
c00110c6:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00110c9:	74 02                	je     c00110cd <Sys::sbrk(regs*)+0x21>
c00110cb:	79 06                	jns    c00110d3 <Sys::sbrk(regs*)+0x27>
c00110cd:	89 f0                	mov    eax,esi
c00110cf:	31 d2                	xor    edx,edx
c00110d1:	eb 2a                	jmp    c00110fd <Sys::sbrk(regs*)+0x51>
c00110d3:	83 c8 ff             	or     eax,0xffffffff
c00110d6:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00110dc:	89 c2                	mov    edx,eax
c00110de:	77 1d                	ja     c00110fd <Sys::sbrk(regs*)+0x51>
c00110e0:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00110e6:	50                   	push   eax
c00110e7:	c1 ea 0c             	shr    edx,0xc
c00110ea:	68 07 0c 00 00       	push   0xc07
c00110ef:	52                   	push   edx
c00110f0:	51                   	push   ecx
c00110f1:	e8 30 90 ff ff       	call   c000a126 <VAS::allocatePages(int, int)>
c00110f6:	89 f0                	mov    eax,esi
c00110f8:	31 d2                	xor    edx,edx
c00110fa:	83 c4 10             	add    esp,0x10
c00110fd:	59                   	pop    ecx
c00110fe:	5b                   	pop    ebx
c00110ff:	5e                   	pop    esi
c0011100:	c3                   	ret    

c0011101 <Sys::setCwd(regs*)>:
c0011101:	83 ec 14             	sub    esp,0x14
c0011104:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011108:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001110b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011110:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011113:	e8 0b a4 ff ff       	call   c000b523 <Fs::setcwd(Process*, char*)>
c0011118:	83 c4 1c             	add    esp,0x1c
c001111b:	99                   	cdq    
c001111c:	c3                   	ret    

c001111d <Sys::setTime(regs*)>:
c001111d:	55                   	push   ebp
c001111e:	31 c9                	xor    ecx,ecx
c0011120:	57                   	push   edi
c0011121:	bd 0c 00 00 00       	mov    ebp,0xc
c0011126:	56                   	push   esi
c0011127:	53                   	push   ebx
c0011128:	31 db                	xor    ebx,ebx
c001112a:	83 ec 10             	sub    esp,0x10
c001112d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011131:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011134:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011137:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001113a:	89 c2                	mov    edx,eax
c001113c:	66 81 ef 6c 07       	sub    di,0x76c
c0011141:	83 e2 1f             	and    edx,0x1f
c0011144:	c1 e7 10             	shl    edi,0x10
c0011147:	42                   	inc    edx
c0011148:	c1 e8 05             	shr    eax,0x5
c001114b:	88 d1                	mov    cl,dl
c001114d:	31 d2                	xor    edx,edx
c001114f:	f7 f5                	div    ebp
c0011151:	89 dd                	mov    ebp,ebx
c0011153:	88 d5                	mov    ch,dl
c0011155:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001115b:	0f b7 c1             	movzx  eax,cx
c001115e:	31 d2                	xor    edx,edx
c0011160:	09 f8                	or     eax,edi
c0011162:	bf 3c 00 00 00       	mov    edi,0x3c
c0011167:	89 c1                	mov    ecx,eax
c0011169:	89 f0                	mov    eax,esi
c001116b:	f7 f7                	div    edi
c001116d:	c1 e2 10             	shl    edx,0x10
c0011170:	09 d5                	or     ebp,edx
c0011172:	31 d2                	xor    edx,edx
c0011174:	89 eb                	mov    ebx,ebp
c0011176:	f7 f7                	div    edi
c0011178:	bf 10 0e 00 00       	mov    edi,0xe10
c001117d:	88 d7                	mov    bh,dl
c001117f:	89 f0                	mov    eax,esi
c0011181:	31 d2                	xor    edx,edx
c0011183:	f7 f7                	div    edi
c0011185:	bf 18 00 00 00       	mov    edi,0x18
c001118a:	31 d2                	xor    edx,edx
c001118c:	f7 f7                	div    edi
c001118e:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0011193:	88 d3                	mov    bl,dl
c0011195:	53                   	push   ebx
c0011196:	51                   	push   ecx
c0011197:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001119d:	e8 92 ab ff ff       	call   c000bd34 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00111a2:	83 c4 1c             	add    esp,0x1c
c00111a5:	83 f0 01             	xor    eax,0x1
c00111a8:	5b                   	pop    ebx
c00111a9:	0f b6 c0             	movzx  eax,al
c00111ac:	5e                   	pop    esi
c00111ad:	31 d2                	xor    edx,edx
c00111af:	5f                   	pop    edi
c00111b0:	5d                   	pop    ebp
c00111b1:	c3                   	ret    

c00111b2 <Sys::timezone(regs*)>:
c00111b2:	53                   	push   ebx
c00111b3:	83 ec 08             	sub    esp,0x8
c00111b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111ba:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00111be:	75 17                	jne    c00111d7 <Sys::timezone(regs*)+0x25>
c00111c0:	83 ec 0c             	sub    esp,0xc
c00111c3:	68 29 e8 01 c0       	push   0xc001e829
c00111c8:	e8 13 9a ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c00111cd:	83 c8 ff             	or     eax,0xffffffff
c00111d0:	83 c4 10             	add    esp,0x10
c00111d3:	89 c2                	mov    edx,eax
c00111d5:	eb 20                	jmp    c00111f7 <Sys::timezone(regs*)+0x45>
c00111d7:	83 ec 0c             	sub    esp,0xc
c00111da:	68 3e e8 01 c0       	push   0xc001e83e
c00111df:	e8 fc 99 ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c00111e4:	58                   	pop    eax
c00111e5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00111e8:	e8 a3 a8 ff ff       	call   c000ba90 <User::loadClockSettings(int)>
c00111ed:	83 c4 10             	add    esp,0x10
c00111f0:	b8 01 00 00 00       	mov    eax,0x1
c00111f5:	31 d2                	xor    edx,edx
c00111f7:	83 c4 08             	add    esp,0x8
c00111fa:	5b                   	pop    ebx
c00111fb:	c3                   	ret    

c00111fc <Sys::write(regs*)>:
c00111fc:	57                   	push   edi
c00111fd:	56                   	push   esi
c00111fe:	53                   	push   ebx
c00111ff:	83 ec 10             	sub    esp,0x10
c0011202:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011206:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011209:	83 f8 02             	cmp    eax,0x2
c001120c:	77 10                	ja     c001121e <Sys::write(regs*)+0x22>
c001120e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011213:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011216:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001121c:	eb 0e                	jmp    c001122c <Sys::write(regs*)+0x30>
c001121e:	83 ec 0c             	sub    esp,0xc
c0011221:	50                   	push   eax
c0011222:	e8 10 86 ff ff       	call   c0009837 <getFromFileDescriptor(int)>
c0011227:	83 c4 10             	add    esp,0x10
c001122a:	89 c1                	mov    ecx,eax
c001122c:	83 c8 ff             	or     eax,0xffffffff
c001122f:	85 c9                	test   ecx,ecx
c0011231:	89 c2                	mov    edx,eax
c0011233:	74 28                	je     c001125d <Sys::write(regs*)+0x61>
c0011235:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001123d:	31 ff                	xor    edi,edi
c001123f:	83 ec 0c             	sub    esp,0xc
c0011242:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011244:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011248:	52                   	push   edx
c0011249:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001124c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001124f:	57                   	push   edi
c0011250:	56                   	push   esi
c0011251:	51                   	push   ecx
c0011252:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011255:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011259:	83 c4 20             	add    esp,0x20
c001125c:	99                   	cdq    
c001125d:	83 c4 10             	add    esp,0x10
c0011260:	5b                   	pop    ebx
c0011261:	5e                   	pop    esi
c0011262:	5f                   	pop    edi
c0011263:	c3                   	ret    

c0011264 <Sys::wsbe(regs*)>:
c0011264:	57                   	push   edi
c0011265:	b9 0b 00 00 00       	mov    ecx,0xb
c001126a:	56                   	push   esi
c001126b:	be 7d e8 01 c0       	mov    esi,0xc001e87d
c0011270:	53                   	push   ebx
c0011271:	83 ec 30             	sub    esp,0x30
c0011274:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011278:	fc                   	cld    
c0011279:	83 ec 0c             	sub    esp,0xc
c001127c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001127e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011282:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011287:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001128a:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011290:	8b 06                	mov    eax,DWORD PTR [esi]
c0011292:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011295:	57                   	push   edi
c0011296:	e8 c5 f2 fe ff       	call   c0000560 <strlen>
c001129b:	5a                   	pop    edx
c001129c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00112a0:	52                   	push   edx
c00112a1:	31 d2                	xor    edx,edx
c00112a3:	57                   	push   edi
c00112a4:	52                   	push   edx
c00112a5:	50                   	push   eax
c00112a6:	56                   	push   esi
c00112a7:	ff d3                	call   ebx
c00112a9:	83 c4 14             	add    esp,0x14
c00112ac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00112b0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00112b3:	e8 f0 30 00 00       	call   c00143a8 <terminateTask(int)>
c00112b8:	83 c4 40             	add    esp,0x40
c00112bb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00112c0:	5b                   	pop    ebx
c00112c1:	31 d2                	xor    edx,edx
c00112c3:	5e                   	pop    esi
c00112c4:	5f                   	pop    edi
c00112c5:	c3                   	ret    

c00112c6 <Sys::yield(regs*)>:
c00112c6:	83 ec 0c             	sub    esp,0xc
c00112c9:	fa                   	cli    
c00112ca:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c00112d0:	e8 af 27 00 00       	call   c0013a84 <schedule()>
c00112d5:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00112da:	48                   	dec    eax
c00112db:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00112e0:	75 01                	jne    c00112e3 <Sys::yield(regs*)+0x1d>
c00112e2:	fb                   	sti    
c00112e3:	31 c0                	xor    eax,eax
c00112e5:	31 d2                	xor    edx,edx
c00112e7:	83 c4 0c             	add    esp,0xc
c00112ea:	c3                   	ret    

c00112eb <sysCallSeekDir(regs*)>:
c00112eb:	31 c0                	xor    eax,eax
c00112ed:	31 d2                	xor    edx,edx
c00112ef:	c3                   	ret    

c00112f0 <sysCallTellDir(regs*)>:
c00112f0:	31 c0                	xor    eax,eax
c00112f2:	31 d2                	xor    edx,edx
c00112f4:	c3                   	ret    

c00112f5 <sysCallVerify(regs*)>:
c00112f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112f9:	31 d2                	xor    edx,edx
c00112fb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00112fe:	c3                   	ret    

c00112ff <sysCallGetArgc(regs*)>:
c00112ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011304:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011307:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c001130d:	99                   	cdq    
c001130e:	c3                   	ret    

c001130f <sysCallTTYName(regs*)>:
c001130f:	b8 01 00 00 00       	mov    eax,0x1
c0011314:	31 d2                	xor    edx,edx
c0011316:	c3                   	ret    

c0011317 <sysFormatDisk(regs*)>:
c0011317:	56                   	push   esi
c0011318:	53                   	push   ebx
c0011319:	50                   	push   eax
c001131a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001131e:	8b 1d 34 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020a34
c0011324:	eb 28                	jmp    c001134e <sysFormatDisk(regs*)+0x37>
c0011326:	83 ec 0c             	sub    esp,0xc
c0011329:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001132c:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001132f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011331:	51                   	push   ecx
c0011332:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011335:	51                   	push   ecx
c0011336:	50                   	push   eax
c0011337:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c001133e:	50                   	push   eax
c001133f:	53                   	push   ebx
c0011340:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0011343:	83 c4 20             	add    esp,0x20
c0011346:	83 f8 08             	cmp    eax,0x8
c0011349:	75 12                	jne    c001135d <sysFormatDisk(regs*)+0x46>
c001134b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001134e:	85 db                	test   ebx,ebx
c0011350:	75 d4                	jne    c0011326 <sysFormatDisk(regs*)+0xf>
c0011352:	59                   	pop    ecx
c0011353:	b8 03 00 00 00       	mov    eax,0x3
c0011358:	31 d2                	xor    edx,edx
c001135a:	5b                   	pop    ebx
c001135b:	5e                   	pop    esi
c001135c:	c3                   	ret    
c001135d:	85 c0                	test   eax,eax
c001135f:	74 1b                	je     c001137c <sysFormatDisk(regs*)+0x65>
c0011361:	83 f8 09             	cmp    eax,0x9
c0011364:	74 0b                	je     c0011371 <sysFormatDisk(regs*)+0x5a>
c0011366:	59                   	pop    ecx
c0011367:	b8 02 00 00 00       	mov    eax,0x2
c001136c:	31 d2                	xor    edx,edx
c001136e:	5b                   	pop    ebx
c001136f:	5e                   	pop    esi
c0011370:	c3                   	ret    
c0011371:	59                   	pop    ecx
c0011372:	b8 01 00 00 00       	mov    eax,0x1
c0011377:	31 d2                	xor    edx,edx
c0011379:	5b                   	pop    ebx
c001137a:	5e                   	pop    esi
c001137b:	c3                   	ret    
c001137c:	59                   	pop    ecx
c001137d:	31 c0                	xor    eax,eax
c001137f:	31 d2                	xor    edx,edx
c0011381:	5b                   	pop    ebx
c0011382:	5e                   	pop    esi
c0011383:	c3                   	ret    

c0011384 <sysSetDiskVolumeLabel(regs*)>:
c0011384:	56                   	push   esi
c0011385:	53                   	push   ebx
c0011386:	53                   	push   ebx
c0011387:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001138b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001138e:	83 f8 19             	cmp    eax,0x19
c0011391:	77 2d                	ja     c00113c0 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0011393:	8b 0c 85 a0 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd160]
c001139a:	85 c9                	test   ecx,ecx
c001139c:	74 22                	je     c00113c0 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001139e:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00113a1:	85 db                	test   ebx,ebx
c00113a3:	74 1b                	je     c00113c0 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00113a5:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00113ab:	85 d2                	test   edx,edx
c00113ad:	74 11                	je     c00113c0 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00113af:	8b 32                	mov    esi,DWORD PTR [edx]
c00113b1:	53                   	push   ebx
c00113b2:	50                   	push   eax
c00113b3:	51                   	push   ecx
c00113b4:	52                   	push   edx
c00113b5:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00113b8:	83 c4 10             	add    esp,0x10
c00113bb:	99                   	cdq    
c00113bc:	59                   	pop    ecx
c00113bd:	5b                   	pop    ebx
c00113be:	5e                   	pop    esi
c00113bf:	c3                   	ret    
c00113c0:	59                   	pop    ecx
c00113c1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00113c6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113cb:	5b                   	pop    ebx
c00113cc:	5e                   	pop    esi
c00113cd:	c3                   	ret    

c00113ce <sysGetDiskVolumeLabel(regs*)>:
c00113ce:	57                   	push   edi
c00113cf:	56                   	push   esi
c00113d0:	53                   	push   ebx
c00113d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00113d8:	83 fa 19             	cmp    edx,0x19
c00113db:	77 38                	ja     c0011415 <sysGetDiskVolumeLabel(regs*)+0x47>
c00113dd:	8b 0c 95 a0 2e 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd160]
c00113e4:	85 c9                	test   ecx,ecx
c00113e6:	74 2d                	je     c0011415 <sysGetDiskVolumeLabel(regs*)+0x47>
c00113e8:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00113eb:	85 db                	test   ebx,ebx
c00113ed:	74 26                	je     c0011415 <sysGetDiskVolumeLabel(regs*)+0x47>
c00113ef:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00113f2:	85 f6                	test   esi,esi
c00113f4:	74 1f                	je     c0011415 <sysGetDiskVolumeLabel(regs*)+0x47>
c00113f6:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00113fc:	85 c0                	test   eax,eax
c00113fe:	74 15                	je     c0011415 <sysGetDiskVolumeLabel(regs*)+0x47>
c0011400:	83 ec 0c             	sub    esp,0xc
c0011403:	8b 38                	mov    edi,DWORD PTR [eax]
c0011405:	56                   	push   esi
c0011406:	53                   	push   ebx
c0011407:	52                   	push   edx
c0011408:	51                   	push   ecx
c0011409:	50                   	push   eax
c001140a:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001140d:	83 c4 20             	add    esp,0x20
c0011410:	99                   	cdq    
c0011411:	5b                   	pop    ebx
c0011412:	5e                   	pop    esi
c0011413:	5f                   	pop    edi
c0011414:	c3                   	ret    
c0011415:	5b                   	pop    ebx
c0011416:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001141b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011420:	5e                   	pop    esi
c0011421:	5f                   	pop    edi
c0011422:	c3                   	ret    

c0011423 <sysShutdown(regs*)>:
c0011423:	83 ec 0c             	sub    esp,0xc
c0011426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001142a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001142d:	85 c0                	test   eax,eax
c001142f:	74 18                	je     c0011449 <sysShutdown(regs*)+0x26>
c0011431:	83 f8 01             	cmp    eax,0x1
c0011434:	74 38                	je     c001146e <sysShutdown(regs*)+0x4b>
c0011436:	83 f8 02             	cmp    eax,0x2
c0011439:	74 24                	je     c001145f <sysShutdown(regs*)+0x3c>
c001143b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011440:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011445:	83 c4 0c             	add    esp,0xc
c0011448:	c3                   	ret    
c0011449:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c001144e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011450:	6a 00                	push   0x0
c0011452:	6a 00                	push   0x0
c0011454:	6a 00                	push   0x0
c0011456:	50                   	push   eax
c0011457:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001145a:	83 c4 10             	add    esp,0x10
c001145d:	eb dc                	jmp    c001143b <sysShutdown(regs*)+0x18>
c001145f:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0011464:	8b 10                	mov    edx,DWORD PTR [eax]
c0011466:	6a 00                	push   0x0
c0011468:	6a 00                	push   0x0
c001146a:	6a 01                	push   0x1
c001146c:	eb e8                	jmp    c0011456 <sysShutdown(regs*)+0x33>
c001146e:	a1 20 2f 02 c0       	mov    eax,ds:0xc0022f20
c0011473:	85 c0                	test   eax,eax
c0011475:	74 02                	je     c0011479 <sysShutdown(regs*)+0x56>
c0011477:	ff d0                	call   eax
c0011479:	31 c0                	xor    eax,eax
c001147b:	31 d2                	xor    edx,edx
c001147d:	83 c4 0c             	add    esp,0xc
c0011480:	c3                   	ret    

c0011481 <sysCallRealpath(regs*)>:
c0011481:	83 ec 0c             	sub    esp,0xc
c0011484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011488:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001148b:	85 d2                	test   edx,edx
c001148d:	74 07                	je     c0011496 <sysCallRealpath(regs*)+0x15>
c001148f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011492:	85 c0                	test   eax,eax
c0011494:	75 0b                	jne    c00114a1 <sysCallRealpath(regs*)+0x20>
c0011496:	b8 01 00 00 00       	mov    eax,0x1
c001149b:	31 d2                	xor    edx,edx
c001149d:	83 c4 0c             	add    esp,0xc
c00114a0:	c3                   	ret    
c00114a1:	51                   	push   ecx
c00114a2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00114a8:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00114ab:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00114b1:	51                   	push   ecx
c00114b2:	52                   	push   edx
c00114b3:	50                   	push   eax
c00114b4:	e8 f3 9a ff ff       	call   c000afac <Fs::standardiseFiles(char*, char const*, char const*)>
c00114b9:	83 c4 10             	add    esp,0x10
c00114bc:	31 c0                	xor    eax,eax
c00114be:	31 d2                	xor    edx,edx
c00114c0:	83 c4 0c             	add    esp,0xc
c00114c3:	c3                   	ret    

c00114c4 <sysCallReadDir(regs*)>:
c00114c4:	53                   	push   ebx
c00114c5:	83 ec 18             	sub    esp,0x18
c00114c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00114cc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00114cf:	83 f8 02             	cmp    eax,0x2
c00114d2:	76 61                	jbe    c0011535 <sysCallReadDir(regs*)+0x71>
c00114d4:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00114db:	77 49                	ja     c0011526 <sysCallReadDir(regs*)+0x62>
c00114dd:	83 ec 0c             	sub    esp,0xc
c00114e0:	50                   	push   eax
c00114e1:	e8 51 83 ff ff       	call   c0009837 <getFromFileDescriptor(int)>
c00114e6:	83 c4 10             	add    esp,0x10
c00114e9:	85 c0                	test   eax,eax
c00114eb:	74 39                	je     c0011526 <sysCallReadDir(regs*)+0x62>
c00114ed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00114f5:	83 ec 0c             	sub    esp,0xc
c00114f8:	8b 10                	mov    edx,DWORD PTR [eax]
c00114fa:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00114fe:	51                   	push   ecx
c00114ff:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011502:	51                   	push   ecx
c0011503:	6a 00                	push   0x0
c0011505:	68 10 01 00 00       	push   0x110
c001150a:	50                   	push   eax
c001150b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001150e:	83 c4 20             	add    esp,0x20
c0011511:	85 c0                	test   eax,eax
c0011513:	74 29                	je     c001153e <sysCallReadDir(regs*)+0x7a>
c0011515:	83 f8 07             	cmp    eax,0x7
c0011518:	74 1b                	je     c0011535 <sysCallReadDir(regs*)+0x71>
c001151a:	b8 02 00 00 00       	mov    eax,0x2
c001151f:	31 d2                	xor    edx,edx
c0011521:	83 c4 18             	add    esp,0x18
c0011524:	5b                   	pop    ebx
c0011525:	c3                   	ret    
c0011526:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001152b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011530:	83 c4 18             	add    esp,0x18
c0011533:	5b                   	pop    ebx
c0011534:	c3                   	ret    
c0011535:	b8 01 00 00 00       	mov    eax,0x1
c001153a:	31 d2                	xor    edx,edx
c001153c:	eb e3                	jmp    c0011521 <sysCallReadDir(regs*)+0x5d>
c001153e:	31 c0                	xor    eax,eax
c0011540:	31 d2                	xor    edx,edx
c0011542:	eb dd                	jmp    c0011521 <sysCallReadDir(regs*)+0x5d>

c0011544 <sysCallIsATTY(regs*)>:
c0011544:	83 ec 0c             	sub    esp,0xc
c0011547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001154b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001154e:	83 f8 02             	cmp    eax,0x2
c0011551:	76 07                	jbe    c001155a <sysCallIsATTY(regs*)+0x16>
c0011553:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011558:	75 28                	jne    c0011582 <sysCallIsATTY(regs*)+0x3e>
c001155a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001155f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011562:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011568:	85 c0                	test   eax,eax
c001156a:	74 26                	je     c0011592 <sysCallIsATTY(regs*)+0x4e>
c001156c:	83 ec 0c             	sub    esp,0xc
c001156f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011571:	50                   	push   eax
c0011572:	ff 12                	call   DWORD PTR [edx]
c0011574:	31 d2                	xor    edx,edx
c0011576:	25 ff 00 00 00       	and    eax,0xff
c001157b:	83 c4 10             	add    esp,0x10
c001157e:	83 c4 0c             	add    esp,0xc
c0011581:	c3                   	ret    
c0011582:	83 ec 0c             	sub    esp,0xc
c0011585:	50                   	push   eax
c0011586:	e8 ac 82 ff ff       	call   c0009837 <getFromFileDescriptor(int)>
c001158b:	83 c4 10             	add    esp,0x10
c001158e:	85 c0                	test   eax,eax
c0011590:	75 da                	jne    c001156c <sysCallIsATTY(regs*)+0x28>
c0011592:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011597:	ba ff ff ff ff       	mov    edx,0xffffffff
c001159c:	83 c4 0c             	add    esp,0xc
c001159f:	c3                   	ret    

c00115a0 <sysCallSeek(regs*)>:
c00115a0:	53                   	push   ebx
c00115a1:	83 ec 08             	sub    esp,0x8
c00115a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115a8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115ab:	8d 50 fd             	lea    edx,[eax-0x3]
c00115ae:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00115b4:	77 34                	ja     c00115ea <sysCallSeek(regs*)+0x4a>
c00115b6:	83 ec 0c             	sub    esp,0xc
c00115b9:	50                   	push   eax
c00115ba:	e8 78 82 ff ff       	call   c0009837 <getFromFileDescriptor(int)>
c00115bf:	83 c4 0c             	add    esp,0xc
c00115c2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00115c5:	31 db                	xor    ebx,ebx
c00115c7:	53                   	push   ebx
c00115c8:	51                   	push   ecx
c00115c9:	50                   	push   eax
c00115ca:	e8 05 9d ff ff       	call   c000b2d4 <File::seek(unsigned long long)>
c00115cf:	83 c4 10             	add    esp,0x10
c00115d2:	85 c0                	test   eax,eax
c00115d4:	0f 95 c0             	setne  al
c00115d7:	31 d2                	xor    edx,edx
c00115d9:	25 ff 00 00 00       	and    eax,0xff
c00115de:	f7 d8                	neg    eax
c00115e0:	83 d2 00             	adc    edx,0x0
c00115e3:	83 c4 08             	add    esp,0x8
c00115e6:	f7 da                	neg    edx
c00115e8:	5b                   	pop    ebx
c00115e9:	c3                   	ret    
c00115ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115ef:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115f4:	83 c4 08             	add    esp,0x8
c00115f7:	5b                   	pop    ebx
c00115f8:	c3                   	ret    

c00115f9 <sysCallTell(regs*)>:
c00115f9:	53                   	push   ebx
c00115fa:	83 ec 08             	sub    esp,0x8
c00115fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011601:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011604:	83 f8 02             	cmp    eax,0x2
c0011607:	76 50                	jbe    c0011659 <sysCallTell(regs*)+0x60>
c0011609:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001160e:	76 19                	jbe    c0011629 <sysCallTell(regs*)+0x30>
c0011610:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011613:	31 d2                	xor    edx,edx
c0011615:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001161b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011622:	31 c0                	xor    eax,eax
c0011624:	83 c4 08             	add    esp,0x8
c0011627:	5b                   	pop    ebx
c0011628:	c3                   	ret    
c0011629:	83 ec 0c             	sub    esp,0xc
c001162c:	50                   	push   eax
c001162d:	e8 05 82 ff ff       	call   c0009837 <getFromFileDescriptor(int)>
c0011632:	5a                   	pop    edx
c0011633:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011636:	59                   	pop    ecx
c0011637:	53                   	push   ebx
c0011638:	50                   	push   eax
c0011639:	e8 ec 9c ff ff       	call   c000b32a <File::tell(unsigned long long*)>
c001163e:	83 c4 10             	add    esp,0x10
c0011641:	85 c0                	test   eax,eax
c0011643:	0f 95 c0             	setne  al
c0011646:	31 d2                	xor    edx,edx
c0011648:	25 ff 00 00 00       	and    eax,0xff
c001164d:	f7 d8                	neg    eax
c001164f:	83 d2 00             	adc    edx,0x0
c0011652:	83 c4 08             	add    esp,0x8
c0011655:	f7 da                	neg    edx
c0011657:	5b                   	pop    ebx
c0011658:	c3                   	ret    
c0011659:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001165e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011663:	83 c4 08             	add    esp,0x8
c0011666:	5b                   	pop    ebx
c0011667:	c3                   	ret    

c0011668 <sysCallSize(regs*)>:
c0011668:	53                   	push   ebx
c0011669:	83 ec 18             	sub    esp,0x18
c001166c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011670:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011673:	83 f8 02             	cmp    eax,0x2
c0011676:	76 56                	jbe    c00116ce <sysCallSize(regs*)+0x66>
c0011678:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001167d:	76 19                	jbe    c0011698 <sysCallSize(regs*)+0x30>
c001167f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011682:	31 d2                	xor    edx,edx
c0011684:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001168a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011691:	31 c0                	xor    eax,eax
c0011693:	83 c4 18             	add    esp,0x18
c0011696:	5b                   	pop    ebx
c0011697:	c3                   	ret    
c0011698:	83 ec 0c             	sub    esp,0xc
c001169b:	50                   	push   eax
c001169c:	e8 96 81 ff ff       	call   c0009837 <getFromFileDescriptor(int)>
c00116a1:	83 c4 0c             	add    esp,0xc
c00116a4:	8d 54 24 13          	lea    edx,[esp+0x13]
c00116a8:	52                   	push   edx
c00116a9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00116ac:	52                   	push   edx
c00116ad:	50                   	push   eax
c00116ae:	e8 0f 9e ff ff       	call   c000b4c2 <File::stat(unsigned long long*, bool*)>
c00116b3:	83 c4 10             	add    esp,0x10
c00116b6:	85 c0                	test   eax,eax
c00116b8:	0f 95 c0             	setne  al
c00116bb:	31 d2                	xor    edx,edx
c00116bd:	25 ff 00 00 00       	and    eax,0xff
c00116c2:	f7 d8                	neg    eax
c00116c4:	83 d2 00             	adc    edx,0x0
c00116c7:	83 c4 18             	add    esp,0x18
c00116ca:	f7 da                	neg    edx
c00116cc:	5b                   	pop    ebx
c00116cd:	c3                   	ret    
c00116ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116d3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116d8:	83 c4 18             	add    esp,0x18
c00116db:	5b                   	pop    ebx
c00116dc:	c3                   	ret    

c00116dd <sysCallSizeFromFilename(regs*)>:
c00116dd:	57                   	push   edi
c00116de:	56                   	push   esi
c00116df:	53                   	push   ebx
c00116e0:	83 ec 20             	sub    esp,0x20
c00116e3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00116e7:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00116ea:	83 fb 02             	cmp    ebx,0x2
c00116ed:	0f 86 8c 00 00 00    	jbe    c001177f <sysCallSizeFromFilename(regs*)+0xa2>
c00116f3:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00116f9:	76 1b                	jbe    c0011716 <sysCallSizeFromFilename(regs*)+0x39>
c00116fb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00116fe:	31 d2                	xor    edx,edx
c0011700:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011706:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001170d:	83 c4 20             	add    esp,0x20
c0011710:	31 c0                	xor    eax,eax
c0011712:	5b                   	pop    ebx
c0011713:	5e                   	pop    esi
c0011714:	5f                   	pop    edi
c0011715:	c3                   	ret    
c0011716:	83 ec 0c             	sub    esp,0xc
c0011719:	68 14 01 00 00       	push   0x114
c001171e:	e8 2e 67 ff ff       	call   c0007e51 <malloc>
c0011723:	83 c4 0c             	add    esp,0xc
c0011726:	89 c7                	mov    edi,eax
c0011728:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001172d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011730:	50                   	push   eax
c0011731:	53                   	push   ebx
c0011732:	57                   	push   edi
c0011733:	e8 1e 9a ff ff       	call   c000b156 <File::File(char const*, Process*)>
c0011738:	83 c4 0c             	add    esp,0xc
c001173b:	8d 44 24 23          	lea    eax,[esp+0x23]
c001173f:	50                   	push   eax
c0011740:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011743:	52                   	push   edx
c0011744:	57                   	push   edi
c0011745:	e8 78 9d ff ff       	call   c000b4c2 <File::stat(unsigned long long*, bool*)>
c001174a:	83 c4 10             	add    esp,0x10
c001174d:	85 ff                	test   edi,edi
c001174f:	74 14                	je     c0011765 <sysCallSizeFromFilename(regs*)+0x88>
c0011751:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011755:	8b 17                	mov    edx,DWORD PTR [edi]
c0011757:	83 ec 0c             	sub    esp,0xc
c001175a:	57                   	push   edi
c001175b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001175e:	83 c4 10             	add    esp,0x10
c0011761:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011765:	85 c0                	test   eax,eax
c0011767:	0f 95 c0             	setne  al
c001176a:	31 d2                	xor    edx,edx
c001176c:	25 ff 00 00 00       	and    eax,0xff
c0011771:	f7 d8                	neg    eax
c0011773:	83 d2 00             	adc    edx,0x0
c0011776:	83 c4 20             	add    esp,0x20
c0011779:	f7 da                	neg    edx
c001177b:	5b                   	pop    ebx
c001177c:	5e                   	pop    esi
c001177d:	5f                   	pop    edi
c001177e:	c3                   	ret    
c001177f:	83 c4 20             	add    esp,0x20
c0011782:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011787:	5b                   	pop    ebx
c0011788:	ba ff ff ff ff       	mov    edx,0xffffffff
c001178d:	5e                   	pop    esi
c001178e:	5f                   	pop    edi
c001178f:	c3                   	ret    

c0011790 <sysCallClose(regs*)>:
c0011790:	53                   	push   ebx
c0011791:	83 ec 08             	sub    esp,0x8
c0011794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011798:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001179b:	83 f8 02             	cmp    eax,0x2
c001179e:	76 41                	jbe    c00117e1 <sysCallClose(regs*)+0x51>
c00117a0:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00117a6:	83 fa 01             	cmp    edx,0x1
c00117a9:	76 2d                	jbe    c00117d8 <sysCallClose(regs*)+0x48>
c00117ab:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00117b0:	77 2f                	ja     c00117e1 <sysCallClose(regs*)+0x51>
c00117b2:	83 ec 0c             	sub    esp,0xc
c00117b5:	50                   	push   eax
c00117b6:	e8 7c 80 ff ff       	call   c0009837 <getFromFileDescriptor(int)>
c00117bb:	89 c3                	mov    ebx,eax
c00117bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00117c0:	e8 af 9a ff ff       	call   c000b274 <File::close()>
c00117c5:	83 c4 10             	add    esp,0x10
c00117c8:	85 db                	test   ebx,ebx
c00117ca:	74 0c                	je     c00117d8 <sysCallClose(regs*)+0x48>
c00117cc:	83 ec 0c             	sub    esp,0xc
c00117cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117d1:	53                   	push   ebx
c00117d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00117d5:	83 c4 10             	add    esp,0x10
c00117d8:	31 c0                	xor    eax,eax
c00117da:	31 d2                	xor    edx,edx
c00117dc:	83 c4 08             	add    esp,0x8
c00117df:	5b                   	pop    ebx
c00117e0:	c3                   	ret    
c00117e1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117e6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117eb:	83 c4 08             	add    esp,0x8
c00117ee:	5b                   	pop    ebx
c00117ef:	c3                   	ret    

c00117f0 <sysCallOpenDir(regs*)>:
c00117f0:	56                   	push   esi
c00117f1:	53                   	push   ebx
c00117f2:	50                   	push   eax
c00117f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117f7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00117fa:	85 c0                	test   eax,eax
c00117fc:	74 5b                	je     c0011859 <sysCallOpenDir(regs*)+0x69>
c00117fe:	83 ec 0c             	sub    esp,0xc
c0011801:	68 14 01 00 00       	push   0x114
c0011806:	e8 46 66 ff ff       	call   c0007e51 <malloc>
c001180b:	83 c4 0c             	add    esp,0xc
c001180e:	89 c6                	mov    esi,eax
c0011810:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011815:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011818:	50                   	push   eax
c0011819:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001181c:	50                   	push   eax
c001181d:	56                   	push   esi
c001181e:	e8 5d 9e ff ff       	call   c000b680 <Directory::Directory(char const*, Process*)>
c0011823:	83 c4 10             	add    esp,0x10
c0011826:	85 f6                	test   esi,esi
c0011828:	74 2f                	je     c0011859 <sysCallOpenDir(regs*)+0x69>
c001182a:	83 ec 0c             	sub    esp,0xc
c001182d:	56                   	push   esi
c001182e:	e8 0d 9f ff ff       	call   c000b740 <Directory::open()>
c0011833:	83 c4 10             	add    esp,0x10
c0011836:	85 c0                	test   eax,eax
c0011838:	75 1f                	jne    c0011859 <sysCallOpenDir(regs*)+0x69>
c001183a:	83 ec 0c             	sub    esp,0xc
c001183d:	56                   	push   esi
c001183e:	e8 ff 7c ff ff       	call   c0009542 <UnixFile::getFileDescriptor()>
c0011843:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011846:	83 c4 10             	add    esp,0x10
c0011849:	89 02                	mov    DWORD PTR [edx],eax
c001184b:	c1 f8 1f             	sar    eax,0x1f
c001184e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011851:	31 c0                	xor    eax,eax
c0011853:	59                   	pop    ecx
c0011854:	31 d2                	xor    edx,edx
c0011856:	5b                   	pop    ebx
c0011857:	5e                   	pop    esi
c0011858:	c3                   	ret    
c0011859:	59                   	pop    ecx
c001185a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001185f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011864:	5b                   	pop    ebx
c0011865:	5e                   	pop    esi
c0011866:	c3                   	ret    

c0011867 <sysCallCloseDir(regs*)>:
c0011867:	53                   	push   ebx
c0011868:	83 ec 08             	sub    esp,0x8
c001186b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001186f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011872:	8d 50 fd             	lea    edx,[eax-0x3]
c0011875:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001187b:	77 2f                	ja     c00118ac <sysCallCloseDir(regs*)+0x45>
c001187d:	83 ec 0c             	sub    esp,0xc
c0011880:	50                   	push   eax
c0011881:	e8 b1 7f ff ff       	call   c0009837 <getFromFileDescriptor(int)>
c0011886:	89 c3                	mov    ebx,eax
c0011888:	89 04 24             	mov    DWORD PTR [esp],eax
c001188b:	e8 0c 9f ff ff       	call   c000b79c <Directory::close()>
c0011890:	83 c4 10             	add    esp,0x10
c0011893:	85 db                	test   ebx,ebx
c0011895:	74 0c                	je     c00118a3 <sysCallCloseDir(regs*)+0x3c>
c0011897:	83 ec 0c             	sub    esp,0xc
c001189a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001189c:	53                   	push   ebx
c001189d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118a0:	83 c4 10             	add    esp,0x10
c00118a3:	31 c0                	xor    eax,eax
c00118a5:	31 d2                	xor    edx,edx
c00118a7:	83 c4 08             	add    esp,0x8
c00118aa:	5b                   	pop    ebx
c00118ab:	c3                   	ret    
c00118ac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118b1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118b6:	83 c4 08             	add    esp,0x8
c00118b9:	5b                   	pop    ebx
c00118ba:	c3                   	ret    

c00118bb <sysCallMakeDir(regs*)>:
c00118bb:	56                   	push   esi
c00118bc:	53                   	push   ebx
c00118bd:	83 ec 10             	sub    esp,0x10
c00118c0:	68 14 01 00 00       	push   0x114
c00118c5:	e8 87 65 ff ff       	call   c0007e51 <malloc>
c00118ca:	83 c4 0c             	add    esp,0xc
c00118cd:	89 c3                	mov    ebx,eax
c00118cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118d4:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c00118d7:	56                   	push   esi
c00118d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00118dc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00118df:	50                   	push   eax
c00118e0:	53                   	push   ebx
c00118e1:	e8 9a 9d ff ff       	call   c000b680 <Directory::Directory(char const*, Process*)>
c00118e6:	83 c4 10             	add    esp,0x10
c00118e9:	85 db                	test   ebx,ebx
c00118eb:	74 32                	je     c001191f <sysCallMakeDir(regs*)+0x64>
c00118ed:	83 ec 0c             	sub    esp,0xc
c00118f0:	53                   	push   ebx
c00118f1:	e8 2a a0 ff ff       	call   c000b920 <Directory::create()>
c00118f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118f9:	89 c6                	mov    esi,eax
c00118fb:	e8 9c 9e ff ff       	call   c000b79c <Directory::close()>
c0011900:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011902:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011905:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011908:	83 c4 10             	add    esp,0x10
c001190b:	31 c0                	xor    eax,eax
c001190d:	59                   	pop    ecx
c001190e:	85 f6                	test   esi,esi
c0011910:	5b                   	pop    ebx
c0011911:	0f 95 c0             	setne  al
c0011914:	5e                   	pop    esi
c0011915:	31 d2                	xor    edx,edx
c0011917:	f7 d8                	neg    eax
c0011919:	83 d2 00             	adc    edx,0x0
c001191c:	f7 da                	neg    edx
c001191e:	c3                   	ret    
c001191f:	59                   	pop    ecx
c0011920:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011925:	ba ff ff ff ff       	mov    edx,0xffffffff
c001192a:	5b                   	pop    ebx
c001192b:	5e                   	pop    esi
c001192c:	c3                   	ret    

c001192d <sysCallWait(regs*)>:
c001192d:	83 ec 10             	sub    esp,0x10
c0011930:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011934:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011937:	52                   	push   edx
c0011938:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c001193b:	51                   	push   ecx
c001193c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001193f:	50                   	push   eax
c0011940:	e8 6b 23 00 00       	call   c0013cb0 <waitTask(int, int*, int)>
c0011945:	83 c4 1c             	add    esp,0x1c
c0011948:	99                   	cdq    
c0011949:	c3                   	ret    

c001194a <sysCallNotImpl(regs*)>:
c001194a:	83 ec 18             	sub    esp,0x18
c001194d:	68 a9 e8 01 c0       	push   0xc001e8a9
c0011952:	e8 d8 ed ff ff       	call   c001072f <Krnl::panic(char const*)>
c0011957:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001195c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011961:	83 c4 1c             	add    esp,0x1c
c0011964:	c3                   	ret    

c0011965 <sysPanic(regs*)>:
c0011965:	83 ec 18             	sub    esp,0x18
c0011968:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001196c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001196f:	50                   	push   eax
c0011970:	e8 ba ed ff ff       	call   c001072f <Krnl::panic(char const*)>
c0011975:	b8 01 00 00 00       	mov    eax,0x1
c001197a:	31 d2                	xor    edx,edx
c001197c:	83 c4 1c             	add    esp,0x1c
c001197f:	c3                   	ret    

c0011980 <sysCallRmdir(regs*)>:
c0011980:	56                   	push   esi
c0011981:	53                   	push   ebx
c0011982:	83 ec 20             	sub    esp,0x20
c0011985:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011989:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001198c:	68 14 01 00 00       	push   0x114
c0011991:	e8 bb 64 ff ff       	call   c0007e51 <malloc>
c0011996:	83 c4 0c             	add    esp,0xc
c0011999:	89 c3                	mov    ebx,eax
c001199b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119a0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119a3:	50                   	push   eax
c00119a4:	56                   	push   esi
c00119a5:	53                   	push   ebx
c00119a6:	e8 ab 97 ff ff       	call   c000b156 <File::File(char const*, Process*)>
c00119ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119ae:	e8 db 99 ff ff       	call   c000b38e <File::unlink()>
c00119b3:	83 c4 10             	add    esp,0x10
c00119b6:	85 db                	test   ebx,ebx
c00119b8:	74 14                	je     c00119ce <sysCallRmdir(regs*)+0x4e>
c00119ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119be:	8b 13                	mov    edx,DWORD PTR [ebx]
c00119c0:	83 ec 0c             	sub    esp,0xc
c00119c3:	53                   	push   ebx
c00119c4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00119c7:	83 c4 10             	add    esp,0x10
c00119ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119ce:	85 c0                	test   eax,eax
c00119d0:	0f 95 c0             	setne  al
c00119d3:	31 d2                	xor    edx,edx
c00119d5:	25 ff 00 00 00       	and    eax,0xff
c00119da:	f7 d8                	neg    eax
c00119dc:	83 d2 00             	adc    edx,0x0
c00119df:	83 c4 14             	add    esp,0x14
c00119e2:	f7 da                	neg    edx
c00119e4:	5b                   	pop    ebx
c00119e5:	5e                   	pop    esi
c00119e6:	c3                   	ret    

c00119e7 <sysCallUnlink(regs*)>:
c00119e7:	56                   	push   esi
c00119e8:	53                   	push   ebx
c00119e9:	83 ec 20             	sub    esp,0x20
c00119ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00119f0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00119f3:	68 14 01 00 00       	push   0x114
c00119f8:	e8 54 64 ff ff       	call   c0007e51 <malloc>
c00119fd:	83 c4 0c             	add    esp,0xc
c0011a00:	89 c3                	mov    ebx,eax
c0011a02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a07:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a0a:	50                   	push   eax
c0011a0b:	56                   	push   esi
c0011a0c:	53                   	push   ebx
c0011a0d:	e8 44 97 ff ff       	call   c000b156 <File::File(char const*, Process*)>
c0011a12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a15:	e8 74 99 ff ff       	call   c000b38e <File::unlink()>
c0011a1a:	83 c4 10             	add    esp,0x10
c0011a1d:	85 db                	test   ebx,ebx
c0011a1f:	74 14                	je     c0011a35 <sysCallUnlink(regs*)+0x4e>
c0011a21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a25:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011a27:	83 ec 0c             	sub    esp,0xc
c0011a2a:	53                   	push   ebx
c0011a2b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011a2e:	83 c4 10             	add    esp,0x10
c0011a31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a35:	85 c0                	test   eax,eax
c0011a37:	0f 95 c0             	setne  al
c0011a3a:	31 d2                	xor    edx,edx
c0011a3c:	25 ff 00 00 00       	and    eax,0xff
c0011a41:	f7 d8                	neg    eax
c0011a43:	83 d2 00             	adc    edx,0x0
c0011a46:	83 c4 14             	add    esp,0x14
c0011a49:	f7 da                	neg    edx
c0011a4b:	5b                   	pop    ebx
c0011a4c:	5e                   	pop    esi
c0011a4d:	c3                   	ret    

c0011a4e <sysCallGetArgv(regs*)>:
c0011a4e:	83 ec 0c             	sub    esp,0xc
c0011a51:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011a55:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011a58:	85 c0                	test   eax,eax
c0011a5a:	78 2c                	js     c0011a88 <sysCallGetArgv(regs*)+0x3a>
c0011a5c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011a62:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011a65:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011a6b:	7d 1b                	jge    c0011a88 <sysCallGetArgv(regs*)+0x3a>
c0011a6d:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011a74:	85 c0                	test   eax,eax
c0011a76:	74 18                	je     c0011a90 <sysCallGetArgv(regs*)+0x42>
c0011a78:	83 ec 08             	sub    esp,0x8
c0011a7b:	50                   	push   eax
c0011a7c:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011a7f:	50                   	push   eax
c0011a80:	e8 9b eb fe ff       	call   c0000620 <strcpy>
c0011a85:	83 c4 10             	add    esp,0x10
c0011a88:	31 c0                	xor    eax,eax
c0011a8a:	31 d2                	xor    edx,edx
c0011a8c:	83 c4 0c             	add    esp,0xc
c0011a8f:	c3                   	ret    
c0011a90:	b8 01 00 00 00       	mov    eax,0x1
c0011a95:	31 d2                	xor    edx,edx
c0011a97:	83 c4 0c             	add    esp,0xc
c0011a9a:	c3                   	ret    

c0011a9b <sysCallUSleep(regs*)>:
c0011a9b:	83 ec 1c             	sub    esp,0x1c
c0011a9e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011aa2:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011aa5:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011aa8:	6a 00                	push   0x0
c0011aaa:	6a 64                	push   0x64
c0011aac:	52                   	push   edx
c0011aad:	50                   	push   eax
c0011aae:	e8 fd a6 00 00       	call   c001c1b0 <__udivdi3>
c0011ab3:	83 c4 14             	add    esp,0x14
c0011ab6:	50                   	push   eax
c0011ab7:	e8 c8 22 00 00       	call   c0013d84 <milliTenthSleep(unsigned int)>
c0011abc:	31 c0                	xor    eax,eax
c0011abe:	31 d2                	xor    edx,edx
c0011ac0:	83 c4 1c             	add    esp,0x1c
c0011ac3:	c3                   	ret    

c0011ac4 <sysCallSpawn(regs*)>:
c0011ac4:	56                   	push   esi
c0011ac5:	53                   	push   ebx
c0011ac6:	50                   	push   eax
c0011ac7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011acb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ace:	85 c0                	test   eax,eax
c0011ad0:	75 08                	jne    c0011ada <sysCallSpawn(regs*)+0x16>
c0011ad2:	59                   	pop    ecx
c0011ad3:	31 c0                	xor    eax,eax
c0011ad5:	31 d2                	xor    edx,edx
c0011ad7:	5b                   	pop    ebx
c0011ad8:	5e                   	pop    esi
c0011ad9:	c3                   	ret    
c0011ada:	83 ec 0c             	sub    esp,0xc
c0011add:	68 1f 07 00 00       	push   0x71f
c0011ae2:	e8 6a 63 ff ff       	call   c0007e51 <malloc>
c0011ae7:	83 c4 10             	add    esp,0x10
c0011aea:	89 c6                	mov    esi,eax
c0011aec:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011aef:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011af2:	85 c0                	test   eax,eax
c0011af4:	75 33                	jne    c0011b29 <sysCallSpawn(regs*)+0x65>
c0011af6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011afb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011afe:	52                   	push   edx
c0011aff:	50                   	push   eax
c0011b00:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0011b03:	53                   	push   ebx
c0011b04:	56                   	push   esi
c0011b05:	e8 5e 19 00 00       	call   c0013468 <Process::Process(char const*, Process*, char**)>
c0011b0a:	83 c4 10             	add    esp,0x10
c0011b0d:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011b14:	75 bc                	jne    c0011ad2 <sysCallSpawn(regs*)+0xe>
c0011b16:	83 ec 0c             	sub    esp,0xc
c0011b19:	56                   	push   esi
c0011b1a:	e8 3d 1e 00 00       	call   c001395c <Process::createUserThread()>
c0011b1f:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b21:	83 c4 10             	add    esp,0x10
c0011b24:	99                   	cdq    
c0011b25:	59                   	pop    ecx
c0011b26:	5b                   	pop    ebx
c0011b27:	5e                   	pop    esi
c0011b28:	c3                   	ret    
c0011b29:	31 c0                	xor    eax,eax
c0011b2b:	eb d1                	jmp    c0011afe <sysCallSpawn(regs*)+0x3a>

c0011b2d <sysCallGetEnv(regs*)>:
c0011b2d:	57                   	push   edi
c0011b2e:	56                   	push   esi
c0011b2f:	53                   	push   ebx
c0011b30:	83 ec 1c             	sub    esp,0x1c
c0011b33:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011b37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b3c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011b3f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011b42:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b45:	50                   	push   eax
c0011b46:	e8 30 eb ff ff       	call   c001067b <Krnl::getProcessTotalEnvCount(Process*)>
c0011b4b:	83 c4 10             	add    esp,0x10
c0011b4e:	39 c7                	cmp    edi,eax
c0011b50:	7c 14                	jl     c0011b66 <sysCallGetEnv(regs*)+0x39>
c0011b52:	85 f6                	test   esi,esi
c0011b54:	75 0b                	jne    c0011b61 <sysCallGetEnv(regs*)+0x34>
c0011b56:	83 c4 10             	add    esp,0x10
c0011b59:	31 c0                	xor    eax,eax
c0011b5b:	5b                   	pop    ebx
c0011b5c:	31 d2                	xor    edx,edx
c0011b5e:	5e                   	pop    esi
c0011b5f:	5f                   	pop    edi
c0011b60:	c3                   	ret    
c0011b61:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b64:	eb f0                	jmp    c0011b56 <sysCallGetEnv(regs*)+0x29>
c0011b66:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011b6a:	52                   	push   edx
c0011b6b:	57                   	push   edi
c0011b6c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011b72:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0011b75:	51                   	push   ecx
c0011b76:	50                   	push   eax
c0011b77:	e8 1f eb ff ff       	call   c001069b <Krnl::getProcessEnvPair(Process*, int)>
c0011b7c:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011b7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011b83:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011b87:	83 c4 0c             	add    esp,0xc
c0011b8a:	85 db                	test   ebx,ebx
c0011b8c:	75 23                	jne    c0011bb1 <sysCallGetEnv(regs*)+0x84>
c0011b8e:	83 ec 0c             	sub    esp,0xc
c0011b91:	50                   	push   eax
c0011b92:	e8 c9 e9 fe ff       	call   c0000560 <strlen>
c0011b97:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b9a:	89 c3                	mov    ebx,eax
c0011b9c:	e8 bf e9 fe ff       	call   c0000560 <strlen>
c0011ba1:	31 d2                	xor    edx,edx
c0011ba3:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011ba7:	83 c4 10             	add    esp,0x10
c0011baa:	83 c4 10             	add    esp,0x10
c0011bad:	5b                   	pop    ebx
c0011bae:	5e                   	pop    esi
c0011baf:	5f                   	pop    edi
c0011bb0:	c3                   	ret    
c0011bb1:	83 ec 08             	sub    esp,0x8
c0011bb4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011bb7:	50                   	push   eax
c0011bb8:	56                   	push   esi
c0011bb9:	e8 62 ea fe ff       	call   c0000620 <strcpy>
c0011bbe:	58                   	pop    eax
c0011bbf:	5a                   	pop    edx
c0011bc0:	68 c3 e8 01 c0       	push   0xc001e8c3
c0011bc5:	56                   	push   esi
c0011bc6:	e8 15 ec fe ff       	call   c00007e0 <strcat>
c0011bcb:	59                   	pop    ecx
c0011bcc:	5b                   	pop    ebx
c0011bcd:	57                   	push   edi
c0011bce:	56                   	push   esi
c0011bcf:	e8 0c ec fe ff       	call   c00007e0 <strcat>
c0011bd4:	83 c4 10             	add    esp,0x10
c0011bd7:	e9 7a ff ff ff       	jmp    c0011b56 <sysCallGetEnv(regs*)+0x29>

c0011bdc <sysSetFatAttrib(regs*)>:
c0011bdc:	57                   	push   edi
c0011bdd:	56                   	push   esi
c0011bde:	53                   	push   ebx
c0011bdf:	83 ec 1c             	sub    esp,0x1c
c0011be2:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011be6:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011be9:	68 14 01 00 00       	push   0x114
c0011bee:	e8 5e 62 ff ff       	call   c0007e51 <malloc>
c0011bf3:	83 c4 0c             	add    esp,0xc
c0011bf6:	89 c3                	mov    ebx,eax
c0011bf8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bfd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c00:	50                   	push   eax
c0011c01:	57                   	push   edi
c0011c02:	53                   	push   ebx
c0011c03:	e8 4e 95 ff ff       	call   c000b156 <File::File(char const*, Process*)>
c0011c08:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011c0b:	83 c4 0c             	add    esp,0xc
c0011c0e:	0f b6 d4             	movzx  edx,ah
c0011c11:	25 ff 00 00 00       	and    eax,0xff
c0011c16:	52                   	push   edx
c0011c17:	50                   	push   eax
c0011c18:	53                   	push   ebx
c0011c19:	e8 0a 98 ff ff       	call   c000b428 <File::chfatattr(unsigned char, unsigned char)>
c0011c1e:	83 c4 10             	add    esp,0x10
c0011c21:	85 db                	test   ebx,ebx
c0011c23:	74 14                	je     c0011c39 <sysSetFatAttrib(regs*)+0x5d>
c0011c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c29:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c2b:	83 ec 0c             	sub    esp,0xc
c0011c2e:	53                   	push   ebx
c0011c2f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011c32:	83 c4 10             	add    esp,0x10
c0011c35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c39:	85 c0                	test   eax,eax
c0011c3b:	0f 95 c0             	setne  al
c0011c3e:	31 d2                	xor    edx,edx
c0011c40:	25 ff 00 00 00       	and    eax,0xff
c0011c45:	f7 d8                	neg    eax
c0011c47:	83 d2 00             	adc    edx,0x0
c0011c4a:	83 c4 10             	add    esp,0x10
c0011c4d:	f7 da                	neg    edx
c0011c4f:	5b                   	pop    ebx
c0011c50:	5e                   	pop    esi
c0011c51:	5f                   	pop    edi
c0011c52:	c3                   	ret    

c0011c53 <sysPipe(regs*)>:
c0011c53:	57                   	push   edi
c0011c54:	56                   	push   esi
c0011c55:	53                   	push   ebx
c0011c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c5a:	83 ec 0c             	sub    esp,0xc
c0011c5d:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011c60:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011c63:	6a 20                	push   0x20
c0011c65:	e8 e7 61 ff ff       	call   c0007e51 <malloc>
c0011c6a:	89 c3                	mov    ebx,eax
c0011c6c:	58                   	pop    eax
c0011c6d:	5a                   	pop    edx
c0011c6e:	68 00 50 00 00       	push   0x5000
c0011c73:	53                   	push   ebx
c0011c74:	e8 cf 6b ff ff       	call   c0008848 <Pipe::Pipe(int)>
c0011c79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c7c:	e8 c1 78 ff ff       	call   c0009542 <UnixFile::getFileDescriptor()>
c0011c81:	89 07                	mov    DWORD PTR [edi],eax
c0011c83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c86:	e8 b7 78 ff ff       	call   c0009542 <UnixFile::getFileDescriptor()>
c0011c8b:	83 c4 10             	add    esp,0x10
c0011c8e:	89 06                	mov    DWORD PTR [esi],eax
c0011c90:	31 d2                	xor    edx,edx
c0011c92:	5b                   	pop    ebx
c0011c93:	31 c0                	xor    eax,eax
c0011c95:	5e                   	pop    esi
c0011c96:	5f                   	pop    edi
c0011c97:	c3                   	ret    

c0011c98 <sysGetUnixTime(regs*)>:
c0011c98:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0011c9d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011ca3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ca7:	e9 ba 9e ff ff       	jmp    c000bb66 <Clock::timeInSecondsLocal()>

c0011cac <string_ends_with(char const*, char const*)>:
c0011cac:	57                   	push   edi
c0011cad:	56                   	push   esi
c0011cae:	53                   	push   ebx
c0011caf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cb3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011cb7:	83 ec 0c             	sub    esp,0xc
c0011cba:	53                   	push   ebx
c0011cbb:	e8 a0 e8 fe ff       	call   c0000560 <strlen>
c0011cc0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011cc3:	89 c6                	mov    esi,eax
c0011cc5:	e8 96 e8 fe ff       	call   c0000560 <strlen>
c0011cca:	83 c4 10             	add    esp,0x10
c0011ccd:	39 c6                	cmp    esi,eax
c0011ccf:	7d 06                	jge    c0011cd7 <string_ends_with(char const*, char const*)+0x2b>
c0011cd1:	5b                   	pop    ebx
c0011cd2:	31 c0                	xor    eax,eax
c0011cd4:	5e                   	pop    esi
c0011cd5:	5f                   	pop    edi
c0011cd6:	c3                   	ret    
c0011cd7:	83 ec 08             	sub    esp,0x8
c0011cda:	29 c6                	sub    esi,eax
c0011cdc:	57                   	push   edi
c0011cdd:	01 f3                	add    ebx,esi
c0011cdf:	53                   	push   ebx
c0011ce0:	e8 1b ea fe ff       	call   c0000700 <strcmp>
c0011ce5:	83 c4 10             	add    esp,0x10
c0011ce8:	85 c0                	test   eax,eax
c0011cea:	5b                   	pop    ebx
c0011ceb:	0f 94 c0             	sete   al
c0011cee:	5e                   	pop    esi
c0011cef:	25 ff 00 00 00       	and    eax,0xff
c0011cf4:	5f                   	pop    edi
c0011cf5:	c3                   	ret    

c0011cf6 <sysCallOpen(regs*)>:
c0011cf6:	56                   	push   esi
c0011cf7:	53                   	push   ebx
c0011cf8:	81 ec 04 01 00 00    	sub    esp,0x104
c0011cfe:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011d05:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011d08:	85 c9                	test   ecx,ecx
c0011d0a:	0f 84 b9 01 00 00    	je     c0011ec9 <sysCallOpen(regs*)+0x1d3>
c0011d10:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d13:	85 c0                	test   eax,eax
c0011d15:	0f 84 ae 01 00 00    	je     c0011ec9 <sysCallOpen(regs*)+0x1d3>
c0011d1b:	52                   	push   edx
c0011d1c:	68 c5 e8 01 c0       	push   0xc001e8c5
c0011d21:	50                   	push   eax
c0011d22:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011d26:	56                   	push   esi
c0011d27:	e8 80 92 ff ff       	call   c000afac <Fs::standardiseFiles(char*, char const*, char const*)>
c0011d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d2f:	e8 2c e8 fe ff       	call   c0000560 <strlen>
c0011d34:	83 c4 10             	add    esp,0x10
c0011d37:	48                   	dec    eax
c0011d38:	74 1d                	je     c0011d57 <sysCallOpen(regs*)+0x61>
c0011d3a:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011d3d:	eb 0f                	jmp    c0011d4e <sysCallOpen(regs*)+0x58>
c0011d3f:	80 fa 3a             	cmp    dl,0x3a
c0011d42:	74 0f                	je     c0011d53 <sysCallOpen(regs*)+0x5d>
c0011d44:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011d48:	48                   	dec    eax
c0011d49:	74 0c                	je     c0011d57 <sysCallOpen(regs*)+0x61>
c0011d4b:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011d4e:	80 fa 2e             	cmp    dl,0x2e
c0011d51:	75 ec                	jne    c0011d3f <sysCallOpen(regs*)+0x49>
c0011d53:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011d57:	83 ec 08             	sub    esp,0x8
c0011d5a:	68 c9 e8 01 c0       	push   0xc001e8c9
c0011d5f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d62:	50                   	push   eax
c0011d63:	e8 44 ff ff ff       	call   c0011cac <string_ends_with(char const*, char const*)>
c0011d68:	83 c4 10             	add    esp,0x10
c0011d6b:	85 c0                	test   eax,eax
c0011d6d:	74 1d                	je     c0011d8c <sysCallOpen(regs*)+0x96>
c0011d6f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d72:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011d78:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d7f:	81 c4 04 01 00 00    	add    esp,0x104
c0011d85:	31 c0                	xor    eax,eax
c0011d87:	31 d2                	xor    edx,edx
c0011d89:	5b                   	pop    ebx
c0011d8a:	5e                   	pop    esi
c0011d8b:	c3                   	ret    
c0011d8c:	83 ec 08             	sub    esp,0x8
c0011d8f:	68 ce e8 01 c0       	push   0xc001e8ce
c0011d94:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d97:	50                   	push   eax
c0011d98:	e8 0f ff ff ff       	call   c0011cac <string_ends_with(char const*, char const*)>
c0011d9d:	83 c4 10             	add    esp,0x10
c0011da0:	85 c0                	test   eax,eax
c0011da2:	75 cb                	jne    c0011d6f <sysCallOpen(regs*)+0x79>
c0011da4:	83 ec 08             	sub    esp,0x8
c0011da7:	68 ca e8 01 c0       	push   0xc001e8ca
c0011dac:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011daf:	50                   	push   eax
c0011db0:	e8 4b e9 fe ff       	call   c0000700 <strcmp>
c0011db5:	83 c4 10             	add    esp,0x10
c0011db8:	85 c0                	test   eax,eax
c0011dba:	74 b3                	je     c0011d6f <sysCallOpen(regs*)+0x79>
c0011dbc:	83 ec 08             	sub    esp,0x8
c0011dbf:	68 c9 e8 01 c0       	push   0xc001e8c9
c0011dc4:	56                   	push   esi
c0011dc5:	e8 e2 fe ff ff       	call   c0011cac <string_ends_with(char const*, char const*)>
c0011dca:	83 c4 10             	add    esp,0x10
c0011dcd:	85 c0                	test   eax,eax
c0011dcf:	75 9e                	jne    c0011d6f <sysCallOpen(regs*)+0x79>
c0011dd1:	83 ec 08             	sub    esp,0x8
c0011dd4:	68 d3 e8 01 c0       	push   0xc001e8d3
c0011dd9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ddc:	50                   	push   eax
c0011ddd:	e8 ca fe ff ff       	call   c0011cac <string_ends_with(char const*, char const*)>
c0011de2:	83 c4 10             	add    esp,0x10
c0011de5:	85 c0                	test   eax,eax
c0011de7:	0f 85 ef 00 00 00    	jne    c0011edc <sysCallOpen(regs*)+0x1e6>
c0011ded:	83 ec 08             	sub    esp,0x8
c0011df0:	68 d8 e8 01 c0       	push   0xc001e8d8
c0011df5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011df8:	50                   	push   eax
c0011df9:	e8 ae fe ff ff       	call   c0011cac <string_ends_with(char const*, char const*)>
c0011dfe:	83 c4 10             	add    esp,0x10
c0011e01:	85 c0                	test   eax,eax
c0011e03:	0f 85 d3 00 00 00    	jne    c0011edc <sysCallOpen(regs*)+0x1e6>
c0011e09:	83 ec 08             	sub    esp,0x8
c0011e0c:	68 d4 e8 01 c0       	push   0xc001e8d4
c0011e11:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011e14:	51                   	push   ecx
c0011e15:	e8 e6 e8 fe ff       	call   c0000700 <strcmp>
c0011e1a:	83 c4 10             	add    esp,0x10
c0011e1d:	85 c0                	test   eax,eax
c0011e1f:	0f 84 b7 00 00 00    	je     c0011edc <sysCallOpen(regs*)+0x1e6>
c0011e25:	83 ec 08             	sub    esp,0x8
c0011e28:	68 d3 e8 01 c0       	push   0xc001e8d3
c0011e2d:	56                   	push   esi
c0011e2e:	e8 79 fe ff ff       	call   c0011cac <string_ends_with(char const*, char const*)>
c0011e33:	83 c4 10             	add    esp,0x10
c0011e36:	85 c0                	test   eax,eax
c0011e38:	0f 85 9e 00 00 00    	jne    c0011edc <sysCallOpen(regs*)+0x1e6>
c0011e3e:	83 ec 0c             	sub    esp,0xc
c0011e41:	68 14 01 00 00       	push   0x114
c0011e46:	e8 06 60 ff ff       	call   c0007e51 <malloc>
c0011e4b:	83 c4 0c             	add    esp,0xc
c0011e4e:	89 c6                	mov    esi,eax
c0011e50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e55:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e58:	50                   	push   eax
c0011e59:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011e5c:	52                   	push   edx
c0011e5d:	56                   	push   esi
c0011e5e:	e8 f3 92 ff ff       	call   c000b156 <File::File(char const*, Process*)>
c0011e63:	83 c4 10             	add    esp,0x10
c0011e66:	85 f6                	test   esi,esi
c0011e68:	74 5f                	je     c0011ec9 <sysCallOpen(regs*)+0x1d3>
c0011e6a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e6d:	89 d0                	mov    eax,edx
c0011e6f:	25 ff 00 00 00       	and    eax,0xff
c0011e74:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011e77:	89 d0                	mov    eax,edx
c0011e79:	83 e0 01             	and    eax,0x1
c0011e7c:	f6 c2 02             	test   dl,0x2
c0011e7f:	74 03                	je     c0011e84 <sysCallOpen(regs*)+0x18e>
c0011e81:	83 c8 02             	or     eax,0x2
c0011e84:	f6 c2 04             	test   dl,0x4
c0011e87:	74 03                	je     c0011e8c <sysCallOpen(regs*)+0x196>
c0011e89:	83 c8 04             	or     eax,0x4
c0011e8c:	f6 c2 08             	test   dl,0x8
c0011e8f:	74 03                	je     c0011e94 <sysCallOpen(regs*)+0x19e>
c0011e91:	83 c8 0a             	or     eax,0xa
c0011e94:	83 e2 10             	and    edx,0x10
c0011e97:	74 03                	je     c0011e9c <sysCallOpen(regs*)+0x1a6>
c0011e99:	83 c8 12             	or     eax,0x12
c0011e9c:	83 ec 08             	sub    esp,0x8
c0011e9f:	50                   	push   eax
c0011ea0:	56                   	push   esi
c0011ea1:	e8 70 93 ff ff       	call   c000b216 <File::open(FileOpenMode)>
c0011ea6:	83 c4 10             	add    esp,0x10
c0011ea9:	85 c0                	test   eax,eax
c0011eab:	75 1c                	jne    c0011ec9 <sysCallOpen(regs*)+0x1d3>
c0011ead:	83 ec 0c             	sub    esp,0xc
c0011eb0:	56                   	push   esi
c0011eb1:	e8 8c 76 ff ff       	call   c0009542 <UnixFile::getFileDescriptor()>
c0011eb6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011eb9:	83 c4 10             	add    esp,0x10
c0011ebc:	89 02                	mov    DWORD PTR [edx],eax
c0011ebe:	c1 f8 1f             	sar    eax,0x1f
c0011ec1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011ec4:	e9 b6 fe ff ff       	jmp    c0011d7f <sysCallOpen(regs*)+0x89>
c0011ec9:	81 c4 04 01 00 00    	add    esp,0x104
c0011ecf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ed4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ed9:	5b                   	pop    ebx
c0011eda:	5e                   	pop    esi
c0011edb:	c3                   	ret    
c0011edc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011edf:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011ee5:	e9 8e fe ff ff       	jmp    c0011d78 <sysCallOpen(regs*)+0x82>

c0011eea <Sys::loadSyscalls()>:
c0011eea:	c7 05 40 34 02 c0 c6 12 01 c0 	mov    DWORD PTR ds:0xc0023440,0xc00112c6
c0011ef4:	c7 05 44 34 02 c0 bd 0e 01 c0 	mov    DWORD PTR ds:0xc0023444,0xc0010ebd
c0011efe:	c7 05 48 34 02 c0 ac 10 01 c0 	mov    DWORD PTR ds:0xc0023448,0xc00110ac
c0011f08:	c7 05 4c 34 02 c0 fc 11 01 c0 	mov    DWORD PTR ds:0xc002344c,0xc00111fc
c0011f12:	c7 05 50 34 02 c0 44 10 01 c0 	mov    DWORD PTR ds:0xc0023450,0xc0011044
c0011f1c:	c7 05 54 34 02 c0 f4 0e 01 c0 	mov    DWORD PTR ds:0xc0023454,0xc0010ef4
c0011f26:	c7 05 58 34 02 c0 d5 0e 01 c0 	mov    DWORD PTR ds:0xc0023458,0xc0010ed5
c0011f30:	c7 05 5c 34 02 c0 01 11 01 c0 	mov    DWORD PTR ds:0xc002345c,0xc0011101
c0011f3a:	c7 05 64 34 02 c0 90 17 01 c0 	mov    DWORD PTR ds:0xc0023464,0xc0011790
c0011f44:	c7 05 60 34 02 c0 f6 1c 01 c0 	mov    DWORD PTR ds:0xc0023460,0xc0011cf6
c0011f4e:	c7 05 68 34 02 c0 f0 17 01 c0 	mov    DWORD PTR ds:0xc0023468,0xc00117f0
c0011f58:	c7 05 6c 34 02 c0 c4 14 01 c0 	mov    DWORD PTR ds:0xc002346c,0xc00114c4
c0011f62:	c7 05 70 34 02 c0 eb 12 01 c0 	mov    DWORD PTR ds:0xc0023470,0xc00112eb
c0011f6c:	c7 05 74 34 02 c0 f0 12 01 c0 	mov    DWORD PTR ds:0xc0023474,0xc00112f0
c0011f76:	c7 05 78 34 02 c0 bb 18 01 c0 	mov    DWORD PTR ds:0xc0023478,0xc00118bb
c0011f80:	c7 05 7c 34 02 c0 67 18 01 c0 	mov    DWORD PTR ds:0xc002347c,0xc0011867
c0011f8a:	c7 05 80 34 02 c0 a0 15 01 c0 	mov    DWORD PTR ds:0xc0023480,0xc00115a0
c0011f94:	c7 05 84 34 02 c0 f9 15 01 c0 	mov    DWORD PTR ds:0xc0023484,0xc00115f9
c0011f9e:	c7 05 88 34 02 c0 68 16 01 c0 	mov    DWORD PTR ds:0xc0023488,0xc0011668
c0011fa8:	c7 05 8c 34 02 c0 f5 12 01 c0 	mov    DWORD PTR ds:0xc002348c,0xc00112f5
c0011fb2:	c7 05 90 34 02 c0 2d 19 01 c0 	mov    DWORD PTR ds:0xc0023490,0xc001192d
c0011fbc:	c7 05 94 34 02 c0 4a 19 01 c0 	mov    DWORD PTR ds:0xc0023494,0xc001194a
c0011fc6:	c7 05 98 34 02 c0 4a 19 01 c0 	mov    DWORD PTR ds:0xc0023498,0xc001194a
c0011fd0:	c7 05 9c 34 02 c0 80 19 01 c0 	mov    DWORD PTR ds:0xc002349c,0xc0011980
c0011fda:	c7 05 a0 34 02 c0 e7 19 01 c0 	mov    DWORD PTR ds:0xc00234a0,0xc00119e7
c0011fe4:	c7 05 a4 34 02 c0 ff 12 01 c0 	mov    DWORD PTR ds:0xc00234a4,0xc00112ff
c0011fee:	c7 05 a8 34 02 c0 4e 1a 01 c0 	mov    DWORD PTR ds:0xc00234a8,0xc0011a4e
c0011ff8:	c7 05 ac 34 02 c0 81 14 01 c0 	mov    DWORD PTR ds:0xc00234ac,0xc0011481
c0012002:	c7 05 b0 34 02 c0 0f 13 01 c0 	mov    DWORD PTR ds:0xc00234b0,0xc001130f
c001200c:	c7 05 b4 34 02 c0 44 15 01 c0 	mov    DWORD PTR ds:0xc00234b4,0xc0011544
c0012016:	c7 05 b8 34 02 c0 9b 1a 01 c0 	mov    DWORD PTR ds:0xc00234b8,0xc0011a9b
c0012020:	c7 05 bc 34 02 c0 dd 16 01 c0 	mov    DWORD PTR ds:0xc00234bc,0xc00116dd
c001202a:	c7 05 c0 34 02 c0 c4 1a 01 c0 	mov    DWORD PTR ds:0xc00234c0,0xc0011ac4
c0012034:	c7 05 c4 34 02 c0 2d 1b 01 c0 	mov    DWORD PTR ds:0xc00234c4,0xc0011b2d
c001203e:	c7 05 cc 34 02 c0 17 13 01 c0 	mov    DWORD PTR ds:0xc00234cc,0xc0011317
c0012048:	c7 05 d0 34 02 c0 84 13 01 c0 	mov    DWORD PTR ds:0xc00234d0,0xc0011384
c0012052:	c7 05 d4 34 02 c0 ce 13 01 c0 	mov    DWORD PTR ds:0xc00234d4,0xc00113ce
c001205c:	c7 05 d8 34 02 c0 dc 1b 01 c0 	mov    DWORD PTR ds:0xc00234d8,0xc0011bdc
c0012066:	c7 05 dc 34 02 c0 65 19 01 c0 	mov    DWORD PTR ds:0xc00234dc,0xc0011965
c0012070:	c7 05 e0 34 02 c0 23 14 01 c0 	mov    DWORD PTR ds:0xc00234e0,0xc0011423
c001207a:	c7 05 e4 34 02 c0 53 1c 01 c0 	mov    DWORD PTR ds:0xc00234e4,0xc0011c53
c0012084:	c7 05 e8 34 02 c0 98 1c 01 c0 	mov    DWORD PTR ds:0xc00234e8,0xc0011c98
c001208e:	c7 05 ec 34 02 c0 9c 0f 01 c0 	mov    DWORD PTR ds:0xc00234ec,0xc0010f9c
c0012098:	c7 05 f0 34 02 c0 1d 11 01 c0 	mov    DWORD PTR ds:0xc00234f0,0xc001111d
c00120a2:	c7 05 f4 34 02 c0 b2 11 01 c0 	mov    DWORD PTR ds:0xc00234f4,0xc00111b2
c00120ac:	c7 05 f8 34 02 c0 87 0e 01 c0 	mov    DWORD PTR ds:0xc00234f8,0xc0010e87
c00120b6:	c7 05 fc 34 02 c0 64 12 01 c0 	mov    DWORD PTR ds:0xc00234fc,0xc0011264
c00120c0:	c7 05 00 35 02 c0 00 0f 01 c0 	mov    DWORD PTR ds:0xc0023500,0xc0010f00
c00120ca:	c7 05 04 35 02 c0 1a 0f 01 c0 	mov    DWORD PTR ds:0xc0023504,0xc0010f1a
c00120d4:	c3                   	ret    

c00120d5 <Sys::systemCall(regs*, void*)>:
c00120d5:	53                   	push   ebx
c00120d6:	83 ec 08             	sub    esp,0x8
c00120d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120dd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00120e0:	83 f8 7f             	cmp    eax,0x7f
c00120e3:	77 16                	ja     c00120fb <Sys::systemCall(regs*, void*)+0x26>
c00120e5:	8b 14 85 40 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcbc0]
c00120ec:	85 d2                	test   edx,edx
c00120ee:	74 0b                	je     c00120fb <Sys::systemCall(regs*, void*)+0x26>
c00120f0:	83 ec 0c             	sub    esp,0xc
c00120f3:	53                   	push   ebx
c00120f4:	ff d2                	call   edx
c00120f6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00120f9:	eb 0d                	jmp    c0012108 <Sys::systemCall(regs*, void*)+0x33>
c00120fb:	52                   	push   edx
c00120fc:	52                   	push   edx
c00120fd:	50                   	push   eax
c00120fe:	68 dd e8 01 c0       	push   0xc001e8dd
c0012103:	e8 d8 8a ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0012108:	83 c4 10             	add    esp,0x10
c001210b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012110:	31 d2                	xor    edx,edx
c0012112:	83 c4 08             	add    esp,0x8
c0012115:	5b                   	pop    ebx
c0012116:	c3                   	ret    

c0012117 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0012117:	55                   	push   ebp
c0012118:	57                   	push   edi
c0012119:	56                   	push   esi
c001211a:	53                   	push   ebx
c001211b:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0012121:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0012129:	0f 95 c2             	setne  dl
c001212c:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0012134:	0f 94 c0             	sete   al
c0012137:	84 c2                	test   dl,al
c0012139:	74 34                	je     c001216f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c001213b:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0012146:	74 27                	je     c001216f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0012148:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001214f:	05 00 10 00 00       	add    eax,0x1000
c0012154:	89 c1                	mov    ecx,eax
c0012156:	25 00 f0 ff ff       	and    eax,0xfffff000
c001215b:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0012161:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0012168:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c001216f:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0012176:	83 ec 0c             	sub    esp,0xc
c0012179:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001217f:	6a 01                	push   0x1
c0012181:	e8 07 78 ff ff       	call   c000998d <Virt::allocateKernelVirtualPages(int)>
c0012186:	83 c4 10             	add    esp,0x10
c0012189:	89 c3                	mov    ebx,eax
c001218b:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0012191:	0f 86 25 01 00 00    	jbe    c00122bc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0012197:	c1 ee 0c             	shr    esi,0xc
c001219a:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00121a1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00121a5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00121ad:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00121b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121b8:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00121bf:	29 ef                	sub    edi,ebp
c00121c1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00121c5:	0f 83 f8 00 00 00    	jae    c00122c3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c00121cb:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00121d1:	76 05                	jbe    c00121d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c00121d3:	bf 00 10 00 00       	mov    edi,0x1000
c00121d8:	83 ec 0c             	sub    esp,0xc
c00121db:	31 d2                	xor    edx,edx
c00121dd:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00121e4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00121e6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00121ea:	50                   	push   eax
c00121eb:	8d 74 24 30          	lea    esi,[esp+0x30]
c00121ef:	56                   	push   esi
c00121f0:	52                   	push   edx
c00121f1:	57                   	push   edi
c00121f2:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00121f9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00121fc:	83 c4 20             	add    esp,0x20
c00121ff:	85 c0                	test   eax,eax
c0012201:	75 06                	jne    c0012209 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0012203:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0012207:	74 13                	je     c001221c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0012209:	83 ec 0c             	sub    esp,0xc
c001220c:	53                   	push   ebx
c001220d:	e8 ab 7a ff ff       	call   c0009cbd <Virt::freeKernelVirtualPages(unsigned long)>
c0012212:	83 c4 10             	add    esp,0x10
c0012215:	31 c0                	xor    eax,eax
c0012217:	e9 7c 01 00 00       	jmp    c0012398 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c001221c:	fa                   	cli    
c001221d:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0012223:	e8 f6 5f ff ff       	call   c000821e <Phys::allocatePage()>
c0012228:	6a 07                	push   0x7
c001222a:	89 c7                	mov    edi,eax
c001222c:	53                   	push   ebx
c001222d:	50                   	push   eax
c001222e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012233:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012236:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001223c:	e8 e1 7d ff ff       	call   c000a022 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012241:	83 c4 0c             	add    esp,0xc
c0012244:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001224b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012251:	6a 00                	push   0x0
c0012253:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012258:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001225b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012261:	e8 2e 7c ff ff       	call   c0009e94 <VAS::mapOtherVASIn(bool, VAS*)>
c0012266:	58                   	pop    eax
c0012267:	5a                   	pop    edx
c0012268:	68 07 0c 00 00       	push   0xc07
c001226d:	55                   	push   ebp
c001226e:	57                   	push   edi
c001226f:	89 df                	mov    edi,ebx
c0012271:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012278:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001227e:	6a 00                	push   0x0
c0012280:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012285:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012288:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001228e:	e8 4f 81 ff ff       	call   c000a3e2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012293:	b9 00 10 00 00       	mov    ecx,0x1000
c0012298:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001229a:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c001229f:	83 c4 20             	add    esp,0x20
c00122a2:	48                   	dec    eax
c00122a3:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00122a8:	85 c0                	test   eax,eax
c00122aa:	75 01                	jne    c00122ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c00122ac:	fb                   	sti    
c00122ad:	81 c5 00 10 00 00    	add    ebp,0x1000
c00122b3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00122b7:	e9 f1 fe ff ff       	jmp    c00121ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c00122bc:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00122c3:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00122ca:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00122d0:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00122d6:	0f 86 ae 00 00 00    	jbe    c001238a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c00122dc:	fa                   	cli    
c00122dd:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c00122e3:	c1 ee 0c             	shr    esi,0xc
c00122e6:	51                   	push   ecx
c00122e7:	31 ff                	xor    edi,edi
c00122e9:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00122f0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00122f6:	6a 00                	push   0x0
c00122f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122fd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012300:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012306:	e8 89 7b ff ff       	call   c0009e94 <VAS::mapOtherVASIn(bool, VAS*)>
c001230b:	83 c4 10             	add    esp,0x10
c001230e:	e8 0b 5f ff ff       	call   c000821e <Phys::allocatePage()>
c0012313:	47                   	inc    edi
c0012314:	6a 07                	push   0x7
c0012316:	53                   	push   ebx
c0012317:	50                   	push   eax
c0012318:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001231c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012322:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0012325:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c001232b:	e8 f2 7c ff ff       	call   c000a022 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012330:	58                   	pop    eax
c0012331:	5a                   	pop    edx
c0012332:	68 07 0c 00 00       	push   0xc07
c0012337:	55                   	push   ebp
c0012338:	81 c5 00 10 00 00    	add    ebp,0x1000
c001233e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012342:	50                   	push   eax
c0012343:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001234a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012350:	6a 00                	push   0x0
c0012352:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012357:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001235a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012360:	e8 7d 80 ff ff       	call   c000a3e2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012365:	83 c4 1c             	add    esp,0x1c
c0012368:	68 00 10 00 00       	push   0x1000
c001236d:	6a 00                	push   0x0
c001236f:	53                   	push   ebx
c0012370:	e8 7b e1 fe ff       	call   c00004f0 <memset>
c0012375:	83 c4 10             	add    esp,0x10
c0012378:	39 fe                	cmp    esi,edi
c001237a:	77 92                	ja     c001230e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c001237c:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0012381:	48                   	dec    eax
c0012382:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0012387:	75 01                	jne    c001238a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012389:	fb                   	sti    
c001238a:	83 ec 0c             	sub    esp,0xc
c001238d:	53                   	push   ebx
c001238e:	e8 2a 79 ff ff       	call   c0009cbd <Virt::freeKernelVirtualPages(unsigned long)>
c0012393:	83 c4 10             	add    esp,0x10
c0012396:	b0 01                	mov    al,0x1
c0012398:	81 c4 2c 10 00 00    	add    esp,0x102c
c001239e:	5b                   	pop    ebx
c001239f:	5e                   	pop    esi
c00123a0:	5f                   	pop    edi
c00123a1:	5d                   	pop    ebp
c00123a2:	c3                   	ret    

c00123a3 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00123a3:	55                   	push   ebp
c00123a4:	57                   	push   edi
c00123a5:	56                   	push   esi
c00123a6:	53                   	push   ebx
c00123a7:	83 ec 48             	sub    esp,0x48
c00123aa:	68 14 01 00 00       	push   0x114
c00123af:	e8 9d 5a ff ff       	call   c0007e51 <malloc>
c00123b4:	83 c4 0c             	add    esp,0xc
c00123b7:	89 c6                	mov    esi,eax
c00123b9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00123bd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00123c1:	50                   	push   eax
c00123c2:	e8 8f 8d ff ff       	call   c000b156 <File::File(char const*, Process*)>
c00123c7:	58                   	pop    eax
c00123c8:	5a                   	pop    edx
c00123c9:	6a 01                	push   0x1
c00123cb:	56                   	push   esi
c00123cc:	e8 45 8e ff ff       	call   c000b216 <File::open(FileOpenMode)>
c00123d1:	83 c4 10             	add    esp,0x10
c00123d4:	85 c0                	test   eax,eax
c00123d6:	0f 85 47 01 00 00    	jne    c0012523 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00123dc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00123e4:	83 ec 0c             	sub    esp,0xc
c00123e7:	6a 34                	push   0x34
c00123e9:	e8 63 5a ff ff       	call   c0007e51 <malloc>
c00123ee:	89 c3                	mov    ebx,eax
c00123f0:	58                   	pop    eax
c00123f1:	8b 06                	mov    eax,DWORD PTR [esi]
c00123f3:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00123f7:	57                   	push   edi
c00123f8:	53                   	push   ebx
c00123f9:	6a 00                	push   0x0
c00123fb:	6a 34                	push   0x34
c00123fd:	56                   	push   esi
c00123fe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012401:	83 c4 20             	add    esp,0x20
c0012404:	85 c0                	test   eax,eax
c0012406:	0f 85 17 01 00 00    	jne    c0012523 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001240c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0012412:	0f 85 0b 01 00 00    	jne    c0012523 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012418:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001241b:	85 c0                	test   eax,eax
c001241d:	0f 84 00 01 00 00    	je     c0012523 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012423:	31 d2                	xor    edx,edx
c0012425:	55                   	push   ebp
c0012426:	52                   	push   edx
c0012427:	50                   	push   eax
c0012428:	56                   	push   esi
c0012429:	e8 a6 8e ff ff       	call   c000b2d4 <File::seek(unsigned long long)>
c001242e:	83 c4 10             	add    esp,0x10
c0012431:	85 c0                	test   eax,eax
c0012433:	0f 85 ea 00 00 00    	jne    c0012523 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012439:	83 ec 0c             	sub    esp,0xc
c001243c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001243f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012447:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001244b:	0f af c2             	imul   eax,edx
c001244e:	50                   	push   eax
c001244f:	e8 fd 59 ff ff       	call   c0007e51 <malloc>
c0012454:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012456:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001245a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001245d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012461:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012465:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012469:	0f af c2             	imul   eax,edx
c001246c:	99                   	cdq    
c001246d:	52                   	push   edx
c001246e:	50                   	push   eax
c001246f:	56                   	push   esi
c0012470:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012473:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0012476:	83 c4 20             	add    esp,0x20
c0012479:	85 c0                	test   eax,eax
c001247b:	0f 84 a2 00 00 00    	je     c0012523 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012481:	31 d2                	xor    edx,edx
c0012483:	51                   	push   ecx
c0012484:	52                   	push   edx
c0012485:	50                   	push   eax
c0012486:	56                   	push   esi
c0012487:	e8 48 8e ff ff       	call   c000b2d4 <File::seek(unsigned long long)>
c001248c:	83 c4 10             	add    esp,0x10
c001248f:	85 c0                	test   eax,eax
c0012491:	0f 85 8c 00 00 00    	jne    c0012523 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012497:	83 ec 0c             	sub    esp,0xc
c001249a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001249e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00124a2:	31 ed                	xor    ebp,ebp
c00124a4:	0f af c2             	imul   eax,edx
c00124a7:	50                   	push   eax
c00124a8:	e8 a4 59 ff ff       	call   c0007e51 <malloc>
c00124ad:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00124af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124b3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00124b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124ba:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00124be:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00124c2:	0f af c2             	imul   eax,edx
c00124c5:	99                   	cdq    
c00124c6:	52                   	push   edx
c00124c7:	50                   	push   eax
c00124c8:	56                   	push   esi
c00124c9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00124cc:	83 c4 20             	add    esp,0x20
c00124cf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00124d7:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00124db:	0f 86 80 00 00 00    	jbe    c0012561 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00124e1:	0f b7 fd             	movzx  edi,bp
c00124e4:	c1 e7 05             	shl    edi,0x5
c00124e7:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00124eb:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00124ee:	75 6b                	jne    c001255b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00124f0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00124f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00124f7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00124fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00124fe:	52                   	push   edx
c00124ff:	31 d2                	xor    edx,edx
c0012501:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012504:	52                   	push   edx
c0012505:	50                   	push   eax
c0012506:	56                   	push   esi
c0012507:	e8 c8 8d ff ff       	call   c000b2d4 <File::seek(unsigned long long)>
c001250c:	83 c4 10             	add    esp,0x10
c001250f:	85 c0                	test   eax,eax
c0012511:	74 17                	je     c001252a <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0012513:	83 ec 0c             	sub    esp,0xc
c0012516:	68 f1 e8 01 c0       	push   0xc001e8f1
c001251b:	e8 c0 86 ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0012520:	83 c4 10             	add    esp,0x10
c0012523:	31 c0                	xor    eax,eax
c0012525:	e9 87 00 00 00       	jmp    c00125b1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001252a:	83 ec 0c             	sub    esp,0xc
c001252d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0012530:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0012533:	50                   	push   eax
c0012534:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012538:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001253c:	56                   	push   esi
c001253d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0012541:	e8 d1 fb ff ff       	call   c0012117 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0012546:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001254a:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001254e:	83 c4 20             	add    esp,0x20
c0012551:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0012555:	73 04                	jae    c001255b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012557:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001255b:	45                   	inc    ebp
c001255c:	e9 76 ff ff ff       	jmp    c00124d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0012561:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0012565:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012569:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001256d:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0012573:	83 ec 0c             	sub    esp,0xc
c0012576:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c001257c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012581:	05 00 10 00 00       	add    eax,0x1000
c0012586:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001258d:	e8 cf 58 ff ff       	call   c0007e61 <free>
c0012592:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012595:	e8 c7 58 ff ff       	call   c0007e61 <free>
c001259a:	58                   	pop    eax
c001259b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001259f:	e8 bd 58 ff ff       	call   c0007e61 <free>
c00125a4:	89 34 24             	mov    DWORD PTR [esp],esi
c00125a7:	e8 c8 8c ff ff       	call   c000b274 <File::close()>
c00125ac:	83 c4 10             	add    esp,0x10
c00125af:	b0 01                	mov    al,0x1
c00125b1:	83 c4 3c             	add    esp,0x3c
c00125b4:	5b                   	pop    ebx
c00125b5:	5e                   	pop    esi
c00125b6:	5f                   	pop    edi
c00125b7:	5d                   	pop    ebp
c00125b8:	c3                   	ret    

c00125b9 <Thr::runtimeReferenceHelper()>:
c00125b9:	83 ec 18             	sub    esp,0x18
c00125bc:	68 f9 e8 01 c0       	push   0xc001e8f9
c00125c1:	e8 1a 86 ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c00125c6:	fa                   	cli    
c00125c7:	83 c4 10             	add    esp,0x10
c00125ca:	eb fe                	jmp    c00125ca <Thr::runtimeReferenceHelper()+0x11>

c00125cc <Thr::getAddressOfKernelSymbol(char const*)>:
c00125cc:	57                   	push   edi
c00125cd:	56                   	push   esi
c00125ce:	53                   	push   ebx
c00125cf:	31 db                	xor    ebx,ebx
c00125d1:	39 1d e0 3d 02 c0    	cmp    DWORD PTR ds:0xc0023de0,ebx
c00125d7:	7e 3c                	jle    c0012615 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00125d9:	8b 34 9d 60 3d 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc2a0]
c00125e0:	31 ff                	xor    edi,edi
c00125e2:	39 3c 9d 60 3c 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc3a0],edi
c00125e9:	7e 27                	jle    c0012612 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00125eb:	50                   	push   eax
c00125ec:	50                   	push   eax
c00125ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00125f1:	8b 06                	mov    eax,DWORD PTR [esi]
c00125f3:	03 04 9d e0 3c 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc320]
c00125fa:	50                   	push   eax
c00125fb:	e8 00 e1 fe ff       	call   c0000700 <strcmp>
c0012600:	83 c4 10             	add    esp,0x10
c0012603:	85 c0                	test   eax,eax
c0012605:	75 05                	jne    c001260c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0012607:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001260a:	eb 0b                	jmp    c0012617 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001260c:	83 c6 10             	add    esi,0x10
c001260f:	47                   	inc    edi
c0012610:	eb d0                	jmp    c00125e2 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0012612:	43                   	inc    ebx
c0012613:	eb bc                	jmp    c00125d1 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0012615:	31 c0                	xor    eax,eax
c0012617:	5b                   	pop    ebx
c0012618:	5e                   	pop    esi
c0012619:	5f                   	pop    edi
c001261a:	c3                   	ret    

c001261b <Thr::loadKernelSymbolTable(char const*)>:
c001261b:	55                   	push   ebp
c001261c:	57                   	push   edi
c001261d:	56                   	push   esi
c001261e:	53                   	push   ebx
c001261f:	83 ec 68             	sub    esp,0x68
c0012622:	8b 35 30 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023e30
c0012628:	68 14 01 00 00       	push   0x114
c001262d:	e8 1f 58 ff ff       	call   c0007e51 <malloc>
c0012632:	83 c4 0c             	add    esp,0xc
c0012635:	89 c3                	mov    ebx,eax
c0012637:	56                   	push   esi
c0012638:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001263c:	50                   	push   eax
c001263d:	e8 14 8b ff ff       	call   c000b156 <File::File(char const*, Process*)>
c0012642:	5e                   	pop    esi
c0012643:	5f                   	pop    edi
c0012644:	6a 01                	push   0x1
c0012646:	53                   	push   ebx
c0012647:	e8 ca 8b ff ff       	call   c000b216 <File::open(FileOpenMode)>
c001264c:	83 c4 10             	add    esp,0x10
c001264f:	85 c0                	test   eax,eax
c0012651:	74 0a                	je     c001265d <Thr::loadKernelSymbolTable(char const*)+0x42>
c0012653:	83 ec 0c             	sub    esp,0xc
c0012656:	68 1b e9 01 c0       	push   0xc001e91b
c001265b:	eb 34                	jmp    c0012691 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001265d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0012665:	83 ec 0c             	sub    esp,0xc
c0012668:	6a 34                	push   0x34
c001266a:	e8 e2 57 ff ff       	call   c0007e51 <malloc>
c001266f:	59                   	pop    ecx
c0012670:	89 c7                	mov    edi,eax
c0012672:	8d 74 24 34          	lea    esi,[esp+0x34]
c0012676:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012678:	56                   	push   esi
c0012679:	57                   	push   edi
c001267a:	6a 00                	push   0x0
c001267c:	6a 34                	push   0x34
c001267e:	53                   	push   ebx
c001267f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012682:	83 c4 20             	add    esp,0x20
c0012685:	85 c0                	test   eax,eax
c0012687:	74 17                	je     c00126a0 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0012689:	83 ec 0c             	sub    esp,0xc
c001268c:	68 32 e9 01 c0       	push   0xc001e932
c0012691:	e8 99 e0 ff ff       	call   c001072f <Krnl::panic(char const*)>
c0012696:	83 c4 10             	add    esp,0x10
c0012699:	31 c0                	xor    eax,eax
c001269b:	e9 31 02 00 00       	jmp    c00128d1 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00126a0:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00126a6:	75 e1                	jne    c0012689 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00126a8:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00126ab:	85 c0                	test   eax,eax
c00126ad:	74 da                	je     c0012689 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00126af:	52                   	push   edx
c00126b0:	31 d2                	xor    edx,edx
c00126b2:	52                   	push   edx
c00126b3:	50                   	push   eax
c00126b4:	53                   	push   ebx
c00126b5:	e8 1a 8c ff ff       	call   c000b2d4 <File::seek(unsigned long long)>
c00126ba:	83 c4 10             	add    esp,0x10
c00126bd:	85 c0                	test   eax,eax
c00126bf:	75 c8                	jne    c0012689 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00126c1:	83 ec 0c             	sub    esp,0xc
c00126c4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00126c8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126cc:	31 ed                	xor    ebp,ebp
c00126ce:	0f af c2             	imul   eax,edx
c00126d1:	50                   	push   eax
c00126d2:	e8 7a 57 ff ff       	call   c0007e51 <malloc>
c00126d7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00126d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126dd:	89 34 24             	mov    DWORD PTR [esp],esi
c00126e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126e4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00126e8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126ec:	0f af c2             	imul   eax,edx
c00126ef:	99                   	cdq    
c00126f0:	52                   	push   edx
c00126f1:	50                   	push   eax
c00126f2:	53                   	push   ebx
c00126f3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00126f6:	83 c4 20             	add    esp,0x20
c00126f9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012701:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012709:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012711:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012719:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001271d:	0f 86 aa 00 00 00    	jbe    c00127cd <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0012723:	0f b7 f5             	movzx  esi,bp
c0012726:	6b f6 28             	imul   esi,esi,0x28
c0012729:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001272d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012730:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012734:	50                   	push   eax
c0012735:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012739:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001273d:	8b 16                	mov    edx,DWORD PTR [esi]
c001273f:	6b c0 28             	imul   eax,eax,0x28
c0012742:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0012746:	89 d0                	mov    eax,edx
c0012748:	31 d2                	xor    edx,edx
c001274a:	52                   	push   edx
c001274b:	50                   	push   eax
c001274c:	53                   	push   ebx
c001274d:	e8 82 8b ff ff       	call   c000b2d4 <File::seek(unsigned long long)>
c0012752:	83 c4 0c             	add    esp,0xc
c0012755:	6a 20                	push   0x20
c0012757:	6a 00                	push   0x0
c0012759:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001275d:	52                   	push   edx
c001275e:	e8 8d dd fe ff       	call   c00004f0 <memset>
c0012763:	58                   	pop    eax
c0012764:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012766:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001276a:	51                   	push   ecx
c001276b:	8d 54 24 40          	lea    edx,[esp+0x40]
c001276f:	52                   	push   edx
c0012770:	6a 00                	push   0x0
c0012772:	6a 1f                	push   0x1f
c0012774:	53                   	push   ebx
c0012775:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012778:	83 c4 18             	add    esp,0x18
c001277b:	68 49 e9 01 c0       	push   0xc001e949
c0012780:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012784:	52                   	push   edx
c0012785:	e8 76 df fe ff       	call   c0000700 <strcmp>
c001278a:	83 c4 10             	add    esp,0x10
c001278d:	85 c0                	test   eax,eax
c001278f:	75 0f                	jne    c00127a0 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012791:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012794:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012798:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001279c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127a0:	50                   	push   eax
c00127a1:	50                   	push   eax
c00127a2:	68 51 e9 01 c0       	push   0xc001e951
c00127a7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00127ab:	50                   	push   eax
c00127ac:	e8 4f df fe ff       	call   c0000700 <strcmp>
c00127b1:	83 c4 10             	add    esp,0x10
c00127b4:	85 c0                	test   eax,eax
c00127b6:	75 0f                	jne    c00127c7 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00127b8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00127bb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00127c7:	45                   	inc    ebp
c00127c8:	e9 4c ff ff ff       	jmp    c0012719 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00127cd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00127d2:	75 10                	jne    c00127e4 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00127d4:	83 ec 0c             	sub    esp,0xc
c00127d7:	68 59 e9 01 c0       	push   0xc001e959
c00127dc:	e8 4e df ff ff       	call   c001072f <Krnl::panic(char const*)>
c00127e1:	83 c4 10             	add    esp,0x10
c00127e4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00127e9:	75 10                	jne    c00127fb <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00127eb:	83 ec 0c             	sub    esp,0xc
c00127ee:	68 59 e9 01 c0       	push   0xc001e959
c00127f3:	e8 37 df ff ff       	call   c001072f <Krnl::panic(char const*)>
c00127f8:	83 c4 10             	add    esp,0x10
c00127fb:	31 d2                	xor    edx,edx
c00127fd:	50                   	push   eax
c00127fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012802:	52                   	push   edx
c0012803:	50                   	push   eax
c0012804:	53                   	push   ebx
c0012805:	e8 ca 8a ff ff       	call   c000b2d4 <File::seek(unsigned long long)>
c001280a:	5a                   	pop    edx
c001280b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001280f:	e8 3d 56 ff ff       	call   c0007e51 <malloc>
c0012814:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012818:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001281c:	31 c9                	xor    ecx,ecx
c001281e:	5e                   	pop    esi
c001281f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012821:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0012825:	55                   	push   ebp
c0012826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001282a:	51                   	push   ecx
c001282b:	52                   	push   edx
c001282c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012830:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0012834:	53                   	push   ebx
c0012835:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012838:	83 c4 14             	add    esp,0x14
c001283b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001283f:	e8 0d 56 ff ff       	call   c0007e51 <malloc>
c0012844:	89 c6                	mov    esi,eax
c0012846:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012848:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001284b:	56                   	push   esi
c001284c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012850:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012854:	51                   	push   ecx
c0012855:	52                   	push   edx
c0012856:	53                   	push   ebx
c0012857:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001285a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001285e:	8b 15 e0 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023de0
c0012864:	83 c4 1c             	add    esp,0x1c
c0012867:	c1 e8 04             	shr    eax,0x4
c001286a:	89 04 95 60 3c 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc3a0],eax
c0012871:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012875:	31 d2                	xor    edx,edx
c0012877:	52                   	push   edx
c0012878:	50                   	push   eax
c0012879:	53                   	push   ebx
c001287a:	e8 55 8a ff ff       	call   c000b2d4 <File::seek(unsigned long long)>
c001287f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012881:	31 d2                	xor    edx,edx
c0012883:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012886:	56                   	push   esi
c0012887:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001288b:	52                   	push   edx
c001288c:	50                   	push   eax
c001288d:	53                   	push   ebx
c001288e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012891:	83 c4 14             	add    esp,0x14
c0012894:	53                   	push   ebx
c0012895:	e8 da 89 ff ff       	call   c000b274 <File::close()>
c001289a:	5d                   	pop    ebp
c001289b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001289f:	e8 bd 55 ff ff       	call   c0007e61 <free>
c00128a4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00128a7:	e8 b5 55 ff ff       	call   c0007e61 <free>
c00128ac:	a1 e0 3d 02 c0       	mov    eax,ds:0xc0023de0
c00128b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00128b5:	8d 50 01             	lea    edx,[eax+0x1]
c00128b8:	89 0c 85 60 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc2a0],ecx
c00128bf:	89 34 85 e0 3c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc320],esi
c00128c6:	89 15 e0 3d 02 c0    	mov    DWORD PTR ds:0xc0023de0,edx
c00128cc:	83 c4 10             	add    esp,0x10
c00128cf:	b0 01                	mov    al,0x1
c00128d1:	83 c4 5c             	add    esp,0x5c
c00128d4:	5b                   	pop    ebx
c00128d5:	5e                   	pop    esi
c00128d6:	5f                   	pop    edi
c00128d7:	5d                   	pop    ebp
c00128d8:	c3                   	ret    

c00128d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00128d9:	55                   	push   ebp
c00128da:	57                   	push   edi
c00128db:	56                   	push   esi
c00128dc:	53                   	push   ebx
c00128dd:	81 ec 68 03 00 00    	sub    esp,0x368
c00128e3:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00128ea:	8b 1d 30 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023e30
c00128f0:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00128f4:	68 14 01 00 00       	push   0x114
c00128f9:	e8 53 55 ff ff       	call   c0007e51 <malloc>
c00128fe:	83 c4 0c             	add    esp,0xc
c0012901:	89 c5                	mov    ebp,eax
c0012903:	53                   	push   ebx
c0012904:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001290b:	50                   	push   eax
c001290c:	e8 45 88 ff ff       	call   c000b156 <File::File(char const*, Process*)>
c0012911:	5e                   	pop    esi
c0012912:	5f                   	pop    edi
c0012913:	6a 01                	push   0x1
c0012915:	55                   	push   ebp
c0012916:	e8 fb 88 ff ff       	call   c000b216 <File::open(FileOpenMode)>
c001291b:	83 c4 10             	add    esp,0x10
c001291e:	85 c0                	test   eax,eax
c0012920:	0f 85 a7 06 00 00    	jne    c0012fcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012926:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001292e:	83 ec 0c             	sub    esp,0xc
c0012931:	6a 34                	push   0x34
c0012933:	e8 19 55 ff ff       	call   c0007e51 <malloc>
c0012938:	5b                   	pop    ebx
c0012939:	89 c7                	mov    edi,eax
c001293b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001293f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012942:	53                   	push   ebx
c0012943:	57                   	push   edi
c0012944:	6a 00                	push   0x0
c0012946:	6a 34                	push   0x34
c0012948:	55                   	push   ebp
c0012949:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001294c:	83 c4 20             	add    esp,0x20
c001294f:	85 c0                	test   eax,eax
c0012951:	0f 85 76 06 00 00    	jne    c0012fcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012957:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001295d:	0f 85 6a 06 00 00    	jne    c0012fcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012963:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012966:	85 c0                	test   eax,eax
c0012968:	0f 84 5f 06 00 00    	je     c0012fcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001296e:	31 d2                	xor    edx,edx
c0012970:	51                   	push   ecx
c0012971:	52                   	push   edx
c0012972:	50                   	push   eax
c0012973:	55                   	push   ebp
c0012974:	e8 5b 89 ff ff       	call   c000b2d4 <File::seek(unsigned long long)>
c0012979:	83 c4 10             	add    esp,0x10
c001297c:	85 c0                	test   eax,eax
c001297e:	0f 85 49 06 00 00    	jne    c0012fcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012984:	83 ec 0c             	sub    esp,0xc
c0012987:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001298a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001298e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012992:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012996:	0f af c2             	imul   eax,edx
c0012999:	50                   	push   eax
c001299a:	e8 b2 54 ff ff       	call   c0007e51 <malloc>
c001299f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00129a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00129a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129ad:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00129b1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00129b5:	0f af c2             	imul   eax,edx
c00129b8:	99                   	cdq    
c00129b9:	52                   	push   edx
c00129ba:	50                   	push   eax
c00129bb:	55                   	push   ebp
c00129bc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129bf:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00129c2:	83 c4 20             	add    esp,0x20
c00129c5:	85 c0                	test   eax,eax
c00129c7:	0f 84 00 06 00 00    	je     c0012fcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00129cd:	52                   	push   edx
c00129ce:	31 d2                	xor    edx,edx
c00129d0:	52                   	push   edx
c00129d1:	50                   	push   eax
c00129d2:	55                   	push   ebp
c00129d3:	e8 fc 88 ff ff       	call   c000b2d4 <File::seek(unsigned long long)>
c00129d8:	83 c4 10             	add    esp,0x10
c00129db:	85 c0                	test   eax,eax
c00129dd:	0f 85 ea 05 00 00    	jne    c0012fcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00129e3:	83 ec 0c             	sub    esp,0xc
c00129e6:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00129ea:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00129ee:	31 f6                	xor    esi,esi
c00129f0:	0f af c2             	imul   eax,edx
c00129f3:	50                   	push   eax
c00129f4:	e8 58 54 ff ff       	call   c0007e51 <malloc>
c00129f9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012a00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a03:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012a07:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012a0b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012a0f:	0f af c2             	imul   eax,edx
c0012a12:	99                   	cdq    
c0012a13:	52                   	push   edx
c0012a14:	50                   	push   eax
c0012a15:	55                   	push   ebp
c0012a16:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a19:	83 c4 20             	add    esp,0x20
c0012a1c:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0012a20:	0f 86 8a 00 00 00    	jbe    c0012ab0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0012a26:	0f b7 de             	movzx  ebx,si
c0012a29:	c1 e3 05             	shl    ebx,0x5
c0012a2c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0012a30:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0012a33:	75 75                	jne    c0012aaa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0012a35:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012a38:	31 d2                	xor    edx,edx
c0012a3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012a3e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012a41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a45:	50                   	push   eax
c0012a46:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012a49:	52                   	push   edx
c0012a4a:	50                   	push   eax
c0012a4b:	55                   	push   ebp
c0012a4c:	e8 83 88 ff ff       	call   c000b2d4 <File::seek(unsigned long long)>
c0012a51:	83 c4 10             	add    esp,0x10
c0012a54:	85 c0                	test   eax,eax
c0012a56:	0f 85 71 05 00 00    	jne    c0012fcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012a5c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0012a63:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a66:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012a6a:	31 d2                	xor    edx,edx
c0012a6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012a70:	83 ec 0c             	sub    esp,0xc
c0012a73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012a77:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012a7e:	50                   	push   eax
c0012a7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012a83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a87:	52                   	push   edx
c0012a88:	50                   	push   eax
c0012a89:	55                   	push   ebp
c0012a8a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a8d:	83 c4 1c             	add    esp,0x1c
c0012a90:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012a93:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0012a96:	50                   	push   eax
c0012a97:	6a 00                	push   0x0
c0012a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a9d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012aa1:	50                   	push   eax
c0012aa2:	e8 49 da fe ff       	call   c00004f0 <memset>
c0012aa7:	83 c4 10             	add    esp,0x10
c0012aaa:	46                   	inc    esi
c0012aab:	e9 6c ff ff ff       	jmp    c0012a1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012ab0:	53                   	push   ebx
c0012ab1:	31 db                	xor    ebx,ebx
c0012ab3:	68 00 01 00 00       	push   0x100
c0012ab8:	6a 00                	push   0x0
c0012aba:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012abe:	50                   	push   eax
c0012abf:	e8 2c da fe ff       	call   c00004f0 <memset>
c0012ac4:	83 c4 0c             	add    esp,0xc
c0012ac7:	68 00 01 00 00       	push   0x100
c0012acc:	6a 00                	push   0x0
c0012ace:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0012ad5:	50                   	push   eax
c0012ad6:	e8 15 da fe ff       	call   c00004f0 <memset>
c0012adb:	83 c4 10             	add    esp,0x10
c0012ade:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012ae6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012aee:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0012af6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012afe:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012b06:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0012b0a:	0f 86 30 01 00 00    	jbe    c0012c40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0012b10:	0f b7 f3             	movzx  esi,bx
c0012b13:	6b f6 28             	imul   esi,esi,0x28
c0012b16:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012b1a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012b1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012b21:	52                   	push   edx
c0012b22:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012b26:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012b2a:	8b 06                	mov    eax,DWORD PTR [esi]
c0012b2c:	6b d2 28             	imul   edx,edx,0x28
c0012b2f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0012b33:	31 d2                	xor    edx,edx
c0012b35:	52                   	push   edx
c0012b36:	50                   	push   eax
c0012b37:	55                   	push   ebp
c0012b38:	e8 97 87 ff ff       	call   c000b2d4 <File::seek(unsigned long long)>
c0012b3d:	83 c4 0c             	add    esp,0xc
c0012b40:	6a 20                	push   0x20
c0012b42:	6a 00                	push   0x0
c0012b44:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012b4b:	51                   	push   ecx
c0012b4c:	e8 9f d9 fe ff       	call   c00004f0 <memset>
c0012b51:	59                   	pop    ecx
c0012b52:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012b55:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012b59:	52                   	push   edx
c0012b5a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012b61:	51                   	push   ecx
c0012b62:	6a 00                	push   0x0
c0012b64:	6a 1f                	push   0x1f
c0012b66:	55                   	push   ebp
c0012b67:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012b6a:	83 c4 1c             	add    esp,0x1c
c0012b6d:	6a 09                	push   0x9
c0012b6f:	68 73 e9 01 c0       	push   0xc001e973
c0012b74:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012b7b:	51                   	push   ecx
c0012b7c:	e8 2f d8 fe ff       	call   c00003b0 <memcmp>
c0012b81:	83 c4 10             	add    esp,0x10
c0012b84:	85 c0                	test   eax,eax
c0012b86:	75 21                	jne    c0012ba9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012b88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b90:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012b94:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b98:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012b9b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012ba2:	89 d0                	mov    eax,edx
c0012ba4:	40                   	inc    eax
c0012ba5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ba9:	50                   	push   eax
c0012baa:	6a 09                	push   0x9
c0012bac:	68 7d e9 01 c0       	push   0xc001e97d
c0012bb1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012bb8:	50                   	push   eax
c0012bb9:	e8 f2 d7 fe ff       	call   c00003b0 <memcmp>
c0012bbe:	83 c4 10             	add    esp,0x10
c0012bc1:	85 c0                	test   eax,eax
c0012bc3:	75 21                	jne    c0012be6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0012bc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bc9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012bcd:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012bd1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012bd5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012bd8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012bdf:	89 d0                	mov    eax,edx
c0012be1:	40                   	inc    eax
c0012be2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012be6:	50                   	push   eax
c0012be7:	50                   	push   eax
c0012be8:	68 49 e9 01 c0       	push   0xc001e949
c0012bed:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012bf4:	50                   	push   eax
c0012bf5:	e8 06 db fe ff       	call   c0000700 <strcmp>
c0012bfa:	83 c4 10             	add    esp,0x10
c0012bfd:	85 c0                	test   eax,eax
c0012bff:	75 0f                	jne    c0012c10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012c01:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012c04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012c08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012c0c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012c10:	50                   	push   eax
c0012c11:	50                   	push   eax
c0012c12:	68 51 e9 01 c0       	push   0xc001e951
c0012c17:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012c1e:	50                   	push   eax
c0012c1f:	e8 dc da fe ff       	call   c0000700 <strcmp>
c0012c24:	83 c4 10             	add    esp,0x10
c0012c27:	85 c0                	test   eax,eax
c0012c29:	75 0f                	jne    c0012c3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012c2b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012c2e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012c32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012c36:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012c3a:	43                   	inc    ebx
c0012c3b:	e9 c6 fe ff ff       	jmp    c0012b06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012c40:	31 d2                	xor    edx,edx
c0012c42:	50                   	push   eax
c0012c43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c47:	52                   	push   edx
c0012c48:	50                   	push   eax
c0012c49:	55                   	push   ebp
c0012c4a:	e8 85 86 ff ff       	call   c000b2d4 <File::seek(unsigned long long)>
c0012c4f:	58                   	pop    eax
c0012c50:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c54:	e8 f8 51 ff ff       	call   c0007e51 <malloc>
c0012c59:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012c5c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012c60:	31 d2                	xor    edx,edx
c0012c62:	58                   	pop    eax
c0012c63:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012c67:	53                   	push   ebx
c0012c68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012c6c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c70:	52                   	push   edx
c0012c71:	50                   	push   eax
c0012c72:	55                   	push   ebp
c0012c73:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012c76:	83 c4 14             	add    esp,0x14
c0012c79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c7d:	e8 cf 51 ff ff       	call   c0007e51 <malloc>
c0012c82:	31 d2                	xor    edx,edx
c0012c84:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012c88:	83 c4 0c             	add    esp,0xc
c0012c8b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c8f:	52                   	push   edx
c0012c90:	50                   	push   eax
c0012c91:	55                   	push   ebp
c0012c92:	e8 3d 86 ff ff       	call   c000b2d4 <File::seek(unsigned long long)>
c0012c97:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012c9a:	31 d2                	xor    edx,edx
c0012c9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012c9f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012ca3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012ca7:	52                   	push   edx
c0012ca8:	50                   	push   eax
c0012ca9:	55                   	push   ebp
c0012caa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012cad:	83 c4 20             	add    esp,0x20
c0012cb0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012cb8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012cbc:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012cc0:	0f 84 0b 03 00 00    	je     c0012fd1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0012cc6:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012ccd:	31 d2                	xor    edx,edx
c0012ccf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012cd3:	c1 e8 03             	shr    eax,0x3
c0012cd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012cda:	51                   	push   ecx
c0012cdb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012cdf:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0012ce3:	52                   	push   edx
c0012ce4:	50                   	push   eax
c0012ce5:	55                   	push   ebp
c0012ce6:	e8 e9 85 ff ff       	call   c000b2d4 <File::seek(unsigned long long)>
c0012ceb:	5b                   	pop    ebx
c0012cec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012cf0:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012cf7:	e8 55 51 ff ff       	call   c0007e51 <malloc>
c0012cfc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012cff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012d03:	31 d2                	xor    edx,edx
c0012d05:	5e                   	pop    esi
c0012d06:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012d0a:	50                   	push   eax
c0012d0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d13:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012d1a:	52                   	push   edx
c0012d1b:	50                   	push   eax
c0012d1c:	55                   	push   ebp
c0012d1d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012d20:	83 c4 20             	add    esp,0x20
c0012d23:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012d2b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012d2f:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012d33:	0f 8d 7c 02 00 00    	jge    c0012fb5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012d39:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012d3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d41:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012d46:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012d49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012d4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d51:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012d55:	89 d8                	mov    eax,ebx
c0012d57:	c1 e8 08             	shr    eax,0x8
c0012d5a:	89 c6                	mov    esi,eax
c0012d5c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012d60:	c1 e6 04             	shl    esi,0x4
c0012d63:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012d67:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012d6a:	85 d2                	test   edx,edx
c0012d6c:	0f 85 bf 00 00 00    	jne    c0012e31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012d72:	83 ec 0c             	sub    esp,0xc
c0012d75:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012d79:	03 06                	add    eax,DWORD PTR [esi]
c0012d7b:	50                   	push   eax
c0012d7c:	e8 4b f8 ff ff       	call   c00125cc <Thr::getAddressOfKernelSymbol(char const*)>
c0012d81:	83 c4 10             	add    esp,0x10
c0012d84:	89 c2                	mov    edx,eax
c0012d86:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012d8b:	85 c0                	test   eax,eax
c0012d8d:	0f 85 9e 00 00 00    	jne    c0012e31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012d93:	83 ec 0c             	sub    esp,0xc
c0012d96:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012d9a:	03 06                	add    eax,DWORD PTR [esi]
c0012d9c:	50                   	push   eax
c0012d9d:	e8 96 41 ff ff       	call   c0006f38 <Krnl::resolveCompatibilitySymbol(char*)>
c0012da2:	83 c4 10             	add    esp,0x10
c0012da5:	89 c2                	mov    edx,eax
c0012da7:	85 c0                	test   eax,eax
c0012da9:	0f 85 82 00 00 00    	jne    c0012e31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012daf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012db3:	50                   	push   eax
c0012db4:	50                   	push   eax
c0012db5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012db9:	03 06                	add    eax,DWORD PTR [esi]
c0012dbb:	50                   	push   eax
c0012dbc:	68 87 e9 01 c0       	push   0xc001e987
c0012dc1:	e8 1a 7e ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0012dc6:	58                   	pop    eax
c0012dc7:	5a                   	pop    edx
c0012dc8:	68 a1 e9 01 c0       	push   0xc001e9a1
c0012dcd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012dd4:	50                   	push   eax
c0012dd5:	e8 46 d8 fe ff       	call   c0000620 <strcpy>
c0012dda:	59                   	pop    ecx
c0012ddb:	58                   	pop    eax
c0012ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012de0:	03 06                	add    eax,DWORD PTR [esi]
c0012de2:	50                   	push   eax
c0012de3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012dea:	50                   	push   eax
c0012deb:	e8 f0 d9 fe ff       	call   c00007e0 <strcat>
c0012df0:	58                   	pop    eax
c0012df1:	5a                   	pop    edx
c0012df2:	68 37 ea 01 c0       	push   0xc001ea37
c0012df7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012dfe:	50                   	push   eax
c0012dff:	e8 dc d9 fe ff       	call   c00007e0 <strcat>
c0012e04:	83 c4 10             	add    esp,0x10
c0012e07:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012e0c:	0f 84 5d 01 00 00    	je     c0012f6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012e12:	83 ec 0c             	sub    esp,0xc
c0012e15:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012e1c:	50                   	push   eax
c0012e1d:	e8 0d d9 ff ff       	call   c001072f <Krnl::panic(char const*)>
c0012e22:	83 c4 10             	add    esp,0x10
c0012e25:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012e29:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012e2d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012e31:	80 fb 01             	cmp    bl,0x1
c0012e34:	0f 85 88 00 00 00    	jne    c0012ec2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012e3a:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012e41:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012e45:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012e49:	01 ce                	add    esi,ecx
c0012e4b:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012e51:	0f 94 c0             	sete   al
c0012e54:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012e5a:	0f 94 c3             	sete   bl
c0012e5d:	09 c3                	or     ebx,eax
c0012e5f:	8b 06                	mov    eax,DWORD PTR [esi]
c0012e61:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012e66:	74 41                	je     c0012ea9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012e68:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012e6b:	84 db                	test   bl,bl
c0012e6d:	75 15                	jne    c0012e84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012e6f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012e73:	66 83 f8 0c          	cmp    ax,0xc
c0012e77:	76 05                	jbe    c0012e7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012e79:	b8 0c 00 00 00       	mov    eax,0xc
c0012e7e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012e82:	76 37                	jbe    c0012ebb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012e84:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012e88:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012e8d:	0f 84 dc 00 00 00    	je     c0012f6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012e93:	83 ec 0c             	sub    esp,0xc
c0012e96:	68 b8 e9 01 c0       	push   0xc001e9b8
c0012e9b:	e8 8f d8 ff ff       	call   c001072f <Krnl::panic(char const*)>
c0012ea0:	83 c4 10             	add    esp,0x10
c0012ea3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012ea7:	eb 12                	jmp    c0012ebb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012ea9:	01 c1                	add    ecx,eax
c0012eab:	84 db                	test   bl,bl
c0012ead:	75 0c                	jne    c0012ebb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012eaf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012eb3:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012eb7:	77 02                	ja     c0012ebb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012eb9:	01 d1                	add    ecx,edx
c0012ebb:	89 0e                	mov    DWORD PTR [esi],ecx
c0012ebd:	e9 ea 00 00 00       	jmp    c0012fac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012ec2:	80 fb 02             	cmp    bl,0x2
c0012ec5:	75 7c                	jne    c0012f43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012ec7:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012ece:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012ed2:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012ed6:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012edc:	74 20                	je     c0012efe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012ede:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012ee4:	74 18                	je     c0012efe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012ee6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012eea:	b9 0a 00 00 00       	mov    ecx,0xa
c0012eef:	66 83 f8 0e          	cmp    ax,0xe
c0012ef3:	77 03                	ja     c0012ef8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012ef5:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012ef8:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012efc:	76 1f                	jbe    c0012f1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012efe:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012f02:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012f07:	74 66                	je     c0012f6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012f09:	83 ec 0c             	sub    esp,0xc
c0012f0c:	68 d4 e9 01 c0       	push   0xc001e9d4
c0012f11:	e8 19 d8 ff ff       	call   c001072f <Krnl::panic(char const*)>
c0012f16:	83 c4 10             	add    esp,0x10
c0012f19:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012f1d:	8b 06                	mov    eax,DWORD PTR [esi]
c0012f1f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012f24:	74 13                	je     c0012f39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012f26:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012f2a:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012f31:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012f35:	01 c8                	add    eax,ecx
c0012f37:	eb 04                	jmp    c0012f3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012f39:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012f3d:	01 c2                	add    edx,eax
c0012f3f:	89 16                	mov    DWORD PTR [esi],edx
c0012f41:	eb 69                	jmp    c0012fac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012f43:	0f b6 db             	movzx  ebx,bl
c0012f46:	50                   	push   eax
c0012f47:	50                   	push   eax
c0012f48:	53                   	push   ebx
c0012f49:	68 f0 e9 01 c0       	push   0xc001e9f0
c0012f4e:	e8 8d 7c ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0012f53:	83 c4 10             	add    esp,0x10
c0012f56:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012f5b:	74 12                	je     c0012f6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012f5d:	83 ec 0c             	sub    esp,0xc
c0012f60:	68 fb e9 01 c0       	push   0xc001e9fb
c0012f65:	e8 c5 d7 ff ff       	call   c001072f <Krnl::panic(char const*)>
c0012f6a:	83 c4 10             	add    esp,0x10
c0012f6d:	eb 3d                	jmp    c0012fac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012f6f:	83 ec 0c             	sub    esp,0xc
c0012f72:	55                   	push   ebp
c0012f73:	e8 fc 82 ff ff       	call   c000b274 <File::close()>
c0012f78:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012f7b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012f7e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f81:	59                   	pop    ecx
c0012f82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f86:	e8 d6 4e ff ff       	call   c0007e61 <free>
c0012f8b:	5b                   	pop    ebx
c0012f8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012f90:	e8 cc 4e ff ff       	call   c0007e61 <free>
c0012f95:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012f98:	e8 c4 4e ff ff       	call   c0007e61 <free>
c0012f9d:	5e                   	pop    esi
c0012f9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fa2:	e8 ba 4e ff ff       	call   c0007e61 <free>
c0012fa7:	83 c4 10             	add    esp,0x10
c0012faa:	eb 21                	jmp    c0012fcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012fac:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012fb0:	e9 76 fd ff ff       	jmp    c0012d2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012fb5:	83 ec 0c             	sub    esp,0xc
c0012fb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012fbc:	e8 a0 4e ff ff       	call   c0007e61 <free>
c0012fc1:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012fc5:	83 c4 10             	add    esp,0x10
c0012fc8:	e9 eb fc ff ff       	jmp    c0012cb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012fcd:	31 c0                	xor    eax,eax
c0012fcf:	eb 33                	jmp    c0013004 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012fd1:	83 ec 0c             	sub    esp,0xc
c0012fd4:	55                   	push   ebp
c0012fd5:	e8 9a 82 ff ff       	call   c000b274 <File::close()>
c0012fda:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012fdd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012fe0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fe3:	58                   	pop    eax
c0012fe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012fe8:	e8 74 4e ff ff       	call   c0007e61 <free>
c0012fed:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012ff0:	e8 6c 4e ff ff       	call   c0007e61 <free>
c0012ff5:	5a                   	pop    edx
c0012ff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ffa:	e8 62 4e ff ff       	call   c0007e61 <free>
c0012fff:	83 c4 10             	add    esp,0x10
c0013002:	b0 01                	mov    al,0x1
c0013004:	81 c4 5c 03 00 00    	add    esp,0x35c
c001300a:	5b                   	pop    ebx
c001300b:	5e                   	pop    esi
c001300c:	5f                   	pop    edi
c001300d:	5d                   	pop    ebp
c001300e:	c3                   	ret    

c001300f <Thr::getDriverBaseFromAddress(unsigned long)>:
c001300f:	56                   	push   esi
c0013010:	31 d2                	xor    edx,edx
c0013012:	53                   	push   ebx
c0013013:	8b 1d 40 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023640
c0013019:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001301d:	39 d3                	cmp    ebx,edx
c001301f:	7e 1b                	jle    c001303c <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0013021:	8b 04 95 60 38 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc7a0]
c0013028:	39 c8                	cmp    eax,ecx
c001302a:	77 0d                	ja     c0013039 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001302c:	8b 34 95 60 36 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdc9a0]
c0013033:	01 c6                	add    esi,eax
c0013035:	39 ce                	cmp    esi,ecx
c0013037:	77 05                	ja     c001303e <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0013039:	42                   	inc    edx
c001303a:	eb e1                	jmp    c001301d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001303c:	31 c0                	xor    eax,eax
c001303e:	5b                   	pop    ebx
c001303f:	5e                   	pop    esi
c0013040:	c3                   	ret    

c0013041 <Thr::getDriverNameFromAddress(unsigned long)>:
c0013041:	53                   	push   ebx
c0013042:	31 c0                	xor    eax,eax
c0013044:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013048:	8b 1d 40 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023640
c001304e:	39 c3                	cmp    ebx,eax
c0013050:	7e 22                	jle    c0013074 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0013052:	8b 14 85 60 38 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc7a0]
c0013059:	39 ca                	cmp    edx,ecx
c001305b:	77 14                	ja     c0013071 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001305d:	03 14 85 60 36 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdc9a0]
c0013064:	39 ca                	cmp    edx,ecx
c0013066:	76 09                	jbe    c0013071 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013068:	8b 04 85 60 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc5a0]
c001306f:	eb 05                	jmp    c0013076 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0013071:	40                   	inc    eax
c0013072:	eb da                	jmp    c001304e <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0013074:	31 c0                	xor    eax,eax
c0013076:	5b                   	pop    ebx
c0013077:	c3                   	ret    

c0013078 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0013078:	53                   	push   ebx
c0013079:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001307d:	53                   	push   ebx
c001307e:	e8 8c ff ff ff       	call   c001300f <Thr::getDriverBaseFromAddress(unsigned long)>
c0013083:	5a                   	pop    edx
c0013084:	31 d2                	xor    edx,edx
c0013086:	85 c0                	test   eax,eax
c0013088:	74 04                	je     c001308e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001308a:	89 da                	mov    edx,ebx
c001308c:	29 c2                	sub    edx,eax
c001308e:	89 d0                	mov    eax,edx
c0013090:	5b                   	pop    ebx
c0013091:	c3                   	ret    

c0013092 <Thr::loadDLL(char const*, bool)>:
c0013092:	55                   	push   ebp
c0013093:	57                   	push   edi
c0013094:	56                   	push   esi
c0013095:	53                   	push   ebx
c0013096:	81 ec 34 01 00 00    	sub    esp,0x134
c001309c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00130a3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00130aa:	56                   	push   esi
c00130ab:	68 13 ea 01 c0       	push   0xc001ea13
c00130b0:	e8 2b 7b ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c00130b5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00130bc:	e8 90 4d ff ff       	call   c0007e51 <malloc>
c00130c1:	83 c4 0c             	add    esp,0xc
c00130c4:	89 c3                	mov    ebx,eax
c00130c6:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c00130cc:	56                   	push   esi
c00130cd:	50                   	push   eax
c00130ce:	e8 83 80 ff ff       	call   c000b156 <File::File(char const*, Process*)>
c00130d3:	83 c4 10             	add    esp,0x10
c00130d6:	85 db                	test   ebx,ebx
c00130d8:	75 3c                	jne    c0013116 <Thr::loadDLL(char const*, bool)+0x84>
c00130da:	89 f8                	mov    eax,edi
c00130dc:	84 c0                	test   al,al
c00130de:	0f 84 d2 01 00 00    	je     c00132b6 <Thr::loadDLL(char const*, bool)+0x224>
c00130e4:	55                   	push   ebp
c00130e5:	55                   	push   ebp
c00130e6:	68 24 ea 01 c0       	push   0xc001ea24
c00130eb:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00130ef:	55                   	push   ebp
c00130f0:	e8 2b d5 fe ff       	call   c0000620 <strcpy>
c00130f5:	58                   	pop    eax
c00130f6:	5a                   	pop    edx
c00130f7:	56                   	push   esi
c00130f8:	55                   	push   ebp
c00130f9:	e8 e2 d6 fe ff       	call   c00007e0 <strcat>
c00130fe:	59                   	pop    ecx
c00130ff:	58                   	pop    eax
c0013100:	68 37 ea 01 c0       	push   0xc001ea37
c0013105:	55                   	push   ebp
c0013106:	e8 d5 d6 fe ff       	call   c00007e0 <strcat>
c001310b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001310e:	e8 1c d6 ff ff       	call   c001072f <Krnl::panic(char const*)>
c0013113:	83 c4 10             	add    esp,0x10
c0013116:	51                   	push   ecx
c0013117:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001311b:	50                   	push   eax
c001311c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013120:	50                   	push   eax
c0013121:	53                   	push   ebx
c0013122:	e8 9b 83 ff ff       	call   c000b4c2 <File::stat(unsigned long long*, bool*)>
c0013127:	83 c4 10             	add    esp,0x10
c001312a:	85 db                	test   ebx,ebx
c001312c:	74 0c                	je     c001313a <Thr::loadDLL(char const*, bool)+0xa8>
c001312e:	83 ec 0c             	sub    esp,0xc
c0013131:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013133:	53                   	push   ebx
c0013134:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013137:	83 c4 10             	add    esp,0x10
c001313a:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001313f:	75 0a                	jne    c001314b <Thr::loadDLL(char const*, bool)+0xb9>
c0013141:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013145:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0013149:	75 3c                	jne    c0013187 <Thr::loadDLL(char const*, bool)+0xf5>
c001314b:	89 f8                	mov    eax,edi
c001314d:	84 c0                	test   al,al
c001314f:	0f 84 49 01 00 00    	je     c001329e <Thr::loadDLL(char const*, bool)+0x20c>
c0013155:	51                   	push   ecx
c0013156:	51                   	push   ecx
c0013157:	68 24 ea 01 c0       	push   0xc001ea24
c001315c:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0013160:	53                   	push   ebx
c0013161:	e8 ba d4 fe ff       	call   c0000620 <strcpy>
c0013166:	5d                   	pop    ebp
c0013167:	58                   	pop    eax
c0013168:	56                   	push   esi
c0013169:	53                   	push   ebx
c001316a:	e8 71 d6 fe ff       	call   c00007e0 <strcat>
c001316f:	58                   	pop    eax
c0013170:	5a                   	pop    edx
c0013171:	68 37 ea 01 c0       	push   0xc001ea37
c0013176:	53                   	push   ebx
c0013177:	e8 64 d6 fe ff       	call   c00007e0 <strcat>
c001317c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001317f:	e8 ab d5 ff ff       	call   c001072f <Krnl::panic(char const*)>
c0013184:	83 c4 10             	add    esp,0x10
c0013187:	52                   	push   edx
c0013188:	6a 03                	push   0x3
c001318a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001318e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013192:	05 ff 0f 00 00       	add    eax,0xfff
c0013197:	83 d2 00             	adc    edx,0x0
c001319a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001319e:	50                   	push   eax
c001319f:	ff 35 30 0a 02 c0    	push   DWORD PTR ds:0xc0020a30
c00131a5:	e8 7c 6f ff ff       	call   c000a126 <VAS::allocatePages(int, int)>
c00131aa:	59                   	pop    ecx
c00131ab:	89 c3                	mov    ebx,eax
c00131ad:	5d                   	pop    ebp
c00131ae:	50                   	push   eax
c00131af:	68 1e d8 01 c0       	push   0xc001d81e
c00131b4:	e8 27 7a ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c00131b9:	89 34 24             	mov    DWORD PTR [esp],esi
c00131bc:	e8 9f d3 fe ff       	call   c0000560 <strlen>
c00131c1:	8b 2d 40 36 02 c0    	mov    ebp,DWORD PTR ds:0xc0023640
c00131c7:	40                   	inc    eax
c00131c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00131cb:	e8 81 4c ff ff       	call   c0007e51 <malloc>
c00131d0:	89 04 ad 60 3a 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdc5a0],eax
c00131d7:	58                   	pop    eax
c00131d8:	a1 40 36 02 c0       	mov    eax,ds:0xc0023640
c00131dd:	5a                   	pop    edx
c00131de:	56                   	push   esi
c00131df:	ff 34 85 60 3a 02 c0 	push   DWORD PTR [eax*4-0x3ffdc5a0]
c00131e6:	e8 35 d4 fe ff       	call   c0000620 <strcpy>
c00131eb:	a1 40 36 02 c0       	mov    eax,ds:0xc0023640
c00131f0:	8d 50 01             	lea    edx,[eax+0x1]
c00131f3:	89 1c 85 60 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7a0],ebx
c00131fa:	89 15 40 36 02 c0    	mov    DWORD PTR ds:0xc0023640,edx
c0013200:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013204:	83 c4 0c             	add    esp,0xc
c0013207:	89 14 85 60 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc9a0],edx
c001320e:	6a 01                	push   0x1
c0013210:	53                   	push   ebx
c0013211:	56                   	push   esi
c0013212:	e8 c2 f6 ff ff       	call   c00128d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0013217:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001321b:	83 c4 10             	add    esp,0x10
c001321e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013223:	0f 85 89 00 00 00    	jne    c00132b2 <Thr::loadDLL(char const*, bool)+0x220>
c0013229:	89 f8                	mov    eax,edi
c001322b:	84 c0                	test   al,al
c001322d:	74 73                	je     c00132a2 <Thr::loadDLL(char const*, bool)+0x210>
c001322f:	83 ec 0c             	sub    esp,0xc
c0013232:	68 39 ea 01 c0       	push   0xc001ea39
c0013237:	e8 f3 d4 ff ff       	call   c001072f <Krnl::panic(char const*)>
c001323c:	83 c4 10             	add    esp,0x10
c001323f:	eb 61                	jmp    c00132a2 <Thr::loadDLL(char const*, bool)+0x210>
c0013241:	50                   	push   eax
c0013242:	50                   	push   eax
c0013243:	89 e8                	mov    eax,ebp
c0013245:	c1 e0 0c             	shl    eax,0xc
c0013248:	01 d8                	add    eax,ebx
c001324a:	50                   	push   eax
c001324b:	ff 35 30 0a 02 c0    	push   DWORD PTR ds:0xc0020a30
c0013251:	e8 48 6a ff ff       	call   c0009c9e <VAS::getPageTableEntry(unsigned long)>
c0013256:	83 c4 10             	add    esp,0x10
c0013259:	8b 00                	mov    eax,DWORD PTR [eax]
c001325b:	a8 60                	test   al,0x60
c001325d:	75 11                	jne    c0013270 <Thr::loadDLL(char const*, bool)+0x1de>
c001325f:	83 ec 0c             	sub    esp,0xc
c0013262:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013267:	50                   	push   eax
c0013268:	e8 4f 4f ff ff       	call   c00081bc <Phys::freePage(unsigned long)>
c001326d:	83 c4 10             	add    esp,0x10
c0013270:	45                   	inc    ebp
c0013271:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013275:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013279:	05 ff 0f 00 00       	add    eax,0xfff
c001327e:	bf 00 00 00 00       	mov    edi,0x0
c0013283:	83 d2 00             	adc    edx,0x0
c0013286:	0f ac d0 0c          	shrd   eax,edx,0xc
c001328a:	c1 ea 0c             	shr    edx,0xc
c001328d:	39 c5                	cmp    ebp,eax
c001328f:	89 d1                	mov    ecx,edx
c0013291:	89 f8                	mov    eax,edi
c0013293:	19 c8                	sbb    eax,ecx
c0013295:	72 aa                	jb     c0013241 <Thr::loadDLL(char const*, bool)+0x1af>
c0013297:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001329c:	75 18                	jne    c00132b6 <Thr::loadDLL(char const*, bool)+0x224>
c001329e:	31 db                	xor    ebx,ebx
c00132a0:	eb 14                	jmp    c00132b6 <Thr::loadDLL(char const*, bool)+0x224>
c00132a2:	83 ec 0c             	sub    esp,0xc
c00132a5:	68 58 ea 01 c0       	push   0xc001ea58
c00132aa:	e8 80 d4 ff ff       	call   c001072f <Krnl::panic(char const*)>
c00132af:	83 c4 10             	add    esp,0x10
c00132b2:	31 ed                	xor    ebp,ebp
c00132b4:	eb bb                	jmp    c0013271 <Thr::loadDLL(char const*, bool)+0x1df>
c00132b6:	81 c4 2c 01 00 00    	add    esp,0x12c
c00132bc:	89 d8                	mov    eax,ebx
c00132be:	5b                   	pop    ebx
c00132bf:	5e                   	pop    esi
c00132c0:	5f                   	pop    edi
c00132c1:	5d                   	pop    ebp
c00132c2:	c3                   	ret    

c00132c3 <Thr::executeDLL(unsigned long, void*)>:
c00132c3:	56                   	push   esi
c00132c4:	53                   	push   ebx
c00132c5:	52                   	push   edx
c00132c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00132ca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00132ce:	85 db                	test   ebx,ebx
c00132d0:	75 10                	jne    c00132e2 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00132d2:	83 ec 0c             	sub    esp,0xc
c00132d5:	68 74 ea 01 c0       	push   0xc001ea74
c00132da:	e8 50 d4 ff ff       	call   c001072f <Krnl::panic(char const*)>
c00132df:	83 c4 10             	add    esp,0x10
c00132e2:	50                   	push   eax
c00132e3:	50                   	push   eax
c00132e4:	53                   	push   ebx
c00132e5:	68 9e ea 01 c0       	push   0xc001ea9e
c00132ea:	e8 f1 78 ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c00132ef:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00132f3:	89 d8                	mov    eax,ebx
c00132f5:	83 c4 14             	add    esp,0x14
c00132f8:	5b                   	pop    ebx
c00132f9:	5e                   	pop    esi
c00132fa:	ff e0                	jmp    eax

c00132fc <userModeEntryPoint(void*)>:
c00132fc:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013301:	48                   	dec    eax
c0013302:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013307:	75 03                	jne    c001330c <userModeEntryPoint(void*)+0x10>
c0013309:	fb                   	sti    
c001330a:	66 90                	xchg   ax,ax
c001330c:	fb                   	sti    
c001330d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013312:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013315:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001331b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001331f:	e9 3b cf fe ff       	jmp    c000025f <goToUsermode>

c0013324 <changeTSS>:
c0013324:	83 ec 14             	sub    esp,0x14
c0013327:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001332c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001332f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0013334:	c1 e2 15             	shl    edx,0x15
c0013337:	29 d0                	sub    eax,edx
c0013339:	50                   	push   eax
c001333a:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c001333f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013345:	05 7c 11 00 00       	add    eax,0x117c
c001334a:	50                   	push   eax
c001334b:	e8 90 5f ff ff       	call   c00092e0 <TSS::setESP(unsigned long)>
c0013350:	83 c4 1c             	add    esp,0x1c
c0013353:	c3                   	ret    

c0013354 <switchToThread(ThreadControlBlock*)>:
c0013354:	57                   	push   edi
c0013355:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c001335a:	56                   	push   esi
c001335b:	85 c0                	test   eax,eax
c001335d:	53                   	push   ebx
c001335e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013362:	0f 85 90 00 00 00    	jne    c00133f8 <switchToThread(ThreadControlBlock*)+0xa4>
c0013368:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c001336b:	80 fa ff             	cmp    dl,0xff
c001336e:	0f 84 80 00 00 00    	je     c00133f4 <switchToThread(ThreadControlBlock*)+0xa0>
c0013374:	81 e2 ff 00 00 00    	and    edx,0xff
c001337a:	b8 00 04 00 00       	mov    eax,0x400
c001337f:	29 d0                	sub    eax,edx
c0013381:	d1 f8                	sar    eax,1
c0013383:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0013386:	66 90                	xchg   ax,ax
c0013388:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001338b:	e8 7b 24 00 00       	call   c001580b <HalQueryPerformanceCounter()>
c0013390:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0013395:	89 15 4c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e4c,edx
c001339b:	89 c6                	mov    esi,eax
c001339d:	89 d7                	mov    edi,edx
c001339f:	2b 35 38 3e 02 c0    	sub    esi,DWORD PTR ds:0xc0023e38
c00133a5:	a3 38 3e 02 c0       	mov    ds:0xc0023e38,eax
c00133aa:	1b 3d 3c 3e 02 c0    	sbb    edi,DWORD PTR ds:0xc0023e3c
c00133b0:	89 35 40 3e 02 c0    	mov    DWORD PTR ds:0xc0023e40,esi
c00133b6:	89 3d 44 3e 02 c0    	mov    DWORD PTR ds:0xc0023e44,edi
c00133bc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00133c2:	89 15 3c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e3c,edx
c00133c8:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00133cb:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00133ce:	01 c6                	add    esi,eax
c00133d0:	11 d7                	adc    edi,edx
c00133d2:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00133d5:	83 ec 0c             	sub    esp,0xc
c00133d8:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00133db:	53                   	push   ebx
c00133dc:	e8 b6 ce fe ff       	call   c0000297 <switchToThreadASM>
c00133e1:	0f 20 c0             	mov    eax,cr0
c00133e4:	83 c8 08             	or     eax,0x8
c00133e7:	0f 22 c0             	mov    cr0,eax
c00133ea:	83 c4 10             	add    esp,0x10
c00133ed:	5b                   	pop    ebx
c00133ee:	5e                   	pop    esi
c00133ef:	5f                   	pop    edi
c00133f0:	c3                   	ret    
c00133f1:	8d 76 00             	lea    esi,[esi+0x0]
c00133f4:	31 c0                	xor    eax,eax
c00133f6:	eb 90                	jmp    c0013388 <switchToThread(ThreadControlBlock*)+0x34>
c00133f8:	5b                   	pop    ebx
c00133f9:	c7 05 00 3e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x1
c0013403:	5e                   	pop    esi
c0013404:	5f                   	pop    edi
c0013405:	c3                   	ret    
c0013406:	66 90                	xchg   ax,ax

c0013408 <Process::addArgs(char**)>:
c0013408:	57                   	push   edi
c0013409:	56                   	push   esi
c001340a:	53                   	push   ebx
c001340b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001340f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0013413:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c001341d:	85 ff                	test   edi,edi
c001341f:	74 43                	je     c0013464 <Process::addArgs(char**)+0x5c>
c0013421:	8b 07                	mov    eax,DWORD PTR [edi]
c0013423:	85 c0                	test   eax,eax
c0013425:	74 3d                	je     c0013464 <Process::addArgs(char**)+0x5c>
c0013427:	31 db                	xor    ebx,ebx
c0013429:	8d 76 00             	lea    esi,[esi+0x0]
c001342c:	83 ec 0c             	sub    esp,0xc
c001342f:	50                   	push   eax
c0013430:	e8 2b d1 fe ff       	call   c0000560 <strlen>
c0013435:	40                   	inc    eax
c0013436:	89 04 24             	mov    DWORD PTR [esp],eax
c0013439:	e8 13 4a ff ff       	call   c0007e51 <malloc>
c001343e:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0013445:	5a                   	pop    edx
c0013446:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013449:	59                   	pop    ecx
c001344a:	43                   	inc    ebx
c001344b:	52                   	push   edx
c001344c:	50                   	push   eax
c001344d:	e8 ce d1 fe ff       	call   c0000620 <strcpy>
c0013452:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013458:	83 c4 10             	add    esp,0x10
c001345b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001345e:	85 c0                	test   eax,eax
c0013460:	75 ca                	jne    c001342c <Process::addArgs(char**)+0x24>
c0013462:	66 90                	xchg   ax,ax
c0013464:	5b                   	pop    ebx
c0013465:	5e                   	pop    esi
c0013466:	5f                   	pop    edi
c0013467:	c3                   	ret    

c0013468 <Process::Process(char const*, Process*, char**)>:
c0013468:	56                   	push   esi
c0013469:	53                   	push   ebx
c001346a:	83 ec 14             	sub    esp,0x14
c001346d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013471:	05 0c 02 00 00       	add    eax,0x20c
c0013476:	bb 07 00 00 00       	mov    ebx,0x7
c001347b:	89 c6                	mov    esi,eax
c001347d:	8d 76 00             	lea    esi,[esi+0x0]
c0013480:	85 db                	test   ebx,ebx
c0013482:	78 14                	js     c0013498 <Process::Process(char const*, Process*, char**)+0x30>
c0013484:	83 ec 0c             	sub    esp,0xc
c0013487:	56                   	push   esi
c0013488:	e8 2f 96 00 00       	call   c001cabc <ThreadControlBlock::ThreadControlBlock()>
c001348d:	83 c4 10             	add    esp,0x10
c0013490:	83 c6 5f             	add    esi,0x5f
c0013493:	4b                   	dec    ebx
c0013494:	eb ea                	jmp    c0013480 <Process::Process(char const*, Process*, char**)+0x18>
c0013496:	66 90                	xchg   ax,ax
c0013498:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001349c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00134a3:	83 ec 0c             	sub    esp,0xc
c00134a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00134aa:	e8 09 d1 ff ff       	call   c00105b8 <Krnl::newProcessEnv(Process*)>
c00134af:	83 c4 10             	add    esp,0x10
c00134b2:	89 c2                	mov    edx,eax
c00134b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134b8:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00134be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134c2:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00134cb:	a1 10 f9 01 c0       	mov    eax,ds:0xc001f910
c00134d0:	8d 50 01             	lea    edx,[eax+0x1]
c00134d3:	89 15 10 f9 01 c0    	mov    DWORD PTR ds:0xc001f910,edx
c00134d9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00134dd:	89 02                	mov    DWORD PTR [edx],eax
c00134df:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00134e7:	83 ec 0c             	sub    esp,0xc
c00134ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00134ee:	e8 5e 49 ff ff       	call   c0007e51 <malloc>
c00134f3:	83 c4 10             	add    esp,0x10
c00134f6:	89 c3                	mov    ebx,eax
c00134f8:	83 ec 08             	sub    esp,0x8
c00134fb:	6a 00                	push   0x0
c00134fd:	53                   	push   ebx
c00134fe:	e8 cd 6f ff ff       	call   c000a4d0 <VAS::VAS(bool)>
c0013503:	83 c4 10             	add    esp,0x10
c0013506:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001350a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013510:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013514:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001351e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013522:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013526:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001352c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013530:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013536:	85 c0                	test   eax,eax
c0013538:	74 42                	je     c001357c <Process::Process(char const*, Process*, char**)+0x114>
c001353a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001353e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013544:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001354a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001354e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013554:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013558:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001355e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013564:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013568:	05 0c 01 00 00       	add    eax,0x10c
c001356d:	83 ec 08             	sub    esp,0x8
c0013570:	52                   	push   edx
c0013571:	50                   	push   eax
c0013572:	e8 a9 d0 fe ff       	call   c0000620 <strcpy>
c0013577:	83 c4 10             	add    esp,0x10
c001357a:	eb 64                	jmp    c00135e0 <Process::Process(char const*, Process*, char**)+0x178>
c001357c:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0013584:	83 ec 0c             	sub    esp,0xc
c0013587:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001358b:	e8 c1 48 ff ff       	call   c0007e51 <malloc>
c0013590:	83 c4 10             	add    esp,0x10
c0013593:	89 c3                	mov    ebx,eax
c0013595:	83 ec 08             	sub    esp,0x8
c0013598:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001359c:	53                   	push   ebx
c001359d:	e8 e2 5a ff ff       	call   c0009084 <VgaText::VgaText(char const*)>
c00135a2:	83 c4 10             	add    esp,0x10
c00135a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135a9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00135af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00135b9:	83 ec 0c             	sub    esp,0xc
c00135bc:	50                   	push   eax
c00135bd:	e8 62 53 ff ff       	call   c0008924 <addToTerminalCycle(VgaText*)>
c00135c2:	83 c4 10             	add    esp,0x10
c00135c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135c9:	05 0c 01 00 00       	add    eax,0x10c
c00135ce:	83 ec 08             	sub    esp,0x8
c00135d1:	68 bd ea 01 c0       	push   0xc001eabd
c00135d6:	50                   	push   eax
c00135d7:	e8 44 d0 fe ff       	call   c0000620 <strcpy>
c00135dc:	83 c4 10             	add    esp,0x10
c00135df:	90                   	nop
c00135e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135e4:	83 c0 0c             	add    eax,0xc
c00135e7:	83 ec 08             	sub    esp,0x8
c00135ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135ee:	50                   	push   eax
c00135ef:	e8 2c d0 fe ff       	call   c0000620 <strcpy>
c00135f4:	83 c4 10             	add    esp,0x10
c00135f7:	83 ec 08             	sub    esp,0x8
c00135fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00135fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013602:	e8 01 fe ff ff       	call   c0013408 <Process::addArgs(char**)>
c0013607:	83 c4 10             	add    esp,0x10
c001360a:	83 ec 08             	sub    esp,0x8
c001360d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013611:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013615:	e8 89 ed ff ff       	call   c00123a3 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001361a:	83 c4 10             	add    esp,0x10
c001361d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013621:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013625:	83 f0 01             	xor    eax,0x1
c0013628:	88 c2                	mov    dl,al
c001362a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001362e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0013634:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013638:	25 ff 00 00 00       	and    eax,0xff
c001363d:	83 ec 08             	sub    esp,0x8
c0013640:	50                   	push   eax
c0013641:	68 14 eb 01 c0       	push   0xc001eb14
c0013646:	e8 95 75 ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c001364b:	83 c4 10             	add    esp,0x10
c001364e:	90                   	nop
c001364f:	83 c4 14             	add    esp,0x14
c0013652:	5b                   	pop    ebx
c0013653:	5e                   	pop    esi
c0013654:	c3                   	ret    
c0013655:	90                   	nop
c0013656:	66 90                	xchg   ax,ax

c0013658 <Process::Process(bool, char const*, Process*, char**)>:
c0013658:	56                   	push   esi
c0013659:	53                   	push   ebx
c001365a:	83 ec 24             	sub    esp,0x24
c001365d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013661:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013665:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013669:	05 0c 02 00 00       	add    eax,0x20c
c001366e:	bb 07 00 00 00       	mov    ebx,0x7
c0013673:	89 c6                	mov    esi,eax
c0013675:	8d 76 00             	lea    esi,[esi+0x0]
c0013678:	85 db                	test   ebx,ebx
c001367a:	78 14                	js     c0013690 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001367c:	83 ec 0c             	sub    esp,0xc
c001367f:	56                   	push   esi
c0013680:	e8 37 94 00 00       	call   c001cabc <ThreadControlBlock::ThreadControlBlock()>
c0013685:	83 c4 10             	add    esp,0x10
c0013688:	83 c6 5f             	add    esi,0x5f
c001368b:	4b                   	dec    ebx
c001368c:	eb ea                	jmp    c0013678 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001368e:	66 90                	xchg   ax,ax
c0013690:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013694:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001369b:	83 ec 0c             	sub    esp,0xc
c001369e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00136a2:	e8 11 cf ff ff       	call   c00105b8 <Krnl::newProcessEnv(Process*)>
c00136a7:	83 c4 10             	add    esp,0x10
c00136aa:	89 c2                	mov    edx,eax
c00136ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136b0:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00136b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136ba:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00136c3:	a1 10 f9 01 c0       	mov    eax,ds:0xc001f910
c00136c8:	8d 50 01             	lea    edx,[eax+0x1]
c00136cb:	89 15 10 f9 01 c0    	mov    DWORD PTR ds:0xc001f910,edx
c00136d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00136d5:	89 02                	mov    DWORD PTR [edx],eax
c00136d7:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00136df:	83 ec 0c             	sub    esp,0xc
c00136e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00136e6:	e8 66 47 ff ff       	call   c0007e51 <malloc>
c00136eb:	83 c4 10             	add    esp,0x10
c00136ee:	89 c3                	mov    ebx,eax
c00136f0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00136f4:	25 ff 00 00 00       	and    eax,0xff
c00136f9:	83 ec 08             	sub    esp,0x8
c00136fc:	50                   	push   eax
c00136fd:	53                   	push   ebx
c00136fe:	e8 cd 6d ff ff       	call   c000a4d0 <VAS::VAS(bool)>
c0013703:	83 c4 10             	add    esp,0x10
c0013706:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001370a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013710:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013714:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001371e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013722:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013726:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001372c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013730:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013736:	85 c0                	test   eax,eax
c0013738:	74 42                	je     c001377c <Process::Process(bool, char const*, Process*, char**)+0x124>
c001373a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001373e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013744:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001374a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001374e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013754:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013758:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001375e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013764:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013768:	05 0c 01 00 00       	add    eax,0x10c
c001376d:	83 ec 08             	sub    esp,0x8
c0013770:	52                   	push   edx
c0013771:	50                   	push   eax
c0013772:	e8 a9 ce fe ff       	call   c0000620 <strcpy>
c0013777:	83 c4 10             	add    esp,0x10
c001377a:	eb 64                	jmp    c00137e0 <Process::Process(bool, char const*, Process*, char**)+0x188>
c001377c:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0013784:	83 ec 0c             	sub    esp,0xc
c0013787:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001378b:	e8 c1 46 ff ff       	call   c0007e51 <malloc>
c0013790:	83 c4 10             	add    esp,0x10
c0013793:	89 c3                	mov    ebx,eax
c0013795:	83 ec 08             	sub    esp,0x8
c0013798:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001379c:	53                   	push   ebx
c001379d:	e8 e2 58 ff ff       	call   c0009084 <VgaText::VgaText(char const*)>
c00137a2:	83 c4 10             	add    esp,0x10
c00137a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137a9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00137af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00137b9:	83 ec 0c             	sub    esp,0xc
c00137bc:	50                   	push   eax
c00137bd:	e8 62 51 ff ff       	call   c0008924 <addToTerminalCycle(VgaText*)>
c00137c2:	83 c4 10             	add    esp,0x10
c00137c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137c9:	05 0c 01 00 00       	add    eax,0x10c
c00137ce:	83 ec 08             	sub    esp,0x8
c00137d1:	68 bd ea 01 c0       	push   0xc001eabd
c00137d6:	50                   	push   eax
c00137d7:	e8 44 ce fe ff       	call   c0000620 <strcpy>
c00137dc:	83 c4 10             	add    esp,0x10
c00137df:	90                   	nop
c00137e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00137e4:	83 c0 0c             	add    eax,0xc
c00137e7:	83 ec 08             	sub    esp,0x8
c00137ea:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00137ee:	50                   	push   eax
c00137ef:	e8 2c ce fe ff       	call   c0000620 <strcpy>
c00137f4:	83 c4 10             	add    esp,0x10
c00137f7:	83 ec 08             	sub    esp,0x8
c00137fa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00137fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013802:	e8 01 fc ff ff       	call   c0013408 <Process::addArgs(char**)>
c0013807:	83 c4 10             	add    esp,0x10
c001380a:	90                   	nop
c001380b:	83 c4 24             	add    esp,0x24
c001380e:	5b                   	pop    ebx
c001380f:	5e                   	pop    esi
c0013810:	c3                   	ret    
c0013811:	8d 76 00             	lea    esi,[esi+0x0]

c0013814 <taskStartupFunction>:
c0013814:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013819:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001381c:	c3                   	ret    
c001381d:	90                   	nop
c001381e:	66 90                	xchg   ax,ax

c0013820 <Semaphore::Semaphore(int)>:
c0013820:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013824:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013828:	89 10                	mov    DWORD PTR [eax],edx
c001382a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001382e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0013835:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013839:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013844:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001384b:	90                   	nop
c001384c:	c3                   	ret    
c001384d:	90                   	nop
c001384e:	66 90                	xchg   ax,ax

c0013850 <Mutex::Mutex()>:
c0013850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013854:	6a 01                	push   0x1
c0013856:	50                   	push   eax
c0013857:	e8 c4 ff ff ff       	call   c0013820 <Semaphore::Semaphore(int)>
c001385c:	83 c4 08             	add    esp,0x8
c001385f:	90                   	nop
c0013860:	c3                   	ret    
c0013861:	90                   	nop
c0013862:	66 90                	xchg   ax,ax

c0013864 <Process::createThread(void (*)(void*), void*, int)>:
c0013864:	57                   	push   edi
c0013865:	31 c9                	xor    ecx,ecx
c0013867:	56                   	push   esi
c0013868:	53                   	push   ebx
c0013869:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001386d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0013874:	89 f2                	mov    edx,esi
c0013876:	66 90                	xchg   ax,ax
c0013878:	31 c0                	xor    eax,eax
c001387a:	66 89 d0             	mov    ax,dx
c001387d:	83 e2 01             	and    edx,0x1
c0013880:	74 12                	je     c0013894 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0013882:	d1 f8                	sar    eax,1
c0013884:	41                   	inc    ecx
c0013885:	89 c2                	mov    edx,eax
c0013887:	83 f9 10             	cmp    ecx,0x10
c001388a:	75 ec                	jne    c0013878 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001388c:	31 db                	xor    ebx,ebx
c001388e:	89 d8                	mov    eax,ebx
c0013890:	5b                   	pop    ebx
c0013891:	5e                   	pop    esi
c0013892:	5f                   	pop    edi
c0013893:	c3                   	ret    
c0013894:	b8 01 00 00 00       	mov    eax,0x1
c0013899:	d3 e0                	shl    eax,cl
c001389b:	09 c6                	or     esi,eax
c001389d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00138a0:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00138a7:	01 c0                	add    eax,eax
c00138a9:	01 c8                	add    eax,ecx
c00138ab:	8d 04 80             	lea    eax,[eax+eax*4]
c00138ae:	01 d8                	add    eax,ebx
c00138b0:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00138b7:	75 0b                	jne    c00138c4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00138b9:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00138c3:	90                   	nop
c00138c4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00138ca:	83 ec 08             	sub    esp,0x8
c00138cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00138d0:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00138d3:	01 c0                	add    eax,eax
c00138d5:	01 c8                	add    eax,ecx
c00138d7:	8d 3c 80             	lea    edi,[eax+eax*4]
c00138da:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00138dd:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00138e3:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00138e9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00138ed:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00138f3:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00138f9:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013900:	89 ca                	mov    edx,ecx
c0013902:	f7 da                	neg    edx
c0013904:	c1 e2 15             	shl    edx,0x15
c0013907:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001390d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0013913:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013917:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0013921:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0013927:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001392b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0013931:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001393b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0013945:	53                   	push   ebx
c0013946:	68 24 3e 02 c0       	push   0xc0023e24
c001394b:	e8 0c 8f 00 00       	call   c001c85c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013950:	83 c4 10             	add    esp,0x10
c0013953:	89 d8                	mov    eax,ebx
c0013955:	5b                   	pop    ebx
c0013956:	5e                   	pop    esi
c0013957:	5f                   	pop    edi
c0013958:	c3                   	ret    
c0013959:	90                   	nop
c001395a:	66 90                	xchg   ax,ax

c001395c <Process::createUserThread()>:
c001395c:	83 ec 0c             	sub    esp,0xc
c001395f:	68 80 00 00 00       	push   0x80
c0013964:	6a 00                	push   0x0
c0013966:	68 fc 32 01 c0       	push   0xc00132fc
c001396b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001396f:	50                   	push   eax
c0013970:	e8 ef fe ff ff       	call   c0013864 <Process::createThread(void (*)(void*), void*, int)>
c0013975:	83 c4 1c             	add    esp,0x1c
c0013978:	c3                   	ret    
c0013979:	8d 76 00             	lea    esi,[esi+0x0]

c001397c <setupMultitasking(void (*)())>:
c001397c:	56                   	push   esi
c001397d:	53                   	push   ebx
c001397e:	53                   	push   ebx
c001397f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013983:	eb 13                	jmp    c0013998 <setupMultitasking(void (*)())+0x1c>
c0013985:	8d 76 00             	lea    esi,[esi+0x0]
c0013988:	83 ec 0c             	sub    esp,0xc
c001398b:	68 24 3e 02 c0       	push   0xc0023e24
c0013990:	e8 0f 8e 00 00       	call   c001c7a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013995:	83 c4 10             	add    esp,0x10
c0013998:	83 ec 0c             	sub    esp,0xc
c001399b:	68 24 3e 02 c0       	push   0xc0023e24
c00139a0:	e8 db 8d 00 00       	call   c001c780 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00139a5:	83 c4 10             	add    esp,0x10
c00139a8:	84 c0                	test   al,al
c00139aa:	74 dc                	je     c0013988 <setupMultitasking(void (*)())+0xc>
c00139ac:	83 ec 0c             	sub    esp,0xc
c00139af:	68 1f 07 00 00       	push   0x71f
c00139b4:	e8 98 44 ff ff       	call   c0007e51 <malloc>
c00139b9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00139c0:	89 c3                	mov    ebx,eax
c00139c2:	6a 00                	push   0x0
c00139c4:	68 c1 ea 01 c0       	push   0xc001eac1
c00139c9:	6a 01                	push   0x1
c00139cb:	50                   	push   eax
c00139cc:	e8 87 fc ff ff       	call   c0013658 <Process::Process(bool, char const*, Process*, char**)>
c00139d1:	83 c4 14             	add    esp,0x14
c00139d4:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00139da:	89 1d 30 3e 02 c0    	mov    DWORD PTR ds:0xc0023e30,ebx
c00139e0:	50                   	push   eax
c00139e1:	e8 9b 51 ff ff       	call   c0008b81 <setActiveTerminal(VgaText*)>
c00139e6:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00139ee:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00139f8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00139fe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013a01:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0013a0b:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013a11:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0013a17:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013a21:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0013a2b:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0013a35:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0013a3b:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0013a41:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0013a4b:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013a51:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0013a5b:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013a61:	5a                   	pop    edx
c0013a62:	59                   	pop    ecx
c0013a63:	68 bd ea 01 c0       	push   0xc001eabd
c0013a68:	50                   	push   eax
c0013a69:	e8 b2 cb fe ff       	call   c0000620 <strcpy>
c0013a6e:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013a75:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013a79:	83 c4 14             	add    esp,0x14
c0013a7c:	5b                   	pop    ebx
c0013a7d:	5e                   	pop    esi
c0013a7e:	e9 06 c8 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0013a83:	90                   	nop

c0013a84 <schedule()>:
c0013a84:	8b 15 04 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e04
c0013a8a:	85 d2                	test   edx,edx
c0013a8c:	74 0e                	je     c0013a9c <schedule()+0x18>
c0013a8e:	c7 05 00 3e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x1
c0013a98:	c3                   	ret    
c0013a99:	8d 76 00             	lea    esi,[esi+0x0]
c0013a9c:	53                   	push   ebx
c0013a9d:	83 ec 14             	sub    esp,0x14
c0013aa0:	68 24 3e 02 c0       	push   0xc0023e24
c0013aa5:	e8 d6 8c 00 00       	call   c001c780 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013aaa:	83 c4 10             	add    esp,0x10
c0013aad:	84 c0                	test   al,al
c0013aaf:	75 3b                	jne    c0013aec <schedule()+0x68>
c0013ab1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ab6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013ab9:	4a                   	dec    edx
c0013aba:	74 38                	je     c0013af4 <schedule()+0x70>
c0013abc:	83 ec 0c             	sub    esp,0xc
c0013abf:	68 24 3e 02 c0       	push   0xc0023e24
c0013ac4:	e8 d3 8c 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ac9:	c7 04 24 24 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e24
c0013ad0:	89 c3                	mov    ebx,eax
c0013ad2:	e8 cd 8c 00 00       	call   c001c7a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013ad7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0013ade:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ae1:	e8 6e f8 ff ff       	call   c0013354 <switchToThread(ThreadControlBlock*)>
c0013ae6:	83 c4 10             	add    esp,0x10
c0013ae9:	8d 76 00             	lea    esi,[esi+0x0]
c0013aec:	83 c4 08             	add    esp,0x8
c0013aef:	5b                   	pop    ebx
c0013af0:	c3                   	ret    
c0013af1:	8d 76 00             	lea    esi,[esi+0x0]
c0013af4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013afb:	83 ec 08             	sub    esp,0x8
c0013afe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b03:	50                   	push   eax
c0013b04:	68 24 3e 02 c0       	push   0xc0023e24
c0013b09:	e8 4e 8d 00 00       	call   c001c85c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013b0e:	83 c4 10             	add    esp,0x10
c0013b11:	eb a9                	jmp    c0013abc <schedule()+0x38>
c0013b13:	90                   	nop

c0013b14 <Semaphore::tryAcquire()>:
c0013b14:	53                   	push   ebx
c0013b15:	83 ec 08             	sub    esp,0x8
c0013b18:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013b1c:	fa                   	cli    
c0013b1d:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013b22:	8d 50 01             	lea    edx,[eax+0x1]
c0013b25:	89 15 08 3e 02 c0    	mov    DWORD PTR ds:0xc0023e08,edx
c0013b2b:	8b 15 04 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e04
c0013b31:	8d 5a 01             	lea    ebx,[edx+0x1]
c0013b34:	89 1d 04 3e 02 c0    	mov    DWORD PTR ds:0xc0023e04,ebx
c0013b3a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0013b3d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0013b3f:	7c 33                	jl     c0013b74 <Semaphore::tryAcquire()+0x60>
c0013b41:	89 15 04 3e 02 c0    	mov    DWORD PTR ds:0xc0023e04,edx
c0013b47:	85 d2                	test   edx,edx
c0013b49:	75 0d                	jne    c0013b58 <Semaphore::tryAcquire()+0x44>
c0013b4b:	8b 15 00 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e00
c0013b51:	85 d2                	test   edx,edx
c0013b53:	75 6b                	jne    c0013bc0 <Semaphore::tryAcquire()+0xac>
c0013b55:	8d 76 00             	lea    esi,[esi+0x0]
c0013b58:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013b5d:	85 c0                	test   eax,eax
c0013b5f:	74 0b                	je     c0013b6c <Semaphore::tryAcquire()+0x58>
c0013b61:	8d 76 00             	lea    esi,[esi+0x0]
c0013b64:	31 c0                	xor    eax,eax
c0013b66:	83 c4 08             	add    esp,0x8
c0013b69:	5b                   	pop    ebx
c0013b6a:	c3                   	ret    
c0013b6b:	90                   	nop
c0013b6c:	fb                   	sti    
c0013b6d:	83 c4 08             	add    esp,0x8
c0013b70:	5b                   	pop    ebx
c0013b71:	c3                   	ret    
c0013b72:	66 90                	xchg   ax,ax
c0013b74:	43                   	inc    ebx
c0013b75:	89 15 04 3e 02 c0    	mov    DWORD PTR ds:0xc0023e04,edx
c0013b7b:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0013b7e:	85 d2                	test   edx,edx
c0013b80:	75 22                	jne    c0013ba4 <Semaphore::tryAcquire()+0x90>
c0013b82:	8b 0d 00 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023e00
c0013b88:	85 c9                	test   ecx,ecx
c0013b8a:	74 18                	je     c0013ba4 <Semaphore::tryAcquire()+0x90>
c0013b8c:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c0013b96:	e8 e9 fe ff ff       	call   c0013a84 <schedule()>
c0013b9b:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013ba0:	48                   	dec    eax
c0013ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0013ba4:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013ba9:	85 c0                	test   eax,eax
c0013bab:	75 0b                	jne    c0013bb8 <Semaphore::tryAcquire()+0xa4>
c0013bad:	fb                   	sti    
c0013bae:	b0 01                	mov    al,0x1
c0013bb0:	83 c4 08             	add    esp,0x8
c0013bb3:	5b                   	pop    ebx
c0013bb4:	c3                   	ret    
c0013bb5:	8d 76 00             	lea    esi,[esi+0x0]
c0013bb8:	b0 01                	mov    al,0x1
c0013bba:	83 c4 08             	add    esp,0x8
c0013bbd:	5b                   	pop    ebx
c0013bbe:	c3                   	ret    
c0013bbf:	90                   	nop
c0013bc0:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c0013bca:	e8 b5 fe ff ff       	call   c0013a84 <schedule()>
c0013bcf:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013bd4:	48                   	dec    eax
c0013bd5:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013bda:	85 c0                	test   eax,eax
c0013bdc:	75 86                	jne    c0013b64 <Semaphore::tryAcquire()+0x50>
c0013bde:	eb 8c                	jmp    c0013b6c <Semaphore::tryAcquire()+0x58>

c0013be0 <Semaphore::assertLocked(char const*)>:
c0013be0:	83 ec 0c             	sub    esp,0xc
c0013be3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013be7:	fa                   	cli    
c0013be8:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0013bee:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0013bf3:	8d 48 01             	lea    ecx,[eax+0x1]
c0013bf6:	89 0d 04 3e 02 c0    	mov    DWORD PTR ds:0xc0023e04,ecx
c0013bfc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013bfe:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013c01:	7c 29                	jl     c0013c2c <Semaphore::assertLocked(char const*)+0x4c>
c0013c03:	90                   	nop
c0013c04:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c0013c09:	85 c0                	test   eax,eax
c0013c0b:	75 0b                	jne    c0013c18 <Semaphore::assertLocked(char const*)+0x38>
c0013c0d:	a1 00 3e 02 c0       	mov    eax,ds:0xc0023e00
c0013c12:	85 c0                	test   eax,eax
c0013c14:	75 2e                	jne    c0013c44 <Semaphore::assertLocked(char const*)+0x64>
c0013c16:	66 90                	xchg   ax,ax
c0013c18:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013c1d:	48                   	dec    eax
c0013c1e:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013c23:	75 03                	jne    c0013c28 <Semaphore::assertLocked(char const*)+0x48>
c0013c25:	fb                   	sti    
c0013c26:	66 90                	xchg   ax,ax
c0013c28:	83 c4 0c             	add    esp,0xc
c0013c2b:	c3                   	ret    
c0013c2c:	83 ec 0c             	sub    esp,0xc
c0013c2f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c33:	52                   	push   edx
c0013c34:	e8 f6 ca ff ff       	call   c001072f <Krnl::panic(char const*)>
c0013c39:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0013c3e:	83 c4 10             	add    esp,0x10
c0013c41:	48                   	dec    eax
c0013c42:	eb c0                	jmp    c0013c04 <Semaphore::assertLocked(char const*)+0x24>
c0013c44:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c0013c4e:	e8 31 fe ff ff       	call   c0013a84 <schedule()>
c0013c53:	eb c3                	jmp    c0013c18 <Semaphore::assertLocked(char const*)+0x38>
c0013c55:	8d 76 00             	lea    esi,[esi+0x0]

c0013c58 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013c58:	83 ec 0c             	sub    esp,0xc
c0013c5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c64:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013c67:	e8 18 fe ff ff       	call   c0013a84 <schedule()>
c0013c6c:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013c71:	48                   	dec    eax
c0013c72:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013c77:	75 03                	jne    c0013c7c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013c79:	fb                   	sti    
c0013c7a:	66 90                	xchg   ax,ax
c0013c7c:	83 c4 0c             	add    esp,0xc
c0013c7f:	c3                   	ret    

c0013c80 <blockTask(TaskState)>:
c0013c80:	83 ec 0c             	sub    esp,0xc
c0013c83:	fa                   	cli    
c0013c84:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0013c8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c93:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013c96:	e8 e9 fd ff ff       	call   c0013a84 <schedule()>
c0013c9b:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013ca0:	48                   	dec    eax
c0013ca1:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013ca6:	75 04                	jne    c0013cac <blockTask(TaskState)+0x2c>
c0013ca8:	fb                   	sti    
c0013ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0013cac:	83 c4 0c             	add    esp,0xc
c0013caf:	c3                   	ret    

c0013cb0 <waitTask(int, int*, int)>:
c0013cb0:	83 ec 18             	sub    esp,0x18
c0013cb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cb8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013cbc:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013cbf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013cc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cc8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013ccb:	6a 07                	push   0x7
c0013ccd:	e8 ae ff ff ff       	call   c0013c80 <blockTask(TaskState)>
c0013cd2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cd7:	83 c4 10             	add    esp,0x10
c0013cda:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013cdd:	85 d2                	test   edx,edx
c0013cdf:	74 0b                	je     c0013cec <waitTask(int, int*, int)+0x3c>
c0013ce1:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013ce4:	89 02                	mov    DWORD PTR [edx],eax
c0013ce6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ceb:	90                   	nop
c0013cec:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013cef:	83 c4 0c             	add    esp,0xc
c0013cf2:	c3                   	ret    
c0013cf3:	90                   	nop

c0013cf4 <milliTenthSleepUntil(unsigned int)>:
c0013cf4:	83 ec 0c             	sub    esp,0xc
c0013cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cfb:	39 05 0c 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f0c,eax
c0013d01:	76 05                	jbe    c0013d08 <milliTenthSleepUntil(unsigned int)+0x14>
c0013d03:	90                   	nop
c0013d04:	83 c4 0c             	add    esp,0xc
c0013d07:	c3                   	ret    
c0013d08:	fa                   	cli    
c0013d09:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0013d0f:	83 ec 08             	sub    esp,0x8
c0013d12:	ff 05 04 3e 02 c0    	inc    DWORD PTR ds:0xc0023e04
c0013d18:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013d1e:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013d21:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013d27:	52                   	push   edx
c0013d28:	68 18 3e 02 c0       	push   0xc0023e18
c0013d2d:	e8 2a 8b 00 00       	call   c001c85c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013d32:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013d39:	e8 42 ff ff ff       	call   c0013c80 <blockTask(TaskState)>
c0013d3e:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0013d43:	83 c4 10             	add    esp,0x10
c0013d46:	48                   	dec    eax
c0013d47:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c0013d4c:	85 c0                	test   eax,eax
c0013d4e:	75 0c                	jne    c0013d5c <milliTenthSleepUntil(unsigned int)+0x68>
c0013d50:	a1 00 3e 02 c0       	mov    eax,ds:0xc0023e00
c0013d55:	85 c0                	test   eax,eax
c0013d57:	75 17                	jne    c0013d70 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013d59:	8d 76 00             	lea    esi,[esi+0x0]
c0013d5c:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013d61:	48                   	dec    eax
c0013d62:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013d67:	75 9b                	jne    c0013d04 <milliTenthSleepUntil(unsigned int)+0x10>
c0013d69:	fb                   	sti    
c0013d6a:	83 c4 0c             	add    esp,0xc
c0013d6d:	c3                   	ret    
c0013d6e:	66 90                	xchg   ax,ax
c0013d70:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c0013d7a:	e8 05 fd ff ff       	call   c0013a84 <schedule()>
c0013d7f:	eb db                	jmp    c0013d5c <milliTenthSleepUntil(unsigned int)+0x68>
c0013d81:	8d 76 00             	lea    esi,[esi+0x0]

c0013d84 <milliTenthSleep(unsigned int)>:
c0013d84:	a1 0c 2f 02 c0       	mov    eax,ds:0xc0022f0c
c0013d89:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013d8d:	e9 62 ff ff ff       	jmp    c0013cf4 <milliTenthSleepUntil(unsigned int)>
c0013d92:	66 90                	xchg   ax,ax

c0013d94 <sleep(unsigned int)>:
c0013d94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d98:	8d 04 80             	lea    eax,[eax+eax*4]
c0013d9b:	8d 04 80             	lea    eax,[eax+eax*4]
c0013d9e:	8d 04 80             	lea    eax,[eax+eax*4]
c0013da1:	8d 04 80             	lea    eax,[eax+eax*4]
c0013da4:	c1 e0 04             	shl    eax,0x4
c0013da7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013dab:	eb d7                	jmp    c0013d84 <milliTenthSleep(unsigned int)>
c0013dad:	90                   	nop
c0013dae:	66 90                	xchg   ax,ax

c0013db0 <Semaphore::acquire()>:
c0013db0:	83 ec 0c             	sub    esp,0xc
c0013db3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013db7:	fa                   	cli    
c0013db8:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0013dbd:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0013dc3:	8d 48 01             	lea    ecx,[eax+0x1]
c0013dc6:	89 0d 04 3e 02 c0    	mov    DWORD PTR ds:0xc0023e04,ecx
c0013dcc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013dcf:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013dd1:	7d 2d                	jge    c0013e00 <Semaphore::acquire()+0x50>
c0013dd3:	41                   	inc    ecx
c0013dd4:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013dd7:	90                   	nop
c0013dd8:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c0013ddd:	85 c0                	test   eax,eax
c0013ddf:	75 0b                	jne    c0013dec <Semaphore::acquire()+0x3c>
c0013de1:	a1 00 3e 02 c0       	mov    eax,ds:0xc0023e00
c0013de6:	85 c0                	test   eax,eax
c0013de8:	75 62                	jne    c0013e4c <Semaphore::acquire()+0x9c>
c0013dea:	66 90                	xchg   ax,ax
c0013dec:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013df1:	48                   	dec    eax
c0013df2:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013df7:	75 03                	jne    c0013dfc <Semaphore::acquire()+0x4c>
c0013df9:	fb                   	sti    
c0013dfa:	66 90                	xchg   ax,ax
c0013dfc:	83 c4 0c             	add    esp,0xc
c0013dff:	c3                   	ret    
c0013e00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e05:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013e0c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013e0f:	85 c9                	test   ecx,ecx
c0013e11:	74 4d                	je     c0013e60 <Semaphore::acquire()+0xb0>
c0013e13:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013e16:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013e1c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013e1f:	90                   	nop
c0013e20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e25:	83 ec 0c             	sub    esp,0xc
c0013e28:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013e2b:	68 3c eb 01 c0       	push   0xc001eb3c
c0013e30:	e8 ab 6d ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0013e35:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013e3c:	e8 3f fe ff ff       	call   c0013c80 <blockTask(TaskState)>
c0013e41:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0013e46:	83 c4 10             	add    esp,0x10
c0013e49:	48                   	dec    eax
c0013e4a:	eb 8c                	jmp    c0013dd8 <Semaphore::acquire()+0x28>
c0013e4c:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c0013e56:	e8 29 fc ff ff       	call   c0013a84 <schedule()>
c0013e5b:	eb 8f                	jmp    c0013dec <Semaphore::acquire()+0x3c>
c0013e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0013e60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e65:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013e68:	eb b6                	jmp    c0013e20 <Semaphore::acquire()+0x70>
c0013e6a:	66 90                	xchg   ax,ax

c0013e6c <taskReturned>:
c0013e6c:	83 ec 18             	sub    esp,0x18
c0013e6f:	68 5c eb 01 c0       	push   0xc001eb5c
c0013e74:	e8 b6 c8 ff ff       	call   c001072f <Krnl::panic(char const*)>
c0013e79:	83 c4 10             	add    esp,0x10
c0013e7c:	83 ec 0c             	sub    esp,0xc
c0013e7f:	6a 02                	push   0x2
c0013e81:	e8 fa fd ff ff       	call   c0013c80 <blockTask(TaskState)>
c0013e86:	fa                   	cli    
c0013e87:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0013e8d:	e8 f2 fb ff ff       	call   c0013a84 <schedule()>
c0013e92:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013e97:	83 c4 10             	add    esp,0x10
c0013e9a:	48                   	dec    eax
c0013e9b:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013ea0:	85 c0                	test   eax,eax
c0013ea2:	75 d8                	jne    c0013e7c <taskReturned+0x10>
c0013ea4:	fb                   	sti    
c0013ea5:	eb d5                	jmp    c0013e7c <taskReturned+0x10>
c0013ea7:	90                   	nop

c0013ea8 <Thr::processFromPID(int)>:
c0013ea8:	57                   	push   edi
c0013ea9:	56                   	push   esi
c0013eaa:	53                   	push   ebx
c0013eab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013eaf:	fa                   	cli    
c0013eb0:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0013eb6:	83 ec 0c             	sub    esp,0xc
c0013eb9:	68 24 3e 02 c0       	push   0xc0023e24
c0013ebe:	e8 d9 88 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ec3:	83 c4 10             	add    esp,0x10
c0013ec6:	89 c7                	mov    edi,eax
c0013ec8:	eb 16                	jmp    c0013ee0 <Thr::processFromPID(int)+0x38>
c0013eca:	66 90                	xchg   ax,ax
c0013ecc:	83 ec 0c             	sub    esp,0xc
c0013ecf:	68 24 3e 02 c0       	push   0xc0023e24
c0013ed4:	e8 c3 88 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ed9:	83 c4 10             	add    esp,0x10
c0013edc:	39 f8                	cmp    eax,edi
c0013ede:	74 4c                	je     c0013f2c <Thr::processFromPID(int)+0x84>
c0013ee0:	83 ec 0c             	sub    esp,0xc
c0013ee3:	68 24 3e 02 c0       	push   0xc0023e24
c0013ee8:	e8 af 88 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013eed:	c7 04 24 24 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e24
c0013ef4:	89 c3                	mov    ebx,eax
c0013ef6:	e8 a9 88 00 00       	call   c001c7a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013efb:	58                   	pop    eax
c0013efc:	5a                   	pop    edx
c0013efd:	53                   	push   ebx
c0013efe:	68 24 3e 02 c0       	push   0xc0023e24
c0013f03:	e8 54 89 00 00       	call   c001c85c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013f08:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f0b:	83 c4 10             	add    esp,0x10
c0013f0e:	39 30                	cmp    DWORD PTR [eax],esi
c0013f10:	75 ba                	jne    c0013ecc <Thr::processFromPID(int)+0x24>
c0013f12:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013f17:	48                   	dec    eax
c0013f18:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013f1d:	74 09                	je     c0013f28 <Thr::processFromPID(int)+0x80>
c0013f1f:	90                   	nop
c0013f20:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f23:	5b                   	pop    ebx
c0013f24:	5e                   	pop    esi
c0013f25:	5f                   	pop    edi
c0013f26:	c3                   	ret    
c0013f27:	90                   	nop
c0013f28:	fb                   	sti    
c0013f29:	eb f5                	jmp    c0013f20 <Thr::processFromPID(int)+0x78>
c0013f2b:	90                   	nop
c0013f2c:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013f31:	48                   	dec    eax
c0013f32:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013f37:	75 07                	jne    c0013f40 <Thr::processFromPID(int)+0x98>
c0013f39:	fb                   	sti    
c0013f3a:	5b                   	pop    ebx
c0013f3b:	5e                   	pop    esi
c0013f3c:	5f                   	pop    edi
c0013f3d:	c3                   	ret    
c0013f3e:	66 90                	xchg   ax,ax
c0013f40:	5b                   	pop    ebx
c0013f41:	31 c0                	xor    eax,eax
c0013f43:	5e                   	pop    esi
c0013f44:	5f                   	pop    edi
c0013f45:	c3                   	ret    
c0013f46:	66 90                	xchg   ax,ax

c0013f48 <unblockTask(ThreadControlBlock*)>:
c0013f48:	53                   	push   ebx
c0013f49:	83 ec 08             	sub    esp,0x8
c0013f4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f50:	fa                   	cli    
c0013f51:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0013f57:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013f5a:	85 c0                	test   eax,eax
c0013f5c:	74 66                	je     c0013fc4 <unblockTask(ThreadControlBlock*)+0x7c>
c0013f5e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013f61:	48                   	dec    eax
c0013f62:	74 38                	je     c0013f9c <unblockTask(ThreadControlBlock*)+0x54>
c0013f64:	83 ec 0c             	sub    esp,0xc
c0013f67:	68 24 3e 02 c0       	push   0xc0023e24
c0013f6c:	e8 2b 88 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f71:	83 c4 10             	add    esp,0x10
c0013f74:	85 c0                	test   eax,eax
c0013f76:	75 1c                	jne    c0013f94 <unblockTask(ThreadControlBlock*)+0x4c>
c0013f78:	eb 5e                	jmp    c0013fd8 <unblockTask(ThreadControlBlock*)+0x90>
c0013f7a:	66 90                	xchg   ax,ax
c0013f7c:	83 ec 08             	sub    esp,0x8
c0013f7f:	50                   	push   eax
c0013f80:	68 24 3e 02 c0       	push   0xc0023e24
c0013f85:	e8 c2 8b 00 00       	call   c001cb4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013f8a:	83 c4 10             	add    esp,0x10
c0013f8d:	85 c0                	test   eax,eax
c0013f8f:	74 47                	je     c0013fd8 <unblockTask(ThreadControlBlock*)+0x90>
c0013f91:	8d 76 00             	lea    esi,[esi+0x0]
c0013f94:	39 c3                	cmp    ebx,eax
c0013f96:	75 e4                	jne    c0013f7c <unblockTask(ThreadControlBlock*)+0x34>
c0013f98:	eb 12                	jmp    c0013fac <unblockTask(ThreadControlBlock*)+0x64>
c0013f9a:	66 90                	xchg   ax,ax
c0013f9c:	83 ec 0c             	sub    esp,0xc
c0013f9f:	68 df ea 01 c0       	push   0xc001eadf
c0013fa4:	e8 37 6c ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0013fa9:	83 c4 10             	add    esp,0x10
c0013fac:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0013fb1:	48                   	dec    eax
c0013fb2:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0013fb7:	75 03                	jne    c0013fbc <unblockTask(ThreadControlBlock*)+0x74>
c0013fb9:	fb                   	sti    
c0013fba:	66 90                	xchg   ax,ax
c0013fbc:	83 c4 08             	add    esp,0x8
c0013fbf:	5b                   	pop    ebx
c0013fc0:	c3                   	ret    
c0013fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fc4:	83 ec 0c             	sub    esp,0xc
c0013fc7:	68 c8 ea 01 c0       	push   0xc001eac8
c0013fcc:	e8 0f 6c ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0013fd1:	83 c4 10             	add    esp,0x10
c0013fd4:	eb d6                	jmp    c0013fac <unblockTask(ThreadControlBlock*)+0x64>
c0013fd6:	66 90                	xchg   ax,ax
c0013fd8:	83 ec 08             	sub    esp,0x8
c0013fdb:	53                   	push   ebx
c0013fdc:	68 24 3e 02 c0       	push   0xc0023e24
c0013fe1:	e8 76 88 00 00       	call   c001c85c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013fe6:	83 c4 10             	add    esp,0x10
c0013fe9:	eb c1                	jmp    c0013fac <unblockTask(ThreadControlBlock*)+0x64>
c0013feb:	90                   	nop

c0013fec <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013fec:	55                   	push   ebp
c0013fed:	57                   	push   edi
c0013fee:	56                   	push   esi
c0013fef:	53                   	push   ebx
c0013ff0:	83 ec 1c             	sub    esp,0x1c
c0013ff3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013ff7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ffa:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0014000:	85 ed                	test   ebp,ebp
c0014002:	7e 24                	jle    c0014028 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0014004:	31 f6                	xor    esi,esi
c0014006:	66 90                	xchg   ax,ax
c0014008:	83 ec 0c             	sub    esp,0xc
c001400b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0014012:	46                   	inc    esi
c0014013:	57                   	push   edi
c0014014:	e8 48 3e ff ff       	call   c0007e61 <free>
c0014019:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001401c:	83 c4 10             	add    esp,0x10
c001401f:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0014025:	7f e1                	jg     c0014008 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0014027:	90                   	nop
c0014028:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014032:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014037:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001403a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c001403d:	d3 c0                	rol    eax,cl
c001403f:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0014046:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014049:	89 f7                	mov    edi,esi
c001404b:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0014053:	0f 85 77 01 00 00    	jne    c00141d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014059:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001405f:	85 ed                	test   ebp,ebp
c0014061:	74 1d                	je     c0014080 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0014063:	83 ec 0c             	sub    esp,0xc
c0014066:	55                   	push   ebp
c0014067:	e8 68 c4 ff ff       	call   c00104d4 <EnvVarContainer::~EnvVarContainer()>
c001406c:	59                   	pop    ecx
c001406d:	5e                   	pop    esi
c001406e:	6a 0c                	push   0xc
c0014070:	55                   	push   ebp
c0014071:	e8 74 6a ff ff       	call   c000aaea <operator delete(void*, unsigned long)>
c0014076:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014079:	83 c4 10             	add    esp,0x10
c001407c:	89 f7                	mov    edi,esi
c001407e:	66 90                	xchg   ax,ax
c0014080:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014086:	85 c0                	test   eax,eax
c0014088:	0f 84 b6 00 00 00    	je     c0014144 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c001408e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0014091:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0014095:	31 c9                	xor    ecx,ecx
c0014097:	eb 17                	jmp    c00140b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0014099:	8d 76 00             	lea    esi,[esi+0x0]
c001409c:	41                   	inc    ecx
c001409d:	83 f9 10             	cmp    ecx,0x10
c00140a0:	0f 84 9e 00 00 00    	je     c0014144 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c00140a6:	66 90                	xchg   ax,ax
c00140a8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00140ae:	66 90                	xchg   ax,ax
c00140b0:	31 d2                	xor    edx,edx
c00140b2:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c00140b9:	d3 fa                	sar    edx,cl
c00140bb:	83 e2 01             	and    edx,0x1
c00140be:	74 dc                	je     c001409c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00140c0:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00140c3:	01 d2                	add    edx,edx
c00140c5:	01 ca                	add    edx,ecx
c00140c7:	8d 14 92             	lea    edx,[edx+edx*4]
c00140ca:	01 d0                	add    eax,edx
c00140cc:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00140d2:	83 fd 07             	cmp    ebp,0x7
c00140d5:	75 c5                	jne    c001409c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00140d7:	05 40 02 00 00       	add    eax,0x240
c00140dc:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00140df:	83 fd ff             	cmp    ebp,0xffffffff
c00140e2:	0f 8c f0 00 00 00    	jl     c00141d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00140e8:	0f 84 ae 01 00 00    	je     c001429c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c00140ee:	85 ed                	test   ebp,ebp
c00140f0:	0f 84 92 01 00 00    	je     c0014288 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c00140f6:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00140f8:	75 a2                	jne    c001409c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00140fa:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014100:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014104:	01 d0                	add    eax,edx
c0014106:	66 90                	xchg   ax,ax
c0014108:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001410c:	83 ec 0c             	sub    esp,0xc
c001410f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0014115:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014118:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001411e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0014125:	50                   	push   eax
c0014126:	e8 1d fe ff ff       	call   c0013f48 <unblockTask(ThreadControlBlock*)>
c001412b:	83 c4 10             	add    esp,0x10
c001412e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014131:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014135:	89 f7                	mov    edi,esi
c0014137:	41                   	inc    ecx
c0014138:	83 f9 10             	cmp    ecx,0x10
c001413b:	0f 85 67 ff ff ff    	jne    c00140a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0014141:	8d 76 00             	lea    esi,[esi+0x0]
c0014144:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001414a:	85 c0                	test   eax,eax
c001414c:	74 62                	je     c00141b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c001414e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0014154:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001415a:	74 54                	je     c00141b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c001415c:	83 ec 0c             	sub    esp,0xc
c001415f:	68 24 3e 02 c0       	push   0xc0023e24
c0014164:	e8 33 86 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014169:	c7 04 24 24 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e24
c0014170:	89 c7                	mov    edi,eax
c0014172:	e8 09 86 00 00       	call   c001c780 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014177:	83 c4 10             	add    esp,0x10
c001417a:	84 c0                	test   al,al
c001417c:	0f 84 ce 00 00 00    	je     c0014250 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0014182:	66 90                	xchg   ax,ax
c0014184:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014187:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001418d:	85 d2                	test   edx,edx
c001418f:	74 0f                	je     c00141a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0014191:	83 ec 0c             	sub    esp,0xc
c0014194:	8b 02                	mov    eax,DWORD PTR [edx]
c0014196:	52                   	push   edx
c0014197:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001419a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001419d:	83 c4 10             	add    esp,0x10
c00141a0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00141aa:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00141ad:	8d 76 00             	lea    esi,[esi+0x0]
c00141b0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00141b6:	85 db                	test   ebx,ebx
c00141b8:	74 16                	je     c00141d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c00141ba:	83 ec 0c             	sub    esp,0xc
c00141bd:	53                   	push   ebx
c00141be:	e8 fb 5c ff ff       	call   c0009ebe <VAS::~VAS()>
c00141c3:	58                   	pop    eax
c00141c4:	5a                   	pop    edx
c00141c5:	6a 14                	push   0x14
c00141c7:	53                   	push   ebx
c00141c8:	e8 1d 69 ff ff       	call   c000aaea <operator delete(void*, unsigned long)>
c00141cd:	83 c4 10             	add    esp,0x10
c00141d0:	83 c4 1c             	add    esp,0x1c
c00141d3:	5b                   	pop    ebx
c00141d4:	5e                   	pop    esi
c00141d5:	5f                   	pop    edi
c00141d6:	5d                   	pop    ebp
c00141d7:	c3                   	ret    
c00141d8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00141dc:	83 ec 0c             	sub    esp,0xc
c00141df:	68 90 eb 01 c0       	push   0xc001eb90
c00141e4:	e8 46 c5 ff ff       	call   c001072f <Krnl::panic(char const*)>
c00141e9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00141ec:	83 c4 10             	add    esp,0x10
c00141ef:	89 f7                	mov    edi,esi
c00141f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00141f5:	e9 a2 fe ff ff       	jmp    c001409c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00141fa:	66 90                	xchg   ax,ax
c00141fc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014202:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0014208:	75 1e                	jne    c0014228 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001420a:	83 ec 0c             	sub    esp,0xc
c001420d:	68 f8 eb 01 c0       	push   0xc001ebf8
c0014212:	e8 c9 69 ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0014217:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001421e:	e8 5d fa ff ff       	call   c0013c80 <blockTask(TaskState)>
c0014223:	83 c4 10             	add    esp,0x10
c0014226:	66 90                	xchg   ax,ax
c0014228:	83 ec 08             	sub    esp,0x8
c001422b:	56                   	push   esi
c001422c:	68 24 3e 02 c0       	push   0xc0023e24
c0014231:	e8 26 86 00 00       	call   c001c85c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014236:	c7 04 24 24 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e24
c001423d:	e8 5a 85 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014242:	83 c4 10             	add    esp,0x10
c0014245:	39 f8                	cmp    eax,edi
c0014247:	0f 84 37 ff ff ff    	je     c0014184 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c001424d:	8d 76 00             	lea    esi,[esi+0x0]
c0014250:	83 ec 0c             	sub    esp,0xc
c0014253:	68 24 3e 02 c0       	push   0xc0023e24
c0014258:	e8 3f 85 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001425d:	c7 04 24 24 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e24
c0014264:	89 c6                	mov    esi,eax
c0014266:	e8 39 85 00 00       	call   c001c7a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001426b:	83 c4 10             	add    esp,0x10
c001426e:	39 f3                	cmp    ebx,esi
c0014270:	74 b6                	je     c0014228 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014272:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0014275:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014278:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001427e:	75 a8                	jne    c0014228 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014280:	e9 77 ff ff ff       	jmp    c00141fc <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0014285:	8d 76 00             	lea    esi,[esi+0x0]
c0014288:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001428c:	83 ec 0c             	sub    esp,0xc
c001428f:	68 c4 eb 01 c0       	push   0xc001ebc4
c0014294:	e9 4b ff ff ff       	jmp    c00141e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0014299:	8d 76 00             	lea    esi,[esi+0x0]
c001429c:	8b 36                	mov    esi,DWORD PTR [esi]
c001429e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00142a2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00142a5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00142a8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00142ae:	01 d7                	add    edi,edx
c00142b0:	89 f8                	mov    eax,edi
c00142b2:	e9 51 fe ff ff       	jmp    c0014108 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c00142b7:	90                   	nop

c00142b8 <cleanerTaskFunction(void*)>:
c00142b8:	53                   	push   ebx
c00142b9:	83 ec 08             	sub    esp,0x8
c00142bc:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00142c1:	48                   	dec    eax
c00142c2:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00142c7:	75 03                	jne    c00142cc <cleanerTaskFunction(void*)+0x14>
c00142c9:	fb                   	sti    
c00142ca:	66 90                	xchg   ax,ax
c00142cc:	fa                   	cli    
c00142cd:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00142d2:	80 3d ec 3d 02 c0 00 	cmp    BYTE PTR ds:0xc0023dec,0x0
c00142d9:	8d 50 01             	lea    edx,[eax+0x1]
c00142dc:	89 15 08 3e 02 c0    	mov    DWORD PTR ds:0xc0023e08,edx
c00142e2:	0f 84 ac 00 00 00    	je     c0014394 <cleanerTaskFunction(void*)+0xdc>
c00142e8:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00142ed:	85 c0                	test   eax,eax
c00142ef:	75 03                	jne    c00142f4 <cleanerTaskFunction(void*)+0x3c>
c00142f1:	fb                   	sti    
c00142f2:	66 90                	xchg   ax,ax
c00142f4:	c6 05 ec 3d 02 c0 00 	mov    BYTE PTR ds:0xc0023dec,0x0
c00142fb:	fa                   	cli    
c00142fc:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0014302:	ff 05 04 3e 02 c0    	inc    DWORD PTR ds:0xc0023e04
c0014308:	fa                   	cli    
c0014309:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c001430f:	eb 2b                	jmp    c001433c <cleanerTaskFunction(void*)+0x84>
c0014311:	8d 76 00             	lea    esi,[esi+0x0]
c0014314:	83 ec 0c             	sub    esp,0xc
c0014317:	68 0c 3e 02 c0       	push   0xc0023e0c
c001431c:	e8 7b 84 00 00       	call   c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014321:	c7 04 24 0c 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e0c
c0014328:	89 c3                	mov    ebx,eax
c001432a:	e8 75 84 00 00       	call   c001c7a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001432f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014332:	e8 b5 fc ff ff       	call   c0013fec <cleanupTerminatedTask(ThreadControlBlock*)>
c0014337:	83 c4 10             	add    esp,0x10
c001433a:	66 90                	xchg   ax,ax
c001433c:	83 ec 0c             	sub    esp,0xc
c001433f:	68 0c 3e 02 c0       	push   0xc0023e0c
c0014344:	e8 37 84 00 00       	call   c001c780 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014349:	83 c4 10             	add    esp,0x10
c001434c:	84 c0                	test   al,al
c001434e:	74 c4                	je     c0014314 <cleanerTaskFunction(void*)+0x5c>
c0014350:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0014355:	48                   	dec    eax
c0014356:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c001435b:	75 03                	jne    c0014360 <cleanerTaskFunction(void*)+0xa8>
c001435d:	fb                   	sti    
c001435e:	66 90                	xchg   ax,ax
c0014360:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0014365:	48                   	dec    eax
c0014366:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c001436b:	0f 85 4b ff ff ff    	jne    c00142bc <cleanerTaskFunction(void*)+0x4>
c0014371:	a1 00 3e 02 c0       	mov    eax,ds:0xc0023e00
c0014376:	85 c0                	test   eax,eax
c0014378:	0f 84 3e ff ff ff    	je     c00142bc <cleanerTaskFunction(void*)+0x4>
c001437e:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c0014388:	e8 f7 f6 ff ff       	call   c0013a84 <schedule()>
c001438d:	e9 2a ff ff ff       	jmp    c00142bc <cleanerTaskFunction(void*)+0x4>
c0014392:	66 90                	xchg   ax,ax
c0014394:	83 ec 0c             	sub    esp,0xc
c0014397:	6a 02                	push   0x2
c0014399:	e8 ba f8 ff ff       	call   c0013c58 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001439e:	83 c4 10             	add    esp,0x10
c00143a1:	e9 4e ff ff ff       	jmp    c00142f4 <cleanerTaskFunction(void*)+0x3c>
c00143a6:	66 90                	xchg   ax,ax

c00143a8 <terminateTask(int)>:
c00143a8:	83 ec 14             	sub    esp,0x14
c00143ab:	fa                   	cli    
c00143ac:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c00143b2:	ff 05 04 3e 02 c0    	inc    DWORD PTR ds:0xc0023e04
c00143b8:	fa                   	cli    
c00143b9:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c00143bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00143c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143c8:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00143cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143d0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00143d3:	50                   	push   eax
c00143d4:	68 0c 3e 02 c0       	push   0xc0023e0c
c00143d9:	e8 7e 84 00 00       	call   c001c85c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00143de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143e3:	83 c4 10             	add    esp,0x10
c00143e6:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00143ed:	a1 e8 3d 02 c0       	mov    eax,ds:0xc0023de8
c00143f2:	85 c0                	test   eax,eax
c00143f4:	74 5e                	je     c0014454 <terminateTask(int)+0xac>
c00143f6:	83 ec 0c             	sub    esp,0xc
c00143f9:	c6 05 ec 3d 02 c0 01 	mov    BYTE PTR ds:0xc0023dec,0x1
c0014400:	50                   	push   eax
c0014401:	e8 42 fb ff ff       	call   c0013f48 <unblockTask(ThreadControlBlock*)>
c0014406:	83 c4 10             	add    esp,0x10
c0014409:	8d 76 00             	lea    esi,[esi+0x0]
c001440c:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0014411:	48                   	dec    eax
c0014412:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0014417:	75 03                	jne    c001441c <terminateTask(int)+0x74>
c0014419:	fb                   	sti    
c001441a:	66 90                	xchg   ax,ax
c001441c:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0014421:	48                   	dec    eax
c0014422:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c0014427:	75 0b                	jne    c0014434 <terminateTask(int)+0x8c>
c0014429:	83 3d 00 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e00,0x0
c0014430:	75 36                	jne    c0014468 <terminateTask(int)+0xc0>
c0014432:	66 90                	xchg   ax,ax
c0014434:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0014439:	48                   	dec    eax
c001443a:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c001443f:	75 03                	jne    c0014444 <terminateTask(int)+0x9c>
c0014441:	fb                   	sti    
c0014442:	66 90                	xchg   ax,ax
c0014444:	fa                   	cli    
c0014445:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c001444b:	90                   	nop
c001444c:	e8 33 f6 ff ff       	call   c0013a84 <schedule()>
c0014451:	eb e1                	jmp    c0014434 <terminateTask(int)+0x8c>
c0014453:	90                   	nop
c0014454:	83 ec 0c             	sub    esp,0xc
c0014457:	68 f6 ea 01 c0       	push   0xc001eaf6
c001445c:	e8 7f 67 ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0014461:	83 c4 10             	add    esp,0x10
c0014464:	eb a6                	jmp    c001440c <terminateTask(int)+0x64>
c0014466:	66 90                	xchg   ax,ax
c0014468:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c0014472:	eb d8                	jmp    c001444c <terminateTask(int)+0xa4>

c0014474 <Thr::terminateFromIRQ(int)>:
c0014474:	83 ec 18             	sub    esp,0x18
c0014477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001447b:	50                   	push   eax
c001447c:	e8 27 ff ff ff       	call   c00143a8 <terminateTask(int)>
c0014481:	90                   	nop
c0014482:	66 90                	xchg   ax,ax

c0014484 <Semaphore::release()>:
c0014484:	83 ec 0c             	sub    esp,0xc
c0014487:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001448b:	fa                   	cli    
c001448c:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c0014491:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0014497:	8d 48 01             	lea    ecx,[eax+0x1]
c001449a:	89 0d 04 3e 02 c0    	mov    DWORD PTR ds:0xc0023e04,ecx
c00144a0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00144a3:	85 c9                	test   ecx,ecx
c00144a5:	74 41                	je     c00144e8 <Semaphore::release()+0x64>
c00144a7:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00144aa:	83 ec 0c             	sub    esp,0xc
c00144ad:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00144b0:	51                   	push   ecx
c00144b1:	e8 92 fa ff ff       	call   c0013f48 <unblockTask(ThreadControlBlock*)>
c00144b6:	a1 04 3e 02 c0       	mov    eax,ds:0xc0023e04
c00144bb:	83 c4 10             	add    esp,0x10
c00144be:	48                   	dec    eax
c00144bf:	90                   	nop
c00144c0:	a3 04 3e 02 c0       	mov    ds:0xc0023e04,eax
c00144c5:	85 c0                	test   eax,eax
c00144c7:	75 0b                	jne    c00144d4 <Semaphore::release()+0x50>
c00144c9:	a1 00 3e 02 c0       	mov    eax,ds:0xc0023e00
c00144ce:	85 c0                	test   eax,eax
c00144d0:	75 1e                	jne    c00144f0 <Semaphore::release()+0x6c>
c00144d2:	66 90                	xchg   ax,ax
c00144d4:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00144d9:	48                   	dec    eax
c00144da:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00144df:	75 03                	jne    c00144e4 <Semaphore::release()+0x60>
c00144e1:	fb                   	sti    
c00144e2:	66 90                	xchg   ax,ax
c00144e4:	83 c4 0c             	add    esp,0xc
c00144e7:	c3                   	ret    
c00144e8:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00144eb:	eb d3                	jmp    c00144c0 <Semaphore::release()+0x3c>
c00144ed:	8d 76 00             	lea    esi,[esi+0x0]
c00144f0:	c7 05 00 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e00,0x0
c00144fa:	e8 85 f5 ff ff       	call   c0013a84 <schedule()>
c00144ff:	eb d3                	jmp    c00144d4 <Semaphore::release()+0x50>
c0014501:	8d 76 00             	lea    esi,[esi+0x0]

c0014504 <__static_initialization_and_destruction_0(int, int)>:
c0014504:	83 ec 0c             	sub    esp,0xc
c0014507:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001450c:	0f 85 8e 00 00 00    	jne    c00145a0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014512:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001451a:	0f 85 80 00 00 00    	jne    c00145a0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014520:	83 ec 0c             	sub    esp,0xc
c0014523:	68 24 3e 02 c0       	push   0xc0023e24
c0014528:	e8 db 85 00 00       	call   c001cb08 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001452d:	83 c4 10             	add    esp,0x10
c0014530:	83 ec 04             	sub    esp,0x4
c0014533:	68 b8 f6 01 c0       	push   0xc001f6b8
c0014538:	68 24 3e 02 c0       	push   0xc0023e24
c001453d:	68 b8 ca 01 c0       	push   0xc001cab8
c0014542:	e8 53 65 ff ff       	call   c000aa9a <__cxa_atexit>
c0014547:	83 c4 10             	add    esp,0x10
c001454a:	83 ec 0c             	sub    esp,0xc
c001454d:	68 18 3e 02 c0       	push   0xc0023e18
c0014552:	e8 b1 85 00 00       	call   c001cb08 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014557:	83 c4 10             	add    esp,0x10
c001455a:	83 ec 04             	sub    esp,0x4
c001455d:	68 b8 f6 01 c0       	push   0xc001f6b8
c0014562:	68 18 3e 02 c0       	push   0xc0023e18
c0014567:	68 b8 ca 01 c0       	push   0xc001cab8
c001456c:	e8 29 65 ff ff       	call   c000aa9a <__cxa_atexit>
c0014571:	83 c4 10             	add    esp,0x10
c0014574:	83 ec 0c             	sub    esp,0xc
c0014577:	68 0c 3e 02 c0       	push   0xc0023e0c
c001457c:	e8 87 85 00 00       	call   c001cb08 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014581:	83 c4 10             	add    esp,0x10
c0014584:	83 ec 04             	sub    esp,0x4
c0014587:	68 b8 f6 01 c0       	push   0xc001f6b8
c001458c:	68 0c 3e 02 c0       	push   0xc0023e0c
c0014591:	68 b8 ca 01 c0       	push   0xc001cab8
c0014596:	e8 ff 64 ff ff       	call   c000aa9a <__cxa_atexit>
c001459b:	83 c4 10             	add    esp,0x10
c001459e:	66 90                	xchg   ax,ax
c00145a0:	90                   	nop
c00145a1:	83 c4 0c             	add    esp,0xc
c00145a4:	c3                   	ret    
c00145a5:	8d 76 00             	lea    esi,[esi+0x0]

c00145a8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00145a8:	83 ec 0c             	sub    esp,0xc
c00145ab:	83 ec 08             	sub    esp,0x8
c00145ae:	68 ff ff 00 00       	push   0xffff
c00145b3:	6a 01                	push   0x1
c00145b5:	e8 4a ff ff ff       	call   c0014504 <__static_initialization_and_destruction_0(int, int)>
c00145ba:	83 c4 10             	add    esp,0x10
c00145bd:	83 c4 0c             	add    esp,0xc
c00145c0:	c3                   	ret    

c00145c1 <Vm::inbv(unsigned short)>:
c00145c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00145c5:	66 81 fa fe fe       	cmp    dx,0xfefe
c00145ca:	75 06                	jne    c00145d2 <Vm::inbv(unsigned short)+0x11>
c00145cc:	a0 6c 3e 02 c0       	mov    al,ds:0xc0023e6c
c00145d1:	c3                   	ret    
c00145d2:	ec                   	in     al,dx
c00145d3:	c3                   	ret    

c00145d4 <Vm::outbv(unsigned short, unsigned char)>:
c00145d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00145d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00145dc:	66 81 fa fe fe       	cmp    dx,0xfefe
c00145e1:	75 25                	jne    c0014608 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00145e3:	8b 0d 6c 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023e6c
c00145e9:	8d 51 01             	lea    edx,[ecx+0x1]
c00145ec:	88 81 80 3e 02 c0    	mov    BYTE PTR [ecx-0x3ffdc180],al
c00145f2:	89 15 6c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e6c,edx
c00145f8:	83 fa 20             	cmp    edx,0x20
c00145fb:	75 0c                	jne    c0014609 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00145fd:	c7 05 6c 3e 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0023e6c,0x1f
c0014607:	c3                   	ret    
c0014608:	ee                   	out    dx,al
c0014609:	c3                   	ret    

c001460a <Vm::realToLinear(unsigned short, unsigned short)>:
c001460a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001460f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014614:	c1 e0 04             	shl    eax,0x4
c0014617:	01 d0                	add    eax,edx
c0014619:	c3                   	ret    

c001461a <Vm::getSegment(unsigned int)>:
c001461a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001461e:	c1 e8 10             	shr    eax,0x10
c0014621:	c3                   	ret    

c0014622 <Vm::getOffset(unsigned int)>:
c0014622:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014626:	c3                   	ret    

c0014627 <Vm::mainloop2()>:
c0014627:	83 ec 18             	sub    esp,0x18
c001462a:	fa                   	cli    
c001462b:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0014631:	6a 02                	push   0x2
c0014633:	c6 05 65 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023e65,0x1
c001463a:	e8 19 f6 ff ff       	call   c0013c58 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001463f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014644:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0014648:	52                   	push   edx
c0014649:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c001464d:	52                   	push   edx
c001464e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0014652:	52                   	push   edx
c0014653:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0014657:	50                   	push   eax
c0014658:	e8 d2 bb fe ff       	call   c000022f <goToVM86>
c001465d:	83 c4 2c             	add    esp,0x2c
c0014660:	c3                   	ret    

c0014661 <Vm::mainVm8086Loop(void*)>:
c0014661:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0014666:	48                   	dec    eax
c0014667:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c001466c:	75 01                	jne    c001466f <Vm::mainVm8086Loop(void*)+0xe>
c001466e:	fb                   	sti    
c001466f:	eb b6                	jmp    c0014627 <Vm::mainloop2()>

c0014671 <Vm::mainloop3(unsigned long)>:
c0014671:	83 ec 18             	sub    esp,0x18
c0014674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014678:	fa                   	cli    
c0014679:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c001467f:	6a 02                	push   0x2
c0014681:	c6 05 64 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023e64,0x1
c0014688:	a3 60 3e 02 c0       	mov    ds:0xc0023e60,eax
c001468d:	e8 c6 f5 ff ff       	call   c0013c58 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014692:	83 c4 1c             	add    esp,0x1c
c0014695:	eb 90                	jmp    c0014627 <Vm::mainloop2()>

c0014697 <Vm::initialise8086()>:
c0014697:	83 ec 0c             	sub    esp,0xc
c001469a:	68 80 00 00 00       	push   0x80
c001469f:	6a 00                	push   0x0
c00146a1:	68 61 46 01 c0       	push   0xc0014661
c00146a6:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c00146ac:	e8 b3 f1 ff ff       	call   c0013864 <Process::createThread(void (*)(void*), void*, int)>
c00146b1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00146b8:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c00146bd:	68 00 01 00 00       	push   0x100
c00146c2:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00146c7:	6a 00                	push   0x0
c00146c9:	6a 00                	push   0x0
c00146cb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00146d1:	e8 46 5c ff ff       	call   c000a31c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00146d6:	83 c4 2c             	add    esp,0x2c
c00146d9:	c3                   	ret    

c00146da <Vm::finish8086()>:
c00146da:	53                   	push   ebx
c00146db:	83 ec 08             	sub    esp,0x8
c00146de:	fa                   	cli    
c00146df:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c00146e5:	80 3d 64 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e64,0x0
c00146ec:	75 15                	jne    c0014703 <Vm::finish8086()+0x29>
c00146ee:	e8 91 f3 ff ff       	call   c0013a84 <schedule()>
c00146f3:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00146f8:	48                   	dec    eax
c00146f9:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00146fe:	75 de                	jne    c00146de <Vm::finish8086()+0x4>
c0014700:	fb                   	sti    
c0014701:	eb db                	jmp    c00146de <Vm::finish8086()+0x4>
c0014703:	83 ec 0c             	sub    esp,0xc
c0014706:	8b 1d 60 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023e60
c001470c:	ff 35 68 3e 02 c0    	push   DWORD PTR ds:0xc0023e68
c0014712:	c6 05 64 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023e64,0x0
c0014719:	e8 2a f8 ff ff       	call   c0013f48 <unblockTask(ThreadControlBlock*)>
c001471e:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0014723:	83 c4 10             	add    esp,0x10
c0014726:	8d 50 ff             	lea    edx,[eax-0x1]
c0014729:	89 15 08 3e 02 c0    	mov    DWORD PTR ds:0xc0023e08,edx
c001472f:	85 d2                	test   edx,edx
c0014731:	75 01                	jne    c0014734 <Vm::finish8086()+0x5a>
c0014733:	fb                   	sti    
c0014734:	89 d8                	mov    eax,ebx
c0014736:	83 c4 08             	add    esp,0x8
c0014739:	5b                   	pop    ebx
c001473a:	c3                   	ret    

c001473b <Vm::getOutput8086(unsigned char*)>:
c001473b:	57                   	push   edi
c001473c:	8b 0d 6c 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023e6c
c0014742:	56                   	push   esi
c0014743:	be 80 3e 02 c0       	mov    esi,0xc0023e80
c0014748:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001474c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001474e:	a1 6c 3e 02 c0       	mov    eax,ds:0xc0023e6c
c0014753:	5e                   	pop    esi
c0014754:	c7 05 6c 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e6c,0x0
c001475e:	5f                   	pop    edi
c001475f:	c3                   	ret    

c0014760 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014760:	55                   	push   ebp
c0014761:	57                   	push   edi
c0014762:	56                   	push   esi
c0014763:	53                   	push   ebx
c0014764:	83 ec 0c             	sub    esp,0xc
c0014767:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001476b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001476f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0014773:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0014777:	fa                   	cli    
c0014778:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c001477e:	80 3d 65 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e65,0x0
c0014785:	75 15                	jne    c001479c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0014787:	e8 f8 f2 ff ff       	call   c0013a84 <schedule()>
c001478c:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0014791:	48                   	dec    eax
c0014792:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0014797:	75 de                	jne    c0014777 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014799:	fb                   	sti    
c001479a:	eb db                	jmp    c0014777 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001479c:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c00147a1:	c7 05 6c 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e6c,0x0
c00147ab:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00147af:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00147b3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00147b7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00147bb:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00147bf:	0f b7 ff             	movzx  edi,di
c00147c2:	0f b7 f6             	movzx  esi,si
c00147c5:	50                   	push   eax
c00147c6:	6a 20                	push   0x20
c00147c8:	6a 00                	push   0x0
c00147ca:	68 80 3e 02 c0       	push   0xc0023e80
c00147cf:	e8 1c bd fe ff       	call   c00004f0 <memset>
c00147d4:	5a                   	pop    edx
c00147d5:	59                   	pop    ecx
c00147d6:	57                   	push   edi
c00147d7:	56                   	push   esi
c00147d8:	e8 2d fe ff ff       	call   c001460a <Vm::realToLinear(unsigned short, unsigned short)>
c00147dd:	83 c4 10             	add    esp,0x10
c00147e0:	89 c7                	mov    edi,eax
c00147e2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00147e6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00147ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00147ec:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c00147f1:	c6 05 65 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023e65,0x0
c00147f8:	48                   	dec    eax
c00147f9:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c00147fe:	75 01                	jne    c0014801 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014800:	fb                   	sti    
c0014801:	83 ec 0c             	sub    esp,0xc
c0014804:	ff 35 68 3e 02 c0    	push   DWORD PTR ds:0xc0023e68
c001480a:	e8 39 f7 ff ff       	call   c0013f48 <unblockTask(ThreadControlBlock*)>
c001480f:	83 c4 1c             	add    esp,0x1c
c0014812:	b0 01                	mov    al,0x1
c0014814:	5b                   	pop    ebx
c0014815:	5e                   	pop    esi
c0014816:	5f                   	pop    edi
c0014817:	5d                   	pop    ebp
c0014818:	c3                   	ret    

c0014819 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014819:	55                   	push   ebp
c001481a:	57                   	push   edi
c001481b:	56                   	push   esi
c001481c:	53                   	push   ebx
c001481d:	83 ec 2c             	sub    esp,0x2c
c0014820:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0014824:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0014828:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001482c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014830:	fa                   	cli    
c0014831:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c0014837:	0f b6 35 65 3e 02 c0 	movzx  esi,BYTE PTR ds:0xc0023e65
c001483e:	89 f0                	mov    eax,esi
c0014840:	84 c0                	test   al,al
c0014842:	75 1d                	jne    c0014861 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0014844:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014848:	e8 37 f2 ff ff       	call   c0013a84 <schedule()>
c001484d:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0014852:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014856:	48                   	dec    eax
c0014857:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c001485c:	75 d2                	jne    c0014830 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001485e:	fb                   	sti    
c001485f:	eb cf                	jmp    c0014830 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014861:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0014866:	c7 05 6c 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e6c,0x0
c0014870:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0014874:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014878:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c001487c:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0014880:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014884:	50                   	push   eax
c0014885:	6a 20                	push   0x20
c0014887:	6a 00                	push   0x0
c0014889:	68 80 3e 02 c0       	push   0xc0023e80
c001488e:	e8 5d bc fe ff       	call   c00004f0 <memset>
c0014893:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001489a:	e8 b2 35 ff ff       	call   c0007e51 <malloc>
c001489f:	83 c4 0c             	add    esp,0xc
c00148a2:	89 c3                	mov    ebx,eax
c00148a4:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c00148aa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00148ae:	50                   	push   eax
c00148af:	e8 a2 68 ff ff       	call   c000b156 <File::File(char const*, Process*)>
c00148b4:	83 c4 10             	add    esp,0x10
c00148b7:	85 db                	test   ebx,ebx
c00148b9:	75 0a                	jne    c00148c5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00148bb:	83 ec 0c             	sub    esp,0xc
c00148be:	68 20 ec 01 c0       	push   0xc001ec20
c00148c3:	eb 3e                	jmp    c0014903 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00148c5:	50                   	push   eax
c00148c6:	8d 44 24 17          	lea    eax,[esp+0x17]
c00148ca:	50                   	push   eax
c00148cb:	8d 44 24 20          	lea    eax,[esp+0x20]
c00148cf:	50                   	push   eax
c00148d0:	53                   	push   ebx
c00148d1:	e8 ec 6b ff ff       	call   c000b4c2 <File::stat(unsigned long long*, bool*)>
c00148d6:	83 c4 10             	add    esp,0x10
c00148d9:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00148de:	74 0a                	je     c00148ea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00148e0:	83 ec 0c             	sub    esp,0xc
c00148e3:	68 34 ec 01 c0       	push   0xc001ec34
c00148e8:	eb 19                	jmp    c0014903 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00148ea:	51                   	push   ecx
c00148eb:	51                   	push   ecx
c00148ec:	6a 01                	push   0x1
c00148ee:	53                   	push   ebx
c00148ef:	e8 22 69 ff ff       	call   c000b216 <File::open(FileOpenMode)>
c00148f4:	83 c4 10             	add    esp,0x10
c00148f7:	85 c0                	test   eax,eax
c00148f9:	74 24                	je     c001491f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00148fb:	83 ec 0c             	sub    esp,0xc
c00148fe:	68 4d ec 01 c0       	push   0xc001ec4d
c0014903:	e8 27 be ff ff       	call   c001072f <Krnl::panic(char const*)>
c0014908:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c001490d:	83 c4 10             	add    esp,0x10
c0014910:	48                   	dec    eax
c0014911:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0014916:	85 c0                	test   eax,eax
c0014918:	75 01                	jne    c001491b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001491a:	fb                   	sti    
c001491b:	31 f6                	xor    esi,esi
c001491d:	eb 58                	jmp    c0014977 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001491f:	0f b7 ed             	movzx  ebp,bp
c0014922:	50                   	push   eax
c0014923:	0f b7 ff             	movzx  edi,di
c0014926:	50                   	push   eax
c0014927:	55                   	push   ebp
c0014928:	57                   	push   edi
c0014929:	e8 dc fc ff ff       	call   c001460a <Vm::realToLinear(unsigned short, unsigned short)>
c001492e:	5a                   	pop    edx
c001492f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014931:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014935:	51                   	push   ecx
c0014936:	50                   	push   eax
c0014937:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001493b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001493f:	53                   	push   ebx
c0014940:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0014943:	83 c4 14             	add    esp,0x14
c0014946:	53                   	push   ebx
c0014947:	e8 28 69 ff ff       	call   c000b274 <File::close()>
c001494c:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0014951:	83 c4 10             	add    esp,0x10
c0014954:	48                   	dec    eax
c0014955:	c6 05 65 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023e65,0x0
c001495c:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0014961:	85 c0                	test   eax,eax
c0014963:	75 01                	jne    c0014966 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0014965:	fb                   	sti    
c0014966:	83 ec 0c             	sub    esp,0xc
c0014969:	ff 35 68 3e 02 c0    	push   DWORD PTR ds:0xc0023e68
c001496f:	e8 d4 f5 ff ff       	call   c0013f48 <unblockTask(ThreadControlBlock*)>
c0014974:	83 c4 10             	add    esp,0x10
c0014977:	83 c4 2c             	add    esp,0x2c
c001497a:	89 f0                	mov    eax,esi
c001497c:	5b                   	pop    ebx
c001497d:	5e                   	pop    esi
c001497e:	5f                   	pop    edi
c001497f:	5d                   	pop    ebp
c0014980:	c3                   	ret    

c0014981 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0014981:	57                   	push   edi
c0014982:	56                   	push   esi
c0014983:	53                   	push   ebx
c0014984:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014988:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001498c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014990:	83 e8 06             	sub    eax,0x6
c0014993:	0f b7 c0             	movzx  eax,ax
c0014996:	50                   	push   eax
c0014997:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001499c:	50                   	push   eax
c001499d:	e8 68 fc ff ff       	call   c001460a <Vm::realToLinear(unsigned short, unsigned short)>
c00149a2:	5a                   	pop    edx
c00149a3:	5e                   	pop    esi
c00149a4:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00149a7:	8d 56 fa             	lea    edx,[esi-0x6]
c00149aa:	81 e2 ff ff 00 00    	and    edx,0xffff
c00149b0:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00149b3:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00149b6:	83 c2 02             	add    edx,0x2
c00149b9:	66 89 10             	mov    WORD PTR [eax],dx
c00149bc:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00149bf:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00149c3:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00149c6:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00149ca:	89 d6                	mov    esi,edx
c00149cc:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00149d2:	66 81 e6 ff fd       	and    si,0xfdff
c00149d7:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00149db:	74 07                	je     c00149e4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00149dd:	89 d6                	mov    esi,edx
c00149df:	66 81 ce 00 02       	or     si,0x200
c00149e4:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00149e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149ed:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00149f1:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00149f9:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00149fc:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0014a04:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0014a07:	5b                   	pop    ebx
c0014a08:	5e                   	pop    esi
c0014a09:	5f                   	pop    edi
c0014a0a:	c3                   	ret    

c0014a0b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0014a0b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a10:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a15:	c1 e0 04             	shl    eax,0x4
c0014a18:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0014a1b:	c3                   	ret    

c0014a1c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0014a1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a21:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a26:	c1 e0 04             	shl    eax,0x4
c0014a29:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0014a2d:	c3                   	ret    

c0014a2e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0014a2e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a33:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a38:	c1 e0 04             	shl    eax,0x4
c0014a3b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0014a3e:	c3                   	ret    

c0014a3f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0014a3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a44:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a49:	c1 e0 04             	shl    eax,0x4
c0014a4c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a50:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0014a53:	c3                   	ret    

c0014a54 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0014a54:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a59:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a5e:	c1 e0 04             	shl    eax,0x4
c0014a61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a65:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014a69:	c3                   	ret    

c0014a6a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0014a6a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014a6f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014a74:	c1 e0 04             	shl    eax,0x4
c0014a77:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a7b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0014a7e:	c3                   	ret    

c0014a7f <Vm::faultHandler(regs*)>:
c0014a7f:	55                   	push   ebp
c0014a80:	57                   	push   edi
c0014a81:	56                   	push   esi
c0014a82:	53                   	push   ebx
c0014a83:	83 ec 1c             	sub    esp,0x1c
c0014a86:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014a8a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014a8d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014a91:	0f b7 f8             	movzx  edi,ax
c0014a94:	52                   	push   edx
c0014a95:	0f b7 c0             	movzx  eax,ax
c0014a98:	50                   	push   eax
c0014a99:	e8 6c fb ff ff       	call   c001460a <Vm::realToLinear(unsigned short, unsigned short)>
c0014a9e:	5a                   	pop    edx
c0014a9f:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0014aa2:	59                   	pop    ecx
c0014aa3:	89 c1                	mov    ecx,eax
c0014aa5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014aa8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014aac:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014ab1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014ab5:	0f b7 c5             	movzx  eax,bp
c0014ab8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014abc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014ac0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014ac4:	e8 41 fb ff ff       	call   c001460a <Vm::realToLinear(unsigned short, unsigned short)>
c0014ac9:	5e                   	pop    esi
c0014aca:	be 06 00 00 00       	mov    esi,0x6
c0014acf:	5a                   	pop    edx
c0014ad0:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0014ad5:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0014ada:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014add:	80 fa 9d             	cmp    dl,0x9d
c0014ae0:	0f 84 2c 02 00 00    	je     c0014d12 <Vm::faultHandler(regs*)+0x293>
c0014ae6:	0f 87 91 00 00 00    	ja     c0014b7d <Vm::faultHandler(regs*)+0xfe>
c0014aec:	80 fa 66             	cmp    dl,0x66
c0014aef:	0f 84 98 01 00 00    	je     c0014c8d <Vm::faultHandler(regs*)+0x20e>
c0014af5:	77 47                	ja     c0014b3e <Vm::faultHandler(regs*)+0xbf>
c0014af7:	80 fa 36             	cmp    dl,0x36
c0014afa:	0f 84 80 01 00 00    	je     c0014c80 <Vm::faultHandler(regs*)+0x201>
c0014b00:	77 1a                	ja     c0014b1c <Vm::faultHandler(regs*)+0x9d>
c0014b02:	80 fa 26             	cmp    dl,0x26
c0014b05:	0f 84 4e 01 00 00    	je     c0014c59 <Vm::faultHandler(regs*)+0x1da>
c0014b0b:	80 fa 2e             	cmp    dl,0x2e
c0014b0e:	0f 85 e2 05 00 00    	jne    c00150f6 <Vm::faultHandler(regs*)+0x677>
c0014b14:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b17:	31 f6                	xor    esi,esi
c0014b19:	41                   	inc    ecx
c0014b1a:	eb be                	jmp    c0014ada <Vm::faultHandler(regs*)+0x5b>
c0014b1c:	80 fa 64             	cmp    dl,0x64
c0014b1f:	0f 84 41 01 00 00    	je     c0014c66 <Vm::faultHandler(regs*)+0x1e7>
c0014b25:	0f 87 48 01 00 00    	ja     c0014c73 <Vm::faultHandler(regs*)+0x1f4>
c0014b2b:	80 fa 3e             	cmp    dl,0x3e
c0014b2e:	0f 85 c2 05 00 00    	jne    c00150f6 <Vm::faultHandler(regs*)+0x677>
c0014b34:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b37:	be 01 00 00 00       	mov    esi,0x1
c0014b3c:	eb db                	jmp    c0014b19 <Vm::faultHandler(regs*)+0x9a>
c0014b3e:	80 fa 6d             	cmp    dl,0x6d
c0014b41:	0f 84 ec 02 00 00    	je     c0014e33 <Vm::faultHandler(regs*)+0x3b4>
c0014b47:	77 17                	ja     c0014b60 <Vm::faultHandler(regs*)+0xe1>
c0014b49:	80 fa 67             	cmp    dl,0x67
c0014b4c:	0f 84 48 01 00 00    	je     c0014c9a <Vm::faultHandler(regs*)+0x21b>
c0014b52:	80 fa 6c             	cmp    dl,0x6c
c0014b55:	0f 84 69 02 00 00    	je     c0014dc4 <Vm::faultHandler(regs*)+0x345>
c0014b5b:	e9 96 05 00 00       	jmp    c00150f6 <Vm::faultHandler(regs*)+0x677>
c0014b60:	80 fa 6f             	cmp    dl,0x6f
c0014b63:	0f 84 f4 03 00 00    	je     c0014f5d <Vm::faultHandler(regs*)+0x4de>
c0014b69:	0f 82 59 03 00 00    	jb     c0014ec8 <Vm::faultHandler(regs*)+0x449>
c0014b6f:	80 fa 9c             	cmp    dl,0x9c
c0014b72:	0f 84 2f 01 00 00    	je     c0014ca7 <Vm::faultHandler(regs*)+0x228>
c0014b78:	e9 79 05 00 00       	jmp    c00150f6 <Vm::faultHandler(regs*)+0x677>
c0014b7d:	80 fa ec             	cmp    dl,0xec
c0014b80:	0f 84 14 05 00 00    	je     c001509a <Vm::faultHandler(regs*)+0x61b>
c0014b86:	77 7b                	ja     c0014c03 <Vm::faultHandler(regs*)+0x184>
c0014b88:	80 fa e4             	cmp    dl,0xe4
c0014b8b:	0f 84 93 04 00 00    	je     c0015024 <Vm::faultHandler(regs*)+0x5a5>
c0014b91:	77 53                	ja     c0014be6 <Vm::faultHandler(regs*)+0x167>
c0014b93:	80 fa cd             	cmp    dl,0xcd
c0014b96:	0f 84 d9 01 00 00    	je     c0014d75 <Vm::faultHandler(regs*)+0x2f6>
c0014b9c:	80 fa cf             	cmp    dl,0xcf
c0014b9f:	0f 85 51 05 00 00    	jne    c00150f6 <Vm::faultHandler(regs*)+0x677>
c0014ba5:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014ba8:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014bab:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0014baf:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0014bb2:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0014bb6:	81 ca 00 02 02 00    	or     edx,0x20200
c0014bbc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014bbf:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014bc3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014bc9:	66 c1 e8 09          	shr    ax,0x9
c0014bcd:	83 e0 01             	and    eax,0x1
c0014bd0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014bd3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014bd6:	83 c0 06             	add    eax,0x6
c0014bd9:	25 ff ff 00 00       	and    eax,0xffff
c0014bde:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014be1:	e9 0c 05 00 00       	jmp    c00150f2 <Vm::faultHandler(regs*)+0x673>
c0014be6:	80 fa e6             	cmp    dl,0xe6
c0014be9:	0f 84 7f 04 00 00    	je     c001506e <Vm::faultHandler(regs*)+0x5ef>
c0014bef:	0f 82 4b 04 00 00    	jb     c0015040 <Vm::faultHandler(regs*)+0x5c1>
c0014bf5:	80 fa e7             	cmp    dl,0xe7
c0014bf8:	0f 84 87 04 00 00    	je     c0015085 <Vm::faultHandler(regs*)+0x606>
c0014bfe:	e9 f3 04 00 00       	jmp    c00150f6 <Vm::faultHandler(regs*)+0x677>
c0014c03:	80 fa ef             	cmp    dl,0xef
c0014c06:	0f 84 d1 04 00 00    	je     c00150dd <Vm::faultHandler(regs*)+0x65e>
c0014c0c:	77 28                	ja     c0014c36 <Vm::faultHandler(regs*)+0x1b7>
c0014c0e:	80 fa ed             	cmp    dl,0xed
c0014c11:	0f 84 9f 04 00 00    	je     c00150b6 <Vm::faultHandler(regs*)+0x637>
c0014c17:	80 fa ee             	cmp    dl,0xee
c0014c1a:	0f 85 d6 04 00 00    	jne    c00150f6 <Vm::faultHandler(regs*)+0x677>
c0014c20:	50                   	push   eax
c0014c21:	50                   	push   eax
c0014c22:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014c26:	50                   	push   eax
c0014c27:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014c2b:	50                   	push   eax
c0014c2c:	e8 a3 f9 ff ff       	call   c00145d4 <Vm::outbv(unsigned short, unsigned char)>
c0014c31:	e9 9f 04 00 00       	jmp    c00150d5 <Vm::faultHandler(regs*)+0x656>
c0014c36:	80 fa fa             	cmp    dl,0xfa
c0014c39:	0f 84 69 01 00 00    	je     c0014da8 <Vm::faultHandler(regs*)+0x329>
c0014c3f:	80 fa fb             	cmp    dl,0xfb
c0014c42:	0f 84 6e 01 00 00    	je     c0014db6 <Vm::faultHandler(regs*)+0x337>
c0014c48:	80 fa f3             	cmp    dl,0xf3
c0014c4b:	0f 85 a5 04 00 00    	jne    c00150f6 <Vm::faultHandler(regs*)+0x677>
c0014c51:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c54:	e9 c0 fe ff ff       	jmp    c0014b19 <Vm::faultHandler(regs*)+0x9a>
c0014c59:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c5c:	be 02 00 00 00       	mov    esi,0x2
c0014c61:	e9 b3 fe ff ff       	jmp    c0014b19 <Vm::faultHandler(regs*)+0x9a>
c0014c66:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c69:	be 03 00 00 00       	mov    esi,0x3
c0014c6e:	e9 a6 fe ff ff       	jmp    c0014b19 <Vm::faultHandler(regs*)+0x9a>
c0014c73:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c76:	be 04 00 00 00       	mov    esi,0x4
c0014c7b:	e9 99 fe ff ff       	jmp    c0014b19 <Vm::faultHandler(regs*)+0x9a>
c0014c80:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c83:	be 05 00 00 00       	mov    esi,0x5
c0014c88:	e9 8c fe ff ff       	jmp    c0014b19 <Vm::faultHandler(regs*)+0x9a>
c0014c8d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c90:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014c95:	e9 7f fe ff ff       	jmp    c0014b19 <Vm::faultHandler(regs*)+0x9a>
c0014c9a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c9d:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014ca2:	e9 72 fe ff ff       	jmp    c0014b19 <Vm::faultHandler(regs*)+0x9a>
c0014ca7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014caa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014cae:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014cb3:	74 30                	je     c0014ce5 <Vm::faultHandler(regs*)+0x266>
c0014cb5:	83 e9 04             	sub    ecx,0x4
c0014cb8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014cbe:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014cc4:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014cc7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014cca:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014cd0:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014cd4:	0f 84 15 04 00 00    	je     c00150ef <Vm::faultHandler(regs*)+0x670>
c0014cda:	80 ce 02             	or     dh,0x2
c0014cdd:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014ce0:	e9 0a 04 00 00       	jmp    c00150ef <Vm::faultHandler(regs*)+0x670>
c0014ce5:	83 e9 02             	sub    ecx,0x2
c0014ce8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014cee:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014cf1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014cf5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014cfb:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014cff:	74 05                	je     c0014d06 <Vm::faultHandler(regs*)+0x287>
c0014d01:	80 ce 02             	or     dh,0x2
c0014d04:	eb 03                	jmp    c0014d09 <Vm::faultHandler(regs*)+0x28a>
c0014d06:	80 e6 fd             	and    dh,0xfd
c0014d09:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014d0d:	e9 dd 03 00 00       	jmp    c00150ef <Vm::faultHandler(regs*)+0x670>
c0014d12:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d17:	74 2a                	je     c0014d43 <Vm::faultHandler(regs*)+0x2c4>
c0014d19:	8b 10                	mov    edx,DWORD PTR [eax]
c0014d1b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014d21:	81 ca 00 02 02 00    	or     edx,0x20200
c0014d27:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014d2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d2c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014d32:	c1 e8 09             	shr    eax,0x9
c0014d35:	83 e0 01             	and    eax,0x1
c0014d38:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014d3b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014d3e:	83 c0 04             	add    eax,0x4
c0014d41:	eb 25                	jmp    c0014d68 <Vm::faultHandler(regs*)+0x2e9>
c0014d43:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014d46:	81 ca 00 02 02 00    	or     edx,0x20200
c0014d4c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014d4f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014d52:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014d58:	66 c1 e8 09          	shr    ax,0x9
c0014d5c:	83 e0 01             	and    eax,0x1
c0014d5f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014d62:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014d65:	83 c0 02             	add    eax,0x2
c0014d68:	25 ff ff 00 00       	and    eax,0xffff
c0014d6d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014d70:	e9 7a 03 00 00       	jmp    c00150ef <Vm::faultHandler(regs*)+0x670>
c0014d75:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d79:	3c ee                	cmp    al,0xee
c0014d7b:	75 10                	jne    c0014d8d <Vm::faultHandler(regs*)+0x30e>
c0014d7d:	83 ec 0c             	sub    esp,0xc
c0014d80:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d83:	e8 e9 f8 ff ff       	call   c0014671 <Vm::mainloop3(unsigned long)>
c0014d88:	e9 4b 03 00 00       	jmp    c00150d8 <Vm::faultHandler(regs*)+0x659>
c0014d8d:	83 ec 0c             	sub    esp,0xc
c0014d90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014d94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d98:	51                   	push   ecx
c0014d99:	50                   	push   eax
c0014d9a:	53                   	push   ebx
c0014d9b:	e8 e1 fb ff ff       	call   c0014981 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014da0:	83 c4 20             	add    esp,0x20
c0014da3:	e9 4a 03 00 00       	jmp    c00150f2 <Vm::faultHandler(regs*)+0x673>
c0014da8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dad:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014db1:	e9 39 03 00 00       	jmp    c00150ef <Vm::faultHandler(regs*)+0x670>
c0014db6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dbb:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014dbf:	e9 2b 03 00 00       	jmp    c00150ef <Vm::faultHandler(regs*)+0x670>
c0014dc4:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014dc7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014dcc:	74 2b                	je     c0014df9 <Vm::faultHandler(regs*)+0x37a>
c0014dce:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014dd5:	76 22                	jbe    c0014df9 <Vm::faultHandler(regs*)+0x37a>
c0014dd7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014ddb:	50                   	push   eax
c0014ddc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014de0:	50                   	push   eax
c0014de1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014de5:	50                   	push   eax
c0014de6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014dea:	50                   	push   eax
c0014deb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014def:	50                   	push   eax
c0014df0:	6a 6c                	push   0x6c
c0014df2:	6a 6c                	push   0x6c
c0014df4:	e9 b9 01 00 00       	jmp    c0014fb2 <Vm::faultHandler(regs*)+0x533>
c0014df9:	83 ec 0c             	sub    esp,0xc
c0014dfc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014e00:	0f b7 f6             	movzx  esi,si
c0014e03:	50                   	push   eax
c0014e04:	e8 b8 f7 ff ff       	call   c00145c1 <Vm::inbv(unsigned short)>
c0014e09:	83 c4 0c             	add    esp,0xc
c0014e0c:	0f b6 c0             	movzx  eax,al
c0014e0f:	50                   	push   eax
c0014e10:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014e14:	50                   	push   eax
c0014e15:	56                   	push   esi
c0014e16:	e8 24 fc ff ff       	call   c0014a3f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014e1b:	83 c4 10             	add    esp,0x10
c0014e1e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014e21:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014e25:	74 03                	je     c0014e2a <Vm::faultHandler(regs*)+0x3ab>
c0014e27:	48                   	dec    eax
c0014e28:	eb 01                	jmp    c0014e2b <Vm::faultHandler(regs*)+0x3ac>
c0014e2a:	40                   	inc    eax
c0014e2b:	0f b7 c0             	movzx  eax,ax
c0014e2e:	e9 8d 00 00 00       	jmp    c0014ec0 <Vm::faultHandler(regs*)+0x441>
c0014e33:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014e36:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014e39:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014e3e:	74 29                	je     c0014e69 <Vm::faultHandler(regs*)+0x3ea>
c0014e40:	3d ff ff 00 00       	cmp    eax,0xffff
c0014e45:	76 22                	jbe    c0014e69 <Vm::faultHandler(regs*)+0x3ea>
c0014e47:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e4b:	50                   	push   eax
c0014e4c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e50:	50                   	push   eax
c0014e51:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e55:	50                   	push   eax
c0014e56:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e5a:	50                   	push   eax
c0014e5b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e5f:	50                   	push   eax
c0014e60:	6a 6d                	push   0x6d
c0014e62:	6a 6d                	push   0x6d
c0014e64:	e9 49 01 00 00       	jmp    c0014fb2 <Vm::faultHandler(regs*)+0x533>
c0014e69:	0f b7 c8             	movzx  ecx,ax
c0014e6c:	0f b7 f6             	movzx  esi,si
c0014e6f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e72:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e77:	74 20                	je     c0014e99 <Vm::faultHandler(regs*)+0x41a>
c0014e79:	ed                   	in     eax,dx
c0014e7a:	55                   	push   ebp
c0014e7b:	50                   	push   eax
c0014e7c:	51                   	push   ecx
c0014e7d:	56                   	push   esi
c0014e7e:	e8 e7 fb ff ff       	call   c0014a6a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014e83:	83 c4 10             	add    esp,0x10
c0014e86:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014e89:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014e8d:	74 05                	je     c0014e94 <Vm::faultHandler(regs*)+0x415>
c0014e8f:	83 e8 04             	sub    eax,0x4
c0014e92:	eb 27                	jmp    c0014ebb <Vm::faultHandler(regs*)+0x43c>
c0014e94:	83 c0 04             	add    eax,0x4
c0014e97:	eb 22                	jmp    c0014ebb <Vm::faultHandler(regs*)+0x43c>
c0014e99:	66 ed                	in     ax,dx
c0014e9b:	0f b7 c0             	movzx  eax,ax
c0014e9e:	57                   	push   edi
c0014e9f:	50                   	push   eax
c0014ea0:	51                   	push   ecx
c0014ea1:	56                   	push   esi
c0014ea2:	e8 ad fb ff ff       	call   c0014a54 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014ea7:	83 c4 10             	add    esp,0x10
c0014eaa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014ead:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014eb1:	74 05                	je     c0014eb8 <Vm::faultHandler(regs*)+0x439>
c0014eb3:	83 e8 02             	sub    eax,0x2
c0014eb6:	eb 03                	jmp    c0014ebb <Vm::faultHandler(regs*)+0x43c>
c0014eb8:	83 c0 02             	add    eax,0x2
c0014ebb:	25 ff ff 00 00       	and    eax,0xffff
c0014ec0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014ec3:	e9 27 02 00 00       	jmp    c00150ef <Vm::faultHandler(regs*)+0x670>
c0014ec8:	8d 46 ff             	lea    eax,[esi-0x1]
c0014ecb:	3c 05                	cmp    al,0x5
c0014ecd:	77 24                	ja     c0014ef3 <Vm::faultHandler(regs*)+0x474>
c0014ecf:	0f b6 c0             	movzx  eax,al
c0014ed2:	ff 24 85 c0 ec 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1340]
c0014ed9:	0f b7 fd             	movzx  edi,bp
c0014edc:	eb 15                	jmp    c0014ef3 <Vm::faultHandler(regs*)+0x474>
c0014ede:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014ee2:	eb 0f                	jmp    c0014ef3 <Vm::faultHandler(regs*)+0x474>
c0014ee4:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014ee8:	eb 09                	jmp    c0014ef3 <Vm::faultHandler(regs*)+0x474>
c0014eea:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014eee:	eb 03                	jmp    c0014ef3 <Vm::faultHandler(regs*)+0x474>
c0014ef0:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014ef3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014ef6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014efb:	74 29                	je     c0014f26 <Vm::faultHandler(regs*)+0x4a7>
c0014efd:	3d ff ff 00 00       	cmp    eax,0xffff
c0014f02:	76 22                	jbe    c0014f26 <Vm::faultHandler(regs*)+0x4a7>
c0014f04:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014f08:	50                   	push   eax
c0014f09:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014f0d:	50                   	push   eax
c0014f0e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014f12:	50                   	push   eax
c0014f13:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014f17:	50                   	push   eax
c0014f18:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014f1c:	50                   	push   eax
c0014f1d:	6a 6e                	push   0x6e
c0014f1f:	6a 6e                	push   0x6e
c0014f21:	e9 8c 00 00 00       	jmp    c0014fb2 <Vm::faultHandler(regs*)+0x533>
c0014f26:	0f b7 c0             	movzx  eax,ax
c0014f29:	52                   	push   edx
c0014f2a:	52                   	push   edx
c0014f2b:	50                   	push   eax
c0014f2c:	57                   	push   edi
c0014f2d:	e8 d9 fa ff ff       	call   c0014a0b <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014f32:	59                   	pop    ecx
c0014f33:	0f b6 c0             	movzx  eax,al
c0014f36:	5e                   	pop    esi
c0014f37:	50                   	push   eax
c0014f38:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014f3c:	50                   	push   eax
c0014f3d:	e8 92 f6 ff ff       	call   c00145d4 <Vm::outbv(unsigned short, unsigned char)>
c0014f42:	83 c4 10             	add    esp,0x10
c0014f45:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014f48:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014f4c:	74 03                	je     c0014f51 <Vm::faultHandler(regs*)+0x4d2>
c0014f4e:	48                   	dec    eax
c0014f4f:	eb 01                	jmp    c0014f52 <Vm::faultHandler(regs*)+0x4d3>
c0014f51:	40                   	inc    eax
c0014f52:	0f b7 c0             	movzx  eax,ax
c0014f55:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014f58:	e9 92 01 00 00       	jmp    c00150ef <Vm::faultHandler(regs*)+0x670>
c0014f5d:	8d 46 ff             	lea    eax,[esi-0x1]
c0014f60:	3c 05                	cmp    al,0x5
c0014f62:	77 1f                	ja     c0014f83 <Vm::faultHandler(regs*)+0x504>
c0014f64:	0f b6 c0             	movzx  eax,al
c0014f67:	ff 24 85 d8 ec 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1328]
c0014f6e:	89 ef                	mov    edi,ebp
c0014f70:	eb 11                	jmp    c0014f83 <Vm::faultHandler(regs*)+0x504>
c0014f72:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014f75:	eb 0c                	jmp    c0014f83 <Vm::faultHandler(regs*)+0x504>
c0014f77:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014f7a:	eb 07                	jmp    c0014f83 <Vm::faultHandler(regs*)+0x504>
c0014f7c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014f7f:	eb 02                	jmp    c0014f83 <Vm::faultHandler(regs*)+0x504>
c0014f81:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014f83:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014f86:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014f8b:	74 37                	je     c0014fc4 <Vm::faultHandler(regs*)+0x545>
c0014f8d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014f93:	76 2f                	jbe    c0014fc4 <Vm::faultHandler(regs*)+0x545>
c0014f95:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014f99:	50                   	push   eax
c0014f9a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014f9e:	50                   	push   eax
c0014f9f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014fa3:	50                   	push   eax
c0014fa4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014fa8:	50                   	push   eax
c0014fa9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014fad:	50                   	push   eax
c0014fae:	6a 6f                	push   0x6f
c0014fb0:	6a 6f                	push   0x6f
c0014fb2:	68 66 ec 01 c0       	push   0xc001ec66
c0014fb7:	e8 24 5c ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0014fbc:	83 c4 20             	add    esp,0x20
c0014fbf:	e9 86 01 00 00       	jmp    c001514a <Vm::faultHandler(regs*)+0x6cb>
c0014fc4:	0f b7 d7             	movzx  edx,di
c0014fc7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014fca:	0f b7 c6             	movzx  eax,si
c0014fcd:	81 e1 00 04 00 00    	and    ecx,0x400
c0014fd3:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014fd6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014fdb:	74 1d                	je     c0014ffa <Vm::faultHandler(regs*)+0x57b>
c0014fdd:	55                   	push   ebp
c0014fde:	55                   	push   ebp
c0014fdf:	50                   	push   eax
c0014fe0:	52                   	push   edx
c0014fe1:	e8 48 fa ff ff       	call   c0014a2e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014fe6:	83 c4 10             	add    esp,0x10
c0014fe9:	89 fa                	mov    edx,edi
c0014feb:	ef                   	out    dx,eax
c0014fec:	85 c9                	test   ecx,ecx
c0014fee:	74 05                	je     c0014ff5 <Vm::faultHandler(regs*)+0x576>
c0014ff0:	83 ee 04             	sub    esi,0x4
c0014ff3:	eb 21                	jmp    c0015016 <Vm::faultHandler(regs*)+0x597>
c0014ff5:	83 c6 04             	add    esi,0x4
c0014ff8:	eb 1c                	jmp    c0015016 <Vm::faultHandler(regs*)+0x597>
c0014ffa:	55                   	push   ebp
c0014ffb:	55                   	push   ebp
c0014ffc:	50                   	push   eax
c0014ffd:	52                   	push   edx
c0014ffe:	e8 19 fa ff ff       	call   c0014a1c <Vm::readWordFromReal(unsigned short, unsigned short)>
c0015003:	83 c4 10             	add    esp,0x10
c0015006:	89 fa                	mov    edx,edi
c0015008:	66 ef                	out    dx,ax
c001500a:	85 c9                	test   ecx,ecx
c001500c:	74 05                	je     c0015013 <Vm::faultHandler(regs*)+0x594>
c001500e:	83 ee 02             	sub    esi,0x2
c0015011:	eb 03                	jmp    c0015016 <Vm::faultHandler(regs*)+0x597>
c0015013:	83 c6 02             	add    esi,0x2
c0015016:	81 e6 ff ff 00 00    	and    esi,0xffff
c001501c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001501f:	e9 cb 00 00 00       	jmp    c00150ef <Vm::faultHandler(regs*)+0x670>
c0015024:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001502b:	83 ec 0c             	sub    esp,0xc
c001502e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015032:	50                   	push   eax
c0015033:	e8 89 f5 ff ff       	call   c00145c1 <Vm::inbv(unsigned short)>
c0015038:	0f b6 c0             	movzx  eax,al
c001503b:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001503e:	eb 3f                	jmp    c001507f <Vm::faultHandler(regs*)+0x600>
c0015040:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015045:	74 07                	je     c001504e <Vm::faultHandler(regs*)+0x5cf>
c0015047:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001504b:	ed                   	in     eax,dx
c001504c:	eb 14                	jmp    c0015062 <Vm::faultHandler(regs*)+0x5e3>
c001504e:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0015051:	66 31 f6             	xor    si,si
c0015054:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0015057:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001505b:	66 ed                	in     ax,dx
c001505d:	0f b7 c0             	movzx  eax,ax
c0015060:	09 f0                	or     eax,esi
c0015062:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0015065:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0015069:	e9 84 00 00 00       	jmp    c00150f2 <Vm::faultHandler(regs*)+0x673>
c001506e:	52                   	push   edx
c001506f:	52                   	push   edx
c0015070:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0015074:	50                   	push   eax
c0015075:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015079:	50                   	push   eax
c001507a:	e8 55 f5 ff ff       	call   c00145d4 <Vm::outbv(unsigned short, unsigned char)>
c001507f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0015083:	eb 53                	jmp    c00150d8 <Vm::faultHandler(regs*)+0x659>
c0015085:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0015088:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001508c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015091:	74 03                	je     c0015096 <Vm::faultHandler(regs*)+0x617>
c0015093:	ef                   	out    dx,eax
c0015094:	eb cf                	jmp    c0015065 <Vm::faultHandler(regs*)+0x5e6>
c0015096:	66 ef                	out    dx,ax
c0015098:	eb cb                	jmp    c0015065 <Vm::faultHandler(regs*)+0x5e6>
c001509a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00150a1:	83 ec 0c             	sub    esp,0xc
c00150a4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00150a8:	50                   	push   eax
c00150a9:	e8 13 f5 ff ff       	call   c00145c1 <Vm::inbv(unsigned short)>
c00150ae:	0f b6 c0             	movzx  eax,al
c00150b1:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00150b4:	eb 1f                	jmp    c00150d5 <Vm::faultHandler(regs*)+0x656>
c00150b6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00150b9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00150be:	74 03                	je     c00150c3 <Vm::faultHandler(regs*)+0x644>
c00150c0:	ed                   	in     eax,dx
c00150c1:	eb 0d                	jmp    c00150d0 <Vm::faultHandler(regs*)+0x651>
c00150c3:	66 ed                	in     ax,dx
c00150c5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00150c8:	0f b7 c0             	movzx  eax,ax
c00150cb:	66 31 d2             	xor    dx,dx
c00150ce:	09 d0                	or     eax,edx
c00150d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00150d3:	eb 1a                	jmp    c00150ef <Vm::faultHandler(regs*)+0x670>
c00150d5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00150d8:	83 c4 10             	add    esp,0x10
c00150db:	eb 15                	jmp    c00150f2 <Vm::faultHandler(regs*)+0x673>
c00150dd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00150e0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00150e3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00150e8:	74 03                	je     c00150ed <Vm::faultHandler(regs*)+0x66e>
c00150ea:	ef                   	out    dx,eax
c00150eb:	eb 02                	jmp    c00150ef <Vm::faultHandler(regs*)+0x670>
c00150ed:	66 ef                	out    dx,ax
c00150ef:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00150f2:	b0 01                	mov    al,0x1
c00150f4:	eb 56                	jmp    c001514c <Vm::faultHandler(regs*)+0x6cd>
c00150f6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00150fa:	50                   	push   eax
c00150fb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00150ff:	50                   	push   eax
c0015100:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015104:	50                   	push   eax
c0015105:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015109:	50                   	push   eax
c001510a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001510e:	50                   	push   eax
c001510f:	52                   	push   edx
c0015110:	52                   	push   edx
c0015111:	68 93 ec 01 c0       	push   0xc001ec93
c0015116:	e8 c5 5a ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c001511b:	83 c4 20             	add    esp,0x20
c001511e:	83 ec 0c             	sub    esp,0xc
c0015121:	6a 60                	push   0x60
c0015123:	e8 99 f4 ff ff       	call   c00145c1 <Vm::inbv(unsigned short)>
c0015128:	83 c4 10             	add    esp,0x10
c001512b:	3c 1c                	cmp    al,0x1c
c001512d:	74 04                	je     c0015133 <Vm::faultHandler(regs*)+0x6b4>
c001512f:	3c 5a                	cmp    al,0x5a
c0015131:	75 eb                	jne    c001511e <Vm::faultHandler(regs*)+0x69f>
c0015133:	3c 5a                	cmp    al,0x5a
c0015135:	74 04                	je     c001513b <Vm::faultHandler(regs*)+0x6bc>
c0015137:	3c 1c                	cmp    al,0x1c
c0015139:	75 0f                	jne    c001514a <Vm::faultHandler(regs*)+0x6cb>
c001513b:	83 ec 0c             	sub    esp,0xc
c001513e:	6a 60                	push   0x60
c0015140:	e8 7c f4 ff ff       	call   c00145c1 <Vm::inbv(unsigned short)>
c0015145:	83 c4 10             	add    esp,0x10
c0015148:	eb e9                	jmp    c0015133 <Vm::faultHandler(regs*)+0x6b4>
c001514a:	31 c0                	xor    eax,eax
c001514c:	83 c4 1c             	add    esp,0x1c
c001514f:	5b                   	pop    ebx
c0015150:	5e                   	pop    esi
c0015151:	5f                   	pop    edi
c0015152:	5d                   	pop    ebp
c0015153:	c3                   	ret    

c0015154 <noCopro(unsigned long)>:
c0015154:	c3                   	ret    

c0015155 <nmiHandler(regs*, void*)>:
c0015155:	83 ec 0c             	sub    esp,0xc
c0015158:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c001515d:	83 ec 0c             	sub    esp,0xc
c0015160:	50                   	push   eax
c0015161:	e8 10 25 ff ff       	call   c0007676 <Computer::handleNMI()>
c0015166:	83 c4 10             	add    esp,0x10
c0015169:	90                   	nop
c001516a:	83 c4 0c             	add    esp,0xc
c001516d:	c3                   	ret    

c001516e <doubleFault(regs*, void*)>:
c001516e:	55                   	push   ebp
c001516f:	89 e5                	mov    ebp,esp
c0015171:	83 ec 08             	sub    esp,0x8
c0015174:	83 ec 0c             	sub    esp,0xc
c0015177:	68 f0 ec 01 c0       	push   0xc001ecf0
c001517c:	e8 ae b5 ff ff       	call   c001072f <Krnl::panic(char const*)>
c0015181:	83 c4 10             	add    esp,0x10
c0015184:	90                   	nop
c0015185:	c9                   	leave  
c0015186:	c3                   	ret    

c0015187 <displayDebugInfo(regs*)>:
c0015187:	83 ec 1c             	sub    esp,0x1c
c001518a:	0f 20 c0             	mov    eax,cr0
c001518d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015191:	0f 20 d0             	mov    eax,cr2
c0015194:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015198:	0f 20 d8             	mov    eax,cr3
c001519b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001519f:	0f 20 e0             	mov    eax,cr4
c00151a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00151a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151a9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00151ac:	83 ec 08             	sub    esp,0x8
c00151af:	50                   	push   eax
c00151b0:	68 0c ed 01 c0       	push   0xc001ed0c
c00151b5:	e8 26 5a ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c00151ba:	83 c4 10             	add    esp,0x10
c00151bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151c1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00151c4:	83 ec 08             	sub    esp,0x8
c00151c7:	50                   	push   eax
c00151c8:	68 fd ec 01 c0       	push   0xc001ecfd
c00151cd:	e8 0e 5a ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c00151d2:	83 c4 10             	add    esp,0x10
c00151d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151d9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00151dc:	83 ec 08             	sub    esp,0x8
c00151df:	50                   	push   eax
c00151e0:	68 08 ed 01 c0       	push   0xc001ed08
c00151e5:	e8 f6 59 ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c00151ea:	83 c4 10             	add    esp,0x10
c00151ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151f1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151f4:	83 ec 08             	sub    esp,0x8
c00151f7:	50                   	push   eax
c00151f8:	68 17 ed 01 c0       	push   0xc001ed17
c00151fd:	e8 de 59 ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0015202:	83 c4 10             	add    esp,0x10
c0015205:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015209:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001520c:	83 ec 08             	sub    esp,0x8
c001520f:	50                   	push   eax
c0015210:	68 22 ed 01 c0       	push   0xc001ed22
c0015215:	e8 c6 59 ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c001521a:	83 c4 10             	add    esp,0x10
c001521d:	83 ec 08             	sub    esp,0x8
c0015220:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015224:	68 2d ed 01 c0       	push   0xc001ed2d
c0015229:	e8 b2 59 ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c001522e:	83 c4 10             	add    esp,0x10
c0015231:	83 ec 08             	sub    esp,0x8
c0015234:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015238:	68 38 ed 01 c0       	push   0xc001ed38
c001523d:	e8 9e 59 ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0015242:	83 c4 10             	add    esp,0x10
c0015245:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c001524a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015250:	83 ec 0c             	sub    esp,0xc
c0015253:	50                   	push   eax
c0015254:	e8 28 39 ff ff       	call   c0008b81 <setActiveTerminal(VgaText*)>
c0015259:	83 c4 10             	add    esp,0x10
c001525c:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015261:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015267:	83 ec 08             	sub    esp,0x8
c001526a:	68 43 ed 01 c0       	push   0xc001ed43
c001526f:	50                   	push   eax
c0015270:	e8 4b 3c ff ff       	call   c0008ec0 <VgaText::puts(char const*)>
c0015275:	83 c4 10             	add    esp,0x10
c0015278:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c001527d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015283:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015288:	8b 12                	mov    edx,DWORD PTR [edx]
c001528a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001528d:	83 c2 0c             	add    edx,0xc
c0015290:	83 ec 08             	sub    esp,0x8
c0015293:	52                   	push   edx
c0015294:	50                   	push   eax
c0015295:	e8 26 3c ff ff       	call   c0008ec0 <VgaText::puts(char const*)>
c001529a:	83 c4 10             	add    esp,0x10
c001529d:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00152a2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152a8:	83 ec 08             	sub    esp,0x8
c00152ab:	68 4c ed 01 c0       	push   0xc001ed4c
c00152b0:	50                   	push   eax
c00152b1:	e8 0a 3c ff ff       	call   c0008ec0 <VgaText::puts(char const*)>
c00152b6:	83 c4 10             	add    esp,0x10
c00152b9:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00152be:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152c4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00152c8:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00152cb:	83 ec 08             	sub    esp,0x8
c00152ce:	52                   	push   edx
c00152cf:	50                   	push   eax
c00152d0:	e8 a5 3b ff ff       	call   c0008e7a <VgaText::putx(unsigned int)>
c00152d5:	83 c4 10             	add    esp,0x10
c00152d8:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00152dd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152e3:	83 ec 08             	sub    esp,0x8
c00152e6:	68 54 ed 01 c0       	push   0xc001ed54
c00152eb:	50                   	push   eax
c00152ec:	e8 cf 3b ff ff       	call   c0008ec0 <VgaText::puts(char const*)>
c00152f1:	83 c4 10             	add    esp,0x10
c00152f4:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00152f9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015303:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0015306:	83 ec 08             	sub    esp,0x8
c0015309:	52                   	push   edx
c001530a:	50                   	push   eax
c001530b:	e8 6a 3b ff ff       	call   c0008e7a <VgaText::putx(unsigned int)>
c0015310:	83 c4 10             	add    esp,0x10
c0015313:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015318:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001531e:	83 ec 08             	sub    esp,0x8
c0015321:	68 5c ed 01 c0       	push   0xc001ed5c
c0015326:	50                   	push   eax
c0015327:	e8 94 3b ff ff       	call   c0008ec0 <VgaText::puts(char const*)>
c001532c:	83 c4 10             	add    esp,0x10
c001532f:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015334:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001533a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001533e:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0015341:	83 ec 08             	sub    esp,0x8
c0015344:	52                   	push   edx
c0015345:	50                   	push   eax
c0015346:	e8 2f 3b ff ff       	call   c0008e7a <VgaText::putx(unsigned int)>
c001534b:	83 c4 10             	add    esp,0x10
c001534e:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015353:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015359:	83 ec 08             	sub    esp,0x8
c001535c:	68 64 ed 01 c0       	push   0xc001ed64
c0015361:	50                   	push   eax
c0015362:	e8 59 3b ff ff       	call   c0008ec0 <VgaText::puts(char const*)>
c0015367:	83 c4 10             	add    esp,0x10
c001536a:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c001536f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015375:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015379:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001537c:	83 ec 08             	sub    esp,0x8
c001537f:	52                   	push   edx
c0015380:	50                   	push   eax
c0015381:	e8 f4 3a ff ff       	call   c0008e7a <VgaText::putx(unsigned int)>
c0015386:	83 c4 10             	add    esp,0x10
c0015389:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c001538e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015394:	83 ec 08             	sub    esp,0x8
c0015397:	68 6c ed 01 c0       	push   0xc001ed6c
c001539c:	50                   	push   eax
c001539d:	e8 1e 3b ff ff       	call   c0008ec0 <VgaText::puts(char const*)>
c00153a2:	83 c4 10             	add    esp,0x10
c00153a5:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00153aa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153b0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00153b4:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00153b7:	83 ec 08             	sub    esp,0x8
c00153ba:	52                   	push   edx
c00153bb:	50                   	push   eax
c00153bc:	e8 b9 3a ff ff       	call   c0008e7a <VgaText::putx(unsigned int)>
c00153c1:	83 c4 10             	add    esp,0x10
c00153c4:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00153c9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153cf:	83 ec 08             	sub    esp,0x8
c00153d2:	68 74 ed 01 c0       	push   0xc001ed74
c00153d7:	50                   	push   eax
c00153d8:	e8 e3 3a ff ff       	call   c0008ec0 <VgaText::puts(char const*)>
c00153dd:	83 c4 10             	add    esp,0x10
c00153e0:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c00153e5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153eb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00153ef:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00153f2:	83 ec 08             	sub    esp,0x8
c00153f5:	52                   	push   edx
c00153f6:	50                   	push   eax
c00153f7:	e8 7e 3a ff ff       	call   c0008e7a <VgaText::putx(unsigned int)>
c00153fc:	83 c4 10             	add    esp,0x10
c00153ff:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015404:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001540a:	83 ec 08             	sub    esp,0x8
c001540d:	68 7c ed 01 c0       	push   0xc001ed7c
c0015412:	50                   	push   eax
c0015413:	e8 a8 3a ff ff       	call   c0008ec0 <VgaText::puts(char const*)>
c0015418:	83 c4 10             	add    esp,0x10
c001541b:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015420:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015426:	83 ec 08             	sub    esp,0x8
c0015429:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001542d:	50                   	push   eax
c001542e:	e8 47 3a ff ff       	call   c0008e7a <VgaText::putx(unsigned int)>
c0015433:	83 c4 10             	add    esp,0x10
c0015436:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c001543b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015441:	83 ec 08             	sub    esp,0x8
c0015444:	68 85 ed 01 c0       	push   0xc001ed85
c0015449:	50                   	push   eax
c001544a:	e8 71 3a ff ff       	call   c0008ec0 <VgaText::puts(char const*)>
c001544f:	83 c4 10             	add    esp,0x10
c0015452:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015457:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001545d:	83 ec 08             	sub    esp,0x8
c0015460:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015464:	50                   	push   eax
c0015465:	e8 10 3a ff ff       	call   c0008e7a <VgaText::putx(unsigned int)>
c001546a:	83 c4 10             	add    esp,0x10
c001546d:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0015472:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015478:	83 ec 08             	sub    esp,0x8
c001547b:	68 8d ed 01 c0       	push   0xc001ed8d
c0015480:	50                   	push   eax
c0015481:	e8 3a 3a ff ff       	call   c0008ec0 <VgaText::puts(char const*)>
c0015486:	83 c4 10             	add    esp,0x10
c0015489:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c001548e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015494:	83 ec 08             	sub    esp,0x8
c0015497:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001549b:	50                   	push   eax
c001549c:	e8 d9 39 ff ff       	call   c0008e7a <VgaText::putx(unsigned int)>
c00154a1:	83 c4 10             	add    esp,0x10
c00154a4:	fa                   	cli    
c00154a5:	f4                   	hlt    
c00154a6:	eb fe                	jmp    c00154a6 <displayDebugInfo(regs*)+0x31f>

c00154a8 <displayProgramFault(char const*)>:
c00154a8:	83 ec 0c             	sub    esp,0xc
c00154ab:	83 ec 0c             	sub    esp,0xc
c00154ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154b2:	e8 29 57 ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c00154b7:	83 c4 10             	add    esp,0x10
c00154ba:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00154bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00154c1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154c4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00154ca:	85 c0                	test   eax,eax
c00154cc:	74 21                	je     c00154ef <displayProgramFault(char const*)+0x47>
c00154ce:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00154d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154d8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00154de:	6a 04                	push   0x4
c00154e0:	6a 0f                	push   0xf
c00154e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00154e6:	50                   	push   eax
c00154e7:	e8 46 3a ff ff       	call   c0008f32 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00154ec:	83 c4 10             	add    esp,0x10
c00154ef:	90                   	nop
c00154f0:	83 c4 0c             	add    esp,0xc
c00154f3:	c3                   	ret    

c00154f4 <gpFault(regs*, void*)>:
c00154f4:	83 ec 1c             	sub    esp,0x1c
c00154f7:	c7 05 b0 3e 02 c0 7f 4a 01 c0 	mov    DWORD PTR ds:0xc0023eb0,0xc0014a7f
c0015501:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0015506:	85 c0                	test   eax,eax
c0015508:	74 1c                	je     c0015526 <gpFault(regs*, void*)+0x32>
c001550a:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c001550f:	83 ec 0c             	sub    esp,0xc
c0015512:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015516:	ff d0                	call   eax
c0015518:	83 c4 10             	add    esp,0x10
c001551b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001551f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015524:	75 2e                	jne    c0015554 <gpFault(regs*, void*)+0x60>
c0015526:	83 ec 0c             	sub    esp,0xc
c0015529:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001552d:	e8 55 fc ff ff       	call   c0015187 <displayDebugInfo(regs*)>
c0015532:	83 c4 10             	add    esp,0x10
c0015535:	83 ec 0c             	sub    esp,0xc
c0015538:	68 95 ed 01 c0       	push   0xc001ed95
c001553d:	e8 66 ff ff ff       	call   c00154a8 <displayProgramFault(char const*)>
c0015542:	83 c4 10             	add    esp,0x10
c0015545:	83 ec 0c             	sub    esp,0xc
c0015548:	6a 00                	push   0x0
c001554a:	e8 25 ef ff ff       	call   c0014474 <Thr::terminateFromIRQ(int)>
c001554f:	83 c4 10             	add    esp,0x10
c0015552:	eb 01                	jmp    c0015555 <gpFault(regs*, void*)+0x61>
c0015554:	90                   	nop
c0015555:	83 c4 1c             	add    esp,0x1c
c0015558:	c3                   	ret    

c0015559 <pgFault(regs*, void*)>:
c0015559:	83 ec 1c             	sub    esp,0x1c
c001555c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015560:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015563:	0f 20 d0             	mov    eax,cr2
c0015566:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001556a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001556e:	83 ec 04             	sub    esp,0x4
c0015571:	52                   	push   edx
c0015572:	50                   	push   eax
c0015573:	68 00 ee 01 c0       	push   0xc001ee00
c0015578:	e8 63 56 ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c001557d:	83 c4 10             	add    esp,0x10
c0015580:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015585:	8b 00                	mov    eax,DWORD PTR [eax]
c0015587:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001558a:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0015590:	0f 20 d2             	mov    edx,cr2
c0015593:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015597:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001559b:	83 ec 08             	sub    esp,0x8
c001559e:	52                   	push   edx
c001559f:	50                   	push   eax
c00155a0:	e8 6d 52 ff ff       	call   c000a812 <VAS::tryLoadBackOffDisk(unsigned long)>
c00155a5:	83 c4 10             	add    esp,0x10
c00155a8:	84 c0                	test   al,al
c00155aa:	75 2e                	jne    c00155da <pgFault(regs*, void*)+0x81>
c00155ac:	83 ec 0c             	sub    esp,0xc
c00155af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155b3:	e8 cf fb ff ff       	call   c0015187 <displayDebugInfo(regs*)>
c00155b8:	83 c4 10             	add    esp,0x10
c00155bb:	83 ec 0c             	sub    esp,0xc
c00155be:	68 ae ed 01 c0       	push   0xc001edae
c00155c3:	e8 e0 fe ff ff       	call   c00154a8 <displayProgramFault(char const*)>
c00155c8:	83 c4 10             	add    esp,0x10
c00155cb:	83 ec 0c             	sub    esp,0xc
c00155ce:	6a 00                	push   0x0
c00155d0:	e8 9f ee ff ff       	call   c0014474 <Thr::terminateFromIRQ(int)>
c00155d5:	83 c4 10             	add    esp,0x10
c00155d8:	eb 01                	jmp    c00155db <pgFault(regs*, void*)+0x82>
c00155da:	90                   	nop
c00155db:	83 c4 1c             	add    esp,0x1c
c00155de:	c3                   	ret    

c00155df <otherISRHandler(regs*, void*)>:
c00155df:	83 ec 0c             	sub    esp,0xc
c00155e2:	83 ec 0c             	sub    esp,0xc
c00155e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155e9:	e8 99 fb ff ff       	call   c0015187 <displayDebugInfo(regs*)>
c00155ee:	83 c4 10             	add    esp,0x10
c00155f1:	83 ec 0c             	sub    esp,0xc
c00155f4:	68 28 ee 01 c0       	push   0xc001ee28
c00155f9:	e8 aa fe ff ff       	call   c00154a8 <displayProgramFault(char const*)>
c00155fe:	83 c4 10             	add    esp,0x10
c0015601:	83 ec 0c             	sub    esp,0xc
c0015604:	6a 00                	push   0x0
c0015606:	e8 69 ee ff ff       	call   c0014474 <Thr::terminateFromIRQ(int)>
c001560b:	83 c4 10             	add    esp,0x10
c001560e:	90                   	nop
c001560f:	83 c4 0c             	add    esp,0xc
c0015612:	c3                   	ret    

c0015613 <opcodeFault(regs*, void*)>:
c0015613:	55                   	push   ebp
c0015614:	89 e5                	mov    ebp,esp
c0015616:	83 ec 08             	sub    esp,0x8
c0015619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001561f:	83 ec 08             	sub    esp,0x8
c0015622:	50                   	push   eax
c0015623:	68 b9 ed 01 c0       	push   0xc001edb9
c0015628:	e8 b3 55 ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c001562d:	83 c4 10             	add    esp,0x10
c0015630:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0015635:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001563b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0015641:	84 c0                	test   al,al
c0015643:	74 21                	je     c0015666 <opcodeFault(regs*, void*)+0x53>
c0015645:	83 ec 0c             	sub    esp,0xc
c0015648:	68 50 ee 01 c0       	push   0xc001ee50
c001564d:	e8 8e 55 ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0015652:	83 c4 10             	add    esp,0x10
c0015655:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015658:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001565b:	8d 50 19             	lea    edx,[eax+0x19]
c001565e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015661:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015664:	eb 2b                	jmp    c0015691 <opcodeFault(regs*, void*)+0x7e>
c0015666:	83 ec 0c             	sub    esp,0xc
c0015669:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001566c:	e8 16 fb ff ff       	call   c0015187 <displayDebugInfo(regs*)>
c0015671:	83 c4 10             	add    esp,0x10
c0015674:	83 ec 0c             	sub    esp,0xc
c0015677:	68 c7 ed 01 c0       	push   0xc001edc7
c001567c:	e8 27 fe ff ff       	call   c00154a8 <displayProgramFault(char const*)>
c0015681:	83 c4 10             	add    esp,0x10
c0015684:	83 ec 0c             	sub    esp,0xc
c0015687:	6a 00                	push   0x0
c0015689:	e8 e6 ed ff ff       	call   c0014474 <Thr::terminateFromIRQ(int)>
c001568e:	83 c4 10             	add    esp,0x10
c0015691:	c9                   	leave  
c0015692:	c3                   	ret    

c0015693 <i386SaveCoprocessor(void*)>:
c0015693:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015697:	83 c0 3f             	add    eax,0x3f
c001569a:	83 e0 c0             	and    eax,0xffffffc0
c001569d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00156a1:	ff 25 ac 3e 02 c0    	jmp    DWORD PTR ds:0xc0023eac

c00156a7 <i386LoadCoprocessor(void*)>:
c00156a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156ab:	83 c0 3f             	add    eax,0x3f
c00156ae:	83 e0 c0             	and    eax,0xffffffc0
c00156b1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00156b5:	ff 25 a8 3e 02 c0    	jmp    DWORD PTR ds:0xc0023ea8

c00156bb <x87EmulHandler(regs*, void*)>:
c00156bb:	53                   	push   ebx
c00156bc:	83 ec 08             	sub    esp,0x8
c00156bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156c4:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00156c8:	74 10                	je     c00156da <x87EmulHandler(regs*, void*)+0x1f>
c00156ca:	83 ec 0c             	sub    esp,0xc
c00156cd:	68 d4 ed 01 c0       	push   0xc001edd4
c00156d2:	e8 58 b0 ff ff       	call   c001072f <Krnl::panic(char const*)>
c00156d7:	83 c4 10             	add    esp,0x10
c00156da:	0f 20 c0             	mov    eax,cr0
c00156dd:	a8 08                	test   al,0x8
c00156df:	74 59                	je     c001573a <x87EmulHandler(regs*, void*)+0x7f>
c00156e1:	0f 06                	clts   
c00156e3:	a1 a4 3e 02 c0       	mov    eax,ds:0xc0023ea4
c00156e8:	85 c0                	test   eax,eax
c00156ea:	74 0e                	je     c00156fa <x87EmulHandler(regs*, void*)+0x3f>
c00156ec:	83 ec 0c             	sub    esp,0xc
c00156ef:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00156f2:	e8 9c ff ff ff       	call   c0015693 <i386SaveCoprocessor(void*)>
c00156f7:	83 c4 10             	add    esp,0x10
c00156fa:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0015700:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0015704:	75 12                	jne    c0015718 <x87EmulHandler(regs*, void*)+0x5d>
c0015706:	83 ec 0c             	sub    esp,0xc
c0015709:	68 40 02 00 00       	push   0x240
c001570e:	e8 3e 27 ff ff       	call   c0007e51 <malloc>
c0015713:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0015716:	eb 10                	jmp    c0015728 <x87EmulHandler(regs*, void*)+0x6d>
c0015718:	83 ec 0c             	sub    esp,0xc
c001571b:	a1 a4 3e 02 c0       	mov    eax,ds:0xc0023ea4
c0015720:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015723:	e8 7f ff ff ff       	call   c00156a7 <i386LoadCoprocessor(void*)>
c0015728:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001572d:	83 c4 10             	add    esp,0x10
c0015730:	a3 a4 3e 02 c0       	mov    ds:0xc0023ea4,eax
c0015735:	83 c4 08             	add    esp,0x8
c0015738:	5b                   	pop    ebx
c0015739:	c3                   	ret    
c001573a:	83 ec 0c             	sub    esp,0xc
c001573d:	68 e8 ed 01 c0       	push   0xc001ede8
c0015742:	e8 99 54 ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0015747:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001574f:	83 c4 18             	add    esp,0x18
c0015752:	5b                   	pop    ebx
c0015753:	e9 1c ed ff ff       	jmp    c0014474 <Thr::terminateFromIRQ(int)>

c0015758 <HalInitialiseCoprocessor()>:
c0015758:	83 ec 10             	sub    esp,0x10
c001575b:	c7 05 a4 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ea4,0x0
c0015765:	6a 00                	push   0x0
c0015767:	68 bb 56 01 c0       	push   0xc00156bb
c001576c:	6a 07                	push   0x7
c001576e:	e8 e1 6d ff ff       	call   c000c554 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015773:	e8 38 64 00 00       	call   c001bbb0 <avxDetect>
c0015778:	83 c4 10             	add    esp,0x10
c001577b:	85 c0                	test   eax,eax
c001577d:	74 1c                	je     c001579b <HalInitialiseCoprocessor()+0x43>
c001577f:	c7 05 ac 3e 02 c0 da bb 01 c0 	mov    DWORD PTR ds:0xc0023eac,0xc001bbda
c0015789:	c7 05 a8 3e 02 c0 eb bb 01 c0 	mov    DWORD PTR ds:0xc0023ea8,0xc001bbeb
c0015793:	83 c4 0c             	add    esp,0xc
c0015796:	e9 61 64 00 00       	jmp    c001bbfc <avxInit>
c001579b:	e8 90 66 00 00       	call   c001be30 <absolutelyNoChanceInHell>
c00157a0:	85 c0                	test   eax,eax
c00157a2:	74 1c                	je     c00157c0 <HalInitialiseCoprocessor()+0x68>
c00157a4:	c7 05 ac 3e 02 c0 48 be 01 c0 	mov    DWORD PTR ds:0xc0023eac,0xc001be48
c00157ae:	c7 05 a8 3e 02 c0 50 be 01 c0 	mov    DWORD PTR ds:0xc0023ea8,0xc001be50
c00157b8:	83 c4 0c             	add    esp,0xc
c00157bb:	e9 98 66 00 00       	jmp    c001be58 <sseInit>
c00157c0:	e8 b1 66 00 00       	call   c001be76 <x87Detect>
c00157c5:	85 c0                	test   eax,eax
c00157c7:	74 1c                	je     c00157e5 <HalInitialiseCoprocessor()+0x8d>
c00157c9:	c7 05 ac 3e 02 c0 91 be 01 c0 	mov    DWORD PTR ds:0xc0023eac,0xc001be91
c00157d3:	c7 05 a8 3e 02 c0 98 be 01 c0 	mov    DWORD PTR ds:0xc0023ea8,0xc001be98
c00157dd:	83 c4 0c             	add    esp,0xc
c00157e0:	e9 ba 66 00 00       	jmp    c001be9f <x87Init>
c00157e5:	c7 05 ac 3e 02 c0 54 51 01 c0 	mov    DWORD PTR ds:0xc0023eac,0xc0015154
c00157ef:	c7 05 a8 3e 02 c0 54 51 01 c0 	mov    DWORD PTR ds:0xc0023ea8,0xc0015154
c00157f9:	0f 20 c0             	mov    eax,cr0
c00157fc:	83 c8 04             	or     eax,0x4
c00157ff:	0f 22 c0             	mov    cr0,eax
c0015802:	83 c4 0c             	add    esp,0xc
c0015805:	c3                   	ret    

c0015806 <HalPanic(char const*)>:
c0015806:	e9 24 af ff ff       	jmp    c001072f <Krnl::panic(char const*)>

c001580b <HalQueryPerformanceCounter()>:
c001580b:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0015810:	31 d2                	xor    edx,edx
c0015812:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0015818:	31 c0                	xor    eax,eax
c001581a:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0015821:	74 02                	je     c0015825 <HalQueryPerformanceCounter()+0x1a>
c0015823:	0f 31                	rdtsc  
c0015825:	c3                   	ret    

c0015826 <HalInitialise()>:
c0015826:	53                   	push   ebx
c0015827:	83 ec 08             	sub    esp,0x8
c001582a:	e8 58 6f ff ff       	call   c000c787 <setupINTS()>
c001582f:	80 3d 00 32 02 c0 00 	cmp    BYTE PTR ds:0xc0023200,0x0
c0015836:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c001583b:	75 07                	jne    c0015844 <HalInitialise()+0x1e>
c001583d:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0015844:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001584a:	83 e0 01             	and    eax,0x1
c001584d:	a2 a0 3e 02 c0       	mov    ds:0xc0023ea0,al
c0015852:	e8 a9 02 00 00       	call   c0015b00 <picOpen()>
c0015857:	80 3d a0 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ea0,0x0
c001585e:	74 0a                	je     c001586a <HalInitialise()+0x44>
c0015860:	e8 e3 01 00 00       	call   c0015a48 <picDisable()>
c0015865:	e8 ba 5c 00 00       	call   c001b524 <apicOpen()>
c001586a:	bb 0f 00 00 00       	mov    ebx,0xf
c001586f:	50                   	push   eax
c0015870:	6a 00                	push   0x0
c0015872:	68 df 55 01 c0       	push   0xc00155df
c0015877:	6a 00                	push   0x0
c0015879:	e8 d6 6c ff ff       	call   c000c554 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001587e:	83 c4 0c             	add    esp,0xc
c0015881:	6a 00                	push   0x0
c0015883:	68 df 55 01 c0       	push   0xc00155df
c0015888:	6a 01                	push   0x1
c001588a:	e8 c5 6c ff ff       	call   c000c554 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001588f:	83 c4 0c             	add    esp,0xc
c0015892:	6a 00                	push   0x0
c0015894:	68 55 51 01 c0       	push   0xc0015155
c0015899:	6a 02                	push   0x2
c001589b:	e8 b4 6c ff ff       	call   c000c554 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158a0:	83 c4 0c             	add    esp,0xc
c00158a3:	6a 00                	push   0x0
c00158a5:	68 df 55 01 c0       	push   0xc00155df
c00158aa:	6a 03                	push   0x3
c00158ac:	e8 a3 6c ff ff       	call   c000c554 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158b1:	83 c4 0c             	add    esp,0xc
c00158b4:	6a 00                	push   0x0
c00158b6:	68 df 55 01 c0       	push   0xc00155df
c00158bb:	6a 04                	push   0x4
c00158bd:	e8 92 6c ff ff       	call   c000c554 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158c2:	83 c4 0c             	add    esp,0xc
c00158c5:	6a 00                	push   0x0
c00158c7:	68 df 55 01 c0       	push   0xc00155df
c00158cc:	6a 05                	push   0x5
c00158ce:	e8 81 6c ff ff       	call   c000c554 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158d3:	83 c4 0c             	add    esp,0xc
c00158d6:	6a 00                	push   0x0
c00158d8:	68 13 56 01 c0       	push   0xc0015613
c00158dd:	6a 06                	push   0x6
c00158df:	e8 70 6c ff ff       	call   c000c554 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158e4:	83 c4 0c             	add    esp,0xc
c00158e7:	6a 00                	push   0x0
c00158e9:	68 6e 51 01 c0       	push   0xc001516e
c00158ee:	6a 08                	push   0x8
c00158f0:	e8 5f 6c ff ff       	call   c000c554 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158f5:	83 c4 0c             	add    esp,0xc
c00158f8:	6a 00                	push   0x0
c00158fa:	68 df 55 01 c0       	push   0xc00155df
c00158ff:	6a 09                	push   0x9
c0015901:	e8 4e 6c ff ff       	call   c000c554 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015906:	83 c4 0c             	add    esp,0xc
c0015909:	6a 00                	push   0x0
c001590b:	68 df 55 01 c0       	push   0xc00155df
c0015910:	6a 0a                	push   0xa
c0015912:	e8 3d 6c ff ff       	call   c000c554 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015917:	83 c4 0c             	add    esp,0xc
c001591a:	6a 00                	push   0x0
c001591c:	68 df 55 01 c0       	push   0xc00155df
c0015921:	6a 0b                	push   0xb
c0015923:	e8 2c 6c ff ff       	call   c000c554 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015928:	83 c4 0c             	add    esp,0xc
c001592b:	6a 00                	push   0x0
c001592d:	68 f4 54 01 c0       	push   0xc00154f4
c0015932:	6a 0d                	push   0xd
c0015934:	e8 1b 6c ff ff       	call   c000c554 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015939:	83 c4 0c             	add    esp,0xc
c001593c:	6a 00                	push   0x0
c001593e:	68 59 55 01 c0       	push   0xc0015559
c0015943:	6a 0e                	push   0xe
c0015945:	e8 0a 6c ff ff       	call   c000c554 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001594a:	83 c4 10             	add    esp,0x10
c001594d:	50                   	push   eax
c001594e:	6a 00                	push   0x0
c0015950:	68 df 55 01 c0       	push   0xc00155df
c0015955:	53                   	push   ebx
c0015956:	43                   	inc    ebx
c0015957:	e8 f8 6b ff ff       	call   c000c554 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001595c:	83 c4 10             	add    esp,0x10
c001595f:	83 fb 1e             	cmp    ebx,0x1e
c0015962:	75 e9                	jne    c001594d <HalInitialise()+0x127>
c0015964:	50                   	push   eax
c0015965:	6a 00                	push   0x0
c0015967:	68 d5 20 01 c0       	push   0xc00120d5
c001596c:	6a 60                	push   0x60
c001596e:	e8 e1 6b ff ff       	call   c000c554 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015973:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0015978:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0015982:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0015989:	e8 c3 24 ff ff       	call   c0007e51 <malloc>
c001598e:	89 04 24             	mov    DWORD PTR [esp],eax
c0015991:	89 c3                	mov    ebx,eax
c0015993:	e8 30 09 00 00       	call   c00162c8 <RTC::RTC()>
c0015998:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00159a2:	5a                   	pop    edx
c00159a3:	59                   	pop    ecx
c00159a4:	53                   	push   ebx
c00159a5:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c00159ab:	e8 70 66 ff ff       	call   c000c020 <Device::addChild(Device*)>
c00159b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159b2:	6a 00                	push   0x0
c00159b4:	6a 00                	push   0x0
c00159b6:	6a 00                	push   0x0
c00159b8:	53                   	push   ebx
c00159b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159bc:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c00159c1:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00159c7:	83 c4 28             	add    esp,0x28
c00159ca:	5b                   	pop    ebx
c00159cb:	c3                   	ret    

c00159cc <HalMakeBeep(int)>:
c00159cc:	53                   	push   ebx
c00159cd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00159d1:	85 db                	test   ebx,ebx
c00159d3:	75 07                	jne    c00159dc <HalMakeBeep(int)+0x10>
c00159d5:	e4 61                	in     al,0x61
c00159d7:	83 e0 fc             	and    eax,0xfffffffc
c00159da:	eb 26                	jmp    c0015a02 <HalMakeBeep(int)+0x36>
c00159dc:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00159e1:	99                   	cdq    
c00159e2:	f7 fb                	idiv   ebx
c00159e4:	89 c1                	mov    ecx,eax
c00159e6:	b0 b6                	mov    al,0xb6
c00159e8:	e6 43                	out    0x43,al
c00159ea:	88 c8                	mov    al,cl
c00159ec:	e6 42                	out    0x42,al
c00159ee:	89 c8                	mov    eax,ecx
c00159f0:	c1 e8 08             	shr    eax,0x8
c00159f3:	e6 42                	out    0x42,al
c00159f5:	e4 61                	in     al,0x61
c00159f7:	88 c2                	mov    dl,al
c00159f9:	83 ca 03             	or     edx,0x3
c00159fc:	38 c2                	cmp    dl,al
c00159fe:	74 04                	je     c0015a04 <HalMakeBeep(int)+0x38>
c0015a00:	88 d0                	mov    al,dl
c0015a02:	e6 61                	out    0x61,al
c0015a04:	5b                   	pop    ebx
c0015a05:	c3                   	ret    

c0015a06 <HalGetRand()>:
c0015a06:	31 c0                	xor    eax,eax
c0015a08:	c3                   	ret    

c0015a09 <HalEndOfInterrupt(int)>:
c0015a09:	80 3d a0 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ea0,0x0
c0015a10:	74 23                	je     c0015a35 <HalEndOfInterrupt(int)+0x2c>
c0015a12:	83 ec 14             	sub    esp,0x14
c0015a15:	6a 1b                	push   0x1b
c0015a17:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015a1d:	e8 6c 1a ff ff       	call   c000748e <Computer::rdmsr(unsigned int)>
c0015a22:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015a27:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0015a31:	83 c4 1c             	add    esp,0x1c
c0015a34:	c3                   	ret    
c0015a35:	e9 56 02 00 00       	jmp    c0015c90 <picEOI(int)>

c0015a3a <HalRestart()>:
c0015a3a:	c3                   	ret    

c0015a3b <HalShutdown()>:
c0015a3b:	c3                   	ret    

c0015a3c <HalSleep()>:
c0015a3c:	c3                   	ret    
c0015a3d:	66 90                	xchg   ax,ax
c0015a3f:	90                   	nop

c0015a40 <picIoWait()>:
c0015a40:	eb 00                	jmp    c0015a42 <picIoWait()+0x2>
c0015a42:	eb 00                	jmp    c0015a44 <picIoWait()+0x4>
c0015a44:	90                   	nop
c0015a45:	c3                   	ret    
c0015a46:	66 90                	xchg   ax,ax

c0015a48 <picDisable()>:
c0015a48:	83 ec 10             	sub    esp,0x10
c0015a4b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0015a52:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0015a57:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015a5b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015a60:	ee                   	out    dx,al
c0015a61:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015a68:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015a6d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015a71:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0015a76:	ee                   	out    dx,al
c0015a77:	90                   	nop
c0015a78:	83 c4 10             	add    esp,0x10
c0015a7b:	c3                   	ret    

c0015a7c <picGetIRQReg(int)>:
c0015a7c:	83 ec 10             	sub    esp,0x10
c0015a7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a83:	25 ff 00 00 00       	and    eax,0xff
c0015a88:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015a8f:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015a93:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015a97:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015a9c:	ee                   	out    dx,al
c0015a9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015aa1:	25 ff 00 00 00       	and    eax,0xff
c0015aa6:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015aad:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015ab1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015ab5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015aba:	ee                   	out    dx,al
c0015abb:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015ac2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015ac7:	89 c2                	mov    edx,eax
c0015ac9:	ec                   	in     al,dx
c0015aca:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015ace:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015ad2:	25 ff 00 00 00       	and    eax,0xff
c0015ad7:	c1 e0 08             	shl    eax,0x8
c0015ada:	89 c1                	mov    ecx,eax
c0015adc:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015ae3:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015ae8:	89 c2                	mov    edx,eax
c0015aea:	ec                   	in     al,dx
c0015aeb:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015aef:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015af3:	25 ff 00 00 00       	and    eax,0xff
c0015af8:	09 c8                	or     eax,ecx
c0015afa:	83 c4 10             	add    esp,0x10
c0015afd:	c3                   	ret    
c0015afe:	66 90                	xchg   ax,ax

c0015b00 <picOpen()>:
c0015b00:	83 ec 50             	sub    esp,0x50
c0015b03:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015b0a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015b0f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015b13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b17:	ee                   	out    dx,al
c0015b18:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015b1f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015b24:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015b28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015b2c:	ee                   	out    dx,al
c0015b2d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015b35:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015b3d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015b44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b48:	89 c2                	mov    edx,eax
c0015b4a:	ec                   	in     al,dx
c0015b4b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015b4f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015b53:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015b57:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015b5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b62:	89 c2                	mov    edx,eax
c0015b64:	ec                   	in     al,dx
c0015b65:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015b69:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015b6d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015b71:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015b78:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015b7d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015b81:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b85:	ee                   	out    dx,al
c0015b86:	e8 b5 fe ff ff       	call   c0015a40 <picIoWait()>
c0015b8b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015b92:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015b97:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015b9b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015b9f:	ee                   	out    dx,al
c0015ba0:	e8 9b fe ff ff       	call   c0015a40 <picIoWait()>
c0015ba5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015ba9:	25 ff 00 00 00       	and    eax,0xff
c0015bae:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015bb5:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015bb9:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015bbd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015bc1:	ee                   	out    dx,al
c0015bc2:	e8 79 fe ff ff       	call   c0015a40 <picIoWait()>
c0015bc7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015bcb:	25 ff 00 00 00       	and    eax,0xff
c0015bd0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015bd7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015bdb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015bdf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015be3:	ee                   	out    dx,al
c0015be4:	e8 57 fe ff ff       	call   c0015a40 <picIoWait()>
c0015be9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015bf0:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015bf5:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015bf9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015bfd:	ee                   	out    dx,al
c0015bfe:	e8 3d fe ff ff       	call   c0015a40 <picIoWait()>
c0015c03:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015c0a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015c0f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015c13:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015c17:	ee                   	out    dx,al
c0015c18:	e8 23 fe ff ff       	call   c0015a40 <picIoWait()>
c0015c1d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015c24:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015c29:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015c2d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015c31:	ee                   	out    dx,al
c0015c32:	e8 09 fe ff ff       	call   c0015a40 <picIoWait()>
c0015c37:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015c3e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015c43:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015c47:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015c4b:	ee                   	out    dx,al
c0015c4c:	e8 ef fd ff ff       	call   c0015a40 <picIoWait()>
c0015c51:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015c55:	25 ff 00 00 00       	and    eax,0xff
c0015c5a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015c61:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015c65:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015c69:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015c6d:	ee                   	out    dx,al
c0015c6e:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015c72:	25 ff 00 00 00       	and    eax,0xff
c0015c77:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015c7e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015c82:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015c86:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015c8a:	ee                   	out    dx,al
c0015c8b:	90                   	nop
c0015c8c:	83 c4 50             	add    esp,0x50
c0015c8f:	c3                   	ret    

c0015c90 <picEOI(int)>:
c0015c90:	83 ec 10             	sub    esp,0x10
c0015c93:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015c98:	75 22                	jne    c0015cbc <picEOI(int)+0x2c>
c0015c9a:	6a 0b                	push   0xb
c0015c9c:	e8 db fd ff ff       	call   c0015a7c <picGetIRQReg(int)>
c0015ca1:	83 c4 04             	add    esp,0x4
c0015ca4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015ca9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015cae:	25 ff ff 00 00       	and    eax,0xffff
c0015cb3:	25 80 00 00 00       	and    eax,0x80
c0015cb8:	74 72                	je     c0015d2c <picEOI(int)+0x9c>
c0015cba:	66 90                	xchg   ax,ax
c0015cbc:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015cc1:	75 31                	jne    c0015cf4 <picEOI(int)+0x64>
c0015cc3:	6a 0b                	push   0xb
c0015cc5:	e8 b2 fd ff ff       	call   c0015a7c <picGetIRQReg(int)>
c0015cca:	83 c4 04             	add    esp,0x4
c0015ccd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015cd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015cd6:	66 85 c0             	test   ax,ax
c0015cd9:	78 19                	js     c0015cf4 <picEOI(int)+0x64>
c0015cdb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015ce2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015ce7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015ceb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015cf0:	ee                   	out    dx,al
c0015cf1:	eb 3d                	jmp    c0015d30 <picEOI(int)+0xa0>
c0015cf3:	90                   	nop
c0015cf4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015cf9:	7e 19                	jle    c0015d14 <picEOI(int)+0x84>
c0015cfb:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015d02:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015d07:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015d0b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015d10:	ee                   	out    dx,al
c0015d11:	8d 76 00             	lea    esi,[esi+0x0]
c0015d14:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015d1b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015d20:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015d24:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015d29:	ee                   	out    dx,al
c0015d2a:	eb 04                	jmp    c0015d30 <picEOI(int)+0xa0>
c0015d2c:	90                   	nop
c0015d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0015d30:	83 c4 10             	add    esp,0x10
c0015d33:	c3                   	ret    

c0015d34 <RTC::open(int, int, void*)>:
c0015d34:	31 c0                	xor    eax,eax
c0015d36:	c3                   	ret    
c0015d37:	90                   	nop

c0015d38 <RTC::close(int, int, void*)>:
c0015d38:	31 c0                	xor    eax,eax
c0015d3a:	c3                   	ret    
c0015d3b:	90                   	nop

c0015d3c <RTC::timeInSecondsUTC()>:
c0015d3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d40:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015d46:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d4c:	c3                   	ret    
c0015d4d:	90                   	nop

c0015d4e <RTC::timeInDatetimeUTC()>:
c0015d4e:	53                   	push   ebx
c0015d4f:	83 ec 14             	sub    esp,0x14
c0015d52:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015d56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d5a:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d5c:	50                   	push   eax
c0015d5d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015d60:	83 c4 0c             	add    esp,0xc
c0015d63:	52                   	push   edx
c0015d64:	50                   	push   eax
c0015d65:	53                   	push   ebx
c0015d66:	e8 29 60 ff ff       	call   c000bd94 <secondsToDatetime(unsigned long long)>
c0015d6b:	89 d8                	mov    eax,ebx
c0015d6d:	83 c4 14             	add    esp,0x14
c0015d70:	5b                   	pop    ebx
c0015d71:	c2 04 00             	ret    0x4

c0015d74 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015d74:	56                   	push   esi
c0015d75:	53                   	push   ebx
c0015d76:	83 ec 14             	sub    esp,0x14
c0015d79:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015d7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d7f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015d82:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015d86:	52                   	push   edx
c0015d87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d8f:	50                   	push   eax
c0015d90:	e8 ff 5f ff ff       	call   c000bd94 <secondsToDatetime(unsigned long long)>
c0015d95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015d99:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015d9d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015da1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015da5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015da9:	89 f0                	mov    eax,esi
c0015dab:	83 c4 20             	add    esp,0x20
c0015dae:	5b                   	pop    ebx
c0015daf:	5e                   	pop    esi
c0015db0:	ff e0                	jmp    eax

c0015db2 <RTC::~RTC()>:
c0015db2:	83 ec 0c             	sub    esp,0xc
c0015db5:	ba 90 ee 01 c0       	mov    edx,0xc001ee90
c0015dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dbe:	89 10                	mov    DWORD PTR [eax],edx
c0015dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dc4:	83 ec 0c             	sub    esp,0xc
c0015dc7:	50                   	push   eax
c0015dc8:	e8 4b 5d ff ff       	call   c000bb18 <Clock::~Clock()>
c0015dcd:	83 c4 10             	add    esp,0x10
c0015dd0:	90                   	nop
c0015dd1:	83 c4 0c             	add    esp,0xc
c0015dd4:	c3                   	ret    
c0015dd5:	90                   	nop

c0015dd6 <RTC::~RTC()>:
c0015dd6:	83 ec 0c             	sub    esp,0xc
c0015dd9:	83 ec 0c             	sub    esp,0xc
c0015ddc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015de0:	e8 cd ff ff ff       	call   c0015db2 <RTC::~RTC()>
c0015de5:	83 c4 10             	add    esp,0x10
c0015de8:	83 ec 08             	sub    esp,0x8
c0015deb:	68 60 01 00 00       	push   0x160
c0015df0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015df4:	e8 f1 4c ff ff       	call   c000aaea <operator delete(void*, unsigned long)>
c0015df9:	83 c4 10             	add    esp,0x10
c0015dfc:	83 c4 0c             	add    esp,0xc
c0015dff:	c3                   	ret    

c0015e00 <RTC::get_update_in_progress_flag()>:
c0015e00:	83 ec 14             	sub    esp,0x14
c0015e03:	6a 0a                	push   0xa
c0015e05:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015e0b:	e8 32 17 ff ff       	call   c0007542 <Computer::readCMOS(unsigned char)>
c0015e10:	83 c4 1c             	add    esp,0x1c
c0015e13:	c0 e8 07             	shr    al,0x7
c0015e16:	c3                   	ret    
c0015e17:	90                   	nop

c0015e18 <RTC::completeRTCRefresh()>:
c0015e18:	55                   	push   ebp
c0015e19:	57                   	push   edi
c0015e1a:	56                   	push   esi
c0015e1b:	53                   	push   ebx
c0015e1c:	83 ec 2c             	sub    esp,0x2c
c0015e1f:	8b 1d 0c 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f0c
c0015e25:	83 ec 0c             	sub    esp,0xc
c0015e28:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015e2c:	e8 cf ff ff ff       	call   c0015e00 <RTC::get_update_in_progress_flag()>
c0015e31:	83 c4 10             	add    esp,0x10
c0015e34:	84 c0                	test   al,al
c0015e36:	74 0e                	je     c0015e46 <RTC::completeRTCRefresh()+0x2e>
c0015e38:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015e3e:	3b 05 0c 2f 02 c0    	cmp    eax,DWORD PTR ds:0xc0022f0c
c0015e44:	73 df                	jae    c0015e25 <RTC::completeRTCRefresh()+0xd>
c0015e46:	55                   	push   ebp
c0015e47:	55                   	push   ebp
c0015e48:	6a 00                	push   0x0
c0015e4a:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015e50:	e8 ed 16 ff ff       	call   c0007542 <Computer::readCMOS(unsigned char)>
c0015e55:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015e59:	58                   	pop    eax
c0015e5a:	5a                   	pop    edx
c0015e5b:	6a 02                	push   0x2
c0015e5d:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015e63:	e8 da 16 ff ff       	call   c0007542 <Computer::readCMOS(unsigned char)>
c0015e68:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015e6c:	59                   	pop    ecx
c0015e6d:	5b                   	pop    ebx
c0015e6e:	6a 04                	push   0x4
c0015e70:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015e76:	e8 c7 16 ff ff       	call   c0007542 <Computer::readCMOS(unsigned char)>
c0015e7b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015e7f:	5e                   	pop    esi
c0015e80:	5f                   	pop    edi
c0015e81:	6a 07                	push   0x7
c0015e83:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015e89:	e8 b4 16 ff ff       	call   c0007542 <Computer::readCMOS(unsigned char)>
c0015e8e:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015e92:	5d                   	pop    ebp
c0015e93:	58                   	pop    eax
c0015e94:	6a 08                	push   0x8
c0015e96:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015e9c:	e8 a1 16 ff ff       	call   c0007542 <Computer::readCMOS(unsigned char)>
c0015ea1:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015ea5:	58                   	pop    eax
c0015ea6:	5a                   	pop    edx
c0015ea7:	6a 09                	push   0x9
c0015ea9:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015eaf:	e8 8e 16 ff ff       	call   c0007542 <Computer::readCMOS(unsigned char)>
c0015eb4:	83 c4 10             	add    esp,0x10
c0015eb7:	0f b6 e8             	movzx  ebp,al
c0015eba:	8b 1d 0c 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f0c
c0015ec0:	83 ec 0c             	sub    esp,0xc
c0015ec3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015ec7:	e8 34 ff ff ff       	call   c0015e00 <RTC::get_update_in_progress_flag()>
c0015ecc:	83 c4 10             	add    esp,0x10
c0015ecf:	84 c0                	test   al,al
c0015ed1:	74 0e                	je     c0015ee1 <RTC::completeRTCRefresh()+0xc9>
c0015ed3:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015ed9:	3b 05 0c 2f 02 c0    	cmp    eax,DWORD PTR ds:0xc0022f0c
c0015edf:	73 df                	jae    c0015ec0 <RTC::completeRTCRefresh()+0xa8>
c0015ee1:	50                   	push   eax
c0015ee2:	50                   	push   eax
c0015ee3:	6a 00                	push   0x0
c0015ee5:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015eeb:	e8 52 16 ff ff       	call   c0007542 <Computer::readCMOS(unsigned char)>
c0015ef0:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015ef4:	58                   	pop    eax
c0015ef5:	5a                   	pop    edx
c0015ef6:	6a 02                	push   0x2
c0015ef8:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015efe:	e8 3f 16 ff ff       	call   c0007542 <Computer::readCMOS(unsigned char)>
c0015f03:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f07:	59                   	pop    ecx
c0015f08:	5b                   	pop    ebx
c0015f09:	6a 04                	push   0x4
c0015f0b:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015f11:	e8 2c 16 ff ff       	call   c0007542 <Computer::readCMOS(unsigned char)>
c0015f16:	5e                   	pop    esi
c0015f17:	88 c3                	mov    bl,al
c0015f19:	5f                   	pop    edi
c0015f1a:	6a 07                	push   0x7
c0015f1c:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015f22:	e8 1b 16 ff ff       	call   c0007542 <Computer::readCMOS(unsigned char)>
c0015f27:	89 c6                	mov    esi,eax
c0015f29:	58                   	pop    eax
c0015f2a:	5a                   	pop    edx
c0015f2b:	6a 08                	push   0x8
c0015f2d:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015f33:	e8 0a 16 ff ff       	call   c0007542 <Computer::readCMOS(unsigned char)>
c0015f38:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015f3c:	59                   	pop    ecx
c0015f3d:	5f                   	pop    edi
c0015f3e:	6a 09                	push   0x9
c0015f40:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015f46:	e8 f7 15 ff ff       	call   c0007542 <Computer::readCMOS(unsigned char)>
c0015f4b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015f4f:	0f b6 f8             	movzx  edi,al
c0015f52:	83 c4 10             	add    esp,0x10
c0015f55:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015f59:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015f5d:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015f61:	89 f1                	mov    ecx,esi
c0015f63:	0f 94 c0             	sete   al
c0015f66:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015f6a:	0f 94 c2             	sete   dl
c0015f6d:	21 d0                	and    eax,edx
c0015f6f:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015f73:	0f 94 c2             	sete   dl
c0015f76:	21 c2                	and    edx,eax
c0015f78:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015f7c:	0f 94 c0             	sete   al
c0015f7f:	21 d0                	and    eax,edx
c0015f81:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015f85:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015f89:	0f 94 c1             	sete   cl
c0015f8c:	84 c8                	test   al,cl
c0015f8e:	75 29                	jne    c0015fb9 <RTC::completeRTCRefresh()+0x1a1>
c0015f90:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015f94:	89 fd                	mov    ebp,edi
c0015f96:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015f9a:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015f9e:	89 f0                	mov    eax,esi
c0015fa0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015fa4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015fa8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015fac:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015fb0:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015fb4:	e9 01 ff ff ff       	jmp    c0015eba <RTC::completeRTCRefresh()+0xa2>
c0015fb9:	39 fd                	cmp    ebp,edi
c0015fbb:	75 d3                	jne    c0015f90 <RTC::completeRTCRefresh()+0x178>
c0015fbd:	55                   	push   ebp
c0015fbe:	55                   	push   ebp
c0015fbf:	6a 0b                	push   0xb
c0015fc1:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0015fc7:	e8 76 15 ff ff       	call   c0007542 <Computer::readCMOS(unsigned char)>
c0015fcc:	83 c4 10             	add    esp,0x10
c0015fcf:	89 c5                	mov    ebp,eax
c0015fd1:	a8 04                	test   al,0x4
c0015fd3:	75 78                	jne    c001604d <RTC::completeRTCRefresh()+0x235>
c0015fd5:	b1 0a                	mov    cl,0xa
c0015fd7:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015fdb:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015fdf:	83 e2 0f             	and    edx,0xf
c0015fe2:	c0 e8 04             	shr    al,0x4
c0015fe5:	c1 ef 04             	shr    edi,0x4
c0015fe8:	f6 e1                	mul    cl
c0015fea:	6b ff 0a             	imul   edi,edi,0xa
c0015fed:	01 d0                	add    eax,edx
c0015fef:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015ff3:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015ff7:	83 e2 0f             	and    edx,0xf
c0015ffa:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015ffe:	c0 e8 04             	shr    al,0x4
c0016001:	f6 e1                	mul    cl
c0016003:	01 d0                	add    eax,edx
c0016005:	88 da                	mov    dl,bl
c0016007:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001600b:	83 e2 0f             	and    edx,0xf
c001600e:	88 d8                	mov    al,bl
c0016010:	83 e3 80             	and    ebx,0xffffff80
c0016013:	c0 e8 04             	shr    al,0x4
c0016016:	83 e0 07             	and    eax,0x7
c0016019:	f6 e1                	mul    cl
c001601b:	01 d0                	add    eax,edx
c001601d:	89 f2                	mov    edx,esi
c001601f:	09 c3                	or     ebx,eax
c0016021:	83 e2 0f             	and    edx,0xf
c0016024:	89 f0                	mov    eax,esi
c0016026:	c0 e8 04             	shr    al,0x4
c0016029:	f6 e1                	mul    cl
c001602b:	8d 34 02             	lea    esi,[edx+eax*1]
c001602e:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0016032:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0016036:	83 e2 0f             	and    edx,0xf
c0016039:	c0 e8 04             	shr    al,0x4
c001603c:	f6 e1                	mul    cl
c001603e:	01 d0                	add    eax,edx
c0016040:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016044:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016048:	83 e0 0f             	and    eax,0xf
c001604b:	01 c7                	add    edi,eax
c001604d:	83 e5 02             	and    ebp,0x2
c0016050:	75 14                	jne    c0016066 <RTC::completeRTCRefresh()+0x24e>
c0016052:	84 db                	test   bl,bl
c0016054:	79 10                	jns    c0016066 <RTC::completeRTCRefresh()+0x24e>
c0016056:	83 e3 7f             	and    ebx,0x7f
c0016059:	b9 18 00 00 00       	mov    ecx,0x18
c001605e:	8d 43 0c             	lea    eax,[ebx+0xc]
c0016061:	99                   	cdq    
c0016062:	f7 f9                	idiv   ecx
c0016064:	88 d3                	mov    bl,dl
c0016066:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001606c:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0016072:	77 06                	ja     c001607a <RTC::completeRTCRefresh()+0x262>
c0016074:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001607a:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c001607f:	31 d2                	xor    edx,edx
c0016081:	c1 e1 10             	shl    ecx,0x10
c0016084:	89 d7                	mov    edi,edx
c0016086:	c1 e5 10             	shl    ebp,0x10
c0016089:	31 c0                	xor    eax,eax
c001608b:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0016091:	09 cf                	or     edi,ecx
c0016093:	89 fa                	mov    edx,edi
c0016095:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0016099:	88 da                	mov    dl,bl
c001609b:	89 f3                	mov    ebx,esi
c001609d:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c00160a1:	88 d8                	mov    al,bl
c00160a3:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c00160a7:	0f b7 c8             	movzx  ecx,ax
c00160aa:	09 e9                	or     ecx,ebp
c00160ac:	89 c8                	mov    eax,ecx
c00160ae:	51                   	push   ecx
c00160af:	51                   	push   ecx
c00160b0:	52                   	push   edx
c00160b1:	50                   	push   eax
c00160b2:	e8 50 5b ff ff       	call   c000bc07 <datetimeToSeconds(datetime_t)>
c00160b7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00160bb:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00160c1:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00160c7:	83 c4 3c             	add    esp,0x3c
c00160ca:	5b                   	pop    ebx
c00160cb:	5e                   	pop    esi
c00160cc:	5f                   	pop    edi
c00160cd:	5d                   	pop    ebp
c00160ce:	c3                   	ret    
c00160cf:	90                   	nop

c00160d0 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00160d0:	55                   	push   ebp
c00160d1:	57                   	push   edi
c00160d2:	56                   	push   esi
c00160d3:	53                   	push   ebx
c00160d4:	83 ec 30             	sub    esp,0x30
c00160d7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00160db:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00160df:	6a 00                	push   0x0
c00160e1:	6a 00                	push   0x0
c00160e3:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c00160e9:	e8 6a 15 ff ff       	call   c0007658 <Computer::writeCMOS(unsigned char, unsigned char)>
c00160ee:	83 c4 0c             	add    esp,0xc
c00160f1:	6a 00                	push   0x0
c00160f3:	6a 02                	push   0x2
c00160f5:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c00160fb:	e8 58 15 ff ff       	call   c0007658 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016100:	31 d2                	xor    edx,edx
c0016102:	89 f9                	mov    ecx,edi
c0016104:	89 f8                	mov    eax,edi
c0016106:	c1 e9 10             	shr    ecx,0x10
c0016109:	0f b6 c4             	movzx  eax,ah
c001610c:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0016110:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0016114:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016118:	b9 64 00 00 00       	mov    ecx,0x64
c001611d:	89 f0                	mov    eax,esi
c001611f:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0016123:	89 f0                	mov    eax,esi
c0016125:	0f b6 c4             	movzx  eax,ah
c0016128:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001612c:	89 f0                	mov    eax,esi
c001612e:	c1 e8 10             	shr    eax,0x10
c0016131:	66 f7 f1             	div    cx
c0016134:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0016139:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c001613e:	59                   	pop    ecx
c001613f:	5b                   	pop    ebx
c0016140:	89 fb                	mov    ebx,edi
c0016142:	6a 0b                	push   0xb
c0016144:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c001614a:	e8 f3 13 ff ff       	call   c0007542 <Computer::readCMOS(unsigned char)>
c001614f:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0016153:	83 c4 10             	add    esp,0x10
c0016156:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c001615b:	75 74                	jne    c00161d1 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c001615d:	b2 0a                	mov    dl,0xa
c001615f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016163:	0f b6 c1             	movzx  eax,cl
c0016166:	f6 f2                	div    dl
c0016168:	88 c3                	mov    bl,al
c001616a:	88 e0                	mov    al,ah
c001616c:	c1 e3 04             	shl    ebx,0x4
c001616f:	09 c3                	or     ebx,eax
c0016171:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016176:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c001617a:	f6 f2                	div    dl
c001617c:	88 c1                	mov    cl,al
c001617e:	88 e0                	mov    al,ah
c0016180:	c1 e1 04             	shl    ecx,0x4
c0016183:	09 c1                	or     ecx,eax
c0016185:	89 f8                	mov    eax,edi
c0016187:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001618b:	0f b6 c0             	movzx  eax,al
c001618e:	f6 f2                	div    dl
c0016190:	88 c3                	mov    bl,al
c0016192:	88 e0                	mov    al,ah
c0016194:	c1 e3 04             	shl    ebx,0x4
c0016197:	09 c3                	or     ebx,eax
c0016199:	89 f0                	mov    eax,esi
c001619b:	0f b6 c0             	movzx  eax,al
c001619e:	f6 f2                	div    dl
c00161a0:	88 c1                	mov    cl,al
c00161a2:	88 e0                	mov    al,ah
c00161a4:	c1 e1 04             	shl    ecx,0x4
c00161a7:	09 c1                	or     ecx,eax
c00161a9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00161ae:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c00161b2:	f6 f2                	div    dl
c00161b4:	88 c1                	mov    cl,al
c00161b6:	88 e0                	mov    al,ah
c00161b8:	c1 e1 04             	shl    ecx,0x4
c00161bb:	09 c1                	or     ecx,eax
c00161bd:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c00161c2:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00161c6:	f6 f2                	div    dl
c00161c8:	89 c5                	mov    ebp,eax
c00161ca:	88 e0                	mov    al,ah
c00161cc:	c1 e5 04             	shl    ebp,0x4
c00161cf:	09 c5                	or     ebp,eax
c00161d1:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c00161d6:	75 17                	jne    c00161ef <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161d8:	80 fb 0b             	cmp    bl,0xb
c00161db:	76 0c                	jbe    c00161e9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00161dd:	80 eb 0c             	sub    bl,0xc
c00161e0:	75 02                	jne    c00161e4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00161e2:	b3 0c                	mov    bl,0xc
c00161e4:	83 cb 80             	or     ebx,0xffffff80
c00161e7:	eb 06                	jmp    c00161ef <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161e9:	84 db                	test   bl,bl
c00161eb:	75 02                	jne    c00161ef <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161ed:	b3 0c                	mov    bl,0xc
c00161ef:	0f b6 db             	movzx  ebx,bl
c00161f2:	50                   	push   eax
c00161f3:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00161f8:	50                   	push   eax
c00161f9:	6a 00                	push   0x0
c00161fb:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0016201:	e8 52 14 ff ff       	call   c0007658 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016206:	83 c4 0c             	add    esp,0xc
c0016209:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001620e:	50                   	push   eax
c001620f:	6a 02                	push   0x2
c0016211:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0016217:	e8 3c 14 ff ff       	call   c0007658 <Computer::writeCMOS(unsigned char, unsigned char)>
c001621c:	83 c4 0c             	add    esp,0xc
c001621f:	53                   	push   ebx
c0016220:	6a 04                	push   0x4
c0016222:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0016228:	e8 2b 14 ff ff       	call   c0007658 <Computer::writeCMOS(unsigned char, unsigned char)>
c001622d:	83 c4 0c             	add    esp,0xc
c0016230:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0016235:	50                   	push   eax
c0016236:	6a 07                	push   0x7
c0016238:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c001623e:	e8 15 14 ff ff       	call   c0007658 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016243:	83 c4 0c             	add    esp,0xc
c0016246:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001624b:	50                   	push   eax
c001624c:	6a 08                	push   0x8
c001624e:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0016254:	e8 ff 13 ff ff       	call   c0007658 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016259:	83 c4 0c             	add    esp,0xc
c001625c:	89 e8                	mov    eax,ebp
c001625e:	0f b6 e8             	movzx  ebp,al
c0016261:	55                   	push   ebp
c0016262:	6a 09                	push   0x9
c0016264:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c001626a:	e8 e9 13 ff ff       	call   c0007658 <Computer::writeCMOS(unsigned char, unsigned char)>
c001626f:	5a                   	pop    edx
c0016270:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016274:	e8 9f fb ff ff       	call   c0015e18 <RTC::completeRTCRefresh()>
c0016279:	83 c4 3c             	add    esp,0x3c
c001627c:	b0 01                	mov    al,0x1
c001627e:	5b                   	pop    ebx
c001627f:	5e                   	pop    esi
c0016280:	5f                   	pop    edi
c0016281:	5d                   	pop    ebp
c0016282:	c3                   	ret    

c0016283 <rtcIRQHandler(regs*, void*)>:
c0016283:	53                   	push   ebx
c0016284:	83 ec 10             	sub    esp,0x10
c0016287:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001628b:	6a 0c                	push   0xc
c001628d:	ff 35 38 09 02 c0    	push   DWORD PTR ds:0xc0020938
c0016293:	e8 aa 12 ff ff       	call   c0007542 <Computer::readCMOS(unsigned char)>
c0016298:	83 c4 10             	add    esp,0x10
c001629b:	84 c0                	test   al,al
c001629d:	79 24                	jns    c00162c3 <rtcIRQHandler(regs*, void*)+0x40>
c001629f:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00162a6:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00162ad:	66 ff 05 b4 3e 02 c0 	inc    WORD PTR ds:0xc0023eb4
c00162b4:	75 0d                	jne    c00162c3 <rtcIRQHandler(regs*, void*)+0x40>
c00162b6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00162ba:	83 c4 08             	add    esp,0x8
c00162bd:	5b                   	pop    ebx
c00162be:	e9 55 fb ff ff       	jmp    c0015e18 <RTC::completeRTCRefresh()>
c00162c3:	83 c4 08             	add    esp,0x8
c00162c6:	5b                   	pop    ebx
c00162c7:	c3                   	ret    

c00162c8 <RTC::RTC()>:
c00162c8:	83 ec 1c             	sub    esp,0x1c
c00162cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162cf:	83 ec 08             	sub    esp,0x8
c00162d2:	68 73 ee 01 c0       	push   0xc001ee73
c00162d7:	50                   	push   eax
c00162d8:	e8 05 58 ff ff       	call   c000bae2 <Clock::Clock(char const*)>
c00162dd:	83 c4 10             	add    esp,0x10
c00162e0:	ba 90 ee 01 c0       	mov    edx,0xc001ee90
c00162e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162e9:	89 10                	mov    DWORD PTR [eax],edx
c00162eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162ef:	83 ec 0c             	sub    esp,0xc
c00162f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162f6:	6a 01                	push   0x1
c00162f8:	68 83 62 01 c0       	push   0xc0016283
c00162fd:	6a 08                	push   0x8
c00162ff:	50                   	push   eax
c0016300:	e8 c7 5c ff ff       	call   c000bfcc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0016305:	83 c4 20             	add    esp,0x20
c0016308:	89 c2                	mov    edx,eax
c001630a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001630e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0016314:	fa                   	cli    
c0016315:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c001631a:	40                   	inc    eax
c001631b:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0016320:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0016325:	83 ec 08             	sub    esp,0x8
c0016328:	6a 0b                	push   0xb
c001632a:	50                   	push   eax
c001632b:	e8 12 12 ff ff       	call   c0007542 <Computer::readCMOS(unsigned char)>
c0016330:	83 c4 10             	add    esp,0x10
c0016333:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016337:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c001633c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0016340:	83 ca 10             	or     edx,0x10
c0016343:	81 e2 ff 00 00 00    	and    edx,0xff
c0016349:	83 ec 04             	sub    esp,0x4
c001634c:	52                   	push   edx
c001634d:	6a 0b                	push   0xb
c001634f:	50                   	push   eax
c0016350:	e8 03 13 ff ff       	call   c0007658 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016355:	83 c4 10             	add    esp,0x10
c0016358:	83 ec 0c             	sub    esp,0xc
c001635b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001635f:	e8 b4 fa ff ff       	call   c0015e18 <RTC::completeRTCRefresh()>
c0016364:	83 c4 10             	add    esp,0x10
c0016367:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c001636c:	48                   	dec    eax
c001636d:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0016372:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c0016377:	85 c0                	test   eax,eax
c0016379:	75 01                	jne    c001637c <RTC::RTC()+0xb4>
c001637b:	fb                   	sti    
c001637c:	90                   	nop
c001637d:	83 c4 1c             	add    esp,0x1c
c0016380:	c3                   	ret    
c0016381:	66 90                	xchg   ax,ax
c0016383:	90                   	nop

c0016384 <HalConsoleScroll(int, int)>:
c0016384:	83 ec 10             	sub    esp,0x10
c0016387:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001638f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0016397:	90                   	nop
c0016398:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001639d:	0f 8f e1 00 00 00    	jg     c0016484 <HalConsoleScroll(int, int)+0x100>
c00163a3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00163ab:	90                   	nop
c00163ac:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00163b4:	0f 8f be 00 00 00    	jg     c0016478 <HalConsoleScroll(int, int)+0xf4>
c00163ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163be:	89 d0                	mov    eax,edx
c00163c0:	c1 e0 02             	shl    eax,0x2
c00163c3:	01 d0                	add    eax,edx
c00163c5:	c1 e0 05             	shl    eax,0x5
c00163c8:	89 c2                	mov    edx,eax
c00163ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163ce:	01 d0                	add    eax,edx
c00163d0:	89 c2                	mov    edx,eax
c00163d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163d6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00163d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163dd:	89 d0                	mov    eax,edx
c00163df:	c1 e0 02             	shl    eax,0x2
c00163e2:	01 d0                	add    eax,edx
c00163e4:	c1 e0 05             	shl    eax,0x5
c00163e7:	89 c2                	mov    edx,eax
c00163e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163ed:	01 d0                	add    eax,edx
c00163ef:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00163f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163f9:	01 c2                	add    edx,eax
c00163fb:	8a 01                	mov    al,BYTE PTR [ecx]
c00163fd:	88 02                	mov    BYTE PTR [edx],al
c00163ff:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016404:	75 66                	jne    c001646c <HalConsoleScroll(int, int)+0xe8>
c0016406:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001640a:	83 e0 01             	and    eax,0x1
c001640d:	74 39                	je     c0016448 <HalConsoleScroll(int, int)+0xc4>
c001640f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016413:	83 e0 0f             	and    eax,0xf
c0016416:	88 c2                	mov    dl,al
c0016418:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001641c:	c1 e0 04             	shl    eax,0x4
c001641f:	88 d1                	mov    cl,dl
c0016421:	09 c1                	or     ecx,eax
c0016423:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016427:	89 d0                	mov    eax,edx
c0016429:	c1 e0 02             	shl    eax,0x2
c001642c:	01 d0                	add    eax,edx
c001642e:	c1 e0 05             	shl    eax,0x5
c0016431:	89 c2                	mov    edx,eax
c0016433:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016437:	01 d0                	add    eax,edx
c0016439:	89 c2                	mov    edx,eax
c001643b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001643f:	01 d0                	add    eax,edx
c0016441:	88 ca                	mov    dl,cl
c0016443:	88 10                	mov    BYTE PTR [eax],dl
c0016445:	eb 25                	jmp    c001646c <HalConsoleScroll(int, int)+0xe8>
c0016447:	90                   	nop
c0016448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001644c:	89 d0                	mov    eax,edx
c001644e:	c1 e0 02             	shl    eax,0x2
c0016451:	01 d0                	add    eax,edx
c0016453:	c1 e0 05             	shl    eax,0x5
c0016456:	89 c2                	mov    edx,eax
c0016458:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001645c:	01 d0                	add    eax,edx
c001645e:	89 c2                	mov    edx,eax
c0016460:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016464:	01 d0                	add    eax,edx
c0016466:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0016469:	8d 76 00             	lea    esi,[esi+0x0]
c001646c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0016470:	e9 37 ff ff ff       	jmp    c00163ac <HalConsoleScroll(int, int)+0x28>
c0016475:	8d 76 00             	lea    esi,[esi+0x0]
c0016478:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001647c:	e9 17 ff ff ff       	jmp    c0016398 <HalConsoleScroll(int, int)+0x14>
c0016481:	8d 76 00             	lea    esi,[esi+0x0]
c0016484:	90                   	nop
c0016485:	83 c4 10             	add    esp,0x10
c0016488:	c3                   	ret    
c0016489:	8d 76 00             	lea    esi,[esi+0x0]

c001648c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001648c:	83 ec 14             	sub    esp,0x14
c001648f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016493:	88 04 24             	mov    BYTE PTR [esp],al
c0016496:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016499:	25 ff 00 00 00       	and    eax,0xff
c001649e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00164a2:	89 d1                	mov    ecx,edx
c00164a4:	83 e1 0f             	and    ecx,0xf
c00164a7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00164ab:	c1 e2 04             	shl    edx,0x4
c00164ae:	81 e2 ff 00 00 00    	and    edx,0xff
c00164b4:	09 ca                	or     edx,ecx
c00164b6:	c1 e2 08             	shl    edx,0x8
c00164b9:	09 d0                	or     eax,edx
c00164bb:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00164c0:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00164c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00164cc:	89 d0                	mov    eax,edx
c00164ce:	c1 e0 02             	shl    eax,0x2
c00164d1:	01 d0                	add    eax,edx
c00164d3:	c1 e0 04             	shl    eax,0x4
c00164d6:	89 c2                	mov    edx,eax
c00164d8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00164dc:	01 d0                	add    eax,edx
c00164de:	01 c0                	add    eax,eax
c00164e0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00164e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164e8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00164ed:	66 89 02             	mov    WORD PTR [edx],ax
c00164f0:	90                   	nop
c00164f1:	83 c4 14             	add    esp,0x14
c00164f4:	c3                   	ret    
c00164f5:	8d 76 00             	lea    esi,[esi+0x0]

c00164f8 <HalConsoleCursorUpdate(int, int)>:
c00164f8:	83 ec 20             	sub    esp,0x20
c00164fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00164ff:	89 c2                	mov    edx,eax
c0016501:	89 d0                	mov    eax,edx
c0016503:	c1 e0 02             	shl    eax,0x2
c0016506:	01 d0                	add    eax,edx
c0016508:	c1 e0 04             	shl    eax,0x4
c001650b:	89 c2                	mov    edx,eax
c001650d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016511:	01 d0                	add    eax,edx
c0016513:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0016518:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001651f:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0016524:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016528:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001652c:	ee                   	out    dx,al
c001652d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016532:	25 ff 00 00 00       	and    eax,0xff
c0016537:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001653e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016542:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0016546:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001654a:	ee                   	out    dx,al
c001654b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0016552:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0016557:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001655b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001655f:	ee                   	out    dx,al
c0016560:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016565:	66 c1 e8 08          	shr    ax,0x8
c0016569:	25 ff 00 00 00       	and    eax,0xff
c001656e:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0016575:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016579:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001657d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016581:	ee                   	out    dx,al
c0016582:	90                   	nop
c0016583:	83 c4 20             	add    esp,0x20
c0016586:	c3                   	ret    
c0016587:	90                   	nop

c0016588 <FAT::getName()>:
c0016588:	b8 c4 ee 01 c0       	mov    eax,0xc001eec4
c001658d:	c3                   	ret    
c001658e:	66 90                	xchg   ax,ax

c0016590 <FAT::tell(void*, unsigned long long*)>:
c0016590:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016595:	75 09                	jne    c00165a0 <FAT::tell(void*, unsigned long long*)+0x10>
c0016597:	b8 04 00 00 00       	mov    eax,0x4
c001659c:	c3                   	ret    
c001659d:	8d 76 00             	lea    esi,[esi+0x0]
c00165a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165a5:	75 09                	jne    c00165b0 <FAT::tell(void*, unsigned long long*)+0x20>
c00165a7:	b8 04 00 00 00       	mov    eax,0x4
c00165ac:	c3                   	ret    
c00165ad:	8d 76 00             	lea    esi,[esi+0x0]
c00165b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165b4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00165b7:	ba 00 00 00 00       	mov    edx,0x0
c00165bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165c0:	89 01                	mov    DWORD PTR [ecx],eax
c00165c2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00165c5:	b8 00 00 00 00       	mov    eax,0x0
c00165ca:	c3                   	ret    
c00165cb:	90                   	nop

c00165cc <FAT::stat(void*, unsigned long long*)>:
c00165cc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00165d1:	75 09                	jne    c00165dc <FAT::stat(void*, unsigned long long*)+0x10>
c00165d3:	b8 04 00 00 00       	mov    eax,0x4
c00165d8:	c3                   	ret    
c00165d9:	8d 76 00             	lea    esi,[esi+0x0]
c00165dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165e1:	75 09                	jne    c00165ec <FAT::stat(void*, unsigned long long*)+0x20>
c00165e3:	b8 04 00 00 00       	mov    eax,0x4
c00165e8:	c3                   	ret    
c00165e9:	8d 76 00             	lea    esi,[esi+0x0]
c00165ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00165f3:	ba 00 00 00 00       	mov    edx,0x0
c00165f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165fc:	89 01                	mov    DWORD PTR [ecx],eax
c00165fe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016601:	b8 00 00 00 00       	mov    eax,0x0
c0016606:	c3                   	ret    
c0016607:	90                   	nop

c0016608 <FAT::~FAT()>:
c0016608:	83 ec 0c             	sub    esp,0xc
c001660b:	ba 10 ef 01 c0       	mov    edx,0xc001ef10
c0016610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016614:	89 10                	mov    DWORD PTR [eax],edx
c0016616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001661a:	83 ec 0c             	sub    esp,0xc
c001661d:	50                   	push   eax
c001661e:	e8 03 49 ff ff       	call   c000af26 <Filesystem::~Filesystem()>
c0016623:	83 c4 10             	add    esp,0x10
c0016626:	90                   	nop
c0016627:	83 c4 0c             	add    esp,0xc
c001662a:	c3                   	ret    
c001662b:	90                   	nop

c001662c <FAT::~FAT()>:
c001662c:	83 ec 0c             	sub    esp,0xc
c001662f:	83 ec 0c             	sub    esp,0xc
c0016632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016636:	e8 cd ff ff ff       	call   c0016608 <FAT::~FAT()>
c001663b:	83 c4 10             	add    esp,0x10
c001663e:	83 ec 08             	sub    esp,0x8
c0016641:	6a 08                	push   0x8
c0016643:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016647:	e8 9e 44 ff ff       	call   c000aaea <operator delete(void*, unsigned long)>
c001664c:	83 c4 10             	add    esp,0x10
c001664f:	83 c4 0c             	add    esp,0xc
c0016652:	c3                   	ret    
c0016653:	90                   	nop

c0016654 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0016654:	83 ec 1c             	sub    esp,0x1c
c0016657:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001665e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0016663:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016667:	8b 04 85 e0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc120]
c001666e:	83 f8 ff             	cmp    eax,0xffffffff
c0016671:	75 35                	jne    c00166a8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0016673:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016677:	88 c2                	mov    dl,al
c0016679:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c001667e:	01 d0                	add    eax,edx
c0016680:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016684:	8b 15 c0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ec0
c001668a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001668e:	89 14 85 e0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc120],edx
c0016695:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c001669a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001669e:	89 14 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],edx
c00166a5:	eb 19                	jmp    c00166c0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00166a7:	90                   	nop
c00166a8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00166ac:	88 c2                	mov    dl,al
c00166ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166b2:	8b 04 85 e0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc120]
c00166b9:	01 d0                	add    eax,edx
c00166bb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00166bf:	90                   	nop
c00166c0:	83 ec 04             	sub    esp,0x4
c00166c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00166c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00166cb:	8d 44 24 15          	lea    eax,[esp+0x15]
c00166cf:	50                   	push   eax
c00166d0:	e8 9f e7 fe ff       	call   c0004e74 <f_getlabel>
c00166d5:	83 c4 10             	add    esp,0x10
c00166d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00166e1:	75 09                	jne    c00166ec <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00166e3:	b8 00 00 00 00       	mov    eax,0x0
c00166e8:	eb 0a                	jmp    c00166f4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00166ea:	66 90                	xchg   ax,ax
c00166ec:	b8 01 00 00 00       	mov    eax,0x1
c00166f1:	8d 76 00             	lea    esi,[esi+0x0]
c00166f4:	83 c4 1c             	add    esp,0x1c
c00166f7:	c3                   	ret    

c00166f8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00166f8:	57                   	push   edi
c00166f9:	83 ec 58             	sub    esp,0x58
c00166fc:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0016704:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016708:	b8 00 00 00 00       	mov    eax,0x0
c001670d:	b9 0f 00 00 00       	mov    ecx,0xf
c0016712:	fc                   	cld    
c0016713:	89 d7                	mov    edi,edx
c0016715:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0016717:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001671b:	8b 04 85 e0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc120]
c0016722:	83 f8 ff             	cmp    eax,0xffffffff
c0016725:	75 35                	jne    c001675c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0016727:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001672b:	88 c2                	mov    dl,al
c001672d:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c0016732:	01 d0                	add    eax,edx
c0016734:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016738:	8b 15 c0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ec0
c001673e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016742:	89 14 85 e0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc120],edx
c0016749:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c001674e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0016752:	89 14 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],edx
c0016759:	eb 19                	jmp    c0016774 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001675b:	90                   	nop
c001675c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016760:	88 c2                	mov    dl,al
c0016762:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016766:	8b 04 85 e0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc120]
c001676d:	01 d0                	add    eax,edx
c001676f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016773:	90                   	nop
c0016774:	83 ec 08             	sub    esp,0x8
c0016777:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001677b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001677f:	50                   	push   eax
c0016780:	e8 5b a0 fe ff       	call   c00007e0 <strcat>
c0016785:	83 c4 10             	add    esp,0x10
c0016788:	83 ec 0c             	sub    esp,0xc
c001678b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001678f:	50                   	push   eax
c0016790:	e8 30 e8 fe ff       	call   c0004fc5 <f_setlabel>
c0016795:	83 c4 10             	add    esp,0x10
c0016798:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001679c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00167a1:	75 09                	jne    c00167ac <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00167a3:	b8 00 00 00 00       	mov    eax,0x0
c00167a8:	eb 0a                	jmp    c00167b4 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00167aa:	66 90                	xchg   ax,ax
c00167ac:	b8 01 00 00 00       	mov    eax,0x1
c00167b1:	8d 76 00             	lea    esi,[esi+0x0]
c00167b4:	83 c4 58             	add    esp,0x58
c00167b7:	5f                   	pop    edi
c00167b8:	c3                   	ret    
c00167b9:	90                   	nop
c00167ba:	66 90                	xchg   ax,ax

c00167bc <FAT::format(LogicalDisk*, int, char const*, int)>:
c00167bc:	83 ec 2c             	sub    esp,0x2c
c00167bf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00167c7:	83 ec 08             	sub    esp,0x8
c00167ca:	68 e8 ee 01 c0       	push   0xc001eee8
c00167cf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167d3:	e8 28 9f fe ff       	call   c0000700 <strcmp>
c00167d8:	83 c4 10             	add    esp,0x10
c00167db:	85 c0                	test   eax,eax
c00167dd:	0f 94 c0             	sete   al
c00167e0:	84 c0                	test   al,al
c00167e2:	74 10                	je     c00167f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00167e4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00167ec:	e9 b3 00 00 00       	jmp    c00168a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167f1:	8d 76 00             	lea    esi,[esi+0x0]
c00167f4:	83 ec 08             	sub    esp,0x8
c00167f7:	68 da ee 01 c0       	push   0xc001eeda
c00167fc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016800:	e8 fb 9e fe ff       	call   c0000700 <strcmp>
c0016805:	83 c4 10             	add    esp,0x10
c0016808:	85 c0                	test   eax,eax
c001680a:	0f 94 c0             	sete   al
c001680d:	84 c0                	test   al,al
c001680f:	74 0f                	je     c0016820 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016811:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016819:	e9 86 00 00 00       	jmp    c00168a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001681e:	66 90                	xchg   ax,ax
c0016820:	83 ec 08             	sub    esp,0x8
c0016823:	68 e0 ee 01 c0       	push   0xc001eee0
c0016828:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001682c:	e8 cf 9e fe ff       	call   c0000700 <strcmp>
c0016831:	83 c4 10             	add    esp,0x10
c0016834:	85 c0                	test   eax,eax
c0016836:	0f 94 c0             	sete   al
c0016839:	84 c0                	test   al,al
c001683b:	74 0b                	je     c0016848 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001683d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016845:	eb 5d                	jmp    c00168a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016847:	90                   	nop
c0016848:	83 ec 08             	sub    esp,0x8
c001684b:	68 9c cf 01 c0       	push   0xc001cf9c
c0016850:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016854:	e8 a7 9e fe ff       	call   c0000700 <strcmp>
c0016859:	83 c4 10             	add    esp,0x10
c001685c:	85 c0                	test   eax,eax
c001685e:	0f 94 c0             	sete   al
c0016861:	84 c0                	test   al,al
c0016863:	74 0b                	je     c0016870 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0016865:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001686d:	eb 35                	jmp    c00168a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001686f:	90                   	nop
c0016870:	83 ec 08             	sub    esp,0x8
c0016873:	68 e6 ee 01 c0       	push   0xc001eee6
c0016878:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001687c:	e8 7f 9e fe ff       	call   c0000700 <strcmp>
c0016881:	83 c4 10             	add    esp,0x10
c0016884:	85 c0                	test   eax,eax
c0016886:	0f 94 c0             	sete   al
c0016889:	84 c0                	test   al,al
c001688b:	74 0b                	je     c0016898 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001688d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0016895:	eb 0d                	jmp    c00168a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016897:	90                   	nop
c0016898:	b8 08 00 00 00       	mov    eax,0x8
c001689d:	e9 ea 00 00 00       	jmp    c001698c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00168a2:	66 90                	xchg   ax,ax
c00168a4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00168ab:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00168b0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168b4:	8b 04 85 e0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc120]
c00168bb:	83 f8 ff             	cmp    eax,0xffffffff
c00168be:	75 34                	jne    c00168f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00168c0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00168c4:	88 c2                	mov    dl,al
c00168c6:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c00168cb:	01 d0                	add    eax,edx
c00168cd:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00168d1:	8b 15 c0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ec0
c00168d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168db:	89 14 85 e0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc120],edx
c00168e2:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c00168e7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00168eb:	89 14 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],edx
c00168f2:	eb 18                	jmp    c001690c <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c00168f4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00168f8:	88 c2                	mov    dl,al
c00168fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168fe:	8b 04 85 e0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc120]
c0016905:	01 d0                	add    eax,edx
c0016907:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001690b:	90                   	nop
c001690c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016910:	88 04 24             	mov    BYTE PTR [esp],al
c0016913:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016917:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001691b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016923:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016928:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016930:	83 ec 0c             	sub    esp,0xc
c0016933:	68 00 20 00 00       	push   0x2000
c0016938:	e8 14 15 ff ff       	call   c0007e51 <malloc>
c001693d:	83 c4 10             	add    esp,0x10
c0016940:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016944:	68 00 20 00 00       	push   0x2000
c0016949:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001694d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016951:	50                   	push   eax
c0016952:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0016956:	50                   	push   eax
c0016957:	e8 59 e9 fe ff       	call   c00052b5 <f_mkfs>
c001695c:	83 c4 10             	add    esp,0x10
c001695f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016963:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016968:	75 0a                	jne    c0016974 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001696a:	b8 00 00 00 00       	mov    eax,0x0
c001696f:	eb 1b                	jmp    c001698c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016971:	8d 76 00             	lea    esi,[esi+0x0]
c0016974:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016979:	75 09                	jne    c0016984 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001697b:	b8 09 00 00 00       	mov    eax,0x9
c0016980:	eb 0a                	jmp    c001698c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016982:	66 90                	xchg   ax,ax
c0016984:	b8 01 00 00 00       	mov    eax,0x1
c0016989:	8d 76 00             	lea    esi,[esi+0x0]
c001698c:	83 c4 2c             	add    esp,0x2c
c001698f:	c3                   	ret    

c0016990 <FAT::tryMount(LogicalDisk*, int)>:
c0016990:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0016996:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c001699b:	83 f8 14             	cmp    eax,0x14
c001699e:	75 18                	jne    c00169b8 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00169a0:	83 ec 0c             	sub    esp,0xc
c00169a3:	68 ec ee 01 c0       	push   0xc001eeec
c00169a8:	e8 82 9d ff ff       	call   c001072f <Krnl::panic(char const*)>
c00169ad:	83 c4 10             	add    esp,0x10
c00169b0:	b0 00                	mov    al,0x0
c00169b2:	e9 e9 01 00 00       	jmp    c0016ba0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169b7:	90                   	nop
c00169b8:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00169bf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00169c5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169cb:	3d 00 02 00 00       	cmp    eax,0x200
c00169d0:	74 0a                	je     c00169dc <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00169d2:	b0 00                	mov    al,0x0
c00169d4:	e9 c7 01 00 00       	jmp    c0016ba0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169d9:	8d 76 00             	lea    esi,[esi+0x0]
c00169dc:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00169e4:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00169eb:	8b 04 85 e0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc120]
c00169f2:	83 f8 ff             	cmp    eax,0xffffffff
c00169f5:	74 09                	je     c0016a00 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00169f7:	b0 01                	mov    al,0x1
c00169f9:	e9 a2 01 00 00       	jmp    c0016ba0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169fe:	66 90                	xchg   ax,ax
c0016a00:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016a0a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0016a12:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016a19:	88 c2                	mov    dl,al
c0016a1b:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c0016a20:	01 d0                	add    eax,edx
c0016a22:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016a29:	8b 15 c0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ec0
c0016a2f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016a36:	89 14 85 e0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc120],edx
c0016a3d:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c0016a42:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016a49:	89 14 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],edx
c0016a50:	83 ec 0c             	sub    esp,0xc
c0016a53:	68 34 02 00 00       	push   0x234
c0016a58:	e8 f4 13 ff ff       	call   c0007e51 <malloc>
c0016a5d:	83 c4 10             	add    esp,0x10
c0016a60:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0016a67:	83 ec 04             	sub    esp,0x4
c0016a6a:	6a 00                	push   0x0
c0016a6c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a73:	50                   	push   eax
c0016a74:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a7b:	e8 5b d0 fe ff       	call   c0003adb <f_mount>
c0016a80:	83 c4 10             	add    esp,0x10
c0016a83:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016a8a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016a92:	74 1c                	je     c0016ab0 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016a94:	83 ec 0c             	sub    esp,0xc
c0016a97:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a9e:	e8 ce 13 ff ff       	call   c0007e71 <rfree>
c0016aa3:	83 c4 10             	add    esp,0x10
c0016aa6:	b0 00                	mov    al,0x0
c0016aa8:	e9 f3 00 00 00       	jmp    c0016ba0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016aad:	8d 76 00             	lea    esi,[esi+0x0]
c0016ab0:	83 ec 04             	sub    esp,0x4
c0016ab3:	68 00 01 00 00       	push   0x100
c0016ab8:	6a 00                	push   0x0
c0016aba:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016ac1:	50                   	push   eax
c0016ac2:	e8 29 9a fe ff       	call   c00004f0 <memset>
c0016ac7:	83 c4 10             	add    esp,0x10
c0016aca:	83 ec 08             	sub    esp,0x8
c0016acd:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016ad4:	50                   	push   eax
c0016ad5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016adc:	50                   	push   eax
c0016add:	e8 fe 9c fe ff       	call   c00007e0 <strcat>
c0016ae2:	83 c4 10             	add    esp,0x10
c0016ae5:	83 ec 08             	sub    esp,0x8
c0016ae8:	68 fa ee 01 c0       	push   0xc001eefa
c0016aed:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016af4:	50                   	push   eax
c0016af5:	e8 e6 9c fe ff       	call   c00007e0 <strcat>
c0016afa:	83 c4 10             	add    esp,0x10
c0016afd:	83 ec 04             	sub    esp,0x4
c0016b00:	6a 01                	push   0x1
c0016b02:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016b09:	50                   	push   eax
c0016b0a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b0e:	50                   	push   eax
c0016b0f:	e8 29 d0 fe ff       	call   c0003b3d <f_open>
c0016b14:	83 c4 10             	add    esp,0x10
c0016b17:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016b1e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016b25:	85 c0                	test   eax,eax
c0016b27:	74 0b                	je     c0016b34 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016b29:	78 31                	js     c0016b5c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016b2b:	83 e8 04             	sub    eax,0x4
c0016b2e:	83 f8 01             	cmp    eax,0x1
c0016b31:	77 29                	ja     c0016b5c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016b33:	90                   	nop
c0016b34:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016b3c:	83 ec 0c             	sub    esp,0xc
c0016b3f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b43:	50                   	push   eax
c0016b44:	e8 a7 d7 fe ff       	call   c00042f0 <f_close>
c0016b49:	83 c4 10             	add    esp,0x10
c0016b4c:	90                   	nop
c0016b4d:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016b55:	74 41                	je     c0016b98 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016b57:	eb 33                	jmp    c0016b8c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016b59:	8d 76 00             	lea    esi,[esi+0x0]
c0016b5c:	83 ec 0c             	sub    esp,0xc
c0016b5f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016b66:	e8 06 13 ff ff       	call   c0007e71 <rfree>
c0016b6b:	83 c4 10             	add    esp,0x10
c0016b6e:	83 ec 04             	sub    esp,0x4
c0016b71:	6a 00                	push   0x0
c0016b73:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016b7a:	50                   	push   eax
c0016b7b:	6a 00                	push   0x0
c0016b7d:	e8 59 cf fe ff       	call   c0003adb <f_mount>
c0016b82:	83 c4 10             	add    esp,0x10
c0016b85:	b0 00                	mov    al,0x0
c0016b87:	eb 17                	jmp    c0016ba0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016b89:	8d 76 00             	lea    esi,[esi+0x0]
c0016b8c:	a1 c0 3e 02 c0       	mov    eax,ds:0xc0023ec0
c0016b91:	40                   	inc    eax
c0016b92:	a3 c0 3e 02 c0       	mov    ds:0xc0023ec0,eax
c0016b97:	90                   	nop
c0016b98:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016b9f:	90                   	nop
c0016ba0:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016ba6:	c3                   	ret    
c0016ba7:	90                   	nop

c0016ba8 <FAT::allocateSwapfile(char const*, int)>:
c0016ba8:	55                   	push   ebp
c0016ba9:	57                   	push   edi
c0016baa:	56                   	push   esi
c0016bab:	53                   	push   ebx
c0016bac:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016bb2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016bbd:	83 ec 0c             	sub    esp,0xc
c0016bc0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016bc7:	e8 85 12 ff ff       	call   c0007e51 <malloc>
c0016bcc:	83 c4 10             	add    esp,0x10
c0016bcf:	89 c7                	mov    edi,eax
c0016bd1:	a1 30 3e 02 c0       	mov    eax,ds:0xc0023e30
c0016bd6:	83 ec 04             	sub    esp,0x4
c0016bd9:	50                   	push   eax
c0016bda:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016be1:	57                   	push   edi
c0016be2:	e8 6f 45 ff ff       	call   c000b156 <File::File(char const*, Process*)>
c0016be7:	83 c4 10             	add    esp,0x10
c0016bea:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016bf1:	83 ec 04             	sub    esp,0x4
c0016bf4:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016bf8:	50                   	push   eax
c0016bf9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016bfd:	50                   	push   eax
c0016bfe:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c05:	e8 b8 48 ff ff       	call   c000b4c2 <File::stat(unsigned long long*, bool*)>
c0016c0a:	83 c4 10             	add    esp,0x10
c0016c0d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016c14:	c1 e0 14             	shl    eax,0x14
c0016c17:	89 c7                	mov    edi,eax
c0016c19:	89 c5                	mov    ebp,eax
c0016c1b:	c1 fd 1f             	sar    ebp,0x1f
c0016c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c26:	89 f9                	mov    ecx,edi
c0016c28:	31 c1                	xor    ecx,eax
c0016c2a:	89 cb                	mov    ebx,ecx
c0016c2c:	89 e9                	mov    ecx,ebp
c0016c2e:	31 d1                	xor    ecx,edx
c0016c30:	89 ce                	mov    esi,ecx
c0016c32:	89 f0                	mov    eax,esi
c0016c34:	09 d8                	or     eax,ebx
c0016c36:	0f 84 9c 00 00 00    	je     c0016cd8 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016c3c:	83 ec 0c             	sub    esp,0xc
c0016c3f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c46:	e8 43 47 ff ff       	call   c000b38e <File::unlink()>
c0016c4b:	83 c4 10             	add    esp,0x10
c0016c4e:	83 ec 08             	sub    esp,0x8
c0016c51:	6a 12                	push   0x12
c0016c53:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c5a:	e8 b7 45 ff ff       	call   c000b216 <File::open(FileOpenMode)>
c0016c5f:	83 c4 10             	add    esp,0x10
c0016c62:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c69:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016c6f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016c76:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016c7d:	c1 e0 14             	shl    eax,0x14
c0016c80:	83 ec 04             	sub    esp,0x4
c0016c83:	6a 01                	push   0x1
c0016c85:	50                   	push   eax
c0016c86:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016c8d:	e8 c3 e4 fe ff       	call   c0005155 <f_expand>
c0016c92:	83 c4 10             	add    esp,0x10
c0016c95:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c9e:	83 c0 10             	add    eax,0x10
c0016ca1:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ca3:	83 ec 0c             	sub    esp,0xc
c0016ca6:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016caa:	52                   	push   edx
c0016cab:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016caf:	52                   	push   edx
c0016cb0:	6a 00                	push   0x0
c0016cb2:	68 00 04 00 00       	push   0x400
c0016cb7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016cbe:	ff d0                	call   eax
c0016cc0:	83 c4 20             	add    esp,0x20
c0016cc3:	83 ec 0c             	sub    esp,0xc
c0016cc6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ccd:	e8 a2 45 ff ff       	call   c000b274 <File::close()>
c0016cd2:	83 c4 10             	add    esp,0x10
c0016cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0016cd8:	83 ec 08             	sub    esp,0x8
c0016cdb:	6a 01                	push   0x1
c0016cdd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ce4:	e8 2d 45 ff ff       	call   c000b216 <File::open(FileOpenMode)>
c0016ce9:	83 c4 10             	add    esp,0x10
c0016cec:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016cf3:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cf5:	83 c0 0c             	add    eax,0xc
c0016cf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cfa:	83 ec 0c             	sub    esp,0xc
c0016cfd:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016d01:	52                   	push   edx
c0016d02:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016d06:	52                   	push   edx
c0016d07:	6a 00                	push   0x0
c0016d09:	6a 04                	push   0x4
c0016d0b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016d12:	ff d0                	call   eax
c0016d14:	83 c4 20             	add    esp,0x20
c0016d17:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016d1e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016d24:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016d2b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016d32:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016d35:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016d3c:	83 ec 0c             	sub    esp,0xc
c0016d3f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016d46:	e8 29 45 ff ff       	call   c000b274 <File::close()>
c0016d4b:	83 c4 10             	add    esp,0x10
c0016d4e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016d55:	ba 00 00 00 00       	mov    edx,0x0
c0016d5a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016d60:	5b                   	pop    ebx
c0016d61:	5e                   	pop    esi
c0016d62:	5f                   	pop    edi
c0016d63:	5d                   	pop    ebp
c0016d64:	c3                   	ret    
c0016d65:	90                   	nop
c0016d66:	66 90                	xchg   ax,ax

c0016d68 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016d68:	57                   	push   edi
c0016d69:	56                   	push   esi
c0016d6a:	53                   	push   ebx
c0016d6b:	81 ec 50 02 00 00    	sub    esp,0x250
c0016d71:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016d79:	74 0d                	je     c0016d88 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016d7b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016d83:	75 0f                	jne    c0016d94 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016d85:	8d 76 00             	lea    esi,[esi+0x0]
c0016d88:	b8 04 00 00 00       	mov    eax,0x4
c0016d8d:	e9 36 01 00 00       	jmp    c0016ec8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d92:	66 90                	xchg   ax,ax
c0016d94:	83 ec 08             	sub    esp,0x8
c0016d97:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016d9e:	50                   	push   eax
c0016d9f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016da6:	e8 08 d8 fe ff       	call   c00045b3 <f_readdir>
c0016dab:	83 c4 10             	add    esp,0x10
c0016dae:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016db5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016dbc:	83 ec 0c             	sub    esp,0xc
c0016dbf:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016dc6:	83 c0 16             	add    eax,0x16
c0016dc9:	50                   	push   eax
c0016dca:	e8 91 97 fe ff       	call   c0000560 <strlen>
c0016dcf:	83 c4 10             	add    esp,0x10
c0016dd2:	ba 00 00 00 00       	mov    edx,0x0
c0016dd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ddb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016ddf:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016de6:	25 ff 00 00 00       	and    eax,0xff
c0016deb:	83 e0 10             	and    eax,0x10
c0016dee:	74 08                	je     c0016df8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016df0:	b8 02 00 00 00       	mov    eax,0x2
c0016df5:	eb 09                	jmp    c0016e00 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016df7:	90                   	nop
c0016df8:	b8 01 00 00 00       	mov    eax,0x1
c0016dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0016e00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e04:	83 ec 08             	sub    esp,0x8
c0016e07:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016e0e:	83 c0 16             	add    eax,0x16
c0016e11:	50                   	push   eax
c0016e12:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016e16:	83 c0 10             	add    eax,0x10
c0016e19:	50                   	push   eax
c0016e1a:	e8 01 98 fe ff       	call   c0000620 <strcpy>
c0016e1f:	83 c4 10             	add    esp,0x10
c0016e22:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016e29:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016e30:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e34:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016e3b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016e42:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016e49:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016e50:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016e57:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016e5e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016e65:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016e6c:	89 c6                	mov    esi,eax
c0016e6e:	89 d7                	mov    edi,edx
c0016e70:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e72:	89 c8                	mov    eax,ecx
c0016e74:	89 fa                	mov    edx,edi
c0016e76:	89 f3                	mov    ebx,esi
c0016e78:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016e7f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016e86:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016e8d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016e94:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016e9a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016ea1:	84 c0                	test   al,al
c0016ea3:	75 07                	jne    c0016eac <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016ea5:	b8 07 00 00 00       	mov    eax,0x7
c0016eaa:	eb 1c                	jmp    c0016ec8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016eac:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016eb3:	85 c0                	test   eax,eax
c0016eb5:	75 09                	jne    c0016ec0 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016eb7:	b8 00 00 00 00       	mov    eax,0x0
c0016ebc:	eb 0a                	jmp    c0016ec8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016ebe:	66 90                	xchg   ax,ax
c0016ec0:	b8 01 00 00 00       	mov    eax,0x1
c0016ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ec8:	81 c4 50 02 00 00    	add    esp,0x250
c0016ece:	5b                   	pop    ebx
c0016ecf:	5e                   	pop    esi
c0016ed0:	5f                   	pop    edi
c0016ed1:	c3                   	ret    
c0016ed2:	66 90                	xchg   ax,ax

c0016ed4 <FAT::read(void*, unsigned long, void*, int*)>:
c0016ed4:	83 ec 1c             	sub    esp,0x1c
c0016ed7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016edc:	74 0a                	je     c0016ee8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016ede:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016ee3:	75 0b                	jne    c0016ef0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ee8:	b8 04 00 00 00       	mov    eax,0x4
c0016eed:	eb 41                	jmp    c0016f30 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016eef:	90                   	nop
c0016ef0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016ef4:	50                   	push   eax
c0016ef5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ef9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016efd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f01:	e8 02 cf fe ff       	call   c0003e08 <f_read>
c0016f06:	83 c4 10             	add    esp,0x10
c0016f09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f11:	89 c2                	mov    edx,eax
c0016f13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f17:	89 10                	mov    DWORD PTR [eax],edx
c0016f19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f1d:	85 c0                	test   eax,eax
c0016f1f:	75 07                	jne    c0016f28 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016f21:	b8 00 00 00 00       	mov    eax,0x0
c0016f26:	eb 08                	jmp    c0016f30 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016f28:	b8 01 00 00 00       	mov    eax,0x1
c0016f2d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f30:	83 c4 1c             	add    esp,0x1c
c0016f33:	c3                   	ret    

c0016f34 <FAT::write(void*, unsigned long, void*, int*)>:
c0016f34:	83 ec 1c             	sub    esp,0x1c
c0016f37:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f3c:	74 0a                	je     c0016f48 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016f3e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016f43:	75 0b                	jne    c0016f50 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016f45:	8d 76 00             	lea    esi,[esi+0x0]
c0016f48:	b8 04 00 00 00       	mov    eax,0x4
c0016f4d:	eb 41                	jmp    c0016f90 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f4f:	90                   	nop
c0016f50:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f54:	50                   	push   eax
c0016f55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f59:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016f5d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f61:	e8 a1 d0 fe ff       	call   c0004007 <f_write>
c0016f66:	83 c4 10             	add    esp,0x10
c0016f69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f71:	89 c2                	mov    edx,eax
c0016f73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f77:	89 10                	mov    DWORD PTR [eax],edx
c0016f79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f7d:	85 c0                	test   eax,eax
c0016f7f:	75 07                	jne    c0016f88 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016f81:	b8 00 00 00 00       	mov    eax,0x0
c0016f86:	eb 08                	jmp    c0016f90 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f88:	b8 01 00 00 00       	mov    eax,0x1
c0016f8d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f90:	83 c4 1c             	add    esp,0x1c
c0016f93:	c3                   	ret    

c0016f94 <FAT::close(void*)>:
c0016f94:	83 ec 1c             	sub    esp,0x1c
c0016f97:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f9c:	75 0a                	jne    c0016fa8 <FAT::close(void*)+0x14>
c0016f9e:	b8 04 00 00 00       	mov    eax,0x4
c0016fa3:	eb 3f                	jmp    c0016fe4 <FAT::close(void*)+0x50>
c0016fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0016fa8:	83 ec 0c             	sub    esp,0xc
c0016fab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016faf:	e8 3c d3 fe ff       	call   c00042f0 <f_close>
c0016fb4:	83 c4 10             	add    esp,0x10
c0016fb7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fbb:	83 ec 0c             	sub    esp,0xc
c0016fbe:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fc2:	e8 9a 0e ff ff       	call   c0007e61 <free>
c0016fc7:	83 c4 10             	add    esp,0x10
c0016fca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fce:	85 c0                	test   eax,eax
c0016fd0:	75 0a                	jne    c0016fdc <FAT::close(void*)+0x48>
c0016fd2:	b8 00 00 00 00       	mov    eax,0x0
c0016fd7:	eb 0b                	jmp    c0016fe4 <FAT::close(void*)+0x50>
c0016fd9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fdc:	b8 01 00 00 00       	mov    eax,0x1
c0016fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0016fe4:	83 c4 1c             	add    esp,0x1c
c0016fe7:	c3                   	ret    

c0016fe8 <FAT::closeDir(void*)>:
c0016fe8:	83 ec 1c             	sub    esp,0x1c
c0016feb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ff0:	75 0a                	jne    c0016ffc <FAT::closeDir(void*)+0x14>
c0016ff2:	b8 04 00 00 00       	mov    eax,0x4
c0016ff7:	eb 3f                	jmp    c0017038 <FAT::closeDir(void*)+0x50>
c0016ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0016ffc:	83 ec 0c             	sub    esp,0xc
c0016fff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017003:	e8 89 d5 fe ff       	call   c0004591 <f_closedir>
c0017008:	83 c4 10             	add    esp,0x10
c001700b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001700f:	83 ec 0c             	sub    esp,0xc
c0017012:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017016:	e8 46 0e ff ff       	call   c0007e61 <free>
c001701b:	83 c4 10             	add    esp,0x10
c001701e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017022:	85 c0                	test   eax,eax
c0017024:	75 0a                	jne    c0017030 <FAT::closeDir(void*)+0x48>
c0017026:	b8 00 00 00 00       	mov    eax,0x0
c001702b:	eb 0b                	jmp    c0017038 <FAT::closeDir(void*)+0x50>
c001702d:	8d 76 00             	lea    esi,[esi+0x0]
c0017030:	b8 01 00 00 00       	mov    eax,0x1
c0017035:	8d 76 00             	lea    esi,[esi+0x0]
c0017038:	83 c4 1c             	add    esp,0x1c
c001703b:	c3                   	ret    

c001703c <FAT::seek(void*, unsigned long long)>:
c001703c:	83 ec 2c             	sub    esp,0x2c
c001703f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017043:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017047:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001704b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001704f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0017054:	75 0a                	jne    c0017060 <FAT::seek(void*, unsigned long long)+0x24>
c0017056:	b8 04 00 00 00       	mov    eax,0x4
c001705b:	eb 33                	jmp    c0017090 <FAT::seek(void*, unsigned long long)+0x54>
c001705d:	8d 76 00             	lea    esi,[esi+0x0]
c0017060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017064:	83 ec 08             	sub    esp,0x8
c0017067:	50                   	push   eax
c0017068:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001706c:	e8 ae d2 fe ff       	call   c000431f <f_lseek>
c0017071:	83 c4 10             	add    esp,0x10
c0017074:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017078:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001707c:	85 c0                	test   eax,eax
c001707e:	75 08                	jne    c0017088 <FAT::seek(void*, unsigned long long)+0x4c>
c0017080:	b8 00 00 00 00       	mov    eax,0x0
c0017085:	eb 09                	jmp    c0017090 <FAT::seek(void*, unsigned long long)+0x54>
c0017087:	90                   	nop
c0017088:	b8 01 00 00 00       	mov    eax,0x1
c001708d:	8d 76 00             	lea    esi,[esi+0x0]
c0017090:	83 c4 2c             	add    esp,0x2c
c0017093:	c3                   	ret    

c0017094 <fatWrapperReadDisk>:
c0017094:	53                   	push   ebx
c0017095:	83 ec 18             	sub    esp,0x18
c0017098:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001709c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00170a0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170a4:	25 ff 00 00 00       	and    eax,0xff
c00170a9:	8b 0c 85 a0 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd160]
c00170b0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00170b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170b8:	ba 00 00 00 00       	mov    edx,0x0
c00170bd:	83 ec 0c             	sub    esp,0xc
c00170c0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170c4:	53                   	push   ebx
c00170c5:	52                   	push   edx
c00170c6:	50                   	push   eax
c00170c7:	51                   	push   ecx
c00170c8:	e8 fb 61 ff ff       	call   c000d2c8 <LogicalDisk::read(unsigned long long, int, void*)>
c00170cd:	83 c4 20             	add    esp,0x20
c00170d0:	83 c4 18             	add    esp,0x18
c00170d3:	5b                   	pop    ebx
c00170d4:	c3                   	ret    
c00170d5:	8d 76 00             	lea    esi,[esi+0x0]

c00170d8 <fatWrapperWriteDisk>:
c00170d8:	53                   	push   ebx
c00170d9:	83 ec 18             	sub    esp,0x18
c00170dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170e0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00170e4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170e8:	25 ff 00 00 00       	and    eax,0xff
c00170ed:	8b 0c 85 a0 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd160]
c00170f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00170f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170fc:	ba 00 00 00 00       	mov    edx,0x0
c0017101:	83 ec 0c             	sub    esp,0xc
c0017104:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017108:	53                   	push   ebx
c0017109:	52                   	push   edx
c001710a:	50                   	push   eax
c001710b:	51                   	push   ecx
c001710c:	e8 23 62 ff ff       	call   c000d334 <LogicalDisk::write(unsigned long long, int, void*)>
c0017111:	83 c4 20             	add    esp,0x20
c0017114:	83 c4 18             	add    esp,0x18
c0017117:	5b                   	pop    ebx
c0017118:	c3                   	ret    
c0017119:	8d 76 00             	lea    esi,[esi+0x0]

c001711c <fatWrapperIoctl>:
c001711c:	53                   	push   ebx
c001711d:	83 ec 28             	sub    esp,0x28
c0017120:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017124:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017128:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001712c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017130:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0017135:	75 35                	jne    c001716c <fatWrapperIoctl+0x50>
c0017137:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001713b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001713f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017143:	25 ff 00 00 00       	and    eax,0xff
c0017148:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c001714f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017155:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001715b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001715f:	66 89 02             	mov    WORD PTR [edx],ax
c0017162:	b8 00 00 00 00       	mov    eax,0x0
c0017167:	e9 c4 00 00 00       	jmp    c0017230 <fatWrapperIoctl+0x114>
c001716c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0017171:	75 75                	jne    c00171e8 <fatWrapperIoctl+0xcc>
c0017173:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017177:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001717b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001717f:	25 ff 00 00 00       	and    eax,0xff
c0017184:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c001718b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017191:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017197:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001719d:	89 c8                	mov    eax,ecx
c001719f:	89 da                	mov    edx,ebx
c00171a1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00171a5:	c1 e0 0a             	shl    eax,0xa
c00171a8:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00171ac:	81 e1 ff 00 00 00    	and    ecx,0xff
c00171b2:	8b 0c 8d a0 2e 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd160]
c00171b9:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00171bf:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00171c5:	89 cb                	mov    ebx,ecx
c00171c7:	c1 fb 1f             	sar    ebx,0x1f
c00171ca:	53                   	push   ebx
c00171cb:	51                   	push   ecx
c00171cc:	52                   	push   edx
c00171cd:	50                   	push   eax
c00171ce:	e8 dd 4f 00 00       	call   c001c1b0 <__udivdi3>
c00171d3:	83 c4 10             	add    esp,0x10
c00171d6:	89 c2                	mov    edx,eax
c00171d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171dc:	89 10                	mov    DWORD PTR [eax],edx
c00171de:	b8 00 00 00 00       	mov    eax,0x0
c00171e3:	eb 4b                	jmp    c0017230 <fatWrapperIoctl+0x114>
c00171e5:	8d 76 00             	lea    esi,[esi+0x0]
c00171e8:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00171ed:	75 09                	jne    c00171f8 <fatWrapperIoctl+0xdc>
c00171ef:	b8 00 00 00 00       	mov    eax,0x0
c00171f4:	eb 3a                	jmp    c0017230 <fatWrapperIoctl+0x114>
c00171f6:	66 90                	xchg   ax,ax
c00171f8:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00171fd:	75 19                	jne    c0017218 <fatWrapperIoctl+0xfc>
c00171ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017203:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017207:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001720b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0017211:	b8 00 00 00 00       	mov    eax,0x0
c0017216:	eb 18                	jmp    c0017230 <fatWrapperIoctl+0x114>
c0017218:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001721d:	75 09                	jne    c0017228 <fatWrapperIoctl+0x10c>
c001721f:	b8 00 00 00 00       	mov    eax,0x0
c0017224:	eb 0a                	jmp    c0017230 <fatWrapperIoctl+0x114>
c0017226:	66 90                	xchg   ax,ax
c0017228:	b8 04 00 00 00       	mov    eax,0x4
c001722d:	8d 76 00             	lea    esi,[esi+0x0]
c0017230:	83 c4 28             	add    esp,0x28
c0017233:	5b                   	pop    ebx
c0017234:	c3                   	ret    
c0017235:	90                   	nop
c0017236:	66 90                	xchg   ax,ax

c0017238 <FAT::FAT()>:
c0017238:	83 ec 1c             	sub    esp,0x1c
c001723b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001723f:	83 ec 0c             	sub    esp,0xc
c0017242:	50                   	push   eax
c0017243:	e8 ba 3c ff ff       	call   c000af02 <Filesystem::Filesystem()>
c0017248:	83 c4 10             	add    esp,0x10
c001724b:	ba 10 ef 01 c0       	mov    edx,0xc001ef10
c0017250:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017254:	89 10                	mov    DWORD PTR [eax],edx
c0017256:	c7 05 c0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ec0,0x0
c0017260:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017268:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001726d:	7f 15                	jg     c0017284 <FAT::FAT()+0x4c>
c001726f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017273:	c7 04 85 e0 3e 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc120],0xffffffff
c001727e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017282:	eb e4                	jmp    c0017268 <FAT::FAT()+0x30>
c0017284:	90                   	nop
c0017285:	83 c4 1c             	add    esp,0x1c
c0017288:	c3                   	ret    
c0017289:	90                   	nop
c001728a:	66 90                	xchg   ax,ax

c001728c <FAT::fixFilepath(char*)>:
c001728c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017290:	8a 00                	mov    al,BYTE PTR [eax]
c0017292:	3c 40                	cmp    al,0x40
c0017294:	7e 2e                	jle    c00172c4 <FAT::fixFilepath(char*)+0x38>
c0017296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001729a:	8a 00                	mov    al,BYTE PTR [eax]
c001729c:	83 e8 41             	sub    eax,0x41
c001729f:	88 c2                	mov    dl,al
c00172a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172a5:	88 10                	mov    BYTE PTR [eax],dl
c00172a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172ab:	8a 00                	mov    al,BYTE PTR [eax]
c00172ad:	0f be c0             	movsx  eax,al
c00172b0:	8b 04 85 e0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc120]
c00172b7:	83 c0 30             	add    eax,0x30
c00172ba:	88 c2                	mov    dl,al
c00172bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172c0:	88 10                	mov    BYTE PTR [eax],dl
c00172c2:	66 90                	xchg   ax,ax
c00172c4:	90                   	nop
c00172c5:	c3                   	ret    
c00172c6:	66 90                	xchg   ax,ax

c00172c8 <FAT::open(char const*, void**, FileOpenMode)>:
c00172c8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00172ce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00172d6:	74 0c                	je     c00172e4 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00172d8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00172e0:	75 0e                	jne    c00172f0 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00172e2:	66 90                	xchg   ax,ax
c00172e4:	b8 04 00 00 00       	mov    eax,0x4
c00172e9:	e9 0a 01 00 00       	jmp    c00173f8 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00172ee:	66 90                	xchg   ax,ax
c00172f0:	83 ec 08             	sub    esp,0x8
c00172f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172fe:	50                   	push   eax
c00172ff:	e8 1c 93 fe ff       	call   c0000620 <strcpy>
c0017304:	83 c4 10             	add    esp,0x10
c0017307:	83 ec 08             	sub    esp,0x8
c001730a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001730e:	50                   	push   eax
c001730f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017316:	e8 71 ff ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c001731b:	83 c4 10             	add    esp,0x10
c001731e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0017326:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001732d:	83 e0 01             	and    eax,0x1
c0017330:	74 0a                	je     c001733c <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0017332:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001733a:	66 90                	xchg   ax,ax
c001733c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017343:	83 e0 04             	and    eax,0x4
c0017346:	74 10                	je     c0017358 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0017348:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0017350:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017358:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001735f:	83 e0 02             	and    eax,0x2
c0017362:	74 08                	je     c001736c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0017364:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001736c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017373:	83 e0 08             	and    eax,0x8
c0017376:	74 08                	je     c0017380 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0017378:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0017380:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017387:	83 e0 10             	and    eax,0x10
c001738a:	74 08                	je     c0017394 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001738c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0017394:	83 ec 0c             	sub    esp,0xc
c0017397:	68 28 02 00 00       	push   0x228
c001739c:	e8 b0 0a ff ff       	call   c0007e51 <malloc>
c00173a1:	83 c4 10             	add    esp,0x10
c00173a4:	89 c2                	mov    edx,eax
c00173a6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173ad:	89 10                	mov    DWORD PTR [eax],edx
c00173af:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00173b6:	31 d2                	xor    edx,edx
c00173b8:	88 c2                	mov    dl,al
c00173ba:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00173c3:	83 ec 04             	sub    esp,0x4
c00173c6:	52                   	push   edx
c00173c7:	8d 54 24 10          	lea    edx,[esp+0x10]
c00173cb:	52                   	push   edx
c00173cc:	50                   	push   eax
c00173cd:	e8 6b c7 fe ff       	call   c0003b3d <f_open>
c00173d2:	83 c4 10             	add    esp,0x10
c00173d5:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00173dc:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00173e4:	74 0a                	je     c00173f0 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00173e6:	b8 01 00 00 00       	mov    eax,0x1
c00173eb:	eb 0b                	jmp    c00173f8 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00173ed:	8d 76 00             	lea    esi,[esi+0x0]
c00173f0:	b8 00 00 00 00       	mov    eax,0x0
c00173f5:	8d 76 00             	lea    esi,[esi+0x0]
c00173f8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00173fe:	c3                   	ret    
c00173ff:	90                   	nop

c0017400 <FAT::openDir(char const*, void**)>:
c0017400:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017406:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001740e:	74 0c                	je     c001741c <FAT::openDir(char const*, void**)+0x1c>
c0017410:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017418:	75 0e                	jne    c0017428 <FAT::openDir(char const*, void**)+0x28>
c001741a:	66 90                	xchg   ax,ax
c001741c:	b8 04 00 00 00       	mov    eax,0x4
c0017421:	e9 82 00 00 00       	jmp    c00174a8 <FAT::openDir(char const*, void**)+0xa8>
c0017426:	66 90                	xchg   ax,ax
c0017428:	83 ec 08             	sub    esp,0x8
c001742b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017432:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017436:	50                   	push   eax
c0017437:	e8 e4 91 fe ff       	call   c0000620 <strcpy>
c001743c:	83 c4 10             	add    esp,0x10
c001743f:	83 ec 08             	sub    esp,0x8
c0017442:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017446:	50                   	push   eax
c0017447:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001744e:	e8 39 fe ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c0017453:	83 c4 10             	add    esp,0x10
c0017456:	83 ec 0c             	sub    esp,0xc
c0017459:	6a 30                	push   0x30
c001745b:	e8 f1 09 ff ff       	call   c0007e51 <malloc>
c0017460:	83 c4 10             	add    esp,0x10
c0017463:	89 c2                	mov    edx,eax
c0017465:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001746c:	89 10                	mov    DWORD PTR [eax],edx
c001746e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017475:	8b 00                	mov    eax,DWORD PTR [eax]
c0017477:	83 ec 08             	sub    esp,0x8
c001747a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001747e:	52                   	push   edx
c001747f:	50                   	push   eax
c0017480:	e8 41 d0 fe ff       	call   c00044c6 <f_opendir>
c0017485:	83 c4 10             	add    esp,0x10
c0017488:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001748f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0017497:	74 07                	je     c00174a0 <FAT::openDir(char const*, void**)+0xa0>
c0017499:	b8 01 00 00 00       	mov    eax,0x1
c001749e:	eb 08                	jmp    c00174a8 <FAT::openDir(char const*, void**)+0xa8>
c00174a0:	b8 00 00 00 00       	mov    eax,0x0
c00174a5:	8d 76 00             	lea    esi,[esi+0x0]
c00174a8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00174ae:	c3                   	ret    
c00174af:	90                   	nop

c00174b0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00174b0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00174b6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00174be:	75 0c                	jne    c00174cc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00174c0:	b8 04 00 00 00       	mov    eax,0x4
c00174c5:	e9 d6 00 00 00       	jmp    c00175a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174ca:	66 90                	xchg   ax,ax
c00174cc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00174d4:	75 0a                	jne    c00174e0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00174d6:	b8 04 00 00 00       	mov    eax,0x4
c00174db:	e9 c0 00 00 00       	jmp    c00175a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174e0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00174e8:	75 0a                	jne    c00174f4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00174ea:	b8 04 00 00 00       	mov    eax,0x4
c00174ef:	e9 ac 00 00 00       	jmp    c00175a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174f4:	83 ec 08             	sub    esp,0x8
c00174f7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00174fe:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017505:	50                   	push   eax
c0017506:	e8 15 91 fe ff       	call   c0000620 <strcpy>
c001750b:	83 c4 10             	add    esp,0x10
c001750e:	83 ec 08             	sub    esp,0x8
c0017511:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017518:	50                   	push   eax
c0017519:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017520:	e8 67 fd ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c0017525:	83 c4 10             	add    esp,0x10
c0017528:	83 ec 08             	sub    esp,0x8
c001752b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001752f:	50                   	push   eax
c0017530:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017537:	50                   	push   eax
c0017538:	e8 08 d1 fe ff       	call   c0004645 <f_stat>
c001753d:	83 c4 10             	add    esp,0x10
c0017540:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017547:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001754e:	85 c0                	test   eax,eax
c0017550:	74 0a                	je     c001755c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0017552:	83 f8 04             	cmp    eax,0x4
c0017555:	74 39                	je     c0017590 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0017557:	eb 3f                	jmp    c0017598 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0017559:	8d 76 00             	lea    esi,[esi+0x0]
c001755c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017560:	25 ff 00 00 00       	and    eax,0xff
c0017565:	83 e0 10             	and    eax,0x10
c0017568:	0f 95 c2             	setne  dl
c001756b:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0017572:	88 10                	mov    BYTE PTR [eax],dl
c0017574:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017578:	ba 00 00 00 00       	mov    edx,0x0
c001757d:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0017584:	89 01                	mov    DWORD PTR [ecx],eax
c0017586:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017589:	b8 00 00 00 00       	mov    eax,0x0
c001758e:	eb 10                	jmp    c00175a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017590:	b8 02 00 00 00       	mov    eax,0x2
c0017595:	eb 09                	jmp    c00175a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017597:	90                   	nop
c0017598:	b8 01 00 00 00       	mov    eax,0x1
c001759d:	8d 76 00             	lea    esi,[esi+0x0]
c00175a0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00175a6:	c3                   	ret    
c00175a7:	90                   	nop

c00175a8 <FAT::unlink(char const*)>:
c00175a8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00175ae:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00175b6:	75 08                	jne    c00175c0 <FAT::unlink(char const*)+0x18>
c00175b8:	b8 04 00 00 00       	mov    eax,0x4
c00175bd:	eb 61                	jmp    c0017620 <FAT::unlink(char const*)+0x78>
c00175bf:	90                   	nop
c00175c0:	83 ec 08             	sub    esp,0x8
c00175c3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00175ca:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175ce:	50                   	push   eax
c00175cf:	e8 4c 90 fe ff       	call   c0000620 <strcpy>
c00175d4:	83 c4 10             	add    esp,0x10
c00175d7:	83 ec 08             	sub    esp,0x8
c00175da:	8d 44 24 14          	lea    eax,[esp+0x14]
c00175de:	50                   	push   eax
c00175df:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00175e6:	e8 a1 fc ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c00175eb:	83 c4 10             	add    esp,0x10
c00175ee:	83 ec 0c             	sub    esp,0xc
c00175f1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175f5:	50                   	push   eax
c00175f6:	e8 af d2 fe ff       	call   c00048aa <f_unlink>
c00175fb:	83 c4 10             	add    esp,0x10
c00175fe:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017605:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001760c:	85 c0                	test   eax,eax
c001760e:	75 08                	jne    c0017618 <FAT::unlink(char const*)+0x70>
c0017610:	b8 00 00 00 00       	mov    eax,0x0
c0017615:	eb 09                	jmp    c0017620 <FAT::unlink(char const*)+0x78>
c0017617:	90                   	nop
c0017618:	b8 01 00 00 00       	mov    eax,0x1
c001761d:	8d 76 00             	lea    esi,[esi+0x0]
c0017620:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017626:	c3                   	ret    
c0017627:	90                   	nop

c0017628 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017628:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001762e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0017635:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001763c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017640:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017644:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001764c:	75 0a                	jne    c0017658 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001764e:	b8 04 00 00 00       	mov    eax,0x4
c0017653:	e9 54 01 00 00       	jmp    c00177ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017658:	83 ec 08             	sub    esp,0x8
c001765b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017662:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017666:	50                   	push   eax
c0017667:	e8 b4 8f fe ff       	call   c0000620 <strcpy>
c001766c:	83 c4 10             	add    esp,0x10
c001766f:	83 ec 08             	sub    esp,0x8
c0017672:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017676:	50                   	push   eax
c0017677:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001767e:	e8 09 fc ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c0017683:	83 c4 10             	add    esp,0x10
c0017686:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001768e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0017696:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001769a:	25 ff 00 00 00       	and    eax,0xff
c001769f:	83 e0 01             	and    eax,0x1
c00176a2:	74 08                	je     c00176ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00176a4:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00176ac:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176b0:	25 ff 00 00 00       	and    eax,0xff
c00176b5:	83 e0 02             	and    eax,0x2
c00176b8:	74 0a                	je     c00176c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c00176ba:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00176c2:	66 90                	xchg   ax,ax
c00176c4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176c8:	25 ff 00 00 00       	and    eax,0xff
c00176cd:	83 e0 04             	and    eax,0x4
c00176d0:	74 0a                	je     c00176dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00176d2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00176da:	66 90                	xchg   ax,ax
c00176dc:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176e0:	25 ff 00 00 00       	and    eax,0xff
c00176e5:	83 e0 08             	and    eax,0x8
c00176e8:	74 0a                	je     c00176f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00176ea:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00176f2:	66 90                	xchg   ax,ax
c00176f4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00176f8:	25 ff 00 00 00       	and    eax,0xff
c00176fd:	83 e0 01             	and    eax,0x1
c0017700:	74 0a                	je     c001770c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0017702:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001770a:	66 90                	xchg   ax,ax
c001770c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017710:	25 ff 00 00 00       	and    eax,0xff
c0017715:	83 e0 02             	and    eax,0x2
c0017718:	74 0a                	je     c0017724 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001771a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0017722:	66 90                	xchg   ax,ax
c0017724:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017728:	25 ff 00 00 00       	and    eax,0xff
c001772d:	83 e0 04             	and    eax,0x4
c0017730:	74 0a                	je     c001773c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c0017732:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001773a:	66 90                	xchg   ax,ax
c001773c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017740:	25 ff 00 00 00       	and    eax,0xff
c0017745:	83 e0 08             	and    eax,0x8
c0017748:	74 0a                	je     c0017754 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c001774a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0017752:	66 90                	xchg   ax,ax
c0017754:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001775b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0017762:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017769:	31 d2                	xor    edx,edx
c001776b:	88 c2                	mov    dl,al
c001776d:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017774:	25 ff 00 00 00       	and    eax,0xff
c0017779:	83 ec 04             	sub    esp,0x4
c001777c:	52                   	push   edx
c001777d:	50                   	push   eax
c001777e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017782:	50                   	push   eax
c0017783:	e8 95 d5 fe ff       	call   c0004d1d <f_chmod>
c0017788:	83 c4 10             	add    esp,0x10
c001778b:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0017792:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017799:	85 c0                	test   eax,eax
c001779b:	75 07                	jne    c00177a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c001779d:	b8 00 00 00 00       	mov    eax,0x0
c00177a2:	eb 08                	jmp    c00177ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00177a4:	b8 01 00 00 00       	mov    eax,0x1
c00177a9:	8d 76 00             	lea    esi,[esi+0x0]
c00177ac:	81 c4 2c 01 00 00    	add    esp,0x12c
c00177b2:	c3                   	ret    
c00177b3:	90                   	nop

c00177b4 <FAT::rename(char const*, char const*)>:
c00177b4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00177ba:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00177c2:	74 0c                	je     c00177d0 <FAT::rename(char const*, char const*)+0x1c>
c00177c4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00177cc:	75 0e                	jne    c00177dc <FAT::rename(char const*, char const*)+0x28>
c00177ce:	66 90                	xchg   ax,ax
c00177d0:	b8 04 00 00 00       	mov    eax,0x4
c00177d5:	e9 9e 00 00 00       	jmp    c0017878 <FAT::rename(char const*, char const*)+0xc4>
c00177da:	66 90                	xchg   ax,ax
c00177dc:	83 ec 08             	sub    esp,0x8
c00177df:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00177e6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00177ed:	50                   	push   eax
c00177ee:	e8 2d 8e fe ff       	call   c0000620 <strcpy>
c00177f3:	83 c4 10             	add    esp,0x10
c00177f6:	83 ec 08             	sub    esp,0x8
c00177f9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017800:	50                   	push   eax
c0017801:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017808:	e8 7f fa ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c001780d:	83 c4 10             	add    esp,0x10
c0017810:	83 ec 08             	sub    esp,0x8
c0017813:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001781a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001781e:	50                   	push   eax
c001781f:	e8 fc 8d fe ff       	call   c0000620 <strcpy>
c0017824:	83 c4 10             	add    esp,0x10
c0017827:	83 ec 08             	sub    esp,0x8
c001782a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001782e:	50                   	push   eax
c001782f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017836:	e8 51 fa ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c001783b:	83 c4 10             	add    esp,0x10
c001783e:	83 ec 08             	sub    esp,0x8
c0017841:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017845:	50                   	push   eax
c0017846:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001784d:	50                   	push   eax
c001784e:	e8 14 d3 fe ff       	call   c0004b67 <f_rename>
c0017853:	83 c4 10             	add    esp,0x10
c0017856:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001785d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0017864:	85 c0                	test   eax,eax
c0017866:	75 08                	jne    c0017870 <FAT::rename(char const*, char const*)+0xbc>
c0017868:	b8 00 00 00 00       	mov    eax,0x0
c001786d:	eb 09                	jmp    c0017878 <FAT::rename(char const*, char const*)+0xc4>
c001786f:	90                   	nop
c0017870:	b8 01 00 00 00       	mov    eax,0x1
c0017875:	8d 76 00             	lea    esi,[esi+0x0]
c0017878:	81 c4 1c 02 00 00    	add    esp,0x21c
c001787e:	c3                   	ret    
c001787f:	90                   	nop

c0017880 <FAT::mkdir(char const*)>:
c0017880:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017886:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001788e:	75 08                	jne    c0017898 <FAT::mkdir(char const*)+0x18>
c0017890:	b8 04 00 00 00       	mov    eax,0x4
c0017895:	eb 61                	jmp    c00178f8 <FAT::mkdir(char const*)+0x78>
c0017897:	90                   	nop
c0017898:	83 ec 08             	sub    esp,0x8
c001789b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00178a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178a6:	50                   	push   eax
c00178a7:	e8 74 8d fe ff       	call   c0000620 <strcpy>
c00178ac:	83 c4 10             	add    esp,0x10
c00178af:	83 ec 08             	sub    esp,0x8
c00178b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00178b6:	50                   	push   eax
c00178b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00178be:	e8 c9 f9 ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c00178c3:	83 c4 10             	add    esp,0x10
c00178c6:	83 ec 0c             	sub    esp,0xc
c00178c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178cd:	50                   	push   eax
c00178ce:	e8 f9 d0 fe ff       	call   c00049cc <f_mkdir>
c00178d3:	83 c4 10             	add    esp,0x10
c00178d6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00178dd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00178e4:	85 c0                	test   eax,eax
c00178e6:	75 08                	jne    c00178f0 <FAT::mkdir(char const*)+0x70>
c00178e8:	b8 00 00 00 00       	mov    eax,0x0
c00178ed:	eb 09                	jmp    c00178f8 <FAT::mkdir(char const*)+0x78>
c00178ef:	90                   	nop
c00178f0:	b8 01 00 00 00       	mov    eax,0x1
c00178f5:	8d 76 00             	lea    esi,[esi+0x0]
c00178f8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00178fe:	c3                   	ret    
c00178ff:	90                   	nop

c0017900 <FAT::exists(char const*)>:
c0017900:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017906:	83 ec 08             	sub    esp,0x8
c0017909:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017910:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017914:	50                   	push   eax
c0017915:	e8 06 8d fe ff       	call   c0000620 <strcpy>
c001791a:	83 c4 10             	add    esp,0x10
c001791d:	83 ec 08             	sub    esp,0x8
c0017920:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017924:	50                   	push   eax
c0017925:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001792c:	e8 5b f9 ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c0017931:	83 c4 10             	add    esp,0x10
c0017934:	83 ec 08             	sub    esp,0x8
c0017937:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001793e:	50                   	push   eax
c001793f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017943:	50                   	push   eax
c0017944:	e8 fc cc fe ff       	call   c0004645 <f_stat>
c0017949:	83 c4 10             	add    esp,0x10
c001794c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017953:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001795a:	85 c0                	test   eax,eax
c001795c:	75 06                	jne    c0017964 <FAT::exists(char const*)+0x64>
c001795e:	b0 01                	mov    al,0x1
c0017960:	eb 06                	jmp    c0017968 <FAT::exists(char const*)+0x68>
c0017962:	66 90                	xchg   ax,ax
c0017964:	b0 00                	mov    al,0x0
c0017966:	66 90                	xchg   ax,ax
c0017968:	81 c4 2c 02 00 00    	add    esp,0x22c
c001796e:	c3                   	ret    
c001796f:	90                   	nop

c0017970 <isoReadDiscSectorHelper>:
c0017970:	83 ec 2c             	sub    esp,0x2c
c0017973:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017977:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001797b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017980:	83 e8 41             	sub    eax,0x41
c0017983:	8b 0c 85 a0 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd160]
c001798a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001798e:	ba 00 00 00 00       	mov    edx,0x0
c0017993:	83 ec 0c             	sub    esp,0xc
c0017996:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001799a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001799e:	52                   	push   edx
c001799f:	50                   	push   eax
c00179a0:	51                   	push   ecx
c00179a1:	e8 22 59 ff ff       	call   c000d2c8 <LogicalDisk::read(unsigned long long, int, void*)>
c00179a6:	83 c4 20             	add    esp,0x20
c00179a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179ad:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00179b2:	74 0c                	je     c00179c0 <isoReadDiscSectorHelper+0x50>
c00179b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179b8:	c1 e0 0b             	shl    eax,0xb
c00179bb:	eb 0b                	jmp    c00179c8 <isoReadDiscSectorHelper+0x58>
c00179bd:	8d 76 00             	lea    esi,[esi+0x0]
c00179c0:	b8 00 00 00 00       	mov    eax,0x0
c00179c5:	8d 76 00             	lea    esi,[esi+0x0]
c00179c8:	83 c4 2c             	add    esp,0x2c
c00179cb:	c3                   	ret    

c00179cc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00179cc:	b8 08 00 00 00       	mov    eax,0x8
c00179d1:	c3                   	ret    

c00179d2 <ISO9660::getName()>:
c00179d2:	b8 70 ef 01 c0       	mov    eax,0xc001ef70
c00179d7:	c3                   	ret    

c00179d8 <ISO9660::closeDir(void*)>:
c00179d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00179de:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00179e1:	90                   	nop

c00179e2 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00179e2:	b8 01 00 00 00       	mov    eax,0x1
c00179e7:	c3                   	ret    

c00179e8 <ISO9660::unlink(char const*)>:
c00179e8:	b8 01 00 00 00       	mov    eax,0x1
c00179ed:	c3                   	ret    

c00179ee <ISO9660::write(void*, unsigned long, void*, int*)>:
c00179ee:	b8 03 00 00 00       	mov    eax,0x3
c00179f3:	c3                   	ret    

c00179f4 <ISO9660::rename(char const*, char const*)>:
c00179f4:	b8 01 00 00 00       	mov    eax,0x1
c00179f9:	c3                   	ret    

c00179fa <ISO9660::mkdir(char const*)>:
c00179fa:	b8 01 00 00 00       	mov    eax,0x1
c00179ff:	c3                   	ret    

c0017a00 <ISO9660::~ISO9660()>:
c0017a00:	83 ec 0c             	sub    esp,0xc
c0017a03:	ba f0 ef 01 c0       	mov    edx,0xc001eff0
c0017a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a0c:	89 10                	mov    DWORD PTR [eax],edx
c0017a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a12:	83 ec 0c             	sub    esp,0xc
c0017a15:	50                   	push   eax
c0017a16:	e8 0b 35 ff ff       	call   c000af26 <Filesystem::~Filesystem()>
c0017a1b:	83 c4 10             	add    esp,0x10
c0017a1e:	90                   	nop
c0017a1f:	83 c4 0c             	add    esp,0xc
c0017a22:	c3                   	ret    
c0017a23:	90                   	nop

c0017a24 <ISO9660::~ISO9660()>:
c0017a24:	83 ec 0c             	sub    esp,0xc
c0017a27:	83 ec 0c             	sub    esp,0xc
c0017a2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a2e:	e8 cd ff ff ff       	call   c0017a00 <ISO9660::~ISO9660()>
c0017a33:	83 c4 10             	add    esp,0x10
c0017a36:	83 ec 08             	sub    esp,0x8
c0017a39:	6a 08                	push   0x8
c0017a3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a3f:	e8 a6 30 ff ff       	call   c000aaea <operator delete(void*, unsigned long)>
c0017a44:	83 c4 10             	add    esp,0x10
c0017a47:	83 c4 0c             	add    esp,0xc
c0017a4a:	c3                   	ret    
c0017a4b:	90                   	nop

c0017a4c <ISO9660::exists(char const*)>:
c0017a4c:	83 ec 18             	sub    esp,0x18
c0017a4f:	68 8b ef 01 c0       	push   0xc001ef8b
c0017a54:	e8 ad dd ff ff       	call   c0015806 <HalPanic(char const*)>
c0017a59:	31 c0                	xor    eax,eax
c0017a5b:	83 c4 1c             	add    esp,0x1c
c0017a5e:	c3                   	ret    
c0017a5f:	90                   	nop

c0017a60 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017a60:	56                   	push   esi
c0017a61:	53                   	push   ebx
c0017a62:	53                   	push   ebx
c0017a63:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017a67:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017a6b:	85 db                	test   ebx,ebx
c0017a6d:	74 72                	je     c0017ae1 <ISO9660::open(char const*, void**, FileOpenMode)+0x81>
c0017a6f:	85 f6                	test   esi,esi
c0017a71:	74 6e                	je     c0017ae1 <ISO9660::open(char const*, void**, FileOpenMode)+0x81>
c0017a73:	ba 03 00 00 00       	mov    edx,0x3
c0017a78:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017a7d:	75 67                	jne    c0017ae6 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017a7f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017a82:	3a 05 c0 3f 02 c0    	cmp    al,BYTE PTR ds:0xc0023fc0
c0017a88:	74 34                	je     c0017abe <ISO9660::open(char const*, void**, FileOpenMode)+0x5e>
c0017a8a:	83 ec 0c             	sub    esp,0xc
c0017a8d:	50                   	push   eax
c0017a8e:	e8 fa f1 fe ff       	call   c0006c8d <init_percd>
c0017a93:	83 c4 10             	add    esp,0x10
c0017a96:	ba 0b 00 00 00       	mov    edx,0xb
c0017a9b:	40                   	inc    eax
c0017a9c:	74 48                	je     c0017ae6 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017a9e:	80 3d c0 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fc0,0x0
c0017aa5:	74 10                	je     c0017ab7 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0017aa7:	83 ec 0c             	sub    esp,0xc
c0017aaa:	68 a9 ef 01 c0       	push   0xc001efa9
c0017aaf:	e8 52 dd ff ff       	call   c0015806 <HalPanic(char const*)>
c0017ab4:	83 c4 10             	add    esp,0x10
c0017ab7:	8a 03                	mov    al,BYTE PTR [ebx]
c0017ab9:	a2 c0 3f 02 c0       	mov    ds:0xc0023fc0,al
c0017abe:	83 c3 03             	add    ebx,0x3
c0017ac1:	51                   	push   ecx
c0017ac2:	51                   	push   ecx
c0017ac3:	6a 00                	push   0x0
c0017ac5:	53                   	push   ebx
c0017ac6:	e8 37 ea fe ff       	call   c0006502 <iso_open>
c0017acb:	83 c4 10             	add    esp,0x10
c0017ace:	ba 01 00 00 00       	mov    edx,0x1
c0017ad3:	83 f8 ff             	cmp    eax,0xffffffff
c0017ad6:	74 0e                	je     c0017ae6 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017ad8:	83 c0 64             	add    eax,0x64
c0017adb:	31 d2                	xor    edx,edx
c0017add:	89 06                	mov    DWORD PTR [esi],eax
c0017adf:	eb 05                	jmp    c0017ae6 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017ae1:	ba 04 00 00 00       	mov    edx,0x4
c0017ae6:	89 d0                	mov    eax,edx
c0017ae8:	5a                   	pop    edx
c0017ae9:	5b                   	pop    ebx
c0017aea:	5e                   	pop    esi
c0017aeb:	c3                   	ret    

c0017aec <ISO9660::openDir(char const*, void**)>:
c0017aec:	56                   	push   esi
c0017aed:	53                   	push   ebx
c0017aee:	53                   	push   ebx
c0017aef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017af3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017af7:	85 db                	test   ebx,ebx
c0017af9:	74 66                	je     c0017b61 <ISO9660::openDir(char const*, void**)+0x75>
c0017afb:	85 f6                	test   esi,esi
c0017afd:	74 62                	je     c0017b61 <ISO9660::openDir(char const*, void**)+0x75>
c0017aff:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017b02:	3a 05 c0 3f 02 c0    	cmp    al,BYTE PTR ds:0xc0023fc0
c0017b08:	74 34                	je     c0017b3e <ISO9660::openDir(char const*, void**)+0x52>
c0017b0a:	83 ec 0c             	sub    esp,0xc
c0017b0d:	50                   	push   eax
c0017b0e:	e8 7a f1 fe ff       	call   c0006c8d <init_percd>
c0017b13:	83 c4 10             	add    esp,0x10
c0017b16:	ba 0b 00 00 00       	mov    edx,0xb
c0017b1b:	40                   	inc    eax
c0017b1c:	74 48                	je     c0017b66 <ISO9660::openDir(char const*, void**)+0x7a>
c0017b1e:	80 3d c0 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fc0,0x0
c0017b25:	74 10                	je     c0017b37 <ISO9660::openDir(char const*, void**)+0x4b>
c0017b27:	83 ec 0c             	sub    esp,0xc
c0017b2a:	68 a9 ef 01 c0       	push   0xc001efa9
c0017b2f:	e8 d2 dc ff ff       	call   c0015806 <HalPanic(char const*)>
c0017b34:	83 c4 10             	add    esp,0x10
c0017b37:	8a 03                	mov    al,BYTE PTR [ebx]
c0017b39:	a2 c0 3f 02 c0       	mov    ds:0xc0023fc0,al
c0017b3e:	83 c3 03             	add    ebx,0x3
c0017b41:	51                   	push   ecx
c0017b42:	51                   	push   ecx
c0017b43:	6a 01                	push   0x1
c0017b45:	53                   	push   ebx
c0017b46:	e8 b7 e9 fe ff       	call   c0006502 <iso_open>
c0017b4b:	83 c4 10             	add    esp,0x10
c0017b4e:	ba 01 00 00 00       	mov    edx,0x1
c0017b53:	83 f8 ff             	cmp    eax,0xffffffff
c0017b56:	74 0e                	je     c0017b66 <ISO9660::openDir(char const*, void**)+0x7a>
c0017b58:	83 c0 64             	add    eax,0x64
c0017b5b:	31 d2                	xor    edx,edx
c0017b5d:	89 06                	mov    DWORD PTR [esi],eax
c0017b5f:	eb 05                	jmp    c0017b66 <ISO9660::openDir(char const*, void**)+0x7a>
c0017b61:	ba 04 00 00 00       	mov    edx,0x4
c0017b66:	89 d0                	mov    eax,edx
c0017b68:	5a                   	pop    edx
c0017b69:	5b                   	pop    ebx
c0017b6a:	5e                   	pop    esi
c0017b6b:	c3                   	ret    

c0017b6c <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017b6c:	53                   	push   ebx
c0017b6d:	83 ec 08             	sub    esp,0x8
c0017b70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b74:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017b78:	85 c0                	test   eax,eax
c0017b7a:	74 25                	je     c0017ba1 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017b7c:	85 db                	test   ebx,ebx
c0017b7e:	74 21                	je     c0017ba1 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017b80:	83 e8 64             	sub    eax,0x64
c0017b83:	52                   	push   edx
c0017b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b88:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b8c:	50                   	push   eax
c0017b8d:	e8 6b ea fe ff       	call   c00065fd <iso_read>
c0017b92:	83 c4 10             	add    esp,0x10
c0017b95:	89 03                	mov    DWORD PTR [ebx],eax
c0017b97:	09 d0                	or     eax,edx
c0017b99:	0f 94 c0             	sete   al
c0017b9c:	0f b6 c0             	movzx  eax,al
c0017b9f:	eb 05                	jmp    c0017ba6 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017ba1:	b8 04 00 00 00       	mov    eax,0x4
c0017ba6:	83 c4 08             	add    esp,0x8
c0017ba9:	5b                   	pop    ebx
c0017baa:	c3                   	ret    
c0017bab:	90                   	nop

c0017bac <ISO9660::seek(void*, unsigned long long)>:
c0017bac:	57                   	push   edi
c0017bad:	56                   	push   esi
c0017bae:	b8 04 00 00 00       	mov    eax,0x4
c0017bb3:	51                   	push   ecx
c0017bb4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017bb8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017bbc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017bc0:	85 d2                	test   edx,edx
c0017bc2:	74 1c                	je     c0017be0 <ISO9660::seek(void*, unsigned long long)+0x34>
c0017bc4:	6a 00                	push   0x0
c0017bc6:	83 ea 64             	sub    edx,0x64
c0017bc9:	57                   	push   edi
c0017bca:	56                   	push   esi
c0017bcb:	52                   	push   edx
c0017bcc:	e8 2a ec fe ff       	call   c00067fb <iso_seek>
c0017bd1:	83 c4 10             	add    esp,0x10
c0017bd4:	31 f0                	xor    eax,esi
c0017bd6:	31 fa                	xor    edx,edi
c0017bd8:	09 d0                	or     eax,edx
c0017bda:	0f 95 c0             	setne  al
c0017bdd:	0f b6 c0             	movzx  eax,al
c0017be0:	5a                   	pop    edx
c0017be1:	5e                   	pop    esi
c0017be2:	5f                   	pop    edi
c0017be3:	c3                   	ret    

c0017be4 <ISO9660::tell(void*, unsigned long long*)>:
c0017be4:	53                   	push   ebx
c0017be5:	83 ec 08             	sub    esp,0x8
c0017be8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017bf0:	85 c0                	test   eax,eax
c0017bf2:	74 1c                	je     c0017c10 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017bf4:	85 db                	test   ebx,ebx
c0017bf6:	74 18                	je     c0017c10 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017bf8:	83 ec 0c             	sub    esp,0xc
c0017bfb:	83 e8 64             	sub    eax,0x64
c0017bfe:	50                   	push   eax
c0017bff:	e8 d5 ec fe ff       	call   c00068d9 <iso_tell>
c0017c04:	83 c4 10             	add    esp,0x10
c0017c07:	89 03                	mov    DWORD PTR [ebx],eax
c0017c09:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017c0c:	31 c0                	xor    eax,eax
c0017c0e:	eb 05                	jmp    c0017c15 <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017c10:	b8 04 00 00 00       	mov    eax,0x4
c0017c15:	83 c4 08             	add    esp,0x8
c0017c18:	5b                   	pop    ebx
c0017c19:	c3                   	ret    

c0017c1a <ISO9660::stat(void*, unsigned long long*)>:
c0017c1a:	53                   	push   ebx
c0017c1b:	83 ec 08             	sub    esp,0x8
c0017c1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c22:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c26:	85 c0                	test   eax,eax
c0017c28:	74 20                	je     c0017c4a <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c2a:	85 db                	test   ebx,ebx
c0017c2c:	74 1c                	je     c0017c4a <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c2e:	83 ec 0c             	sub    esp,0xc
c0017c31:	83 e8 64             	sub    eax,0x64
c0017c34:	50                   	push   eax
c0017c35:	e8 fc ec fe ff       	call   c0006936 <iso_total>
c0017c3a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017c41:	89 03                	mov    DWORD PTR [ebx],eax
c0017c43:	83 c4 10             	add    esp,0x10
c0017c46:	31 c0                	xor    eax,eax
c0017c48:	eb 05                	jmp    c0017c4f <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017c4a:	b8 04 00 00 00       	mov    eax,0x4
c0017c4f:	83 c4 08             	add    esp,0x8
c0017c52:	5b                   	pop    ebx
c0017c53:	c3                   	ret    

c0017c54 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017c54:	55                   	push   ebp
c0017c55:	57                   	push   edi
c0017c56:	56                   	push   esi
c0017c57:	53                   	push   ebx
c0017c58:	83 ec 0c             	sub    esp,0xc
c0017c5b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017c5f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017c63:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017c67:	85 ff                	test   edi,edi
c0017c69:	0f 94 c2             	sete   dl
c0017c6c:	85 f6                	test   esi,esi
c0017c6e:	0f 94 c0             	sete   al
c0017c71:	08 c2                	or     dl,al
c0017c73:	0f 85 b7 00 00 00    	jne    c0017d30 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xdc>
c0017c79:	85 db                	test   ebx,ebx
c0017c7b:	0f 84 af 00 00 00    	je     c0017d30 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xdc>
c0017c81:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017c84:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017c8a:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017c91:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017c94:	3a 05 c0 3f 02 c0    	cmp    al,BYTE PTR ds:0xc0023fc0
c0017c9a:	74 38                	je     c0017cd4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x80>
c0017c9c:	83 ec 0c             	sub    esp,0xc
c0017c9f:	50                   	push   eax
c0017ca0:	e8 e8 ef fe ff       	call   c0006c8d <init_percd>
c0017ca5:	83 c4 10             	add    esp,0x10
c0017ca8:	ba 0b 00 00 00       	mov    edx,0xb
c0017cad:	40                   	inc    eax
c0017cae:	0f 84 81 00 00 00    	je     c0017d35 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe1>
c0017cb4:	80 3d c0 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fc0,0x0
c0017cbb:	74 10                	je     c0017ccd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x79>
c0017cbd:	83 ec 0c             	sub    esp,0xc
c0017cc0:	68 a9 ef 01 c0       	push   0xc001efa9
c0017cc5:	e8 3c db ff ff       	call   c0015806 <HalPanic(char const*)>
c0017cca:	83 c4 10             	add    esp,0x10
c0017ccd:	8a 03                	mov    al,BYTE PTR [ebx]
c0017ccf:	a2 c0 3f 02 c0       	mov    ds:0xc0023fc0,al
c0017cd4:	83 c3 03             	add    ebx,0x3
c0017cd7:	55                   	push   ebp
c0017cd8:	55                   	push   ebp
c0017cd9:	6a 00                	push   0x0
c0017cdb:	53                   	push   ebx
c0017cdc:	e8 21 e8 fe ff       	call   c0006502 <iso_open>
c0017ce1:	83 c4 10             	add    esp,0x10
c0017ce4:	89 c5                	mov    ebp,eax
c0017ce6:	83 f8 ff             	cmp    eax,0xffffffff
c0017ce9:	75 0f                	jne    c0017cfa <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa6>
c0017ceb:	56                   	push   esi
c0017cec:	56                   	push   esi
c0017ced:	6a 01                	push   0x1
c0017cef:	53                   	push   ebx
c0017cf0:	e8 0d e8 fe ff       	call   c0006502 <iso_open>
c0017cf5:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017cf8:	eb 2f                	jmp    c0017d29 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd5>
c0017cfa:	83 ec 0c             	sub    esp,0xc
c0017cfd:	50                   	push   eax
c0017cfe:	e8 33 ec fe ff       	call   c0006936 <iso_total>
c0017d03:	5a                   	pop    edx
c0017d04:	59                   	pop    ecx
c0017d05:	50                   	push   eax
c0017d06:	68 b9 ef 01 c0       	push   0xc001efb9
c0017d0b:	e8 d0 2e ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0017d10:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d13:	e8 1e ec fe ff       	call   c0006936 <iso_total>
c0017d18:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017d1f:	89 06                	mov    DWORD PTR [esi],eax
c0017d21:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d24:	e8 b9 e8 fe ff       	call   c00065e2 <iso_close>
c0017d29:	83 c4 10             	add    esp,0x10
c0017d2c:	31 d2                	xor    edx,edx
c0017d2e:	eb 05                	jmp    c0017d35 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe1>
c0017d30:	ba 04 00 00 00       	mov    edx,0x4
c0017d35:	83 c4 0c             	add    esp,0xc
c0017d38:	89 d0                	mov    eax,edx
c0017d3a:	5b                   	pop    ebx
c0017d3b:	5e                   	pop    esi
c0017d3c:	5f                   	pop    edi
c0017d3d:	5d                   	pop    ebp
c0017d3e:	c3                   	ret    
c0017d3f:	90                   	nop

c0017d40 <ISO9660::close(void*)>:
c0017d40:	83 ec 0c             	sub    esp,0xc
c0017d43:	b8 04 00 00 00       	mov    eax,0x4
c0017d48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d4c:	85 d2                	test   edx,edx
c0017d4e:	74 11                	je     c0017d61 <ISO9660::close(void*)+0x21>
c0017d50:	83 ec 0c             	sub    esp,0xc
c0017d53:	83 ea 64             	sub    edx,0x64
c0017d56:	52                   	push   edx
c0017d57:	e8 86 e8 fe ff       	call   c00065e2 <iso_close>
c0017d5c:	83 c4 10             	add    esp,0x10
c0017d5f:	31 c0                	xor    eax,eax
c0017d61:	83 c4 0c             	add    esp,0xc
c0017d64:	c3                   	ret    
c0017d65:	90                   	nop

c0017d66 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017d66:	57                   	push   edi
c0017d67:	56                   	push   esi
c0017d68:	53                   	push   ebx
c0017d69:	81 ec 10 01 00 00    	sub    esp,0x110
c0017d6f:	8b 84 24 24 01 00 00 	mov    eax,DWORD PTR [esp+0x124]
c0017d76:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0017d7d:	85 c0                	test   eax,eax
c0017d7f:	0f 84 8a 00 00 00    	je     c0017e0f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xa9>
c0017d85:	85 db                	test   ebx,ebx
c0017d87:	0f 84 82 00 00 00    	je     c0017e0f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xa9>
c0017d8d:	83 ec 0c             	sub    esp,0xc
c0017d90:	83 e8 64             	sub    eax,0x64
c0017d93:	50                   	push   eax
c0017d94:	e8 1a ec fe ff       	call   c00069b3 <iso_readdir>
c0017d99:	83 c4 10             	add    esp,0x10
c0017d9c:	89 c6                	mov    esi,eax
c0017d9e:	b8 01 00 00 00       	mov    eax,0x1
c0017da3:	85 f6                	test   esi,esi
c0017da5:	74 6d                	je     c0017e14 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xae>
c0017da7:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017dad:	8d 7e 08             	lea    edi,[esi+0x8]
c0017db0:	83 ec 0c             	sub    esp,0xc
c0017db3:	57                   	push   edi
c0017db4:	e8 a7 87 fe ff       	call   c0000560 <strlen>
c0017db9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017dc1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017dc5:	83 c4 10             	add    esp,0x10
c0017dc8:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017dcc:	75 0a                	jne    c0017dd8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x72>
c0017dce:	b8 02 00 00 00       	mov    eax,0x2
c0017dd3:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017dd6:	74 05                	je     c0017ddd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x77>
c0017dd8:	b8 01 00 00 00       	mov    eax,0x1
c0017ddd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017de1:	50                   	push   eax
c0017de2:	50                   	push   eax
c0017de3:	57                   	push   edi
c0017de4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017de8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017dec:	50                   	push   eax
c0017ded:	e8 2e 88 fe ff       	call   c0000620 <strcpy>
c0017df2:	8b 8c 24 38 01 00 00 	mov    ecx,DWORD PTR [esp+0x138]
c0017df9:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017e00:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e02:	31 c0                	xor    eax,eax
c0017e04:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017e0a:	83 c4 10             	add    esp,0x10
c0017e0d:	eb 05                	jmp    c0017e14 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xae>
c0017e0f:	b8 04 00 00 00       	mov    eax,0x4
c0017e14:	81 c4 10 01 00 00    	add    esp,0x110
c0017e1a:	5b                   	pop    ebx
c0017e1b:	5e                   	pop    esi
c0017e1c:	5f                   	pop    edi
c0017e1d:	c3                   	ret    

c0017e1e <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017e1e:	57                   	push   edi
c0017e1f:	56                   	push   esi
c0017e20:	53                   	push   ebx
c0017e21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e25:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017e29:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017e2d:	39 35 c4 3f 02 c0    	cmp    DWORD PTR ds:0xc0023fc4,esi
c0017e33:	75 08                	jne    c0017e3d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017e35:	38 1d 14 f9 01 c0    	cmp    BYTE PTR ds:0xc001f914,bl
c0017e3b:	74 59                	je     c0017e96 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017e3d:	83 ec 0c             	sub    esp,0xc
c0017e40:	31 d2                	xor    edx,edx
c0017e42:	68 e0 3f 02 c0       	push   0xc0023fe0
c0017e47:	0f be c3             	movsx  eax,bl
c0017e4a:	6a 01                	push   0x1
c0017e4c:	52                   	push   edx
c0017e4d:	56                   	push   esi
c0017e4e:	ff 34 85 9c 2d 02 c0 	push   DWORD PTR [eax*4-0x3ffdd264]
c0017e55:	e8 6e 54 ff ff       	call   c000d2c8 <LogicalDisk::read(unsigned long long, int, void*)>
c0017e5a:	83 c4 20             	add    esp,0x20
c0017e5d:	85 c0                	test   eax,eax
c0017e5f:	75 0e                	jne    c0017e6f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017e61:	89 35 c4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fc4,esi
c0017e67:	88 1d 14 f9 01 c0    	mov    BYTE PTR ds:0xc001f914,bl
c0017e6d:	eb 27                	jmp    c0017e96 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017e6f:	83 ec 0c             	sub    esp,0xc
c0017e72:	68 cb ef 01 c0       	push   0xc001efcb
c0017e77:	e8 64 2d ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0017e7c:	83 c4 0c             	add    esp,0xc
c0017e7f:	68 00 08 00 00       	push   0x800
c0017e84:	6a 00                	push   0x0
c0017e86:	57                   	push   edi
c0017e87:	e8 64 86 fe ff       	call   c00004f0 <memset>
c0017e8c:	83 c4 10             	add    esp,0x10
c0017e8f:	b8 01 00 00 00       	mov    eax,0x1
c0017e94:	eb 0e                	jmp    c0017ea4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x86>
c0017e96:	be e0 3f 02 c0       	mov    esi,0xc0023fe0
c0017e9b:	b9 00 08 00 00       	mov    ecx,0x800
c0017ea0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017ea2:	31 c0                	xor    eax,eax
c0017ea4:	5b                   	pop    ebx
c0017ea5:	5e                   	pop    esi
c0017ea6:	5f                   	pop    edi
c0017ea7:	c3                   	ret    

c0017ea8 <ISO9660::tryMount(LogicalDisk*, int)>:
c0017ea8:	53                   	push   ebx
c0017ea9:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017eaf:	c7 05 c4 3f 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0023fc4,0xdeadbeef
c0017eb9:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017ec0:	8d 58 41             	lea    ebx,[eax+0x41]
c0017ec3:	0f be db             	movsx  ebx,bl
c0017ec6:	53                   	push   ebx
c0017ec7:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017ecb:	50                   	push   eax
c0017ecc:	6a 10                	push   0x10
c0017ece:	e8 4b ff ff ff       	call   c0017e1e <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017ed3:	83 c4 10             	add    esp,0x10
c0017ed6:	31 d2                	xor    edx,edx
c0017ed8:	85 c0                	test   eax,eax
c0017eda:	75 33                	jne    c0017f0f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017edc:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017ee1:	75 2c                	jne    c0017f0f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ee3:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017ee8:	75 25                	jne    c0017f0f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017eea:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017eef:	75 1e                	jne    c0017f0f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ef1:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017ef6:	75 17                	jne    c0017f0f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ef8:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017efd:	75 10                	jne    c0017f0f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017eff:	83 ec 0c             	sub    esp,0xc
c0017f02:	53                   	push   ebx
c0017f03:	e8 85 ed fe ff       	call   c0006c8d <init_percd>
c0017f08:	83 c4 10             	add    esp,0x10
c0017f0b:	40                   	inc    eax
c0017f0c:	0f 95 c2             	setne  dl
c0017f0f:	88 d0                	mov    al,dl
c0017f11:	81 c4 08 08 00 00    	add    esp,0x808
c0017f17:	5b                   	pop    ebx
c0017f18:	c3                   	ret    
c0017f19:	90                   	nop

c0017f1a <ISO9660::ISO9660()>:
c0017f1a:	83 ec 0c             	sub    esp,0xc
c0017f1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f21:	83 ec 0c             	sub    esp,0xc
c0017f24:	50                   	push   eax
c0017f25:	e8 d8 2f ff ff       	call   c000af02 <Filesystem::Filesystem()>
c0017f2a:	83 c4 10             	add    esp,0x10
c0017f2d:	ba f0 ef 01 c0       	mov    edx,0xc001eff0
c0017f32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f36:	89 10                	mov    DWORD PTR [eax],edx
c0017f38:	e8 60 ee fe ff       	call   c0006d9d <fs_iso9660_init>
c0017f3d:	90                   	nop
c0017f3e:	83 c4 0c             	add    esp,0xc
c0017f41:	c3                   	ret    

c0017f42 <SoundCard::beginPlayback()>:
c0017f42:	c7 44 24 04 50 f0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f050
c0017f4a:	e9 e0 87 ff ff       	jmp    c001072f <Krnl::panic(char const*)>
c0017f4f:	90                   	nop

c0017f50 <SoundCard::stopPlayback()>:
c0017f50:	c7 44 24 04 50 f0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f050
c0017f58:	e9 d2 87 ff ff       	jmp    c001072f <Krnl::panic(char const*)>
c0017f5d:	90                   	nop

c0017f5e <SoundCard::SoundCard(char const*)>:
c0017f5e:	83 ec 1c             	sub    esp,0x1c
c0017f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f65:	83 ec 08             	sub    esp,0x8
c0017f68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f6c:	50                   	push   eax
c0017f6d:	e8 46 42 ff ff       	call   c000c1b8 <Device::Device(char const*)>
c0017f72:	83 c4 10             	add    esp,0x10
c0017f75:	ba 9c f0 01 c0       	mov    edx,0xc001f09c
c0017f7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f7e:	89 10                	mov    DWORD PTR [eax],edx
c0017f80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f84:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017f8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f8f:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017f99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f9d:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017fa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fab:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017fb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fb9:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017fc3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017fcb:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017fd0:	7f 19                	jg     c0017feb <SoundCard::SoundCard(char const*)+0x8d>
c0017fd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fd6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017fda:	83 c2 54             	add    edx,0x54
c0017fdd:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017fe5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017fe9:	eb e0                	jmp    c0017fcb <SoundCard::SoundCard(char const*)+0x6d>
c0017feb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fef:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017ff6:	90                   	nop
c0017ff7:	83 c4 1c             	add    esp,0x1c
c0017ffa:	c3                   	ret    
c0017ffb:	90                   	nop

c0017ffc <SoundCard::~SoundCard()>:
c0017ffc:	83 ec 0c             	sub    esp,0xc
c0017fff:	ba 9c f0 01 c0       	mov    edx,0xc001f09c
c0018004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018008:	89 10                	mov    DWORD PTR [eax],edx
c001800a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001800e:	83 ec 0c             	sub    esp,0xc
c0018011:	50                   	push   eax
c0018012:	e8 0b 3f ff ff       	call   c000bf22 <Device::~Device()>
c0018017:	83 c4 10             	add    esp,0x10
c001801a:	90                   	nop
c001801b:	83 c4 0c             	add    esp,0xc
c001801e:	c3                   	ret    
c001801f:	90                   	nop

c0018020 <SoundCard::~SoundCard()>:
c0018020:	83 ec 0c             	sub    esp,0xc
c0018023:	83 ec 0c             	sub    esp,0xc
c0018026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001802a:	e8 cd ff ff ff       	call   c0017ffc <SoundCard::~SoundCard()>
c001802f:	83 c4 10             	add    esp,0x10
c0018032:	83 ec 08             	sub    esp,0x8
c0018035:	68 e8 01 00 00       	push   0x1e8
c001803a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001803e:	e8 a7 2a ff ff       	call   c000aaea <operator delete(void*, unsigned long)>
c0018043:	83 c4 10             	add    esp,0x10
c0018046:	83 c4 0c             	add    esp,0xc
c0018049:	c3                   	ret    

c001804a <SoundCard::configureRates(int, int, int)>:
c001804a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001804e:	31 c0                	xor    eax,eax
c0018050:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0018057:	75 20                	jne    c0018079 <SoundCard::configureRates(int, int, int)+0x2f>
c0018059:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001805d:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0018063:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018067:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001806d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018071:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0018077:	b0 01                	mov    al,0x1
c0018079:	c3                   	ret    

c001807a <SoundCard::getSamples16(int, short*)>:
c001807a:	55                   	push   ebp
c001807b:	57                   	push   edi
c001807c:	31 ff                	xor    edi,edi
c001807e:	56                   	push   esi
c001807f:	53                   	push   ebx
c0018080:	31 db                	xor    ebx,ebx
c0018082:	83 ec 10             	sub    esp,0x10
c0018085:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0018089:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001808d:	8d 04 36             	lea    eax,[esi+esi*1]
c0018090:	50                   	push   eax
c0018091:	6a 00                	push   0x0
c0018093:	55                   	push   ebp
c0018094:	e8 57 84 fe ff       	call   c00004f0 <memset>
c0018099:	83 c4 10             	add    esp,0x10
c001809c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180a0:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c00180a7:	85 c0                	test   eax,eax
c00180a9:	74 1b                	je     c00180c6 <SoundCard::getSamples16(int, short*)+0x4c>
c00180ab:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00180af:	75 15                	jne    c00180c6 <SoundCard::getSamples16(int, short*)+0x4c>
c00180b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00180b5:	55                   	push   ebp
c00180b6:	56                   	push   esi
c00180b7:	50                   	push   eax
c00180b8:	e8 ef 02 00 00       	call   c00183ac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c00180bd:	83 c4 10             	add    esp,0x10
c00180c0:	39 c7                	cmp    edi,eax
c00180c2:	7d 02                	jge    c00180c6 <SoundCard::getSamples16(int, short*)+0x4c>
c00180c4:	89 c7                	mov    edi,eax
c00180c6:	43                   	inc    ebx
c00180c7:	83 fb 20             	cmp    ebx,0x20
c00180ca:	75 d0                	jne    c001809c <SoundCard::getSamples16(int, short*)+0x22>
c00180cc:	83 c4 0c             	add    esp,0xc
c00180cf:	89 f8                	mov    eax,edi
c00180d1:	5b                   	pop    ebx
c00180d2:	5e                   	pop    esi
c00180d3:	5f                   	pop    edi
c00180d4:	5d                   	pop    ebp
c00180d5:	c3                   	ret    

c00180d6 <SoundCard::getSamples32(int, int*)>:
c00180d6:	55                   	push   ebp
c00180d7:	57                   	push   edi
c00180d8:	31 ff                	xor    edi,edi
c00180da:	56                   	push   esi
c00180db:	31 f6                	xor    esi,esi
c00180dd:	53                   	push   ebx
c00180de:	83 ec 10             	sub    esp,0x10
c00180e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180e5:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00180e9:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00180ed:	c1 e0 02             	shl    eax,0x2
c00180f0:	50                   	push   eax
c00180f1:	6a 00                	push   0x0
c00180f3:	55                   	push   ebp
c00180f4:	e8 f7 83 fe ff       	call   c00004f0 <memset>
c00180f9:	83 c4 10             	add    esp,0x10
c00180fc:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0018103:	85 c0                	test   eax,eax
c0018105:	74 1b                	je     c0018122 <SoundCard::getSamples32(int, int*)+0x4c>
c0018107:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001810b:	75 15                	jne    c0018122 <SoundCard::getSamples32(int, int*)+0x4c>
c001810d:	53                   	push   ebx
c001810e:	55                   	push   ebp
c001810f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018113:	50                   	push   eax
c0018114:	e8 57 03 00 00       	call   c0018470 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0018119:	83 c4 10             	add    esp,0x10
c001811c:	39 c6                	cmp    esi,eax
c001811e:	7d 02                	jge    c0018122 <SoundCard::getSamples32(int, int*)+0x4c>
c0018120:	89 c6                	mov    esi,eax
c0018122:	47                   	inc    edi
c0018123:	83 ff 20             	cmp    edi,0x20
c0018126:	75 d4                	jne    c00180fc <SoundCard::getSamples32(int, int*)+0x26>
c0018128:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001812e:	85 f6                	test   esi,esi
c0018130:	75 0f                	jne    c0018141 <SoundCard::getSamples32(int, int*)+0x6b>
c0018132:	84 c0                	test   al,al
c0018134:	74 1b                	je     c0018151 <SoundCard::getSamples32(int, int*)+0x7b>
c0018136:	83 ec 0c             	sub    esp,0xc
c0018139:	8b 03                	mov    eax,DWORD PTR [ebx]
c001813b:	53                   	push   ebx
c001813c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001813f:	eb 0d                	jmp    c001814e <SoundCard::getSamples32(int, int*)+0x78>
c0018141:	84 c0                	test   al,al
c0018143:	75 0c                	jne    c0018151 <SoundCard::getSamples32(int, int*)+0x7b>
c0018145:	83 ec 0c             	sub    esp,0xc
c0018148:	8b 03                	mov    eax,DWORD PTR [ebx]
c001814a:	53                   	push   ebx
c001814b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001814e:	83 c4 10             	add    esp,0x10
c0018151:	83 c4 0c             	add    esp,0xc
c0018154:	89 f0                	mov    eax,esi
c0018156:	5b                   	pop    ebx
c0018157:	5e                   	pop    esi
c0018158:	5f                   	pop    edi
c0018159:	5d                   	pop    ebp
c001815a:	c3                   	ret    
c001815b:	90                   	nop

c001815c <SoundCard::addChannel(SoundPort*)>:
c001815c:	83 ec 0c             	sub    esp,0xc
c001815f:	31 c0                	xor    eax,eax
c0018161:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018165:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001816d:	74 1b                	je     c001818a <SoundCard::addChannel(SoundPort*)+0x2e>
c001816f:	40                   	inc    eax
c0018170:	83 f8 20             	cmp    eax,0x20
c0018173:	75 f0                	jne    c0018165 <SoundCard::addChannel(SoundPort*)+0x9>
c0018175:	83 ec 0c             	sub    esp,0xc
c0018178:	68 75 f0 01 c0       	push   0xc001f075
c001817d:	e8 ad 85 ff ff       	call   c001072f <Krnl::panic(char const*)>
c0018182:	83 c4 10             	add    esp,0x10
c0018185:	83 c8 ff             	or     eax,0xffffffff
c0018188:	eb 0b                	jmp    c0018195 <SoundCard::addChannel(SoundPort*)+0x39>
c001818a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001818e:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0018195:	83 c4 0c             	add    esp,0xc
c0018198:	c3                   	ret    
c0018199:	90                   	nop

c001819a <SoundCard::removeChannel(int)>:
c001819a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001819e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00181a2:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c00181ad:	c3                   	ret    
c00181ae:	66 90                	xchg   ax,ax

c00181b0 <SoundPort::SoundPort(int, int, int, int)>:
c00181b0:	83 ec 0c             	sub    esp,0xc
c00181b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181b7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00181be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181c2:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00181c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00181ce:	89 10                	mov    DWORD PTR [eax],edx
c00181d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181d8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00181db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181df:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181e3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00181e6:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00181eb:	75 13                	jne    c0018200 <SoundPort::SoundPort(int, int, int, int)+0x50>
c00181ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00181f3:	05 a0 0f 00 00       	add    eax,0xfa0
c00181f8:	01 c0                	add    eax,eax
c00181fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00181fe:	66 90                	xchg   ax,ax
c0018200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018204:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018208:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001820b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001820f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0018216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001821a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001821d:	c1 e0 02             	shl    eax,0x2
c0018220:	83 ec 0c             	sub    esp,0xc
c0018223:	50                   	push   eax
c0018224:	e8 28 fc fe ff       	call   c0007e51 <malloc>
c0018229:	83 c4 10             	add    esp,0x10
c001822c:	89 c2                	mov    edx,eax
c001822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018232:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018235:	90                   	nop
c0018236:	83 c4 0c             	add    esp,0xc
c0018239:	c3                   	ret    
c001823a:	66 90                	xchg   ax,ax

c001823c <SoundPort::~SoundPort()>:
c001823c:	83 ec 0c             	sub    esp,0xc
c001823f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018243:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018246:	85 c0                	test   eax,eax
c0018248:	74 1e                	je     c0018268 <SoundPort::~SoundPort()+0x2c>
c001824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001824e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018251:	83 ec 0c             	sub    esp,0xc
c0018254:	50                   	push   eax
c0018255:	e8 07 fc fe ff       	call   c0007e61 <free>
c001825a:	83 c4 10             	add    esp,0x10
c001825d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018261:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018268:	90                   	nop
c0018269:	83 c4 0c             	add    esp,0xc
c001826c:	c3                   	ret    
c001826d:	90                   	nop
c001826e:	66 90                	xchg   ax,ax

c0018270 <SoundPort::unpause()>:
c0018270:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018274:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0018278:	c3                   	ret    
c0018279:	90                   	nop
c001827a:	66 90                	xchg   ax,ax

c001827c <SoundPort::pause()>:
c001827c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018280:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018284:	c3                   	ret    
c0018285:	90                   	nop
c0018286:	66 90                	xchg   ax,ax

c0018288 <SoundPort::getBufferUsed()>:
c0018288:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001828c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001828f:	c3                   	ret    

c0018290 <SoundPort::getBufferSize()>:
c0018290:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018294:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018297:	c3                   	ret    

c0018298 <SoundPort::buffer16(short*, int)>:
c0018298:	55                   	push   ebp
c0018299:	57                   	push   edi
c001829a:	56                   	push   esi
c001829b:	53                   	push   ebx
c001829c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00182a0:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00182a4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00182a7:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c00182aa:	74 68                	je     c0018314 <SoundPort::buffer16(short*, int)+0x7c>
c00182ac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00182b0:	85 c9                	test   ecx,ecx
c00182b2:	7e 60                	jle    c0018314 <SoundPort::buffer16(short*, int)+0x7c>
c00182b4:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c00182b8:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00182bb:	c1 e1 0f             	shl    ecx,0xf
c00182be:	8d 70 01             	lea    esi,[eax+0x1]
c00182c1:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00182c4:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00182c7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182ca:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182cd:	74 4d                	je     c001831c <SoundPort::buffer16(short*, int)+0x84>
c00182cf:	31 f6                	xor    esi,esi
c00182d1:	eb 21                	jmp    c00182f4 <SoundPort::buffer16(short*, int)+0x5c>
c00182d3:	90                   	nop
c00182d4:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00182d9:	8d 79 01             	lea    edi,[ecx+0x1]
c00182dc:	c1 e3 0f             	shl    ebx,0xf
c00182df:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00182e2:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00182e5:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00182e8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182eb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182ee:	74 1c                	je     c001830c <SoundPort::buffer16(short*, int)+0x74>
c00182f0:	89 c6                	mov    esi,eax
c00182f2:	66 90                	xchg   ax,ax
c00182f4:	8d 46 01             	lea    eax,[esi+0x1]
c00182f7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00182fb:	75 d7                	jne    c00182d4 <SoundPort::buffer16(short*, int)+0x3c>
c00182fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018301:	8d 76 00             	lea    esi,[esi+0x0]
c0018304:	5b                   	pop    ebx
c0018305:	5e                   	pop    esi
c0018306:	5f                   	pop    edi
c0018307:	5d                   	pop    ebp
c0018308:	c3                   	ret    
c0018309:	8d 76 00             	lea    esi,[esi+0x0]
c001830c:	5b                   	pop    ebx
c001830d:	8d 46 02             	lea    eax,[esi+0x2]
c0018310:	5e                   	pop    esi
c0018311:	5f                   	pop    edi
c0018312:	5d                   	pop    ebp
c0018313:	c3                   	ret    
c0018314:	5b                   	pop    ebx
c0018315:	31 c0                	xor    eax,eax
c0018317:	5e                   	pop    esi
c0018318:	5f                   	pop    edi
c0018319:	5d                   	pop    ebp
c001831a:	c3                   	ret    
c001831b:	90                   	nop
c001831c:	b8 01 00 00 00       	mov    eax,0x1
c0018321:	eb e1                	jmp    c0018304 <SoundPort::buffer16(short*, int)+0x6c>
c0018323:	90                   	nop

c0018324 <SoundPort::buffer32(int*, int)>:
c0018324:	55                   	push   ebp
c0018325:	57                   	push   edi
c0018326:	56                   	push   esi
c0018327:	53                   	push   ebx
c0018328:	51                   	push   ecx
c0018329:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001832d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018331:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018334:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018338:	89 04 24             	mov    DWORD PTR [esp],eax
c001833b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001833e:	74 5c                	je     c001839c <SoundPort::buffer32(int*, int)+0x78>
c0018340:	85 c0                	test   eax,eax
c0018342:	7e 58                	jle    c001839c <SoundPort::buffer32(int*, int)+0x78>
c0018344:	8d 71 01             	lea    esi,[ecx+0x1]
c0018347:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001834a:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001834d:	8b 37                	mov    esi,DWORD PTR [edi]
c001834f:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0018352:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018355:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018358:	74 4a                	je     c00183a4 <SoundPort::buffer32(int*, int)+0x80>
c001835a:	31 f6                	xor    esi,esi
c001835c:	eb 1e                	jmp    c001837c <SoundPort::buffer32(int*, int)+0x58>
c001835e:	66 90                	xchg   ax,ax
c0018360:	8d 69 01             	lea    ebp,[ecx+0x1]
c0018363:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0018366:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0018369:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001836c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0018370:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018373:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018376:	74 18                	je     c0018390 <SoundPort::buffer32(int*, int)+0x6c>
c0018378:	89 de                	mov    esi,ebx
c001837a:	66 90                	xchg   ax,ax
c001837c:	8d 5e 01             	lea    ebx,[esi+0x1]
c001837f:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0018382:	75 dc                	jne    c0018360 <SoundPort::buffer32(int*, int)+0x3c>
c0018384:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018387:	90                   	nop
c0018388:	5a                   	pop    edx
c0018389:	5b                   	pop    ebx
c001838a:	5e                   	pop    esi
c001838b:	5f                   	pop    edi
c001838c:	5d                   	pop    ebp
c001838d:	c3                   	ret    
c001838e:	66 90                	xchg   ax,ax
c0018390:	5a                   	pop    edx
c0018391:	8d 46 02             	lea    eax,[esi+0x2]
c0018394:	5b                   	pop    ebx
c0018395:	5e                   	pop    esi
c0018396:	5f                   	pop    edi
c0018397:	5d                   	pop    ebp
c0018398:	c3                   	ret    
c0018399:	8d 76 00             	lea    esi,[esi+0x0]
c001839c:	5a                   	pop    edx
c001839d:	31 c0                	xor    eax,eax
c001839f:	5b                   	pop    ebx
c00183a0:	5e                   	pop    esi
c00183a1:	5f                   	pop    edi
c00183a2:	5d                   	pop    ebp
c00183a3:	c3                   	ret    
c00183a4:	b8 01 00 00 00       	mov    eax,0x1
c00183a9:	eb dd                	jmp    c0018388 <SoundPort::buffer32(int*, int)+0x64>
c00183ab:	90                   	nop

c00183ac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c00183ac:	57                   	push   edi
c00183ad:	56                   	push   esi
c00183ae:	53                   	push   ebx
c00183af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00183b3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00183b7:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c00183bd:	39 03                	cmp    DWORD PTR [ebx],eax
c00183bf:	74 13                	je     c00183d4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c00183c1:	83 ec 0c             	sub    esp,0xc
c00183c4:	68 c8 f0 01 c0       	push   0xc001f0c8
c00183c9:	e8 61 83 ff ff       	call   c001072f <Krnl::panic(char const*)>
c00183ce:	83 c4 10             	add    esp,0x10
c00183d1:	8d 76 00             	lea    esi,[esi+0x0]
c00183d4:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00183da:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00183dd:	74 11                	je     c00183f0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00183df:	83 ec 0c             	sub    esp,0xc
c00183e2:	68 07 f1 01 c0       	push   0xc001f107
c00183e7:	e8 43 83 ff ff       	call   c001072f <Krnl::panic(char const*)>
c00183ec:	83 c4 10             	add    esp,0x10
c00183ef:	90                   	nop
c00183f0:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00183f6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00183f9:	74 11                	je     c001840c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00183fb:	83 ec 0c             	sub    esp,0xc
c00183fe:	68 07 f1 01 c0       	push   0xc001f107
c0018403:	e8 27 83 ff ff       	call   c001072f <Krnl::panic(char const*)>
c0018408:	83 c4 10             	add    esp,0x10
c001840b:	90                   	nop
c001840c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001840f:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0018413:	7e 07                	jle    c001841c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0018415:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018419:	8d 76 00             	lea    esi,[esi+0x0]
c001841c:	85 f6                	test   esi,esi
c001841e:	7e 2c                	jle    c001844c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0018420:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018424:	8d 3c 36             	lea    edi,[esi+esi*1]
c0018427:	31 c9                	xor    ecx,ecx
c0018429:	01 d7                	add    edi,edx
c001842b:	90                   	nop
c001842c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001842f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0018432:	85 c0                	test   eax,eax
c0018434:	79 06                	jns    c001843c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0018436:	05 ff 7f 00 00       	add    eax,0x7fff
c001843b:	90                   	nop
c001843c:	c1 f8 0f             	sar    eax,0xf
c001843f:	83 c1 04             	add    ecx,0x4
c0018442:	66 01 02             	add    WORD PTR [edx],ax
c0018445:	83 c2 02             	add    edx,0x2
c0018448:	39 d7                	cmp    edi,edx
c001844a:	75 e0                	jne    c001842c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001844c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001844f:	50                   	push   eax
c0018450:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018453:	29 f0                	sub    eax,esi
c0018455:	c1 e0 02             	shl    eax,0x2
c0018458:	50                   	push   eax
c0018459:	8d 04 b2             	lea    eax,[edx+esi*4]
c001845c:	50                   	push   eax
c001845d:	52                   	push   edx
c001845e:	e8 9d 7f fe ff       	call   c0000400 <memmove>
c0018463:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0018466:	83 c4 10             	add    esp,0x10
c0018469:	89 f0                	mov    eax,esi
c001846b:	5b                   	pop    ebx
c001846c:	5e                   	pop    esi
c001846d:	5f                   	pop    edi
c001846e:	c3                   	ret    
c001846f:	90                   	nop

c0018470 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0018470:	57                   	push   edi
c0018471:	56                   	push   esi
c0018472:	53                   	push   ebx
c0018473:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018477:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001847b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001847f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0018485:	39 06                	cmp    DWORD PTR [esi],eax
c0018487:	74 13                	je     c001849c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0018489:	83 ec 0c             	sub    esp,0xc
c001848c:	68 e8 f0 01 c0       	push   0xc001f0e8
c0018491:	e8 99 82 ff ff       	call   c001072f <Krnl::panic(char const*)>
c0018496:	83 c4 10             	add    esp,0x10
c0018499:	8d 76 00             	lea    esi,[esi+0x0]
c001849c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c00184a2:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c00184a5:	74 11                	je     c00184b8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c00184a7:	83 ec 0c             	sub    esp,0xc
c00184aa:	68 23 f1 01 c0       	push   0xc001f123
c00184af:	e8 7b 82 ff ff       	call   c001072f <Krnl::panic(char const*)>
c00184b4:	83 c4 10             	add    esp,0x10
c00184b7:	90                   	nop
c00184b8:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c00184be:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c00184c1:	74 11                	je     c00184d4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c00184c3:	83 ec 0c             	sub    esp,0xc
c00184c6:	68 23 f1 01 c0       	push   0xc001f123
c00184cb:	e8 5f 82 ff ff       	call   c001072f <Krnl::panic(char const*)>
c00184d0:	83 c4 10             	add    esp,0x10
c00184d3:	90                   	nop
c00184d4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00184d7:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00184db:	7e 07                	jle    c00184e4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00184dd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00184e1:	8d 76 00             	lea    esi,[esi+0x0]
c00184e4:	85 ff                	test   edi,edi
c00184e6:	7e 1c                	jle    c0018504 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00184e8:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00184ef:	31 c0                	xor    eax,eax
c00184f1:	8d 76 00             	lea    esi,[esi+0x0]
c00184f4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00184f7:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00184fa:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c00184fd:	83 c0 04             	add    eax,0x4
c0018500:	39 c1                	cmp    ecx,eax
c0018502:	75 f0                	jne    c00184f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0018504:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0018507:	50                   	push   eax
c0018508:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001850b:	29 f8                	sub    eax,edi
c001850d:	c1 e0 02             	shl    eax,0x2
c0018510:	50                   	push   eax
c0018511:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018514:	50                   	push   eax
c0018515:	52                   	push   edx
c0018516:	e8 e5 7e fe ff       	call   c0000400 <memmove>
c001851b:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001851e:	83 c4 10             	add    esp,0x10
c0018521:	89 f8                	mov    eax,edi
c0018523:	5b                   	pop    ebx
c0018524:	5e                   	pop    esi
c0018525:	5f                   	pop    edi
c0018526:	c3                   	ret    
c0018527:	90                   	nop

c0018528 <PCI::open(int, int, void*)>:
c0018528:	83 ec 18             	sub    esp,0x18
c001852b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001852f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018533:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018539:	8b 10                	mov    edx,DWORD PTR [eax]
c001853b:	50                   	push   eax
c001853c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001853f:	31 c0                	xor    eax,eax
c0018541:	83 c4 1c             	add    esp,0x1c
c0018544:	c3                   	ret    
c0018545:	90                   	nop

c0018546 <PCI::close(int, int, void*)>:
c0018546:	31 c0                	xor    eax,eax
c0018548:	c3                   	ret    
c0018549:	90                   	nop

c001854a <PCI::PCI()>:
c001854a:	83 ec 0c             	sub    esp,0xc
c001854d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018551:	83 ec 08             	sub    esp,0x8
c0018554:	68 3f f1 01 c0       	push   0xc001f13f
c0018559:	50                   	push   eax
c001855a:	e8 15 34 ff ff       	call   c000b974 <Bus::Bus(char const*)>
c001855f:	83 c4 10             	add    esp,0x10
c0018562:	ba e8 f1 01 c0       	mov    edx,0xc001f1e8
c0018567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001856b:	89 10                	mov    DWORD PTR [eax],edx
c001856d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018571:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001857b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001857f:	a3 e0 47 02 c0       	mov    ds:0xc00247e0,eax
c0018584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018588:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001858e:	31 d2                	xor    edx,edx
c0018590:	88 c2                	mov    dl,al
c0018592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018596:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001859d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00185a7:	31 d2                	xor    edx,edx
c00185a9:	88 c2                	mov    dl,al
c00185ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185af:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00185b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185b8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00185be:	8d 50 01             	lea    edx,[eax+0x1]
c00185c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00185c5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00185cb:	31 d2                	xor    edx,edx
c00185cd:	88 c2                	mov    dl,al
c00185cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185d3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00185d7:	83 c9 c0             	or     ecx,0xffffffc0
c00185da:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00185de:	90                   	nop
c00185df:	83 c4 0c             	add    esp,0xc
c00185e2:	c3                   	ret    
c00185e3:	90                   	nop

c00185e4 <PCI::readBAR8(unsigned int, int)>:
c00185e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185ec:	f6 c2 01             	test   dl,0x1
c00185ef:	74 07                	je     c00185f8 <PCI::readBAR8(unsigned int, int)+0x14>
c00185f1:	83 e2 fc             	and    edx,0xfffffffc
c00185f4:	01 c2                	add    edx,eax
c00185f6:	ec                   	in     al,dx
c00185f7:	c3                   	ret    
c00185f8:	83 e2 f0             	and    edx,0xfffffff0
c00185fb:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00185fe:	c3                   	ret    
c00185ff:	90                   	nop

c0018600 <PCI::readBAR16(unsigned int, int)>:
c0018600:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018604:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018608:	f6 c2 01             	test   dl,0x1
c001860b:	74 08                	je     c0018615 <PCI::readBAR16(unsigned int, int)+0x15>
c001860d:	83 e2 fc             	and    edx,0xfffffffc
c0018610:	01 c2                	add    edx,eax
c0018612:	66 ed                	in     ax,dx
c0018614:	c3                   	ret    
c0018615:	83 e2 f0             	and    edx,0xfffffff0
c0018618:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001861c:	c3                   	ret    
c001861d:	90                   	nop

c001861e <PCI::readBAR32(unsigned int, int)>:
c001861e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018622:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018626:	f6 c2 01             	test   dl,0x1
c0018629:	74 07                	je     c0018632 <PCI::readBAR32(unsigned int, int)+0x14>
c001862b:	83 e2 fc             	and    edx,0xfffffffc
c001862e:	01 c2                	add    edx,eax
c0018630:	ed                   	in     eax,dx
c0018631:	c3                   	ret    
c0018632:	83 e2 f0             	and    edx,0xfffffff0
c0018635:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018638:	c3                   	ret    
c0018639:	90                   	nop

c001863a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001863a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001863e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018642:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018646:	f6 c2 01             	test   dl,0x1
c0018649:	74 07                	je     c0018652 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001864b:	83 e2 fc             	and    edx,0xfffffffc
c001864e:	01 ca                	add    edx,ecx
c0018650:	ee                   	out    dx,al
c0018651:	c3                   	ret    
c0018652:	83 e2 f0             	and    edx,0xfffffff0
c0018655:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018658:	c3                   	ret    
c0018659:	90                   	nop

c001865a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001865a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001865e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018662:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018666:	f6 c2 01             	test   dl,0x1
c0018669:	74 08                	je     c0018673 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001866b:	83 e2 fc             	and    edx,0xfffffffc
c001866e:	01 ca                	add    edx,ecx
c0018670:	66 ef                	out    dx,ax
c0018672:	c3                   	ret    
c0018673:	83 e2 f0             	and    edx,0xfffffff0
c0018676:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001867a:	c3                   	ret    
c001867b:	90                   	nop

c001867c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001867c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018680:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018684:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018688:	f6 c2 01             	test   dl,0x1
c001868b:	74 07                	je     c0018694 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001868d:	83 e2 fc             	and    edx,0xfffffffc
c0018690:	01 ca                	add    edx,ecx
c0018692:	ef                   	out    dx,eax
c0018693:	c3                   	ret    
c0018694:	83 e2 f0             	and    edx,0xfffffff0
c0018697:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001869a:	c3                   	ret    
c001869b:	90                   	nop

c001869c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001869c:	55                   	push   ebp
c001869d:	57                   	push   edi
c001869e:	56                   	push   esi
c001869f:	53                   	push   ebx
c00186a0:	83 ec 0c             	sub    esp,0xc
c00186a3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00186a7:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00186ab:	89 f0                	mov    eax,esi
c00186ad:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00186b1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00186b5:	3c 07                	cmp    al,0x7
c00186b7:	76 10                	jbe    c00186c9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00186b9:	83 ec 0c             	sub    esp,0xc
c00186bc:	68 47 f1 01 c0       	push   0xc001f147
c00186c1:	e8 69 80 ff ff       	call   c001072f <Krnl::panic(char const*)>
c00186c6:	83 c4 10             	add    esp,0x10
c00186c9:	80 fb 0f             	cmp    bl,0xf
c00186cc:	76 10                	jbe    c00186de <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00186ce:	83 ec 0c             	sub    esp,0xc
c00186d1:	68 77 f1 01 c0       	push   0xc001f177
c00186d6:	e8 54 80 ff ff       	call   c001072f <Krnl::panic(char const*)>
c00186db:	83 c4 10             	add    esp,0x10
c00186de:	8d 04 36             	lea    eax,[esi+esi*1]
c00186e1:	ba f8 0c 00 00       	mov    edx,0xcf8
c00186e6:	83 c8 f0             	or     eax,0xfffffff0
c00186e9:	ee                   	out    dx,al
c00186ea:	ba fa 0c 00 00       	mov    edx,0xcfa
c00186ef:	89 e8                	mov    eax,ebp
c00186f1:	ee                   	out    dx,al
c00186f2:	83 c4 0c             	add    esp,0xc
c00186f5:	89 d8                	mov    eax,ebx
c00186f7:	66 81 e7 fc 00       	and    di,0xfc
c00186fc:	5b                   	pop    ebx
c00186fd:	c1 e0 08             	shl    eax,0x8
c0018700:	5e                   	pop    esi
c0018701:	09 f8                	or     eax,edi
c0018703:	5f                   	pop    edi
c0018704:	66 0d 00 c0          	or     ax,0xc000
c0018708:	5d                   	pop    ebp
c0018709:	c3                   	ret    

c001870a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001870a:	57                   	push   edi
c001870b:	56                   	push   esi
c001870c:	53                   	push   ebx
c001870d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018715:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001871b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001871f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018723:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018727:	83 ff 01             	cmp    edi,0x1
c001872a:	75 3e                	jne    c001876a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001872c:	89 de                	mov    esi,ebx
c001872e:	0f b6 c0             	movzx  eax,al
c0018731:	81 e6 fc 00 00 00    	and    esi,0xfc
c0018737:	c1 e0 10             	shl    eax,0x10
c001873a:	0f b6 c9             	movzx  ecx,cl
c001873d:	09 f0                	or     eax,esi
c001873f:	c1 e1 08             	shl    ecx,0x8
c0018742:	0f b6 d2             	movzx  edx,dl
c0018745:	09 c8                	or     eax,ecx
c0018747:	c1 e2 0b             	shl    edx,0xb
c001874a:	09 d0                	or     eax,edx
c001874c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018751:	0d 00 00 00 80       	or     eax,0x80000000
c0018756:	ef                   	out    dx,eax
c0018757:	ba fc 0c 00 00       	mov    edx,0xcfc
c001875c:	ed                   	in     eax,dx
c001875d:	83 e3 02             	and    ebx,0x2
c0018760:	0f b6 cb             	movzx  ecx,bl
c0018763:	c1 e1 03             	shl    ecx,0x3
c0018766:	d3 e8                	shr    eax,cl
c0018768:	eb 43                	jmp    c00187ad <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001876a:	83 ff 02             	cmp    edi,0x2
c001876d:	75 2c                	jne    c001879b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001876f:	83 ec 0c             	sub    esp,0xc
c0018772:	0f b6 c9             	movzx  ecx,cl
c0018775:	0f b6 d2             	movzx  edx,dl
c0018778:	0f b6 fb             	movzx  edi,bl
c001877b:	0f b6 c0             	movzx  eax,al
c001877e:	57                   	push   edi
c001877f:	51                   	push   ecx
c0018780:	52                   	push   edx
c0018781:	50                   	push   eax
c0018782:	56                   	push   esi
c0018783:	e8 14 ff ff ff       	call   c001869c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018788:	89 c2                	mov    edx,eax
c001878a:	ed                   	in     eax,dx
c001878b:	83 e3 02             	and    ebx,0x2
c001878e:	83 c4 20             	add    esp,0x20
c0018791:	0f b6 cb             	movzx  ecx,bl
c0018794:	c1 e1 03             	shl    ecx,0x3
c0018797:	d3 e8                	shr    eax,cl
c0018799:	eb 12                	jmp    c00187ad <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001879b:	83 ec 0c             	sub    esp,0xc
c001879e:	68 a7 f1 01 c0       	push   0xc001f1a7
c00187a3:	e8 87 7f ff ff       	call   c001072f <Krnl::panic(char const*)>
c00187a8:	83 c4 10             	add    esp,0x10
c00187ab:	31 c0                	xor    eax,eax
c00187ad:	5b                   	pop    ebx
c00187ae:	5e                   	pop    esi
c00187af:	5f                   	pop    edi
c00187b0:	c3                   	ret    
c00187b1:	90                   	nop

c00187b2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00187b2:	83 ec 18             	sub    esp,0x18
c00187b5:	6a 00                	push   0x0
c00187b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187bc:	50                   	push   eax
c00187bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187c2:	50                   	push   eax
c00187c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187c8:	50                   	push   eax
c00187c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187cd:	e8 38 ff ff ff       	call   c001870a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187d2:	83 c4 2c             	add    esp,0x2c
c00187d5:	c3                   	ret    

c00187d6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00187d6:	83 ec 18             	sub    esp,0x18
c00187d9:	6a 0e                	push   0xe
c00187db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187e0:	50                   	push   eax
c00187e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187e6:	50                   	push   eax
c00187e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187ec:	50                   	push   eax
c00187ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187f1:	e8 14 ff ff ff       	call   c001870a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187f6:	83 c4 2c             	add    esp,0x2c
c00187f9:	0f b6 c0             	movzx  eax,al
c00187fc:	c3                   	ret    
c00187fd:	90                   	nop

c00187fe <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00187fe:	55                   	push   ebp
c00187ff:	57                   	push   edi
c0018800:	56                   	push   esi
c0018801:	53                   	push   ebx
c0018802:	83 ec 18             	sub    esp,0x18
c0018805:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001880a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001880f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018814:	6a 0a                	push   0xa
c0018816:	56                   	push   esi
c0018817:	55                   	push   ebp
c0018818:	57                   	push   edi
c0018819:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001881d:	e8 e8 fe ff ff       	call   c001870a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018822:	83 c4 14             	add    esp,0x14
c0018825:	89 c3                	mov    ebx,eax
c0018827:	6a 0a                	push   0xa
c0018829:	0f b6 db             	movzx  ebx,bl
c001882c:	56                   	push   esi
c001882d:	55                   	push   ebp
c001882e:	57                   	push   edi
c001882f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018833:	e8 d2 fe ff ff       	call   c001870a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018838:	83 c4 2c             	add    esp,0x2c
c001883b:	25 00 ff 00 00       	and    eax,0xff00
c0018840:	09 d8                	or     eax,ebx
c0018842:	5b                   	pop    ebx
c0018843:	5e                   	pop    esi
c0018844:	5f                   	pop    edi
c0018845:	5d                   	pop    ebp
c0018846:	c3                   	ret    
c0018847:	90                   	nop

c0018848 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018848:	83 ec 18             	sub    esp,0x18
c001884b:	6a 08                	push   0x8
c001884d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018852:	50                   	push   eax
c0018853:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018858:	50                   	push   eax
c0018859:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001885e:	50                   	push   eax
c001885f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018863:	e8 a2 fe ff ff       	call   c001870a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018868:	83 c4 2c             	add    esp,0x2c
c001886b:	0f b6 c4             	movzx  eax,ah
c001886e:	c3                   	ret    
c001886f:	90                   	nop

c0018870 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018870:	83 ec 18             	sub    esp,0x18
c0018873:	6a 08                	push   0x8
c0018875:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001887a:	50                   	push   eax
c001887b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018880:	50                   	push   eax
c0018881:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018886:	50                   	push   eax
c0018887:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001888b:	e8 7a fe ff ff       	call   c001870a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018890:	83 c4 2c             	add    esp,0x2c
c0018893:	c3                   	ret    

c0018894 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018894:	83 ec 18             	sub    esp,0x18
c0018897:	6a 3c                	push   0x3c
c0018899:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001889e:	50                   	push   eax
c001889f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188a4:	50                   	push   eax
c00188a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188aa:	50                   	push   eax
c00188ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188af:	e8 56 fe ff ff       	call   c001870a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188b4:	83 c4 2c             	add    esp,0x2c
c00188b7:	c3                   	ret    

c00188b8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00188b8:	83 ec 18             	sub    esp,0x18
c00188bb:	6a 18                	push   0x18
c00188bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188c2:	50                   	push   eax
c00188c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188c8:	50                   	push   eax
c00188c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188ce:	50                   	push   eax
c00188cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188d3:	e8 32 fe ff ff       	call   c001870a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188d8:	83 c4 2c             	add    esp,0x2c
c00188db:	0f b6 c4             	movzx  eax,ah
c00188de:	c3                   	ret    
c00188df:	90                   	nop

c00188e0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00188e0:	55                   	push   ebp
c00188e1:	57                   	push   edi
c00188e2:	56                   	push   esi
c00188e3:	53                   	push   ebx
c00188e4:	83 ec 28             	sub    esp,0x28
c00188e7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00188eb:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00188f0:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00188f5:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00188fa:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018901:	8d 43 12             	lea    eax,[ebx+0x12]
c0018904:	83 c3 10             	add    ebx,0x10
c0018907:	0f b6 c0             	movzx  eax,al
c001890a:	0f b6 db             	movzx  ebx,bl
c001890d:	50                   	push   eax
c001890e:	51                   	push   ecx
c001890f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0018913:	57                   	push   edi
c0018914:	55                   	push   ebp
c0018915:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018919:	e8 ec fd ff ff       	call   c001870a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001891e:	83 c4 14             	add    esp,0x14
c0018921:	89 c6                	mov    esi,eax
c0018923:	53                   	push   ebx
c0018924:	c1 e6 10             	shl    esi,0x10
c0018927:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001892b:	51                   	push   ecx
c001892c:	57                   	push   edi
c001892d:	55                   	push   ebp
c001892e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018932:	e8 d3 fd ff ff       	call   c001870a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018937:	83 c4 3c             	add    esp,0x3c
c001893a:	0f b7 c0             	movzx  eax,ax
c001893d:	5b                   	pop    ebx
c001893e:	09 f0                	or     eax,esi
c0018940:	5e                   	pop    esi
c0018941:	5f                   	pop    edi
c0018942:	5d                   	pop    ebp
c0018943:	c3                   	ret    

c0018944 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018944:	55                   	push   ebp
c0018945:	57                   	push   edi
c0018946:	56                   	push   esi
c0018947:	53                   	push   ebx
c0018948:	83 ec 0c             	sub    esp,0xc
c001894b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001894f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018953:	89 f5                	mov    ebp,esi
c0018955:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001895b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001895f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018963:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018967:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001896b:	83 f9 01             	cmp    ecx,0x1
c001896e:	75 5d                	jne    c00189cd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018970:	0f b6 c8             	movzx  ecx,al
c0018973:	0f b6 d2             	movzx  edx,dl
c0018976:	c1 e1 10             	shl    ecx,0x10
c0018979:	c1 e2 0b             	shl    edx,0xb
c001897c:	89 f0                	mov    eax,esi
c001897e:	25 fc 00 00 00       	and    eax,0xfc
c0018983:	09 c1                	or     ecx,eax
c0018985:	89 e8                	mov    eax,ebp
c0018987:	0f b6 c0             	movzx  eax,al
c001898a:	c1 e0 08             	shl    eax,0x8
c001898d:	09 c1                	or     ecx,eax
c001898f:	09 d1                	or     ecx,edx
c0018991:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018996:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001899c:	89 c8                	mov    eax,ecx
c001899e:	ef                   	out    dx,eax
c001899f:	ba fc 0c 00 00       	mov    edx,0xcfc
c00189a4:	ed                   	in     eax,dx
c00189a5:	0f b7 db             	movzx  ebx,bx
c00189a8:	83 e6 02             	and    esi,0x2
c00189ab:	74 0a                	je     c00189b7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00189ad:	0f b7 d0             	movzx  edx,ax
c00189b0:	c1 e3 10             	shl    ebx,0x10
c00189b3:	09 d3                	or     ebx,edx
c00189b5:	eb 05                	jmp    c00189bc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00189b7:	66 31 c0             	xor    ax,ax
c00189ba:	09 c3                	or     ebx,eax
c00189bc:	ba f8 0c 00 00       	mov    edx,0xcf8
c00189c1:	89 c8                	mov    eax,ecx
c00189c3:	ef                   	out    dx,eax
c00189c4:	ba fc 0c 00 00       	mov    edx,0xcfc
c00189c9:	89 d8                	mov    eax,ebx
c00189cb:	eb 41                	jmp    c0018a0e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00189cd:	83 f9 02             	cmp    ecx,0x2
c00189d0:	75 45                	jne    c0018a17 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00189d2:	83 ec 0c             	sub    esp,0xc
c00189d5:	0f b6 d2             	movzx  edx,dl
c00189d8:	89 f1                	mov    ecx,esi
c00189da:	0f b6 c0             	movzx  eax,al
c00189dd:	0f b6 f1             	movzx  esi,cl
c00189e0:	89 e9                	mov    ecx,ebp
c00189e2:	56                   	push   esi
c00189e3:	0f b6 c9             	movzx  ecx,cl
c00189e6:	51                   	push   ecx
c00189e7:	52                   	push   edx
c00189e8:	50                   	push   eax
c00189e9:	57                   	push   edi
c00189ea:	e8 ad fc ff ff       	call   c001869c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00189ef:	89 c2                	mov    edx,eax
c00189f1:	ed                   	in     eax,dx
c00189f2:	83 c4 20             	add    esp,0x20
c00189f5:	0f b7 db             	movzx  ebx,bx
c00189f8:	f6 c2 02             	test   dl,0x2
c00189fb:	74 0c                	je     c0018a09 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00189fd:	0f b7 c8             	movzx  ecx,ax
c0018a00:	89 d8                	mov    eax,ebx
c0018a02:	c1 e0 10             	shl    eax,0x10
c0018a05:	09 c8                	or     eax,ecx
c0018a07:	eb 05                	jmp    c0018a0e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018a09:	66 31 c0             	xor    ax,ax
c0018a0c:	09 d8                	or     eax,ebx
c0018a0e:	ef                   	out    dx,eax
c0018a0f:	83 c4 0c             	add    esp,0xc
c0018a12:	5b                   	pop    ebx
c0018a13:	5e                   	pop    esi
c0018a14:	5f                   	pop    edi
c0018a15:	5d                   	pop    ebp
c0018a16:	c3                   	ret    
c0018a17:	c7 44 24 20 a7 f1 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f1a7
c0018a1f:	83 c4 0c             	add    esp,0xc
c0018a22:	5b                   	pop    ebx
c0018a23:	5e                   	pop    esi
c0018a24:	5f                   	pop    edi
c0018a25:	5d                   	pop    ebp
c0018a26:	e9 04 7d ff ff       	jmp    c001072f <Krnl::panic(char const*)>
c0018a2b:	90                   	nop

c0018a2c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018a2c:	55                   	push   ebp
c0018a2d:	57                   	push   edi
c0018a2e:	56                   	push   esi
c0018a2f:	53                   	push   ebx
c0018a30:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018a36:	80 3d ec 47 02 c0 00 	cmp    BYTE PTR ds:0xc00247ec,0x0
c0018a3d:	0f 85 84 00 00 00    	jne    c0018ac7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018a43:	83 ec 0c             	sub    esp,0xc
c0018a46:	68 14 01 00 00       	push   0x114
c0018a4b:	e8 01 f4 fe ff       	call   c0007e51 <malloc>
c0018a50:	83 c4 0c             	add    esp,0xc
c0018a53:	89 c3                	mov    ebx,eax
c0018a55:	ff 35 30 3e 02 c0    	push   DWORD PTR ds:0xc0023e30
c0018a5b:	68 ad f1 01 c0       	push   0xc001f1ad
c0018a60:	50                   	push   eax
c0018a61:	e8 f0 26 ff ff       	call   c000b156 <File::File(char const*, Process*)>
c0018a66:	5a                   	pop    edx
c0018a67:	59                   	pop    ecx
c0018a68:	6a 01                	push   0x1
c0018a6a:	53                   	push   ebx
c0018a6b:	e8 a6 27 ff ff       	call   c000b216 <File::open(FileOpenMode)>
c0018a70:	83 c4 0c             	add    esp,0xc
c0018a73:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018a77:	50                   	push   eax
c0018a78:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018a7c:	50                   	push   eax
c0018a7d:	53                   	push   ebx
c0018a7e:	e8 3f 2a ff ff       	call   c000b4c2 <File::stat(unsigned long long*, bool*)>
c0018a83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a87:	40                   	inc    eax
c0018a88:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a8b:	e8 c1 f3 fe ff       	call   c0007e51 <malloc>
c0018a90:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018a94:	a3 e8 47 02 c0       	mov    ds:0xc00247e8,eax
c0018a99:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018a9d:	5e                   	pop    esi
c0018a9e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018aa0:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018aa4:	51                   	push   ecx
c0018aa5:	50                   	push   eax
c0018aa6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018aaa:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018aae:	53                   	push   ebx
c0018aaf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018ab2:	83 c4 14             	add    esp,0x14
c0018ab5:	53                   	push   ebx
c0018ab6:	e8 b9 27 ff ff       	call   c000b274 <File::close()>
c0018abb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018abf:	83 c4 10             	add    esp,0x10
c0018ac2:	a3 e4 47 02 c0       	mov    ds:0xc00247e4,eax
c0018ac7:	a1 e4 47 02 c0       	mov    eax,ds:0xc00247e4
c0018acc:	8b 15 e8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247e8
c0018ad2:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ad5:	31 ff                	xor    edi,edi
c0018ad7:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018adf:	31 f6                	xor    esi,esi
c0018ae1:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018ae6:	31 db                	xor    ebx,ebx
c0018ae8:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018af0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018af5:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018afc:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018b00:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018b07:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018b0b:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018b0e:	0f 8e 6b 01 00 00    	jle    c0018c7f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018b14:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018b17:	d4 40                	aam    0x40
c0018b19:	d5 39                	aad    0x39
c0018b1b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b1f:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018b23:	d4 40                	aam    0x40
c0018b25:	d5 39                	aad    0x39
c0018b27:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018b2b:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018b2f:	d4 40                	aam    0x40
c0018b31:	d5 39                	aad    0x39
c0018b33:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018b37:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018b3b:	d4 40                	aam    0x40
c0018b3d:	d5 39                	aad    0x39
c0018b3f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018b43:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018b47:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018b4b:	3c 56                	cmp    al,0x56
c0018b4d:	74 45                	je     c0018b94 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018b4f:	d4 40                	aam    0x40
c0018b51:	d5 39                	aad    0x39
c0018b53:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b56:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018b5a:	0f b6 c9             	movzx  ecx,cl
c0018b5d:	c1 e1 04             	shl    ecx,0x4
c0018b60:	d4 40                	aam    0x40
c0018b62:	d5 39                	aad    0x39
c0018b64:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018b67:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018b6b:	0f b6 db             	movzx  ebx,bl
c0018b6e:	09 cb                	or     ebx,ecx
c0018b70:	c1 e3 04             	shl    ebx,0x4
c0018b73:	d4 40                	aam    0x40
c0018b75:	d5 39                	aad    0x39
c0018b77:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b7a:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018b7e:	0f b6 c9             	movzx  ecx,cl
c0018b81:	09 cb                	or     ebx,ecx
c0018b83:	c1 e3 04             	shl    ebx,0x4
c0018b86:	89 d9                	mov    ecx,ebx
c0018b88:	d4 40                	aam    0x40
c0018b8a:	d5 39                	aad    0x39
c0018b8c:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018b8f:	0f b6 db             	movzx  ebx,bl
c0018b92:	09 cb                	or     ebx,ecx
c0018b94:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018b98:	80 f9 44             	cmp    cl,0x44
c0018b9b:	74 47                	je     c0018be4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018b9d:	88 c8                	mov    al,cl
c0018b9f:	d4 40                	aam    0x40
c0018ba1:	d5 39                	aad    0x39
c0018ba3:	83 e8 30             	sub    eax,0x30
c0018ba6:	0f b6 e8             	movzx  ebp,al
c0018ba9:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018bad:	c1 e5 04             	shl    ebp,0x4
c0018bb0:	d4 40                	aam    0x40
c0018bb2:	d5 39                	aad    0x39
c0018bb4:	83 e8 30             	sub    eax,0x30
c0018bb7:	0f b6 f0             	movzx  esi,al
c0018bba:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018bbe:	09 ee                	or     esi,ebp
c0018bc0:	c1 e6 04             	shl    esi,0x4
c0018bc3:	d4 40                	aam    0x40
c0018bc5:	d5 39                	aad    0x39
c0018bc7:	83 e8 30             	sub    eax,0x30
c0018bca:	0f b6 e8             	movzx  ebp,al
c0018bcd:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018bd1:	09 ee                	or     esi,ebp
c0018bd3:	c1 e6 04             	shl    esi,0x4
c0018bd6:	89 f5                	mov    ebp,esi
c0018bd8:	d4 40                	aam    0x40
c0018bda:	d5 39                	aad    0x39
c0018bdc:	83 e8 30             	sub    eax,0x30
c0018bdf:	0f b6 f0             	movzx  esi,al
c0018be2:	09 ee                	or     esi,ebp
c0018be4:	83 c7 10             	add    edi,0x10
c0018be7:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018beb:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018bee:	3c 0a                	cmp    al,0xa
c0018bf0:	74 09                	je     c0018bfb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018bf2:	45                   	inc    ebp
c0018bf3:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018bf6:	75 16                	jne    c0018c0e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018bf8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018bfb:	3c 0a                	cmp    al,0xa
c0018bfd:	0f 94 c0             	sete   al
c0018c00:	0f b6 c0             	movzx  eax,al
c0018c03:	01 c7                	add    edi,eax
c0018c05:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018c0a:	75 0c                	jne    c0018c18 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018c0c:	eb 15                	jmp    c0018c23 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018c0e:	47                   	inc    edi
c0018c0f:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018c12:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018c16:	eb d3                	jmp    c0018beb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018c18:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018c1d:	0f 85 e8 fe ff ff    	jne    c0018b0b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c23:	80 f9 44             	cmp    cl,0x44
c0018c26:	74 0b                	je     c0018c33 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018c28:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018c2d:	0f 85 d8 fe ff ff    	jne    c0018b0b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c33:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018c37:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018c3b:	c1 e1 04             	shl    ecx,0x4
c0018c3e:	83 e8 30             	sub    eax,0x30
c0018c41:	09 c8                	or     eax,ecx
c0018c43:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018c47:	0f 85 be fe ff ff    	jne    c0018b0b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c4d:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018c51:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c55:	c1 e1 04             	shl    ecx,0x4
c0018c58:	83 e8 30             	sub    eax,0x30
c0018c5b:	09 c8                	or     eax,ecx
c0018c5d:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018c61:	0f 85 a4 fe ff ff    	jne    c0018b0b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c67:	50                   	push   eax
c0018c68:	50                   	push   eax
c0018c69:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c6d:	50                   	push   eax
c0018c6e:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018c75:	e8 a6 79 fe ff       	call   c0000620 <strcpy>
c0018c7a:	83 c4 10             	add    esp,0x10
c0018c7d:	eb 15                	jmp    c0018c94 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018c7f:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018c86:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018c91:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018c94:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018c9b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018ca1:	5b                   	pop    ebx
c0018ca2:	5e                   	pop    esi
c0018ca3:	5f                   	pop    edi
c0018ca4:	5d                   	pop    ebp
c0018ca5:	c3                   	ret    

c0018ca6 <PCI::checkBus(unsigned char)>:
c0018ca6:	56                   	push   esi
c0018ca7:	53                   	push   ebx
c0018ca8:	31 f6                	xor    esi,esi
c0018caa:	51                   	push   ecx
c0018cab:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018caf:	0f b6 c3             	movzx  eax,bl
c0018cb2:	52                   	push   edx
c0018cb3:	56                   	push   esi
c0018cb4:	46                   	inc    esi
c0018cb5:	50                   	push   eax
c0018cb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018cba:	e8 f3 02 00 00       	call   c0018fb2 <PCI::checkDevice(unsigned char, unsigned char)>
c0018cbf:	83 c4 10             	add    esp,0x10
c0018cc2:	83 fe 20             	cmp    esi,0x20
c0018cc5:	75 e8                	jne    c0018caf <PCI::checkBus(unsigned char)+0x9>
c0018cc7:	58                   	pop    eax
c0018cc8:	5b                   	pop    ebx
c0018cc9:	5e                   	pop    esi
c0018cca:	c3                   	ret    
c0018ccb:	90                   	nop

c0018ccc <PCI::foundDevice(PCIDeviceInfo)>:
c0018ccc:	55                   	push   ebp
c0018ccd:	57                   	push   edi
c0018cce:	56                   	push   esi
c0018ccf:	53                   	push   ebx
c0018cd0:	83 ec 1c             	sub    esp,0x1c
c0018cd3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018cd7:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018cdd:	0f 84 52 01 00 00    	je     c0018e35 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018ce3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018ce7:	66 81 f9 06 04       	cmp    cx,0x406
c0018cec:	75 2c                	jne    c0018d1a <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018cee:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018cf3:	50                   	push   eax
c0018cf4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018cf9:	50                   	push   eax
c0018cfa:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018cff:	50                   	push   eax
c0018d00:	56                   	push   esi
c0018d01:	e8 b2 fb ff ff       	call   c00188b8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018d06:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018d0a:	0f b6 c0             	movzx  eax,al
c0018d0d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018d11:	83 c4 2c             	add    esp,0x2c
c0018d14:	5b                   	pop    ebx
c0018d15:	5e                   	pop    esi
c0018d16:	5f                   	pop    edi
c0018d17:	5d                   	pop    ebp
c0018d18:	eb 8c                	jmp    c0018ca6 <PCI::checkBus(unsigned char)>
c0018d1a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018d1e:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018d24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018d28:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018d2c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018d30:	88 d3                	mov    bl,dl
c0018d32:	85 c0                	test   eax,eax
c0018d34:	74 33                	je     c0018d69 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018d36:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018d39:	85 d2                	test   edx,edx
c0018d3b:	74 28                	je     c0018d65 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d3d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018d43:	31 ef                	xor    edi,ebp
c0018d45:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018d4b:	75 18                	jne    c0018d65 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018d51:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018d57:	75 0c                	jne    c0018d65 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d59:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018d5f:	0f 84 d0 00 00 00    	je     c0018e35 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018d65:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d67:	eb c9                	jmp    c0018d32 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018d69:	66 81 f9 01 06       	cmp    cx,0x601
c0018d6e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018d72:	75 19                	jne    c0018d8d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018d74:	83 ec 0c             	sub    esp,0xc
c0018d77:	68 64 01 00 00       	push   0x164
c0018d7c:	e8 d0 f0 fe ff       	call   c0007e51 <malloc>
c0018d81:	89 c5                	mov    ebp,eax
c0018d83:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d86:	e8 47 0e 00 00       	call   c0019bd2 <SATABus::SATABus()>
c0018d8b:	eb 1e                	jmp    c0018dab <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018d8d:	66 81 f9 01 01       	cmp    cx,0x101
c0018d92:	75 60                	jne    c0018df4 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018d94:	83 ec 0c             	sub    esp,0xc
c0018d97:	68 70 02 00 00       	push   0x270
c0018d9c:	e8 b0 f0 fe ff       	call   c0007e51 <malloc>
c0018da1:	89 c5                	mov    ebp,eax
c0018da3:	89 04 24             	mov    DWORD PTR [esp],eax
c0018da6:	e8 cb 02 00 00       	call   c0019076 <IDE::IDE()>
c0018dab:	58                   	pop    eax
c0018dac:	5a                   	pop    edx
c0018dad:	55                   	push   ebp
c0018dae:	56                   	push   esi
c0018daf:	e8 6c 32 ff ff       	call   c000c020 <Device::addChild(Device*)>
c0018db4:	83 ec 1c             	sub    esp,0x1c
c0018db7:	b9 09 00 00 00       	mov    ecx,0x9
c0018dbc:	fc                   	cld    
c0018dbd:	89 e7                	mov    edi,esp
c0018dbf:	89 de                	mov    esi,ebx
c0018dc1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018dc3:	55                   	push   ebp
c0018dc4:	e8 9d 31 ff ff       	call   c000bf66 <Device::preOpenPCI(PCIDeviceInfo)>
c0018dc9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018dcc:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018dd0:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018dd8:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018de0:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018de8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018deb:	83 c4 4c             	add    esp,0x4c
c0018dee:	5b                   	pop    ebx
c0018def:	5e                   	pop    esi
c0018df0:	5f                   	pop    edi
c0018df1:	5d                   	pop    ebp
c0018df2:	ff e0                	jmp    eax
c0018df4:	83 ec 0c             	sub    esp,0xc
c0018df7:	68 58 01 00 00       	push   0x158
c0018dfc:	e8 50 f0 fe ff       	call   c0007e51 <malloc>
c0018e01:	89 c5                	mov    ebp,eax
c0018e03:	58                   	pop    eax
c0018e04:	5a                   	pop    edx
c0018e05:	68 c6 f1 01 c0       	push   0xc001f1c6
c0018e0a:	55                   	push   ebp
c0018e0b:	e8 ae 34 ff ff       	call   c000c2be <DriverlessDevice::DriverlessDevice(char const*)>
c0018e10:	59                   	pop    ecx
c0018e11:	5f                   	pop    edi
c0018e12:	55                   	push   ebp
c0018e13:	56                   	push   esi
c0018e14:	e8 07 32 ff ff       	call   c000c020 <Device::addChild(Device*)>
c0018e19:	b9 09 00 00 00       	mov    ecx,0x9
c0018e1e:	fc                   	cld    
c0018e1f:	89 df                	mov    edi,ebx
c0018e21:	89 de                	mov    esi,ebx
c0018e23:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e25:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018e29:	83 c4 2c             	add    esp,0x2c
c0018e2c:	5b                   	pop    ebx
c0018e2d:	5e                   	pop    esi
c0018e2e:	5f                   	pop    edi
c0018e2f:	5d                   	pop    ebp
c0018e30:	e9 31 31 ff ff       	jmp    c000bf66 <Device::preOpenPCI(PCIDeviceInfo)>
c0018e35:	83 c4 1c             	add    esp,0x1c
c0018e38:	5b                   	pop    ebx
c0018e39:	5e                   	pop    esi
c0018e3a:	5f                   	pop    edi
c0018e3b:	5d                   	pop    ebp
c0018e3c:	c3                   	ret    
c0018e3d:	90                   	nop

c0018e3e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018e3e:	55                   	push   ebp
c0018e3f:	57                   	push   edi
c0018e40:	56                   	push   esi
c0018e41:	53                   	push   ebx
c0018e42:	83 ec 68             	sub    esp,0x68
c0018e45:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018e49:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018e50:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018e54:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018e5b:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018e60:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018e64:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018e6b:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018e70:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018e74:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018e79:	6a 0c                	push   0xc
c0018e7b:	57                   	push   edi
c0018e7c:	53                   	push   ebx
c0018e7d:	56                   	push   esi
c0018e7e:	55                   	push   ebp
c0018e7f:	e8 86 f8 ff ff       	call   c001870a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e84:	83 c4 20             	add    esp,0x20
c0018e87:	57                   	push   edi
c0018e88:	53                   	push   ebx
c0018e89:	56                   	push   esi
c0018e8a:	55                   	push   ebp
c0018e8b:	e8 6e f9 ff ff       	call   c00187fe <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018e90:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018e95:	57                   	push   edi
c0018e96:	53                   	push   ebx
c0018e97:	56                   	push   esi
c0018e98:	55                   	push   ebp
c0018e99:	e8 f6 f9 ff ff       	call   c0018894 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018e9e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018ea2:	83 c4 14             	add    esp,0x14
c0018ea5:	6a 3c                	push   0x3c
c0018ea7:	57                   	push   edi
c0018ea8:	53                   	push   ebx
c0018ea9:	56                   	push   esi
c0018eaa:	55                   	push   ebp
c0018eab:	e8 5a f8 ff ff       	call   c001870a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018eb0:	0f b6 c4             	movzx  eax,ah
c0018eb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018eb7:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018ebb:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018ebf:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c0018ec4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018eca:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018ed0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018ed4:	83 c4 20             	add    esp,0x20
c0018ed7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018edc:	74 30                	je     c0018f0e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018ede:	31 c0                	xor    eax,eax
c0018ee0:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018ee4:	7e 28                	jle    c0018f0e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018ee6:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018eee:	39 cb                	cmp    ebx,ecx
c0018ef0:	75 19                	jne    c0018f0b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018ef2:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018efa:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018efe:	75 0b                	jne    c0018f0b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018f00:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018f07:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018f0b:	40                   	inc    eax
c0018f0c:	eb d2                	jmp    c0018ee0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018f0e:	31 d2                	xor    edx,edx
c0018f10:	83 ec 0c             	sub    esp,0xc
c0018f13:	57                   	push   edi
c0018f14:	53                   	push   ebx
c0018f15:	56                   	push   esi
c0018f16:	52                   	push   edx
c0018f17:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018f1b:	55                   	push   ebp
c0018f1c:	e8 bf f9 ff ff       	call   c00188e0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f25:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018f29:	42                   	inc    edx
c0018f2a:	83 c4 20             	add    esp,0x20
c0018f2d:	83 fa 06             	cmp    edx,0x6
c0018f30:	75 de                	jne    c0018f10 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018f32:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f37:	83 ec 0c             	sub    esp,0xc
c0018f3a:	86 e0                	xchg   al,ah
c0018f3c:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018f41:	6a 02                	push   0x2
c0018f43:	57                   	push   edi
c0018f44:	53                   	push   ebx
c0018f45:	56                   	push   esi
c0018f46:	55                   	push   ebp
c0018f47:	e8 be f7 ff ff       	call   c001870a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f4c:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018f51:	83 c4 20             	add    esp,0x20
c0018f54:	57                   	push   edi
c0018f55:	53                   	push   ebx
c0018f56:	56                   	push   esi
c0018f57:	55                   	push   ebp
c0018f58:	e8 eb f8 ff ff       	call   c0018848 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018f5d:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018f61:	57                   	push   edi
c0018f62:	53                   	push   ebx
c0018f63:	56                   	push   esi
c0018f64:	55                   	push   ebp
c0018f65:	e8 48 f8 ff ff       	call   c00187b2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f6a:	b9 09 00 00 00       	mov    ecx,0x9
c0018f6f:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018f74:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018f78:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018f7c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018f80:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018f84:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018f88:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018f8c:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018f90:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018f94:	83 ec 0c             	sub    esp,0xc
c0018f97:	fc                   	cld    
c0018f98:	89 e7                	mov    edi,esp
c0018f9a:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018f9e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018fa0:	55                   	push   ebp
c0018fa1:	e8 26 fd ff ff       	call   c0018ccc <PCI::foundDevice(PCIDeviceInfo)>
c0018fa6:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018fac:	5b                   	pop    ebx
c0018fad:	5e                   	pop    esi
c0018fae:	5f                   	pop    edi
c0018faf:	5d                   	pop    ebp
c0018fb0:	c3                   	ret    
c0018fb1:	90                   	nop

c0018fb2 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018fb2:	55                   	push   ebp
c0018fb3:	57                   	push   edi
c0018fb4:	56                   	push   esi
c0018fb5:	53                   	push   ebx
c0018fb6:	83 ec 0c             	sub    esp,0xc
c0018fb9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018fbd:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018fc2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018fc7:	6a 00                	push   0x0
c0018fc9:	56                   	push   esi
c0018fca:	57                   	push   edi
c0018fcb:	55                   	push   ebp
c0018fcc:	e8 e1 f7 ff ff       	call   c00187b2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fd1:	6a 00                	push   0x0
c0018fd3:	56                   	push   esi
c0018fd4:	57                   	push   edi
c0018fd5:	55                   	push   ebp
c0018fd6:	e8 63 fe ff ff       	call   c0018e3e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018fdb:	83 c4 20             	add    esp,0x20
c0018fde:	6a 00                	push   0x0
c0018fe0:	56                   	push   esi
c0018fe1:	57                   	push   edi
c0018fe2:	55                   	push   ebp
c0018fe3:	e8 ee f7 ff ff       	call   c00187d6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018fe8:	83 c4 10             	add    esp,0x10
c0018feb:	84 c0                	test   al,al
c0018fed:	79 27                	jns    c0019016 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018fef:	bb 01 00 00 00       	mov    ebx,0x1
c0018ff4:	53                   	push   ebx
c0018ff5:	56                   	push   esi
c0018ff6:	57                   	push   edi
c0018ff7:	55                   	push   ebp
c0018ff8:	e8 b5 f7 ff ff       	call   c00187b2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018ffd:	83 c4 10             	add    esp,0x10
c0019000:	66 40                	inc    ax
c0019002:	74 0c                	je     c0019010 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0019004:	53                   	push   ebx
c0019005:	56                   	push   esi
c0019006:	57                   	push   edi
c0019007:	55                   	push   ebp
c0019008:	e8 31 fe ff ff       	call   c0018e3e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001900d:	83 c4 10             	add    esp,0x10
c0019010:	43                   	inc    ebx
c0019011:	83 fb 08             	cmp    ebx,0x8
c0019014:	75 de                	jne    c0018ff4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0019016:	83 c4 0c             	add    esp,0xc
c0019019:	5b                   	pop    ebx
c001901a:	5e                   	pop    esi
c001901b:	5f                   	pop    edi
c001901c:	5d                   	pop    ebp
c001901d:	c3                   	ret    

c001901e <PCI::detect()>:
c001901e:	56                   	push   esi
c001901f:	53                   	push   ebx
c0019020:	53                   	push   ebx
c0019021:	31 db                	xor    ebx,ebx
c0019023:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019027:	6a 00                	push   0x0
c0019029:	6a 00                	push   0x0
c001902b:	6a 00                	push   0x0
c001902d:	56                   	push   esi
c001902e:	e8 a3 f7 ff ff       	call   c00187d6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0019033:	83 c4 10             	add    esp,0x10
c0019036:	a8 80                	test   al,0x80
c0019038:	75 21                	jne    c001905b <PCI::detect()+0x3d>
c001903a:	51                   	push   ecx
c001903b:	51                   	push   ecx
c001903c:	6a 00                	push   0x0
c001903e:	56                   	push   esi
c001903f:	e8 62 fc ff ff       	call   c0018ca6 <PCI::checkBus(unsigned char)>
c0019044:	83 c4 10             	add    esp,0x10
c0019047:	eb 24                	jmp    c001906d <PCI::detect()+0x4f>
c0019049:	52                   	push   edx
c001904a:	52                   	push   edx
c001904b:	53                   	push   ebx
c001904c:	43                   	inc    ebx
c001904d:	56                   	push   esi
c001904e:	e8 53 fc ff ff       	call   c0018ca6 <PCI::checkBus(unsigned char)>
c0019053:	83 c4 10             	add    esp,0x10
c0019056:	83 fb 08             	cmp    ebx,0x8
c0019059:	74 12                	je     c001906d <PCI::detect()+0x4f>
c001905b:	53                   	push   ebx
c001905c:	6a 00                	push   0x0
c001905e:	6a 00                	push   0x0
c0019060:	56                   	push   esi
c0019061:	e8 4c f7 ff ff       	call   c00187b2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019066:	83 c4 10             	add    esp,0x10
c0019069:	66 40                	inc    ax
c001906b:	74 dc                	je     c0019049 <PCI::detect()+0x2b>
c001906d:	58                   	pop    eax
c001906e:	5b                   	pop    ebx
c001906f:	5e                   	pop    esi
c0019070:	c3                   	ret    
c0019071:	90                   	nop

c0019072 <IDE::close(int, int, void*)>:
c0019072:	83 c8 ff             	or     eax,0xffffffff
c0019075:	c3                   	ret    

c0019076 <IDE::IDE()>:
c0019076:	83 ec 0c             	sub    esp,0xc
c0019079:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001907d:	83 ec 08             	sub    esp,0x8
c0019080:	68 0c f2 01 c0       	push   0xc001f20c
c0019085:	50                   	push   eax
c0019086:	e8 d9 32 ff ff       	call   c000c364 <HardDiskController::HardDiskController(char const*)>
c001908b:	83 c4 10             	add    esp,0x10
c001908e:	ba 9c f2 01 c0       	mov    edx,0xc001f29c
c0019093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019097:	89 10                	mov    DWORD PTR [eax],edx
c0019099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001909d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00190a4:	90                   	nop
c00190a5:	83 c4 0c             	add    esp,0xc
c00190a8:	c3                   	ret    
c00190a9:	90                   	nop

c00190aa <IDE::prepareInterrupt(unsigned char)>:
c00190aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00190af:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00190b3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00190bb:	c3                   	ret    

c00190bc <selectDrive(unsigned char, unsigned char)>:
c00190bc:	c3                   	ret    
c00190bd:	90                   	nop

c00190be <IDE::getBase(unsigned char)>:
c00190be:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00190c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00190c7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00190cf:	c3                   	ret    

c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00190d0:	55                   	push   ebp
c00190d1:	57                   	push   edi
c00190d2:	56                   	push   esi
c00190d3:	53                   	push   ebx
c00190d4:	83 ec 1c             	sub    esp,0x1c
c00190d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00190db:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00190df:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00190e2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00190e6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00190ea:	80 f9 03             	cmp    cl,0x3
c00190ed:	77 51                	ja     c0019140 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00190ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00190f3:	0f b6 f2             	movzx  esi,dl
c00190f6:	0f b6 db             	movzx  ebx,bl
c00190f9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00190fc:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0019100:	83 ca 80             	or     edx,0xffffff80
c0019103:	0f b6 d2             	movzx  edx,dl
c0019106:	52                   	push   edx
c0019107:	6a 0c                	push   0xc
c0019109:	56                   	push   esi
c001910a:	57                   	push   edi
c001910b:	e8 c0 ff ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019110:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0019115:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019119:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001911d:	ee                   	out    dx,al
c001911e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0019123:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0019127:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001912b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001912f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019137:	83 c4 2c             	add    esp,0x2c
c001913a:	5b                   	pop    ebx
c001913b:	5e                   	pop    esi
c001913c:	5f                   	pop    edi
c001913d:	5d                   	pop    ebp
c001913e:	eb 90                	jmp    c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019140:	80 fb 07             	cmp    bl,0x7
c0019143:	77 12                	ja     c0019157 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0019145:	0f b6 d2             	movzx  edx,dl
c0019148:	0f b6 db             	movzx  ebx,bl
c001914b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0019153:	89 da                	mov    edx,ebx
c0019155:	eb 2f                	jmp    c0019186 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019157:	80 fb 0d             	cmp    bl,0xd
c001915a:	77 13                	ja     c001916f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001915c:	0f b6 d2             	movzx  edx,dl
c001915f:	0f b6 db             	movzx  ebx,bl
c0019162:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0019169:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001916d:	eb 17                	jmp    c0019186 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001916f:	80 fb 15             	cmp    bl,0x15
c0019172:	77 13                	ja     c0019187 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0019174:	0f b6 d2             	movzx  edx,dl
c0019177:	0f b6 db             	movzx  ebx,bl
c001917a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0019182:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0019186:	ee                   	out    dx,al
c0019187:	83 c4 1c             	add    esp,0x1c
c001918a:	5b                   	pop    ebx
c001918b:	5e                   	pop    esi
c001918c:	5f                   	pop    edi
c001918d:	5d                   	pop    ebp
c001918e:	c3                   	ret    
c001918f:	90                   	nop

c0019190 <IDE::read(unsigned char, unsigned char)>:
c0019190:	55                   	push   ebp
c0019191:	57                   	push   edi
c0019192:	56                   	push   esi
c0019193:	53                   	push   ebx
c0019194:	83 ec 1c             	sub    esp,0x1c
c0019197:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001919b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001919f:	8d 43 f8             	lea    eax,[ebx-0x8]
c00191a2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00191a6:	3c 03                	cmp    al,0x3
c00191a8:	77 43                	ja     c00191ed <IDE::read(unsigned char, unsigned char)+0x5d>
c00191aa:	0f b6 f2             	movzx  esi,dl
c00191ad:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00191b0:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00191b4:	83 c8 80             	or     eax,0xffffff80
c00191b7:	0f b6 c0             	movzx  eax,al
c00191ba:	50                   	push   eax
c00191bb:	6a 0c                	push   0xc
c00191bd:	56                   	push   esi
c00191be:	57                   	push   edi
c00191bf:	e8 0c ff ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191c4:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00191c9:	0f b6 c3             	movzx  eax,bl
c00191cc:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00191d0:	ec                   	in     al,dx
c00191d1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00191d5:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00191da:	52                   	push   edx
c00191db:	6a 0c                	push   0xc
c00191dd:	56                   	push   esi
c00191de:	57                   	push   edi
c00191df:	e8 ec fe ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191e4:	83 c4 20             	add    esp,0x20
c00191e7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00191eb:	eb 49                	jmp    c0019236 <IDE::read(unsigned char, unsigned char)+0xa6>
c00191ed:	80 fb 07             	cmp    bl,0x7
c00191f0:	77 12                	ja     c0019204 <IDE::read(unsigned char, unsigned char)+0x74>
c00191f2:	0f b6 d2             	movzx  edx,dl
c00191f5:	0f b6 c3             	movzx  eax,bl
c00191f8:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0019200:	89 c2                	mov    edx,eax
c0019202:	eb 31                	jmp    c0019235 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019204:	80 fb 0d             	cmp    bl,0xd
c0019207:	77 13                	ja     c001921c <IDE::read(unsigned char, unsigned char)+0x8c>
c0019209:	0f b6 d2             	movzx  edx,dl
c001920c:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0019213:	0f b6 d3             	movzx  edx,bl
c0019216:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001921a:	eb 19                	jmp    c0019235 <IDE::read(unsigned char, unsigned char)+0xa5>
c001921c:	31 c0                	xor    eax,eax
c001921e:	80 fb 15             	cmp    bl,0x15
c0019221:	77 13                	ja     c0019236 <IDE::read(unsigned char, unsigned char)+0xa6>
c0019223:	0f b6 d2             	movzx  edx,dl
c0019226:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001922e:	0f b6 d3             	movzx  edx,bl
c0019231:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0019235:	ec                   	in     al,dx
c0019236:	83 c4 1c             	add    esp,0x1c
c0019239:	5b                   	pop    ebx
c001923a:	5e                   	pop    esi
c001923b:	5f                   	pop    edi
c001923c:	5d                   	pop    ebp
c001923d:	c3                   	ret    

c001923e <IDE::waitInterrupt(unsigned char)>:
c001923e:	57                   	push   edi
c001923f:	56                   	push   esi
c0019240:	31 f6                	xor    esi,esi
c0019242:	53                   	push   ebx
c0019243:	83 ec 10             	sub    esp,0x10
c0019246:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001924a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001924e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019252:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019257:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001925e:	84 db                	test   bl,bl
c0019260:	75 33                	jne    c0019295 <IDE::waitInterrupt(unsigned char)+0x57>
c0019262:	52                   	push   edx
c0019263:	6a 0c                	push   0xc
c0019265:	50                   	push   eax
c0019266:	57                   	push   edi
c0019267:	e8 24 ff ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c001926c:	83 c4 10             	add    esp,0x10
c001926f:	a8 01                	test   al,0x1
c0019271:	75 2a                	jne    c001929d <IDE::waitInterrupt(unsigned char)+0x5f>
c0019273:	f7 c6 04 00 00 00    	test   esi,0x4
c0019279:	75 12                	jne    c001928d <IDE::waitInterrupt(unsigned char)+0x4f>
c001927b:	83 fe 32             	cmp    esi,0x32
c001927e:	7e 0d                	jle    c001928d <IDE::waitInterrupt(unsigned char)+0x4f>
c0019280:	83 ec 0c             	sub    esp,0xc
c0019283:	6a 64                	push   0x64
c0019285:	e8 fa aa ff ff       	call   c0013d84 <milliTenthSleep(unsigned int)>
c001928a:	83 c4 10             	add    esp,0x10
c001928d:	83 fe 3c             	cmp    esi,0x3c
c0019290:	74 0b                	je     c001929d <IDE::waitInterrupt(unsigned char)+0x5f>
c0019292:	46                   	inc    esi
c0019293:	eb bd                	jmp    c0019252 <IDE::waitInterrupt(unsigned char)+0x14>
c0019295:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001929d:	83 c4 10             	add    esp,0x10
c00192a0:	88 d8                	mov    al,bl
c00192a2:	5b                   	pop    ebx
c00192a3:	5e                   	pop    esi
c00192a4:	5f                   	pop    edi
c00192a5:	c3                   	ret    

c00192a6 <ideChannel0IRQHandler(regs*, void*)>:
c00192a6:	83 ec 10             	sub    esp,0x10
c00192a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00192ad:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00192b4:	6a 07                	push   0x7
c00192b6:	6a 00                	push   0x0
c00192b8:	50                   	push   eax
c00192b9:	e8 d2 fe ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c00192be:	83 c4 1c             	add    esp,0x1c
c00192c1:	c3                   	ret    

c00192c2 <ideChannel1IRQHandler(regs*, void*)>:
c00192c2:	83 ec 10             	sub    esp,0x10
c00192c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00192c9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00192d0:	6a 07                	push   0x7
c00192d2:	6a 01                	push   0x1
c00192d4:	50                   	push   eax
c00192d5:	e8 b6 fe ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c00192da:	83 c4 1c             	add    esp,0x1c
c00192dd:	c3                   	ret    

c00192de <IDE::enableIRQs(unsigned char, bool)>:
c00192de:	57                   	push   edi
c00192df:	56                   	push   esi
c00192e0:	be 04 00 00 00       	mov    esi,0x4
c00192e5:	53                   	push   ebx
c00192e6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00192eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00192ef:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00192f4:	0f 94 c0             	sete   al
c00192f7:	01 c0                	add    eax,eax
c00192f9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0019300:	0f b6 c0             	movzx  eax,al
c0019303:	50                   	push   eax
c0019304:	6a 0c                	push   0xc
c0019306:	57                   	push   edi
c0019307:	53                   	push   ebx
c0019308:	e8 c3 fd ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001930d:	83 c4 10             	add    esp,0x10
c0019310:	50                   	push   eax
c0019311:	6a 0c                	push   0xc
c0019313:	57                   	push   edi
c0019314:	53                   	push   ebx
c0019315:	e8 76 fe ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c001931a:	83 c4 10             	add    esp,0x10
c001931d:	4e                   	dec    esi
c001931e:	75 f0                	jne    c0019310 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0019320:	5b                   	pop    ebx
c0019321:	5e                   	pop    esi
c0019322:	5f                   	pop    edi
c0019323:	c3                   	ret    

c0019324 <IDE::open(int, int, void*)>:
c0019324:	55                   	push   ebp
c0019325:	57                   	push   edi
c0019326:	56                   	push   esi
c0019327:	53                   	push   ebx
c0019328:	83 ec 1c             	sub    esp,0x1c
c001932b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001932f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0019338:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0019341:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0019348:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001934f:	0f 85 b0 02 00 00    	jne    c0019605 <IDE::open(int, int, void*)+0x2e1>
c0019355:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001935b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001935f:	83 e0 7f             	and    eax,0x7f
c0019362:	3c 05                	cmp    al,0x5
c0019364:	74 04                	je     c001936a <IDE::open(int, int, void*)+0x46>
c0019366:	3c 0f                	cmp    al,0xf
c0019368:	75 32                	jne    c001939c <IDE::open(int, int, void*)+0x78>
c001936a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0019370:	83 e0 fc             	and    eax,0xfffffffc
c0019373:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001937a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0019380:	83 e0 fc             	and    eax,0xfffffffc
c0019383:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001938a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0019390:	83 e0 fc             	and    eax,0xfffffffc
c0019393:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001939a:	eb 14                	jmp    c00193b0 <IDE::open(int, int, void*)+0x8c>
c001939c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00193a6:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00193b0:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00193b7:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00193be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00193c2:	89 c6                	mov    esi,eax
c00193c4:	bf f8 0c 00 00       	mov    edi,0xcf8
c00193c9:	c1 e6 10             	shl    esi,0x10
c00193cc:	89 e8                	mov    eax,ebp
c00193ce:	89 fa                	mov    edx,edi
c00193d0:	c1 e0 0b             	shl    eax,0xb
c00193d3:	09 f0                	or     eax,esi
c00193d5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00193dc:	c1 e6 08             	shl    esi,0x8
c00193df:	09 c6                	or     esi,eax
c00193e1:	89 f0                	mov    eax,esi
c00193e3:	0d 08 00 00 80       	or     eax,0x80000008
c00193e8:	ef                   	out    dx,eax
c00193e9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00193ee:	89 ca                	mov    edx,ecx
c00193f0:	ed                   	in     eax,dx
c00193f1:	c1 e8 10             	shr    eax,0x10
c00193f4:	3d ff ff 00 00       	cmp    eax,0xffff
c00193f9:	0f 84 f5 00 00 00    	je     c00194f4 <IDE::open(int, int, void*)+0x1d0>
c00193ff:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0019405:	89 fa                	mov    edx,edi
c0019407:	89 f0                	mov    eax,esi
c0019409:	ef                   	out    dx,eax
c001940a:	b0 fe                	mov    al,0xfe
c001940c:	89 ca                	mov    edx,ecx
c001940e:	ee                   	out    dx,al
c001940f:	89 f0                	mov    eax,esi
c0019411:	89 fa                	mov    edx,edi
c0019413:	ef                   	out    dx,eax
c0019414:	89 ca                	mov    edx,ecx
c0019416:	ed                   	in     eax,dx
c0019417:	3c fe                	cmp    al,0xfe
c0019419:	0f 85 a9 00 00 00    	jne    c00194c8 <IDE::open(int, int, void*)+0x1a4>
c001941f:	8b 15 38 09 02 c0    	mov    edx,DWORD PTR ds:0xc0020938
c0019425:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001942c:	74 33                	je     c0019461 <IDE::open(int, int, void*)+0x13d>
c001942e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019434:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0019438:	40                   	inc    eax
c0019439:	83 ec 0c             	sub    esp,0xc
c001943c:	0f b6 c0             	movzx  eax,al
c001943f:	50                   	push   eax
c0019440:	55                   	push   ebp
c0019441:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019445:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001944b:	51                   	push   ecx
c001944c:	e8 5b 59 ff ff       	call   c000edac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0019451:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0019456:	83 c4 1c             	add    esp,0x1c
c0019459:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001945f:	eb 0a                	jmp    c001946b <IDE::open(int, int, void*)+0x147>
c0019461:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001946b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0019472:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0019479:	c1 e1 10             	shl    ecx,0x10
c001947c:	c1 e0 08             	shl    eax,0x8
c001947f:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019484:	09 c1                	or     ecx,eax
c0019486:	89 fa                	mov    edx,edi
c0019488:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001948f:	c1 e0 0b             	shl    eax,0xb
c0019492:	09 c1                	or     ecx,eax
c0019494:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001949a:	89 c8                	mov    eax,ecx
c001949c:	ef                   	out    dx,eax
c001949d:	be fc 0c 00 00       	mov    esi,0xcfc
c00194a2:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00194a8:	89 f2                	mov    edx,esi
c00194aa:	ee                   	out    dx,al
c00194ab:	89 c8                	mov    eax,ecx
c00194ad:	89 fa                	mov    edx,edi
c00194af:	ef                   	out    dx,eax
c00194b0:	89 f2                	mov    edx,esi
c00194b2:	ed                   	in     eax,dx
c00194b3:	0f b6 c0             	movzx  eax,al
c00194b6:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00194bc:	74 46                	je     c0019504 <IDE::open(int, int, void*)+0x1e0>
c00194be:	83 ec 0c             	sub    esp,0xc
c00194c1:	68 24 f2 01 c0       	push   0xc001f224
c00194c6:	eb 34                	jmp    c00194fc <IDE::open(int, int, void*)+0x1d8>
c00194c8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00194d1:	75 17                	jne    c00194ea <IDE::open(int, int, void*)+0x1c6>
c00194d3:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00194d8:	74 07                	je     c00194e1 <IDE::open(int, int, void*)+0x1bd>
c00194da:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00194df:	75 09                	jne    c00194ea <IDE::open(int, int, void*)+0x1c6>
c00194e1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00194e8:	eb 1a                	jmp    c0019504 <IDE::open(int, int, void*)+0x1e0>
c00194ea:	83 ec 0c             	sub    esp,0xc
c00194ed:	68 2c f2 01 c0       	push   0xc001f22c
c00194f2:	eb 08                	jmp    c00194fc <IDE::open(int, int, void*)+0x1d8>
c00194f4:	83 ec 0c             	sub    esp,0xc
c00194f7:	68 5d f2 01 c0       	push   0xc001f25d
c00194fc:	e8 2e 72 ff ff       	call   c001072f <Krnl::panic(char const*)>
c0019501:	83 c4 10             	add    esp,0x10
c0019504:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001950b:	79 1a                	jns    c0019527 <IDE::open(int, int, void*)+0x203>
c001950d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0019513:	83 e0 fc             	and    eax,0xfffffffc
c0019516:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001951d:	83 c0 08             	add    eax,0x8
c0019520:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0019527:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001952d:	89 c2                	mov    edx,eax
c001952f:	83 e2 0f             	and    edx,0xf
c0019532:	66 83 fa 08          	cmp    dx,0x8
c0019536:	75 0a                	jne    c0019542 <IDE::open(int, int, void*)+0x21e>
c0019538:	83 e8 02             	sub    eax,0x2
c001953b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019542:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0019548:	89 c2                	mov    edx,eax
c001954a:	83 e2 0f             	and    edx,0xf
c001954d:	66 83 fa 08          	cmp    dx,0x8
c0019551:	75 0a                	jne    c001955d <IDE::open(int, int, void*)+0x239>
c0019553:	83 e8 02             	sub    eax,0x2
c0019556:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001955d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019564:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001956b:	89 d0                	mov    eax,edx
c001956d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019570:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019574:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0019578:	8d 4a 01             	lea    ecx,[edx+0x1]
c001957b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019580:	0f b6 c9             	movzx  ecx,cl
c0019583:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001958a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001958d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019591:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0019595:	8d 50 02             	lea    edx,[eax+0x2]
c0019598:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001959d:	0f b6 d2             	movzx  edx,dl
c00195a0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00195a6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195a9:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00195ad:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00195b1:	8d 48 03             	lea    ecx,[eax+0x3]
c00195b4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195b9:	0f b6 c9             	movzx  ecx,cl
c00195bc:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00195c2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00195c5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00195c9:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00195cd:	8d 50 04             	lea    edx,[eax+0x4]
c00195d0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00195d6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00195db:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00195e2:	66 85 f6             	test   si,si
c00195e5:	74 5b                	je     c0019642 <IDE::open(int, int, void*)+0x31e>
c00195e7:	0f b6 d2             	movzx  edx,dl
c00195ea:	83 c0 05             	add    eax,0x5
c00195ed:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195f0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00195f4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00195f8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00195fe:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019603:	eb 3d                	jmp    c0019642 <IDE::open(int, int, void*)+0x31e>
c0019605:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001960b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019612:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019619:	66 05 06 02          	add    ax,0x206
c001961d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019624:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001962b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019632:	66 05 06 02          	add    ax,0x206
c0019636:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001963d:	e9 e5 fe ff ff       	jmp    c0019527 <IDE::open(int, int, void*)+0x203>
c0019642:	50                   	push   eax
c0019643:	50                   	push   eax
c0019644:	6a 00                	push   0x0
c0019646:	53                   	push   ebx
c0019647:	e8 5e fa ff ff       	call   c00190aa <IDE::prepareInterrupt(unsigned char)>
c001964c:	5a                   	pop    edx
c001964d:	59                   	pop    ecx
c001964e:	6a 01                	push   0x1
c0019650:	53                   	push   ebx
c0019651:	e8 54 fa ff ff       	call   c00190aa <IDE::prepareInterrupt(unsigned char)>
c0019656:	83 c4 0c             	add    esp,0xc
c0019659:	6a 00                	push   0x0
c001965b:	6a 00                	push   0x0
c001965d:	53                   	push   ebx
c001965e:	e8 7b fc ff ff       	call   c00192de <IDE::enableIRQs(unsigned char, bool)>
c0019663:	83 c4 0c             	add    esp,0xc
c0019666:	6a 00                	push   0x0
c0019668:	6a 01                	push   0x1
c001966a:	53                   	push   ebx
c001966b:	e8 6e fc ff ff       	call   c00192de <IDE::enableIRQs(unsigned char, bool)>
c0019670:	83 c4 10             	add    esp,0x10
c0019673:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001967a:	74 34                	je     c00196b0 <IDE::open(int, int, void*)+0x38c>
c001967c:	83 ec 0c             	sub    esp,0xc
c001967f:	53                   	push   ebx
c0019680:	6a 01                	push   0x1
c0019682:	68 a6 92 01 c0       	push   0xc00192a6
c0019687:	6a 0e                	push   0xe
c0019689:	53                   	push   ebx
c001968a:	e8 3d 29 ff ff       	call   c000bfcc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001968f:	83 c4 14             	add    esp,0x14
c0019692:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019698:	53                   	push   ebx
c0019699:	6a 01                	push   0x1
c001969b:	68 c2 92 01 c0       	push   0xc00192c2
c00196a0:	6a 0f                	push   0xf
c00196a2:	53                   	push   ebx
c00196a3:	e8 24 29 ff ff       	call   c000bfcc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196a8:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00196ae:	eb 38                	jmp    c00196e8 <IDE::open(int, int, void*)+0x3c4>
c00196b0:	83 ec 0c             	sub    esp,0xc
c00196b3:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00196bd:	53                   	push   ebx
c00196be:	6a 00                	push   0x0
c00196c0:	68 a6 92 01 c0       	push   0xc00192a6
c00196c5:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00196cb:	53                   	push   ebx
c00196cc:	e8 fb 28 ff ff       	call   c000bfcc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196d1:	83 c4 14             	add    esp,0x14
c00196d4:	53                   	push   ebx
c00196d5:	6a 00                	push   0x0
c00196d7:	68 c2 92 01 c0       	push   0xc00192c2
c00196dc:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00196e2:	53                   	push   ebx
c00196e3:	e8 e4 28 ff ff       	call   c000bfcc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00196ea:	83 c4 20             	add    esp,0x20
c00196ed:	83 ec 0c             	sub    esp,0xc
c00196f0:	53                   	push   ebx
c00196f1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00196f4:	83 c4 0c             	add    esp,0xc
c00196f7:	6a 07                	push   0x7
c00196f9:	6a 00                	push   0x0
c00196fb:	53                   	push   ebx
c00196fc:	e8 8f fa ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c0019701:	83 c4 0c             	add    esp,0xc
c0019704:	6a 07                	push   0x7
c0019706:	6a 01                	push   0x1
c0019708:	53                   	push   ebx
c0019709:	e8 82 fa ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c001970e:	83 c4 0c             	add    esp,0xc
c0019711:	6a 01                	push   0x1
c0019713:	6a 00                	push   0x0
c0019715:	53                   	push   ebx
c0019716:	e8 c3 fb ff ff       	call   c00192de <IDE::enableIRQs(unsigned char, bool)>
c001971b:	83 c4 0c             	add    esp,0xc
c001971e:	6a 01                	push   0x1
c0019720:	6a 01                	push   0x1
c0019722:	53                   	push   ebx
c0019723:	e8 b6 fb ff ff       	call   c00192de <IDE::enableIRQs(unsigned char, bool)>
c0019728:	83 c4 2c             	add    esp,0x2c
c001972b:	31 c0                	xor    eax,eax
c001972d:	5b                   	pop    ebx
c001972e:	5e                   	pop    esi
c001972f:	5f                   	pop    edi
c0019730:	5d                   	pop    ebp
c0019731:	c3                   	ret    

c0019732 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0019732:	55                   	push   ebp
c0019733:	57                   	push   edi
c0019734:	56                   	push   esi
c0019735:	53                   	push   ebx
c0019736:	83 ec 1c             	sub    esp,0x1c
c0019739:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001973d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019741:	8d 50 f8             	lea    edx,[eax-0x8]
c0019744:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019748:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001974c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019750:	80 fa 03             	cmp    dl,0x3
c0019753:	77 5d                	ja     c00197b2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019755:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019759:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001975d:	0f b6 db             	movzx  ebx,bl
c0019760:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0019763:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0019767:	83 ca 80             	or     edx,0xffffff80
c001976a:	0f b6 d2             	movzx  edx,dl
c001976d:	52                   	push   edx
c001976e:	6a 0c                	push   0xc
c0019770:	53                   	push   ebx
c0019771:	56                   	push   esi
c0019772:	e8 59 f9 ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019777:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001977c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019780:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019784:	0f b6 c0             	movzx  eax,al
c0019787:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001978b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001978d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0019792:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0019796:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001979a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001979e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00197a6:	83 c4 2c             	add    esp,0x2c
c00197a9:	5b                   	pop    ebx
c00197aa:	5e                   	pop    esi
c00197ab:	5f                   	pop    edi
c00197ac:	5d                   	pop    ebp
c00197ad:	e9 1e f9 ff ff       	jmp    c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197b2:	3c 07                	cmp    al,0x7
c00197b4:	77 10                	ja     c00197c6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00197b6:	0f b6 db             	movzx  ebx,bl
c00197b9:	0f b6 d0             	movzx  edx,al
c00197bc:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00197c4:	eb 2d                	jmp    c00197f3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00197c6:	3c 0d                	cmp    al,0xd
c00197c8:	77 13                	ja     c00197dd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00197ca:	0f b6 db             	movzx  ebx,bl
c00197cd:	0f b6 c0             	movzx  eax,al
c00197d0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00197d7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00197db:	eb 16                	jmp    c00197f3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00197dd:	3c 15                	cmp    al,0x15
c00197df:	77 14                	ja     c00197f5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00197e1:	0f b6 db             	movzx  ebx,bl
c00197e4:	0f b6 c0             	movzx  eax,al
c00197e7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00197ef:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00197f3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00197f5:	83 c4 1c             	add    esp,0x1c
c00197f8:	5b                   	pop    ebx
c00197f9:	5e                   	pop    esi
c00197fa:	5f                   	pop    edi
c00197fb:	5d                   	pop    ebp
c00197fc:	c3                   	ret    
c00197fd:	90                   	nop

c00197fe <IDE::detect()>:
c00197fe:	55                   	push   ebp
c00197ff:	57                   	push   edi
c0019800:	56                   	push   esi
c0019801:	53                   	push   ebx
c0019802:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019808:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001980f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0019816:	0f 85 97 02 00 00    	jne    c0019ab3 <IDE::detect()+0x2b5>
c001981c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0019823:	31 f6                	xor    esi,esi
c0019825:	31 ed                	xor    ebp,ebp
c0019827:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001982f:	89 e8                	mov    eax,ebp
c0019831:	c1 e0 06             	shl    eax,0x6
c0019834:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001983c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019840:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019844:	c1 e0 04             	shl    eax,0x4
c0019847:	83 c8 a0             	or     eax,0xffffffa0
c001984a:	0f b6 c0             	movzx  eax,al
c001984d:	50                   	push   eax
c001984e:	6a 06                	push   0x6
c0019850:	56                   	push   esi
c0019851:	53                   	push   ebx
c0019852:	e8 79 f8 ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019857:	83 c4 0c             	add    esp,0xc
c001985a:	6a 0c                	push   0xc
c001985c:	56                   	push   esi
c001985d:	53                   	push   ebx
c001985e:	e8 2d f9 ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c0019863:	83 c4 0c             	add    esp,0xc
c0019866:	6a 0c                	push   0xc
c0019868:	56                   	push   esi
c0019869:	53                   	push   ebx
c001986a:	e8 21 f9 ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c001986f:	83 c4 0c             	add    esp,0xc
c0019872:	6a 0c                	push   0xc
c0019874:	56                   	push   esi
c0019875:	53                   	push   ebx
c0019876:	e8 15 f9 ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c001987b:	83 c4 0c             	add    esp,0xc
c001987e:	6a 0c                	push   0xc
c0019880:	56                   	push   esi
c0019881:	53                   	push   ebx
c0019882:	e8 09 f9 ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c0019887:	68 ec 00 00 00       	push   0xec
c001988c:	6a 07                	push   0x7
c001988e:	56                   	push   esi
c001988f:	53                   	push   ebx
c0019890:	e8 3b f8 ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019895:	83 c4 1c             	add    esp,0x1c
c0019898:	6a 0c                	push   0xc
c001989a:	56                   	push   esi
c001989b:	53                   	push   ebx
c001989c:	e8 ef f8 ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c00198a1:	83 c4 0c             	add    esp,0xc
c00198a4:	6a 0c                	push   0xc
c00198a6:	56                   	push   esi
c00198a7:	53                   	push   ebx
c00198a8:	e8 e3 f8 ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c00198ad:	83 c4 0c             	add    esp,0xc
c00198b0:	6a 0c                	push   0xc
c00198b2:	56                   	push   esi
c00198b3:	53                   	push   ebx
c00198b4:	e8 d7 f8 ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c00198b9:	83 c4 0c             	add    esp,0xc
c00198bc:	6a 0c                	push   0xc
c00198be:	56                   	push   esi
c00198bf:	53                   	push   ebx
c00198c0:	e8 cb f8 ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c00198c5:	83 c4 0c             	add    esp,0xc
c00198c8:	6a 0c                	push   0xc
c00198ca:	56                   	push   esi
c00198cb:	53                   	push   ebx
c00198cc:	e8 bf f8 ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c00198d1:	83 c4 10             	add    esp,0x10
c00198d4:	84 c0                	test   al,al
c00198d6:	0f 84 5f 01 00 00    	je     c0019a3b <IDE::detect()+0x23d>
c00198dc:	31 ff                	xor    edi,edi
c00198de:	50                   	push   eax
c00198df:	6a 0c                	push   0xc
c00198e1:	56                   	push   esi
c00198e2:	53                   	push   ebx
c00198e3:	e8 a8 f8 ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c00198e8:	83 c4 10             	add    esp,0x10
c00198eb:	a8 01                	test   al,0x1
c00198ed:	0f 85 69 01 00 00    	jne    c0019a5c <IDE::detect()+0x25e>
c00198f3:	84 c0                	test   al,al
c00198f5:	78 04                	js     c00198fb <IDE::detect()+0xfd>
c00198f7:	a8 08                	test   al,0x8
c00198f9:	75 23                	jne    c001991e <IDE::detect()+0x120>
c00198fb:	47                   	inc    edi
c00198fc:	81 ff 17 01 00 00    	cmp    edi,0x117
c0019902:	7e da                	jle    c00198de <IDE::detect()+0xe0>
c0019904:	83 ec 0c             	sub    esp,0xc
c0019907:	6a 32                	push   0x32
c0019909:	e8 76 a4 ff ff       	call   c0013d84 <milliTenthSleep(unsigned int)>
c001990e:	83 c4 10             	add    esp,0x10
c0019911:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0019917:	75 c5                	jne    c00198de <IDE::detect()+0xe0>
c0019919:	e9 3e 01 00 00       	jmp    c0019a5c <IDE::detect()+0x25e>
c001991e:	31 c9                	xor    ecx,ecx
c0019920:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019924:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019928:	83 ec 0c             	sub    esp,0xc
c001992b:	68 80 00 00 00       	push   0x80
c0019930:	57                   	push   edi
c0019931:	6a 00                	push   0x0
c0019933:	56                   	push   esi
c0019934:	53                   	push   ebx
c0019935:	e8 f8 fd ff ff       	call   c0019732 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001993a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001993f:	89 e8                	mov    eax,ebp
c0019941:	89 d1                	mov    ecx,edx
c0019943:	c1 e0 06             	shl    eax,0x6
c0019946:	01 d8                	add    eax,ebx
c0019948:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001994f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0019956:	89 f2                	mov    edx,esi
c0019958:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001995e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0019962:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0019968:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001996c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0019973:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001997b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0019982:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001998a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019990:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0019997:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001999d:	8d 54 24 58          	lea    edx,[esp+0x58]
c00199a1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00199a5:	83 c4 20             	add    esp,0x20
c00199a8:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00199ab:	83 c0 02             	add    eax,0x2
c00199ae:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00199b4:	83 c7 02             	add    edi,0x2
c00199b7:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00199ba:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00199c0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00199c4:	75 e2                	jne    c00199a8 <IDE::detect()+0x1aa>
c00199c6:	89 e8                	mov    eax,ebp
c00199c8:	c1 e0 06             	shl    eax,0x6
c00199cb:	01 d8                	add    eax,ebx
c00199cd:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00199d3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00199da:	66 c1 ea 09          	shr    dx,0x9
c00199de:	83 e2 01             	and    edx,0x1
c00199e1:	84 c9                	test   cl,cl
c00199e3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00199e9:	75 22                	jne    c0019a0d <IDE::detect()+0x20f>
c00199eb:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00199f2:	74 46                	je     c0019a3a <IDE::detect()+0x23c>
c00199f4:	83 ec 0c             	sub    esp,0xc
c00199f7:	68 7c 01 00 00       	push   0x17c
c00199fc:	e8 50 e4 fe ff       	call   c0007e51 <malloc>
c0019a01:	89 c7                	mov    edi,eax
c0019a03:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a06:	e8 11 05 00 00       	call   c0019f1c <ATA::ATA()>
c0019a0b:	eb 17                	jmp    c0019a24 <IDE::detect()+0x226>
c0019a0d:	83 ec 0c             	sub    esp,0xc
c0019a10:	68 84 01 00 00       	push   0x184
c0019a15:	e8 37 e4 fe ff       	call   c0007e51 <malloc>
c0019a1a:	89 c7                	mov    edi,eax
c0019a1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a1f:	e8 f0 0a 00 00       	call   c001a514 <ATAPI::ATAPI()>
c0019a24:	5a                   	pop    edx
c0019a25:	59                   	pop    ecx
c0019a26:	57                   	push   edi
c0019a27:	53                   	push   ebx
c0019a28:	e8 f3 25 ff ff       	call   c000c020 <Device::addChild(Device*)>
c0019a2d:	8b 07                	mov    eax,DWORD PTR [edi]
c0019a2f:	53                   	push   ebx
c0019a30:	55                   	push   ebp
c0019a31:	6a 00                	push   0x0
c0019a33:	57                   	push   edi
c0019a34:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a37:	83 c4 20             	add    esp,0x20
c0019a3a:	45                   	inc    ebp
c0019a3b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019a40:	74 0d                	je     c0019a4f <IDE::detect()+0x251>
c0019a42:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019a4a:	e9 e0 fd ff ff       	jmp    c001982f <IDE::detect()+0x31>
c0019a4f:	4e                   	dec    esi
c0019a50:	74 61                	je     c0019ab3 <IDE::detect()+0x2b5>
c0019a52:	be 01 00 00 00       	mov    esi,0x1
c0019a57:	e9 cb fd ff ff       	jmp    c0019827 <IDE::detect()+0x29>
c0019a5c:	50                   	push   eax
c0019a5d:	6a 04                	push   0x4
c0019a5f:	56                   	push   esi
c0019a60:	53                   	push   ebx
c0019a61:	e8 2a f7 ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c0019a66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019a6a:	83 c4 0c             	add    esp,0xc
c0019a6d:	6a 05                	push   0x5
c0019a6f:	56                   	push   esi
c0019a70:	53                   	push   ebx
c0019a71:	e8 1a f7 ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c0019a76:	83 c4 10             	add    esp,0x10
c0019a79:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019a7d:	80 fa 14             	cmp    dl,0x14
c0019a80:	75 04                	jne    c0019a86 <IDE::detect()+0x288>
c0019a82:	3c eb                	cmp    al,0xeb
c0019a84:	eb 07                	jmp    c0019a8d <IDE::detect()+0x28f>
c0019a86:	3c 96                	cmp    al,0x96
c0019a88:	75 b1                	jne    c0019a3b <IDE::detect()+0x23d>
c0019a8a:	80 fa 69             	cmp    dl,0x69
c0019a8d:	75 ac                	jne    c0019a3b <IDE::detect()+0x23d>
c0019a8f:	68 a1 00 00 00       	push   0xa1
c0019a94:	6a 07                	push   0x7
c0019a96:	56                   	push   esi
c0019a97:	53                   	push   ebx
c0019a98:	e8 33 f6 ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a9d:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019aa4:	e8 db a2 ff ff       	call   c0013d84 <milliTenthSleep(unsigned int)>
c0019aa9:	83 c4 10             	add    esp,0x10
c0019aac:	b1 01                	mov    cl,0x1
c0019aae:	e9 6d fe ff ff       	jmp    c0019920 <IDE::detect()+0x122>
c0019ab3:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019ab9:	5b                   	pop    ebx
c0019aba:	5e                   	pop    esi
c0019abb:	5f                   	pop    edi
c0019abc:	5d                   	pop    ebp
c0019abd:	c3                   	ret    

c0019abe <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019abe:	55                   	push   ebp
c0019abf:	57                   	push   edi
c0019ac0:	56                   	push   esi
c0019ac1:	53                   	push   ebx
c0019ac2:	83 ec 1c             	sub    esp,0x1c
c0019ac5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019ac9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019acd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019ad1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019ad5:	88 c3                	mov    bl,al
c0019ad7:	84 c0                	test   al,al
c0019ad9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019add:	0f 84 81 00 00 00    	je     c0019b64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019ae3:	83 ec 0c             	sub    esp,0xc
c0019ae6:	68 87 f2 01 c0       	push   0xc001f287
c0019aeb:	e8 f0 10 ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c0019af0:	83 c4 10             	add    esp,0x10
c0019af3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019af7:	3c 01                	cmp    al,0x1
c0019af9:	74 63                	je     c0019b5e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019afb:	3c 02                	cmp    al,0x2
c0019afd:	75 53                	jne    c0019b52 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019aff:	01 f6                	add    esi,esi
c0019b01:	09 ee                	or     esi,ebp
c0019b03:	50                   	push   eax
c0019b04:	89 f0                	mov    eax,esi
c0019b06:	6a 01                	push   0x1
c0019b08:	0f b6 f0             	movzx  esi,al
c0019b0b:	c1 e6 06             	shl    esi,0x6
c0019b0e:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019b16:	50                   	push   eax
c0019b17:	57                   	push   edi
c0019b18:	e8 73 f6 ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c0019b1d:	83 c4 10             	add    esp,0x10
c0019b20:	a8 01                	test   al,0x1
c0019b22:	74 02                	je     c0019b26 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019b24:	b3 07                	mov    bl,0x7
c0019b26:	a8 02                	test   al,0x2
c0019b28:	74 02                	je     c0019b2c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019b2a:	b3 03                	mov    bl,0x3
c0019b2c:	a8 04                	test   al,0x4
c0019b2e:	74 02                	je     c0019b32 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019b30:	b3 14                	mov    bl,0x14
c0019b32:	a8 08                	test   al,0x8
c0019b34:	74 02                	je     c0019b38 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019b36:	b3 03                	mov    bl,0x3
c0019b38:	a8 10                	test   al,0x10
c0019b3a:	74 02                	je     c0019b3e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019b3c:	b3 15                	mov    bl,0x15
c0019b3e:	a8 20                	test   al,0x20
c0019b40:	74 02                	je     c0019b44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019b42:	b3 03                	mov    bl,0x3
c0019b44:	a8 40                	test   al,0x40
c0019b46:	74 02                	je     c0019b4a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019b48:	b3 16                	mov    bl,0x16
c0019b4a:	84 c0                	test   al,al
c0019b4c:	79 16                	jns    c0019b64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b4e:	b3 0d                	mov    bl,0xd
c0019b50:	eb 12                	jmp    c0019b64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b52:	3c 03                	cmp    al,0x3
c0019b54:	74 0c                	je     c0019b62 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019b56:	3c 04                	cmp    al,0x4
c0019b58:	75 0a                	jne    c0019b64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b5a:	b3 08                	mov    bl,0x8
c0019b5c:	eb 06                	jmp    c0019b64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b5e:	b3 13                	mov    bl,0x13
c0019b60:	eb 02                	jmp    c0019b64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b62:	b3 17                	mov    bl,0x17
c0019b64:	83 c4 1c             	add    esp,0x1c
c0019b67:	88 d8                	mov    al,bl
c0019b69:	5b                   	pop    ebx
c0019b6a:	5e                   	pop    esi
c0019b6b:	5f                   	pop    edi
c0019b6c:	5d                   	pop    ebp
c0019b6d:	c3                   	ret    

c0019b6e <IDE::polling(unsigned char, unsigned int)>:
c0019b6e:	55                   	push   ebp
c0019b6f:	bd 04 00 00 00       	mov    ebp,0x4
c0019b74:	57                   	push   edi
c0019b75:	56                   	push   esi
c0019b76:	53                   	push   ebx
c0019b77:	83 ec 0c             	sub    esp,0xc
c0019b7a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019b7e:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019b82:	0f b6 f3             	movzx  esi,bl
c0019b85:	52                   	push   edx
c0019b86:	6a 0c                	push   0xc
c0019b88:	56                   	push   esi
c0019b89:	57                   	push   edi
c0019b8a:	e8 01 f6 ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c0019b8f:	83 c4 10             	add    esp,0x10
c0019b92:	4d                   	dec    ebp
c0019b93:	75 ed                	jne    c0019b82 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019b95:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019b9a:	50                   	push   eax
c0019b9b:	6a 0c                	push   0xc
c0019b9d:	56                   	push   esi
c0019b9e:	57                   	push   edi
c0019b9f:	e8 ec f5 ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c0019ba4:	83 c4 10             	add    esp,0x10
c0019ba7:	a8 01                	test   al,0x1
c0019ba9:	75 17                	jne    c0019bc2 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019bab:	a8 20                	test   al,0x20
c0019bad:	75 0f                	jne    c0019bbe <IDE::polling(unsigned char, unsigned int)+0x50>
c0019baf:	4b                   	dec    ebx
c0019bb0:	74 10                	je     c0019bc2 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019bb2:	84 c0                	test   al,al
c0019bb4:	78 e4                	js     c0019b9a <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019bb6:	a8 08                	test   al,0x8
c0019bb8:	74 e0                	je     c0019b9a <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019bba:	31 c0                	xor    eax,eax
c0019bbc:	eb 06                	jmp    c0019bc4 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019bbe:	b0 01                	mov    al,0x1
c0019bc0:	eb 02                	jmp    c0019bc4 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019bc2:	b0 02                	mov    al,0x2
c0019bc4:	83 c4 0c             	add    esp,0xc
c0019bc7:	5b                   	pop    ebx
c0019bc8:	5e                   	pop    esi
c0019bc9:	5f                   	pop    edi
c0019bca:	5d                   	pop    ebp
c0019bcb:	c3                   	ret    

c0019bcc <SATABus::close(int, int, void*)>:
c0019bcc:	31 c0                	xor    eax,eax
c0019bce:	c3                   	ret    
c0019bcf:	90                   	nop

c0019bd0 <SATABus::detect()>:
c0019bd0:	c3                   	ret    
c0019bd1:	90                   	nop

c0019bd2 <SATABus::SATABus()>:
c0019bd2:	83 ec 0c             	sub    esp,0xc
c0019bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bd9:	83 ec 08             	sub    esp,0x8
c0019bdc:	68 c0 f2 01 c0       	push   0xc001f2c0
c0019be1:	50                   	push   eax
c0019be2:	e8 7d 27 ff ff       	call   c000c364 <HardDiskController::HardDiskController(char const*)>
c0019be7:	83 c4 10             	add    esp,0x10
c0019bea:	ba ec f2 01 c0       	mov    edx,0xc001f2ec
c0019bef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bf3:	89 10                	mov    DWORD PTR [eax],edx
c0019bf5:	83 ec 0c             	sub    esp,0xc
c0019bf8:	6a 50                	push   0x50
c0019bfa:	e8 dd e6 fe ff       	call   c00082dc <Phys::allocateContiguousPages(int)>
c0019bff:	83 c4 10             	add    esp,0x10
c0019c02:	89 c2                	mov    edx,eax
c0019c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c08:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019c0e:	83 ec 0c             	sub    esp,0xc
c0019c11:	6a 50                	push   0x50
c0019c13:	e8 75 fd fe ff       	call   c000998d <Virt::allocateKernelVirtualPages(int)>
c0019c18:	83 c4 10             	add    esp,0x10
c0019c1b:	89 c2                	mov    edx,eax
c0019c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c21:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019c27:	a1 30 0a 02 c0       	mov    eax,ds:0xc0020a30
c0019c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c30:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019c36:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c3a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019c40:	83 ec 0c             	sub    esp,0xc
c0019c43:	6a 03                	push   0x3
c0019c45:	6a 50                	push   0x50
c0019c47:	51                   	push   ecx
c0019c48:	52                   	push   edx
c0019c49:	50                   	push   eax
c0019c4a:	e8 cd 06 ff ff       	call   c000a31c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019c4f:	83 c4 20             	add    esp,0x20
c0019c52:	90                   	nop
c0019c53:	83 c4 0c             	add    esp,0xc
c0019c56:	c3                   	ret    
c0019c57:	90                   	nop

c0019c58 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019c58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c5c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019c5f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019c62:	09 c2                	or     edx,eax
c0019c64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c68:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019c6e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019c70:	31 c0                	xor    eax,eax
c0019c72:	c1 e9 08             	shr    ecx,0x8
c0019c75:	83 e1 0f             	and    ecx,0xf
c0019c78:	39 c8                	cmp    eax,ecx
c0019c7a:	74 0a                	je     c0019c86 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019c7c:	f6 c2 01             	test   dl,0x1
c0019c7f:	74 08                	je     c0019c89 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019c81:	d1 ea                	shr    edx,1
c0019c83:	40                   	inc    eax
c0019c84:	eb f2                	jmp    c0019c78 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019c86:	83 c8 ff             	or     eax,0xffffffff
c0019c89:	c3                   	ret    

c0019c8a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019c8a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019c8e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019c91:	89 c2                	mov    edx,eax
c0019c93:	c1 ea 08             	shr    edx,0x8
c0019c96:	83 e2 0f             	and    edx,0xf
c0019c99:	fe ca                	dec    dl
c0019c9b:	75 31                	jne    c0019cce <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019c9d:	83 e0 0f             	and    eax,0xf
c0019ca0:	3c 03                	cmp    al,0x3
c0019ca2:	75 2a                	jne    c0019cce <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019ca4:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019ca7:	b8 02 00 00 00       	mov    eax,0x2
c0019cac:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019cb2:	74 1c                	je     c0019cd0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019cb4:	b8 04 00 00 00       	mov    eax,0x4
c0019cb9:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019cbf:	74 0f                	je     c0019cd0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019cc1:	31 c0                	xor    eax,eax
c0019cc3:	83 fa 03             	cmp    edx,0x3
c0019cc6:	0f 94 c0             	sete   al
c0019cc9:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019ccd:	c3                   	ret    
c0019cce:	31 c0                	xor    eax,eax
c0019cd0:	c3                   	ret    
c0019cd1:	90                   	nop

c0019cd2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019cd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cd6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cd9:	0f ba e2 0f          	bt     edx,0xf
c0019cdd:	72 f7                	jb     c0019cd6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019cdf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019ce2:	83 ca 10             	or     edx,0x10
c0019ce5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019ce8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019ceb:	83 ca 01             	or     edx,0x1
c0019cee:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cf1:	c3                   	ret    

c0019cf2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019cf2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cf6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cf9:	83 e2 fe             	and    edx,0xfffffffe
c0019cfc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cff:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d02:	83 e2 ef             	and    edx,0xffffffef
c0019d05:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d08:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d0b:	0f ba e2 0e          	bt     edx,0xe
c0019d0f:	72 f7                	jb     c0019d08 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d11:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d14:	0f ba e2 0f          	bt     edx,0xf
c0019d18:	72 ee                	jb     c0019d08 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d1a:	c3                   	ret    
c0019d1b:	90                   	nop

c0019d1c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019d1c:	55                   	push   ebp
c0019d1d:	57                   	push   edi
c0019d1e:	56                   	push   esi
c0019d1f:	53                   	push   ebx
c0019d20:	83 ec 1c             	sub    esp,0x1c
c0019d23:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019d27:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019d2b:	53                   	push   ebx
c0019d2c:	56                   	push   esi
c0019d2d:	e8 c0 ff ff ff       	call   c0019cf2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019d32:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019d36:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d3c:	83 ec 0c             	sub    esp,0xc
c0019d3f:	c1 e5 0a             	shl    ebp,0xa
c0019d42:	01 e8                	add    eax,ebp
c0019d44:	89 03                	mov    DWORD PTR [ebx],eax
c0019d46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d48:	68 00 04 00 00       	push   0x400
c0019d4d:	6a 00                	push   0x0
c0019d4f:	50                   	push   eax
c0019d50:	e8 9b 67 fe ff       	call   c00004f0 <memset>
c0019d55:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019d5b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019d5f:	01 e8                	add    eax,ebp
c0019d61:	83 c4 1c             	add    esp,0x1c
c0019d64:	89 03                	mov    DWORD PTR [ebx],eax
c0019d66:	c1 e2 08             	shl    edx,0x8
c0019d69:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019d70:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019d76:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d7c:	01 f8                	add    eax,edi
c0019d7e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019d81:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019d84:	68 00 01 00 00       	push   0x100
c0019d89:	6a 00                	push   0x0
c0019d8b:	50                   	push   eax
c0019d8c:	e8 5f 67 fe ff       	call   c00004f0 <memset>
c0019d91:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019d97:	01 fa                	add    edx,edi
c0019d99:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019d9d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019da0:	c1 e7 0d             	shl    edi,0xd
c0019da3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019daa:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019db0:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019db6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019dba:	31 ff                	xor    edi,edi
c0019dbc:	83 c4 10             	add    esp,0x10
c0019dbf:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019dc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019dc9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019dcf:	83 c5 20             	add    ebp,0x20
c0019dd2:	01 f8                	add    eax,edi
c0019dd4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019dd7:	52                   	push   edx
c0019dd8:	68 00 01 00 00       	push   0x100
c0019ddd:	6a 00                	push   0x0
c0019ddf:	50                   	push   eax
c0019de0:	e8 0b 67 fe ff       	call   c00004f0 <memset>
c0019de5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019de9:	83 c4 10             	add    esp,0x10
c0019dec:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019df2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019df9:	01 f8                	add    eax,edi
c0019dfb:	81 c7 00 01 00 00    	add    edi,0x100
c0019e01:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019e04:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019e0a:	75 b3                	jne    c0019dbf <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019e0c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e13:	50                   	push   eax
c0019e14:	50                   	push   eax
c0019e15:	53                   	push   ebx
c0019e16:	56                   	push   esi
c0019e17:	e8 b6 fe ff ff       	call   c0019cd2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019e1c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e23:	83 c4 2c             	add    esp,0x2c
c0019e26:	5b                   	pop    ebx
c0019e27:	5e                   	pop    esi
c0019e28:	5f                   	pop    edi
c0019e29:	5d                   	pop    ebp
c0019e2a:	c3                   	ret    
c0019e2b:	90                   	nop

c0019e2c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019e2c:	55                   	push   ebp
c0019e2d:	57                   	push   edi
c0019e2e:	56                   	push   esi
c0019e2f:	53                   	push   ebx
c0019e30:	31 db                	xor    ebx,ebx
c0019e32:	83 ec 0c             	sub    esp,0xc
c0019e35:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019e39:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e3d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019e40:	f7 c7 01 00 00 00    	test   edi,0x1
c0019e46:	74 7a                	je     c0019ec2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e48:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019e4c:	89 d8                	mov    eax,ebx
c0019e4e:	c1 e0 07             	shl    eax,0x7
c0019e51:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019e58:	55                   	push   ebp
c0019e59:	56                   	push   esi
c0019e5a:	e8 2b fe ff ff       	call   c0019c8a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019e5f:	5a                   	pop    edx
c0019e60:	83 f8 01             	cmp    eax,0x1
c0019e63:	59                   	pop    ecx
c0019e64:	75 21                	jne    c0019e87 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019e66:	50                   	push   eax
c0019e67:	53                   	push   ebx
c0019e68:	55                   	push   ebp
c0019e69:	56                   	push   esi
c0019e6a:	e8 ad fe ff ff       	call   c0019d1c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019e6f:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019e76:	e8 d6 df fe ff       	call   c0007e51 <malloc>
c0019e7b:	89 c5                	mov    ebp,eax
c0019e7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e80:	e8 43 0d 00 00       	call   c001abc8 <SATA::SATA()>
c0019e85:	eb 24                	jmp    c0019eab <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019e87:	83 f8 04             	cmp    eax,0x4
c0019e8a:	75 36                	jne    c0019ec2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e8c:	51                   	push   ecx
c0019e8d:	53                   	push   ebx
c0019e8e:	55                   	push   ebp
c0019e8f:	56                   	push   esi
c0019e90:	e8 87 fe ff ff       	call   c0019d1c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019e95:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019e9c:	e8 b0 df fe ff       	call   c0007e51 <malloc>
c0019ea1:	89 c5                	mov    ebp,eax
c0019ea3:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ea6:	e8 71 11 00 00       	call   c001b01c <SATAPI::SATAPI()>
c0019eab:	58                   	pop    eax
c0019eac:	5a                   	pop    edx
c0019ead:	55                   	push   ebp
c0019eae:	56                   	push   esi
c0019eaf:	e8 6c 21 ff ff       	call   c000c020 <Device::addChild(Device*)>
c0019eb4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019eb7:	56                   	push   esi
c0019eb8:	6a 00                	push   0x0
c0019eba:	53                   	push   ebx
c0019ebb:	55                   	push   ebp
c0019ebc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019ebf:	83 c4 20             	add    esp,0x20
c0019ec2:	d1 ef                	shr    edi,1
c0019ec4:	43                   	inc    ebx
c0019ec5:	83 fb 20             	cmp    ebx,0x20
c0019ec8:	0f 85 72 ff ff ff    	jne    c0019e40 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019ece:	83 c4 0c             	add    esp,0xc
c0019ed1:	5b                   	pop    ebx
c0019ed2:	5e                   	pop    esi
c0019ed3:	5f                   	pop    edi
c0019ed4:	5d                   	pop    ebp
c0019ed5:	c3                   	ret    

c0019ed6 <SATABus::open(int, int, void*)>:
c0019ed6:	83 ec 14             	sub    esp,0x14
c0019ed9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019edd:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019ee3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019ee9:	52                   	push   edx
c0019eea:	50                   	push   eax
c0019eeb:	e8 3c ff ff ff       	call   c0019e2c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019ef0:	31 c0                	xor    eax,eax
c0019ef2:	83 c4 1c             	add    esp,0x1c
c0019ef5:	c3                   	ret    

c0019ef6 <ATA::close(int, int, void*)>:
c0019ef6:	83 ec 0c             	sub    esp,0xc
c0019ef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019efd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019f03:	85 c0                	test   eax,eax
c0019f05:	74 0c                	je     c0019f13 <ATA::close(int, int, void*)+0x1d>
c0019f07:	83 ec 0c             	sub    esp,0xc
c0019f0a:	8b 10                	mov    edx,DWORD PTR [eax]
c0019f0c:	50                   	push   eax
c0019f0d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019f10:	83 c4 10             	add    esp,0x10
c0019f13:	31 c0                	xor    eax,eax
c0019f15:	83 c4 0c             	add    esp,0xc
c0019f18:	c3                   	ret    
c0019f19:	90                   	nop

c0019f1a <ATA::powerSaving(PowerSavingLevel)>:
c0019f1a:	c3                   	ret    
c0019f1b:	90                   	nop

c0019f1c <ATA::ATA()>:
c0019f1c:	83 ec 0c             	sub    esp,0xc
c0019f1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f23:	83 ec 04             	sub    esp,0x4
c0019f26:	68 00 02 00 00       	push   0x200
c0019f2b:	68 b9 f3 01 c0       	push   0xc001f3b9
c0019f30:	50                   	push   eax
c0019f31:	e8 b8 24 ff ff       	call   c000c3ee <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019f36:	83 c4 10             	add    esp,0x10
c0019f39:	ba 2c f3 01 c0       	mov    edx,0xc001f32c
c0019f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f42:	89 10                	mov    DWORD PTR [eax],edx
c0019f44:	90                   	nop
c0019f45:	83 c4 0c             	add    esp,0xc
c0019f48:	c3                   	ret    
c0019f49:	90                   	nop

c0019f4a <ATA::flush(bool)>:
c0019f4a:	53                   	push   ebx
c0019f4b:	83 ec 08             	sub    esp,0x8
c0019f4e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019f53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f57:	19 c0                	sbb    eax,eax
c0019f59:	83 e0 fd             	and    eax,0xfffffffd
c0019f5c:	05 ea 00 00 00       	add    eax,0xea
c0019f61:	50                   	push   eax
c0019f62:	6a 07                	push   0x7
c0019f64:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f6b:	50                   	push   eax
c0019f6c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f72:	e8 59 f1 ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f77:	83 c4 0c             	add    esp,0xc
c0019f7a:	6a 00                	push   0x0
c0019f7c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f83:	50                   	push   eax
c0019f84:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f8a:	e8 df fb ff ff       	call   c0019b6e <IDE::polling(unsigned char, unsigned int)>
c0019f8f:	83 c4 18             	add    esp,0x18
c0019f92:	5b                   	pop    ebx
c0019f93:	c3                   	ret    

c0019f94 <ATA::readyForCommand()>:
c0019f94:	56                   	push   esi
c0019f95:	53                   	push   ebx
c0019f96:	53                   	push   ebx
c0019f97:	31 db                	xor    ebx,ebx
c0019f99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f9d:	51                   	push   ecx
c0019f9e:	6a 0c                	push   0xc
c0019fa0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019fa7:	50                   	push   eax
c0019fa8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019fae:	e8 dd f1 ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c0019fb3:	83 c4 10             	add    esp,0x10
c0019fb6:	a8 88                	test   al,0x88
c0019fb8:	74 1f                	je     c0019fd9 <ATA::readyForCommand()+0x45>
c0019fba:	43                   	inc    ebx
c0019fbb:	83 fb 63             	cmp    ebx,0x63
c0019fbe:	7e dd                	jle    c0019f9d <ATA::readyForCommand()+0x9>
c0019fc0:	83 ec 0c             	sub    esp,0xc
c0019fc3:	6a 0a                	push   0xa
c0019fc5:	e8 ba 9d ff ff       	call   c0013d84 <milliTenthSleep(unsigned int)>
c0019fca:	83 c4 10             	add    esp,0x10
c0019fcd:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019fd3:	75 c8                	jne    c0019f9d <ATA::readyForCommand()+0x9>
c0019fd5:	31 c0                	xor    eax,eax
c0019fd7:	eb 02                	jmp    c0019fdb <ATA::readyForCommand()+0x47>
c0019fd9:	b0 01                	mov    al,0x1
c0019fdb:	5a                   	pop    edx
c0019fdc:	5b                   	pop    ebx
c0019fdd:	5e                   	pop    esi
c0019fde:	c3                   	ret    
c0019fdf:	90                   	nop

c0019fe0 <ATA::access(unsigned long long, int, void*, bool)>:
c0019fe0:	55                   	push   ebp
c0019fe1:	57                   	push   edi
c0019fe2:	56                   	push   esi
c0019fe3:	53                   	push   ebx
c0019fe4:	83 ec 2c             	sub    esp,0x2c
c0019fe7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019feb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019fef:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019ff3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ff7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019ffb:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019fff:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a003:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001a009:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a00d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a013:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a017:	c1 e0 06             	shl    eax,0x6
c001a01a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001a022:	74 5d                	je     c001a081 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001a024:	89 fa                	mov    edx,edi
c001a026:	89 f0                	mov    eax,esi
c001a028:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001a02c:	c1 ea 1c             	shr    edx,0x1c
c001a02f:	89 d1                	mov    ecx,edx
c001a031:	09 c1                	or     ecx,eax
c001a033:	74 25                	je     c001a05a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001a035:	31 ed                	xor    ebp,ebp
c001a037:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001a03e:	89 fa                	mov    edx,edi
c001a040:	89 f0                	mov    eax,esi
c001a042:	0f ad d0             	shrd   eax,edx,cl
c001a045:	d3 ea                	shr    edx,cl
c001a047:	f6 c1 20             	test   cl,0x20
c001a04a:	74 02                	je     c001a04e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001a04c:	89 d0                	mov    eax,edx
c001a04e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001a052:	45                   	inc    ebp
c001a053:	83 fd 06             	cmp    ebp,0x6
c001a056:	75 df                	jne    c001a037 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001a058:	eb 76                	jmp    c001a0d0 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001a05a:	89 f0                	mov    eax,esi
c001a05c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001a061:	89 fa                	mov    edx,edi
c001a063:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a06a:	0f ac d0 10          	shrd   eax,edx,0x10
c001a06e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a073:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a077:	c1 ee 18             	shr    esi,0x18
c001a07a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a07f:	eb 56                	jmp    c001a0d7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a081:	6a 00                	push   0x0
c001a083:	6a 3f                	push   0x3f
c001a085:	57                   	push   edi
c001a086:	56                   	push   esi
c001a087:	e8 24 22 00 00       	call   c001c2b0 <__umoddi3>
c001a08c:	83 c4 10             	add    esp,0x10
c001a08f:	40                   	inc    eax
c001a090:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a094:	6a 00                	push   0x0
c001a096:	68 f0 03 00 00       	push   0x3f0
c001a09b:	57                   	push   edi
c001a09c:	56                   	push   esi
c001a09d:	e8 0e 21 00 00       	call   c001c1b0 <__udivdi3>
c001a0a2:	83 c4 10             	add    esp,0x10
c001a0a5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a0aa:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a0b1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a0b6:	6a 00                	push   0x0
c001a0b8:	6a 3f                	push   0x3f
c001a0ba:	57                   	push   edi
c001a0bb:	56                   	push   esi
c001a0bc:	e8 ef 20 00 00       	call   c001c1b0 <__udivdi3>
c001a0c1:	83 c4 10             	add    esp,0x10
c001a0c4:	89 c6                	mov    esi,eax
c001a0c6:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a0cb:	83 e6 0f             	and    esi,0xf
c001a0ce:	eb 07                	jmp    c001a0d7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a0d0:	31 f6                	xor    esi,esi
c001a0d2:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a0d7:	bf 01 00 00 00       	mov    edi,0x1
c001a0dc:	50                   	push   eax
c001a0dd:	6a 00                	push   0x0
c001a0df:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0e6:	50                   	push   eax
c001a0e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0eb:	e8 ee f1 ff ff       	call   c00192de <IDE::enableIRQs(unsigned char, bool)>
c001a0f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0f3:	e8 9c fe ff ff       	call   c0019f94 <ATA::readyForCommand()>
c001a0f8:	83 c4 10             	add    esp,0x10
c001a0fb:	84 c0                	test   al,al
c001a0fd:	0f 84 4e 02 00 00    	je     c001a351 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a103:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a109:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a10f:	c1 e0 04             	shl    eax,0x4
c001a112:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a119:	09 c6                	or     esi,eax
c001a11b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a120:	75 05                	jne    c001a127 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a122:	83 ce a0             	or     esi,0xffffffa0
c001a125:	eb 03                	jmp    c001a12a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a127:	83 ce e0             	or     esi,0xffffffe0
c001a12a:	89 f0                	mov    eax,esi
c001a12c:	0f b6 f0             	movzx  esi,al
c001a12f:	56                   	push   esi
c001a130:	6a 06                	push   0x6
c001a132:	51                   	push   ecx
c001a133:	52                   	push   edx
c001a134:	e8 97 ef ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a139:	83 c4 10             	add    esp,0x10
c001a13c:	6a 00                	push   0x0
c001a13e:	6a 01                	push   0x1
c001a140:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a147:	50                   	push   eax
c001a148:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a14e:	e8 7d ef ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a153:	83 c4 10             	add    esp,0x10
c001a156:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a15b:	75 6e                	jne    c001a1cb <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a15d:	6a 00                	push   0x0
c001a15f:	6a 08                	push   0x8
c001a161:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a168:	50                   	push   eax
c001a169:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a16f:	e8 5c ef ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a174:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a179:	50                   	push   eax
c001a17a:	6a 09                	push   0x9
c001a17c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a183:	50                   	push   eax
c001a184:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a18a:	e8 41 ef ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a18f:	83 c4 20             	add    esp,0x20
c001a192:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a197:	50                   	push   eax
c001a198:	6a 0a                	push   0xa
c001a19a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1a1:	50                   	push   eax
c001a1a2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1a8:	e8 23 ef ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1ad:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a1b2:	50                   	push   eax
c001a1b3:	6a 0b                	push   0xb
c001a1b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1bc:	50                   	push   eax
c001a1bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1c3:	e8 08 ef ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1c8:	83 c4 20             	add    esp,0x20
c001a1cb:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a1d0:	50                   	push   eax
c001a1d1:	6a 02                	push   0x2
c001a1d3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1da:	50                   	push   eax
c001a1db:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1e1:	e8 ea ee ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1e6:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a1eb:	50                   	push   eax
c001a1ec:	6a 03                	push   0x3
c001a1ee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1f5:	50                   	push   eax
c001a1f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1fc:	e8 cf ee ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a201:	83 c4 20             	add    esp,0x20
c001a204:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a209:	50                   	push   eax
c001a20a:	6a 04                	push   0x4
c001a20c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a213:	50                   	push   eax
c001a214:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a21a:	e8 b1 ee ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a21f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a224:	50                   	push   eax
c001a225:	6a 05                	push   0x5
c001a227:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a22e:	50                   	push   eax
c001a22f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a235:	e8 96 ee ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a23a:	83 c4 20             	add    esp,0x20
c001a23d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a242:	0f 94 c0             	sete   al
c001a245:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a24a:	74 09                	je     c001a255 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a24c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a253:	eb 07                	jmp    c001a25c <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a255:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a25c:	0f b6 c0             	movzx  eax,al
c001a25f:	50                   	push   eax
c001a260:	6a 07                	push   0x7
c001a262:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a269:	50                   	push   eax
c001a26a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a270:	e8 5b ee ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a275:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a279:	83 c4 10             	add    esp,0x10
c001a27c:	85 f6                	test   esi,esi
c001a27e:	0f 84 ae 00 00 00    	je     c001a332 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a284:	50                   	push   eax
c001a285:	6a 01                	push   0x1
c001a287:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a28e:	50                   	push   eax
c001a28f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a295:	e8 d4 f8 ff ff       	call   c0019b6e <IDE::polling(unsigned char, unsigned int)>
c001a29a:	83 c4 10             	add    esp,0x10
c001a29d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a2a3:	84 c0                	test   al,al
c001a2a5:	74 20                	je     c001a2c7 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a2a7:	0f b6 f8             	movzx  edi,al
c001a2aa:	0f b6 d2             	movzx  edx,dl
c001a2ad:	57                   	push   edi
c001a2ae:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a2b5:	50                   	push   eax
c001a2b6:	52                   	push   edx
c001a2b7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2bd:	e8 fc f7 ff ff       	call   c0019abe <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a2c2:	e9 87 00 00 00       	jmp    c001a34e <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a2c7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a2cc:	74 33                	je     c001a301 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a2ce:	31 ed                	xor    ebp,ebp
c001a2d0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a2d4:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a2d8:	50                   	push   eax
c001a2d9:	50                   	push   eax
c001a2da:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2e1:	50                   	push   eax
c001a2e2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2e8:	e8 d1 ed ff ff       	call   c00190be <IDE::getBase(unsigned char)>
c001a2ed:	89 c2                	mov    edx,eax
c001a2ef:	89 f8                	mov    eax,edi
c001a2f1:	66 ef                	out    dx,ax
c001a2f3:	45                   	inc    ebp
c001a2f4:	83 c4 10             	add    esp,0x10
c001a2f7:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a2fd:	75 d1                	jne    c001a2d0 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a2ff:	eb 23                	jmp    c001a324 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a301:	0f b6 d2             	movzx  edx,dl
c001a304:	51                   	push   ecx
c001a305:	51                   	push   ecx
c001a306:	52                   	push   edx
c001a307:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a30d:	e8 ac ed ff ff       	call   c00190be <IDE::getBase(unsigned char)>
c001a312:	b9 00 01 00 00       	mov    ecx,0x100
c001a317:	89 c2                	mov    edx,eax
c001a319:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a31d:	fc                   	cld    
c001a31e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a321:	83 c4 10             	add    esp,0x10
c001a324:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a32c:	4e                   	dec    esi
c001a32d:	e9 4a ff ff ff       	jmp    c001a27c <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a332:	31 ff                	xor    edi,edi
c001a334:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a339:	74 16                	je     c001a351 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a33b:	50                   	push   eax
c001a33c:	50                   	push   eax
c001a33d:	31 c0                	xor    eax,eax
c001a33f:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a344:	0f 94 c0             	sete   al
c001a347:	50                   	push   eax
c001a348:	53                   	push   ebx
c001a349:	e8 fc fb ff ff       	call   c0019f4a <ATA::flush(bool)>
c001a34e:	83 c4 10             	add    esp,0x10
c001a351:	83 c4 2c             	add    esp,0x2c
c001a354:	89 f8                	mov    eax,edi
c001a356:	5b                   	pop    ebx
c001a357:	5e                   	pop    esi
c001a358:	5f                   	pop    edi
c001a359:	5d                   	pop    ebp
c001a35a:	c3                   	ret    
c001a35b:	90                   	nop

c001a35c <ATA::read(unsigned long long, int, void*)>:
c001a35c:	57                   	push   edi
c001a35d:	b8 04 00 00 00       	mov    eax,0x4
c001a362:	56                   	push   esi
c001a363:	53                   	push   ebx
c001a364:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a368:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a36c:	8d 7a ff             	lea    edi,[edx-0x1]
c001a36f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a373:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a377:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a37d:	77 25                	ja     c001a3a4 <ATA::read(unsigned long long, int, void*)+0x48>
c001a37f:	b8 06 00 00 00       	mov    eax,0x6
c001a384:	85 f6                	test   esi,esi
c001a386:	74 1c                	je     c001a3a4 <ATA::read(unsigned long long, int, void*)+0x48>
c001a388:	50                   	push   eax
c001a389:	50                   	push   eax
c001a38a:	6a 00                	push   0x0
c001a38c:	56                   	push   esi
c001a38d:	52                   	push   edx
c001a38e:	53                   	push   ebx
c001a38f:	51                   	push   ecx
c001a390:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a394:	e8 47 fc ff ff       	call   c0019fe0 <ATA::access(unsigned long long, int, void*, bool)>
c001a399:	83 c4 20             	add    esp,0x20
c001a39c:	85 c0                	test   eax,eax
c001a39e:	0f 95 c0             	setne  al
c001a3a1:	0f b6 c0             	movzx  eax,al
c001a3a4:	5b                   	pop    ebx
c001a3a5:	5e                   	pop    esi
c001a3a6:	5f                   	pop    edi
c001a3a7:	c3                   	ret    

c001a3a8 <ATA::write(unsigned long long, int, void*)>:
c001a3a8:	57                   	push   edi
c001a3a9:	b8 04 00 00 00       	mov    eax,0x4
c001a3ae:	56                   	push   esi
c001a3af:	53                   	push   ebx
c001a3b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a3b8:	8d 7a ff             	lea    edi,[edx-0x1]
c001a3bb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a3bf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a3c3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a3c9:	77 25                	ja     c001a3f0 <ATA::write(unsigned long long, int, void*)+0x48>
c001a3cb:	b8 06 00 00 00       	mov    eax,0x6
c001a3d0:	85 f6                	test   esi,esi
c001a3d2:	74 1c                	je     c001a3f0 <ATA::write(unsigned long long, int, void*)+0x48>
c001a3d4:	50                   	push   eax
c001a3d5:	50                   	push   eax
c001a3d6:	6a 01                	push   0x1
c001a3d8:	56                   	push   esi
c001a3d9:	52                   	push   edx
c001a3da:	53                   	push   ebx
c001a3db:	51                   	push   ecx
c001a3dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3e0:	e8 fb fb ff ff       	call   c0019fe0 <ATA::access(unsigned long long, int, void*, bool)>
c001a3e5:	83 c4 20             	add    esp,0x20
c001a3e8:	85 c0                	test   eax,eax
c001a3ea:	0f 95 c0             	setne  al
c001a3ed:	0f b6 c0             	movzx  eax,al
c001a3f0:	5b                   	pop    ebx
c001a3f1:	5e                   	pop    esi
c001a3f2:	5f                   	pop    edi
c001a3f3:	c3                   	ret    

c001a3f4 <ATA::detectCHS()>:
c001a3f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a3f8:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a3fe:	c1 e0 06             	shl    eax,0x6
c001a401:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a407:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a411:	c7 44 24 04 10 f3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f310
c001a419:	e9 11 63 ff ff       	jmp    c001072f <Krnl::panic(char const*)>

c001a41e <ATA::open(int, int, void*)>:
c001a41e:	53                   	push   ebx
c001a41f:	83 ec 08             	sub    esp,0x8
c001a422:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a426:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a42a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a42e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a434:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a43a:	c1 e0 06             	shl    eax,0x6
c001a43d:	01 d0                	add    eax,edx
c001a43f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a446:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a44c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a453:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a45d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a463:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a46a:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a471:	75 0c                	jne    c001a47f <ATA::open(int, int, void*)+0x61>
c001a473:	83 ec 0c             	sub    esp,0xc
c001a476:	53                   	push   ebx
c001a477:	e8 78 ff ff ff       	call   c001a3f4 <ATA::detectCHS()>
c001a47c:	83 c4 10             	add    esp,0x10
c001a47f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a485:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a48b:	c1 e0 06             	shl    eax,0x6
c001a48e:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a495:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a49f:	d1 e8                	shr    eax,1
c001a4a1:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a4a7:	6a 04                	push   0x4
c001a4a9:	6a 0c                	push   0xc
c001a4ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a4b2:	50                   	push   eax
c001a4b3:	52                   	push   edx
c001a4b4:	e8 17 ec ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4b9:	90                   	nop
c001a4ba:	90                   	nop
c001a4bb:	6a 00                	push   0x0
c001a4bd:	6a 0c                	push   0xc
c001a4bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a4c6:	50                   	push   eax
c001a4c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a4cd:	e8 fe eb ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4d2:	83 c4 14             	add    esp,0x14
c001a4d5:	53                   	push   ebx
c001a4d6:	e8 7b 1f ff ff       	call   c000c456 <PhysicalDisk::startCache()>
c001a4db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4de:	e8 eb 2f ff ff       	call   c000d4ce <createPartitionsForDisk(PhysicalDisk*)>
c001a4e3:	31 c0                	xor    eax,eax
c001a4e5:	83 c4 18             	add    esp,0x18
c001a4e8:	5b                   	pop    ebx
c001a4e9:	c3                   	ret    

c001a4ea <ATAPI::write(unsigned long long, int, void*)>:
c001a4ea:	b8 03 00 00 00       	mov    eax,0x3
c001a4ef:	c3                   	ret    

c001a4f0 <ATAPI::close(int, int, void*)>:
c001a4f0:	83 ec 0c             	sub    esp,0xc
c001a4f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4f7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a4fd:	85 c0                	test   eax,eax
c001a4ff:	74 0c                	je     c001a50d <ATAPI::close(int, int, void*)+0x1d>
c001a501:	83 ec 0c             	sub    esp,0xc
c001a504:	8b 10                	mov    edx,DWORD PTR [eax]
c001a506:	50                   	push   eax
c001a507:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a50a:	83 c4 10             	add    esp,0x10
c001a50d:	31 c0                	xor    eax,eax
c001a50f:	83 c4 0c             	add    esp,0xc
c001a512:	c3                   	ret    
c001a513:	90                   	nop

c001a514 <ATAPI::ATAPI()>:
c001a514:	83 ec 0c             	sub    esp,0xc
c001a517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a51b:	83 ec 04             	sub    esp,0x4
c001a51e:	68 00 08 00 00       	push   0x800
c001a523:	68 7d f4 01 c0       	push   0xc001f47d
c001a528:	50                   	push   eax
c001a529:	e8 c0 1e ff ff       	call   c000c3ee <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a52e:	83 c4 10             	add    esp,0x10
c001a531:	ba 74 f3 01 c0       	mov    edx,0xc001f374
c001a536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a53a:	89 10                	mov    DWORD PTR [eax],edx
c001a53c:	90                   	nop
c001a53d:	83 c4 0c             	add    esp,0xc
c001a540:	c3                   	ret    
c001a541:	90                   	nop

c001a542 <ATAPI::readyForCommand()>:
c001a542:	56                   	push   esi
c001a543:	53                   	push   ebx
c001a544:	53                   	push   ebx
c001a545:	31 db                	xor    ebx,ebx
c001a547:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a54b:	51                   	push   ecx
c001a54c:	6a 0c                	push   0xc
c001a54e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a555:	50                   	push   eax
c001a556:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a55c:	e8 2f ec ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c001a561:	83 c4 10             	add    esp,0x10
c001a564:	a8 88                	test   al,0x88
c001a566:	74 25                	je     c001a58d <ATAPI::readyForCommand()+0x4b>
c001a568:	43                   	inc    ebx
c001a569:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a56f:	7e da                	jle    c001a54b <ATAPI::readyForCommand()+0x9>
c001a571:	83 ec 0c             	sub    esp,0xc
c001a574:	68 5e 01 00 00       	push   0x15e
c001a579:	e8 06 98 ff ff       	call   c0013d84 <milliTenthSleep(unsigned int)>
c001a57e:	83 c4 10             	add    esp,0x10
c001a581:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a587:	75 c2                	jne    c001a54b <ATAPI::readyForCommand()+0x9>
c001a589:	31 c0                	xor    eax,eax
c001a58b:	eb 02                	jmp    c001a58f <ATAPI::readyForCommand()+0x4d>
c001a58d:	b0 01                	mov    al,0x1
c001a58f:	5a                   	pop    edx
c001a590:	5b                   	pop    ebx
c001a591:	5e                   	pop    esi
c001a592:	c3                   	ret    
c001a593:	90                   	nop

c001a594 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a594:	55                   	push   ebp
c001a595:	57                   	push   edi
c001a596:	56                   	push   esi
c001a597:	53                   	push   ebx
c001a598:	83 ec 20             	sub    esp,0x20
c001a59b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a59f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a5a3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a5a7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a5ab:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a5af:	6a 01                	push   0x1
c001a5b1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5b8:	50                   	push   eax
c001a5b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5bf:	e8 1a ed ff ff       	call   c00192de <IDE::enableIRQs(unsigned char, bool)>
c001a5c4:	5e                   	pop    esi
c001a5c5:	58                   	pop    eax
c001a5c6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5cd:	50                   	push   eax
c001a5ce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5d4:	e8 d1 ea ff ff       	call   c00190aa <IDE::prepareInterrupt(unsigned char)>
c001a5d9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a5dc:	e8 61 ff ff ff       	call   c001a542 <ATAPI::readyForCommand()>
c001a5e1:	83 c4 10             	add    esp,0x10
c001a5e4:	84 c0                	test   al,al
c001a5e6:	75 0a                	jne    c001a5f2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a5e8:	bb 01 00 00 00       	mov    ebx,0x1
c001a5ed:	e9 57 02 00 00       	jmp    c001a849 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a5f2:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a5f8:	c1 e0 04             	shl    eax,0x4
c001a5fb:	0f b6 c0             	movzx  eax,al
c001a5fe:	50                   	push   eax
c001a5ff:	6a 06                	push   0x6
c001a601:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a608:	50                   	push   eax
c001a609:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a60f:	e8 bc ea ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a614:	6a 00                	push   0x0
c001a616:	6a 01                	push   0x1
c001a618:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a61f:	50                   	push   eax
c001a620:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a626:	e8 a5 ea ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a62b:	83 c4 20             	add    esp,0x20
c001a62e:	0f b6 c3             	movzx  eax,bl
c001a631:	0f b6 df             	movzx  ebx,bh
c001a634:	50                   	push   eax
c001a635:	6a 04                	push   0x4
c001a637:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a63e:	50                   	push   eax
c001a63f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a645:	e8 86 ea ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a64a:	53                   	push   ebx
c001a64b:	6a 05                	push   0x5
c001a64d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a654:	50                   	push   eax
c001a655:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a65b:	e8 70 ea ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a660:	83 c4 20             	add    esp,0x20
c001a663:	68 a0 00 00 00       	push   0xa0
c001a668:	6a 07                	push   0x7
c001a66a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a671:	50                   	push   eax
c001a672:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a678:	e8 53 ea ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a67d:	83 c4 0c             	add    esp,0xc
c001a680:	6a 01                	push   0x1
c001a682:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a689:	50                   	push   eax
c001a68a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a690:	e8 d9 f4 ff ff       	call   c0019b6e <IDE::polling(unsigned char, unsigned int)>
c001a695:	83 c4 10             	add    esp,0x10
c001a698:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a69e:	84 c0                	test   al,al
c001a6a0:	74 23                	je     c001a6c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a6a2:	0f b6 d8             	movzx  ebx,al
c001a6a5:	0f b6 d2             	movzx  edx,dl
c001a6a8:	53                   	push   ebx
c001a6a9:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a6b0:	50                   	push   eax
c001a6b1:	52                   	push   edx
c001a6b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6b8:	e8 01 f4 ff ff       	call   c0019abe <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a6bd:	83 c4 10             	add    esp,0x10
c001a6c0:	e9 84 01 00 00       	jmp    c001a849 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a6c5:	0f b6 d2             	movzx  edx,dl
c001a6c8:	53                   	push   ebx
c001a6c9:	53                   	push   ebx
c001a6ca:	52                   	push   edx
c001a6cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6d1:	e8 e8 e9 ff ff       	call   c00190be <IDE::getBase(unsigned char)>
c001a6d6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a6da:	b9 06 00 00 00       	mov    ecx,0x6
c001a6df:	89 c2                	mov    edx,eax
c001a6e1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a6e4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a6e8:	83 c4 10             	add    esp,0x10
c001a6eb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a6f1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a6f8:	85 db                	test   ebx,ebx
c001a6fa:	0f 84 ec 00 00 00    	je     c001a7ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a700:	51                   	push   ecx
c001a701:	51                   	push   ecx
c001a702:	52                   	push   edx
c001a703:	50                   	push   eax
c001a704:	e8 35 eb ff ff       	call   c001923e <IDE::waitInterrupt(unsigned char)>
c001a709:	83 c4 10             	add    esp,0x10
c001a70c:	84 c0                	test   al,al
c001a70e:	0f 84 d4 fe ff ff    	je     c001a5e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a714:	56                   	push   esi
c001a715:	56                   	push   esi
c001a716:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a71d:	50                   	push   eax
c001a71e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a724:	e8 81 e9 ff ff       	call   c00190aa <IDE::prepareInterrupt(unsigned char)>
c001a729:	83 c4 0c             	add    esp,0xc
c001a72c:	6a 04                	push   0x4
c001a72e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a735:	50                   	push   eax
c001a736:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a73c:	e8 4f ea ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c001a741:	83 c4 0c             	add    esp,0xc
c001a744:	89 c6                	mov    esi,eax
c001a746:	6a 05                	push   0x5
c001a748:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a74f:	50                   	push   eax
c001a750:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a756:	e8 35 ea ff ff       	call   c0019190 <IDE::read(unsigned char, unsigned char)>
c001a75b:	89 f1                	mov    ecx,esi
c001a75d:	0f b6 c0             	movzx  eax,al
c001a760:	0f b6 f1             	movzx  esi,cl
c001a763:	c1 e0 08             	shl    eax,0x8
c001a766:	09 c6                	or     esi,eax
c001a768:	d1 fe                	sar    esi,1
c001a76a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a76e:	83 c4 10             	add    esp,0x10
c001a771:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a776:	74 41                	je     c001a7b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a778:	31 c9                	xor    ecx,ecx
c001a77a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a780:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a787:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a78b:	75 0a                	jne    c001a797 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a78d:	01 c9                	add    ecx,ecx
c001a78f:	01 cd                	add    ebp,ecx
c001a791:	4b                   	dec    ebx
c001a792:	e9 54 ff ff ff       	jmp    c001a6eb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a797:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a79c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a7a0:	51                   	push   ecx
c001a7a1:	51                   	push   ecx
c001a7a2:	52                   	push   edx
c001a7a3:	50                   	push   eax
c001a7a4:	e8 15 e9 ff ff       	call   c00190be <IDE::getBase(unsigned char)>
c001a7a9:	89 c2                	mov    edx,eax
c001a7ab:	89 f0                	mov    eax,esi
c001a7ad:	66 ef                	out    dx,ax
c001a7af:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a7b3:	83 c4 10             	add    esp,0x10
c001a7b6:	41                   	inc    ecx
c001a7b7:	eb c1                	jmp    c001a77a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a7b9:	31 f6                	xor    esi,esi
c001a7bb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a7c1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a7c8:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a7cc:	75 06                	jne    c001a7d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a7ce:	01 f6                	add    esi,esi
c001a7d0:	01 f5                	add    ebp,esi
c001a7d2:	eb bd                	jmp    c001a791 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a7d4:	51                   	push   ecx
c001a7d5:	51                   	push   ecx
c001a7d6:	52                   	push   edx
c001a7d7:	50                   	push   eax
c001a7d8:	e8 e1 e8 ff ff       	call   c00190be <IDE::getBase(unsigned char)>
c001a7dd:	89 c2                	mov    edx,eax
c001a7df:	66 ed                	in     ax,dx
c001a7e1:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a7e6:	83 c4 10             	add    esp,0x10
c001a7e9:	46                   	inc    esi
c001a7ea:	eb cf                	jmp    c001a7bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a7ec:	51                   	push   ecx
c001a7ed:	51                   	push   ecx
c001a7ee:	52                   	push   edx
c001a7ef:	50                   	push   eax
c001a7f0:	e8 49 ea ff ff       	call   c001923e <IDE::waitInterrupt(unsigned char)>
c001a7f5:	83 c4 10             	add    esp,0x10
c001a7f8:	84 c0                	test   al,al
c001a7fa:	0f 84 e8 fd ff ff    	je     c001a5e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a800:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a805:	52                   	push   edx
c001a806:	52                   	push   edx
c001a807:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a80e:	50                   	push   eax
c001a80f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a815:	e8 90 e8 ff ff       	call   c00190aa <IDE::prepareInterrupt(unsigned char)>
c001a81a:	83 c4 10             	add    esp,0x10
c001a81d:	50                   	push   eax
c001a81e:	50                   	push   eax
c001a81f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a826:	50                   	push   eax
c001a827:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a82d:	e8 8c e8 ff ff       	call   c00190be <IDE::getBase(unsigned char)>
c001a832:	8d 50 07             	lea    edx,[eax+0x7]
c001a835:	ec                   	in     al,dx
c001a836:	83 c4 10             	add    esp,0x10
c001a839:	a8 88                	test   al,0x88
c001a83b:	74 0a                	je     c001a847 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a83d:	4b                   	dec    ebx
c001a83e:	75 dd                	jne    c001a81d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a840:	bb 02 00 00 00       	mov    ebx,0x2
c001a845:	eb 02                	jmp    c001a849 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a847:	31 db                	xor    ebx,ebx
c001a849:	83 c4 1c             	add    esp,0x1c
c001a84c:	89 d8                	mov    eax,ebx
c001a84e:	5b                   	pop    ebx
c001a84f:	5e                   	pop    esi
c001a850:	5f                   	pop    edi
c001a851:	5d                   	pop    ebp
c001a852:	c3                   	ret    
c001a853:	90                   	nop

c001a854 <ATAPI::diskRemoved()>:
c001a854:	53                   	push   ebx
c001a855:	83 ec 14             	sub    esp,0x14
c001a858:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a85c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a863:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a869:	e8 e0 29 ff ff       	call   c000d24e <LogicalDisk::unmount()>
c001a86e:	58                   	pop    eax
c001a86f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a875:	e8 1a 33 ff ff       	call   c000db94 <VCache::writeWriteBuffer()>
c001a87a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a880:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a884:	83 c4 18             	add    esp,0x18
c001a887:	5b                   	pop    ebx
c001a888:	e9 f7 32 ff ff       	jmp    c000db84 <VCache::invalidateReadBuffer()>
c001a88d:	90                   	nop

c001a88e <ATAPI::eject()>:
c001a88e:	57                   	push   edi
c001a88f:	b9 03 00 00 00       	mov    ecx,0x3
c001a894:	53                   	push   ebx
c001a895:	83 ec 14             	sub    esp,0x14
c001a898:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a89c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a8a0:	fc                   	cld    
c001a8a1:	31 c0                	xor    eax,eax
c001a8a3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a8a5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a8aa:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a8af:	50                   	push   eax
c001a8b0:	50                   	push   eax
c001a8b1:	6a 00                	push   0x0
c001a8b3:	6a 00                	push   0x0
c001a8b5:	6a 00                	push   0x0
c001a8b7:	6a 02                	push   0x2
c001a8b9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a8bd:	50                   	push   eax
c001a8be:	53                   	push   ebx
c001a8bf:	e8 d0 fc ff ff       	call   c001a594 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a8c4:	83 c4 14             	add    esp,0x14
c001a8c7:	53                   	push   ebx
c001a8c8:	e8 87 ff ff ff       	call   c001a854 <ATAPI::diskRemoved()>
c001a8cd:	83 c4 24             	add    esp,0x24
c001a8d0:	31 c0                	xor    eax,eax
c001a8d2:	5b                   	pop    ebx
c001a8d3:	5f                   	pop    edi
c001a8d4:	c3                   	ret    
c001a8d5:	90                   	nop

c001a8d6 <ATAPI::diskInserted()>:
c001a8d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8da:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a8e1:	c3                   	ret    

c001a8e2 <ATAPI::detectMedia()>:
c001a8e2:	56                   	push   esi
c001a8e3:	53                   	push   ebx
c001a8e4:	83 ec 28             	sub    esp,0x28
c001a8e7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a8eb:	6a 0c                	push   0xc
c001a8ed:	6a 00                	push   0x0
c001a8ef:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a8f3:	56                   	push   esi
c001a8f4:	e8 f7 5b fe ff       	call   c00004f0 <memset>
c001a8f9:	58                   	pop    eax
c001a8fa:	5a                   	pop    edx
c001a8fb:	6a 00                	push   0x0
c001a8fd:	6a 00                	push   0x0
c001a8ff:	6a 00                	push   0x0
c001a901:	6a 00                	push   0x0
c001a903:	56                   	push   esi
c001a904:	53                   	push   ebx
c001a905:	e8 8a fc ff ff       	call   c001a594 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a90a:	83 c4 1c             	add    esp,0x1c
c001a90d:	6a 0c                	push   0xc
c001a90f:	6a 00                	push   0x0
c001a911:	56                   	push   esi
c001a912:	e8 d9 5b fe ff       	call   c00004f0 <memset>
c001a917:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a91c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a921:	59                   	pop    ecx
c001a922:	58                   	pop    eax
c001a923:	6a 01                	push   0x1
c001a925:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a929:	50                   	push   eax
c001a92a:	6a 00                	push   0x0
c001a92c:	6a 12                	push   0x12
c001a92e:	56                   	push   esi
c001a92f:	53                   	push   ebx
c001a930:	e8 5f fc ff ff       	call   c001a594 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a935:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a939:	83 c4 20             	add    esp,0x20
c001a93c:	83 e0 7f             	and    eax,0x7f
c001a93f:	3c 70                	cmp    al,0x70
c001a941:	74 15                	je     c001a958 <ATAPI::detectMedia()+0x76>
c001a943:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a94a:	75 0c                	jne    c001a958 <ATAPI::detectMedia()+0x76>
c001a94c:	83 ec 0c             	sub    esp,0xc
c001a94f:	53                   	push   ebx
c001a950:	e8 81 ff ff ff       	call   c001a8d6 <ATAPI::diskInserted()>
c001a955:	83 c4 10             	add    esp,0x10
c001a958:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a95c:	83 e0 0f             	and    eax,0xf
c001a95f:	3c 02                	cmp    al,0x2
c001a961:	75 1b                	jne    c001a97e <ATAPI::detectMedia()+0x9c>
c001a963:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a968:	75 2d                	jne    c001a997 <ATAPI::detectMedia()+0xb5>
c001a96a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a971:	74 24                	je     c001a997 <ATAPI::detectMedia()+0xb5>
c001a973:	83 ec 0c             	sub    esp,0xc
c001a976:	53                   	push   ebx
c001a977:	e8 d8 fe ff ff       	call   c001a854 <ATAPI::diskRemoved()>
c001a97c:	eb 16                	jmp    c001a994 <ATAPI::detectMedia()+0xb2>
c001a97e:	84 c0                	test   al,al
c001a980:	75 15                	jne    c001a997 <ATAPI::detectMedia()+0xb5>
c001a982:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a989:	75 0c                	jne    c001a997 <ATAPI::detectMedia()+0xb5>
c001a98b:	83 ec 0c             	sub    esp,0xc
c001a98e:	53                   	push   ebx
c001a98f:	e8 42 ff ff ff       	call   c001a8d6 <ATAPI::diskInserted()>
c001a994:	83 c4 10             	add    esp,0x10
c001a997:	83 c4 24             	add    esp,0x24
c001a99a:	5b                   	pop    ebx
c001a99b:	5e                   	pop    esi
c001a99c:	c3                   	ret    
c001a99d:	90                   	nop

c001a99e <ATAPI::open(int, int, void*)>:
c001a99e:	56                   	push   esi
c001a99f:	53                   	push   ebx
c001a9a0:	50                   	push   eax
c001a9a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a9a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a9ad:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a9b3:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a9b9:	c1 e0 06             	shl    eax,0x6
c001a9bc:	01 d0                	add    eax,edx
c001a9be:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a9c5:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a9cb:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a9d2:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a9dc:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a9e2:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a9e9:	6a 04                	push   0x4
c001a9eb:	6a 0c                	push   0xc
c001a9ed:	51                   	push   ecx
c001a9ee:	52                   	push   edx
c001a9ef:	e8 dc e6 ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9f4:	90                   	nop
c001a9f5:	90                   	nop
c001a9f6:	6a 00                	push   0x0
c001a9f8:	6a 0c                	push   0xc
c001a9fa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001aa01:	50                   	push   eax
c001aa02:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001aa08:	e8 c3 e6 ff ff       	call   c00190d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa0d:	83 c4 14             	add    esp,0x14
c001aa10:	68 74 01 00 00       	push   0x174
c001aa15:	e8 37 d4 fe ff       	call   c0007e51 <malloc>
c001aa1a:	83 c4 0c             	add    esp,0xc
c001aa1d:	89 c6                	mov    esi,eax
c001aa1f:	6a 00                	push   0x0
c001aa21:	68 ff ff ff 7f       	push   0x7fffffff
c001aa26:	6a 00                	push   0x0
c001aa28:	6a 00                	push   0x0
c001aa2a:	53                   	push   ebx
c001aa2b:	68 6f f4 01 c0       	push   0xc001f46f
c001aa30:	50                   	push   eax
c001aa31:	e8 64 26 ff ff       	call   c000d09a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001aa36:	83 c4 14             	add    esp,0x14
c001aa39:	56                   	push   esi
c001aa3a:	e8 11 27 ff ff       	call   c000d150 <LogicalDisk::assignDriveLetter()>
c001aa3f:	5a                   	pop    edx
c001aa40:	0f be c0             	movsx  eax,al
c001aa43:	59                   	pop    ecx
c001aa44:	50                   	push   eax
c001aa45:	68 5c f3 01 c0       	push   0xc001f35c
c001aa4a:	e8 91 01 ff ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c001aa4f:	58                   	pop    eax
c001aa50:	5a                   	pop    edx
c001aa51:	56                   	push   esi
c001aa52:	53                   	push   ebx
c001aa53:	e8 c8 15 ff ff       	call   c000c020 <Device::addChild(Device*)>
c001aa58:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001aa5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa61:	e8 f0 19 ff ff       	call   c000c456 <PhysicalDisk::startCache()>
c001aa66:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001aa6d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa70:	e8 6d fe ff ff       	call   c001a8e2 <ATAPI::detectMedia()>
c001aa75:	83 c4 14             	add    esp,0x14
c001aa78:	31 c0                	xor    eax,eax
c001aa7a:	5b                   	pop    ebx
c001aa7b:	5e                   	pop    esi
c001aa7c:	c3                   	ret    
c001aa7d:	90                   	nop

c001aa7e <ATAPI::read(unsigned long long, int, void*)>:
c001aa7e:	55                   	push   ebp
c001aa7f:	57                   	push   edi
c001aa80:	56                   	push   esi
c001aa81:	53                   	push   ebx
c001aa82:	83 ec 1c             	sub    esp,0x1c
c001aa85:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aa89:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001aa8d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001aa91:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aa98:	74 3c                	je     c001aad6 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001aa9a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001aa9e:	b9 03 00 00 00       	mov    ecx,0x3
c001aaa3:	fc                   	cld    
c001aaa4:	31 c0                	xor    eax,eax
c001aaa6:	0f ce                	bswap  esi
c001aaa8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aaaa:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001aaaf:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001aab3:	89 e8                	mov    eax,ebp
c001aab5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001aab9:	50                   	push   eax
c001aaba:	50                   	push   eax
c001aabb:	55                   	push   ebp
c001aabc:	c1 e5 0b             	shl    ebp,0xb
c001aabf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001aac3:	6a 00                	push   0x0
c001aac5:	55                   	push   ebp
c001aac6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aaca:	50                   	push   eax
c001aacb:	53                   	push   ebx
c001aacc:	e8 c3 fa ff ff       	call   c001a594 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001aad1:	83 c4 20             	add    esp,0x20
c001aad4:	eb 1a                	jmp    c001aaf0 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001aad6:	83 ec 0c             	sub    esp,0xc
c001aad9:	53                   	push   ebx
c001aada:	e8 03 fe ff ff       	call   c001a8e2 <ATAPI::detectMedia()>
c001aadf:	83 c4 10             	add    esp,0x10
c001aae2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aae9:	75 af                	jne    c001aa9a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001aaeb:	b8 02 00 00 00       	mov    eax,0x2
c001aaf0:	83 c4 1c             	add    esp,0x1c
c001aaf3:	5b                   	pop    ebx
c001aaf4:	5e                   	pop    esi
c001aaf5:	5f                   	pop    edi
c001aaf6:	5d                   	pop    ebp
c001aaf7:	c3                   	ret    

c001aaf8 <SATA::close(int, int, void*)>:
c001aaf8:	83 ec 0c             	sub    esp,0xc
c001aafb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aaff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ab05:	85 c0                	test   eax,eax
c001ab07:	74 0c                	je     c001ab15 <SATA::close(int, int, void*)+0x1d>
c001ab09:	83 ec 0c             	sub    esp,0xc
c001ab0c:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab0e:	50                   	push   eax
c001ab0f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ab12:	83 c4 10             	add    esp,0x10
c001ab15:	31 c0                	xor    eax,eax
c001ab17:	83 c4 0c             	add    esp,0xc
c001ab1a:	c3                   	ret    
c001ab1b:	90                   	nop

c001ab1c <SATA::powerSaving(PowerSavingLevel)>:
c001ab1c:	c3                   	ret    
c001ab1d:	90                   	nop

c001ab1e <SATA::open(int, int, void*)>:
c001ab1e:	56                   	push   esi
c001ab1f:	53                   	push   ebx
c001ab20:	50                   	push   eax
c001ab21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab29:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ab33:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ab39:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ab43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab47:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ab51:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ab57:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ab5e:	e8 bb d6 fe ff       	call   c000821e <Phys::allocatePage()>
c001ab63:	89 c6                	mov    esi,eax
c001ab65:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ab6b:	81 c6 00 10 00 00    	add    esi,0x1000
c001ab71:	e8 a8 d6 fe ff       	call   c000821e <Phys::allocatePage()>
c001ab76:	39 c6                	cmp    esi,eax
c001ab78:	74 10                	je     c001ab8a <SATA::open(int, int, void*)+0x6c>
c001ab7a:	83 ec 0c             	sub    esp,0xc
c001ab7d:	68 a4 f3 01 c0       	push   0xc001f3a4
c001ab82:	e8 a8 5b ff ff       	call   c001072f <Krnl::panic(char const*)>
c001ab87:	83 c4 10             	add    esp,0x10
c001ab8a:	83 ec 0c             	sub    esp,0xc
c001ab8d:	6a 02                	push   0x2
c001ab8f:	e8 f9 ed fe ff       	call   c000998d <Virt::allocateKernelVirtualPages(int)>
c001ab94:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ab9a:	6a 03                	push   0x3
c001ab9c:	50                   	push   eax
c001ab9d:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001aba3:	ff 35 30 0a 02 c0    	push   DWORD PTR ds:0xc0020a30
c001aba9:	e8 74 f4 fe ff       	call   c000a022 <VAS::mapPage(unsigned long, unsigned long, int)>
c001abae:	83 c4 14             	add    esp,0x14
c001abb1:	53                   	push   ebx
c001abb2:	e8 9f 18 ff ff       	call   c000c456 <PhysicalDisk::startCache()>
c001abb7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001abba:	e8 0f 29 ff ff       	call   c000d4ce <createPartitionsForDisk(PhysicalDisk*)>
c001abbf:	83 c4 14             	add    esp,0x14
c001abc2:	31 c0                	xor    eax,eax
c001abc4:	5b                   	pop    ebx
c001abc5:	5e                   	pop    esi
c001abc6:	c3                   	ret    
c001abc7:	90                   	nop

c001abc8 <SATA::SATA()>:
c001abc8:	83 ec 0c             	sub    esp,0xc
c001abcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abcf:	83 ec 04             	sub    esp,0x4
c001abd2:	68 00 02 00 00       	push   0x200
c001abd7:	68 b8 f3 01 c0       	push   0xc001f3b8
c001abdc:	50                   	push   eax
c001abdd:	e8 0c 18 ff ff       	call   c000c3ee <PhysicalDisk::PhysicalDisk(char const*, int)>
c001abe2:	83 c4 10             	add    esp,0x10
c001abe5:	ba 28 f4 01 c0       	mov    edx,0xc001f428
c001abea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abee:	89 10                	mov    DWORD PTR [eax],edx
c001abf0:	90                   	nop
c001abf1:	83 c4 0c             	add    esp,0xc
c001abf4:	c3                   	ret    
c001abf5:	90                   	nop

c001abf6 <SATA::access(unsigned long long, int, void*, bool)>:
c001abf6:	55                   	push   ebp
c001abf7:	57                   	push   edi
c001abf8:	56                   	push   esi
c001abf9:	53                   	push   ebx
c001abfa:	83 ec 2c             	sub    esp,0x2c
c001abfd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ac01:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ac05:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ac09:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ac0d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ac11:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ac16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac1a:	7e 10                	jle    c001ac2c <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001ac1c:	83 ec 0c             	sub    esp,0xc
c001ac1f:	68 c8 f3 01 c0       	push   0xc001f3c8
c001ac24:	e8 06 5b ff ff       	call   c001072f <Krnl::panic(char const*)>
c001ac29:	83 c4 10             	add    esp,0x10
c001ac2c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ac32:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ac38:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ac3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac42:	89 d0                	mov    eax,edx
c001ac44:	c1 e0 07             	shl    eax,0x7
c001ac47:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ac4b:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ac55:	51                   	push   ecx
c001ac56:	8d 42 02             	lea    eax,[edx+0x2]
c001ac59:	51                   	push   ecx
c001ac5a:	c1 e0 07             	shl    eax,0x7
c001ac5d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ac61:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ac65:	50                   	push   eax
c001ac66:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ac6c:	e8 e7 ef ff ff       	call   c0019c58 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ac71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ac75:	83 c4 10             	add    esp,0x10
c001ac78:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ac7d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ac81:	0f 84 4f 01 00 00    	je     c001add6 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ac87:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ac8b:	c1 e0 09             	shl    eax,0x9
c001ac8e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ac93:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ac97:	74 0e                	je     c001aca7 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001ac99:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ac9f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001aca3:	89 c1                	mov    ecx,eax
c001aca5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aca7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001acab:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001acb1:	8d 42 02             	lea    eax,[edx+0x2]
c001acb4:	c1 e0 07             	shl    eax,0x7
c001acb7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001acbb:	8b 00                	mov    eax,DWORD PTR [eax]
c001acbd:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001acc3:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001acc9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001accd:	c1 e1 05             	shl    ecx,0x5
c001acd0:	01 c8                	add    eax,ecx
c001acd2:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001acd6:	83 e1 01             	and    ecx,0x1
c001acd9:	89 ce                	mov    esi,ecx
c001acdb:	8a 08                	mov    cl,BYTE PTR [eax]
c001acdd:	c1 e6 06             	shl    esi,0x6
c001ace0:	83 e1 bf             	and    ecx,0xffffffbf
c001ace3:	09 f1                	or     ecx,esi
c001ace5:	88 08                	mov    BYTE PTR [eax],cl
c001ace7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ace9:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001acef:	81 c9 05 00 01 00    	or     ecx,0x10005
c001acf5:	89 08                	mov    DWORD PTR [eax],ecx
c001acf7:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001acfd:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ad03:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ad09:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ad0c:	50                   	push   eax
c001ad0d:	68 90 00 00 00       	push   0x90
c001ad12:	6a 00                	push   0x0
c001ad14:	56                   	push   esi
c001ad15:	e8 d6 57 fe ff       	call   c00004f0 <memset>
c001ad1a:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ad20:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ad24:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ad2a:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ad2e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ad32:	83 c4 10             	add    esp,0x10
c001ad35:	48                   	dec    eax
c001ad36:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ad3b:	89 c1                	mov    ecx,eax
c001ad3d:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ad43:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ad48:	09 c8                	or     eax,ecx
c001ad4a:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ad50:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ad53:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001ad5a:	66 25 00 7f          	and    ax,0x7f00
c001ad5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad62:	66 0d 27 80          	or     ax,0x8027
c001ad66:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001ad6b:	66 89 06             	mov    WORD PTR [esi],ax
c001ad6e:	19 c0                	sbb    eax,eax
c001ad70:	83 e0 f0             	and    eax,0xfffffff0
c001ad73:	83 c0 35             	add    eax,0x35
c001ad76:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ad79:	89 e8                	mov    eax,ebp
c001ad7b:	c1 e8 10             	shr    eax,0x10
c001ad7e:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ad81:	89 e8                	mov    eax,ebp
c001ad83:	c1 e8 18             	shr    eax,0x18
c001ad86:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ad89:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ad8d:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ad90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad94:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ad97:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ad9b:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ad9f:	89 d6                	mov    esi,edx
c001ada1:	31 c0                	xor    eax,eax
c001ada3:	c1 e6 07             	shl    esi,0x7
c001ada6:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001adaa:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001adb0:	80 e1 88             	and    cl,0x88
c001adb3:	74 0a                	je     c001adbf <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001adb5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001adba:	74 0a                	je     c001adc6 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001adbc:	40                   	inc    eax
c001adbd:	eb eb                	jmp    c001adaa <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001adbf:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001adc4:	75 17                	jne    c001addd <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001adc6:	83 ec 0c             	sub    esp,0xc
c001adc9:	68 01 f4 01 c0       	push   0xc001f401
c001adce:	e8 0d fe fe ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c001add3:	83 c4 10             	add    esp,0x10
c001add6:	b8 01 00 00 00       	mov    eax,0x1
c001addb:	eb 5d                	jmp    c001ae3a <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001addd:	b8 01 00 00 00       	mov    eax,0x1
c001ade2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ade6:	c1 e2 07             	shl    edx,0x7
c001ade9:	d3 e0                	shl    eax,cl
c001adeb:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001adef:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001adf5:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001adfb:	85 c8                	test   eax,ecx
c001adfd:	74 16                	je     c001ae15 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001adff:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ae05:	0f ba e1 1e          	bt     ecx,0x1e
c001ae09:	73 ea                	jae    c001adf5 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001ae0b:	83 ec 0c             	sub    esp,0xc
c001ae0e:	68 0f f4 01 c0       	push   0xc001f40f
c001ae13:	eb b9                	jmp    c001adce <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ae15:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ae1b:	0f ba e0 1e          	bt     eax,0x1e
c001ae1f:	72 b5                	jb     c001add6 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ae21:	31 c0                	xor    eax,eax
c001ae23:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ae28:	75 10                	jne    c001ae3a <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ae2a:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ae30:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ae34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae38:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae3a:	83 c4 2c             	add    esp,0x2c
c001ae3d:	5b                   	pop    ebx
c001ae3e:	5e                   	pop    esi
c001ae3f:	5f                   	pop    edi
c001ae40:	5d                   	pop    ebp
c001ae41:	c3                   	ret    

c001ae42 <SATA::read(unsigned long long, int, void*)>:
c001ae42:	57                   	push   edi
c001ae43:	b8 04 00 00 00       	mov    eax,0x4
c001ae48:	56                   	push   esi
c001ae49:	53                   	push   ebx
c001ae4a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae4e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae52:	8d 7a ff             	lea    edi,[edx-0x1]
c001ae55:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ae59:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ae5d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ae63:	77 25                	ja     c001ae8a <SATA::read(unsigned long long, int, void*)+0x48>
c001ae65:	b8 06 00 00 00       	mov    eax,0x6
c001ae6a:	85 f6                	test   esi,esi
c001ae6c:	74 1c                	je     c001ae8a <SATA::read(unsigned long long, int, void*)+0x48>
c001ae6e:	50                   	push   eax
c001ae6f:	50                   	push   eax
c001ae70:	6a 00                	push   0x0
c001ae72:	56                   	push   esi
c001ae73:	52                   	push   edx
c001ae74:	53                   	push   ebx
c001ae75:	51                   	push   ecx
c001ae76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae7a:	e8 77 fd ff ff       	call   c001abf6 <SATA::access(unsigned long long, int, void*, bool)>
c001ae7f:	83 c4 20             	add    esp,0x20
c001ae82:	85 c0                	test   eax,eax
c001ae84:	0f 95 c0             	setne  al
c001ae87:	0f b6 c0             	movzx  eax,al
c001ae8a:	5b                   	pop    ebx
c001ae8b:	5e                   	pop    esi
c001ae8c:	5f                   	pop    edi
c001ae8d:	c3                   	ret    

c001ae8e <SATA::write(unsigned long long, int, void*)>:
c001ae8e:	55                   	push   ebp
c001ae8f:	b8 04 00 00 00       	mov    eax,0x4
c001ae94:	57                   	push   edi
c001ae95:	56                   	push   esi
c001ae96:	53                   	push   ebx
c001ae97:	83 ec 0c             	sub    esp,0xc
c001ae9a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ae9e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aea2:	8d 73 ff             	lea    esi,[ebx-0x1]
c001aea5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001aea9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001aead:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001aeb3:	77 3d                	ja     c001aef2 <SATA::write(unsigned long long, int, void*)+0x64>
c001aeb5:	b8 06 00 00 00       	mov    eax,0x6
c001aeba:	85 ed                	test   ebp,ebp
c001aebc:	74 34                	je     c001aef2 <SATA::write(unsigned long long, int, void*)+0x64>
c001aebe:	c1 e3 09             	shl    ebx,0x9
c001aec1:	01 eb                	add    ebx,ebp
c001aec3:	89 d6                	mov    esi,edx
c001aec5:	89 cf                	mov    edi,ecx
c001aec7:	83 c6 01             	add    esi,0x1
c001aeca:	83 d7 00             	adc    edi,0x0
c001aecd:	50                   	push   eax
c001aece:	50                   	push   eax
c001aecf:	6a 01                	push   0x1
c001aed1:	55                   	push   ebp
c001aed2:	81 c5 00 02 00 00    	add    ebp,0x200
c001aed8:	6a 01                	push   0x1
c001aeda:	51                   	push   ecx
c001aedb:	52                   	push   edx
c001aedc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aee0:	e8 11 fd ff ff       	call   c001abf6 <SATA::access(unsigned long long, int, void*, bool)>
c001aee5:	83 c4 20             	add    esp,0x20
c001aee8:	89 f2                	mov    edx,esi
c001aeea:	89 f9                	mov    ecx,edi
c001aeec:	39 dd                	cmp    ebp,ebx
c001aeee:	75 d3                	jne    c001aec3 <SATA::write(unsigned long long, int, void*)+0x35>
c001aef0:	31 c0                	xor    eax,eax
c001aef2:	83 c4 0c             	add    esp,0xc
c001aef5:	5b                   	pop    ebx
c001aef6:	5e                   	pop    esi
c001aef7:	5f                   	pop    edi
c001aef8:	5d                   	pop    ebp
c001aef9:	c3                   	ret    

c001aefa <SATAPI::write(unsigned long long, int, void*)>:
c001aefa:	b8 03 00 00 00       	mov    eax,0x3
c001aeff:	c3                   	ret    

c001af00 <SATAPI::close(int, int, void*)>:
c001af00:	83 ec 0c             	sub    esp,0xc
c001af03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af07:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001af0d:	85 c0                	test   eax,eax
c001af0f:	74 0c                	je     c001af1d <SATAPI::close(int, int, void*)+0x1d>
c001af11:	83 ec 0c             	sub    esp,0xc
c001af14:	8b 10                	mov    edx,DWORD PTR [eax]
c001af16:	50                   	push   eax
c001af17:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001af1a:	83 c4 10             	add    esp,0x10
c001af1d:	31 c0                	xor    eax,eax
c001af1f:	83 c4 0c             	add    esp,0xc
c001af22:	c3                   	ret    
c001af23:	90                   	nop

c001af24 <SATAPI::open(int, int, void*)>:
c001af24:	56                   	push   esi
c001af25:	53                   	push   ebx
c001af26:	51                   	push   ecx
c001af27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af2f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001af39:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001af3f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001af49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af4d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001af57:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001af5d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001af64:	e8 b5 d2 fe ff       	call   c000821e <Phys::allocatePage()>
c001af69:	89 c6                	mov    esi,eax
c001af6b:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001af71:	81 c6 00 10 00 00    	add    esi,0x1000
c001af77:	e8 a2 d2 fe ff       	call   c000821e <Phys::allocatePage()>
c001af7c:	39 c6                	cmp    esi,eax
c001af7e:	74 10                	je     c001af90 <SATAPI::open(int, int, void*)+0x6c>
c001af80:	83 ec 0c             	sub    esp,0xc
c001af83:	68 58 f4 01 c0       	push   0xc001f458
c001af88:	e8 a2 57 ff ff       	call   c001072f <Krnl::panic(char const*)>
c001af8d:	83 c4 10             	add    esp,0x10
c001af90:	83 ec 0c             	sub    esp,0xc
c001af93:	6a 02                	push   0x2
c001af95:	e8 f3 e9 fe ff       	call   c000998d <Virt::allocateKernelVirtualPages(int)>
c001af9a:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001afa0:	6a 03                	push   0x3
c001afa2:	50                   	push   eax
c001afa3:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001afa9:	ff 35 30 0a 02 c0    	push   DWORD PTR ds:0xc0020a30
c001afaf:	e8 6e f0 fe ff       	call   c000a022 <VAS::mapPage(unsigned long, unsigned long, int)>
c001afb4:	83 c4 14             	add    esp,0x14
c001afb7:	68 74 01 00 00       	push   0x174
c001afbc:	e8 90 ce fe ff       	call   c0007e51 <malloc>
c001afc1:	83 c4 0c             	add    esp,0xc
c001afc4:	89 c6                	mov    esi,eax
c001afc6:	6a 00                	push   0x0
c001afc8:	68 ff ff ff 7f       	push   0x7fffffff
c001afcd:	6a 00                	push   0x0
c001afcf:	6a 00                	push   0x0
c001afd1:	53                   	push   ebx
c001afd2:	68 6e f4 01 c0       	push   0xc001f46e
c001afd7:	50                   	push   eax
c001afd8:	e8 bd 20 ff ff       	call   c000d09a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001afdd:	83 c4 14             	add    esp,0x14
c001afe0:	56                   	push   esi
c001afe1:	e8 6a 21 ff ff       	call   c000d150 <LogicalDisk::assignDriveLetter()>
c001afe6:	5a                   	pop    edx
c001afe7:	0f be c0             	movsx  eax,al
c001afea:	59                   	pop    ecx
c001afeb:	50                   	push   eax
c001afec:	68 5c f3 01 c0       	push   0xc001f35c
c001aff1:	e8 ea fb fe ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c001aff6:	58                   	pop    eax
c001aff7:	5a                   	pop    edx
c001aff8:	56                   	push   esi
c001aff9:	53                   	push   ebx
c001affa:	e8 21 10 ff ff       	call   c000c020 <Device::addChild(Device*)>
c001afff:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b005:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b008:	e8 49 14 ff ff       	call   c000c456 <PhysicalDisk::startCache()>
c001b00d:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b014:	31 c0                	xor    eax,eax
c001b016:	83 c4 14             	add    esp,0x14
c001b019:	5b                   	pop    ebx
c001b01a:	5e                   	pop    esi
c001b01b:	c3                   	ret    

c001b01c <SATAPI::SATAPI()>:
c001b01c:	83 ec 0c             	sub    esp,0xc
c001b01f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b023:	83 ec 04             	sub    esp,0x4
c001b026:	68 00 08 00 00       	push   0x800
c001b02b:	68 7c f4 01 c0       	push   0xc001f47c
c001b030:	50                   	push   eax
c001b031:	e8 b8 13 ff ff       	call   c000c3ee <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b036:	83 c4 10             	add    esp,0x10
c001b039:	ba b8 f5 01 c0       	mov    edx,0xc001f5b8
c001b03e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b042:	89 10                	mov    DWORD PTR [eax],edx
c001b044:	90                   	nop
c001b045:	83 c4 0c             	add    esp,0xc
c001b048:	c3                   	ret    
c001b049:	90                   	nop

c001b04a <SATAPI::diskRemoved()>:
c001b04a:	c3                   	ret    
c001b04b:	90                   	nop

c001b04c <SATAPI::diskInserted()>:
c001b04c:	83 ec 18             	sub    esp,0x18
c001b04f:	68 88 f4 01 c0       	push   0xc001f488
c001b054:	e8 87 fb fe ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c001b059:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b05d:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001b064:	83 c4 1c             	add    esp,0x1c
c001b067:	c3                   	ret    

c001b068 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001b068:	55                   	push   ebp
c001b069:	57                   	push   edi
c001b06a:	56                   	push   esi
c001b06b:	53                   	push   ebx
c001b06c:	83 ec 38             	sub    esp,0x38
c001b06f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001b073:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001b077:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001b07b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b07f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b083:	68 a0 f4 01 c0       	push   0xc001f4a0
c001b088:	e8 53 fb fe ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c001b08d:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001b093:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b099:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b09d:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001b0a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b0a7:	c1 e0 07             	shl    eax,0x7
c001b0aa:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001b0ae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b0b2:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001b0bc:	58                   	pop    eax
c001b0bd:	5a                   	pop    edx
c001b0be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b0c2:	8d 58 02             	lea    ebx,[eax+0x2]
c001b0c5:	c1 e3 07             	shl    ebx,0x7
c001b0c8:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001b0cc:	53                   	push   ebx
c001b0cd:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b0d3:	e8 80 eb ff ff       	call   c0019c58 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001b0d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b0dc:	83 c4 10             	add    esp,0x10
c001b0df:	b8 01 00 00 00       	mov    eax,0x1
c001b0e4:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001b0e9:	0f 84 4c 02 00 00    	je     c001b33b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001b0ef:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b0f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b0f7:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001b0fd:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b103:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b107:	c1 e1 05             	shl    ecx,0x5
c001b10a:	01 c8                	add    eax,ecx
c001b10c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b10e:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001b114:	81 c9 25 00 01 00    	or     ecx,0x10025
c001b11a:	89 08                	mov    DWORD PTR [eax],ecx
c001b11c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b122:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001b128:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b12e:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b131:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b134:	50                   	push   eax
c001b135:	68 90 00 00 00       	push   0x90
c001b13a:	6a 00                	push   0x0
c001b13c:	53                   	push   ebx
c001b13d:	e8 ae 53 fe ff       	call   c00004f0 <memset>
c001b142:	b9 0c 00 00 00       	mov    ecx,0xc
c001b147:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b14b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b14d:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b153:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b157:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b15d:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b161:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b165:	48                   	dec    eax
c001b166:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b16b:	89 c1                	mov    ecx,eax
c001b16d:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b173:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b178:	09 c8                	or     eax,ecx
c001b17a:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b180:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b183:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b18a:	66 25 00 7f          	and    ax,0x7f00
c001b18e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b192:	66 0d 27 80          	or     ax,0x8027
c001b196:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b19a:	66 89 03             	mov    WORD PTR [ebx],ax
c001b19d:	89 d0                	mov    eax,edx
c001b19f:	c1 ea 18             	shr    edx,0x18
c001b1a2:	c1 e8 10             	shr    eax,0x10
c001b1a5:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b1a8:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b1ab:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b1af:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b1b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b1b6:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b1b9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b1bd:	83 c4 10             	add    esp,0x10
c001b1c0:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b1c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b1c8:	31 c0                	xor    eax,eax
c001b1ca:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b1d0:	80 e1 88             	and    cl,0x88
c001b1d3:	74 0a                	je     c001b1df <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001b1d5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b1da:	74 0a                	je     c001b1e6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001b1dc:	40                   	inc    eax
c001b1dd:	eb eb                	jmp    c001b1ca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001b1df:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b1e4:	75 16                	jne    c001b1fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x194>
c001b1e6:	83 ec 0c             	sub    esp,0xc
c001b1e9:	68 ba f4 01 c0       	push   0xc001f4ba
c001b1ee:	e8 ed f9 fe ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c001b1f3:	5f                   	pop    edi
c001b1f4:	5d                   	pop    ebp
c001b1f5:	68 cf f4 01 c0       	push   0xc001f4cf
c001b1fa:	eb 4f                	jmp    c001b24b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b1fc:	be 01 00 00 00       	mov    esi,0x1
c001b201:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b205:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b209:	d3 e6                	shl    esi,cl
c001b20b:	c1 e7 07             	shl    edi,0x7
c001b20e:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b214:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b219:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b21d:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b223:	85 c6                	test   esi,eax
c001b225:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b22b:	0f 84 cb 00 00 00    	je     c001b2fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c001b231:	0f ba e0 1e          	bt     eax,0x1e
c001b235:	73 2c                	jae    c001b263 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c001b237:	83 ec 0c             	sub    esp,0xc
c001b23a:	68 e1 f4 01 c0       	push   0xc001f4e1
c001b23f:	e8 9c f9 fe ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c001b244:	5b                   	pop    ebx
c001b245:	5e                   	pop    esi
c001b246:	68 f4 f4 01 c0       	push   0xc001f4f4
c001b24b:	ff 35 84 09 02 c0    	push   DWORD PTR ds:0xc0020984
c001b251:	e8 6a dc fe ff       	call   c0008ec0 <VgaText::puts(char const*)>
c001b256:	83 c4 10             	add    esp,0x10
c001b259:	b8 01 00 00 00       	mov    eax,0x1
c001b25e:	e9 d8 00 00 00       	jmp    c001b33b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001b263:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b269:	83 f8 0d             	cmp    eax,0xd
c001b26c:	77 0a                	ja     c001b278 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001b26e:	83 ec 0c             	sub    esp,0xc
c001b271:	68 c8 00 00 00       	push   0xc8
c001b276:	eb 28                	jmp    c001b2a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b278:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b27e:	83 f8 0d             	cmp    eax,0xd
c001b281:	77 0a                	ja     c001b28d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x225>
c001b283:	83 ec 0c             	sub    esp,0xc
c001b286:	68 58 02 00 00       	push   0x258
c001b28b:	eb 13                	jmp    c001b2a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b28d:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b293:	83 f8 06             	cmp    eax,0x6
c001b296:	77 10                	ja     c001b2a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x240>
c001b298:	83 ec 0c             	sub    esp,0xc
c001b29b:	68 dc 05 00 00       	push   0x5dc
c001b2a0:	e8 df 8a ff ff       	call   c0013d84 <milliTenthSleep(unsigned int)>
c001b2a5:	83 c4 10             	add    esp,0x10
c001b2a8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b2ac:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b2af:	75 06                	jne    c001b2b7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24f>
c001b2b1:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b2b5:	74 15                	je     c001b2cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b2b7:	83 fb 06             	cmp    ebx,0x6
c001b2ba:	77 10                	ja     c001b2cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b2bc:	83 ec 0c             	sub    esp,0xc
c001b2bf:	68 c4 09 00 00       	push   0x9c4
c001b2c4:	e8 bb 8a ff ff       	call   c0013d84 <milliTenthSleep(unsigned int)>
c001b2c9:	83 c4 10             	add    esp,0x10
c001b2cc:	43                   	inc    ebx
c001b2cd:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b2d3:	0f 85 44 ff ff ff    	jne    c001b21d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b5>
c001b2d9:	51                   	push   ecx
c001b2da:	51                   	push   ecx
c001b2db:	68 05 f5 01 c0       	push   0xc001f505
c001b2e0:	ff 35 84 09 02 c0    	push   DWORD PTR ds:0xc0020984
c001b2e6:	e8 d5 db fe ff       	call   c0008ec0 <VgaText::puts(char const*)>
c001b2eb:	c7 04 24 15 f5 01 c0 	mov    DWORD PTR [esp],0xc001f515
c001b2f2:	e8 e9 f8 fe ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c001b2f7:	e9 5a ff ff ff       	jmp    c001b256 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ee>
c001b2fc:	0f ba e0 1e          	bt     eax,0x1e
c001b300:	73 19                	jae    c001b31b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001b302:	83 ec 0c             	sub    esp,0xc
c001b305:	68 29 f5 01 c0       	push   0xc001f529
c001b30a:	e8 d1 f8 fe ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c001b30f:	58                   	pop    eax
c001b310:	5a                   	pop    edx
c001b311:	68 3e f5 01 c0       	push   0xc001f53e
c001b316:	e9 30 ff ff ff       	jmp    c001b24b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b31b:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b320:	74 17                	je     c001b339 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b322:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b327:	74 10                	je     c001b339 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b329:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b32f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b333:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b337:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b339:	31 c0                	xor    eax,eax
c001b33b:	83 c4 2c             	add    esp,0x2c
c001b33e:	5b                   	pop    ebx
c001b33f:	5e                   	pop    esi
c001b340:	5f                   	pop    edi
c001b341:	5d                   	pop    ebp
c001b342:	c3                   	ret    
c001b343:	90                   	nop

c001b344 <SATAPI::eject()>:
c001b344:	57                   	push   edi
c001b345:	b9 03 00 00 00       	mov    ecx,0x3
c001b34a:	83 ec 18             	sub    esp,0x18
c001b34d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b351:	fc                   	cld    
c001b352:	31 c0                	xor    eax,eax
c001b354:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b356:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b35b:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b360:	50                   	push   eax
c001b361:	6a 00                	push   0x0
c001b363:	6a 00                	push   0x0
c001b365:	6a 00                	push   0x0
c001b367:	6a 00                	push   0x0
c001b369:	6a 02                	push   0x2
c001b36b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b36f:	50                   	push   eax
c001b370:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b374:	e8 ef fc ff ff       	call   c001b068 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b379:	31 c0                	xor    eax,eax
c001b37b:	83 c4 38             	add    esp,0x38
c001b37e:	5f                   	pop    edi
c001b37f:	c3                   	ret    

c001b380 <SATAPI::read(unsigned long long, int, void*)>:
c001b380:	57                   	push   edi
c001b381:	56                   	push   esi
c001b382:	53                   	push   ebx
c001b383:	83 ec 3c             	sub    esp,0x3c
c001b386:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b38a:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b38e:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b392:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b396:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b39a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b39e:	68 51 f5 01 c0       	push   0xc001f551
c001b3a3:	e8 38 f8 fe ff       	call   c000abe0 <Dbg::kprintf(char const*, ...)>
c001b3a8:	83 c4 10             	add    esp,0x10
c001b3ab:	83 fe 04             	cmp    esi,0x4
c001b3ae:	7e 10                	jle    c001b3c0 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b3b0:	83 ec 0c             	sub    esp,0xc
c001b3b3:	68 62 f5 01 c0       	push   0xc001f562
c001b3b8:	e8 72 53 ff ff       	call   c001072f <Krnl::panic(char const*)>
c001b3bd:	83 c4 10             	add    esp,0x10
c001b3c0:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b3c6:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b3cc:	51                   	push   ecx
c001b3cd:	50                   	push   eax
c001b3ce:	83 c0 02             	add    eax,0x2
c001b3d1:	c1 e0 07             	shl    eax,0x7
c001b3d4:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b3da:	50                   	push   eax
c001b3db:	52                   	push   edx
c001b3dc:	e8 3b e9 ff ff       	call   c0019d1c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b3e1:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b3e5:	b9 03 00 00 00       	mov    ecx,0x3
c001b3ea:	fc                   	cld    
c001b3eb:	31 c0                	xor    eax,eax
c001b3ed:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b3ef:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b3f4:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b3f9:	83 c4 0c             	add    esp,0xc
c001b3fc:	6a 00                	push   0x0
c001b3fe:	6a 00                	push   0x0
c001b400:	6a 00                	push   0x0
c001b402:	6a 00                	push   0x0
c001b404:	6a 02                	push   0x2
c001b406:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b40a:	50                   	push   eax
c001b40b:	53                   	push   ebx
c001b40c:	e8 57 fc ff ff       	call   c001b068 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b411:	83 c4 20             	add    esp,0x20
c001b414:	85 c0                	test   eax,eax
c001b416:	74 1f                	je     c001b437 <SATAPI::read(unsigned long long, int, void*)+0xb7>
c001b418:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b41c:	50                   	push   eax
c001b41d:	50                   	push   eax
c001b41e:	68 8c f5 01 c0       	push   0xc001f58c
c001b423:	ff 35 84 09 02 c0    	push   DWORD PTR ds:0xc0020984
c001b429:	e8 92 da fe ff       	call   c0008ec0 <VgaText::puts(char const*)>
c001b42e:	58                   	pop    eax
c001b42f:	5a                   	pop    edx
c001b430:	68 94 f5 01 c0       	push   0xc001f594
c001b435:	eb 61                	jmp    c001b498 <SATAPI::read(unsigned long long, int, void*)+0x118>
c001b437:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b43b:	b9 03 00 00 00       	mov    ecx,0x3
c001b440:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b442:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b446:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b44b:	0f c8                	bswap  eax
c001b44d:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b451:	89 f0                	mov    eax,esi
c001b453:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b457:	57                   	push   edi
c001b458:	56                   	push   esi
c001b459:	c1 e6 0b             	shl    esi,0xb
c001b45c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b460:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b464:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b468:	56                   	push   esi
c001b469:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b46d:	50                   	push   eax
c001b46e:	53                   	push   ebx
c001b46f:	e8 f4 fb ff ff       	call   c001b068 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b474:	83 c4 20             	add    esp,0x20
c001b477:	85 c0                	test   eax,eax
c001b479:	74 2f                	je     c001b4aa <SATAPI::read(unsigned long long, int, void*)+0x12a>
c001b47b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b47f:	50                   	push   eax
c001b480:	50                   	push   eax
c001b481:	68 9e f5 01 c0       	push   0xc001f59e
c001b486:	ff 35 84 09 02 c0    	push   DWORD PTR ds:0xc0020984
c001b48c:	e8 2f da fe ff       	call   c0008ec0 <VgaText::puts(char const*)>
c001b491:	5a                   	pop    edx
c001b492:	59                   	pop    ecx
c001b493:	68 a6 f5 01 c0       	push   0xc001f5a6
c001b498:	ff 35 84 09 02 c0    	push   DWORD PTR ds:0xc0020984
c001b49e:	e8 1d da fe ff       	call   c0008ec0 <VgaText::puts(char const*)>
c001b4a3:	83 c4 10             	add    esp,0x10
c001b4a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4aa:	83 c4 30             	add    esp,0x30
c001b4ad:	5b                   	pop    ebx
c001b4ae:	5e                   	pop    esi
c001b4af:	5f                   	pop    edi
c001b4b0:	c3                   	ret    
c001b4b1:	90                   	nop

c001b4b2 <SATAPI::detectMedia()>:
c001b4b2:	c3                   	ret    
c001b4b3:	90                   	nop

c001b4b4 <IOAPIC::close(int, int, void*)>:
c001b4b4:	b8 00 00 00 00       	mov    eax,0x0
c001b4b9:	c3                   	ret    

c001b4ba <apicGetBase()>:
c001b4ba:	55                   	push   ebp
c001b4bb:	89 e5                	mov    ebp,esp
c001b4bd:	83 ec 18             	sub    esp,0x18
c001b4c0:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c001b4c5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b4cb:	83 e0 08             	and    eax,0x8
c001b4ce:	84 c0                	test   al,al
c001b4d0:	75 07                	jne    c001b4d9 <apicGetBase()+0x1f>
c001b4d2:	b8 00 00 00 00       	mov    eax,0x0
c001b4d7:	eb 21                	jmp    c001b4fa <apicGetBase()+0x40>
c001b4d9:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c001b4de:	83 ec 08             	sub    esp,0x8
c001b4e1:	6a 1b                	push   0x1b
c001b4e3:	50                   	push   eax
c001b4e4:	e8 a5 bf fe ff       	call   c000748e <Computer::rdmsr(unsigned int)>
c001b4e9:	83 c4 10             	add    esp,0x10
c001b4ec:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b4ef:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b4f2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b4f5:	25 00 00 ff ff       	and    eax,0xffff0000
c001b4fa:	c9                   	leave  
c001b4fb:	c3                   	ret    

c001b4fc <IOAPIC::IOAPIC()>:
c001b4fc:	83 ec 0c             	sub    esp,0xc
c001b4ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b503:	83 ec 08             	sub    esp,0x8
c001b506:	68 e8 f5 01 c0       	push   0xc001f5e8
c001b50b:	50                   	push   eax
c001b50c:	e8 a7 0c ff ff       	call   c000c1b8 <Device::Device(char const*)>
c001b511:	83 c4 10             	add    esp,0x10
c001b514:	ba f8 f5 01 c0       	mov    edx,0xc001f5f8
c001b519:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b51d:	89 10                	mov    DWORD PTR [eax],edx
c001b51f:	90                   	nop
c001b520:	83 c4 0c             	add    esp,0xc
c001b523:	c3                   	ret    

c001b524 <apicOpen()>:
c001b524:	55                   	push   ebp
c001b525:	89 e5                	mov    ebp,esp
c001b527:	53                   	push   ebx
c001b528:	83 ec 34             	sub    esp,0x34
c001b52b:	a0 40 48 02 c0       	mov    al,ds:0xc0024840
c001b530:	83 f0 01             	xor    eax,0x1
c001b533:	84 c0                	test   al,al
c001b535:	0f 84 9d 00 00 00    	je     c001b5d8 <apicOpen()+0xb4>
c001b53b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b53f:	a0 00 32 02 c0       	mov    al,ds:0xc0023200
c001b544:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b547:	0f 83 84 00 00 00    	jae    c001b5d1 <apicOpen()+0xad>
c001b54d:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b554:	83 ec 0c             	sub    esp,0xc
c001b557:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b55a:	e8 f2 c8 fe ff       	call   c0007e51 <malloc>
c001b55f:	83 c4 10             	add    esp,0x10
c001b562:	89 c3                	mov    ebx,eax
c001b564:	83 ec 0c             	sub    esp,0xc
c001b567:	53                   	push   ebx
c001b568:	e8 8f ff ff ff       	call   c001b4fc <IOAPIC::IOAPIC()>
c001b56d:	83 c4 10             	add    esp,0x10
c001b570:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b573:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b576:	25 ff 00 00 00       	and    eax,0xff
c001b57b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b57e:	89 14 85 20 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb7e0],edx
c001b585:	a1 00 48 02 c0       	mov    eax,ds:0xc0024800
c001b58a:	40                   	inc    eax
c001b58b:	a3 00 48 02 c0       	mov    ds:0xc0024800,eax
c001b590:	a1 38 09 02 c0       	mov    eax,ds:0xc0020938
c001b595:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b59b:	83 ec 08             	sub    esp,0x8
c001b59e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b5a1:	50                   	push   eax
c001b5a2:	e8 79 0a ff ff       	call   c000c020 <Device::addChild(Device*)>
c001b5a7:	83 c4 10             	add    esp,0x10
c001b5aa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b5ad:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5af:	83 c0 08             	add    eax,0x8
c001b5b2:	8b 10                	mov    edx,DWORD PTR [eax]
c001b5b4:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b5b7:	25 ff 00 00 00       	and    eax,0xff
c001b5bc:	6a 00                	push   0x0
c001b5be:	6a 00                	push   0x0
c001b5c0:	50                   	push   eax
c001b5c1:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b5c4:	ff d2                	call   edx
c001b5c6:	83 c4 10             	add    esp,0x10
c001b5c9:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b5cc:	e9 6e ff ff ff       	jmp    c001b53f <apicOpen()+0x1b>
c001b5d1:	c6 05 40 48 02 c0 01 	mov    BYTE PTR ds:0xc0024840,0x1
c001b5d8:	e8 dd fe ff ff       	call   c001b4ba <apicGetBase()>
c001b5dd:	05 f0 00 00 00       	add    eax,0xf0
c001b5e2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b5e5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b5e8:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5ea:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b5ed:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b5f4:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b5fb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b5fe:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b601:	89 10                	mov    DWORD PTR [eax],edx
c001b603:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b60a:	a1 50 31 02 c0       	mov    eax,ds:0xc0023150
c001b60f:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b612:	7d 70                	jge    c001b684 <apicOpen()+0x160>
c001b614:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b617:	8b 04 85 60 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcea0]
c001b61e:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b621:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b624:	8b 04 85 60 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcea0]
c001b62b:	c1 e8 08             	shr    eax,0x8
c001b62e:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b632:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b635:	8b 04 85 60 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcea0]
c001b63c:	c1 e8 18             	shr    eax,0x18
c001b63f:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b642:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b646:	75 37                	jne    c001b67f <apicOpen()+0x15b>
c001b648:	e8 6d fe ff ff       	call   c001b4ba <apicGetBase()>
c001b64d:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b651:	75 07                	jne    c001b65a <apicOpen()+0x136>
c001b653:	ba 60 03 00 00       	mov    edx,0x360
c001b658:	eb 05                	jmp    c001b65f <apicOpen()+0x13b>
c001b65a:	ba 50 03 00 00       	mov    edx,0x350
c001b65f:	01 d0                	add    eax,edx
c001b661:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b664:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b667:	8b 00                	mov    eax,DWORD PTR [eax]
c001b669:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b66c:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b673:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b677:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b67a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b67d:	89 10                	mov    DWORD PTR [eax],edx
c001b67f:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b682:	eb 86                	jmp    c001b60a <apicOpen()+0xe6>
c001b684:	90                   	nop
c001b685:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b688:	c9                   	leave  
c001b689:	c3                   	ret    

c001b68a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b68a:	55                   	push   ebp
c001b68b:	89 e5                	mov    ebp,esp
c001b68d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b690:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b696:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b699:	72 1d                	jb     c001b6b8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b69b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b69e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b6a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6a7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b6ad:	01 d0                	add    eax,edx
c001b6af:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b6b2:	73 04                	jae    c001b6b8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b6b4:	b0 01                	mov    al,0x1
c001b6b6:	eb 02                	jmp    c001b6ba <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b6b8:	b0 00                	mov    al,0x0
c001b6ba:	5d                   	pop    ebp
c001b6bb:	c3                   	ret    

c001b6bc <IOAPIC::read(int)>:
c001b6bc:	55                   	push   ebp
c001b6bd:	89 e5                	mov    ebp,esp
c001b6bf:	83 ec 10             	sub    esp,0x10
c001b6c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6c5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b6cb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b6ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b6d1:	31 d2                	xor    edx,edx
c001b6d3:	88 c2                	mov    dl,al
c001b6d5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b6d8:	89 10                	mov    DWORD PTR [eax],edx
c001b6da:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b6dd:	83 c0 10             	add    eax,0x10
c001b6e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001b6e2:	c9                   	leave  
c001b6e3:	c3                   	ret    

c001b6e4 <IOAPIC::open(int, int, void*)>:
c001b6e4:	55                   	push   ebp
c001b6e5:	89 e5                	mov    ebp,esp
c001b6e7:	57                   	push   edi
c001b6e8:	56                   	push   esi
c001b6e9:	53                   	push   ebx
c001b6ea:	83 ec 04             	sub    esp,0x4
c001b6ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b6f3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b6f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6fc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b702:	8b 14 85 40 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcdc0]
c001b709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b70c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b715:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b71b:	8b 14 85 c0 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcd40]
c001b722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b725:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b72b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b72e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b737:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b73d:	89 c6                	mov    esi,eax
c001b73f:	81 e6 ff 00 00 00    	and    esi,0xff
c001b745:	89 d0                	mov    eax,edx
c001b747:	ba 00 00 00 00       	mov    edx,0x0
c001b74c:	89 c7                	mov    edi,eax
c001b74e:	83 e7 ff             	and    edi,0xffffffff
c001b751:	89 f9                	mov    ecx,edi
c001b753:	89 d0                	mov    eax,edx
c001b755:	25 ff 00 00 00       	and    eax,0xff
c001b75a:	89 c3                	mov    ebx,eax
c001b75c:	89 c8                	mov    eax,ecx
c001b75e:	89 da                	mov    edx,ebx
c001b760:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b763:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b766:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b76a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b76e:	83 e0 00             	and    eax,0x0
c001b771:	09 d0                	or     eax,edx
c001b773:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b777:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b77a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b780:	8d 50 01             	lea    edx,[eax+0x1]
c001b783:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b786:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b78c:	31 d2                	xor    edx,edx
c001b78e:	88 c2                	mov    dl,al
c001b790:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b793:	83 c2 08             	add    edx,0x8
c001b796:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b79a:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b7a0:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b7a6:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b7aa:	6a 01                	push   0x1
c001b7ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7af:	e8 08 ff ff ff       	call   c001b6bc <IOAPIC::read(int)>
c001b7b4:	83 c4 08             	add    esp,0x8
c001b7b7:	c1 f8 10             	sar    eax,0x10
c001b7ba:	25 ff 00 00 00       	and    eax,0xff
c001b7bf:	8d 50 01             	lea    edx,[eax+0x1]
c001b7c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7c5:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b7cb:	b8 00 00 00 00       	mov    eax,0x0
c001b7d0:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b7d3:	5b                   	pop    ebx
c001b7d4:	5e                   	pop    esi
c001b7d5:	5f                   	pop    edi
c001b7d6:	5d                   	pop    ebp
c001b7d7:	c3                   	ret    

c001b7d8 <IOAPIC::write(int, int)>:
c001b7d8:	55                   	push   ebp
c001b7d9:	89 e5                	mov    ebp,esp
c001b7db:	83 ec 10             	sub    esp,0x10
c001b7de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7e1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b7e7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b7ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b7ed:	31 d2                	xor    edx,edx
c001b7ef:	88 c2                	mov    dl,al
c001b7f1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b7f4:	89 10                	mov    DWORD PTR [eax],edx
c001b7f6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b7f9:	8d 50 10             	lea    edx,[eax+0x10]
c001b7fc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b7ff:	89 02                	mov    DWORD PTR [edx],eax
c001b801:	90                   	nop
c001b802:	c9                   	leave  
c001b803:	c3                   	ret    

c001b804 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b804:	55                   	push   ebp
c001b805:	89 e5                	mov    ebp,esp
c001b807:	53                   	push   ebx
c001b808:	83 ec 2c             	sub    esp,0x2c
c001b80b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b80e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b811:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b814:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b817:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b81a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b81d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b820:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b823:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b826:	88 d8                	mov    al,bl
c001b828:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b82b:	88 c8                	mov    al,cl
c001b82d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b830:	88 d0                	mov    al,dl
c001b832:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b835:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b838:	25 ff 00 00 00       	and    eax,0xff
c001b83d:	83 c0 08             	add    eax,0x8
c001b840:	01 c0                	add    eax,eax
c001b842:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b845:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b848:	25 ff 00 00 00       	and    eax,0xff
c001b84d:	83 c0 08             	add    eax,0x8
c001b850:	01 c0                	add    eax,eax
c001b852:	40                   	inc    eax
c001b853:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b856:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b859:	50                   	push   eax
c001b85a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b85d:	e8 5a fe ff ff       	call   c001b6bc <IOAPIC::read(int)>
c001b862:	83 c4 08             	add    esp,0x8
c001b865:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b868:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b86f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b872:	c1 e0 18             	shl    eax,0x18
c001b875:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b878:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b87b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b87e:	52                   	push   edx
c001b87f:	50                   	push   eax
c001b880:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b883:	e8 50 ff ff ff       	call   c001b7d8 <IOAPIC::write(int, int)>
c001b888:	83 c4 0c             	add    esp,0xc
c001b88b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b88e:	50                   	push   eax
c001b88f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b892:	e8 25 fe ff ff       	call   c001b6bc <IOAPIC::read(int)>
c001b897:	83 c4 08             	add    esp,0x8
c001b89a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b89d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b8a4:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b8ab:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b8b2:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b8b6:	74 09                	je     c001b8c1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b8b8:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b8bf:	eb 07                	jmp    c001b8c8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b8c1:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b8c8:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b8cc:	74 09                	je     c001b8d7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b8ce:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b8d5:	eb 07                	jmp    c001b8de <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b8d7:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b8de:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b8e5:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b8e8:	25 ff 00 00 00       	and    eax,0xff
c001b8ed:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b8f0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b8f3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b8f6:	52                   	push   edx
c001b8f7:	50                   	push   eax
c001b8f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8fb:	e8 d8 fe ff ff       	call   c001b7d8 <IOAPIC::write(int, int)>
c001b900:	83 c4 0c             	add    esp,0xc
c001b903:	90                   	nop
c001b904:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b907:	c9                   	leave  
c001b908:	c3                   	ret    
c001b909:	66 90                	xchg   ax,ax
c001b90b:	90                   	nop

c001b90c <APICTimer::close(int, int, void*)>:
c001b90c:	b8 00 00 00 00       	mov    eax,0x0
c001b911:	c3                   	ret    
c001b912:	66 90                	xchg   ax,ax

c001b914 <apicTimerHandler(regs*, void*)>:
c001b914:	83 ec 0c             	sub    esp,0xc
c001b917:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b91b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b91d:	b8 10 27 00 00       	mov    eax,0x2710
c001b922:	ba 00 00 00 00       	mov    edx,0x0
c001b927:	f7 f1                	div    ecx
c001b929:	83 ec 0c             	sub    esp,0xc
c001b92c:	50                   	push   eax
c001b92d:	e8 82 1f ff ff       	call   c000d8b4 <timerHandler(unsigned int)>
c001b932:	83 c4 10             	add    esp,0x10
c001b935:	90                   	nop
c001b936:	83 c4 0c             	add    esp,0xc
c001b939:	c3                   	ret    
c001b93a:	66 90                	xchg   ax,ax

c001b93c <APICTimer::open(int, int, void*)>:
c001b93c:	83 ec 0c             	sub    esp,0xc
c001b93f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b943:	8b 00                	mov    eax,DWORD PTR [eax]
c001b945:	83 c0 24             	add    eax,0x24
c001b948:	8b 00                	mov    eax,DWORD PTR [eax]
c001b94a:	83 ec 08             	sub    esp,0x8
c001b94d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b951:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b955:	ff d0                	call   eax
c001b957:	83 c4 10             	add    esp,0x10
c001b95a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b95e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b962:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b96c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b970:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b976:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b97a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b980:	83 ec 0c             	sub    esp,0xc
c001b983:	51                   	push   ecx
c001b984:	6a 01                	push   0x1
c001b986:	68 14 b9 01 c0       	push   0xc001b914
c001b98b:	52                   	push   edx
c001b98c:	50                   	push   eax
c001b98d:	e8 3a 06 ff ff       	call   c000bfcc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b992:	83 c4 20             	add    esp,0x20
c001b995:	89 c2                	mov    edx,eax
c001b997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b99b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b9a1:	b8 00 00 00 00       	mov    eax,0x0
c001b9a6:	83 c4 0c             	add    esp,0xc
c001b9a9:	c3                   	ret    
c001b9aa:	66 90                	xchg   ax,ax

c001b9ac <APICTimer::write(int)>:
c001b9ac:	83 ec 0c             	sub    esp,0xc
c001b9af:	83 ec 0c             	sub    esp,0xc
c001b9b2:	68 1c f6 01 c0       	push   0xc001f61c
c001b9b7:	e8 73 4d ff ff       	call   c001072f <Krnl::panic(char const*)>
c001b9bc:	83 c4 10             	add    esp,0x10
c001b9bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9c7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b9cd:	90                   	nop
c001b9ce:	83 c4 0c             	add    esp,0xc
c001b9d1:	c3                   	ret    
c001b9d2:	66 90                	xchg   ax,ax

c001b9d4 <APICTimer::APICTimer()>:
c001b9d4:	83 ec 0c             	sub    esp,0xc
c001b9d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9db:	83 ec 08             	sub    esp,0x8
c001b9de:	68 2c f6 01 c0       	push   0xc001f62c
c001b9e3:	50                   	push   eax
c001b9e4:	e8 ff 1d ff ff       	call   c000d7e8 <Timer::Timer(char const*)>
c001b9e9:	83 c4 10             	add    esp,0x10
c001b9ec:	ba 40 f6 01 c0       	mov    edx,0xc001f640
c001b9f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9f5:	89 10                	mov    DWORD PTR [eax],edx
c001b9f7:	90                   	nop
c001b9f8:	83 c4 0c             	add    esp,0xc
c001b9fb:	c3                   	ret    

c001b9fc <PIT::write(int)>:
c001b9fc:	83 ec 10             	sub    esp,0x10
c001b9ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba03:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ba07:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ba0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba11:	a3 44 48 02 c0       	mov    ds:0xc0024844,eax
c001ba16:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ba1b:	99                   	cdq    
c001ba1c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ba20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba24:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ba2b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ba30:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ba34:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ba39:	ee                   	out    dx,al
c001ba3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba3e:	25 ff 00 00 00       	and    eax,0xff
c001ba43:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ba4a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ba4e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ba52:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ba57:	ee                   	out    dx,al
c001ba58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba5c:	c1 f8 08             	sar    eax,0x8
c001ba5f:	25 ff 00 00 00       	and    eax,0xff
c001ba64:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ba6b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ba6f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ba73:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ba78:	ee                   	out    dx,al
c001ba79:	90                   	nop
c001ba7a:	83 c4 10             	add    esp,0x10
c001ba7d:	c3                   	ret    
c001ba7e:	66 90                	xchg   ax,ax

c001ba80 <pitHandler(regs*, void*)>:
c001ba80:	83 ec 0c             	sub    esp,0xc
c001ba83:	8b 0d 44 48 02 c0    	mov    ecx,DWORD PTR ds:0xc0024844
c001ba89:	b8 10 27 00 00       	mov    eax,0x2710
c001ba8e:	99                   	cdq    
c001ba8f:	f7 f9                	idiv   ecx
c001ba91:	83 ec 0c             	sub    esp,0xc
c001ba94:	50                   	push   eax
c001ba95:	e8 1a 1e ff ff       	call   c000d8b4 <timerHandler(unsigned int)>
c001ba9a:	83 c4 10             	add    esp,0x10
c001ba9d:	90                   	nop
c001ba9e:	83 c4 0c             	add    esp,0xc
c001baa1:	c3                   	ret    
c001baa2:	66 90                	xchg   ax,ax

c001baa4 <PIT::open(int, int, void*)>:
c001baa4:	83 ec 0c             	sub    esp,0xc
c001baa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baab:	8b 00                	mov    eax,DWORD PTR [eax]
c001baad:	83 c0 24             	add    eax,0x24
c001bab0:	8b 00                	mov    eax,DWORD PTR [eax]
c001bab2:	83 ec 08             	sub    esp,0x8
c001bab5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001babd:	ff d0                	call   eax
c001babf:	83 c4 10             	add    esp,0x10
c001bac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bac6:	83 ec 0c             	sub    esp,0xc
c001bac9:	6a 00                	push   0x0
c001bacb:	6a 01                	push   0x1
c001bacd:	68 80 ba 01 c0       	push   0xc001ba80
c001bad2:	6a 00                	push   0x0
c001bad4:	50                   	push   eax
c001bad5:	e8 f2 04 ff ff       	call   c000bfcc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bada:	83 c4 20             	add    esp,0x20
c001badd:	89 c2                	mov    edx,eax
c001badf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bae3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bae9:	b8 00 00 00 00       	mov    eax,0x0
c001baee:	83 c4 0c             	add    esp,0xc
c001baf1:	c3                   	ret    
c001baf2:	66 90                	xchg   ax,ax

c001baf4 <PIT::close(int, int, void*)>:
c001baf4:	83 ec 0c             	sub    esp,0xc
c001baf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bafb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001bb05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb09:	6a 01                	push   0x1
c001bb0b:	68 80 ba 01 c0       	push   0xc001ba80
c001bb10:	6a 00                	push   0x0
c001bb12:	50                   	push   eax
c001bb13:	e8 ea 04 ff ff       	call   c000c002 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001bb18:	83 c4 10             	add    esp,0x10
c001bb1b:	b8 00 00 00 00       	mov    eax,0x0
c001bb20:	83 c4 0c             	add    esp,0xc
c001bb23:	c3                   	ret    

c001bb24 <PIT::PIT()>:
c001bb24:	83 ec 0c             	sub    esp,0xc
c001bb27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb2b:	83 ec 08             	sub    esp,0x8
c001bb2e:	68 68 f6 01 c0       	push   0xc001f668
c001bb33:	50                   	push   eax
c001bb34:	e8 af 1c ff ff       	call   c000d7e8 <Timer::Timer(char const*)>
c001bb39:	83 c4 10             	add    esp,0x10
c001bb3c:	ba 90 f6 01 c0       	mov    edx,0xc001f690
c001bb41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb45:	89 10                	mov    DWORD PTR [eax],edx
c001bb47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb4b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb51:	31 d2                	xor    edx,edx
c001bb53:	88 c2                	mov    dl,al
c001bb55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb59:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001bb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb64:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb6a:	31 d2                	xor    edx,edx
c001bb6c:	88 c2                	mov    dl,al
c001bb6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb72:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001bb77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb7b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb81:	8d 50 01             	lea    edx,[eax+0x1]
c001bb84:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bb88:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bb8e:	31 d2                	xor    edx,edx
c001bb90:	88 c2                	mov    dl,al
c001bb92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb96:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bb9a:	83 e1 3f             	and    ecx,0x3f
c001bb9d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bba1:	90                   	nop
c001bba2:	83 c4 0c             	add    esp,0xc
c001bba5:	c3                   	ret    
c001bba6:	66 90                	xchg   ax,ax
c001bba8:	66 90                	xchg   ax,ax
c001bbaa:	66 90                	xchg   ax,ax
c001bbac:	66 90                	xchg   ax,ax
c001bbae:	66 90                	xchg   ax,ax

c001bbb0 <avxDetect>:
c001bbb0:	b8 01 00 00 00       	mov    eax,0x1
c001bbb5:	0f a2                	cpuid  
c001bbb7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001bbbd:	74 15                	je     c001bbd4 <avxDetect.noAVX>
c001bbbf:	b8 01 00 00 00       	mov    eax,0x1
c001bbc4:	0f a2                	cpuid  
c001bbc6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001bbcc:	74 06                	je     c001bbd4 <avxDetect.noAVX>
c001bbce:	b8 01 00 00 00       	mov    eax,0x1
c001bbd3:	c3                   	ret    

c001bbd4 <avxDetect.noAVX>:
c001bbd4:	b8 00 00 00 00       	mov    eax,0x0
c001bbd9:	c3                   	ret    

c001bbda <avxSave>:
c001bbda:	53                   	push   ebx
c001bbdb:	52                   	push   edx
c001bbdc:	31 c0                	xor    eax,eax
c001bbde:	48                   	dec    eax
c001bbdf:	89 c2                	mov    edx,eax
c001bbe1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bbe5:	0f ae 23             	xsave  [ebx]
c001bbe8:	5a                   	pop    edx
c001bbe9:	5b                   	pop    ebx
c001bbea:	c3                   	ret    

c001bbeb <avxLoad>:
c001bbeb:	53                   	push   ebx
c001bbec:	52                   	push   edx
c001bbed:	31 c0                	xor    eax,eax
c001bbef:	48                   	dec    eax
c001bbf0:	89 c2                	mov    edx,eax
c001bbf2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bbf6:	0f ae 2b             	xrstor [ebx]
c001bbf9:	5a                   	pop    edx
c001bbfa:	5b                   	pop    ebx
c001bbfb:	c3                   	ret    

c001bbfc <avxInit>:
c001bbfc:	e8 57 02 00 00       	call   c001be58 <sseInit>
c001bc01:	50                   	push   eax
c001bc02:	51                   	push   ecx
c001bc03:	0f 20 e0             	mov    eax,cr4
c001bc06:	0d 00 00 04 00       	or     eax,0x40000
c001bc0b:	0f 22 e0             	mov    cr4,eax
c001bc0e:	31 c9                	xor    ecx,ecx
c001bc10:	0f 01 d0             	xgetbv 
c001bc13:	0d 07 00 00 00       	or     eax,0x7
c001bc18:	0f 01 d1             	xsetbv 
c001bc1b:	59                   	pop    ecx
c001bc1c:	58                   	pop    eax
c001bc1d:	c3                   	ret    

c001bc1e <avxClose>:
c001bc1e:	c3                   	ret    

c001bc1f <wouldSheSayYes>:
c001bc1f:	c3                   	ret    
c001bc20:	49                   	dec    ecx
c001bc21:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bc25:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bc29:	75 20                	jne    c001bc4b <isr0+0xb>
c001bc2b:	4e                   	dec    esi
c001bc2c:	79 61                	jns    c001bc8f <isr7+0x3>
c001bc2e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bc33:	66 90                	xchg   ax,ax
c001bc35:	66 90                	xchg   ax,ax
c001bc37:	66 90                	xchg   ax,ax
c001bc39:	66 90                	xchg   ax,ax
c001bc3b:	66 90                	xchg   ax,ax
c001bc3d:	66 90                	xchg   ax,ax
c001bc3f:	90                   	nop

c001bc40 <isr0>:
c001bc40:	fa                   	cli    
c001bc41:	68 00 00 00 00       	push   0x0
c001bc46:	68 00 00 00 00       	push   0x0
c001bc4b:	e9 44 01 00 00       	jmp    c001bd94 <int_common_stub>

c001bc50 <isr1>:
c001bc50:	fa                   	cli    
c001bc51:	6a 00                	push   0x0
c001bc53:	6a 01                	push   0x1
c001bc55:	e9 3a 01 00 00       	jmp    c001bd94 <int_common_stub>

c001bc5a <isr2>:
c001bc5a:	fa                   	cli    
c001bc5b:	6a 00                	push   0x0
c001bc5d:	6a 02                	push   0x2
c001bc5f:	e9 30 01 00 00       	jmp    c001bd94 <int_common_stub>

c001bc64 <isr3>:
c001bc64:	fa                   	cli    
c001bc65:	6a 00                	push   0x0
c001bc67:	6a 03                	push   0x3
c001bc69:	e9 26 01 00 00       	jmp    c001bd94 <int_common_stub>

c001bc6e <isr4>:
c001bc6e:	fa                   	cli    
c001bc6f:	6a 00                	push   0x0
c001bc71:	6a 04                	push   0x4
c001bc73:	e9 1c 01 00 00       	jmp    c001bd94 <int_common_stub>

c001bc78 <isr5>:
c001bc78:	fa                   	cli    
c001bc79:	6a 00                	push   0x0
c001bc7b:	6a 05                	push   0x5
c001bc7d:	e9 12 01 00 00       	jmp    c001bd94 <int_common_stub>

c001bc82 <isr6>:
c001bc82:	fa                   	cli    
c001bc83:	6a 00                	push   0x0
c001bc85:	6a 06                	push   0x6
c001bc87:	e9 08 01 00 00       	jmp    c001bd94 <int_common_stub>

c001bc8c <isr7>:
c001bc8c:	fa                   	cli    
c001bc8d:	6a 00                	push   0x0
c001bc8f:	6a 07                	push   0x7
c001bc91:	e9 fe 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bc96 <isr8>:
c001bc96:	fa                   	cli    
c001bc97:	6a 08                	push   0x8
c001bc99:	e9 f6 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bc9e <isr9>:
c001bc9e:	fa                   	cli    
c001bc9f:	6a 00                	push   0x0
c001bca1:	6a 09                	push   0x9
c001bca3:	e9 ec 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bca8 <isr10>:
c001bca8:	fa                   	cli    
c001bca9:	6a 0a                	push   0xa
c001bcab:	e9 e4 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bcb0 <isr11>:
c001bcb0:	fa                   	cli    
c001bcb1:	6a 0b                	push   0xb
c001bcb3:	e9 dc 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bcb8 <isr12>:
c001bcb8:	fa                   	cli    
c001bcb9:	6a 0c                	push   0xc
c001bcbb:	e9 d4 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bcc0 <isr13>:
c001bcc0:	fa                   	cli    
c001bcc1:	6a 0d                	push   0xd
c001bcc3:	e9 cc 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bcc8 <isr14>:
c001bcc8:	fa                   	cli    
c001bcc9:	6a 0e                	push   0xe
c001bccb:	e9 c4 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bcd0 <isr15>:
c001bcd0:	fa                   	cli    
c001bcd1:	6a 00                	push   0x0
c001bcd3:	6a 0f                	push   0xf
c001bcd5:	e9 ba 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bcda <isr16>:
c001bcda:	fa                   	cli    
c001bcdb:	6a 00                	push   0x0
c001bcdd:	6a 10                	push   0x10
c001bcdf:	e9 b0 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bce4 <isr17>:
c001bce4:	fa                   	cli    
c001bce5:	6a 00                	push   0x0
c001bce7:	6a 11                	push   0x11
c001bce9:	e9 a6 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bcee <isr18>:
c001bcee:	fa                   	cli    
c001bcef:	6a 00                	push   0x0
c001bcf1:	6a 12                	push   0x12
c001bcf3:	e9 9c 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bcf8 <irq3>:
c001bcf8:	fa                   	cli    
c001bcf9:	6a 00                	push   0x0
c001bcfb:	6a 23                	push   0x23
c001bcfd:	e9 92 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd02 <irq4>:
c001bd02:	fa                   	cli    
c001bd03:	6a 00                	push   0x0
c001bd05:	6a 24                	push   0x24
c001bd07:	e9 88 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd0c <irq5>:
c001bd0c:	fa                   	cli    
c001bd0d:	6a 00                	push   0x0
c001bd0f:	6a 25                	push   0x25
c001bd11:	e9 7e 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd16 <irq6>:
c001bd16:	fa                   	cli    
c001bd17:	6a 00                	push   0x0
c001bd19:	6a 26                	push   0x26
c001bd1b:	e9 74 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd20 <irq7>:
c001bd20:	fa                   	cli    
c001bd21:	6a 00                	push   0x0
c001bd23:	6a 27                	push   0x27
c001bd25:	e9 6a 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd2a <irq8>:
c001bd2a:	fa                   	cli    
c001bd2b:	6a 00                	push   0x0
c001bd2d:	6a 28                	push   0x28
c001bd2f:	e9 60 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd34 <irq9>:
c001bd34:	fa                   	cli    
c001bd35:	6a 00                	push   0x0
c001bd37:	6a 29                	push   0x29
c001bd39:	e9 56 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd3e <irq10>:
c001bd3e:	fa                   	cli    
c001bd3f:	6a 00                	push   0x0
c001bd41:	6a 2a                	push   0x2a
c001bd43:	e9 4c 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd48 <irq11>:
c001bd48:	fa                   	cli    
c001bd49:	6a 00                	push   0x0
c001bd4b:	6a 2b                	push   0x2b
c001bd4d:	e9 42 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd52 <irq12>:
c001bd52:	fa                   	cli    
c001bd53:	6a 00                	push   0x0
c001bd55:	6a 2c                	push   0x2c
c001bd57:	e9 38 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd5c <irq13>:
c001bd5c:	fa                   	cli    
c001bd5d:	6a 00                	push   0x0
c001bd5f:	6a 2d                	push   0x2d
c001bd61:	e9 2e 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd66 <irq14>:
c001bd66:	fa                   	cli    
c001bd67:	6a 00                	push   0x0
c001bd69:	6a 2e                	push   0x2e
c001bd6b:	e9 24 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd70 <irq15>:
c001bd70:	fa                   	cli    
c001bd71:	6a 00                	push   0x0
c001bd73:	6a 2f                	push   0x2f
c001bd75:	e9 1a 00 00 00       	jmp    c001bd94 <int_common_stub>

c001bd7a <irq1>:
c001bd7a:	fa                   	cli    
c001bd7b:	6a 00                	push   0x0
c001bd7d:	6a 21                	push   0x21
c001bd7f:	eb 13                	jmp    c001bd94 <int_common_stub>

c001bd81 <irq2>:
c001bd81:	fa                   	cli    
c001bd82:	6a 00                	push   0x0
c001bd84:	6a 22                	push   0x22
c001bd86:	eb 0c                	jmp    c001bd94 <int_common_stub>

c001bd88 <isr96>:
c001bd88:	6a 00                	push   0x0
c001bd8a:	6a 60                	push   0x60
c001bd8c:	fb                   	sti    
c001bd8d:	eb 05                	jmp    c001bd94 <int_common_stub>

c001bd8f <irq0>:
c001bd8f:	fa                   	cli    
c001bd90:	6a 00                	push   0x0
c001bd92:	6a 20                	push   0x20

c001bd94 <int_common_stub>:
c001bd94:	60                   	pusha  
c001bd95:	1e                   	push   ds
c001bd96:	06                   	push   es
c001bd97:	0f a0                	push   fs
c001bd99:	0f a8                	push   gs
c001bd9b:	66 b8 10 00          	mov    ax,0x10
c001bd9f:	66 8e d8             	mov    ds,ax
c001bda2:	66 8e c0             	mov    es,ax
c001bda5:	66 8e e0             	mov    fs,ax
c001bda8:	66 8e e8             	mov    gs,ax
c001bdab:	54                   	push   esp
c001bdac:	fc                   	cld    
c001bdad:	e8 1a 07 ff ff       	call   c000c4cc <int_handler>
c001bdb2:	81 c4 04 00 00 00    	add    esp,0x4
c001bdb8:	0f a9                	pop    gs
c001bdba:	0f a1                	pop    fs
c001bdbc:	07                   	pop    es
c001bdbd:	1f                   	pop    ds
c001bdbe:	61                   	popa   
c001bdbf:	81 c4 08 00 00 00    	add    esp,0x8
c001bdc5:	cf                   	iret   

c001bdc6 <irq16>:
c001bdc6:	fa                   	cli    
c001bdc7:	6a 00                	push   0x0
c001bdc9:	6a 30                	push   0x30
c001bdcb:	e9 c4 ff ff ff       	jmp    c001bd94 <int_common_stub>

c001bdd0 <irq17>:
c001bdd0:	fa                   	cli    
c001bdd1:	6a 00                	push   0x0
c001bdd3:	6a 31                	push   0x31
c001bdd5:	e9 ba ff ff ff       	jmp    c001bd94 <int_common_stub>

c001bdda <irq18>:
c001bdda:	fa                   	cli    
c001bddb:	6a 00                	push   0x0
c001bddd:	6a 32                	push   0x32
c001bddf:	e9 b0 ff ff ff       	jmp    c001bd94 <int_common_stub>

c001bde4 <irq19>:
c001bde4:	fa                   	cli    
c001bde5:	6a 00                	push   0x0
c001bde7:	6a 33                	push   0x33
c001bde9:	e9 a6 ff ff ff       	jmp    c001bd94 <int_common_stub>

c001bdee <irq20>:
c001bdee:	fa                   	cli    
c001bdef:	6a 00                	push   0x0
c001bdf1:	6a 34                	push   0x34
c001bdf3:	e9 9c ff ff ff       	jmp    c001bd94 <int_common_stub>

c001bdf8 <irq21>:
c001bdf8:	fa                   	cli    
c001bdf9:	6a 00                	push   0x0
c001bdfb:	6a 35                	push   0x35
c001bdfd:	e9 92 ff ff ff       	jmp    c001bd94 <int_common_stub>

c001be02 <irq22>:
c001be02:	fa                   	cli    
c001be03:	6a 00                	push   0x0
c001be05:	6a 36                	push   0x36
c001be07:	e9 88 ff ff ff       	jmp    c001bd94 <int_common_stub>

c001be0c <irq23>:
c001be0c:	fa                   	cli    
c001be0d:	6a 00                	push   0x0
c001be0f:	6a 37                	push   0x37
c001be11:	e9 7e ff ff ff       	jmp    c001bd94 <int_common_stub>
c001be16:	66 90                	xchg   ax,ax
c001be18:	66 90                	xchg   ax,ax
c001be1a:	66 90                	xchg   ax,ax
c001be1c:	66 90                	xchg   ax,ax
c001be1e:	66 90                	xchg   ax,ax

c001be20 <i386GetRDRAND>:
c001be20:	b9 64 00 00 00       	mov    ecx,0x64

c001be25 <retry>:
c001be25:	0f c7 f0             	rdrand eax
c001be28:	72 05                	jb     c001be2f <retry.done>
c001be2a:	e2 f9                	loop   c001be25 <retry>

c001be2c <retry.fail>:
c001be2c:	31 c0                	xor    eax,eax
c001be2e:	c3                   	ret    

c001be2f <retry.done>:
c001be2f:	c3                   	ret    

c001be30 <absolutelyNoChanceInHell>:
c001be30:	b8 01 00 00 00       	mov    eax,0x1
c001be35:	0f a2                	cpuid  
c001be37:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001be3d:	74 06                	je     c001be45 <sseDetect.noSSE>
c001be3f:	b8 01 00 00 00       	mov    eax,0x1
c001be44:	c3                   	ret    

c001be45 <sseDetect.noSSE>:
c001be45:	31 c0                	xor    eax,eax
c001be47:	c3                   	ret    

c001be48 <sseSave>:
c001be48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be4c:	0f ae 00             	fxsave [eax]
c001be4f:	c3                   	ret    

c001be50 <sseLoad>:
c001be50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be54:	0f ae 08             	fxrstor [eax]
c001be57:	c3                   	ret    

c001be58 <sseInit>:
c001be58:	e8 42 00 00 00       	call   c001be9f <x87Init>
c001be5d:	0f 20 e0             	mov    eax,cr4
c001be60:	66 0d 00 06          	or     ax,0x600
c001be64:	0f 22 e0             	mov    cr4,eax
c001be67:	c3                   	ret    

c001be68 <sseClose>:
c001be68:	c3                   	ret    
c001be69:	66 90                	xchg   ax,ax
c001be6b:	66 90                	xchg   ax,ax
c001be6d:	66 90                	xchg   ax,ax
c001be6f:	90                   	nop

c001be70 <value_37F>:
c001be70:	7f 03                	jg     c001be75 <value_37A+0x1>

c001be72 <value_37E>:
c001be72:	7e 03                	jle    c001be77 <x87Detect+0x1>

c001be74 <value_37A>:
c001be74:	7a 03                	jp     c001be79 <x87Detect+0x3>

c001be76 <x87Detect>:
c001be76:	b8 01 00 00 00       	mov    eax,0x1
c001be7b:	0f a2                	cpuid  
c001be7d:	f7 c2 01 00 00 00    	test   edx,0x1
c001be83:	74 06                	je     c001be8b <x87Detect.nox87>
c001be85:	b8 01 00 00 00       	mov    eax,0x1
c001be8a:	c3                   	ret    

c001be8b <x87Detect.nox87>:
c001be8b:	b8 00 00 00 00       	mov    eax,0x0
c001be90:	c3                   	ret    

c001be91 <x87Save>:
c001be91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be95:	dd 30                	fnsave [eax]
c001be97:	c3                   	ret    

c001be98 <x87Load>:
c001be98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be9c:	dd 20                	frstor [eax]
c001be9e:	c3                   	ret    

c001be9f <x87Init>:
c001be9f:	0f 20 c0             	mov    eax,cr0
c001bea2:	66 25 fb ff          	and    ax,0xfffb
c001bea6:	66 0d 22 00          	or     ax,0x22
c001beaa:	0f 22 c0             	mov    cr0,eax
c001bead:	db e3                	fninit 
c001beaf:	0f 06                	clts   
c001beb1:	d9 2d 74 be 01 c0    	fldcw  WORD PTR ds:0xc001be74
c001beb7:	c3                   	ret    

c001beb8 <x87Close>:
c001beb8:	c3                   	ret    
c001beb9:	66 90                	xchg   ax,ax
c001bebb:	90                   	nop

c001bebc <__do_global_ctors_aux>:
c001bebc:	a1 6c ce 01 c0       	mov    eax,ds:0xc001ce6c
c001bec1:	83 f8 ff             	cmp    eax,0xffffffff
c001bec4:	74 1a                	je     c001bee0 <__do_global_ctors_aux+0x24>
c001bec6:	55                   	push   ebp
c001bec7:	89 e5                	mov    ebp,esp
c001bec9:	53                   	push   ebx
c001beca:	52                   	push   edx
c001becb:	bb 6c ce 01 c0       	mov    ebx,0xc001ce6c
c001bed0:	ff d0                	call   eax
c001bed2:	83 eb 04             	sub    ebx,0x4
c001bed5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bed7:	83 f8 ff             	cmp    eax,0xffffffff
c001beda:	75 f4                	jne    c001bed0 <__do_global_ctors_aux+0x14>
c001bedc:	58                   	pop    eax
c001bedd:	5b                   	pop    ebx
c001bede:	5d                   	pop    ebp
c001bedf:	c3                   	ret    
c001bee0:	c3                   	ret    
c001bee1:	66 90                	xchg   ax,ax
c001bee3:	90                   	nop

c001bee4 <__divdi3>:
c001bee4:	55                   	push   ebp
c001bee5:	57                   	push   edi
c001bee6:	56                   	push   esi
c001bee7:	53                   	push   ebx
c001bee8:	83 ec 1c             	sub    esp,0x1c
c001beeb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001beef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bef3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bef6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001befa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001befe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bf02:	85 db                	test   ebx,ebx
c001bf04:	0f 88 8e 00 00 00    	js     c001bf98 <__divdi3+0xb4>
c001bf0a:	89 dd                	mov    ebp,ebx
c001bf0c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bf14:	89 d3                	mov    ebx,edx
c001bf16:	85 d2                	test   edx,edx
c001bf18:	79 0d                	jns    c001bf27 <__divdi3+0x43>
c001bf1a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001bf1e:	f7 d8                	neg    eax
c001bf20:	83 d2 00             	adc    edx,0x0
c001bf23:	f7 da                	neg    edx
c001bf25:	89 d3                	mov    ebx,edx
c001bf27:	89 c7                	mov    edi,eax
c001bf29:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf2c:	85 db                	test   ebx,ebx
c001bf2e:	75 48                	jne    c001bf78 <__divdi3+0x94>
c001bf30:	39 ef                	cmp    edi,ebp
c001bf32:	76 24                	jbe    c001bf58 <__divdi3+0x74>
c001bf34:	89 ea                	mov    edx,ebp
c001bf36:	f7 f7                	div    edi
c001bf38:	89 c1                	mov    ecx,eax
c001bf3a:	31 f6                	xor    esi,esi
c001bf3c:	89 c8                	mov    eax,ecx
c001bf3e:	89 f2                	mov    edx,esi
c001bf40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bf44:	85 c9                	test   ecx,ecx
c001bf46:	74 07                	je     c001bf4f <__divdi3+0x6b>
c001bf48:	f7 d8                	neg    eax
c001bf4a:	83 d2 00             	adc    edx,0x0
c001bf4d:	f7 da                	neg    edx
c001bf4f:	83 c4 1c             	add    esp,0x1c
c001bf52:	5b                   	pop    ebx
c001bf53:	5e                   	pop    esi
c001bf54:	5f                   	pop    edi
c001bf55:	5d                   	pop    ebp
c001bf56:	c3                   	ret    
c001bf57:	90                   	nop
c001bf58:	85 ff                	test   edi,edi
c001bf5a:	75 0b                	jne    c001bf67 <__divdi3+0x83>
c001bf5c:	b8 01 00 00 00       	mov    eax,0x1
c001bf61:	31 d2                	xor    edx,edx
c001bf63:	f7 f3                	div    ebx
c001bf65:	89 c7                	mov    edi,eax
c001bf67:	31 d2                	xor    edx,edx
c001bf69:	89 e8                	mov    eax,ebp
c001bf6b:	f7 f7                	div    edi
c001bf6d:	89 c6                	mov    esi,eax
c001bf6f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf72:	f7 f7                	div    edi
c001bf74:	89 c1                	mov    ecx,eax
c001bf76:	eb c4                	jmp    c001bf3c <__divdi3+0x58>
c001bf78:	39 eb                	cmp    ebx,ebp
c001bf7a:	77 3c                	ja     c001bfb8 <__divdi3+0xd4>
c001bf7c:	0f bd f3             	bsr    esi,ebx
c001bf7f:	83 f6 1f             	xor    esi,0x1f
c001bf82:	75 40                	jne    c001bfc4 <__divdi3+0xe0>
c001bf84:	39 eb                	cmp    ebx,ebp
c001bf86:	72 09                	jb     c001bf91 <__divdi3+0xad>
c001bf88:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001bf8b:	0f 87 97 00 00 00    	ja     c001c028 <__divdi3+0x144>
c001bf91:	b9 01 00 00 00       	mov    ecx,0x1
c001bf96:	eb a4                	jmp    c001bf3c <__divdi3+0x58>
c001bf98:	f7 d9                	neg    ecx
c001bf9a:	83 d3 00             	adc    ebx,0x0
c001bf9d:	f7 db                	neg    ebx
c001bf9f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bfa2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bfa6:	89 dd                	mov    ebp,ebx
c001bfa8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001bfb0:	e9 5f ff ff ff       	jmp    c001bf14 <__divdi3+0x30>
c001bfb5:	8d 76 00             	lea    esi,[esi+0x0]
c001bfb8:	31 f6                	xor    esi,esi
c001bfba:	31 c9                	xor    ecx,ecx
c001bfbc:	e9 7b ff ff ff       	jmp    c001bf3c <__divdi3+0x58>
c001bfc1:	8d 76 00             	lea    esi,[esi+0x0]
c001bfc4:	b8 20 00 00 00       	mov    eax,0x20
c001bfc9:	29 f0                	sub    eax,esi
c001bfcb:	89 f1                	mov    ecx,esi
c001bfcd:	d3 e3                	shl    ebx,cl
c001bfcf:	89 fa                	mov    edx,edi
c001bfd1:	88 c1                	mov    cl,al
c001bfd3:	d3 ea                	shr    edx,cl
c001bfd5:	09 da                	or     edx,ebx
c001bfd7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bfdb:	89 f1                	mov    ecx,esi
c001bfdd:	d3 e7                	shl    edi,cl
c001bfdf:	89 eb                	mov    ebx,ebp
c001bfe1:	88 c1                	mov    cl,al
c001bfe3:	d3 eb                	shr    ebx,cl
c001bfe5:	89 f1                	mov    ecx,esi
c001bfe7:	d3 e5                	shl    ebp,cl
c001bfe9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001bfec:	88 c1                	mov    cl,al
c001bfee:	d3 ea                	shr    edx,cl
c001bff0:	09 d5                	or     ebp,edx
c001bff2:	89 e8                	mov    eax,ebp
c001bff4:	89 da                	mov    edx,ebx
c001bff6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001bffa:	89 d3                	mov    ebx,edx
c001bffc:	89 c5                	mov    ebp,eax
c001bffe:	f7 e7                	mul    edi
c001c000:	39 d3                	cmp    ebx,edx
c001c002:	72 18                	jb     c001c01c <__divdi3+0x138>
c001c004:	74 0a                	je     c001c010 <__divdi3+0x12c>
c001c006:	89 e9                	mov    ecx,ebp
c001c008:	31 f6                	xor    esi,esi
c001c00a:	e9 2d ff ff ff       	jmp    c001bf3c <__divdi3+0x58>
c001c00f:	90                   	nop
c001c010:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c013:	89 f1                	mov    ecx,esi
c001c015:	d3 e7                	shl    edi,cl
c001c017:	39 c7                	cmp    edi,eax
c001c019:	73 eb                	jae    c001c006 <__divdi3+0x122>
c001c01b:	90                   	nop
c001c01c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001c01f:	31 f6                	xor    esi,esi
c001c021:	e9 16 ff ff ff       	jmp    c001bf3c <__divdi3+0x58>
c001c026:	66 90                	xchg   ax,ax
c001c028:	31 c9                	xor    ecx,ecx
c001c02a:	e9 0d ff ff ff       	jmp    c001bf3c <__divdi3+0x58>
c001c02f:	90                   	nop

c001c030 <__moddi3>:
c001c030:	55                   	push   ebp
c001c031:	57                   	push   edi
c001c032:	56                   	push   esi
c001c033:	53                   	push   ebx
c001c034:	83 ec 2c             	sub    esp,0x2c
c001c037:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c03b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001c03f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c043:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c047:	85 db                	test   ebx,ebx
c001c049:	0f 88 85 00 00 00    	js     c001c0d4 <__moddi3+0xa4>
c001c04f:	89 de                	mov    esi,ebx
c001c051:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c059:	89 d7                	mov    edi,edx
c001c05b:	85 d2                	test   edx,edx
c001c05d:	79 09                	jns    c001c068 <__moddi3+0x38>
c001c05f:	f7 d8                	neg    eax
c001c061:	83 d2 00             	adc    edx,0x0
c001c064:	f7 da                	neg    edx
c001c066:	89 d7                	mov    edi,edx
c001c068:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c06c:	89 cd                	mov    ebp,ecx
c001c06e:	85 ff                	test   edi,edi
c001c070:	75 52                	jne    c001c0c4 <__moddi3+0x94>
c001c072:	89 c3                	mov    ebx,eax
c001c074:	39 f0                	cmp    eax,esi
c001c076:	76 24                	jbe    c001c09c <__moddi3+0x6c>
c001c078:	89 c8                	mov    eax,ecx
c001c07a:	89 f2                	mov    edx,esi
c001c07c:	f7 f3                	div    ebx
c001c07e:	89 d6                	mov    esi,edx
c001c080:	89 f0                	mov    eax,esi
c001c082:	31 d2                	xor    edx,edx
c001c084:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c088:	85 c9                	test   ecx,ecx
c001c08a:	74 07                	je     c001c093 <__moddi3+0x63>
c001c08c:	f7 d8                	neg    eax
c001c08e:	83 d2 00             	adc    edx,0x0
c001c091:	f7 da                	neg    edx
c001c093:	83 c4 2c             	add    esp,0x2c
c001c096:	5b                   	pop    ebx
c001c097:	5e                   	pop    esi
c001c098:	5f                   	pop    edi
c001c099:	5d                   	pop    ebp
c001c09a:	c3                   	ret    
c001c09b:	90                   	nop
c001c09c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c0a0:	85 db                	test   ebx,ebx
c001c0a2:	75 0d                	jne    c001c0b1 <__moddi3+0x81>
c001c0a4:	b8 01 00 00 00       	mov    eax,0x1
c001c0a9:	31 d2                	xor    edx,edx
c001c0ab:	f7 f7                	div    edi
c001c0ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0b1:	89 f0                	mov    eax,esi
c001c0b3:	31 d2                	xor    edx,edx
c001c0b5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c0b9:	f7 f7                	div    edi
c001c0bb:	89 e8                	mov    eax,ebp
c001c0bd:	f7 f7                	div    edi
c001c0bf:	89 d6                	mov    esi,edx
c001c0c1:	eb bd                	jmp    c001c080 <__moddi3+0x50>
c001c0c3:	90                   	nop
c001c0c4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c0c8:	39 f7                	cmp    edi,esi
c001c0ca:	76 20                	jbe    c001c0ec <__moddi3+0xbc>
c001c0cc:	89 c8                	mov    eax,ecx
c001c0ce:	89 f2                	mov    edx,esi
c001c0d0:	eb b2                	jmp    c001c084 <__moddi3+0x54>
c001c0d2:	66 90                	xchg   ax,ax
c001c0d4:	f7 d9                	neg    ecx
c001c0d6:	83 d3 00             	adc    ebx,0x0
c001c0d9:	f7 db                	neg    ebx
c001c0db:	89 de                	mov    esi,ebx
c001c0dd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c0e5:	e9 6f ff ff ff       	jmp    c001c059 <__moddi3+0x29>
c001c0ea:	66 90                	xchg   ax,ax
c001c0ec:	0f bd c7             	bsr    eax,edi
c001c0ef:	83 f0 1f             	xor    eax,0x1f
c001c0f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c0f6:	75 24                	jne    c001c11c <__moddi3+0xec>
c001c0f8:	39 f7                	cmp    edi,esi
c001c0fa:	72 06                	jb     c001c102 <__moddi3+0xd2>
c001c0fc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c100:	77 0c                	ja     c001c10e <__moddi3+0xde>
c001c102:	89 e9                	mov    ecx,ebp
c001c104:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c108:	19 fe                	sbb    esi,edi
c001c10a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c10e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c112:	89 f2                	mov    edx,esi
c001c114:	e9 6b ff ff ff       	jmp    c001c084 <__moddi3+0x54>
c001c119:	8d 76 00             	lea    esi,[esi+0x0]
c001c11c:	b8 20 00 00 00       	mov    eax,0x20
c001c121:	89 c2                	mov    edx,eax
c001c123:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c127:	29 da                	sub    edx,ebx
c001c129:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c12d:	88 d9                	mov    cl,bl
c001c12f:	d3 e7                	shl    edi,cl
c001c131:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c135:	88 d1                	mov    cl,dl
c001c137:	d3 e8                	shr    eax,cl
c001c139:	09 c7                	or     edi,eax
c001c13b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c13f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c143:	89 d8                	mov    eax,ebx
c001c145:	88 d9                	mov    cl,bl
c001c147:	d3 e7                	shl    edi,cl
c001c149:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c14d:	89 f3                	mov    ebx,esi
c001c14f:	88 d1                	mov    cl,dl
c001c151:	d3 eb                	shr    ebx,cl
c001c153:	89 c7                	mov    edi,eax
c001c155:	88 c1                	mov    cl,al
c001c157:	d3 e6                	shl    esi,cl
c001c159:	89 e8                	mov    eax,ebp
c001c15b:	88 d1                	mov    cl,dl
c001c15d:	d3 e8                	shr    eax,cl
c001c15f:	09 f0                	or     eax,esi
c001c161:	89 f9                	mov    ecx,edi
c001c163:	d3 e5                	shl    ebp,cl
c001c165:	89 da                	mov    edx,ebx
c001c167:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c16b:	89 d3                	mov    ebx,edx
c001c16d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c171:	89 c6                	mov    esi,eax
c001c173:	89 d1                	mov    ecx,edx
c001c175:	39 d3                	cmp    ebx,edx
c001c177:	72 27                	jb     c001c1a0 <__moddi3+0x170>
c001c179:	74 21                	je     c001c19c <__moddi3+0x16c>
c001c17b:	29 f5                	sub    ebp,esi
c001c17d:	19 cb                	sbb    ebx,ecx
c001c17f:	89 de                	mov    esi,ebx
c001c181:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c185:	d3 e6                	shl    esi,cl
c001c187:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c18b:	89 f9                	mov    ecx,edi
c001c18d:	d3 ed                	shr    ebp,cl
c001c18f:	09 ee                	or     esi,ebp
c001c191:	89 f0                	mov    eax,esi
c001c193:	d3 eb                	shr    ebx,cl
c001c195:	89 da                	mov    edx,ebx
c001c197:	e9 e8 fe ff ff       	jmp    c001c084 <__moddi3+0x54>
c001c19c:	39 c5                	cmp    ebp,eax
c001c19e:	73 db                	jae    c001c17b <__moddi3+0x14b>
c001c1a0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c1a4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c1a8:	89 d1                	mov    ecx,edx
c001c1aa:	89 c6                	mov    esi,eax
c001c1ac:	eb cd                	jmp    c001c17b <__moddi3+0x14b>
c001c1ae:	66 90                	xchg   ax,ax

c001c1b0 <__udivdi3>:
c001c1b0:	55                   	push   ebp
c001c1b1:	57                   	push   edi
c001c1b2:	56                   	push   esi
c001c1b3:	53                   	push   ebx
c001c1b4:	83 ec 1c             	sub    esp,0x1c
c001c1b7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c1bb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c1bf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c1c3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c1c7:	85 d2                	test   edx,edx
c001c1c9:	75 41                	jne    c001c20c <__udivdi3+0x5c>
c001c1cb:	39 f7                	cmp    edi,esi
c001c1cd:	76 15                	jbe    c001c1e4 <__udivdi3+0x34>
c001c1cf:	89 e8                	mov    eax,ebp
c001c1d1:	89 f2                	mov    edx,esi
c001c1d3:	f7 f7                	div    edi
c001c1d5:	31 db                	xor    ebx,ebx
c001c1d7:	89 da                	mov    edx,ebx
c001c1d9:	83 c4 1c             	add    esp,0x1c
c001c1dc:	5b                   	pop    ebx
c001c1dd:	5e                   	pop    esi
c001c1de:	5f                   	pop    edi
c001c1df:	5d                   	pop    ebp
c001c1e0:	c3                   	ret    
c001c1e1:	8d 76 00             	lea    esi,[esi+0x0]
c001c1e4:	89 f9                	mov    ecx,edi
c001c1e6:	85 ff                	test   edi,edi
c001c1e8:	75 0b                	jne    c001c1f5 <__udivdi3+0x45>
c001c1ea:	b8 01 00 00 00       	mov    eax,0x1
c001c1ef:	31 d2                	xor    edx,edx
c001c1f1:	f7 f7                	div    edi
c001c1f3:	89 c1                	mov    ecx,eax
c001c1f5:	31 d2                	xor    edx,edx
c001c1f7:	89 f0                	mov    eax,esi
c001c1f9:	f7 f1                	div    ecx
c001c1fb:	89 c3                	mov    ebx,eax
c001c1fd:	89 e8                	mov    eax,ebp
c001c1ff:	f7 f1                	div    ecx
c001c201:	89 da                	mov    edx,ebx
c001c203:	83 c4 1c             	add    esp,0x1c
c001c206:	5b                   	pop    ebx
c001c207:	5e                   	pop    esi
c001c208:	5f                   	pop    edi
c001c209:	5d                   	pop    ebp
c001c20a:	c3                   	ret    
c001c20b:	90                   	nop
c001c20c:	39 f2                	cmp    edx,esi
c001c20e:	77 1c                	ja     c001c22c <__udivdi3+0x7c>
c001c210:	0f bd da             	bsr    ebx,edx
c001c213:	83 f3 1f             	xor    ebx,0x1f
c001c216:	75 24                	jne    c001c23c <__udivdi3+0x8c>
c001c218:	39 f2                	cmp    edx,esi
c001c21a:	72 08                	jb     c001c224 <__udivdi3+0x74>
c001c21c:	39 ef                	cmp    edi,ebp
c001c21e:	0f 87 84 00 00 00    	ja     c001c2a8 <__udivdi3+0xf8>
c001c224:	b8 01 00 00 00       	mov    eax,0x1
c001c229:	eb ac                	jmp    c001c1d7 <__udivdi3+0x27>
c001c22b:	90                   	nop
c001c22c:	31 db                	xor    ebx,ebx
c001c22e:	31 c0                	xor    eax,eax
c001c230:	89 da                	mov    edx,ebx
c001c232:	83 c4 1c             	add    esp,0x1c
c001c235:	5b                   	pop    ebx
c001c236:	5e                   	pop    esi
c001c237:	5f                   	pop    edi
c001c238:	5d                   	pop    ebp
c001c239:	c3                   	ret    
c001c23a:	66 90                	xchg   ax,ax
c001c23c:	b8 20 00 00 00       	mov    eax,0x20
c001c241:	29 d8                	sub    eax,ebx
c001c243:	88 d9                	mov    cl,bl
c001c245:	d3 e2                	shl    edx,cl
c001c247:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c24b:	89 fa                	mov    edx,edi
c001c24d:	88 c1                	mov    cl,al
c001c24f:	d3 ea                	shr    edx,cl
c001c251:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c255:	09 d1                	or     ecx,edx
c001c257:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c25b:	88 d9                	mov    cl,bl
c001c25d:	d3 e7                	shl    edi,cl
c001c25f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c263:	89 f7                	mov    edi,esi
c001c265:	88 c1                	mov    cl,al
c001c267:	d3 ef                	shr    edi,cl
c001c269:	88 d9                	mov    cl,bl
c001c26b:	d3 e6                	shl    esi,cl
c001c26d:	89 ea                	mov    edx,ebp
c001c26f:	88 c1                	mov    cl,al
c001c271:	d3 ea                	shr    edx,cl
c001c273:	09 d6                	or     esi,edx
c001c275:	89 f0                	mov    eax,esi
c001c277:	89 fa                	mov    edx,edi
c001c279:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c27d:	89 d7                	mov    edi,edx
c001c27f:	89 c6                	mov    esi,eax
c001c281:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c285:	39 d7                	cmp    edi,edx
c001c287:	72 13                	jb     c001c29c <__udivdi3+0xec>
c001c289:	74 09                	je     c001c294 <__udivdi3+0xe4>
c001c28b:	89 f0                	mov    eax,esi
c001c28d:	31 db                	xor    ebx,ebx
c001c28f:	e9 43 ff ff ff       	jmp    c001c1d7 <__udivdi3+0x27>
c001c294:	88 d9                	mov    cl,bl
c001c296:	d3 e5                	shl    ebp,cl
c001c298:	39 c5                	cmp    ebp,eax
c001c29a:	73 ef                	jae    c001c28b <__udivdi3+0xdb>
c001c29c:	8d 46 ff             	lea    eax,[esi-0x1]
c001c29f:	31 db                	xor    ebx,ebx
c001c2a1:	e9 31 ff ff ff       	jmp    c001c1d7 <__udivdi3+0x27>
c001c2a6:	66 90                	xchg   ax,ax
c001c2a8:	31 c0                	xor    eax,eax
c001c2aa:	e9 28 ff ff ff       	jmp    c001c1d7 <__udivdi3+0x27>
c001c2af:	90                   	nop

c001c2b0 <__umoddi3>:
c001c2b0:	55                   	push   ebp
c001c2b1:	57                   	push   edi
c001c2b2:	56                   	push   esi
c001c2b3:	53                   	push   ebx
c001c2b4:	83 ec 1c             	sub    esp,0x1c
c001c2b7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c2bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c2bf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c2c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c2c7:	89 da                	mov    edx,ebx
c001c2c9:	85 c0                	test   eax,eax
c001c2cb:	75 37                	jne    c001c304 <__umoddi3+0x54>
c001c2cd:	39 df                	cmp    edi,ebx
c001c2cf:	76 13                	jbe    c001c2e4 <__umoddi3+0x34>
c001c2d1:	89 f0                	mov    eax,esi
c001c2d3:	f7 f7                	div    edi
c001c2d5:	89 d0                	mov    eax,edx
c001c2d7:	31 d2                	xor    edx,edx
c001c2d9:	83 c4 1c             	add    esp,0x1c
c001c2dc:	5b                   	pop    ebx
c001c2dd:	5e                   	pop    esi
c001c2de:	5f                   	pop    edi
c001c2df:	5d                   	pop    ebp
c001c2e0:	c3                   	ret    
c001c2e1:	8d 76 00             	lea    esi,[esi+0x0]
c001c2e4:	89 fd                	mov    ebp,edi
c001c2e6:	85 ff                	test   edi,edi
c001c2e8:	75 0b                	jne    c001c2f5 <__umoddi3+0x45>
c001c2ea:	b8 01 00 00 00       	mov    eax,0x1
c001c2ef:	31 d2                	xor    edx,edx
c001c2f1:	f7 f7                	div    edi
c001c2f3:	89 c5                	mov    ebp,eax
c001c2f5:	89 d8                	mov    eax,ebx
c001c2f7:	31 d2                	xor    edx,edx
c001c2f9:	f7 f5                	div    ebp
c001c2fb:	89 f0                	mov    eax,esi
c001c2fd:	f7 f5                	div    ebp
c001c2ff:	89 d0                	mov    eax,edx
c001c301:	eb d4                	jmp    c001c2d7 <__umoddi3+0x27>
c001c303:	90                   	nop
c001c304:	89 f1                	mov    ecx,esi
c001c306:	39 d8                	cmp    eax,ebx
c001c308:	76 0a                	jbe    c001c314 <__umoddi3+0x64>
c001c30a:	89 f0                	mov    eax,esi
c001c30c:	83 c4 1c             	add    esp,0x1c
c001c30f:	5b                   	pop    ebx
c001c310:	5e                   	pop    esi
c001c311:	5f                   	pop    edi
c001c312:	5d                   	pop    ebp
c001c313:	c3                   	ret    
c001c314:	0f bd e8             	bsr    ebp,eax
c001c317:	83 f5 1f             	xor    ebp,0x1f
c001c31a:	75 1c                	jne    c001c338 <__umoddi3+0x88>
c001c31c:	39 d8                	cmp    eax,ebx
c001c31e:	72 04                	jb     c001c324 <__umoddi3+0x74>
c001c320:	39 f7                	cmp    edi,esi
c001c322:	77 08                	ja     c001c32c <__umoddi3+0x7c>
c001c324:	89 da                	mov    edx,ebx
c001c326:	29 fe                	sub    esi,edi
c001c328:	19 c2                	sbb    edx,eax
c001c32a:	89 f1                	mov    ecx,esi
c001c32c:	89 c8                	mov    eax,ecx
c001c32e:	83 c4 1c             	add    esp,0x1c
c001c331:	5b                   	pop    ebx
c001c332:	5e                   	pop    esi
c001c333:	5f                   	pop    edi
c001c334:	5d                   	pop    ebp
c001c335:	c3                   	ret    
c001c336:	66 90                	xchg   ax,ax
c001c338:	ba 20 00 00 00       	mov    edx,0x20
c001c33d:	29 ea                	sub    edx,ebp
c001c33f:	89 e9                	mov    ecx,ebp
c001c341:	d3 e0                	shl    eax,cl
c001c343:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c347:	89 f8                	mov    eax,edi
c001c349:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c34d:	88 d1                	mov    cl,dl
c001c34f:	d3 e8                	shr    eax,cl
c001c351:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c355:	09 c1                	or     ecx,eax
c001c357:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c35b:	89 e9                	mov    ecx,ebp
c001c35d:	d3 e7                	shl    edi,cl
c001c35f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c363:	89 d8                	mov    eax,ebx
c001c365:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c369:	88 d1                	mov    cl,dl
c001c36b:	d3 e8                	shr    eax,cl
c001c36d:	89 c7                	mov    edi,eax
c001c36f:	89 e9                	mov    ecx,ebp
c001c371:	d3 e3                	shl    ebx,cl
c001c373:	89 f0                	mov    eax,esi
c001c375:	88 d1                	mov    cl,dl
c001c377:	d3 e8                	shr    eax,cl
c001c379:	09 d8                	or     eax,ebx
c001c37b:	89 e9                	mov    ecx,ebp
c001c37d:	d3 e6                	shl    esi,cl
c001c37f:	89 f3                	mov    ebx,esi
c001c381:	89 fa                	mov    edx,edi
c001c383:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c387:	89 d1                	mov    ecx,edx
c001c389:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c38d:	89 c6                	mov    esi,eax
c001c38f:	89 d7                	mov    edi,edx
c001c391:	39 d1                	cmp    ecx,edx
c001c393:	72 27                	jb     c001c3bc <__umoddi3+0x10c>
c001c395:	74 21                	je     c001c3b8 <__umoddi3+0x108>
c001c397:	89 ca                	mov    edx,ecx
c001c399:	29 f3                	sub    ebx,esi
c001c39b:	19 fa                	sbb    edx,edi
c001c39d:	89 d0                	mov    eax,edx
c001c39f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c3a3:	d3 e0                	shl    eax,cl
c001c3a5:	89 e9                	mov    ecx,ebp
c001c3a7:	d3 eb                	shr    ebx,cl
c001c3a9:	09 d8                	or     eax,ebx
c001c3ab:	d3 ea                	shr    edx,cl
c001c3ad:	83 c4 1c             	add    esp,0x1c
c001c3b0:	5b                   	pop    ebx
c001c3b1:	5e                   	pop    esi
c001c3b2:	5f                   	pop    edi
c001c3b3:	5d                   	pop    ebp
c001c3b4:	c3                   	ret    
c001c3b5:	8d 76 00             	lea    esi,[esi+0x0]
c001c3b8:	39 c3                	cmp    ebx,eax
c001c3ba:	73 db                	jae    c001c397 <__umoddi3+0xe7>
c001c3bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c3c0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c3c4:	89 d7                	mov    edi,edx
c001c3c6:	89 c6                	mov    esi,eax
c001c3c8:	eb cd                	jmp    c001c397 <__umoddi3+0xe7>

Disassembly of section .init:

c001c3ca <_init>:
c001c3ca:	55                   	push   ebp
c001c3cb:	89 e5                	mov    ebp,esp
c001c3cd:	e8 46 3d fe ff       	call   c0000118 <frame_dummy>
c001c3d2:	e8 e5 fa ff ff       	call   c001bebc <__do_global_ctors_aux>
c001c3d7:	5d                   	pop    ebp
c001c3d8:	c3                   	ret    

Disassembly of section .fini:

c001c3d9 <_fini>:
c001c3d9:	55                   	push   ebp
c001c3da:	89 e5                	mov    ebp,esp
c001c3dc:	e8 c7 3c fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001c3e1:	5d                   	pop    ebp
c001c3e2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c3e4 <Computer::~Computer()>:
c001c3e4:	83 ec 0c             	sub    esp,0xc
c001c3e7:	ba e0 d6 01 c0       	mov    edx,0xc001d6e0
c001c3ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3f0:	89 10                	mov    DWORD PTR [eax],edx
c001c3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3f6:	83 ec 0c             	sub    esp,0xc
c001c3f9:	50                   	push   eax
c001c3fa:	e8 23 fb fe ff       	call   c000bf22 <Device::~Device()>
c001c3ff:	83 c4 10             	add    esp,0x10
c001c402:	90                   	nop
c001c403:	83 c4 0c             	add    esp,0xc
c001c406:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c408 <Computer::~Computer()>:
c001c408:	83 ec 0c             	sub    esp,0xc
c001c40b:	83 ec 0c             	sub    esp,0xc
c001c40e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c412:	e8 cd ff ff ff       	call   c001c3e4 <Computer::~Computer()>
c001c417:	83 c4 10             	add    esp,0x10
c001c41a:	83 ec 08             	sub    esp,0x8
c001c41d:	68 70 01 00 00       	push   0x170
c001c422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c426:	e8 bf e6 fe ff       	call   c000aaea <operator delete(void*, unsigned long)>
c001c42b:	83 c4 10             	add    esp,0x10
c001c42e:	83 c4 0c             	add    esp,0xc
c001c431:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c432 <idleCommon()>:
c001c432:	83 ec 0c             	sub    esp,0xc
c001c435:	fa                   	cli    
c001c436:	ff 05 08 3e 02 c0    	inc    DWORD PTR ds:0xc0023e08
c001c43c:	e8 43 76 ff ff       	call   c0013a84 <schedule()>
c001c441:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c001c446:	48                   	dec    eax
c001c447:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c001c44c:	75 01                	jne    c001c44f <idleCommon()+0x1d>
c001c44e:	fb                   	sti    
c001c44f:	83 c4 0c             	add    esp,0xc
c001c452:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c454 <LinkedList<UnixFile>::~LinkedList()>:
c001c454:	90                   	nop
c001c455:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c456 <LinkedList<UnixFile>::LinkedList()>:
c001c456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c45a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c460:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c464:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c46b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c46f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c476:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c47a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c484:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c48b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c48f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c496:	90                   	nop
c001c497:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c498 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c498:	83 ec 0c             	sub    esp,0xc
c001c49b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c4a0:	75 10                	jne    c001c4b2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c4a2:	83 ec 0c             	sub    esp,0xc
c001c4a5:	68 34 d9 01 c0       	push   0xc001d934
c001c4aa:	e8 80 42 ff ff       	call   c001072f <Krnl::panic(char const*)>
c001c4af:	83 c4 10             	add    esp,0x10
c001c4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4b6:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4b8:	85 c0                	test   eax,eax
c001c4ba:	74 34                	je     c001c4f0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c4bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4c3:	85 c0                	test   eax,eax
c001c4c5:	74 29                	je     c001c4f0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c4c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c4d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4dd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c4e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c4ee:	eb 65                	jmp    c001c555 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c4f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4f6:	85 c0                	test   eax,eax
c001c4f8:	75 4b                	jne    c001c545 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c501:	85 c0                	test   eax,eax
c001c503:	75 40                	jne    c001c545 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c509:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c50d:	89 10                	mov    DWORD PTR [eax],edx
c001c50f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c513:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c517:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c51a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c51e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c521:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c52c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c52f:	85 c0                	test   eax,eax
c001c531:	74 22                	je     c001c555 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c533:	83 ec 0c             	sub    esp,0xc
c001c536:	68 56 d9 01 c0       	push   0xc001d956
c001c53b:	e8 ef 41 ff ff       	call   c001072f <Krnl::panic(char const*)>
c001c540:	83 c4 10             	add    esp,0x10
c001c543:	eb 10                	jmp    c001c555 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c545:	83 ec 0c             	sub    esp,0xc
c001c548:	68 60 d9 01 c0       	push   0xc001d960
c001c54d:	e8 dd 41 ff ff       	call   c001072f <Krnl::panic(char const*)>
c001c552:	83 c4 10             	add    esp,0x10
c001c555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c559:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c55c:	8d 50 01             	lea    edx,[eax+0x1]
c001c55f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c563:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c566:	90                   	nop
c001c567:	83 c4 0c             	add    esp,0xc
c001c56a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c56c <LinkedList<UnixFile>::getFirstElement()>:
c001c56c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c570:	8b 00                	mov    eax,DWORD PTR [eax]
c001c572:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c574 <LinkedList<UnixFile>::removeFirst()>:
c001c574:	83 ec 0c             	sub    esp,0xc
c001c577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c57b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c57d:	85 c0                	test   eax,eax
c001c57f:	75 12                	jne    c001c593 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c581:	83 ec 0c             	sub    esp,0xc
c001c584:	68 6c d9 01 c0       	push   0xc001d96c
c001c589:	e8 a1 41 ff ff       	call   c001072f <Krnl::panic(char const*)>
c001c58e:	83 c4 10             	add    esp,0x10
c001c591:	eb 7e                	jmp    c001c611 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c597:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c59a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c59d:	85 c0                	test   eax,eax
c001c59f:	74 10                	je     c001c5b1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c5a1:	83 ec 0c             	sub    esp,0xc
c001c5a4:	68 b7 d9 01 c0       	push   0xc001d9b7
c001c5a9:	e8 81 41 ff ff       	call   c001072f <Krnl::panic(char const*)>
c001c5ae:	83 c4 10             	add    esp,0x10
c001c5b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5b5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5ba:	85 c0                	test   eax,eax
c001c5bc:	75 33                	jne    c001c5f1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c5be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c5c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5da:	83 f8 01             	cmp    eax,0x1
c001c5dd:	74 21                	je     c001c600 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c5df:	83 ec 0c             	sub    esp,0xc
c001c5e2:	68 90 d9 01 c0       	push   0xc001d990
c001c5e7:	e8 43 41 ff ff       	call   c001072f <Krnl::panic(char const*)>
c001c5ec:	83 c4 10             	add    esp,0x10
c001c5ef:	eb 0f                	jmp    c001c600 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c5f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5f7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c5fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5fe:	89 10                	mov    DWORD PTR [eax],edx
c001c600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c604:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c607:	8d 50 ff             	lea    edx,[eax-0x1]
c001c60a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c60e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c611:	83 c4 0c             	add    esp,0xc
c001c614:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c616 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c616:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c61a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c61d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c61e <DriverlessDevice::~DriverlessDevice()>:
c001c61e:	ba fc df 01 c0       	mov    edx,0xc001dffc
c001c623:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c627:	89 10                	mov    DWORD PTR [eax],edx
c001c629:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c62d:	50                   	push   eax
c001c62e:	e8 ef f8 fe ff       	call   c000bf22 <Device::~Device()>
c001c633:	83 c4 04             	add    esp,0x4
c001c636:	90                   	nop
c001c637:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c638 <DriverlessDevice::~DriverlessDevice()>:
c001c638:	83 ec 0c             	sub    esp,0xc
c001c63b:	83 ec 0c             	sub    esp,0xc
c001c63e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c642:	e8 d7 ff ff ff       	call   c001c61e <DriverlessDevice::~DriverlessDevice()>
c001c647:	83 c4 10             	add    esp,0x10
c001c64a:	83 ec 08             	sub    esp,0x8
c001c64d:	68 58 01 00 00       	push   0x158
c001c652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c656:	e8 8f e4 fe ff       	call   c000aaea <operator delete(void*, unsigned long)>
c001c65b:	83 c4 10             	add    esp,0x10
c001c65e:	83 c4 0c             	add    esp,0xc
c001c661:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c662 <LinkedList<Device>::addElement(Device*)>:
c001c662:	83 ec 0c             	sub    esp,0xc
c001c665:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c66a:	75 10                	jne    c001c67c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c66c:	83 ec 0c             	sub    esp,0xc
c001c66f:	68 34 d9 01 c0       	push   0xc001d934
c001c674:	e8 b6 40 ff ff       	call   c001072f <Krnl::panic(char const*)>
c001c679:	83 c4 10             	add    esp,0x10
c001c67c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c680:	8b 00                	mov    eax,DWORD PTR [eax]
c001c682:	85 c0                	test   eax,eax
c001c684:	74 3a                	je     c001c6c0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c68a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c68d:	85 c0                	test   eax,eax
c001c68f:	74 2f                	je     c001c6c0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c695:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c69c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6aa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c6ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6b4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c6be:	eb 68                	jmp    c001c728 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c6c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6c6:	85 c0                	test   eax,eax
c001c6c8:	75 4e                	jne    c001c718 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6d1:	85 c0                	test   eax,eax
c001c6d3:	75 43                	jne    c001c718 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c6d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6dd:	89 10                	mov    DWORD PTR [eax],edx
c001c6df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6e7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6f1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c6fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c702:	85 c0                	test   eax,eax
c001c704:	74 22                	je     c001c728 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c706:	83 ec 0c             	sub    esp,0xc
c001c709:	68 56 d9 01 c0       	push   0xc001d956
c001c70e:	e8 1c 40 ff ff       	call   c001072f <Krnl::panic(char const*)>
c001c713:	83 c4 10             	add    esp,0x10
c001c716:	eb 10                	jmp    c001c728 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c718:	83 ec 0c             	sub    esp,0xc
c001c71b:	68 60 d9 01 c0       	push   0xc001d960
c001c720:	e8 0a 40 ff ff       	call   c001072f <Krnl::panic(char const*)>
c001c725:	83 c4 10             	add    esp,0x10
c001c728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c72c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c72f:	8d 50 01             	lea    edx,[eax+0x1]
c001c732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c736:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c739:	90                   	nop
c001c73a:	83 c4 0c             	add    esp,0xc
c001c73d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c73e <LinkedList<Device>::LinkedList()>:
c001c73e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c742:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c74c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c753:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c757:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c75e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c762:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c768:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c76c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c773:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c777:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c77e:	90                   	nop
c001c77f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c780 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c780:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c784:	8b 00                	mov    eax,DWORD PTR [eax]
c001c786:	85 c0                	test   eax,eax
c001c788:	75 0e                	jne    c001c798 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c78a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c78e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c791:	85 c0                	test   eax,eax
c001c793:	75 03                	jne    c001c798 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c795:	b0 01                	mov    al,0x1
c001c797:	c3                   	ret    
c001c798:	b0 00                	mov    al,0x0
c001c79a:	90                   	nop
c001c79b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c79c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c7a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c7a4:	83 ec 0c             	sub    esp,0xc
c001c7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7ad:	85 c0                	test   eax,eax
c001c7af:	75 17                	jne    c001c7c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c7b1:	83 ec 0c             	sub    esp,0xc
c001c7b4:	68 6c d9 01 c0       	push   0xc001d96c
c001c7b9:	e8 71 3f ff ff       	call   c001072f <Krnl::panic(char const*)>
c001c7be:	83 c4 10             	add    esp,0x10
c001c7c1:	e9 92 00 00 00       	jmp    c001c858 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c7c6:	66 90                	xchg   ax,ax
c001c7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7cf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c7d2:	85 c0                	test   eax,eax
c001c7d4:	0f 95 c0             	setne  al
c001c7d7:	84 c0                	test   al,al
c001c7d9:	74 11                	je     c001c7ec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c7db:	83 ec 0c             	sub    esp,0xc
c001c7de:	68 b7 d9 01 c0       	push   0xc001d9b7
c001c7e3:	e8 47 3f ff ff       	call   c001072f <Krnl::panic(char const*)>
c001c7e8:	83 c4 10             	add    esp,0x10
c001c7eb:	90                   	nop
c001c7ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7f2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c7f5:	85 c0                	test   eax,eax
c001c7f7:	0f 94 c0             	sete   al
c001c7fa:	84 c0                	test   al,al
c001c7fc:	74 36                	je     c001c834 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c7fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c802:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c80c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c817:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c81a:	83 f8 01             	cmp    eax,0x1
c001c81d:	74 25                	je     c001c844 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c81f:	83 ec 0c             	sub    esp,0xc
c001c822:	68 90 d9 01 c0       	push   0xc001d990
c001c827:	e8 03 3f ff ff       	call   c001072f <Krnl::panic(char const*)>
c001c82c:	83 c4 10             	add    esp,0x10
c001c82f:	eb 13                	jmp    c001c844 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c831:	8d 76 00             	lea    esi,[esi+0x0]
c001c834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c838:	8b 00                	mov    eax,DWORD PTR [eax]
c001c83a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c83d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c841:	89 10                	mov    DWORD PTR [eax],edx
c001c843:	90                   	nop
c001c844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c848:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c84b:	8d 50 ff             	lea    edx,[eax-0x1]
c001c84e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c852:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c855:	8d 76 00             	lea    esi,[esi+0x0]
c001c858:	83 c4 0c             	add    esp,0xc
c001c85b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c85c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c85c:	83 ec 0c             	sub    esp,0xc
c001c85f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c864:	75 12                	jne    c001c878 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c866:	83 ec 0c             	sub    esp,0xc
c001c869:	68 34 d9 01 c0       	push   0xc001d934
c001c86e:	e8 bc 3e ff ff       	call   c001072f <Krnl::panic(char const*)>
c001c873:	83 c4 10             	add    esp,0x10
c001c876:	66 90                	xchg   ax,ax
c001c878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c87c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c87e:	85 c0                	test   eax,eax
c001c880:	74 36                	je     c001c8b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c886:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c889:	85 c0                	test   eax,eax
c001c88b:	74 2b                	je     c001c8b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c88d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c891:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c894:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c898:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c89b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8a3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c8a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8ad:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c8b4:	eb 6a                	jmp    c001c920 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c8b6:	66 90                	xchg   ax,ax
c001c8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8be:	85 c0                	test   eax,eax
c001c8c0:	75 4e                	jne    c001c910 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8c9:	85 c0                	test   eax,eax
c001c8cb:	75 43                	jne    c001c910 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8d5:	89 10                	mov    DWORD PTR [eax],edx
c001c8d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8e9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c8f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8f7:	85 c0                	test   eax,eax
c001c8f9:	74 25                	je     c001c920 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c8fb:	83 ec 0c             	sub    esp,0xc
c001c8fe:	68 56 d9 01 c0       	push   0xc001d956
c001c903:	e8 27 3e ff ff       	call   c001072f <Krnl::panic(char const*)>
c001c908:	83 c4 10             	add    esp,0x10
c001c90b:	eb 13                	jmp    c001c920 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c90d:	8d 76 00             	lea    esi,[esi+0x0]
c001c910:	83 ec 0c             	sub    esp,0xc
c001c913:	68 60 d9 01 c0       	push   0xc001d960
c001c918:	e8 12 3e ff ff       	call   c001072f <Krnl::panic(char const*)>
c001c91d:	83 c4 10             	add    esp,0x10
c001c920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c924:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c927:	8d 50 01             	lea    edx,[eax+0x1]
c001c92a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c92e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c931:	90                   	nop
c001c932:	83 c4 0c             	add    esp,0xc
c001c935:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c938 <ACPI::~ACPI()>:
c001c938:	83 ec 0c             	sub    esp,0xc
c001c93b:	ba 64 e5 01 c0       	mov    edx,0xc001e564
c001c940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c944:	89 10                	mov    DWORD PTR [eax],edx
c001c946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c94a:	83 ec 0c             	sub    esp,0xc
c001c94d:	50                   	push   eax
c001c94e:	e8 cf f5 fe ff       	call   c000bf22 <Device::~Device()>
c001c953:	83 c4 10             	add    esp,0x10
c001c956:	90                   	nop
c001c957:	83 c4 0c             	add    esp,0xc
c001c95a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c95c <ACPI::~ACPI()>:
c001c95c:	83 ec 0c             	sub    esp,0xc
c001c95f:	83 ec 0c             	sub    esp,0xc
c001c962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c966:	e8 cd ff ff ff       	call   c001c938 <ACPI::~ACPI()>
c001c96b:	83 c4 10             	add    esp,0x10
c001c96e:	83 ec 08             	sub    esp,0x8
c001c971:	68 64 12 00 00       	push   0x1264
c001c976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c97a:	e8 6b e1 fe ff       	call   c000aaea <operator delete(void*, unsigned long)>
c001c97f:	83 c4 10             	add    esp,0x10
c001c982:	83 c4 0c             	add    esp,0xc
c001c985:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c988 <LinkedList<Device>::~LinkedList()>:
c001c988:	90                   	nop
c001c989:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c98c <LinkedList<Device>::isEmpty()>:
c001c98c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c990:	8b 00                	mov    eax,DWORD PTR [eax]
c001c992:	85 c0                	test   eax,eax
c001c994:	75 0e                	jne    c001c9a4 <LinkedList<Device>::isEmpty()+0x18>
c001c996:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c99a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c99d:	85 c0                	test   eax,eax
c001c99f:	75 03                	jne    c001c9a4 <LinkedList<Device>::isEmpty()+0x18>
c001c9a1:	b0 01                	mov    al,0x1
c001c9a3:	c3                   	ret    
c001c9a4:	b0 00                	mov    al,0x0
c001c9a6:	90                   	nop
c001c9a7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c9a8 <LinkedList<Device>::getFirstElement()>:
c001c9a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9ae:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c9b0 <LinkedList<Device>::removeFirst()>:
c001c9b0:	83 ec 0c             	sub    esp,0xc
c001c9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9b7:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9b9:	85 c0                	test   eax,eax
c001c9bb:	75 17                	jne    c001c9d4 <LinkedList<Device>::removeFirst()+0x24>
c001c9bd:	83 ec 0c             	sub    esp,0xc
c001c9c0:	68 6c d9 01 c0       	push   0xc001d96c
c001c9c5:	e8 65 3d ff ff       	call   c001072f <Krnl::panic(char const*)>
c001c9ca:	83 c4 10             	add    esp,0x10
c001c9cd:	e9 92 00 00 00       	jmp    c001ca64 <LinkedList<Device>::removeFirst()+0xb4>
c001c9d2:	66 90                	xchg   ax,ax
c001c9d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c9db:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c9e1:	85 c0                	test   eax,eax
c001c9e3:	74 13                	je     c001c9f8 <LinkedList<Device>::removeFirst()+0x48>
c001c9e5:	83 ec 0c             	sub    esp,0xc
c001c9e8:	68 b7 d9 01 c0       	push   0xc001d9b7
c001c9ed:	e8 3d 3d ff ff       	call   c001072f <Krnl::panic(char const*)>
c001c9f2:	83 c4 10             	add    esp,0x10
c001c9f5:	8d 76 00             	lea    esi,[esi+0x0]
c001c9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9fe:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca04:	85 c0                	test   eax,eax
c001ca06:	75 34                	jne    c001ca3c <LinkedList<Device>::removeFirst()+0x8c>
c001ca08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca0c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca16:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca21:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca24:	83 f8 01             	cmp    eax,0x1
c001ca27:	74 27                	je     c001ca50 <LinkedList<Device>::removeFirst()+0xa0>
c001ca29:	83 ec 0c             	sub    esp,0xc
c001ca2c:	68 90 d9 01 c0       	push   0xc001d990
c001ca31:	e8 f9 3c ff ff       	call   c001072f <Krnl::panic(char const*)>
c001ca36:	83 c4 10             	add    esp,0x10
c001ca39:	eb 15                	jmp    c001ca50 <LinkedList<Device>::removeFirst()+0xa0>
c001ca3b:	90                   	nop
c001ca3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca40:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca42:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ca48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca4c:	89 10                	mov    DWORD PTR [eax],edx
c001ca4e:	66 90                	xchg   ax,ax
c001ca50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca57:	8d 50 ff             	lea    edx,[eax-0x1]
c001ca5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca5e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ca61:	8d 76 00             	lea    esi,[esi+0x0]
c001ca64:	83 c4 0c             	add    esp,0xc
c001ca67:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ca68 <CPU::~CPU()>:
c001ca68:	83 ec 0c             	sub    esp,0xc
c001ca6b:	ba 00 e7 01 c0       	mov    edx,0xc001e700
c001ca70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca74:	89 10                	mov    DWORD PTR [eax],edx
c001ca76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca7a:	83 ec 0c             	sub    esp,0xc
c001ca7d:	50                   	push   eax
c001ca7e:	e8 9f f4 fe ff       	call   c000bf22 <Device::~Device()>
c001ca83:	83 c4 10             	add    esp,0x10
c001ca86:	90                   	nop
c001ca87:	83 c4 0c             	add    esp,0xc
c001ca8a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ca8c <CPU::~CPU()>:
c001ca8c:	83 ec 0c             	sub    esp,0xc
c001ca8f:	83 ec 0c             	sub    esp,0xc
c001ca92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca96:	e8 cd ff ff ff       	call   c001ca68 <CPU::~CPU()>
c001ca9b:	83 c4 10             	add    esp,0x10
c001ca9e:	83 ec 08             	sub    esp,0x8
c001caa1:	68 94 11 00 00       	push   0x1194
c001caa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caaa:	e8 3b e0 fe ff       	call   c000aaea <operator delete(void*, unsigned long)>
c001caaf:	83 c4 10             	add    esp,0x10
c001cab2:	83 c4 0c             	add    esp,0xc
c001cab5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001cab8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001cab8:	90                   	nop
c001cab9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001cabc <ThreadControlBlock::ThreadControlBlock()>:
c001cabc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cac0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cac7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cacb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001cad2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cad6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001cadd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cae1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001cae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caec:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001caf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caf7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001cafb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caff:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001cb03:	90                   	nop
c001cb04:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001cb08 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001cb08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb0c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb16:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb21:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb36:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb41:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb48:	90                   	nop
c001cb49:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001cb4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001cb4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb50:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cb53:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001cb54 <PCI::~PCI()>:
c001cb54:	83 ec 0c             	sub    esp,0xc
c001cb57:	ba e8 f1 01 c0       	mov    edx,0xc001f1e8
c001cb5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb60:	89 10                	mov    DWORD PTR [eax],edx
c001cb62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb66:	83 ec 0c             	sub    esp,0xc
c001cb69:	50                   	push   eax
c001cb6a:	e8 3d ee fe ff       	call   c000b9ac <Bus::~Bus()>
c001cb6f:	83 c4 10             	add    esp,0x10
c001cb72:	90                   	nop
c001cb73:	83 c4 0c             	add    esp,0xc
c001cb76:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cb78 <PCI::~PCI()>:
c001cb78:	83 ec 0c             	sub    esp,0xc
c001cb7b:	83 ec 0c             	sub    esp,0xc
c001cb7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb82:	e8 cd ff ff ff       	call   c001cb54 <PCI::~PCI()>
c001cb87:	83 c4 10             	add    esp,0x10
c001cb8a:	83 ec 08             	sub    esp,0x8
c001cb8d:	68 5c 01 00 00       	push   0x15c
c001cb92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb96:	e8 4f df fe ff       	call   c000aaea <operator delete(void*, unsigned long)>
c001cb9b:	83 c4 10             	add    esp,0x10
c001cb9e:	83 c4 0c             	add    esp,0xc
c001cba1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cba2 <IDE::~IDE()>:
c001cba2:	83 ec 0c             	sub    esp,0xc
c001cba5:	ba 9c f2 01 c0       	mov    edx,0xc001f29c
c001cbaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbae:	89 10                	mov    DWORD PTR [eax],edx
c001cbb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb4:	83 ec 0c             	sub    esp,0xc
c001cbb7:	50                   	push   eax
c001cbb8:	e8 df f7 fe ff       	call   c000c39c <HardDiskController::~HardDiskController()>
c001cbbd:	83 c4 10             	add    esp,0x10
c001cbc0:	90                   	nop
c001cbc1:	83 c4 0c             	add    esp,0xc
c001cbc4:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cbc6 <IDE::~IDE()>:
c001cbc6:	83 ec 0c             	sub    esp,0xc
c001cbc9:	83 ec 0c             	sub    esp,0xc
c001cbcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbd0:	e8 cd ff ff ff       	call   c001cba2 <IDE::~IDE()>
c001cbd5:	83 c4 10             	add    esp,0x10
c001cbd8:	83 ec 08             	sub    esp,0x8
c001cbdb:	68 70 02 00 00       	push   0x270
c001cbe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbe4:	e8 01 df fe ff       	call   c000aaea <operator delete(void*, unsigned long)>
c001cbe9:	83 c4 10             	add    esp,0x10
c001cbec:	83 c4 0c             	add    esp,0xc
c001cbef:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cbf0 <SATABus::~SATABus()>:
c001cbf0:	83 ec 0c             	sub    esp,0xc
c001cbf3:	ba ec f2 01 c0       	mov    edx,0xc001f2ec
c001cbf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbfc:	89 10                	mov    DWORD PTR [eax],edx
c001cbfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc02:	83 ec 0c             	sub    esp,0xc
c001cc05:	50                   	push   eax
c001cc06:	e8 91 f7 fe ff       	call   c000c39c <HardDiskController::~HardDiskController()>
c001cc0b:	83 c4 10             	add    esp,0x10
c001cc0e:	90                   	nop
c001cc0f:	83 c4 0c             	add    esp,0xc
c001cc12:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cc14 <SATABus::~SATABus()>:
c001cc14:	83 ec 0c             	sub    esp,0xc
c001cc17:	83 ec 0c             	sub    esp,0xc
c001cc1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc1e:	e8 cd ff ff ff       	call   c001cbf0 <SATABus::~SATABus()>
c001cc23:	83 c4 10             	add    esp,0x10
c001cc26:	83 ec 08             	sub    esp,0x8
c001cc29:	68 64 01 00 00       	push   0x164
c001cc2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc32:	e8 b3 de fe ff       	call   c000aaea <operator delete(void*, unsigned long)>
c001cc37:	83 c4 10             	add    esp,0x10
c001cc3a:	83 c4 0c             	add    esp,0xc
c001cc3d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001cc3e <ATA::~ATA()>:
c001cc3e:	83 ec 0c             	sub    esp,0xc
c001cc41:	ba 2c f3 01 c0       	mov    edx,0xc001f32c
c001cc46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc4a:	89 10                	mov    DWORD PTR [eax],edx
c001cc4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc50:	83 ec 0c             	sub    esp,0xc
c001cc53:	50                   	push   eax
c001cc54:	e8 25 f8 fe ff       	call   c000c47e <PhysicalDisk::~PhysicalDisk()>
c001cc59:	83 c4 10             	add    esp,0x10
c001cc5c:	90                   	nop
c001cc5d:	83 c4 0c             	add    esp,0xc
c001cc60:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001cc62 <ATA::~ATA()>:
c001cc62:	83 ec 0c             	sub    esp,0xc
c001cc65:	83 ec 0c             	sub    esp,0xc
c001cc68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc6c:	e8 cd ff ff ff       	call   c001cc3e <ATA::~ATA()>
c001cc71:	83 c4 10             	add    esp,0x10
c001cc74:	83 ec 08             	sub    esp,0x8
c001cc77:	68 7c 01 00 00       	push   0x17c
c001cc7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc80:	e8 65 de fe ff       	call   c000aaea <operator delete(void*, unsigned long)>
c001cc85:	83 c4 10             	add    esp,0x10
c001cc88:	83 c4 0c             	add    esp,0xc
c001cc8b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001cc8c <ATAPI::~ATAPI()>:
c001cc8c:	83 ec 0c             	sub    esp,0xc
c001cc8f:	ba 74 f3 01 c0       	mov    edx,0xc001f374
c001cc94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc98:	89 10                	mov    DWORD PTR [eax],edx
c001cc9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc9e:	83 ec 0c             	sub    esp,0xc
c001cca1:	50                   	push   eax
c001cca2:	e8 d7 f7 fe ff       	call   c000c47e <PhysicalDisk::~PhysicalDisk()>
c001cca7:	83 c4 10             	add    esp,0x10
c001ccaa:	90                   	nop
c001ccab:	83 c4 0c             	add    esp,0xc
c001ccae:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001ccb0 <ATAPI::~ATAPI()>:
c001ccb0:	83 ec 0c             	sub    esp,0xc
c001ccb3:	83 ec 0c             	sub    esp,0xc
c001ccb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccba:	e8 cd ff ff ff       	call   c001cc8c <ATAPI::~ATAPI()>
c001ccbf:	83 c4 10             	add    esp,0x10
c001ccc2:	83 ec 08             	sub    esp,0x8
c001ccc5:	68 84 01 00 00       	push   0x184
c001ccca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccce:	e8 17 de fe ff       	call   c000aaea <operator delete(void*, unsigned long)>
c001ccd3:	83 c4 10             	add    esp,0x10
c001ccd6:	83 c4 0c             	add    esp,0xc
c001ccd9:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001ccda <SATA::~SATA()>:
c001ccda:	83 ec 0c             	sub    esp,0xc
c001ccdd:	ba 28 f4 01 c0       	mov    edx,0xc001f428
c001cce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cce6:	89 10                	mov    DWORD PTR [eax],edx
c001cce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccec:	83 ec 0c             	sub    esp,0xc
c001ccef:	50                   	push   eax
c001ccf0:	e8 89 f7 fe ff       	call   c000c47e <PhysicalDisk::~PhysicalDisk()>
c001ccf5:	83 c4 10             	add    esp,0x10
c001ccf8:	90                   	nop
c001ccf9:	83 c4 0c             	add    esp,0xc
c001ccfc:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001ccfe <SATA::~SATA()>:
c001ccfe:	83 ec 0c             	sub    esp,0xc
c001cd01:	83 ec 0c             	sub    esp,0xc
c001cd04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd08:	e8 cd ff ff ff       	call   c001ccda <SATA::~SATA()>
c001cd0d:	83 c4 10             	add    esp,0x10
c001cd10:	83 ec 08             	sub    esp,0x8
c001cd13:	68 7c 01 00 00       	push   0x17c
c001cd18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd1c:	e8 c9 dd fe ff       	call   c000aaea <operator delete(void*, unsigned long)>
c001cd21:	83 c4 10             	add    esp,0x10
c001cd24:	83 c4 0c             	add    esp,0xc
c001cd27:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cd28 <SATAPI::~SATAPI()>:
c001cd28:	83 ec 0c             	sub    esp,0xc
c001cd2b:	ba b8 f5 01 c0       	mov    edx,0xc001f5b8
c001cd30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd34:	89 10                	mov    DWORD PTR [eax],edx
c001cd36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd3a:	83 ec 0c             	sub    esp,0xc
c001cd3d:	50                   	push   eax
c001cd3e:	e8 3b f7 fe ff       	call   c000c47e <PhysicalDisk::~PhysicalDisk()>
c001cd43:	83 c4 10             	add    esp,0x10
c001cd46:	90                   	nop
c001cd47:	83 c4 0c             	add    esp,0xc
c001cd4a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cd4c <SATAPI::~SATAPI()>:
c001cd4c:	83 ec 0c             	sub    esp,0xc
c001cd4f:	83 ec 0c             	sub    esp,0xc
c001cd52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd56:	e8 cd ff ff ff       	call   c001cd28 <SATAPI::~SATAPI()>
c001cd5b:	83 c4 10             	add    esp,0x10
c001cd5e:	83 ec 08             	sub    esp,0x8
c001cd61:	68 84 01 00 00       	push   0x184
c001cd66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd6a:	e8 7b dd fe ff       	call   c000aaea <operator delete(void*, unsigned long)>
c001cd6f:	83 c4 10             	add    esp,0x10
c001cd72:	83 c4 0c             	add    esp,0xc
c001cd75:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001cd76 <IOAPIC::~IOAPIC()>:
c001cd76:	83 ec 0c             	sub    esp,0xc
c001cd79:	ba f8 f5 01 c0       	mov    edx,0xc001f5f8
c001cd7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd82:	89 10                	mov    DWORD PTR [eax],edx
c001cd84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd88:	83 ec 0c             	sub    esp,0xc
c001cd8b:	50                   	push   eax
c001cd8c:	e8 91 f1 fe ff       	call   c000bf22 <Device::~Device()>
c001cd91:	83 c4 10             	add    esp,0x10
c001cd94:	90                   	nop
c001cd95:	83 c4 0c             	add    esp,0xc
c001cd98:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001cd9a <IOAPIC::~IOAPIC()>:
c001cd9a:	83 ec 0c             	sub    esp,0xc
c001cd9d:	83 ec 0c             	sub    esp,0xc
c001cda0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cda4:	e8 cd ff ff ff       	call   c001cd76 <IOAPIC::~IOAPIC()>
c001cda9:	83 c4 10             	add    esp,0x10
c001cdac:	83 ec 08             	sub    esp,0x8
c001cdaf:	68 68 01 00 00       	push   0x168
c001cdb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdb8:	e8 2d dd fe ff       	call   c000aaea <operator delete(void*, unsigned long)>
c001cdbd:	83 c4 10             	add    esp,0x10
c001cdc0:	83 c4 0c             	add    esp,0xc
c001cdc3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001cdc4 <APICTimer::~APICTimer()>:
c001cdc4:	83 ec 0c             	sub    esp,0xc
c001cdc7:	ba 40 f6 01 c0       	mov    edx,0xc001f640
c001cdcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdd0:	89 10                	mov    DWORD PTR [eax],edx
c001cdd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdd6:	83 ec 0c             	sub    esp,0xc
c001cdd9:	50                   	push   eax
c001cdda:	e8 41 0a ff ff       	call   c000d820 <Timer::~Timer()>
c001cddf:	83 c4 10             	add    esp,0x10
c001cde2:	90                   	nop
c001cde3:	83 c4 0c             	add    esp,0xc
c001cde6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001cde8 <APICTimer::~APICTimer()>:
c001cde8:	83 ec 0c             	sub    esp,0xc
c001cdeb:	83 ec 0c             	sub    esp,0xc
c001cdee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdf2:	e8 cd ff ff ff       	call   c001cdc4 <APICTimer::~APICTimer()>
c001cdf7:	83 c4 10             	add    esp,0x10
c001cdfa:	83 ec 08             	sub    esp,0x8
c001cdfd:	68 60 01 00 00       	push   0x160
c001ce02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce06:	e8 df dc fe ff       	call   c000aaea <operator delete(void*, unsigned long)>
c001ce0b:	83 c4 10             	add    esp,0x10
c001ce0e:	83 c4 0c             	add    esp,0xc
c001ce11:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ce14 <PIT::~PIT()>:
c001ce14:	83 ec 0c             	sub    esp,0xc
c001ce17:	ba 90 f6 01 c0       	mov    edx,0xc001f690
c001ce1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce20:	89 10                	mov    DWORD PTR [eax],edx
c001ce22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce26:	83 ec 0c             	sub    esp,0xc
c001ce29:	50                   	push   eax
c001ce2a:	e8 f1 09 ff ff       	call   c000d820 <Timer::~Timer()>
c001ce2f:	83 c4 10             	add    esp,0x10
c001ce32:	90                   	nop
c001ce33:	83 c4 0c             	add    esp,0xc
c001ce36:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ce38 <PIT::~PIT()>:
c001ce38:	83 ec 0c             	sub    esp,0xc
c001ce3b:	83 ec 0c             	sub    esp,0xc
c001ce3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce42:	e8 cd ff ff ff       	call   c001ce14 <PIT::~PIT()>
c001ce47:	83 c4 10             	add    esp,0x10
c001ce4a:	83 ec 08             	sub    esp,0x8
c001ce4d:	68 5c 01 00 00       	push   0x15c
c001ce52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce56:	e8 8f dc fe ff       	call   c000aaea <operator delete(void*, unsigned long)>
c001ce5b:	83 c4 10             	add    esp,0x10
c001ce5e:	83 c4 0c             	add    esp,0xc
c001ce61:	c3                   	ret    
