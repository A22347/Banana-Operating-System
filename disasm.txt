
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 b5 9a 00 00       	call   c0009ad5 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 99 28 02 00       	call   c00228be <_init>
c0000025:	c3                   	ret    
c0000026:	bb 42 35 02 c0       	mov    ebx,0xc0023542
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 50 35 02 c0    	cmp    ebx,0xc0023550
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 79 02 c0       	mov    eax,0xc0027918
c0000049:	3d 18 79 02 c0       	cmp    eax,0xc0027918
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 79 02 c0       	push   0xc0027918
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 79 02 c0       	mov    eax,0xc0027918
c0000075:	2d 18 79 02 c0       	sub    eax,0xc0027918
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 79 02 c0       	push   0xc0027918
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d a0 7a 02 c0 00 	cmp    BYTE PTR ds:0xc0027aa0,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 58 35 02 c0       	mov    ebx,0xc0023558
c00000bb:	81 eb 54 35 02 c0    	sub    ebx,0xc0023554
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 54 35 02 c0       	mov    esi,0xc0023554
c00000ca:	a1 a4 7a 02 c0       	mov    eax,ds:0xc0027aa4
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 a4 7a 02 c0       	mov    ds:0xc0027aa4,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 a4 7a 02 c0       	mov    eax,ds:0xc0027aa4
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 79 02 c0       	push   0xc0027918
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 a0 7a 02 c0 01 	mov    BYTE PTR ds:0xc0027aa0,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 a8 7a 02 c0       	push   0xc0027aa8
c000012c:	68 18 79 02 c0       	push   0xc0027918
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 28 7c 01 00       	call   c0017f00 <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 7c c7 00 00       	call   c000ca6c <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 06 7c 01 00       	call   c0017f00 <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 cf 80 01 00       	call   c00183e8 <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 12 87 01 00       	call   c0018a34 <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 f0 7e 02 c0 	lgdtd  ds:0xc0027ef0
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 6a e5 00 00       	call   c000ea81 <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 c0 7a 02 c0       	mov    ds:0xc0027ac0,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 c0 7a 02 c0    	mov    DWORD PTR ds:0xc0027ac0,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d c0 7a 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ac0
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 60 35 02 c0 02 	test   BYTE PTR [edx-0x3ffdcaa0],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 60 35 02 c0 01 	test   BYTE PTR [edx-0x3ffdcaa0],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 60 35 02 c0 08 	test   BYTE PTR [edx-0x3ffdcaa0],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 60 35 02 c0 04 	test   BYTE PTR [ebx-0x3ffdcaa0],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 60 35 02 c0 01 	test   BYTE PTR [edx-0x3ffdcaa0],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d e0 7a 02 c0    	mov    ecx,DWORD PTR ds:0xc0027ae0
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d e0 7a 02 c0    	mov    DWORD PTR ds:0xc0027ae0,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 e4 7a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd851c]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 e4 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd851c],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d e0 7a 02 c0    	mov    DWORD PTR ds:0xc0027ae0,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 0c 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b0c,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d 1c 7b 02 c0    	mov    ecx,DWORD PTR ds:0xc0027b1c
c0000d6c:	c7 42 0c 14 7b 02 c0 	mov    DWORD PTR [edx+0xc],0xc0027b14
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 1c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b1c,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 0c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b0c,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 e0 7a 02 c0 02 	test   BYTE PTR ds:0xc0027ae0,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 e0 7a 02 c0       	mov    eax,0xc0027ae0
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 8b 8a 00 00       	call   c00098d8 <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 cd 89 00 00       	call   c00098d8 <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 b7 89 00 00       	call   c00098d8 <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 93 89 00 00       	call   c00098d8 <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d e0 7a 02 c0    	mov    edi,DWORD PTR ds:0xc0027ae0
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 e0 7a 02 c0       	mov    eax,0xc0027ae0
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 e4 7a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd851c]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 e4 7a 02 c0 	mov    DWORD PTR [edx*4-0x3ffd851c],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 14 7b 02 c0 	lea    edx,[eax*8-0x3ffd84ec]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 e0 7a 02 c0       	mov    eax,0xc0027ae0
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d 20 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b20
c00010ee:	81 fb 14 7b 02 c0    	cmp    ebx,0xc0027b14
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d 14 7b 02 c0       	cmp    eax,0xc0027b14
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d 10 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b10,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 1c 7b 02 c0       	mov    ds:0xc0027b1c,eax
c000112a:	a3 20 7b 02 c0       	mov    ds:0xc0027b20,eax
c000112f:	a3 10 7b 02 c0       	mov    ds:0xc0027b10,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 14 7b 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027b14
c000113d:	c7 40 0c 14 7b 02 c0 	mov    DWORD PTR [eax+0xc],0xc0027b14
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 20 7b 02 c0       	mov    ds:0xc0027b20,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 14 7b 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027b14
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 d8 7a 02 c0 	lea    ebp,[edx*4-0x3ffd8528]
c000118e:	8b 14 95 e0 7a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8520]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 e0 7a 02 c0 	lea    ecx,[edx*4-0x3ffd8520]
c00011a9:	8b 14 95 e0 7a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8520]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd 14 7e 02 c0 	or     DWORD PTR [edi*4-0x3ffd81ec],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 14 7b 02 c0 	lea    eax,[eax*8-0x3ffd84ec]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d 1c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b1c,ecx
c0001263:	89 0d 20 7b 02 c0    	mov    DWORD PTR ds:0xc0027b20,ecx
c0001269:	c7 41 08 14 7b 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0027b14
c0001270:	c7 41 0c 14 7b 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0027b14
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd 0c 7b 02 c0 	lea    edx,[ecx*8-0x3ffd84f4]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d 14 7e 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd81ec]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d 14 7e 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd81ec]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 0c 7b 02 c0 	lea    edx,[eax*4-0x3ffd84f4]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d 14 7e 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd81ec],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d 1c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b1c,edi
c0001336:	89 3d 20 7b 02 c0    	mov    DWORD PTR ds:0xc0027b20,edi
c000133c:	c7 47 08 14 7b 02 c0 	mov    DWORD PTR [edi+0x8],0xc0027b14
c0001343:	c7 47 0c 14 7b 02 c0 	mov    DWORD PTR [edi+0xc],0xc0027b14
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d 10 7b 02 c0    	mov    DWORD PTR ds:0xc0027b10,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 0c 7b 02 c0       	mov    eax,ds:0xc0027b0c
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d 0c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b0c,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba e0 7a 02 c0       	mov    edx,0xc0027ae0
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d e0 7a 02 c0 00 	cmp    DWORD PTR ds:0xc0027ae0,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 e0 7a 02 c0       	mov    eax,0xc0027ae0
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d 34 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e34
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 34 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027e34,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d 34 7e 02 c0    	mov    DWORD PTR ds:0xc0027e34,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 0c 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b0c,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d 0c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b0c,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d e0 7a 02 c0 00 	cmp    DWORD PTR ds:0xc0027ae0,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 e0 7a 02 c0       	mov    eax,0xc0027ae0
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 3c 7e 02 c0    	push   DWORD PTR ds:0xc0027e3c
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d e0 7a 02 c0 00 	cmp    DWORD PTR ds:0xc0027ae0,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 e0 7a 02 c0       	mov    eax,0xc0027ae0
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 3c 7e 02 c0       	mov    eax,ds:0xc0027e3c
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 e0 7a 02 c0       	mov    eax,0xc0027ae0
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d 0c 7b 02 c0 00 	cmp    DWORD PTR ds:0xc0027b0c,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 e0 7a 02 c0       	mov    eax,0xc0027ae0
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 0c 7b 02 c0       	mov    eax,ds:0xc0027b0c
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 e4 7a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd851c]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 14 7b 02 c0       	mov    eax,0xc0027b14
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d 0c 7e 02 c0       	cmp    eax,0xc0027e0c
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 48 7e 02 c0       	mov    eax,ds:0xc0027e48
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 30 7e 02 c0    	mov    esi,DWORD PTR ds:0xc0027e30
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 44 7e 02 c0    	mov    esi,DWORD PTR ds:0xc0027e44
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 54 7e 02 c0    	mov    esi,DWORD PTR ds:0xc0027e54
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 e0 7a 02 c0       	mov    eax,0xc0027ae0
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 64 36 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdc99c]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 e0 7a 02 c0       	mov    eax,ds:0xc0027ae0
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 e0 7a 02 c0       	mov    ds:0xc0027ae0,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d 24 7e 02 c0    	mov    DWORD PTR ds:0xc0027e24,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d 28 7e 02 c0    	mov    DWORD PTR ds:0xc0027e28,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d 2c 7e 02 c0    	mov    DWORD PTR ds:0xc0027e2c,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 34 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027e34,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 a0 95 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6a60]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 12 9c 01 00       	jmp    c001b738 <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 a0 95 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6a60]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 44 9c 01 00       	jmp    c001b780 <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 a0 95 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6a60]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 6d 9c 01 00       	jmp    c001b7c8 <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 66 08 02 00       	call   c00226a4 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 80 37 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdc880]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 80 37 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdc880]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba 80 36 02 c0       	mov    edx,0xc0023680
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba a0 37 02 c0       	mov    edx,0xc00237a0
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba 54 62 02 c0       	mov    edx,0xc0026254
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba ac 37 02 c0       	mov    edx,0xc00237ac
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba 90 37 02 c0       	mov    edx,0xc0023790
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 80 7e 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd8180]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 60 7e 02 c0    	mov    ax,ds:0xc0027e60
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 60 7e 02 c0    	mov    ds:0xc0027e60,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 63 f6 01 00       	call   c00226a4 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 b2 37 02 c0       	mov    eax,0xc00237b2
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad 00 37 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdc900]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 bb 37 02 c0       	mov    eax,0xc00237bb
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 80 37 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc880]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 2e e0 01 00       	call   c00226a4 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba 90 37 02 c0       	mov    edx,0xc0023790
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba 80 36 02 c0       	mov    edx,0xc0023680
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba 90 36 02 c0       	mov    edx,0xc0023690
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 80 7e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8180]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 80 7e 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8180],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 f5 c9 01 00       	call   c00226a4 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 db c9 01 00       	call   c00226a4 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 d7 36 02 c0       	mov    eax,0xc00236d7
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 d0 36 02 c0       	mov    eax,0xc00236d0
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 74 b5 01 00       	call   c00226a4 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 80 7e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8180]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be c0 36 02 c0       	mov    esi,0xc00236c0
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 e8 ae 01 00       	call   c00226a4 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba a0 37 02 c0       	mov    edx,0xc00237a0
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba a0 36 02 c0       	mov    edx,0xc00236a0
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba b0 36 02 c0       	mov    edx,0xc00236b0
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba c2 37 02 c0       	mov    edx,0xc00237c2
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba ce 37 02 c0       	mov    edx,0xc00237ce
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba e2 37 02 c0       	mov    edx,0xc00237e2
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 3c 14 00 00       	call   c0009a0f <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 34 14 00 00       	call   c0009a1f <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c 00 3b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023b00
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 00 3b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023b00
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 00 39 02 c0       	mov    eax,0xc0023900
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 40 38 02 c0       	mov    eax,0xc0023840
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 00 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc800]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 96 11 00 00       	jmp    c0009a0f <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 b1 11 00 00       	jmp    c0009a2f <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c000888b:	48                   	dec    eax
c000888c:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c00088a2:	48                   	dec    eax
c00088a3:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c00088b3:	ff 05 04 94 02 c0    	inc    DWORD PTR ds:0xc0029404
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 04 94 02 c0       	mov    eax,ds:0xc0029404
c00088c2:	48                   	dec    eax
c00088c3:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d 00 94 02 c0 00 	cmp    DWORD PTR ds:0xc0029400,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c00088dd:	e8 72 fd 00 00       	call   c0018654 <schedule()>
c00088e2:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c00088e7:	48                   	dec    eax
c00088e8:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 10 80 02 c0       	mov    eax,ds:0xc0028010
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 00 3c 02 c0       	push   0xc0023c00
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 e8 7e 02 c0       	mov    eax,0xc0027ee8
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 09 3c 02 c0       	push   0xc0023c09
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 a4 26 02 c0       	mov    eax,0xc00226a4
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 13 3c 02 c0       	push   0xc0023c13
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 d8 23 02 c0       	mov    eax,0xc00223d8
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 1c 3c 02 c0       	push   0xc0023c1c
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 a4 27 02 c0       	mov    eax,0xc00227a4
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 26 3c 02 c0       	push   0xc0023c26
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 24 25 02 c0       	mov    eax,0xc0022524
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 2f 3c 02 c0       	push   0xc0023c2f
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 ec 7e 02 c0       	mov    eax,0xc0027eec
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 3c 3c 02 c0       	push   0xc0023c3c
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 ed 7e 02 c0       	mov    eax,0xc0027eed
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 eb 58 00 00       	call   c000e330 <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 49 3c 02 c0       	push   0xc0023c49
c0008a75:	e8 ef 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 60 3c 02 c0 	mov    DWORD PTR [esp],0xc0023c60
c0008a82:	e8 e2 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 7c 0f 00 00       	call   c0009a0f <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 30 94 02 c0    	push   DWORD PTR ds:0xc0029430
c0008aa2:	68 79 3c 02 c0       	push   0xc0023c79
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 81 f7 00 00       	call   c0018230 <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 07 94 00 c0       	push   0xc0009407
c0008abe:	53                   	push   ebx
c0008abf:	e8 74 f9 00 00       	call   c0018438 <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 7c 8e 01 c0       	push   0xc0018e7c
c0008acd:	ff 35 30 94 02 c0    	push   DWORD PTR ds:0xc0029430
c0008ad3:	e8 60 f9 00 00       	call   c0018438 <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 e8 93 02 c0       	mov    ds:0xc00293e8,eax
c0008ae0:	68 20 3e 02 c0       	push   0xc0023e20
c0008ae5:	c6 05 ed 7e 02 c0 01 	mov    BYTE PTR ds:0xc0027eed,0x1
c0008aec:	e8 78 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008af1:	e8 61 07 01 00       	call   c0019257 <Vm::initialise8086()>
c0008af6:	e8 9b 45 00 00       	call   c000d096 <Fs::initVFS()>
c0008afb:	c7 04 24 86 3c 02 c0 	mov    DWORD PTR [esp],0xc0023c86
c0008b02:	e8 62 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b07:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 20 3e 02 c0       	push   0xc0023e20
c0008b26:	e8 3e 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 6e df 00 00       	call   c0016a9e <Sys::loadSyscalls()>
c0008b30:	e8 b1 bc 00 00       	call   c00147e6 <Krnl::loadSystemEnv()>
c0008b35:	e8 5c c2 00 00       	call   c0014d96 <Krnl::setupPowerManager()>
c0008b3a:	83 c4 0c             	add    esp,0xc
c0008b3d:	6a 3a                	push   0x3a
c0008b3f:	68 a0 3c 02 c0       	push   0xc0023ca0
c0008b44:	68 a9 3c 02 c0       	push   0xc0023ca9
c0008b49:	e8 13 cd 00 00       	call   c0015861 <Reg::readIntWithDefault(char*, char*, int)>
c0008b4e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b51:	e8 92 50 00 00       	call   c000dbe8 <User::loadClockSettings(int)>
c0008b56:	c7 04 24 44 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e44
c0008b5d:	e8 07 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b62:	58                   	pop    eax
c0008b63:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c0008b68:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b6e:	e8 7d 57 00 00       	call   c000e2f0 <Device::loadDriversForAll()>
c0008b73:	c7 04 24 b1 3c 02 c0 	mov    DWORD PTR [esp],0xc0023cb1
c0008b7a:	e8 ea 0e 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b7f:	e8 ca b7 00 00       	call   c001434e <Krnl::startCPUs()>
c0008b84:	c7 04 24 cb 3c 02 c0 	mov    DWORD PTR [esp],0xc0023ccb
c0008b8b:	e8 d9 0e 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b90:	5a                   	pop    edx
c0008b91:	8b 1d e8 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ee8
c0008b97:	59                   	pop    ecx
c0008b98:	6a 01                	push   0x1
c0008b9a:	68 dc 3c 02 c0       	push   0xc0023cdc
c0008b9f:	e8 ca f0 00 00       	call   c0017c6e <Thr::loadDLL(char const*, bool)>
c0008ba4:	5a                   	pop    edx
c0008ba5:	59                   	pop    ecx
c0008ba6:	53                   	push   ebx
c0008ba7:	50                   	push   eax
c0008ba8:	e8 f2 f2 00 00       	call   c0017e9f <Thr::executeDLL(unsigned long, void*)>
c0008bad:	83 c4 10             	add    esp,0x10
c0008bb0:	83 ec 0c             	sub    esp,0xc
c0008bb3:	6a 02                	push   0x2
c0008bb5:	e8 92 fc 00 00       	call   c001884c <blockTask(TaskState)>
c0008bba:	83 c4 10             	add    esp,0x10
c0008bbd:	eb f1                	jmp    c0008bb0 <Krnl::firstTask()+0x144>
c0008bbf:	90                   	nop

c0008bc0 <Computer::Computer()>:
c0008bc0:	83 ec 0c             	sub    esp,0xc
c0008bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc7:	83 ec 08             	sub    esp,0x8
c0008bca:	68 f8 3c 02 c0       	push   0xc0023cf8
c0008bcf:	50                   	push   eax
c0008bd0:	e8 d5 57 00 00       	call   c000e3aa <Device::Device(char const*)>
c0008bd5:	83 c4 10             	add    esp,0x10
c0008bd8:	ba f4 3e 02 c0       	mov    edx,0xc0023ef4
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	89 10                	mov    DWORD PTR [eax],edx
c0008be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf5:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c03:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c09:	83 ca 04             	or     edx,0x4
c0008c0c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c16:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c1c:	0f b6 d0             	movzx  edx,al
c0008c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c23:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c2e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c34:	0f b6 d0             	movzx  edx,al
c0008c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c44:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c4a:	8d 50 01             	lea    edx,[eax+0x1]
c0008c4d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c51:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c57:	0f b6 d0             	movzx  edx,al
c0008c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c5e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c62:	83 e1 3f             	and    ecx,0x3f
c0008c65:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c73:	0f b6 d0             	movzx  edx,al
c0008c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c85:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c8b:	0f b6 d0             	movzx  edx,al
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ca1:	8d 50 01             	lea    edx,[eax+0x1]
c0008ca4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cae:	0f b6 d0             	movzx  edx,al
c0008cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb9:	83 e1 3f             	and    ecx,0x3f
c0008cbc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cca:	0f b6 d0             	movzx  edx,al
c0008ccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cdc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ce2:	0f b6 d0             	movzx  edx,al
c0008ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf8:	8d 50 01             	lea    edx,[eax+0x1]
c0008cfb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cff:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008d05:	0f b6 d0             	movzx  edx,al
c0008d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d10:	83 e1 3f             	and    ecx,0x3f
c0008d13:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d17:	90                   	nop
c0008d18:	83 c4 0c             	add    esp,0xc
c0008d1b:	c3                   	ret    

c0008d1c <Computer::setBootMessage(char const*)>:
c0008d1c:	c3                   	ret    
c0008d1d:	90                   	nop

c0008d1e <Computer::detectFeatures()>:
c0008d1e:	55                   	push   ebp
c0008d1f:	57                   	push   edi
c0008d20:	56                   	push   esi
c0008d21:	53                   	push   ebx
c0008d22:	83 ec 1c             	sub    esp,0x1c
c0008d25:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d29:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d33:	e8 e1 74 ff ff       	call   c0000219 <detectCPUID>
c0008d38:	85 c0                	test   eax,eax
c0008d3a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d40:	0f 95 c2             	setne  dl
c0008d43:	83 e0 fd             	and    eax,0xfffffffd
c0008d46:	d1 e2                	shl    edx,1
c0008d48:	09 d0                	or     eax,edx
c0008d4a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d50:	a8 02                	test   al,0x2
c0008d52:	75 46                	jne    c0008d9a <Computer::detectFeatures()+0x7c>
c0008d54:	f6 05 01 7f 02 c0 04 	test   BYTE PTR ds:0xc0027f01,0x4
c0008d5b:	74 07                	je     c0008d64 <Computer::detectFeatures()+0x46>
c0008d5d:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d64:	e8 fd 95 01 00       	call   c0022366 <x87Detect>
c0008d69:	83 e0 01             	and    eax,0x1
c0008d6c:	c1 e0 04             	shl    eax,0x4
c0008d6f:	88 c2                	mov    dl,al
c0008d71:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d77:	83 e0 ef             	and    eax,0xffffffef
c0008d7a:	09 d0                	or     eax,edx
c0008d7c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d82:	a8 10                	test   al,0x10
c0008d84:	0f 85 2a 01 00 00    	jne    c0008eb4 <Computer::detectFeatures()+0x196>
c0008d8a:	84 c0                	test   al,al
c0008d8c:	0f 88 45 01 00 00    	js     c0008ed7 <Computer::detectFeatures()+0x1b9>
c0008d92:	83 c4 1c             	add    esp,0x1c
c0008d95:	5b                   	pop    ebx
c0008d96:	5e                   	pop    esi
c0008d97:	5f                   	pop    edi
c0008d98:	5d                   	pop    ebp
c0008d99:	c3                   	ret    
c0008d9a:	83 ec 0c             	sub    esp,0xc
c0008d9d:	6a 20                	push   0x20
c0008d9f:	e8 4e a4 00 00       	call   c00131f2 <CPU::cpuidCheckEDX(unsigned int)>
c0008da4:	83 e0 01             	and    eax,0x1
c0008da7:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008dae:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008db4:	83 e0 f7             	and    eax,0xfffffff7
c0008db7:	09 d0                	or     eax,edx
c0008db9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008dbf:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc6:	e8 27 a4 00 00       	call   c00131f2 <CPU::cpuidCheckEDX(unsigned int)>
c0008dcb:	83 e0 01             	and    eax,0x1
c0008dce:	88 c2                	mov    dl,al
c0008dd0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd6:	83 e0 fe             	and    eax,0xfffffffe
c0008dd9:	09 d0                	or     eax,edx
c0008ddb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008de1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de8:	e8 05 a4 00 00       	call   c00131f2 <CPU::cpuidCheckEDX(unsigned int)>
c0008ded:	c1 e0 07             	shl    eax,0x7
c0008df0:	88 c2                	mov    dl,al
c0008df2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df8:	83 e0 7f             	and    eax,0x7f
c0008dfb:	09 d0                	or     eax,edx
c0008dfd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008e03:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e0a:	e8 e3 a3 00 00       	call   c00131f2 <CPU::cpuidCheckEDX(unsigned int)>
c0008e0f:	83 c4 10             	add    esp,0x10
c0008e12:	83 e0 01             	and    eax,0x1
c0008e15:	c1 e0 05             	shl    eax,0x5
c0008e18:	88 c2                	mov    dl,al
c0008e1a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e20:	83 e0 df             	and    eax,0xffffffdf
c0008e23:	09 d0                	or     eax,edx
c0008e25:	f7 05 00 7f 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0027f00,0x401
c0008e2f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e35:	0f 84 c2 00 00 00    	je     c0008efd <Computer::detectFeatures()+0x1df>
c0008e3b:	83 e0 fe             	and    eax,0xfffffffe
c0008e3e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e44:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e4a:	88 c2                	mov    dl,al
c0008e4c:	83 e2 09             	and    edx,0x9
c0008e4f:	fe ca                	dec    dl
c0008e51:	75 09                	jne    c0008e5c <Computer::detectFeatures()+0x13e>
c0008e53:	83 e0 fe             	and    eax,0xfffffffe
c0008e56:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e5c:	83 ec 0c             	sub    esp,0xc
c0008e5f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e63:	50                   	push   eax
c0008e64:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e68:	55                   	push   ebp
c0008e69:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e6d:	57                   	push   edi
c0008e6e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e72:	56                   	push   esi
c0008e73:	68 00 00 00 80       	push   0x80000000
c0008e78:	e8 f1 a2 00 00       	call   c001316e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e7d:	83 c4 20             	add    esp,0x20
c0008e80:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e8b:	0f 86 c3 fe ff ff    	jbe    c0008d54 <Computer::detectFeatures()+0x36>
c0008e91:	83 ec 0c             	sub    esp,0xc
c0008e94:	50                   	push   eax
c0008e95:	55                   	push   ebp
c0008e96:	57                   	push   edi
c0008e97:	56                   	push   esi
c0008e98:	68 01 00 00 80       	push   0x80000001
c0008e9d:	e8 cc a2 00 00       	call   c001316e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008ea2:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008eac:	83 c4 20             	add    esp,0x20
c0008eaf:	e9 a0 fe ff ff       	jmp    c0008d54 <Computer::detectFeatures()+0x36>
c0008eb4:	e8 67 94 01 00       	call   c0022320 <absolutelyNoChanceInHell>
c0008eb9:	88 c2                	mov    dl,al
c0008ebb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ec1:	c1 e2 07             	shl    edx,0x7
c0008ec4:	83 e0 7f             	and    eax,0x7f
c0008ec7:	09 d0                	or     eax,edx
c0008ec9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ecf:	84 c0                	test   al,al
c0008ed1:	0f 89 bb fe ff ff    	jns    c0008d92 <Computer::detectFeatures()+0x74>
c0008ed7:	e8 24 94 01 00       	call   c0022300 <avxDetect>
c0008edc:	83 e0 01             	and    eax,0x1
c0008edf:	c1 e0 05             	shl    eax,0x5
c0008ee2:	88 c2                	mov    dl,al
c0008ee4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008eea:	83 e0 df             	and    eax,0xffffffdf
c0008eed:	09 d0                	or     eax,edx
c0008eef:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ef5:	83 c4 1c             	add    esp,0x1c
c0008ef8:	5b                   	pop    ebx
c0008ef9:	5e                   	pop    esi
c0008efa:	5f                   	pop    edi
c0008efb:	5d                   	pop    ebp
c0008efc:	c3                   	ret    
c0008efd:	83 ec 0c             	sub    esp,0xc
c0008f00:	68 00 02 00 00       	push   0x200
c0008f05:	e8 e8 a2 00 00       	call   c00131f2 <CPU::cpuidCheckEDX(unsigned int)>
c0008f0a:	83 c4 10             	add    esp,0x10
c0008f0d:	83 e0 01             	and    eax,0x1
c0008f10:	88 c2                	mov    dl,al
c0008f12:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f18:	83 e0 fe             	and    eax,0xfffffffe
c0008f1b:	09 d0                	or     eax,edx
c0008f1d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f23:	e9 1c ff ff ff       	jmp    c0008e44 <Computer::detectFeatures()+0x126>

c0008f28 <Computer::displayFeatures()>:
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <Computer::rdmsr(unsigned int)>:
c0008f2a:	83 ec 0c             	sub    esp,0xc
c0008f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f31:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f38:	74 0a                	je     c0008f44 <Computer::rdmsr(unsigned int)+0x1a>
c0008f3a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f3e:	0f 32                	rdmsr  
c0008f40:	83 c4 0c             	add    esp,0xc
c0008f43:	c3                   	ret    
c0008f44:	83 ec 0c             	sub    esp,0xc
c0008f47:	68 01 3d 02 c0       	push   0xc0023d01
c0008f4c:	e8 9e b9 00 00       	call   c00148ef <Krnl::panic(char const*)>
c0008f51:	83 c4 10             	add    esp,0x10
c0008f54:	eb e4                	jmp    c0008f3a <Computer::rdmsr(unsigned int)+0x10>

c0008f56 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f56:	57                   	push   edi
c0008f57:	56                   	push   esi
c0008f58:	52                   	push   edx
c0008f59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f5d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f61:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f65:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f6c:	74 0e                	je     c0008f7c <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f6e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f72:	89 f0                	mov    eax,esi
c0008f74:	89 fa                	mov    edx,edi
c0008f76:	0f 30                	wrmsr  
c0008f78:	58                   	pop    eax
c0008f79:	5e                   	pop    esi
c0008f7a:	5f                   	pop    edi
c0008f7b:	c3                   	ret    
c0008f7c:	83 ec 0c             	sub    esp,0xc
c0008f7f:	68 07 3d 02 c0       	push   0xc0023d07
c0008f84:	e8 66 b9 00 00       	call   c00148ef <Krnl::panic(char const*)>
c0008f89:	83 c4 10             	add    esp,0x10
c0008f8c:	eb e0                	jmp    c0008f6e <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f8e <Computer::shutdown()>:
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f95:	8b 10                	mov    edx,DWORD PTR [eax]
c0008f97:	6a 00                	push   0x0
c0008f99:	6a 00                	push   0x0
c0008f9b:	6a 00                	push   0x0
c0008f9d:	50                   	push   eax
c0008f9e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008fa1:	83 c4 1c             	add    esp,0x1c
c0008fa4:	c3                   	ret    
c0008fa5:	90                   	nop

c0008fa6 <Computer::restart()>:
c0008fa6:	83 ec 0c             	sub    esp,0xc
c0008fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fad:	8b 10                	mov    edx,DWORD PTR [eax]
c0008faf:	6a 00                	push   0x0
c0008fb1:	6a 00                	push   0x0
c0008fb3:	6a 01                	push   0x1
c0008fb5:	50                   	push   eax
c0008fb6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008fb9:	83 c4 1c             	add    esp,0x1c
c0008fbc:	c3                   	ret    
c0008fbd:	90                   	nop

c0008fbe <Computer::sleep()>:
c0008fbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fc2:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fcc:	e9 ef 97 00 00       	jmp    c00127c0 <ACPI::sleep()>
c0008fd1:	90                   	nop

c0008fd2 <Computer::nmiEnabled()>:
c0008fd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fd6:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008fdc:	c3                   	ret    
c0008fdd:	90                   	nop

c0008fde <Computer::readCMOS(unsigned char)>:
c0008fde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fe2:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008fe9:	19 c0                	sbb    eax,eax
c0008feb:	83 e0 80             	and    eax,0xffffff80
c0008fee:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008ff2:	e6 70                	out    0x70,al
c0008ff4:	e4 71                	in     al,0x71
c0008ff6:	c3                   	ret    
c0008ff7:	90                   	nop

c0008ff8 <Computer::enableNMI(bool)>:
c0008ff8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008ffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009000:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0009006:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000900e:	eb ce                	jmp    c0008fde <Computer::readCMOS(unsigned char)>

c0009010 <Computer::open(int, int, void*)>:
c0009010:	56                   	push   esi
c0009011:	53                   	push   ebx
c0009012:	83 ec 10             	sub    esp,0x10
c0009015:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009019:	68 64 3e 02 c0       	push   0xc0023e64
c000901e:	e8 46 0a 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009023:	58                   	pop    eax
c0009024:	f6 05 00 7f 02 c0 04 	test   BYTE PTR ds:0xc0027f00,0x4
c000902b:	5a                   	pop    edx
c000902c:	0f 94 05 c0 72 02 c0 	sete   BYTE PTR ds:0xc00272c0
c0009033:	68 58 01 00 00       	push   0x158
c0009038:	68 0d 3d 02 c0       	push   0xc0023d0d
c000903d:	e8 bd 3c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009042:	59                   	pop    ecx
c0009043:	5e                   	pop    esi
c0009044:	68 14 01 00 00       	push   0x114
c0009049:	68 23 3d 02 c0       	push   0xc0023d23
c000904e:	e8 ac 3c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009053:	58                   	pop    eax
c0009054:	5a                   	pop    edx
c0009055:	6a 14                	push   0x14
c0009057:	68 37 3d 02 c0       	push   0xc0023d37
c000905c:	e8 9e 3c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009061:	59                   	pop    ecx
c0009062:	5e                   	pop    esi
c0009063:	68 1f 07 00 00       	push   0x71f
c0009068:	68 4a 3d 02 c0       	push   0xc0023d4a
c000906d:	e8 8d 3c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009072:	58                   	pop    eax
c0009073:	5a                   	pop    edx
c0009074:	6a 5f                	push   0x5f
c0009076:	68 61 3d 02 c0       	push   0xc0023d61
c000907b:	e8 7f 3c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009080:	c7 04 24 77 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d77
c0009087:	e8 73 3c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000908c:	c7 04 24 89 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d89
c0009093:	e8 d1 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009098:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000909f:	e8 6b 09 00 00       	call   c0009a0f <malloc>
c00090a4:	89 c6                	mov    esi,eax
c00090a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00090a9:	e8 ca 8f 00 00       	call   c0012078 <ACPI::ACPI()>
c00090ae:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c00090b4:	c7 04 24 a3 3d 02 c0 	mov    DWORD PTR [esp],0xc0023da3
c00090bb:	e8 a9 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090c0:	59                   	pop    ecx
c00090c1:	5e                   	pop    esi
c00090c2:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c00090c8:	53                   	push   ebx
c00090c9:	e8 d8 50 00 00       	call   c000e1a6 <Device::addChild(Device*)>
c00090ce:	c7 04 24 88 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e88
c00090d5:	e8 8f 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00090dd:	e8 3c fc ff ff       	call   c0008d1e <Computer::detectFeatures()>
c00090e2:	c7 04 24 a8 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ea8
c00090e9:	e8 7b 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090ee:	c7 04 24 bd 3d 02 c0 	mov    DWORD PTR [esp],0xc0023dbd
c00090f5:	e8 6f 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090fa:	58                   	pop    eax
c00090fb:	5a                   	pop    edx
c00090fc:	6a 01                	push   0x1
c00090fe:	53                   	push   ebx
c00090ff:	e8 f4 fe ff ff       	call   c0008ff8 <Computer::enableNMI(bool)>
c0009104:	c7 04 24 b1 3c 02 c0 	mov    DWORD PTR [esp],0xc0023cb1
c000910b:	e8 59 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009110:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c0009117:	e8 f3 08 00 00       	call   c0009a0f <malloc>
c000911c:	89 04 24             	mov    DWORD PTR [esp],eax
c000911f:	89 c6                	mov    esi,eax
c0009121:	e8 84 a1 00 00       	call   c00132aa <CPU::CPU()>
c0009126:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000912c:	59                   	pop    ecx
c000912d:	58                   	pop    eax
c000912e:	56                   	push   esi
c000912f:	53                   	push   ebx
c0009130:	e8 71 50 00 00       	call   c000e1a6 <Device::addChild(Device*)>
c0009135:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000913b:	8b 10                	mov    edx,DWORD PTR [eax]
c000913d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009141:	6a 00                	push   0x0
c0009143:	6a 00                	push   0x0
c0009145:	50                   	push   eax
c0009146:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0009149:	83 c4 14             	add    esp,0x14
c000914c:	68 c8 3e 02 c0       	push   0xc0023ec8
c0009151:	e8 13 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009156:	e8 e7 55 00 00       	call   c000e742 <setupFPU()>
c000915b:	83 c4 10             	add    esp,0x10
c000915e:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0009164:	85 c0                	test   eax,eax
c0009166:	74 1f                	je     c0009187 <Computer::open(int, int, void*)+0x177>
c0009168:	83 ec 08             	sub    esp,0x8
c000916b:	50                   	push   eax
c000916c:	53                   	push   ebx
c000916d:	e8 34 50 00 00       	call   c000e1a6 <Device::addChild(Device*)>
c0009172:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c0009178:	8b 10                	mov    edx,DWORD PTR [eax]
c000917a:	6a 00                	push   0x0
c000917c:	6a 00                	push   0x0
c000917e:	6a 00                	push   0x0
c0009180:	50                   	push   eax
c0009181:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0009184:	83 c4 20             	add    esp,0x20
c0009187:	83 ec 0c             	sub    esp,0xc
c000918a:	68 ce 3d 02 c0       	push   0xc0023dce
c000918f:	e8 d5 08 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009194:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c000919b:	e8 ac f3 00 00       	call   c001854c <setupMultitasking(void (*)())>
c00091a0:	83 c4 14             	add    esp,0x14
c00091a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00091a8:	5b                   	pop    ebx
c00091a9:	5e                   	pop    esi
c00091aa:	c3                   	ret    
c00091ab:	90                   	nop

c00091ac <Computer::disableNMI()>:
c00091ac:	6a 00                	push   0x0
c00091ae:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00091b2:	e8 41 fe ff ff       	call   c0008ff8 <Computer::enableNMI(bool)>
c00091b7:	58                   	pop    eax
c00091b8:	5a                   	pop    edx
c00091b9:	c3                   	ret    

c00091ba <Computer::writeCMOS(unsigned char, unsigned char)>:
c00091ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091be:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00091c5:	19 c0                	sbb    eax,eax
c00091c7:	83 e0 80             	and    eax,0xffffff80
c00091ca:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00091ce:	e6 70                	out    0x70,al
c00091d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00091d4:	e6 71                	out    0x71,al
c00091d6:	c3                   	ret    
c00091d7:	90                   	nop

c00091d8 <Computer::handleNMI()>:
c00091d8:	56                   	push   esi
c00091d9:	53                   	push   ebx
c00091da:	83 ec 10             	sub    esp,0x10
c00091dd:	e4 92                	in     al,0x92
c00091df:	89 c6                	mov    esi,eax
c00091e1:	e4 61                	in     al,0x61
c00091e3:	68 e9 3d 02 c0       	push   0xc0023de9
c00091e8:	88 c3                	mov    bl,al
c00091ea:	e8 10 3b 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00091ef:	83 c4 10             	add    esp,0x10
c00091f2:	83 e6 10             	and    esi,0x10
c00091f5:	75 0d                	jne    c0009204 <Computer::handleNMI()+0x2c>
c00091f7:	f6 c3 40             	test   bl,0x40
c00091fa:	75 1d                	jne    c0009219 <Computer::handleNMI()+0x41>
c00091fc:	84 db                	test   bl,bl
c00091fe:	78 2d                	js     c000922d <Computer::handleNMI()+0x55>
c0009200:	58                   	pop    eax
c0009201:	5b                   	pop    ebx
c0009202:	5e                   	pop    esi
c0009203:	c3                   	ret    
c0009204:	83 ec 0c             	sub    esp,0xc
c0009207:	68 fa 3d 02 c0       	push   0xc0023dfa
c000920c:	e8 de b6 00 00       	call   c00148ef <Krnl::panic(char const*)>
c0009211:	83 c4 10             	add    esp,0x10
c0009214:	f6 c3 40             	test   bl,0x40
c0009217:	74 e3                	je     c00091fc <Computer::handleNMI()+0x24>
c0009219:	83 ec 0c             	sub    esp,0xc
c000921c:	68 07 3e 02 c0       	push   0xc0023e07
c0009221:	e8 c9 b6 00 00       	call   c00148ef <Krnl::panic(char const*)>
c0009226:	83 c4 10             	add    esp,0x10
c0009229:	84 db                	test   bl,bl
c000922b:	79 d3                	jns    c0009200 <Computer::handleNMI()+0x28>
c000922d:	c7 44 24 10 11 3e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023e11
c0009235:	5a                   	pop    edx
c0009236:	5b                   	pop    ebx
c0009237:	5e                   	pop    esi
c0009238:	e9 b2 b6 00 00       	jmp    c00148ef <Krnl::panic(char const*)>
c000923d:	90                   	nop

c000923e <Computer::setDiskActivityLight(int, bool)>:
c000923e:	56                   	push   esi
c000923f:	53                   	push   ebx
c0009240:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009244:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009249:	77 1b                	ja     c0009266 <Computer::setDiskActivityLight(int, bool)+0x28>
c000924b:	e4 92                	in     al,0x92
c000924d:	bb 40 00 00 00       	mov    ebx,0x40
c0009252:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0009256:	89 da                	mov    edx,ebx
c0009258:	d3 e2                	shl    edx,cl
c000925a:	89 f1                	mov    ecx,esi
c000925c:	f7 d2                	not    edx
c000925e:	d3 e3                	shl    ebx,cl
c0009260:	21 d0                	and    eax,edx
c0009262:	09 d8                	or     eax,ebx
c0009264:	e6 92                	out    0x92,al
c0009266:	5b                   	pop    ebx
c0009267:	5e                   	pop    esi
c0009268:	c3                   	ret    
c0009269:	90                   	nop

c000926a <GDTEntry::setBase(unsigned int)>:
c000926a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000926e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009272:	89 c1                	mov    ecx,eax
c0009274:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0009278:	c1 e9 10             	shr    ecx,0x10
c000927b:	c1 e8 18             	shr    eax,0x18
c000927e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009281:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0009284:	c3                   	ret    
c0009285:	90                   	nop

c0009286 <GDTEntry::setLimit(unsigned int)>:
c0009286:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000928a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000928e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009291:	66 89 01             	mov    WORD PTR [ecx],ax
c0009294:	83 e2 f0             	and    edx,0xfffffff0
c0009297:	c1 e8 10             	shr    eax,0x10
c000929a:	83 e0 0f             	and    eax,0xf
c000929d:	09 d0                	or     eax,edx
c000929f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00092a2:	c3                   	ret    
c00092a3:	90                   	nop

c00092a4 <GDT::GDT()>:
c00092a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092a8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00092ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00092b8:	90                   	nop
c00092b9:	c3                   	ret    

c00092ba <GDT::addEntry(GDTEntry)>:
c00092ba:	53                   	push   ebx
c00092bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00092bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00092c3:	8b 02                	mov    eax,DWORD PTR [edx]
c00092c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00092c9:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00092cd:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00092d1:	8d 48 01             	lea    ecx,[eax+0x1]
c00092d4:	c1 e0 03             	shl    eax,0x3
c00092d7:	89 0a                	mov    DWORD PTR [edx],ecx
c00092d9:	5b                   	pop    ebx
c00092da:	c3                   	ret    
c00092db:	90                   	nop

c00092dc <GDT::getNumberOfEntries()>:
c00092dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00092e2:	c3                   	ret    
c00092e3:	90                   	nop

c00092e4 <GDT::flush()>:
c00092e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092e8:	8b 10                	mov    edx,DWORD PTR [eax]
c00092ea:	83 c0 04             	add    eax,0x4
c00092ed:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00092f4:	a3 f2 7e 02 c0       	mov    ds:0xc0027ef2,eax
c00092f9:	66 89 15 f0 7e 02 c0 	mov    WORD PTR ds:0xc0027ef0,dx
c0009300:	e9 80 70 ff ff       	jmp    c0000385 <loadGDT>
c0009305:	90                   	nop

c0009306 <GDT::setup()>:
c0009306:	55                   	push   ebp
c0009307:	57                   	push   edi
c0009308:	56                   	push   esi
c0009309:	53                   	push   ebx
c000930a:	83 ec 3c             	sub    esp,0x3c
c000930d:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0009311:	6a 00                	push   0x0
c0009313:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0009317:	53                   	push   ebx
c0009318:	e8 4d ff ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c000931d:	6a 00                	push   0x0
c000931f:	53                   	push   ebx
c0009320:	e8 61 ff ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c0009325:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000932d:	6a 00                	push   0x0
c000932f:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0009333:	53                   	push   ebx
c0009334:	e8 31 ff ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c0009339:	68 ff ff ff 00       	push   0xffffff
c000933e:	53                   	push   ebx
c000933f:	e8 42 ff ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c0009344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009348:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000934d:	0d 00 9a c0 00       	or     eax,0xc09a00
c0009352:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009356:	83 c4 20             	add    esp,0x20
c0009359:	6a 00                	push   0x0
c000935b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000935f:	53                   	push   ebx
c0009360:	e8 05 ff ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c0009365:	68 ff ff ff 00       	push   0xffffff
c000936a:	53                   	push   ebx
c000936b:	e8 16 ff ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c0009370:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0009374:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009378:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000937c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009380:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009384:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009389:	0d 00 92 c0 00       	or     eax,0xc09200
c000938e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009392:	89 d8                	mov    eax,ebx
c0009394:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009398:	80 cc 60             	or     ah,0x60
c000939b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000939f:	83 c4 0c             	add    esp,0xc
c00093a2:	89 f8                	mov    eax,edi
c00093a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00093a8:	80 cc 60             	or     ah,0x60
c00093ab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00093af:	89 c7                	mov    edi,eax
c00093b1:	55                   	push   ebp
c00093b2:	e8 03 ff ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093b7:	83 c4 0c             	add    esp,0xc
c00093ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00093be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00093c2:	55                   	push   ebp
c00093c3:	e8 f2 fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093c8:	83 c4 0c             	add    esp,0xc
c00093cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00093cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00093d3:	55                   	push   ebp
c00093d4:	e8 e1 fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093d9:	83 c4 0c             	add    esp,0xc
c00093dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00093e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00093e4:	53                   	push   ebx
c00093e5:	51                   	push   ecx
c00093e6:	55                   	push   ebp
c00093e7:	e8 ce fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093ec:	83 c4 0c             	add    esp,0xc
c00093ef:	57                   	push   edi
c00093f0:	56                   	push   esi
c00093f1:	55                   	push   ebp
c00093f2:	e8 c3 fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093f7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093fa:	e8 e5 fe ff ff       	call   c00092e4 <GDT::flush()>
c00093ff:	83 c4 4c             	add    esp,0x4c
c0009402:	5b                   	pop    ebx
c0009403:	5e                   	pop    esi
c0009404:	5f                   	pop    edi
c0009405:	5d                   	pop    ebp
c0009406:	c3                   	ret    

c0009407 <idleFunction(void*)>:
c0009407:	53                   	push   ebx
c0009408:	83 ec 08             	sub    esp,0x8
c000940b:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0009410:	48                   	dec    eax
c0009411:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0009416:	75 01                	jne    c0009419 <idleFunction(void*)+0x12>
c0009418:	fb                   	sti    
c0009419:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000941e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0009424:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000942b:	74 3c                	je     c0009469 <idleFunction(void*)+0x62>
c000942d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0009434:	74 33                	je     c0009469 <idleFunction(void*)+0x62>
c0009436:	31 db                	xor    ebx,ebx
c0009438:	52                   	push   edx
c0009439:	52                   	push   edx
c000943a:	68 e1 00 00 00       	push   0xe1
c000943f:	50                   	push   eax
c0009440:	e8 e5 fa ff ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c0009445:	53                   	push   ebx
c0009446:	83 e0 02             	and    eax,0x2
c0009449:	50                   	push   eax
c000944a:	68 e1 00 00 00       	push   0xe1
c000944f:	ff 35 e8 7e 02 c0    	push   DWORD PTR ds:0xc0027ee8
c0009455:	e8 fc fa ff ff       	call   c0008f56 <Computer::wrmsr(unsigned int, unsigned long long)>
c000945a:	83 c4 20             	add    esp,0x20
c000945d:	e8 52 6d ff ff       	call   c00001b4 <doTPAUSE>
c0009462:	e8 bf 94 01 00       	call   c0022926 <idleCommon()>
c0009467:	eb f4                	jmp    c000945d <idleFunction(void*)+0x56>
c0009469:	fb                   	sti    
c000946a:	f4                   	hlt    
c000946b:	e8 b6 94 01 00       	call   c0022926 <idleCommon()>
c0009470:	eb f7                	jmp    c0009469 <idleFunction(void*)+0x62>
c0009472:	66 90                	xchg   ax,ax

c0009474 <IDTEntry::IDTEntry(bool)>:
c0009474:	83 ec 04             	sub    esp,0x4
c0009477:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000947b:	88 04 24             	mov    BYTE PTR [esp],al
c000947e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009482:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0009488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000948c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009494:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009497:	83 e2 f0             	and    edx,0xfffffff0
c000949a:	83 ca 0e             	or     edx,0xe
c000949d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094a4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094a7:	83 e2 ef             	and    edx,0xffffffef
c00094aa:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094ad:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00094b1:	74 05                	je     c00094b8 <IDTEntry::IDTEntry(bool)+0x44>
c00094b3:	b2 03                	mov    dl,0x3
c00094b5:	eb 05                	jmp    c00094bc <IDTEntry::IDTEntry(bool)+0x48>
c00094b7:	90                   	nop
c00094b8:	b2 00                	mov    dl,0x0
c00094ba:	66 90                	xchg   ax,ax
c00094bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094c0:	83 e2 03             	and    edx,0x3
c00094c3:	88 d1                	mov    cl,dl
c00094c5:	c1 e1 05             	shl    ecx,0x5
c00094c8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094cb:	83 e2 9f             	and    edx,0xffffff9f
c00094ce:	09 ca                	or     edx,ecx
c00094d0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094d7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094da:	83 ca 80             	or     edx,0xffffff80
c00094dd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094e0:	90                   	nop
c00094e1:	83 c4 04             	add    esp,0x4
c00094e4:	c3                   	ret    
c00094e5:	90                   	nop

c00094e6 <IDTEntry::setOffset(unsigned int)>:
c00094e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00094ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094ee:	66 89 02             	mov    WORD PTR [edx],ax
c00094f1:	c1 e8 10             	shr    eax,0x10
c00094f4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00094f8:	c3                   	ret    
c00094f9:	90                   	nop
c00094fa:	66 90                	xchg   ax,ax

c00094fc <IDT::IDT()>:
c00094fc:	90                   	nop
c00094fd:	c3                   	ret    

c00094fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00094fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009502:	83 c0 30             	add    eax,0x30
c0009505:	c3                   	ret    

c0009506 <IDT::addEntry(IDTEntry, int)>:
c0009506:	53                   	push   ebx
c0009507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000950b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000950f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009513:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009517:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000951a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000951e:	5b                   	pop    ebx
c000951f:	c3                   	ret    

c0009520 <IDT::addEntry(int, void (*)(), bool)>:
c0009520:	53                   	push   ebx
c0009521:	83 ec 10             	sub    esp,0x10
c0009524:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0009529:	50                   	push   eax
c000952a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000952e:	53                   	push   ebx
c000952f:	e8 40 ff ff ff       	call   c0009474 <IDTEntry::IDTEntry(bool)>
c0009534:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009538:	53                   	push   ebx
c0009539:	e8 a8 ff ff ff       	call   c00094e6 <IDTEntry::setOffset(unsigned int)>
c000953e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009542:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009546:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000954a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000954e:	e8 b3 ff ff ff       	call   c0009506 <IDT::addEntry(IDTEntry, int)>
c0009553:	83 c4 30             	add    esp,0x30
c0009556:	5b                   	pop    ebx
c0009557:	c3                   	ret    

c0009558 <IDT::flush()>:
c0009558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000955c:	66 c7 05 f8 7e 02 c0 ff 07 	mov    WORD PTR ds:0xc0027ef8,0x7ff
c0009565:	a3 fa 7e 02 c0       	mov    ds:0xc0027efa,eax
c000956a:	0f 01 1d f8 7e 02 c0 	lidtd  ds:0xc0027ef8
c0009571:	c3                   	ret    

c0009572 <IDT::setup()>:
c0009572:	57                   	push   edi
c0009573:	56                   	push   esi
c0009574:	53                   	push   ebx
c0009575:	83 ec 10             	sub    esp,0x10
c0009578:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000957c:	6a 00                	push   0x0
c000957e:	68 a5 03 00 c0       	push   0xc00003a5
c0009583:	6a 00                	push   0x0
c0009585:	53                   	push   ebx
c0009586:	e8 95 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000958b:	6a 00                	push   0x0
c000958d:	68 b5 03 00 c0       	push   0xc00003b5
c0009592:	6a 01                	push   0x1
c0009594:	53                   	push   ebx
c0009595:	e8 86 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000959a:	83 c4 20             	add    esp,0x20
c000959d:	6a 00                	push   0x0
c000959f:	68 bf 03 00 c0       	push   0xc00003bf
c00095a4:	6a 02                	push   0x2
c00095a6:	53                   	push   ebx
c00095a7:	e8 74 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095ac:	6a 00                	push   0x0
c00095ae:	68 c9 03 00 c0       	push   0xc00003c9
c00095b3:	6a 03                	push   0x3
c00095b5:	53                   	push   ebx
c00095b6:	e8 65 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095bb:	83 c4 20             	add    esp,0x20
c00095be:	6a 00                	push   0x0
c00095c0:	68 d3 03 00 c0       	push   0xc00003d3
c00095c5:	6a 04                	push   0x4
c00095c7:	53                   	push   ebx
c00095c8:	e8 53 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095cd:	6a 00                	push   0x0
c00095cf:	68 dd 03 00 c0       	push   0xc00003dd
c00095d4:	6a 05                	push   0x5
c00095d6:	53                   	push   ebx
c00095d7:	e8 44 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095dc:	83 c4 20             	add    esp,0x20
c00095df:	6a 00                	push   0x0
c00095e1:	68 e7 03 00 c0       	push   0xc00003e7
c00095e6:	6a 06                	push   0x6
c00095e8:	53                   	push   ebx
c00095e9:	e8 32 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095ee:	6a 00                	push   0x0
c00095f0:	68 f1 03 00 c0       	push   0xc00003f1
c00095f5:	6a 07                	push   0x7
c00095f7:	53                   	push   ebx
c00095f8:	e8 23 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095fd:	83 c4 20             	add    esp,0x20
c0009600:	6a 00                	push   0x0
c0009602:	68 fb 03 00 c0       	push   0xc00003fb
c0009607:	6a 08                	push   0x8
c0009609:	53                   	push   ebx
c000960a:	e8 11 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000960f:	6a 00                	push   0x0
c0009611:	68 03 04 00 c0       	push   0xc0000403
c0009616:	6a 09                	push   0x9
c0009618:	53                   	push   ebx
c0009619:	e8 02 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000961e:	83 c4 20             	add    esp,0x20
c0009621:	6a 00                	push   0x0
c0009623:	68 0d 04 00 c0       	push   0xc000040d
c0009628:	6a 0a                	push   0xa
c000962a:	53                   	push   ebx
c000962b:	e8 f0 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009630:	6a 00                	push   0x0
c0009632:	68 15 04 00 c0       	push   0xc0000415
c0009637:	6a 0b                	push   0xb
c0009639:	53                   	push   ebx
c000963a:	e8 e1 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000963f:	83 c4 20             	add    esp,0x20
c0009642:	6a 00                	push   0x0
c0009644:	68 1d 04 00 c0       	push   0xc000041d
c0009649:	6a 0c                	push   0xc
c000964b:	53                   	push   ebx
c000964c:	e8 cf fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009651:	6a 00                	push   0x0
c0009653:	68 25 04 00 c0       	push   0xc0000425
c0009658:	6a 0d                	push   0xd
c000965a:	53                   	push   ebx
c000965b:	e8 c0 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009660:	83 c4 20             	add    esp,0x20
c0009663:	6a 00                	push   0x0
c0009665:	68 2d 04 00 c0       	push   0xc000042d
c000966a:	6a 0e                	push   0xe
c000966c:	53                   	push   ebx
c000966d:	e8 ae fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009672:	6a 00                	push   0x0
c0009674:	68 35 04 00 c0       	push   0xc0000435
c0009679:	6a 0f                	push   0xf
c000967b:	53                   	push   ebx
c000967c:	e8 9f fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009681:	83 c4 20             	add    esp,0x20
c0009684:	6a 00                	push   0x0
c0009686:	68 3f 04 00 c0       	push   0xc000043f
c000968b:	6a 10                	push   0x10
c000968d:	53                   	push   ebx
c000968e:	e8 8d fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009693:	6a 00                	push   0x0
c0009695:	68 49 04 00 c0       	push   0xc0000449
c000969a:	6a 11                	push   0x11
c000969c:	53                   	push   ebx
c000969d:	e8 7e fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096a2:	83 c4 20             	add    esp,0x20
c00096a5:	6a 00                	push   0x0
c00096a7:	68 53 04 00 c0       	push   0xc0000453
c00096ac:	6a 12                	push   0x12
c00096ae:	53                   	push   ebx
c00096af:	e8 6c fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096b4:	6a 01                	push   0x1
c00096b6:	68 ed 04 00 c0       	push   0xc00004ed
c00096bb:	6a 60                	push   0x60
c00096bd:	53                   	push   ebx
c00096be:	e8 5d fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096c3:	83 c4 20             	add    esp,0x20
c00096c6:	6a 00                	push   0x0
c00096c8:	68 f4 04 00 c0       	push   0xc00004f4
c00096cd:	6a 20                	push   0x20
c00096cf:	53                   	push   ebx
c00096d0:	e8 4b fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096d5:	6a 00                	push   0x0
c00096d7:	68 df 04 00 c0       	push   0xc00004df
c00096dc:	6a 21                	push   0x21
c00096de:	53                   	push   ebx
c00096df:	e8 3c fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096e4:	83 c4 20             	add    esp,0x20
c00096e7:	6a 00                	push   0x0
c00096e9:	68 e6 04 00 c0       	push   0xc00004e6
c00096ee:	6a 22                	push   0x22
c00096f0:	53                   	push   ebx
c00096f1:	e8 2a fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096f6:	6a 00                	push   0x0
c00096f8:	68 5d 04 00 c0       	push   0xc000045d
c00096fd:	6a 23                	push   0x23
c00096ff:	53                   	push   ebx
c0009700:	e8 1b fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009705:	83 c4 20             	add    esp,0x20
c0009708:	6a 00                	push   0x0
c000970a:	68 67 04 00 c0       	push   0xc0000467
c000970f:	6a 24                	push   0x24
c0009711:	53                   	push   ebx
c0009712:	e8 09 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009717:	6a 00                	push   0x0
c0009719:	68 71 04 00 c0       	push   0xc0000471
c000971e:	6a 25                	push   0x25
c0009720:	53                   	push   ebx
c0009721:	e8 fa fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009726:	83 c4 20             	add    esp,0x20
c0009729:	6a 00                	push   0x0
c000972b:	68 7b 04 00 c0       	push   0xc000047b
c0009730:	6a 26                	push   0x26
c0009732:	53                   	push   ebx
c0009733:	e8 e8 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009738:	6a 00                	push   0x0
c000973a:	68 85 04 00 c0       	push   0xc0000485
c000973f:	6a 27                	push   0x27
c0009741:	53                   	push   ebx
c0009742:	e8 d9 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009747:	83 c4 20             	add    esp,0x20
c000974a:	6a 00                	push   0x0
c000974c:	68 8f 04 00 c0       	push   0xc000048f
c0009751:	6a 28                	push   0x28
c0009753:	53                   	push   ebx
c0009754:	e8 c7 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009759:	6a 00                	push   0x0
c000975b:	68 99 04 00 c0       	push   0xc0000499
c0009760:	6a 29                	push   0x29
c0009762:	53                   	push   ebx
c0009763:	e8 b8 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009768:	83 c4 20             	add    esp,0x20
c000976b:	6a 00                	push   0x0
c000976d:	68 a3 04 00 c0       	push   0xc00004a3
c0009772:	6a 2a                	push   0x2a
c0009774:	53                   	push   ebx
c0009775:	e8 a6 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000977a:	6a 00                	push   0x0
c000977c:	68 ad 04 00 c0       	push   0xc00004ad
c0009781:	6a 2b                	push   0x2b
c0009783:	53                   	push   ebx
c0009784:	e8 97 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009789:	83 c4 20             	add    esp,0x20
c000978c:	6a 00                	push   0x0
c000978e:	68 b7 04 00 c0       	push   0xc00004b7
c0009793:	6a 2c                	push   0x2c
c0009795:	53                   	push   ebx
c0009796:	e8 85 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000979b:	6a 00                	push   0x0
c000979d:	68 c1 04 00 c0       	push   0xc00004c1
c00097a2:	6a 2d                	push   0x2d
c00097a4:	53                   	push   ebx
c00097a5:	e8 76 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097aa:	83 c4 20             	add    esp,0x20
c00097ad:	6a 00                	push   0x0
c00097af:	68 cb 04 00 c0       	push   0xc00004cb
c00097b4:	6a 2e                	push   0x2e
c00097b6:	53                   	push   ebx
c00097b7:	e8 64 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097bc:	6a 00                	push   0x0
c00097be:	68 d5 04 00 c0       	push   0xc00004d5
c00097c3:	6a 2f                	push   0x2f
c00097c5:	53                   	push   ebx
c00097c6:	e8 55 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097cb:	83 c4 20             	add    esp,0x20
c00097ce:	6a 00                	push   0x0
c00097d0:	68 2b 05 00 c0       	push   0xc000052b
c00097d5:	6a 30                	push   0x30
c00097d7:	53                   	push   ebx
c00097d8:	e8 43 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097dd:	6a 00                	push   0x0
c00097df:	68 35 05 00 c0       	push   0xc0000535
c00097e4:	6a 31                	push   0x31
c00097e6:	53                   	push   ebx
c00097e7:	e8 34 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097ec:	83 c4 20             	add    esp,0x20
c00097ef:	6a 00                	push   0x0
c00097f1:	68 3f 05 00 c0       	push   0xc000053f
c00097f6:	6a 32                	push   0x32
c00097f8:	53                   	push   ebx
c00097f9:	e8 22 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097fe:	6a 00                	push   0x0
c0009800:	68 49 05 00 c0       	push   0xc0000549
c0009805:	6a 33                	push   0x33
c0009807:	53                   	push   ebx
c0009808:	e8 13 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000980d:	83 c4 20             	add    esp,0x20
c0009810:	6a 00                	push   0x0
c0009812:	68 53 05 00 c0       	push   0xc0000553
c0009817:	6a 34                	push   0x34
c0009819:	53                   	push   ebx
c000981a:	e8 01 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000981f:	6a 00                	push   0x0
c0009821:	68 5d 05 00 c0       	push   0xc000055d
c0009826:	6a 35                	push   0x35
c0009828:	53                   	push   ebx
c0009829:	e8 f2 fc ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000982e:	83 c4 20             	add    esp,0x20
c0009831:	6a 00                	push   0x0
c0009833:	68 67 05 00 c0       	push   0xc0000567
c0009838:	6a 36                	push   0x36
c000983a:	53                   	push   ebx
c000983b:	e8 e0 fc ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009840:	6a 00                	push   0x0
c0009842:	68 71 05 00 c0       	push   0xc0000571
c0009847:	6a 37                	push   0x37
c0009849:	53                   	push   ebx
c000984a:	e8 d1 fc ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000984f:	83 c4 1c             	add    esp,0x1c
c0009852:	6a 03                	push   0x3
c0009854:	6a 02                	push   0x2
c0009856:	ff 35 10 80 02 c0    	push   DWORD PTR ds:0xc0028010
c000985c:	e8 21 29 00 00       	call   c000c182 <VAS::allocatePages(int, int)>
c0009861:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009868:	89 c6                	mov    esi,eax
c000986a:	e8 a0 01 00 00       	call   c0009a0f <malloc>
c000986f:	81 c6 00 20 00 00    	add    esi,0x2000
c0009875:	89 04 24             	mov    DWORD PTR [esp],eax
c0009878:	89 c7                	mov    edi,eax
c000987a:	e8 9d 1a 00 00       	call   c000b31c <TSS::TSS()>
c000987f:	83 c4 0c             	add    esp,0xc
c0009882:	68 fb 03 00 c0       	push   0xc00003fb
c0009887:	56                   	push   esi
c0009888:	57                   	push   edi
c0009889:	e8 d2 1a 00 00       	call   c000b360 <TSS::setup(unsigned long, unsigned long)>
c000988e:	89 c6                	mov    esi,eax
c0009890:	58                   	pop    eax
c0009891:	5a                   	pop    edx
c0009892:	6a 00                	push   0x0
c0009894:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009898:	50                   	push   eax
c0009899:	e8 d6 fb ff ff       	call   c0009474 <IDTEntry::IDTEntry(bool)>
c000989e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00098a2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00098a7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00098ae:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00098b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00098b8:	80 ce 05             	or     dh,0x5
c00098bb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00098be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00098c6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00098c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00098cc:	e8 87 fc ff ff       	call   c0009558 <IDT::flush()>
c00098d1:	83 c4 20             	add    esp,0x20
c00098d4:	5b                   	pop    ebx
c00098d5:	5e                   	pop    esi
c00098d6:	5f                   	pop    edi
c00098d7:	c3                   	ret    

c00098d8 <sbrk>:
c00098d8:	55                   	push   ebp
c00098d9:	57                   	push   edi
c00098da:	56                   	push   esi
c00098db:	53                   	push   ebx
c00098dc:	83 ec 24             	sub    esp,0x24
c00098df:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00098e3:	53                   	push   ebx
c00098e4:	68 18 3f 02 c0       	push   0xc0023f18
c00098e9:	e8 11 34 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00098ee:	83 c4 10             	add    esp,0x10
c00098f1:	85 db                	test   ebx,ebx
c00098f3:	74 5f                	je     c0009954 <sbrk+0x7c>
c00098f5:	78 64                	js     c000995b <sbrk+0x83>
c00098f7:	a1 48 71 02 c0       	mov    eax,ds:0xc0027148
c00098fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009900:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009906:	89 dd                	mov    ebp,ebx
c0009908:	78 69                	js     c0009973 <sbrk+0x9b>
c000990a:	c1 fd 0c             	sar    ebp,0xc
c000990d:	bb 00 00 00 00       	mov    ebx,0x0
c0009912:	8b 35 10 80 02 c0    	mov    esi,DWORD PTR ds:0xc0028010
c0009918:	8b 3d 48 71 02 c0    	mov    edi,DWORD PTR ds:0xc0027148
c000991e:	e8 a3 07 00 00       	call   c000a0c6 <Phys::allocatePage()>
c0009923:	68 01 04 00 00       	push   0x401
c0009928:	57                   	push   edi
c0009929:	50                   	push   eax
c000992a:	56                   	push   esi
c000992b:	e8 50 27 00 00       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009930:	81 05 48 71 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0027148,0x1000
c000993a:	43                   	inc    ebx
c000993b:	83 c4 10             	add    esp,0x10
c000993e:	39 dd                	cmp    ebp,ebx
c0009940:	75 d0                	jne    c0009912 <sbrk+0x3a>
c0009942:	0f 20 d8             	mov    eax,cr3
c0009945:	0f 22 d8             	mov    cr3,eax
c0009948:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000994c:	83 c4 1c             	add    esp,0x1c
c000994f:	5b                   	pop    ebx
c0009950:	5e                   	pop    esi
c0009951:	5f                   	pop    edi
c0009952:	5d                   	pop    ebp
c0009953:	c3                   	ret    
c0009954:	a1 48 71 02 c0       	mov    eax,ds:0xc0027148
c0009959:	eb f1                	jmp    c000994c <sbrk+0x74>
c000995b:	83 ec 08             	sub    esp,0x8
c000995e:	53                   	push   ebx
c000995f:	68 44 3f 02 c0       	push   0xc0023f44
c0009964:	e8 96 33 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009969:	83 c4 10             	add    esp,0x10
c000996c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009971:	eb d9                	jmp    c000994c <sbrk+0x74>
c0009973:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009979:	eb 8f                	jmp    c000990a <sbrk+0x32>

c000997b <mmap>:
c000997b:	83 ec 18             	sub    esp,0x18
c000997e:	68 36 3f 02 c0       	push   0xc0023f36
c0009983:	e8 67 af 00 00       	call   c00148ef <Krnl::panic(char const*)>
c0009988:	b8 00 00 00 00       	mov    eax,0x0
c000998d:	83 c4 1c             	add    esp,0x1c
c0009990:	c3                   	ret    

c0009991 <munmap>:
c0009991:	83 ec 18             	sub    esp,0x18
c0009994:	68 3b 3f 02 c0       	push   0xc0023f3b
c0009999:	e8 51 af 00 00       	call   c00148ef <Krnl::panic(char const*)>
c000999e:	b8 00 00 00 00       	mov    eax,0x0
c00099a3:	83 c4 1c             	add    esp,0x1c
c00099a6:	c3                   	ret    

c00099a7 <liballoc_lock()>:
c00099a7:	fa                   	cli    
c00099a8:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c00099ae:	b8 00 00 00 00       	mov    eax,0x0
c00099b3:	c3                   	ret    

c00099b4 <liballoc_unlock()>:
c00099b4:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c00099b9:	48                   	dec    eax
c00099ba:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c00099bf:	75 01                	jne    c00099c2 <liballoc_unlock()+0xe>
c00099c1:	fb                   	sti    
c00099c2:	b8 00 00 00 00       	mov    eax,0x0
c00099c7:	c3                   	ret    

c00099c8 <liballoc_alloc(int)>:
c00099c8:	83 ec 10             	sub    esp,0x10
c00099cb:	6a 01                	push   0x1
c00099cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00099d1:	ff 35 10 80 02 c0    	push   DWORD PTR ds:0xc0028010
c00099d7:	e8 a6 27 00 00       	call   c000c182 <VAS::allocatePages(int, int)>
c00099dc:	83 c4 1c             	add    esp,0x1c
c00099df:	c3                   	ret    

c00099e0 <liballoc_free(void*, int)>:
c00099e0:	83 ec 14             	sub    esp,0x14
c00099e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00099e7:	ff 35 10 80 02 c0    	push   DWORD PTR ds:0xc0028010
c00099ed:	e8 3a 24 00 00       	call   c000be2c <VAS::freeAllocatedPages(unsigned long)>
c00099f2:	b8 00 00 00 00       	mov    eax,0x0
c00099f7:	83 c4 1c             	add    esp,0x1c
c00099fa:	c3                   	ret    

c00099fb <realloc>:
c00099fb:	83 ec 14             	sub    esp,0x14
c00099fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a06:	e8 55 7b ff ff       	call   c0001560 <dlrealloc>
c0009a0b:	83 c4 1c             	add    esp,0x1c
c0009a0e:	c3                   	ret    

c0009a0f <malloc>:
c0009a0f:	83 ec 18             	sub    esp,0x18
c0009a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a16:	e8 08 76 ff ff       	call   c0001023 <dlmalloc>
c0009a1b:	83 c4 1c             	add    esp,0x1c
c0009a1e:	c3                   	ret    

c0009a1f <free>:
c0009a1f:	83 ec 18             	sub    esp,0x18
c0009a22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a26:	e8 9d 72 ff ff       	call   c0000cc8 <dlfree>
c0009a2b:	83 c4 1c             	add    esp,0x1c
c0009a2e:	c3                   	ret    

c0009a2f <rfree>:
c0009a2f:	83 ec 18             	sub    esp,0x18
c0009a32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a36:	e8 8d 72 ff ff       	call   c0000cc8 <dlfree>
c0009a3b:	83 c4 1c             	add    esp,0x1c
c0009a3e:	c3                   	ret    

c0009a3f <calloc>:
c0009a3f:	56                   	push   esi
c0009a40:	53                   	push   ebx
c0009a41:	83 ec 10             	sub    esp,0x10
c0009a44:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009a48:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009a4d:	53                   	push   ebx
c0009a4e:	e8 bc ff ff ff       	call   c0009a0f <malloc>
c0009a53:	89 c6                	mov    esi,eax
c0009a55:	83 c4 0c             	add    esp,0xc
c0009a58:	53                   	push   ebx
c0009a59:	6a 00                	push   0x0
c0009a5b:	50                   	push   eax
c0009a5c:	e8 23 6c ff ff       	call   c0000684 <memset>
c0009a61:	89 f0                	mov    eax,esi
c0009a63:	83 c4 14             	add    esp,0x14
c0009a66:	5b                   	pop    ebx
c0009a67:	5e                   	pop    esi
c0009a68:	c3                   	ret    

c0009a69 <Krnl::setBootMessage(char const*)>:
c0009a69:	57                   	push   edi
c0009a6a:	56                   	push   esi
c0009a6b:	53                   	push   ebx
c0009a6c:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009a72:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009a79:	68 9e 00 00 00       	push   0x9e
c0009a7e:	6a 00                	push   0x0
c0009a80:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009a84:	56                   	push   esi
c0009a85:	e8 fa 6b ff ff       	call   c0000684 <memset>
c0009a8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009a8d:	e8 0e 6c ff ff       	call   c00006a0 <strlen>
c0009a92:	ba 50 00 00 00       	mov    edx,0x50
c0009a97:	83 c4 10             	add    esp,0x10
c0009a9a:	29 c2                	sub    edx,eax
c0009a9c:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009aa0:	d1 ea                	shr    edx,1
c0009aa2:	84 c0                	test   al,al
c0009aa4:	74 19                	je     c0009abf <Krnl::setBootMessage(char const*)+0x56>
c0009aa6:	01 d2                	add    edx,edx
c0009aa8:	43                   	inc    ebx
c0009aa9:	01 f2                	add    edx,esi
c0009aab:	80 cc 0f             	or     ah,0xf
c0009aae:	83 c2 02             	add    edx,0x2
c0009ab1:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009ab5:	43                   	inc    ebx
c0009ab6:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009abb:	84 c0                	test   al,al
c0009abd:	75 ec                	jne    c0009aab <Krnl::setBootMessage(char const*)+0x42>
c0009abf:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009ac4:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009ac9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009acb:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009ad1:	5b                   	pop    ebx
c0009ad2:	5e                   	pop    esi
c0009ad3:	5f                   	pop    edi
c0009ad4:	c3                   	ret    

c0009ad5 <kernel_main>:
c0009ad5:	57                   	push   edi
c0009ad6:	56                   	push   esi
c0009ad7:	53                   	push   ebx
c0009ad8:	83 ec 20             	sub    esp,0x20
c0009adb:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009ae0:	a3 00 7f 02 c0       	mov    ds:0xc0027f00,eax
c0009ae5:	f6 c4 08             	test   ah,0x8
c0009ae8:	0f 85 7a 03 00 00    	jne    c0009e68 <kernel_main+0x393>
c0009aee:	31 f6                	xor    esi,esi
c0009af0:	bf f9 03 00 00       	mov    edi,0x3f9
c0009af5:	89 f0                	mov    eax,esi
c0009af7:	89 fa                	mov    edx,edi
c0009af9:	ee                   	out    dx,al
c0009afa:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009aff:	b0 80                	mov    al,0x80
c0009b01:	89 da                	mov    edx,ebx
c0009b03:	ee                   	out    dx,al
c0009b04:	b1 03                	mov    cl,0x3
c0009b06:	ba f8 03 00 00       	mov    edx,0x3f8
c0009b0b:	88 c8                	mov    al,cl
c0009b0d:	ee                   	out    dx,al
c0009b0e:	89 f0                	mov    eax,esi
c0009b10:	89 fa                	mov    edx,edi
c0009b12:	ee                   	out    dx,al
c0009b13:	88 c8                	mov    al,cl
c0009b15:	89 da                	mov    edx,ebx
c0009b17:	ee                   	out    dx,al
c0009b18:	b0 c7                	mov    al,0xc7
c0009b1a:	ba fa 03 00 00       	mov    edx,0x3fa
c0009b1f:	ee                   	out    dx,al
c0009b20:	b0 0b                	mov    al,0xb
c0009b22:	ba fc 03 00 00       	mov    edx,0x3fc
c0009b27:	ee                   	out    dx,al
c0009b28:	83 ec 0c             	sub    esp,0xc
c0009b2b:	68 74 3f 02 c0       	push   0xc0023f74
c0009b30:	e8 ca 31 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009b35:	83 c4 10             	add    esp,0x10
c0009b38:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c0009b3f:	0f 85 eb 02 00 00    	jne    c0009e30 <kernel_main+0x35b>
c0009b45:	e8 d2 0c 00 00       	call   c000a81c <installVgaTextImplementation()>
c0009b4a:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c0009b51:	0f 85 94 02 00 00    	jne    c0009deb <kernel_main+0x316>
c0009b57:	0f b6 05 60 71 02 c0 	movzx  eax,BYTE PTR ds:0xc0027160
c0009b5e:	84 c0                	test   al,al
c0009b60:	74 7b                	je     c0009bdd <kernel_main+0x108>
c0009b62:	31 db                	xor    ebx,ebx
c0009b64:	bf 0a 00 00 00       	mov    edi,0xa
c0009b69:	be 05 00 00 00       	mov    esi,0x5
c0009b6e:	31 c9                	xor    ecx,ecx
c0009b70:	eb 2a                	jmp    c0009b9c <kernel_main+0xc7>
c0009b72:	3c 0d                	cmp    al,0xd
c0009b74:	74 1a                	je     c0009b90 <kernel_main+0xbb>
c0009b76:	3c 0a                	cmp    al,0xa
c0009b78:	74 40                	je     c0009bba <kernel_main+0xe5>
c0009b7a:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009b7d:	80 cc 0e             	or     ah,0xe
c0009b80:	c1 e2 04             	shl    edx,0x4
c0009b83:	01 ca                	add    edx,ecx
c0009b85:	41                   	inc    ecx
c0009b86:	01 fa                	add    edx,edi
c0009b88:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009b90:	43                   	inc    ebx
c0009b91:	0f b6 83 60 71 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8ea0]
c0009b98:	84 c0                	test   al,al
c0009b9a:	74 32                	je     c0009bce <kernel_main+0xf9>
c0009b9c:	80 b9 96 71 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd8e6a],0xdb
c0009ba3:	75 cd                	jne    c0009b72 <kernel_main+0x9d>
c0009ba5:	0f b6 91 95 71 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd8e6b]
c0009bac:	83 e2 fe             	and    edx,0xfffffffe
c0009baf:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009bb5:	75 bb                	jne    c0009b72 <kernel_main+0x9d>
c0009bb7:	47                   	inc    edi
c0009bb8:	eb b8                	jmp    c0009b72 <kernel_main+0x9d>
c0009bba:	43                   	inc    ebx
c0009bbb:	46                   	inc    esi
c0009bbc:	31 c9                	xor    ecx,ecx
c0009bbe:	0f b6 83 60 71 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8ea0]
c0009bc5:	bf 0a 00 00 00       	mov    edi,0xa
c0009bca:	84 c0                	test   al,al
c0009bcc:	75 ce                	jne    c0009b9c <kernel_main+0xc7>
c0009bce:	8b 15 00 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f00
c0009bd4:	80 e6 08             	and    dh,0x8
c0009bd7:	0f 85 bf 00 00 00    	jne    c0009c9c <kernel_main+0x1c7>
c0009bdd:	83 ec 0c             	sub    esp,0xc
c0009be0:	68 10 40 02 c0       	push   0xc0024010
c0009be5:	e8 7f fe ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009bea:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009bef:	05 ff 0f 00 00       	add    eax,0xfff
c0009bf4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bfc:	e8 44 06 00 00       	call   c000a245 <Phys::physicalMemorySetup(unsigned int)>
c0009c01:	83 c4 10             	add    esp,0x10
c0009c04:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c0009c0b:	0f 85 a2 01 00 00    	jne    c0009db3 <kernel_main+0x2de>
c0009c11:	e8 82 1f 00 00       	call   c000bb98 <Virt::virtualMemorySetup()>
c0009c16:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c0009c1d:	0f 85 58 01 00 00    	jne    c0009d7b <kernel_main+0x2a6>
c0009c23:	83 ec 0c             	sub    esp,0xc
c0009c26:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009c2a:	56                   	push   esi
c0009c2b:	e8 24 20 00 00       	call   c000bc54 <VAS::VAS()>
c0009c30:	83 c4 10             	add    esp,0x10
c0009c33:	89 35 10 80 02 c0    	mov    DWORD PTR ds:0xc0028010,esi
c0009c39:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c0009c40:	0f 85 fd 00 00 00    	jne    c0009d43 <kernel_main+0x26e>
c0009c46:	e8 d5 63 ff ff       	call   c0000020 <callGlobalConstructors>
c0009c4b:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c0009c52:	0f 85 b3 00 00 00    	jne    c0009d0b <kernel_main+0x236>
c0009c58:	83 ec 0c             	sub    esp,0xc
c0009c5b:	68 ec 01 00 00       	push   0x1ec
c0009c60:	e8 aa fd ff ff       	call   c0009a0f <malloc>
c0009c65:	89 c3                	mov    ebx,eax
c0009c67:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c6a:	e8 51 ef ff ff       	call   c0008bc0 <Computer::Computer()>
c0009c6f:	83 c4 10             	add    esp,0x10
c0009c72:	89 1d e8 7e 02 c0    	mov    DWORD PTR ds:0xc0027ee8,ebx
c0009c78:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c0009c7f:	75 53                	jne    c0009cd4 <kernel_main+0x1ff>
c0009c81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c83:	6a 00                	push   0x0
c0009c85:	6a 00                	push   0x0
c0009c87:	6a 00                	push   0x0
c0009c89:	53                   	push   ebx
c0009c8a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009c8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0009c90:	e8 6f 22 00 00       	call   c000bf04 <VAS::~VAS()>
c0009c95:	83 c4 30             	add    esp,0x30
c0009c98:	5b                   	pop    ebx
c0009c99:	5e                   	pop    esi
c0009c9a:	5f                   	pop    edi
c0009c9b:	c3                   	ret    
c0009c9c:	83 ec 0c             	sub    esp,0xc
c0009c9f:	68 bf 3f 02 c0       	push   0xc0023fbf
c0009ca4:	e8 c0 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009ca9:	83 c4 10             	add    esp,0x10
c0009cac:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c0009cb3:	0f 85 24 ff ff ff    	jne    c0009bdd <kernel_main+0x108>
c0009cb9:	eb 04                	jmp    c0009cbf <kernel_main+0x1ea>
c0009cbb:	3c 1c                	cmp    al,0x1c
c0009cbd:	74 06                	je     c0009cc5 <kernel_main+0x1f0>
c0009cbf:	e4 60                	in     al,0x60
c0009cc1:	3c 5a                	cmp    al,0x5a
c0009cc3:	75 f6                	jne    c0009cbb <kernel_main+0x1e6>
c0009cc5:	e4 60                	in     al,0x60
c0009cc7:	3c 5a                	cmp    al,0x5a
c0009cc9:	74 fa                	je     c0009cc5 <kernel_main+0x1f0>
c0009ccb:	3c 1c                	cmp    al,0x1c
c0009ccd:	74 f6                	je     c0009cc5 <kernel_main+0x1f0>
c0009ccf:	e9 09 ff ff ff       	jmp    c0009bdd <kernel_main+0x108>
c0009cd4:	83 ec 0c             	sub    esp,0xc
c0009cd7:	68 fe 3f 02 c0       	push   0xc0023ffe
c0009cdc:	e8 88 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c0009ceb:	74 0c                	je     c0009cf9 <kernel_main+0x224>
c0009ced:	8b 1d e8 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ee8
c0009cf3:	eb 8c                	jmp    c0009c81 <kernel_main+0x1ac>
c0009cf5:	3c 1c                	cmp    al,0x1c
c0009cf7:	74 06                	je     c0009cff <kernel_main+0x22a>
c0009cf9:	e4 60                	in     al,0x60
c0009cfb:	3c 5a                	cmp    al,0x5a
c0009cfd:	75 f6                	jne    c0009cf5 <kernel_main+0x220>
c0009cff:	e4 60                	in     al,0x60
c0009d01:	3c 5a                	cmp    al,0x5a
c0009d03:	74 fa                	je     c0009cff <kernel_main+0x22a>
c0009d05:	3c 1c                	cmp    al,0x1c
c0009d07:	74 f6                	je     c0009cff <kernel_main+0x22a>
c0009d09:	eb e2                	jmp    c0009ced <kernel_main+0x218>
c0009d0b:	83 ec 0c             	sub    esp,0xc
c0009d0e:	68 eb 3f 02 c0       	push   0xc0023feb
c0009d13:	e8 51 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009d18:	83 c4 10             	add    esp,0x10
c0009d1b:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c0009d22:	0f 85 30 ff ff ff    	jne    c0009c58 <kernel_main+0x183>
c0009d28:	eb 04                	jmp    c0009d2e <kernel_main+0x259>
c0009d2a:	3c 1c                	cmp    al,0x1c
c0009d2c:	74 06                	je     c0009d34 <kernel_main+0x25f>
c0009d2e:	e4 60                	in     al,0x60
c0009d30:	3c 5a                	cmp    al,0x5a
c0009d32:	75 f6                	jne    c0009d2a <kernel_main+0x255>
c0009d34:	e4 60                	in     al,0x60
c0009d36:	3c 5a                	cmp    al,0x5a
c0009d38:	74 fa                	je     c0009d34 <kernel_main+0x25f>
c0009d3a:	3c 1c                	cmp    al,0x1c
c0009d3c:	74 f6                	je     c0009d34 <kernel_main+0x25f>
c0009d3e:	e9 15 ff ff ff       	jmp    c0009c58 <kernel_main+0x183>
c0009d43:	83 ec 0c             	sub    esp,0xc
c0009d46:	68 e1 3f 02 c0       	push   0xc0023fe1
c0009d4b:	e8 19 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009d50:	83 c4 10             	add    esp,0x10
c0009d53:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c0009d5a:	0f 85 e6 fe ff ff    	jne    c0009c46 <kernel_main+0x171>
c0009d60:	eb 04                	jmp    c0009d66 <kernel_main+0x291>
c0009d62:	3c 1c                	cmp    al,0x1c
c0009d64:	74 06                	je     c0009d6c <kernel_main+0x297>
c0009d66:	e4 60                	in     al,0x60
c0009d68:	3c 5a                	cmp    al,0x5a
c0009d6a:	75 f6                	jne    c0009d62 <kernel_main+0x28d>
c0009d6c:	e4 60                	in     al,0x60
c0009d6e:	3c 5a                	cmp    al,0x5a
c0009d70:	74 fa                	je     c0009d6c <kernel_main+0x297>
c0009d72:	3c 1c                	cmp    al,0x1c
c0009d74:	74 f6                	je     c0009d6c <kernel_main+0x297>
c0009d76:	e9 cb fe ff ff       	jmp    c0009c46 <kernel_main+0x171>
c0009d7b:	83 ec 0c             	sub    esp,0xc
c0009d7e:	68 d6 3f 02 c0       	push   0xc0023fd6
c0009d83:	e8 e1 fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009d88:	83 c4 10             	add    esp,0x10
c0009d8b:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c0009d92:	0f 85 8b fe ff ff    	jne    c0009c23 <kernel_main+0x14e>
c0009d98:	eb 04                	jmp    c0009d9e <kernel_main+0x2c9>
c0009d9a:	3c 1c                	cmp    al,0x1c
c0009d9c:	74 06                	je     c0009da4 <kernel_main+0x2cf>
c0009d9e:	e4 60                	in     al,0x60
c0009da0:	3c 5a                	cmp    al,0x5a
c0009da2:	75 f6                	jne    c0009d9a <kernel_main+0x2c5>
c0009da4:	e4 60                	in     al,0x60
c0009da6:	3c 5a                	cmp    al,0x5a
c0009da8:	74 fa                	je     c0009da4 <kernel_main+0x2cf>
c0009daa:	3c 1c                	cmp    al,0x1c
c0009dac:	74 f6                	je     c0009da4 <kernel_main+0x2cf>
c0009dae:	e9 70 fe ff ff       	jmp    c0009c23 <kernel_main+0x14e>
c0009db3:	83 ec 0c             	sub    esp,0xc
c0009db6:	68 cb 3f 02 c0       	push   0xc0023fcb
c0009dbb:	e8 a9 fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009dc0:	83 c4 10             	add    esp,0x10
c0009dc3:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c0009dca:	0f 85 41 fe ff ff    	jne    c0009c11 <kernel_main+0x13c>
c0009dd0:	eb 04                	jmp    c0009dd6 <kernel_main+0x301>
c0009dd2:	3c 1c                	cmp    al,0x1c
c0009dd4:	74 06                	je     c0009ddc <kernel_main+0x307>
c0009dd6:	e4 60                	in     al,0x60
c0009dd8:	3c 5a                	cmp    al,0x5a
c0009dda:	75 f6                	jne    c0009dd2 <kernel_main+0x2fd>
c0009ddc:	e4 60                	in     al,0x60
c0009dde:	3c 5a                	cmp    al,0x5a
c0009de0:	74 fa                	je     c0009ddc <kernel_main+0x307>
c0009de2:	3c 1c                	cmp    al,0x1c
c0009de4:	74 f6                	je     c0009ddc <kernel_main+0x307>
c0009de6:	e9 26 fe ff ff       	jmp    c0009c11 <kernel_main+0x13c>
c0009deb:	83 ec 0c             	sub    esp,0xc
c0009dee:	68 ad 3f 02 c0       	push   0xc0023fad
c0009df3:	e8 71 fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009df8:	8b 15 00 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f00
c0009dfe:	83 c4 10             	add    esp,0x10
c0009e01:	f6 c2 80             	test   dl,0x80
c0009e04:	74 18                	je     c0009e1e <kernel_main+0x349>
c0009e06:	0f b6 05 60 71 02 c0 	movzx  eax,BYTE PTR ds:0xc0027160
c0009e0d:	84 c0                	test   al,al
c0009e0f:	0f 85 4d fd ff ff    	jne    c0009b62 <kernel_main+0x8d>
c0009e15:	e9 ba fd ff ff       	jmp    c0009bd4 <kernel_main+0xff>
c0009e1a:	3c 1c                	cmp    al,0x1c
c0009e1c:	74 06                	je     c0009e24 <kernel_main+0x34f>
c0009e1e:	e4 60                	in     al,0x60
c0009e20:	3c 5a                	cmp    al,0x5a
c0009e22:	75 f6                	jne    c0009e1a <kernel_main+0x345>
c0009e24:	e4 60                	in     al,0x60
c0009e26:	3c 5a                	cmp    al,0x5a
c0009e28:	74 fa                	je     c0009e24 <kernel_main+0x34f>
c0009e2a:	3c 1c                	cmp    al,0x1c
c0009e2c:	74 f6                	je     c0009e24 <kernel_main+0x34f>
c0009e2e:	eb d6                	jmp    c0009e06 <kernel_main+0x331>
c0009e30:	83 ec 0c             	sub    esp,0xc
c0009e33:	68 9e 3f 02 c0       	push   0xc0023f9e
c0009e38:	e8 2c fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009e3d:	83 c4 10             	add    esp,0x10
c0009e40:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c0009e47:	0f 85 f8 fc ff ff    	jne    c0009b45 <kernel_main+0x70>
c0009e4d:	eb 04                	jmp    c0009e53 <kernel_main+0x37e>
c0009e4f:	3c 1c                	cmp    al,0x1c
c0009e51:	74 06                	je     c0009e59 <kernel_main+0x384>
c0009e53:	e4 60                	in     al,0x60
c0009e55:	3c 5a                	cmp    al,0x5a
c0009e57:	75 f6                	jne    c0009e4f <kernel_main+0x37a>
c0009e59:	e4 60                	in     al,0x60
c0009e5b:	3c 5a                	cmp    al,0x5a
c0009e5d:	74 fa                	je     c0009e59 <kernel_main+0x384>
c0009e5f:	3c 1c                	cmp    al,0x1c
c0009e61:	74 f6                	je     c0009e59 <kernel_main+0x384>
c0009e63:	e9 dd fc ff ff       	jmp    c0009b45 <kernel_main+0x70>
c0009e68:	83 ec 0c             	sub    esp,0xc
c0009e6b:	68 8b 3f 02 c0       	push   0xc0023f8b
c0009e70:	e8 f4 fb ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009e75:	83 c4 10             	add    esp,0x10
c0009e78:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c0009e7f:	0f 85 69 fc ff ff    	jne    c0009aee <kernel_main+0x19>
c0009e85:	eb 04                	jmp    c0009e8b <kernel_main+0x3b6>
c0009e87:	3c 1c                	cmp    al,0x1c
c0009e89:	74 06                	je     c0009e91 <kernel_main+0x3bc>
c0009e8b:	e4 60                	in     al,0x60
c0009e8d:	3c 5a                	cmp    al,0x5a
c0009e8f:	75 f6                	jne    c0009e87 <kernel_main+0x3b2>
c0009e91:	e4 60                	in     al,0x60
c0009e93:	3c 5a                	cmp    al,0x5a
c0009e95:	74 fa                	je     c0009e91 <kernel_main+0x3bc>
c0009e97:	3c 1c                	cmp    al,0x1c
c0009e99:	74 f6                	je     c0009e91 <kernel_main+0x3bc>
c0009e9b:	e9 4e fc ff ff       	jmp    c0009aee <kernel_main+0x19>

c0009ea0 <Phys::allocateDMA(unsigned long)>:
c0009ea0:	55                   	push   ebp
c0009ea1:	31 ed                	xor    ebp,ebp
c0009ea3:	57                   	push   edi
c0009ea4:	56                   	push   esi
c0009ea5:	53                   	push   ebx
c0009ea6:	31 db                	xor    ebx,ebx
c0009ea8:	83 ec 28             	sub    esp,0x28
c0009eab:	68 2f 40 02 c0       	push   0xc002402f
c0009eb0:	e8 4a 2e 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009eb5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009eb9:	83 c4 10             	add    esp,0x10
c0009ebc:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0009ec2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009eca:	c1 ef 0c             	shr    edi,0xc
c0009ecd:	31 c0                	xor    eax,eax
c0009ecf:	eb 19                	jmp    c0009eea <Phys::allocateDMA(unsigned long)+0x4a>
c0009ed1:	85 c0                	test   eax,eax
c0009ed3:	75 06                	jne    c0009edb <Phys::allocateDMA(unsigned long)+0x3b>
c0009ed5:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009ed9:	89 dd                	mov    ebp,ebx
c0009edb:	8d 70 01             	lea    esi,[eax+0x1]
c0009ede:	39 f7                	cmp    edi,esi
c0009ee0:	74 3f                	je     c0009f21 <Phys::allocateDMA(unsigned long)+0x81>
c0009ee2:	89 f0                	mov    eax,esi
c0009ee4:	43                   	inc    ebx
c0009ee5:	83 fb 0f             	cmp    ebx,0xf
c0009ee8:	7f 11                	jg     c0009efb <Phys::allocateDMA(unsigned long)+0x5b>
c0009eea:	80 bb 1c 7f 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd80e4],0x0
c0009ef1:	74 de                	je     c0009ed1 <Phys::allocateDMA(unsigned long)+0x31>
c0009ef3:	31 c0                	xor    eax,eax
c0009ef5:	43                   	inc    ebx
c0009ef6:	83 fb 0f             	cmp    ebx,0xf
c0009ef9:	7e ef                	jle    c0009eea <Phys::allocateDMA(unsigned long)+0x4a>
c0009efb:	83 ec 0c             	sub    esp,0xc
c0009efe:	68 99 6d 02 c0       	push   0xc0026d99
c0009f03:	e8 f7 2d 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009f08:	c7 04 24 18 41 02 c0 	mov    DWORD PTR [esp],0xc0024118
c0009f0f:	e8 db a9 00 00       	call   c00148ef <Krnl::panic(char const*)>
c0009f14:	83 c4 10             	add    esp,0x10
c0009f17:	31 c0                	xor    eax,eax
c0009f19:	83 c4 1c             	add    esp,0x1c
c0009f1c:	5b                   	pop    ebx
c0009f1d:	5e                   	pop    esi
c0009f1e:	5f                   	pop    edi
c0009f1f:	5d                   	pop    ebp
c0009f20:	c3                   	ret    
c0009f21:	89 e9                	mov    ecx,ebp
c0009f23:	c1 f9 04             	sar    ecx,0x4
c0009f26:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009f2a:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0009f2e:	89 ca                	mov    edx,ecx
c0009f30:	4a                   	dec    edx
c0009f31:	79 03                	jns    c0009f36 <Phys::allocateDMA(unsigned long)+0x96>
c0009f33:	8d 51 0e             	lea    edx,[ecx+0xe]
c0009f36:	c1 fa 04             	sar    edx,0x4
c0009f39:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0009f3d:	74 08                	je     c0009f47 <Phys::allocateDMA(unsigned long)+0xa7>
c0009f3f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f43:	31 c0                	xor    eax,eax
c0009f45:	eb ae                	jmp    c0009ef5 <Phys::allocateDMA(unsigned long)+0x55>
c0009f47:	85 f6                	test   esi,esi
c0009f49:	74 15                	je     c0009f60 <Phys::allocateDMA(unsigned long)+0xc0>
c0009f4b:	8d 95 1c 7f 02 c0    	lea    edx,[ebp-0x3ffd80e4]
c0009f51:	8d 84 05 1d 7f 02 c0 	lea    eax,[ebp+eax*1-0x3ffd80e3]
c0009f58:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009f5b:	42                   	inc    edx
c0009f5c:	39 d0                	cmp    eax,edx
c0009f5e:	75 f8                	jne    c0009f58 <Phys::allocateDMA(unsigned long)+0xb8>
c0009f60:	83 ec 0c             	sub    esp,0xc
c0009f63:	01 3d 14 7f 02 c0    	add    DWORD PTR ds:0xc0027f14,edi
c0009f69:	68 48 40 02 c0       	push   0xc0024048
c0009f6e:	e8 8c 2d 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009f73:	83 c4 10             	add    esp,0x10
c0009f76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f7a:	85 c0                	test   eax,eax
c0009f7c:	74 23                	je     c0009fa1 <Phys::allocateDMA(unsigned long)+0x101>
c0009f7e:	83 ec 0c             	sub    esp,0xc
c0009f81:	68 77 6d 02 c0       	push   0xc0026d77
c0009f86:	e8 74 2d 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009f8b:	c7 04 24 18 41 02 c0 	mov    DWORD PTR [esp],0xc0024118
c0009f92:	e8 58 a9 00 00       	call   c00148ef <Krnl::panic(char const*)>
c0009f97:	83 c4 10             	add    esp,0x10
c0009f9a:	89 f0                	mov    eax,esi
c0009f9c:	e9 43 ff ff ff       	jmp    c0009ee4 <Phys::allocateDMA(unsigned long)+0x44>
c0009fa1:	c1 e5 0c             	shl    ebp,0xc
c0009fa4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0009faa:	e9 6a ff ff ff       	jmp    c0009f19 <Phys::allocateDMA(unsigned long)+0x79>

c0009faf <Phys::freeDMA(unsigned long, unsigned long)>:
c0009faf:	83 ec 18             	sub    esp,0x18
c0009fb2:	68 5f 40 02 c0       	push   0xc002405f
c0009fb7:	e8 43 2d 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009fbc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009fc0:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0009fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009fca:	c1 ea 0c             	shr    edx,0xc
c0009fcd:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0009fd2:	29 15 14 7f 02 c0    	sub    DWORD PTR ds:0xc0027f14,edx
c0009fd8:	c1 e8 0c             	shr    eax,0xc
c0009fdb:	83 c4 10             	add    esp,0x10
c0009fde:	85 d2                	test   edx,edx
c0009fe0:	74 0f                	je     c0009ff1 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c0009fe2:	05 1c 7f 02 c0       	add    eax,0xc0027f1c
c0009fe7:	01 c2                	add    edx,eax
c0009fe9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009fec:	40                   	inc    eax
c0009fed:	39 d0                	cmp    eax,edx
c0009fef:	75 f8                	jne    c0009fe9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0009ff1:	83 c4 0c             	add    esp,0xc
c0009ff4:	c3                   	ret    

c0009ff5 <Phys::setPageState(unsigned long, bool)>:
c0009ff5:	56                   	push   esi
c0009ff6:	ba 01 00 00 00       	mov    edx,0x1
c0009ffb:	53                   	push   ebx
c0009ffc:	8b 35 a4 72 02 c0    	mov    esi,DWORD PTR ds:0xc00272a4
c000a002:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a006:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a00a:	89 c8                	mov    eax,ecx
c000a00c:	83 e1 07             	and    ecx,0x7
c000a00f:	c1 e8 03             	shr    eax,0x3
c000a012:	d3 e3                	shl    ebx,cl
c000a014:	01 c6                	add    esi,eax
c000a016:	d3 e2                	shl    edx,cl
c000a018:	f7 d2                	not    edx
c000a01a:	20 16                	and    BYTE PTR [esi],dl
c000a01c:	03 05 a4 72 02 c0    	add    eax,DWORD PTR ds:0xc00272a4
c000a022:	08 18                	or     BYTE PTR [eax],bl
c000a024:	5b                   	pop    ebx
c000a025:	5e                   	pop    esi
c000a026:	c3                   	ret    

c000a027 <Phys::getPageState(unsigned long)>:
c000a027:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a02b:	8b 15 a4 72 02 c0    	mov    edx,DWORD PTR ds:0xc00272a4
c000a031:	89 c8                	mov    eax,ecx
c000a033:	83 e1 07             	and    ecx,0x7
c000a036:	c1 e8 03             	shr    eax,0x3
c000a039:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a03d:	d3 f8                	sar    eax,cl
c000a03f:	83 e0 01             	and    eax,0x1
c000a042:	c3                   	ret    

c000a043 <Phys::freePage(unsigned long)>:
c000a043:	53                   	push   ebx
c000a044:	83 ec 10             	sub    esp,0x10
c000a047:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a04b:	53                   	push   ebx
c000a04c:	68 75 40 02 c0       	push   0xc0024075
c000a051:	e8 a9 2c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a056:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a05c:	83 c4 10             	add    esp,0x10
c000a05f:	3d ff ff 00 00       	cmp    eax,0xffff
c000a064:	76 3d                	jbe    c000a0a3 <Phys::freePage(unsigned long)+0x60>
c000a066:	83 ec 0c             	sub    esp,0xc
c000a069:	c1 eb 0c             	shr    ebx,0xc
c000a06c:	53                   	push   ebx
c000a06d:	e8 b5 ff ff ff       	call   c000a027 <Phys::getPageState(unsigned long)>
c000a072:	83 c4 10             	add    esp,0x10
c000a075:	84 c0                	test   al,al
c000a077:	74 19                	je     c000a092 <Phys::freePage(unsigned long)+0x4f>
c000a079:	83 ec 08             	sub    esp,0x8
c000a07c:	ff 0d 14 7f 02 c0    	dec    DWORD PTR ds:0xc0027f14
c000a082:	6a 00                	push   0x0
c000a084:	53                   	push   ebx
c000a085:	e8 6b ff ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a08a:	83 c4 10             	add    esp,0x10
c000a08d:	83 c4 08             	add    esp,0x8
c000a090:	5b                   	pop    ebx
c000a091:	c3                   	ret    
c000a092:	c7 44 24 10 9f 40 02 c0 	mov    DWORD PTR [esp+0x10],0xc002409f
c000a09a:	83 c4 08             	add    esp,0x8
c000a09d:	5b                   	pop    ebx
c000a09e:	e9 4c a8 00 00       	jmp    c00148ef <Krnl::panic(char const*)>
c000a0a3:	83 ec 08             	sub    esp,0x8
c000a0a6:	53                   	push   ebx
c000a0a7:	68 88 40 02 c0       	push   0xc0024088
c000a0ac:	e8 4e 2c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a0b1:	58                   	pop    eax
c000a0b2:	5a                   	pop    edx
c000a0b3:	68 00 10 00 00       	push   0x1000
c000a0b8:	53                   	push   ebx
c000a0b9:	e8 f1 fe ff ff       	call   c0009faf <Phys::freeDMA(unsigned long, unsigned long)>
c000a0be:	83 c4 10             	add    esp,0x10
c000a0c1:	83 c4 08             	add    esp,0x8
c000a0c4:	5b                   	pop    ebx
c000a0c5:	c3                   	ret    

c000a0c6 <Phys::allocatePage()>:
c000a0c6:	56                   	push   esi
c000a0c7:	53                   	push   ebx
c000a0c8:	83 ec 14             	sub    esp,0x14
c000a0cb:	8b 35 08 7f 02 c0    	mov    esi,DWORD PTR ds:0xc0027f08
c000a0d1:	89 f3                	mov    ebx,esi
c000a0d3:	eb 0a                	jmp    c000a0df <Phys::allocatePage()+0x19>
c000a0d5:	89 1d 08 7f 02 c0    	mov    DWORD PTR ds:0xc0027f08,ebx
c000a0db:	39 de                	cmp    esi,ebx
c000a0dd:	74 24                	je     c000a103 <Phys::allocatePage()+0x3d>
c000a0df:	53                   	push   ebx
c000a0e0:	e8 42 ff ff ff       	call   c000a027 <Phys::getPageState(unsigned long)>
c000a0e5:	5a                   	pop    edx
c000a0e6:	84 c0                	test   al,al
c000a0e8:	74 69                	je     c000a153 <Phys::allocatePage()+0x8d>
c000a0ea:	43                   	inc    ebx
c000a0eb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a0f1:	75 e2                	jne    c000a0d5 <Phys::allocatePage()+0xf>
c000a0f3:	31 db                	xor    ebx,ebx
c000a0f5:	c7 05 08 7f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027f08,0x0
c000a0ff:	39 de                	cmp    esi,ebx
c000a101:	75 dc                	jne    c000a0df <Phys::allocatePage()+0x19>
c000a103:	83 ec 0c             	sub    esp,0xc
c000a106:	80 35 2c 7f 02 c0 01 	xor    BYTE PTR ds:0xc0027f2c,0x1
c000a10d:	68 40 41 02 c0       	push   0xc0024140
c000a112:	e8 e8 2b 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a117:	58                   	pop    eax
c000a118:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a11d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a120:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a126:	e8 63 28 00 00       	call   c000c98e <VAS::scanForEviction()>
c000a12b:	83 c4 10             	add    esp,0x10
c000a12e:	85 c0                	test   eax,eax
c000a130:	75 62                	jne    c000a194 <Phys::allocatePage()+0xce>
c000a132:	83 ec 0c             	sub    esp,0xc
c000a135:	68 64 41 02 c0       	push   0xc0024164
c000a13a:	e8 b0 a7 00 00       	call   c00148ef <Krnl::panic(char const*)>
c000a13f:	83 c4 10             	add    esp,0x10
c000a142:	8b 1d 08 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f08
c000a148:	53                   	push   ebx
c000a149:	e8 d9 fe ff ff       	call   c000a027 <Phys::getPageState(unsigned long)>
c000a14e:	5a                   	pop    edx
c000a14f:	84 c0                	test   al,al
c000a151:	75 97                	jne    c000a0ea <Phys::allocatePage()+0x24>
c000a153:	6a 01                	push   0x1
c000a155:	53                   	push   ebx
c000a156:	e8 9a fe ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a15b:	5a                   	pop    edx
c000a15c:	a1 14 7f 02 c0       	mov    eax,ds:0xc0027f14
c000a161:	59                   	pop    ecx
c000a162:	40                   	inc    eax
c000a163:	8b 15 08 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f08
c000a169:	a3 14 7f 02 c0       	mov    ds:0xc0027f14,eax
c000a16e:	c1 e2 0c             	shl    edx,0xc
c000a171:	52                   	push   edx
c000a172:	ff 35 18 7f 02 c0    	push   DWORD PTR ds:0xc0027f18
c000a178:	50                   	push   eax
c000a179:	68 b5 40 02 c0       	push   0xc00240b5
c000a17e:	e8 7c 2b 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a183:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000a188:	83 c4 10             	add    esp,0x10
c000a18b:	c1 e0 0c             	shl    eax,0xc
c000a18e:	83 c4 14             	add    esp,0x14
c000a191:	5b                   	pop    ebx
c000a192:	5e                   	pop    esi
c000a193:	c3                   	ret    
c000a194:	83 ec 08             	sub    esp,0x8
c000a197:	89 c2                	mov    edx,eax
c000a199:	6a 01                	push   0x1
c000a19b:	c1 ea 0c             	shr    edx,0xc
c000a19e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1a2:	52                   	push   edx
c000a1a3:	e8 4d fe ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a1a8:	83 c4 10             	add    esp,0x10
c000a1ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1af:	eb dd                	jmp    c000a18e <Phys::allocatePage()+0xc8>

c000a1b1 <Phys::allocateContiguousPages(int)>:
c000a1b1:	57                   	push   edi
c000a1b2:	56                   	push   esi
c000a1b3:	53                   	push   ebx
c000a1b4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a1b8:	fa                   	cli    
c000a1b9:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c000a1bf:	31 db                	xor    ebx,ebx
c000a1c1:	85 db                	test   ebx,ebx
c000a1c3:	75 11                	jne    c000a1d6 <Phys::allocateContiguousPages(int)+0x25>
c000a1c5:	e8 fc fe ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000a1ca:	83 fe 01             	cmp    esi,0x1
c000a1cd:	89 c7                	mov    edi,eax
c000a1cf:	74 21                	je     c000a1f2 <Phys::allocateContiguousPages(int)+0x41>
c000a1d1:	bb 01 00 00 00       	mov    ebx,0x1
c000a1d6:	e8 eb fe ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000a1db:	89 da                	mov    edx,ebx
c000a1dd:	c1 e2 0c             	shl    edx,0xc
c000a1e0:	01 fa                	add    edx,edi
c000a1e2:	39 c2                	cmp    edx,eax
c000a1e4:	74 20                	je     c000a206 <Phys::allocateContiguousPages(int)+0x55>
c000a1e6:	bb 01 00 00 00       	mov    ebx,0x1
c000a1eb:	89 c7                	mov    edi,eax
c000a1ed:	83 fe 01             	cmp    esi,0x1
c000a1f0:	75 e4                	jne    c000a1d6 <Phys::allocateContiguousPages(int)+0x25>
c000a1f2:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c000a1f7:	48                   	dec    eax
c000a1f8:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c000a1fd:	75 01                	jne    c000a200 <Phys::allocateContiguousPages(int)+0x4f>
c000a1ff:	fb                   	sti    
c000a200:	89 f8                	mov    eax,edi
c000a202:	5b                   	pop    ebx
c000a203:	5e                   	pop    esi
c000a204:	5f                   	pop    edi
c000a205:	c3                   	ret    
c000a206:	43                   	inc    ebx
c000a207:	39 f3                	cmp    ebx,esi
c000a209:	75 b6                	jne    c000a1c1 <Phys::allocateContiguousPages(int)+0x10>
c000a20b:	eb e5                	jmp    c000a1f2 <Phys::allocateContiguousPages(int)+0x41>

c000a20d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a20d:	56                   	push   esi
c000a20e:	53                   	push   ebx
c000a20f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a213:	39 1d 0c 7f 02 c0    	cmp    DWORD PTR ds:0xc0027f0c,ebx
c000a219:	73 06                	jae    c000a221 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a21b:	89 1d 0c 7f 02 c0    	mov    DWORD PTR ds:0xc0027f0c,ebx
c000a221:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a225:	c1 eb 0c             	shr    ebx,0xc
c000a228:	c1 e8 0c             	shr    eax,0xc
c000a22b:	39 d8                	cmp    eax,ebx
c000a22d:	73 13                	jae    c000a242 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a22f:	6a 00                	push   0x0
c000a231:	8d 70 01             	lea    esi,[eax+0x1]
c000a234:	50                   	push   eax
c000a235:	e8 bb fd ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a23a:	5a                   	pop    edx
c000a23b:	89 f0                	mov    eax,esi
c000a23d:	59                   	pop    ecx
c000a23e:	39 f3                	cmp    ebx,esi
c000a240:	75 ed                	jne    c000a22f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a242:	5b                   	pop    ebx
c000a243:	5e                   	pop    esi
c000a244:	c3                   	ret    

c000a245 <Phys::physicalMemorySetup(unsigned int)>:
c000a245:	55                   	push   ebp
c000a246:	57                   	push   edi
c000a247:	56                   	push   esi
c000a248:	53                   	push   ebx
c000a249:	31 db                	xor    ebx,ebx
c000a24b:	83 ec 40             	sub    esp,0x40
c000a24e:	6a 10                	push   0x10
c000a250:	6a 00                	push   0x0
c000a252:	68 1c 7f 02 c0       	push   0xc0027f1c
c000a257:	e8 28 64 ff ff       	call   c0000684 <memset>
c000a25c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a260:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a265:	05 00 10 00 00       	add    eax,0x1000
c000a26a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a26e:	5a                   	pop    edx
c000a26f:	59                   	pop    ecx
c000a270:	50                   	push   eax
c000a271:	68 d3 40 02 c0       	push   0xc00240d3
c000a276:	e8 84 2a 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	83 ec 08             	sub    esp,0x8
c000a281:	6a 01                	push   0x1
c000a283:	53                   	push   ebx
c000a284:	43                   	inc    ebx
c000a285:	e8 6b fd ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a28a:	83 c4 10             	add    esp,0x10
c000a28d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a293:	75 e9                	jne    c000a27e <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a295:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a29c:	66 85 c0             	test   ax,ax
c000a29f:	0f 84 8e 01 00 00    	je     c000a433 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a2a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a2a9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a2b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a2b5:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a2ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a2be:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a2c6:	eb 15                	jmp    c000a2dd <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a2c8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a2cc:	83 c3 18             	add    ebx,0x18
c000a2cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a2d3:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a2d7:	0f 84 66 01 00 00    	je     c000a443 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a2dd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a2e0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a2e3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a2e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2ea:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a2ee:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a2f0:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a2f3:	01 f0                	add    eax,esi
c000a2f5:	55                   	push   ebp
c000a2f6:	11 fa                	adc    edx,edi
c000a2f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2fc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a300:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a304:	56                   	push   esi
c000a305:	68 94 41 02 c0       	push   0xc0024194
c000a30a:	e8 f0 29 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a30f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a313:	83 c4 10             	add    esp,0x10
c000a316:	09 f8                	or     eax,edi
c000a318:	0f 85 25 01 00 00    	jne    c000a443 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a31e:	4d                   	dec    ebp
c000a31f:	75 a7                	jne    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a321:	ba 00 00 08 00       	mov    edx,0x80000
c000a326:	89 c1                	mov    ecx,eax
c000a328:	39 f2                	cmp    edx,esi
c000a32a:	19 f9                	sbb    ecx,edi
c000a32c:	0f 82 a7 00 00 00    	jb     c000a3d9 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a332:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a336:	89 c1                	mov    ecx,eax
c000a338:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a33c:	0f 83 97 00 00 00    	jae    c000a3d9 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a342:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a347:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a34b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a34f:	39 fa                	cmp    edx,edi
c000a351:	19 e8                	sbb    eax,ebp
c000a353:	0f 82 a5 01 00 00    	jb     c000a4fe <Phys::physicalMemorySetup(unsigned int)+0x2b9>
c000a359:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a35d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a361:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a367:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a36c:	83 d5 ff             	adc    ebp,0xffffffff
c000a36f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a373:	31 c0                	xor    eax,eax
c000a375:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a379:	39 fa                	cmp    edx,edi
c000a37b:	89 c1                	mov    ecx,eax
c000a37d:	19 e9                	sbb    ecx,ebp
c000a37f:	0f 83 43 ff ff ff    	jae    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a385:	be 00 00 08 00       	mov    esi,0x80000
c000a38a:	57                   	push   edi
c000a38b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a38f:	57                   	push   edi
c000a390:	56                   	push   esi
c000a391:	68 b8 41 02 c0       	push   0xc00241b8
c000a396:	e8 64 29 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a39b:	5d                   	pop    ebp
c000a39c:	58                   	pop    eax
c000a39d:	57                   	push   edi
c000a39e:	56                   	push   esi
c000a39f:	e8 69 fe ff ff       	call   c000a20d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a3a4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a3a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a3ac:	83 c4 0c             	add    esp,0xc
c000a3af:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a3b3:	03 05 18 7f 02 c0    	add    eax,DWORD PTR ds:0xc0027f18
c000a3b9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a3c0:	a3 18 7f 02 c0       	mov    ds:0xc0027f18,eax
c000a3c5:	52                   	push   edx
c000a3c6:	50                   	push   eax
c000a3c7:	68 f9 40 02 c0       	push   0xc00240f9
c000a3cc:	e8 2e 29 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a3d1:	83 c4 10             	add    esp,0x10
c000a3d4:	e9 ef fe ff ff       	jmp    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a3d9:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a3dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a3e1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a3e5:	39 ea                	cmp    edx,ebp
c000a3e7:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a3eb:	0f 82 d7 fe ff ff    	jb     c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a3f1:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a3f6:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a3fa:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a3fe:	0f 83 c4 fe ff ff    	jae    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a404:	39 ee                	cmp    esi,ebp
c000a406:	89 f8                	mov    eax,edi
c000a408:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a40c:	0f 83 78 ff ff ff    	jae    c000a38a <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a412:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a416:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a41a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a41e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a422:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a426:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a42a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a42e:	e9 57 ff ff ff       	jmp    c000a38a <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a433:	83 ec 0c             	sub    esp,0xc
c000a436:	68 eb 40 02 c0       	push   0xc00240eb
c000a43b:	e8 af a4 00 00       	call   c00148ef <Krnl::panic(char const*)>
c000a440:	83 c4 10             	add    esp,0x10
c000a443:	83 ec 08             	sub    esp,0x8
c000a446:	6a 00                	push   0x0
c000a448:	6a 05                	push   0x5
c000a44a:	e8 a6 fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a44f:	58                   	pop    eax
c000a450:	5a                   	pop    edx
c000a451:	6a 00                	push   0x0
c000a453:	6a 06                	push   0x6
c000a455:	e8 9b fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a45a:	59                   	pop    ecx
c000a45b:	5b                   	pop    ebx
c000a45c:	bb 60 00 00 00       	mov    ebx,0x60
c000a461:	6a 00                	push   0x0
c000a463:	6a 07                	push   0x7
c000a465:	e8 8b fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a46a:	83 05 18 7f 02 c0 03 	add    DWORD PTR ds:0xc0027f18,0x3
c000a471:	83 c4 10             	add    esp,0x10
c000a474:	83 ec 08             	sub    esp,0x8
c000a477:	6a 00                	push   0x0
c000a479:	53                   	push   ebx
c000a47a:	43                   	inc    ebx
c000a47b:	e8 75 fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a480:	83 c4 10             	add    esp,0x10
c000a483:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a489:	75 e9                	jne    c000a474 <Phys::physicalMemorySetup(unsigned int)+0x22f>
c000a48b:	a1 18 7f 02 c0       	mov    eax,ds:0xc0027f18
c000a490:	bb 40 01 00 00       	mov    ebx,0x140
c000a495:	83 c0 20             	add    eax,0x20
c000a498:	a3 18 7f 02 c0       	mov    ds:0xc0027f18,eax
c000a49d:	eb 22                	jmp    c000a4c1 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000a49f:	83 ec 08             	sub    esp,0x8
c000a4a2:	6a 00                	push   0x0
c000a4a4:	53                   	push   ebx
c000a4a5:	43                   	inc    ebx
c000a4a6:	e8 4a fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a4ab:	a1 18 7f 02 c0       	mov    eax,ds:0xc0027f18
c000a4b0:	83 c4 10             	add    esp,0x10
c000a4b3:	40                   	inc    eax
c000a4b4:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a4ba:	a3 18 7f 02 c0       	mov    ds:0xc0027f18,eax
c000a4bf:	74 07                	je     c000a4c8 <Phys::physicalMemorySetup(unsigned int)+0x283>
c000a4c1:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a4c6:	7e d7                	jle    c000a49f <Phys::physicalMemorySetup(unsigned int)+0x25a>
c000a4c8:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a4cd:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a4d2:	7f 22                	jg     c000a4f6 <Phys::physicalMemorySetup(unsigned int)+0x2b1>
c000a4d4:	83 ec 08             	sub    esp,0x8
c000a4d7:	6a 00                	push   0x0
c000a4d9:	53                   	push   ebx
c000a4da:	43                   	inc    ebx
c000a4db:	e8 15 fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a4e0:	a1 18 7f 02 c0       	mov    eax,ds:0xc0027f18
c000a4e5:	83 c4 10             	add    esp,0x10
c000a4e8:	40                   	inc    eax
c000a4e9:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a4ef:	a3 18 7f 02 c0       	mov    ds:0xc0027f18,eax
c000a4f4:	75 d7                	jne    c000a4cd <Phys::physicalMemorySetup(unsigned int)+0x288>
c000a4f6:	83 c4 3c             	add    esp,0x3c
c000a4f9:	5b                   	pop    ebx
c000a4fa:	5e                   	pop    esi
c000a4fb:	5f                   	pop    edi
c000a4fc:	5d                   	pop    ebp
c000a4fd:	c3                   	ret    
c000a4fe:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a506:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a50e:	e9 46 fe ff ff       	jmp    c000a359 <Phys::physicalMemorySetup(unsigned int)+0x114>
c000a513:	90                   	nop

c000a514 <Pipe::isAtty()>:
c000a514:	31 c0                	xor    eax,eax
c000a516:	c3                   	ret    
c000a517:	90                   	nop

c000a518 <Pipe::~Pipe()>:
c000a518:	83 ec 0c             	sub    esp,0xc
c000a51b:	ba 24 42 02 c0       	mov    edx,0xc0024224
c000a520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a524:	89 10                	mov    DWORD PTR [eax],edx
c000a526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a52a:	83 ec 0c             	sub    esp,0xc
c000a52d:	50                   	push   eax
c000a52e:	e8 45 12 00 00       	call   c000b778 <UnixFile::~UnixFile()>
c000a533:	83 c4 10             	add    esp,0x10
c000a536:	90                   	nop
c000a537:	83 c4 0c             	add    esp,0xc
c000a53a:	c3                   	ret    
c000a53b:	90                   	nop

c000a53c <Pipe::~Pipe()>:
c000a53c:	83 ec 0c             	sub    esp,0xc
c000a53f:	83 ec 0c             	sub    esp,0xc
c000a542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a546:	e8 cd ff ff ff       	call   c000a518 <Pipe::~Pipe()>
c000a54b:	83 c4 10             	add    esp,0x10
c000a54e:	83 ec 08             	sub    esp,0x8
c000a551:	6a 20                	push   0x20
c000a553:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a557:	e8 c2 26 00 00       	call   c000cc1e <operator delete(void*, unsigned long)>
c000a55c:	83 c4 10             	add    esp,0x10
c000a55f:	83 c4 0c             	add    esp,0xc
c000a562:	c3                   	ret    
c000a563:	90                   	nop

c000a564 <Pipe::read(unsigned long long, void*, int*)>:
c000a564:	55                   	push   ebp
c000a565:	57                   	push   edi
c000a566:	56                   	push   esi
c000a567:	53                   	push   ebx
c000a568:	83 ec 1c             	sub    esp,0x1c
c000a56b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a56f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a573:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a577:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a57a:	89 c8                	mov    eax,ecx
c000a57c:	99                   	cdq    
c000a57d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a581:	74 24                	je     c000a5a7 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a583:	39 f9                	cmp    ecx,edi
c000a585:	89 d1                	mov    ecx,edx
c000a587:	19 f1                	sbb    ecx,esi
c000a589:	73 1c                	jae    c000a5a7 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a58b:	fa                   	cli    
c000a58c:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c000a592:	e8 bd e0 00 00       	call   c0018654 <schedule()>
c000a597:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c000a59c:	48                   	dec    eax
c000a59d:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c000a5a2:	75 d3                	jne    c000a577 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a5a4:	fb                   	sti    
c000a5a5:	eb d0                	jmp    c000a577 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a5a7:	39 f8                	cmp    eax,edi
c000a5a9:	89 d1                	mov    ecx,edx
c000a5ab:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a5ae:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a5b2:	19 f1                	sbb    ecx,esi
c000a5b4:	73 07                	jae    c000a5bd <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a5b6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5bd:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a5c0:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a5c3:	29 f7                	sub    edi,esi
c000a5c5:	89 f8                	mov    eax,edi
c000a5c7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a5cb:	99                   	cdq    
c000a5cc:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a5cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5d3:	19 d0                	sbb    eax,edx
c000a5d5:	73 07                	jae    c000a5de <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a5d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a5da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a5de:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a5e1:	89 ea                	mov    edx,ebp
c000a5e3:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a5e7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a5ec:	74 0d                	je     c000a5fb <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a5ee:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a5f1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a5f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a5f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a5fb:	85 d2                	test   edx,edx
c000a5fd:	74 11                	je     c000a610 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a5ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a603:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a606:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a60a:	89 d1                	mov    ecx,edx
c000a60c:	89 c7                	mov    edi,eax
c000a60e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a610:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a613:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a616:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a619:	99                   	cdq    
c000a61a:	89 f7                	mov    edi,esi
c000a61c:	03 04 24             	add    eax,DWORD PTR [esp]
c000a61f:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a623:	c1 ff 1f             	sar    edi,0x1f
c000a626:	57                   	push   edi
c000a627:	56                   	push   esi
c000a628:	52                   	push   edx
c000a629:	50                   	push   eax
c000a62a:	e8 75 81 01 00       	call   c00227a4 <__umoddi3>
c000a62f:	83 c4 10             	add    esp,0x10
c000a632:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a635:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a63a:	75 10                	jne    c000a64c <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a63c:	83 ec 0c             	sub    esp,0xc
c000a63f:	68 e1 41 02 c0       	push   0xc00241e1
c000a644:	e8 a6 a2 00 00       	call   c00148ef <Krnl::panic(char const*)>
c000a649:	83 c4 10             	add    esp,0x10
c000a64c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a650:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a653:	89 10                	mov    DWORD PTR [eax],edx
c000a655:	83 c4 1c             	add    esp,0x1c
c000a658:	31 c0                	xor    eax,eax
c000a65a:	5b                   	pop    ebx
c000a65b:	5e                   	pop    esi
c000a65c:	5f                   	pop    edi
c000a65d:	5d                   	pop    ebp
c000a65e:	c3                   	ret    
c000a65f:	90                   	nop

c000a660 <Pipe::write(unsigned long long, void*, int*)>:
c000a660:	55                   	push   ebp
c000a661:	57                   	push   edi
c000a662:	56                   	push   esi
c000a663:	53                   	push   ebx
c000a664:	83 ec 1c             	sub    esp,0x1c
c000a667:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a66b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a66f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a672:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a676:	89 04 24             	mov    DWORD PTR [esp],eax
c000a679:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a67d:	89 d8                	mov    eax,ebx
c000a67f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a682:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a686:	89 d6                	mov    esi,edx
c000a688:	89 d7                	mov    edi,edx
c000a68a:	c1 ff 1f             	sar    edi,0x1f
c000a68d:	03 34 24             	add    esi,DWORD PTR [esp]
c000a690:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a694:	c1 f8 1f             	sar    eax,0x1f
c000a697:	39 f3                	cmp    ebx,esi
c000a699:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a69d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6a1:	19 f8                	sbb    eax,edi
c000a6a3:	b8 01 00 00 00       	mov    eax,0x1
c000a6a8:	72 6e                	jb     c000a718 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a6aa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a6ad:	01 d0                	add    eax,edx
c000a6af:	99                   	cdq    
c000a6b0:	f7 fb                	idiv   ebx
c000a6b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6b6:	29 d3                	sub    ebx,edx
c000a6b8:	89 d7                	mov    edi,edx
c000a6ba:	89 de                	mov    esi,ebx
c000a6bc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a6bf:	c1 fb 1f             	sar    ebx,0x1f
c000a6c2:	39 f2                	cmp    edx,esi
c000a6c4:	19 d8                	sbb    eax,ebx
c000a6c6:	b8 00 00 00 00       	mov    eax,0x0
c000a6cb:	72 04                	jb     c000a6d1 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a6cd:	89 d0                	mov    eax,edx
c000a6cf:	29 f0                	sub    eax,esi
c000a6d1:	89 d3                	mov    ebx,edx
c000a6d3:	29 c3                	sub    ebx,eax
c000a6d5:	74 0b                	je     c000a6e2 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a6d7:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a6da:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a6de:	89 d9                	mov    ecx,ebx
c000a6e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a6e2:	85 c0                	test   eax,eax
c000a6e4:	74 0d                	je     c000a6f3 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a6e6:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a6ea:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a6ed:	89 de                	mov    esi,ebx
c000a6ef:	89 c1                	mov    ecx,eax
c000a6f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a6f3:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a6f6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a6fb:	75 10                	jne    c000a70d <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a6fd:	83 ec 0c             	sub    esp,0xc
c000a700:	68 fd 41 02 c0       	push   0xc00241fd
c000a705:	e8 e5 a1 00 00       	call   c00148ef <Krnl::panic(char const*)>
c000a70a:	83 c4 10             	add    esp,0x10
c000a70d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a711:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a714:	89 08                	mov    DWORD PTR [eax],ecx
c000a716:	31 c0                	xor    eax,eax
c000a718:	83 c4 1c             	add    esp,0x1c
c000a71b:	5b                   	pop    ebx
c000a71c:	5e                   	pop    esi
c000a71d:	5f                   	pop    edi
c000a71e:	5d                   	pop    ebp
c000a71f:	c3                   	ret    

c000a720 <Pipe::Pipe(int)>:
c000a720:	83 ec 0c             	sub    esp,0xc
c000a723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a727:	83 ec 08             	sub    esp,0x8
c000a72a:	6a 00                	push   0x0
c000a72c:	50                   	push   eax
c000a72d:	e8 64 0e 00 00       	call   c000b596 <UnixFile::UnixFile(int)>
c000a732:	83 c4 10             	add    esp,0x10
c000a735:	ba 24 42 02 c0       	mov    edx,0xc0024224
c000a73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a73e:	89 10                	mov    DWORD PTR [eax],edx
c000a740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a744:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a748:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a74b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a74f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a75a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a761:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a765:	83 ec 0c             	sub    esp,0xc
c000a768:	50                   	push   eax
c000a769:	e8 a1 f2 ff ff       	call   c0009a0f <malloc>
c000a76e:	83 c4 10             	add    esp,0x10
c000a771:	89 c2                	mov    edx,eax
c000a773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a777:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a77e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a782:	90                   	nop
c000a783:	83 c4 0c             	add    esp,0xc
c000a786:	c3                   	ret    
c000a787:	90                   	nop

c000a788 <VgaText::isAtty()>:
c000a788:	b0 01                	mov    al,0x1
c000a78a:	c3                   	ret    
c000a78b:	90                   	nop

c000a78c <VgaText::~VgaText()>:
c000a78c:	83 ec 0c             	sub    esp,0xc
c000a78f:	ba ac 42 02 c0       	mov    edx,0xc00242ac
c000a794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a798:	89 10                	mov    DWORD PTR [eax],edx
c000a79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a79e:	83 ec 0c             	sub    esp,0xc
c000a7a1:	50                   	push   eax
c000a7a2:	e8 d1 0f 00 00       	call   c000b778 <UnixFile::~UnixFile()>
c000a7a7:	83 c4 10             	add    esp,0x10
c000a7aa:	90                   	nop
c000a7ab:	83 c4 0c             	add    esp,0xc
c000a7ae:	c3                   	ret    
c000a7af:	90                   	nop

c000a7b0 <VgaText::~VgaText()>:
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	83 ec 0c             	sub    esp,0xc
c000a7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ba:	e8 cd ff ff ff       	call   c000a78c <VgaText::~VgaText()>
c000a7bf:	83 c4 10             	add    esp,0x10
c000a7c2:	83 ec 08             	sub    esp,0x8
c000a7c5:	68 c4 02 00 00       	push   0x2c4
c000a7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ce:	e8 4b 24 00 00       	call   c000cc1e <operator delete(void*, unsigned long)>
c000a7d3:	83 c4 10             	add    esp,0x10
c000a7d6:	83 c4 0c             	add    esp,0xc
c000a7d9:	c3                   	ret    

c000a7da <VgaText::read(unsigned long long, void*, int*)>:
c000a7da:	83 ec 10             	sub    esp,0x10
c000a7dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a7e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a7e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7e9:	e8 05 58 00 00       	call   c000fff3 <readKeyboard(VgaText*, char*, unsigned long)>
c000a7ee:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a7f2:	89 02                	mov    DWORD PTR [edx],eax
c000a7f4:	31 c0                	xor    eax,eax
c000a7f6:	83 c4 1c             	add    esp,0x1c
c000a7f9:	c3                   	ret    

c000a7fa <setTerminalScrollLock(bool)>:
c000a7fa:	c3                   	ret    

c000a7fb <addToTerminalCycle(VgaText*)>:
c000a7fb:	8b 15 60 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f60
c000a801:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a805:	85 d2                	test   edx,edx
c000a807:	75 09                	jne    c000a812 <addToTerminalCycle(VgaText*)+0x17>
c000a809:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a80c:	a3 60 7f 02 c0       	mov    ds:0xc0027f60,eax
c000a811:	c3                   	ret    
c000a812:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a815:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a818:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a81b:	c3                   	ret    

c000a81c <installVgaTextImplementation()>:
c000a81c:	83 ec 10             	sub    esp,0x10
c000a81f:	6a 20                	push   0x20
c000a821:	6a 00                	push   0x0
c000a823:	68 40 7f 02 c0       	push   0xc0027f40
c000a828:	e8 57 5e ff ff       	call   c0000684 <memset>
c000a82d:	83 c4 1c             	add    esp,0x1c
c000a830:	c3                   	ret    

c000a831 <scrollTerminalScrollLock(int)>:
c000a831:	c3                   	ret    

c000a832 <VgaText::updateTitle()>:
c000a832:	53                   	push   ebx
c000a833:	31 c0                	xor    eax,eax
c000a835:	83 ec 58             	sub    esp,0x58
c000a838:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a83c:	89 e1                	mov    ecx,esp
c000a83e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a842:	40                   	inc    eax
c000a843:	83 f8 50             	cmp    eax,0x50
c000a846:	75 f6                	jne    c000a83e <VgaText::updateTitle()+0xc>
c000a848:	31 c0                	xor    eax,eax
c000a84a:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a851:	84 db                	test   bl,bl
c000a853:	74 06                	je     c000a85b <VgaText::updateTitle()+0x29>
c000a855:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a858:	40                   	inc    eax
c000a859:	eb ef                	jmp    c000a84a <VgaText::updateTitle()+0x18>
c000a85b:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a85e:	85 c0                	test   eax,eax
c000a860:	74 09                	je     c000a86b <VgaText::updateTitle()+0x39>
c000a862:	53                   	push   ebx
c000a863:	53                   	push   ebx
c000a864:	51                   	push   ecx
c000a865:	52                   	push   edx
c000a866:	ff d0                	call   eax
c000a868:	83 c4 10             	add    esp,0x10
c000a86b:	83 c4 58             	add    esp,0x58
c000a86e:	5b                   	pop    ebx
c000a86f:	c3                   	ret    

c000a870 <VgaText::load()>:
c000a870:	53                   	push   ebx
c000a871:	31 c0                	xor    eax,eax
c000a873:	83 ec 58             	sub    esp,0x58
c000a876:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a87a:	89 e2                	mov    edx,esp
c000a87c:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a880:	40                   	inc    eax
c000a881:	83 f8 50             	cmp    eax,0x50
c000a884:	75 f6                	jne    c000a87c <VgaText::load()+0xc>
c000a886:	31 c0                	xor    eax,eax
c000a888:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a88f:	84 c9                	test   cl,cl
c000a891:	74 06                	je     c000a899 <VgaText::load()+0x29>
c000a893:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a896:	40                   	inc    eax
c000a897:	eb ef                	jmp    c000a888 <VgaText::load()+0x18>
c000a899:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a89c:	85 c0                	test   eax,eax
c000a89e:	74 09                	je     c000a8a9 <VgaText::load()+0x39>
c000a8a0:	51                   	push   ecx
c000a8a1:	51                   	push   ecx
c000a8a2:	52                   	push   edx
c000a8a3:	53                   	push   ebx
c000a8a4:	ff d0                	call   eax
c000a8a6:	83 c4 10             	add    esp,0x10
c000a8a9:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a8ac:	85 c0                	test   eax,eax
c000a8ae:	74 09                	je     c000a8b9 <VgaText::load()+0x49>
c000a8b0:	83 ec 0c             	sub    esp,0xc
c000a8b3:	53                   	push   ebx
c000a8b4:	ff d0                	call   eax
c000a8b6:	83 c4 10             	add    esp,0x10
c000a8b9:	83 c4 58             	add    esp,0x58
c000a8bc:	5b                   	pop    ebx
c000a8bd:	c3                   	ret    

c000a8be <VgaText::updateCursor()>:
c000a8be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8c2:	39 05 64 7f 02 c0    	cmp    DWORD PTR ds:0xc0027f64,eax
c000a8c8:	75 09                	jne    c000a8d3 <VgaText::updateCursor()+0x15>
c000a8ca:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a8cd:	85 c0                	test   eax,eax
c000a8cf:	74 02                	je     c000a8d3 <VgaText::updateCursor()+0x15>
c000a8d1:	ff e0                	jmp    eax
c000a8d3:	c3                   	ret    

c000a8d4 <VgaText::doANSI_SGR(int)>:
c000a8d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8dc:	85 d2                	test   edx,edx
c000a8de:	75 0b                	jne    c000a8eb <VgaText::doANSI_SGR(int)+0x17>
c000a8e0:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a8e3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a8e6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a8e9:	eb 59                	jmp    c000a944 <VgaText::doANSI_SGR(int)+0x70>
c000a8eb:	83 fa 07             	cmp    edx,0x7
c000a8ee:	75 0b                	jne    c000a8fb <VgaText::doANSI_SGR(int)+0x27>
c000a8f0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a8f3:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a8f6:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a8f9:	eb 49                	jmp    c000a944 <VgaText::doANSI_SGR(int)+0x70>
c000a8fb:	83 fa 1b             	cmp    edx,0x1b
c000a8fe:	74 e0                	je     c000a8e0 <VgaText::doANSI_SGR(int)+0xc>
c000a900:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a903:	83 f9 07             	cmp    ecx,0x7
c000a906:	77 09                	ja     c000a911 <VgaText::doANSI_SGR(int)+0x3d>
c000a908:	8b 14 8d e0 72 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8d20]
c000a90f:	eb 20                	jmp    c000a931 <VgaText::doANSI_SGR(int)+0x5d>
c000a911:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a914:	83 f9 07             	cmp    ecx,0x7
c000a917:	77 09                	ja     c000a922 <VgaText::doANSI_SGR(int)+0x4e>
c000a919:	8b 14 8d e0 72 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8d20]
c000a920:	eb 22                	jmp    c000a944 <VgaText::doANSI_SGR(int)+0x70>
c000a922:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a925:	83 f9 07             	cmp    ecx,0x7
c000a928:	77 0b                	ja     c000a935 <VgaText::doANSI_SGR(int)+0x61>
c000a92a:	8b 14 95 98 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8e68]
c000a931:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a934:	c3                   	ret    
c000a935:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a938:	83 f9 07             	cmp    ecx,0x7
c000a93b:	77 0a                	ja     c000a947 <VgaText::doANSI_SGR(int)+0x73>
c000a93d:	8b 14 95 70 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8e90]
c000a944:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a947:	c3                   	ret    

c000a948 <VgaText::setDefaultBgColour(VgaColour)>:
c000a948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a94c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a950:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a953:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a956:	c3                   	ret    
c000a957:	90                   	nop

c000a958 <VgaText::setDefaultFgColour(VgaColour)>:
c000a958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a95c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a960:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a963:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a966:	c3                   	ret    
c000a967:	90                   	nop

c000a968 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a968:	53                   	push   ebx
c000a969:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a96d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a971:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a975:	51                   	push   ecx
c000a976:	e8 cd ff ff ff       	call   c000a948 <VgaText::setDefaultBgColour(VgaColour)>
c000a97b:	58                   	pop    eax
c000a97c:	5a                   	pop    edx
c000a97d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a981:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a985:	5b                   	pop    ebx
c000a986:	eb d0                	jmp    c000a958 <VgaText::setDefaultFgColour(VgaColour)>

c000a988 <VgaText::setTitleTextColour(VgaColour)>:
c000a988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a98c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a990:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a993:	e9 9a fe ff ff       	jmp    c000a832 <VgaText::updateTitle()>

c000a998 <VgaText::setTitleColour(VgaColour)>:
c000a998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a99c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a9a0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a9a3:	e9 8a fe ff ff       	jmp    c000a832 <VgaText::updateTitle()>

c000a9a8 <VgaText::setTitle(char*)>:
c000a9a8:	53                   	push   ebx
c000a9a9:	83 ec 10             	sub    esp,0x10
c000a9ac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a9b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a9b4:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a9ba:	50                   	push   eax
c000a9bb:	e8 80 5d ff ff       	call   c0000740 <strcpy>
c000a9c0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a9c4:	83 c4 18             	add    esp,0x18
c000a9c7:	5b                   	pop    ebx
c000a9c8:	e9 65 fe ff ff       	jmp    c000a832 <VgaText::updateTitle()>
c000a9cd:	90                   	nop

c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>:
c000a9ce:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a9d2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a9d7:	83 e0 0f             	and    eax,0xf
c000a9da:	c1 e2 04             	shl    edx,0x4
c000a9dd:	09 d0                	or     eax,edx
c000a9df:	c3                   	ret    

c000a9e0 <VgaText::scrollScreen()>:
c000a9e0:	55                   	push   ebp
c000a9e1:	b9 01 00 00 00       	mov    ecx,0x1
c000a9e6:	57                   	push   edi
c000a9e7:	56                   	push   esi
c000a9e8:	53                   	push   ebx
c000a9e9:	83 ec 0c             	sub    esp,0xc
c000a9ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a9f0:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a9f6:	31 ff                	xor    edi,edi
c000a9f8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a9fb:	83 f9 17             	cmp    ecx,0x17
c000a9fe:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000aa01:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000aa08:	75 27                	jne    c000aa31 <VgaText::scrollScreen()+0x51>
c000aa0a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000aa0d:	01 f5                	add    ebp,esi
c000aa0f:	f7 c7 01 00 00 00    	test   edi,0x1
c000aa15:	74 16                	je     c000aa2d <VgaText::scrollScreen()+0x4d>
c000aa17:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000aa1b:	50                   	push   eax
c000aa1c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000aa20:	50                   	push   eax
c000aa21:	e8 a8 ff ff ff       	call   c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>
c000aa26:	5a                   	pop    edx
c000aa27:	5a                   	pop    edx
c000aa28:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000aa2b:	eb 04                	jmp    c000aa31 <VgaText::scrollScreen()+0x51>
c000aa2d:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000aa31:	47                   	inc    edi
c000aa32:	46                   	inc    esi
c000aa33:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000aa39:	75 bd                	jne    c000a9f8 <VgaText::scrollScreen()+0x18>
c000aa3b:	41                   	inc    ecx
c000aa3c:	83 f9 18             	cmp    ecx,0x18
c000aa3f:	75 af                	jne    c000a9f0 <VgaText::scrollScreen()+0x10>
c000aa41:	39 1d 64 7f 02 c0    	cmp    DWORD PTR ds:0xc0027f64,ebx
c000aa47:	75 1b                	jne    c000aa64 <VgaText::scrollScreen()+0x84>
c000aa49:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000aa4d:	74 05                	je     c000aa54 <VgaText::scrollScreen()+0x74>
c000aa4f:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000aa52:	eb 10                	jmp    c000aa64 <VgaText::scrollScreen()+0x84>
c000aa54:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000aa57:	85 c0                	test   eax,eax
c000aa59:	74 09                	je     c000aa64 <VgaText::scrollScreen()+0x84>
c000aa5b:	83 ec 0c             	sub    esp,0xc
c000aa5e:	53                   	push   ebx
c000aa5f:	ff d0                	call   eax
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000aa68:	83 c4 0c             	add    esp,0xc
c000aa6b:	5b                   	pop    ebx
c000aa6c:	5e                   	pop    esi
c000aa6d:	5f                   	pop    edi
c000aa6e:	5d                   	pop    ebp
c000aa6f:	e9 4a fe ff ff       	jmp    c000a8be <VgaText::updateCursor()>

c000aa74 <VgaText::combineCharAndColour(char, unsigned char)>:
c000aa74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000aa79:	c1 e0 08             	shl    eax,0x8
c000aa7c:	89 c2                	mov    edx,eax
c000aa7e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000aa83:	09 d0                	or     eax,edx
c000aa85:	c3                   	ret    

c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000aa86:	56                   	push   esi
c000aa87:	53                   	push   ebx
c000aa88:	51                   	push   ecx
c000aa89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aa8d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000aa92:	50                   	push   eax
c000aa93:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000aa98:	50                   	push   eax
c000aa99:	e8 30 ff ff ff       	call   c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>
c000aa9e:	5b                   	pop    ebx
c000aa9f:	0f b6 c0             	movzx  eax,al
c000aaa2:	5e                   	pop    esi
c000aaa3:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000aaa8:	50                   	push   eax
c000aaa9:	53                   	push   ebx
c000aaaa:	e8 c5 ff ff ff       	call   c000aa74 <VgaText::combineCharAndColour(char, unsigned char)>
c000aaaf:	5a                   	pop    edx
c000aab0:	5e                   	pop    esi
c000aab1:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000aab4:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000aaba:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000aabe:	0f b7 d2             	movzx  edx,dx
c000aac1:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000aac5:	39 0d 64 7f 02 c0    	cmp    DWORD PTR ds:0xc0027f64,ecx
c000aacb:	75 10                	jne    c000aadd <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aacd:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000aad0:	85 c0                	test   eax,eax
c000aad2:	74 09                	je     c000aadd <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aad4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000aad8:	5a                   	pop    edx
c000aad9:	5b                   	pop    ebx
c000aada:	5e                   	pop    esi
c000aadb:	ff e0                	jmp    eax
c000aadd:	58                   	pop    eax
c000aade:	5b                   	pop    ebx
c000aadf:	5e                   	pop    esi
c000aae0:	c3                   	ret    
c000aae1:	90                   	nop

c000aae2 <VgaText::getCursorX()>:
c000aae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aae6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000aae9:	c3                   	ret    

c000aaea <VgaText::getCursorY()>:
c000aaea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaee:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000aaf1:	c3                   	ret    

c000aaf2 <VgaText::setCursor(int, int)>:
c000aaf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaf6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aafa:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000aafd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ab01:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ab04:	e9 b5 fd ff ff       	jmp    c000a8be <VgaText::updateCursor()>

c000ab09 <setActiveTerminal(VgaText*)>:
c000ab09:	53                   	push   ebx
c000ab0a:	83 ec 08             	sub    esp,0x8
c000ab0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab11:	85 db                	test   ebx,ebx
c000ab13:	75 11                	jne    c000ab26 <setActiveTerminal(VgaText*)+0x1d>
c000ab15:	c7 44 24 10 38 42 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024238
c000ab1d:	83 c4 08             	add    esp,0x8
c000ab20:	5b                   	pop    ebx
c000ab21:	e9 c9 9d 00 00       	jmp    c00148ef <Krnl::panic(char const*)>
c000ab26:	a1 64 7f 02 c0       	mov    eax,ds:0xc0027f64
c000ab2b:	85 c0                	test   eax,eax
c000ab2d:	74 0c                	je     c000ab3b <setActiveTerminal(VgaText*)+0x32>
c000ab2f:	83 ec 0c             	sub    esp,0xc
c000ab32:	50                   	push   eax
c000ab33:	e8 86 fd ff ff       	call   c000a8be <VgaText::updateCursor()>
c000ab38:	83 c4 10             	add    esp,0x10
c000ab3b:	89 1d 64 7f 02 c0    	mov    DWORD PTR ds:0xc0027f64,ebx
c000ab41:	51                   	push   ecx
c000ab42:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ab45:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ab48:	53                   	push   ebx
c000ab49:	e8 a4 ff ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000ab4e:	83 c4 10             	add    esp,0x10
c000ab51:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ab55:	75 07                	jne    c000ab5e <setActiveTerminal(VgaText*)+0x55>
c000ab57:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000ab5e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab62:	83 c4 08             	add    esp,0x8
c000ab65:	5b                   	pop    ebx
c000ab66:	e9 05 fd ff ff       	jmp    c000a870 <VgaText::load()>

c000ab6b <doTerminalCycle()>:
c000ab6b:	83 ec 18             	sub    esp,0x18
c000ab6e:	a1 60 7f 02 c0       	mov    eax,ds:0xc0027f60
c000ab73:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000ab76:	50                   	push   eax
c000ab77:	a3 60 7f 02 c0       	mov    ds:0xc0027f60,eax
c000ab7c:	e8 88 ff ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c000ab81:	83 c4 1c             	add    esp,0x1c
c000ab84:	c3                   	ret    
c000ab85:	90                   	nop

c000ab86 <VgaText::setCursorX(int)>:
c000ab86:	83 ec 10             	sub    esp,0x10
c000ab89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ab8d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000ab90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab94:	50                   	push   eax
c000ab95:	e8 58 ff ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000ab9a:	83 c4 1c             	add    esp,0x1c
c000ab9d:	c3                   	ret    

c000ab9e <VgaText::setCursorY(int)>:
c000ab9e:	83 ec 10             	sub    esp,0x10
c000aba1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aba5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aba9:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000abac:	50                   	push   eax
c000abad:	e8 40 ff ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000abb2:	83 c4 1c             	add    esp,0x1c
c000abb5:	c3                   	ret    

c000abb6 <VgaText::incrementCursor(bool)>:
c000abb6:	56                   	push   esi
c000abb7:	53                   	push   ebx
c000abb8:	51                   	push   ecx
c000abb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000abbd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000abc1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000abc4:	40                   	inc    eax
c000abc5:	83 f8 50             	cmp    eax,0x50
c000abc8:	74 05                	je     c000abcf <VgaText::incrementCursor(bool)+0x19>
c000abca:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000abcd:	eb 24                	jmp    c000abf3 <VgaText::incrementCursor(bool)+0x3d>
c000abcf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000abd2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000abd9:	8d 50 01             	lea    edx,[eax+0x1]
c000abdc:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000abdf:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000abe2:	75 0f                	jne    c000abf3 <VgaText::incrementCursor(bool)+0x3d>
c000abe4:	83 ec 0c             	sub    esp,0xc
c000abe7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000abea:	53                   	push   ebx
c000abeb:	e8 f0 fd ff ff       	call   c000a9e0 <VgaText::scrollScreen()>
c000abf0:	83 c4 10             	add    esp,0x10
c000abf3:	89 f0                	mov    eax,esi
c000abf5:	84 c0                	test   al,al
c000abf7:	74 0c                	je     c000ac05 <VgaText::incrementCursor(bool)+0x4f>
c000abf9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abfd:	5a                   	pop    edx
c000abfe:	5b                   	pop    ebx
c000abff:	5e                   	pop    esi
c000ac00:	e9 b9 fc ff ff       	jmp    c000a8be <VgaText::updateCursor()>
c000ac05:	58                   	pop    eax
c000ac06:	5b                   	pop    ebx
c000ac07:	5e                   	pop    esi
c000ac08:	c3                   	ret    
c000ac09:	90                   	nop

c000ac0a <VgaText::decrementCursor(bool)>:
c000ac0a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ac0e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ac12:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000ac15:	85 c0                	test   eax,eax
c000ac17:	74 04                	je     c000ac1d <VgaText::decrementCursor(bool)+0x13>
c000ac19:	48                   	dec    eax
c000ac1a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000ac1d:	84 c9                	test   cl,cl
c000ac1f:	74 09                	je     c000ac2a <VgaText::decrementCursor(bool)+0x20>
c000ac21:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac25:	e9 94 fc ff ff       	jmp    c000a8be <VgaText::updateCursor()>
c000ac2a:	c3                   	ret    
c000ac2b:	90                   	nop

c000ac2c <VgaText::putchar(char, VgaColour, VgaColour)>:
c000ac2c:	53                   	push   ebx
c000ac2d:	83 ec 08             	sub    esp,0x8
c000ac30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac34:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ac3c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ac40:	3c 07                	cmp    al,0x7
c000ac42:	75 2a                	jne    c000ac6e <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000ac44:	a1 18 80 02 c0       	mov    eax,ds:0xc0028018
c000ac49:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ac51:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000ac59:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000ac61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac65:	83 c4 08             	add    esp,0x8
c000ac68:	5b                   	pop    ebx
c000ac69:	e9 0c 2f 00 00       	jmp    c000db7a <Buzzer::beep(int, int, bool)>
c000ac6e:	3c 0d                	cmp    al,0xd
c000ac70:	75 09                	jne    c000ac7b <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000ac72:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ac79:	eb 2c                	jmp    c000aca7 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000ac7b:	3c 0a                	cmp    al,0xa
c000ac7d:	75 31                	jne    c000acb0 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000ac7f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac82:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ac89:	8d 50 01             	lea    edx,[eax+0x1]
c000ac8c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000ac8f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000ac92:	75 0f                	jne    c000aca3 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000ac94:	83 ec 0c             	sub    esp,0xc
c000ac97:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ac9a:	53                   	push   ebx
c000ac9b:	e8 40 fd ff ff       	call   c000a9e0 <VgaText::scrollScreen()>
c000aca0:	83 c4 10             	add    esp,0x10
c000aca3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aca7:	83 c4 08             	add    esp,0x8
c000acaa:	5b                   	pop    ebx
c000acab:	e9 0e fc ff ff       	jmp    c000a8be <VgaText::updateCursor()>
c000acb0:	3c 08                	cmp    al,0x8
c000acb2:	75 25                	jne    c000acd9 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000acb4:	50                   	push   eax
c000acb5:	50                   	push   eax
c000acb6:	6a 01                	push   0x1
c000acb8:	53                   	push   ebx
c000acb9:	e8 4c ff ff ff       	call   c000ac0a <VgaText::decrementCursor(bool)>
c000acbe:	5a                   	pop    edx
c000acbf:	59                   	pop    ecx
c000acc0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000acc3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000acc6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000acc9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000accc:	6a 20                	push   0x20
c000acce:	53                   	push   ebx
c000accf:	e8 b2 fd ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000acd4:	83 c4 28             	add    esp,0x28
c000acd7:	5b                   	pop    ebx
c000acd8:	c3                   	ret    
c000acd9:	83 ec 08             	sub    esp,0x8
c000acdc:	0f be c0             	movsx  eax,al
c000acdf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ace2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ace5:	51                   	push   ecx
c000ace6:	52                   	push   edx
c000ace7:	50                   	push   eax
c000ace8:	53                   	push   ebx
c000ace9:	e8 98 fd ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000acee:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000acf2:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000acfa:	83 c4 28             	add    esp,0x28
c000acfd:	5b                   	pop    ebx
c000acfe:	e9 b3 fe ff ff       	jmp    c000abb6 <VgaText::incrementCursor(bool)>
c000ad03:	90                   	nop

c000ad04 <VgaText::doUpdate()>:
c000ad04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad08:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000ad0b:	85 c0                	test   eax,eax
c000ad0d:	74 02                	je     c000ad11 <VgaText::doUpdate()+0xd>
c000ad0f:	ff e0                	jmp    eax
c000ad11:	c3                   	ret    

c000ad12 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000ad12:	55                   	push   ebp
c000ad13:	31 ed                	xor    ebp,ebp
c000ad15:	57                   	push   edi
c000ad16:	56                   	push   esi
c000ad17:	53                   	push   ebx
c000ad18:	83 ec 1c             	sub    esp,0x1c
c000ad1b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ad1f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000ad24:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000ad2b:	50                   	push   eax
c000ad2c:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000ad31:	50                   	push   eax
c000ad32:	e8 97 fc ff ff       	call   c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>
c000ad37:	59                   	pop    ecx
c000ad38:	0f b6 c0             	movzx  eax,al
c000ad3b:	5e                   	pop    esi
c000ad3c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ad41:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ad45:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ad48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad4c:	0f b7 f6             	movzx  esi,si
c000ad4f:	01 f6                	add    esi,esi
c000ad51:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ad54:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ad57:	84 c0                	test   al,al
c000ad59:	0f 84 fd 00 00 00    	je     c000ae5c <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000ad5f:	3c 0d                	cmp    al,0xd
c000ad61:	75 0c                	jne    c000ad6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000ad63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ad6a:	e9 e7 00 00 00       	jmp    c000ae56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ad6f:	3c 0a                	cmp    al,0xa
c000ad71:	75 47                	jne    c000adba <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000ad73:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ad76:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ad7d:	8d 48 01             	lea    ecx,[eax+0x1]
c000ad80:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000ad83:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000ad86:	75 0f                	jne    c000ad97 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000ad88:	83 ec 0c             	sub    esp,0xc
c000ad8b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ad8e:	53                   	push   ebx
c000ad8f:	e8 4c fc ff ff       	call   c000a9e0 <VgaText::scrollScreen()>
c000ad94:	83 c4 10             	add    esp,0x10
c000ad97:	83 ec 0c             	sub    esp,0xc
c000ad9a:	31 ed                	xor    ebp,ebp
c000ad9c:	53                   	push   ebx
c000ad9d:	e8 1c fb ff ff       	call   c000a8be <VgaText::updateCursor()>
c000ada2:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ada7:	83 c4 10             	add    esp,0x10
c000adaa:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000adad:	0f b7 f6             	movzx  esi,si
c000adb0:	01 f6                	add    esi,esi
c000adb2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000adb5:	e9 9c 00 00 00       	jmp    c000ae56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000adba:	3c 08                	cmp    al,0x8
c000adbc:	75 35                	jne    c000adf3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000adbe:	56                   	push   esi
c000adbf:	56                   	push   esi
c000adc0:	6a 01                	push   0x1
c000adc2:	53                   	push   ebx
c000adc3:	e8 42 fe ff ff       	call   c000ac0a <VgaText::decrementCursor(bool)>
c000adc8:	58                   	pop    eax
c000adc9:	5a                   	pop    edx
c000adca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000adcd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000add0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000add3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000add6:	6a 20                	push   0x20
c000add8:	53                   	push   ebx
c000add9:	e8 a8 fc ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000adde:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ade3:	83 c4 20             	add    esp,0x20
c000ade6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ade9:	0f b7 f6             	movzx  esi,si
c000adec:	01 f6                	add    esi,esi
c000adee:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000adf1:	eb 63                	jmp    c000ae56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000adf3:	51                   	push   ecx
c000adf4:	51                   	push   ecx
c000adf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adf9:	50                   	push   eax
c000adfa:	e8 75 fc ff ff       	call   c000aa74 <VgaText::combineCharAndColour(char, unsigned char)>
c000adff:	83 c4 10             	add    esp,0x10
c000ae02:	66 89 06             	mov    WORD PTR [esi],ax
c000ae05:	39 1d 64 7f 02 c0    	cmp    DWORD PTR ds:0xc0027f64,ebx
c000ae0b:	75 21                	jne    c000ae2e <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ae0d:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000ae10:	85 c0                	test   eax,eax
c000ae12:	74 1a                	je     c000ae2e <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ae14:	52                   	push   edx
c000ae15:	52                   	push   edx
c000ae16:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ae19:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ae1c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae20:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae24:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000ae27:	51                   	push   ecx
c000ae28:	53                   	push   ebx
c000ae29:	ff d0                	call   eax
c000ae2b:	83 c4 20             	add    esp,0x20
c000ae2e:	83 c6 02             	add    esi,0x2
c000ae31:	50                   	push   eax
c000ae32:	50                   	push   eax
c000ae33:	6a 00                	push   0x0
c000ae35:	53                   	push   ebx
c000ae36:	e8 7b fd ff ff       	call   c000abb6 <VgaText::incrementCursor(bool)>
c000ae3b:	83 c4 10             	add    esp,0x10
c000ae3e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000ae42:	75 0d                	jne    c000ae51 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000ae44:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ae49:	0f b7 f6             	movzx  esi,si
c000ae4c:	01 f6                	add    esi,esi
c000ae4e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ae51:	bd 01 00 00 00       	mov    ebp,0x1
c000ae56:	47                   	inc    edi
c000ae57:	e9 f8 fe ff ff       	jmp    c000ad54 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000ae5c:	83 ec 0c             	sub    esp,0xc
c000ae5f:	53                   	push   ebx
c000ae60:	e8 59 fa ff ff       	call   c000a8be <VgaText::updateCursor()>
c000ae65:	83 c4 10             	add    esp,0x10
c000ae68:	89 e8                	mov    eax,ebp
c000ae6a:	84 c0                	test   al,al
c000ae6c:	74 0c                	je     c000ae7a <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000ae6e:	83 ec 0c             	sub    esp,0xc
c000ae71:	53                   	push   ebx
c000ae72:	e8 8d fe ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ae81:	83 c4 1c             	add    esp,0x1c
c000ae84:	5b                   	pop    ebx
c000ae85:	5e                   	pop    esi
c000ae86:	5f                   	pop    edi
c000ae87:	5d                   	pop    ebp
c000ae88:	c3                   	ret    
c000ae89:	90                   	nop

c000ae8a <VgaText::clearScreen()>:
c000ae8a:	57                   	push   edi
c000ae8b:	56                   	push   esi
c000ae8c:	31 f6                	xor    esi,esi
c000ae8e:	53                   	push   ebx
c000ae8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae93:	52                   	push   edx
c000ae94:	6a 00                	push   0x0
c000ae96:	6a 00                	push   0x0
c000ae98:	53                   	push   ebx
c000ae99:	e8 54 fc ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000ae9e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000aea5:	83 c4 10             	add    esp,0x10
c000aea8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000aeab:	7e 20                	jle    c000aecd <VgaText::clearScreen()+0x43>
c000aead:	31 ff                	xor    edi,edi
c000aeaf:	50                   	push   eax
c000aeb0:	50                   	push   eax
c000aeb1:	56                   	push   esi
c000aeb2:	57                   	push   edi
c000aeb3:	47                   	inc    edi
c000aeb4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000aeb7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000aeba:	6a 20                	push   0x20
c000aebc:	53                   	push   ebx
c000aebd:	e8 c4 fb ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aec2:	83 c4 20             	add    esp,0x20
c000aec5:	83 ff 50             	cmp    edi,0x50
c000aec8:	75 e5                	jne    c000aeaf <VgaText::clearScreen()+0x25>
c000aeca:	46                   	inc    esi
c000aecb:	eb db                	jmp    c000aea8 <VgaText::clearScreen()+0x1e>
c000aecd:	83 ec 0c             	sub    esp,0xc
c000aed0:	53                   	push   ebx
c000aed1:	e8 2e fe ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000aed6:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000aedd:	83 c4 10             	add    esp,0x10
c000aee0:	5b                   	pop    ebx
c000aee1:	5e                   	pop    esi
c000aee2:	5f                   	pop    edi
c000aee3:	c3                   	ret    

c000aee4 <VgaText::putchar(char)>:
c000aee4:	56                   	push   esi
c000aee5:	53                   	push   ebx
c000aee6:	83 ec 14             	sub    esp,0x14
c000aee9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aeed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000aef1:	3c 5b                	cmp    al,0x5b
c000aef3:	75 18                	jne    c000af0d <VgaText::putchar(char)+0x29>
c000aef5:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000aef9:	74 1f                	je     c000af1a <VgaText::putchar(char)+0x36>
c000aefb:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000af01:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000af08:	e9 bd 00 00 00       	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000af0d:	3c 1b                	cmp    al,0x1b
c000af0f:	75 09                	jne    c000af1a <VgaText::putchar(char)+0x36>
c000af11:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000af15:	e9 b0 00 00 00       	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000af1a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000af1d:	84 c9                	test   cl,cl
c000af1f:	0f 84 92 00 00 00    	je     c000afb7 <VgaText::putchar(char)+0xd3>
c000af25:	8d 50 c0             	lea    edx,[eax-0x40]
c000af28:	80 fa 3e             	cmp    dl,0x3e
c000af2b:	77 76                	ja     c000afa3 <VgaText::putchar(char)+0xbf>
c000af2d:	3c 6d                	cmp    al,0x6d
c000af2f:	75 47                	jne    c000af78 <VgaText::putchar(char)+0x94>
c000af31:	31 f6                	xor    esi,esi
c000af33:	31 d2                	xor    edx,edx
c000af35:	31 c0                	xor    eax,eax
c000af37:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000af3a:	7e 2d                	jle    c000af69 <VgaText::putchar(char)+0x85>
c000af3c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000af41:	80 fa 3b             	cmp    dl,0x3b
c000af44:	75 17                	jne    c000af5d <VgaText::putchar(char)+0x79>
c000af46:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000af4a:	50                   	push   eax
c000af4b:	53                   	push   ebx
c000af4c:	e8 83 f9 ff ff       	call   c000a8d4 <VgaText::doANSI_SGR(int)>
c000af51:	59                   	pop    ecx
c000af52:	31 d2                	xor    edx,edx
c000af54:	58                   	pop    eax
c000af55:	31 c0                	xor    eax,eax
c000af57:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000af5b:	eb 09                	jmp    c000af66 <VgaText::putchar(char)+0x82>
c000af5d:	6b c0 0a             	imul   eax,eax,0xa
c000af60:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000af64:	88 ca                	mov    dl,cl
c000af66:	46                   	inc    esi
c000af67:	eb ce                	jmp    c000af37 <VgaText::putchar(char)+0x53>
c000af69:	84 d2                	test   dl,dl
c000af6b:	74 2e                	je     c000af9b <VgaText::putchar(char)+0xb7>
c000af6d:	50                   	push   eax
c000af6e:	53                   	push   ebx
c000af6f:	e8 60 f9 ff ff       	call   c000a8d4 <VgaText::doANSI_SGR(int)>
c000af74:	58                   	pop    eax
c000af75:	5a                   	pop    edx
c000af76:	eb 23                	jmp    c000af9b <VgaText::putchar(char)+0xb7>
c000af78:	3c 4a                	cmp    al,0x4a
c000af7a:	75 1f                	jne    c000af9b <VgaText::putchar(char)+0xb7>
c000af7c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000af80:	75 19                	jne    c000af9b <VgaText::putchar(char)+0xb7>
c000af82:	83 ec 0c             	sub    esp,0xc
c000af85:	53                   	push   ebx
c000af86:	e8 ff fe ff ff       	call   c000ae8a <VgaText::clearScreen()>
c000af8b:	83 c4 0c             	add    esp,0xc
c000af8e:	6a 00                	push   0x0
c000af90:	6a 00                	push   0x0
c000af92:	53                   	push   ebx
c000af93:	e8 5a fb ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000af98:	83 c4 10             	add    esp,0x10
c000af9b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000afa1:	eb 27                	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000afa3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000afa6:	83 fa 0e             	cmp    edx,0xe
c000afa9:	7f 1f                	jg     c000afca <VgaText::putchar(char)+0xe6>
c000afab:	8d 4a 01             	lea    ecx,[edx+0x1]
c000afae:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000afb1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000afb5:	eb 13                	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000afb7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000afba:	0f be c0             	movsx  eax,al
c000afbd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000afc0:	50                   	push   eax
c000afc1:	53                   	push   ebx
c000afc2:	e8 65 fc ff ff       	call   c000ac2c <VgaText::putchar(char, VgaColour, VgaColour)>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	83 c4 14             	add    esp,0x14
c000afcd:	5b                   	pop    ebx
c000afce:	5e                   	pop    esi
c000afcf:	c3                   	ret    

c000afd0 <VgaText::putx(unsigned int)>:
c000afd0:	57                   	push   edi
c000afd1:	b9 11 00 00 00       	mov    ecx,0x11
c000afd6:	56                   	push   esi
c000afd7:	be 46 42 02 c0       	mov    esi,0xc0024246
c000afdc:	53                   	push   ebx
c000afdd:	83 ec 20             	sub    esp,0x20
c000afe0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000afe4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000afe8:	fc                   	cld    
c000afe9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000afeb:	be 08 00 00 00       	mov    esi,0x8
c000aff0:	50                   	push   eax
c000aff1:	50                   	push   eax
c000aff2:	89 d8                	mov    eax,ebx
c000aff4:	c1 e3 04             	shl    ebx,0x4
c000aff7:	c1 e8 1c             	shr    eax,0x1c
c000affa:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000afff:	50                   	push   eax
c000b000:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b004:	e8 db fe ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b009:	83 c4 10             	add    esp,0x10
c000b00c:	4e                   	dec    esi
c000b00d:	75 e1                	jne    c000aff0 <VgaText::putx(unsigned int)+0x20>
c000b00f:	83 c4 20             	add    esp,0x20
c000b012:	5b                   	pop    ebx
c000b013:	5e                   	pop    esi
c000b014:	5f                   	pop    edi
c000b015:	c3                   	ret    

c000b016 <VgaText::puts(char const*)>:
c000b016:	53                   	push   ebx
c000b017:	83 ec 08             	sub    esp,0x8
c000b01a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b01e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b021:	84 c0                	test   al,al
c000b023:	74 12                	je     c000b037 <VgaText::puts(char const*)+0x21>
c000b025:	43                   	inc    ebx
c000b026:	51                   	push   ecx
c000b027:	51                   	push   ecx
c000b028:	50                   	push   eax
c000b029:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02d:	e8 b2 fe ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b032:	83 c4 10             	add    esp,0x10
c000b035:	eb e7                	jmp    c000b01e <VgaText::puts(char const*)+0x8>
c000b037:	83 c4 08             	add    esp,0x8
c000b03a:	5b                   	pop    ebx
c000b03b:	c3                   	ret    

c000b03c <VgaText::VgaText(char const*)>:
c000b03c:	57                   	push   edi
c000b03d:	56                   	push   esi
c000b03e:	53                   	push   ebx
c000b03f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b043:	83 ec 08             	sub    esp,0x8
c000b046:	6a 00                	push   0x0
c000b048:	50                   	push   eax
c000b049:	e8 48 05 00 00       	call   c000b596 <UnixFile::UnixFile(int)>
c000b04e:	83 c4 10             	add    esp,0x10
c000b051:	ba ac 42 02 c0       	mov    edx,0xc00242ac
c000b056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b05a:	89 10                	mov    DWORD PTR [eax],edx
c000b05c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b060:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b06b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b076:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b07a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b07e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b086:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b08d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b091:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b09c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b0a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a7:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b0ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0b2:	8d 50 60             	lea    edx,[eax+0x60]
c000b0b5:	bb 40 7f 02 c0       	mov    ebx,0xc0027f40
c000b0ba:	b8 08 00 00 00       	mov    eax,0x8
c000b0bf:	fc                   	cld    
c000b0c0:	89 d7                	mov    edi,edx
c000b0c2:	89 de                	mov    esi,ebx
c000b0c4:	89 c1                	mov    ecx,eax
c000b0c6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0cc:	05 82 00 00 00       	add    eax,0x82
c000b0d1:	83 ec 08             	sub    esp,0x8
c000b0d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0d8:	50                   	push   eax
c000b0d9:	e8 62 56 ff ff       	call   c0000740 <strcpy>
c000b0de:	83 c4 10             	add    esp,0x10
c000b0e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0e5:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b0ec:	83 ec 0c             	sub    esp,0xc
c000b0ef:	6a 01                	push   0x1
c000b0f1:	e8 e3 08 00 00       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c000b0f6:	83 c4 10             	add    esp,0x10
c000b0f9:	89 c2                	mov    edx,eax
c000b0fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0ff:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b102:	8b 1d 10 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028010
c000b108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b10c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b10f:	89 c6                	mov    esi,eax
c000b111:	e8 b0 ef ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000b116:	68 05 0c 00 00       	push   0xc05
c000b11b:	56                   	push   esi
c000b11c:	50                   	push   eax
c000b11d:	53                   	push   ebx
c000b11e:	e8 5d 0f 00 00       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b123:	83 c4 10             	add    esp,0x10
c000b126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b12a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b12d:	83 ec 04             	sub    esp,0x4
c000b130:	68 00 0f 00 00       	push   0xf00
c000b135:	6a 00                	push   0x0
c000b137:	50                   	push   eax
c000b138:	e8 47 55 ff ff       	call   c0000684 <memset>
c000b13d:	83 c4 10             	add    esp,0x10
c000b140:	83 ec 04             	sub    esp,0x4
c000b143:	6a 00                	push   0x0
c000b145:	6a 07                	push   0x7
c000b147:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b14b:	e8 18 f8 ff ff       	call   c000a968 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	83 ec 04             	sub    esp,0x4
c000b156:	6a 00                	push   0x0
c000b158:	6a 00                	push   0x0
c000b15a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b15e:	e8 8f f9 ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000b163:	83 c4 10             	add    esp,0x10
c000b166:	83 ec 0c             	sub    esp,0xc
c000b169:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b16d:	e8 18 fd ff ff       	call   c000ae8a <VgaText::clearScreen()>
c000b172:	83 c4 10             	add    esp,0x10
c000b175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b179:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b17d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b181:	05 02 01 00 00       	add    eax,0x102
c000b186:	83 ec 04             	sub    esp,0x4
c000b189:	68 96 00 00 00       	push   0x96
c000b18e:	6a 00                	push   0x0
c000b190:	50                   	push   eax
c000b191:	e8 ee 54 ff ff       	call   c0000684 <memset>
c000b196:	83 c4 10             	add    esp,0x10
c000b199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b19d:	05 98 01 00 00       	add    eax,0x198
c000b1a2:	83 ec 04             	sub    esp,0x4
c000b1a5:	68 2c 01 00 00       	push   0x12c
c000b1aa:	6a 00                	push   0x0
c000b1ac:	50                   	push   eax
c000b1ad:	e8 d2 54 ff ff       	call   c0000684 <memset>
c000b1b2:	83 c4 10             	add    esp,0x10
c000b1b5:	90                   	nop
c000b1b6:	5b                   	pop    ebx
c000b1b7:	5e                   	pop    esi
c000b1b8:	5f                   	pop    edi
c000b1b9:	c3                   	ret    

c000b1ba <VgaText::receiveKey(unsigned char)>:
c000b1ba:	55                   	push   ebp
c000b1bb:	57                   	push   edi
c000b1bc:	56                   	push   esi
c000b1bd:	53                   	push   ebx
c000b1be:	83 ec 1c             	sub    esp,0x1c
c000b1c1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b1c5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b1c9:	84 db                	test   bl,bl
c000b1cb:	0f 84 c9 00 00 00    	je     c000b29a <VgaText::receiveKey(unsigned char)+0xe0>
c000b1d1:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b1d7:	80 fb 08             	cmp    bl,0x8
c000b1da:	75 2c                	jne    c000b208 <VgaText::receiveKey(unsigned char)+0x4e>
c000b1dc:	83 ec 0c             	sub    esp,0xc
c000b1df:	57                   	push   edi
c000b1e0:	e8 bb 54 ff ff       	call   c00006a0 <strlen>
c000b1e5:	83 c4 10             	add    esp,0x10
c000b1e8:	85 c0                	test   eax,eax
c000b1ea:	74 41                	je     c000b22d <VgaText::receiveKey(unsigned char)+0x73>
c000b1ec:	50                   	push   eax
c000b1ed:	50                   	push   eax
c000b1ee:	6a 08                	push   0x8
c000b1f0:	56                   	push   esi
c000b1f1:	e8 ee fc ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b1f6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b1f9:	e8 a2 54 ff ff       	call   c00006a0 <strlen>
c000b1fe:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b206:	eb 22                	jmp    c000b22a <VgaText::receiveKey(unsigned char)+0x70>
c000b208:	0f be c3             	movsx  eax,bl
c000b20b:	52                   	push   edx
c000b20c:	52                   	push   edx
c000b20d:	50                   	push   eax
c000b20e:	56                   	push   esi
c000b20f:	e8 d0 fc ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b214:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b218:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b21d:	59                   	pop    ecx
c000b21e:	5d                   	pop    ebp
c000b21f:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b223:	50                   	push   eax
c000b224:	57                   	push   edi
c000b225:	e8 56 56 ff ff       	call   c0000880 <strcat>
c000b22a:	83 c4 10             	add    esp,0x10
c000b22d:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b234:	75 05                	jne    c000b23b <VgaText::receiveKey(unsigned char)+0x81>
c000b236:	80 fb 0a             	cmp    bl,0xa
c000b239:	75 53                	jne    c000b28e <VgaText::receiveKey(unsigned char)+0xd4>
c000b23b:	83 ec 0c             	sub    esp,0xc
c000b23e:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c000b244:	53                   	push   ebx
c000b245:	e8 56 54 ff ff       	call   c00006a0 <strlen>
c000b24a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b24d:	89 c5                	mov    ebp,eax
c000b24f:	e8 4c 54 ff ff       	call   c00006a0 <strlen>
c000b254:	83 c4 10             	add    esp,0x10
c000b257:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b25b:	3d 2c 01 00 00       	cmp    eax,0x12c
c000b260:	76 10                	jbe    c000b272 <VgaText::receiveKey(unsigned char)+0xb8>
c000b262:	83 ec 0c             	sub    esp,0xc
c000b265:	68 57 42 02 c0       	push   0xc0024257
c000b26a:	e8 80 96 00 00       	call   c00148ef <Krnl::panic(char const*)>
c000b26f:	83 c4 10             	add    esp,0x10
c000b272:	50                   	push   eax
c000b273:	50                   	push   eax
c000b274:	57                   	push   edi
c000b275:	53                   	push   ebx
c000b276:	e8 05 56 ff ff       	call   c0000880 <strcat>
c000b27b:	83 c4 0c             	add    esp,0xc
c000b27e:	68 96 00 00 00       	push   0x96
c000b283:	6a 00                	push   0x0
c000b285:	57                   	push   edi
c000b286:	e8 f9 53 ff ff       	call   c0000684 <memset>
c000b28b:	83 c4 10             	add    esp,0x10
c000b28e:	83 ec 0c             	sub    esp,0xc
c000b291:	56                   	push   esi
c000b292:	e8 6d fa ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000b297:	83 c4 10             	add    esp,0x10
c000b29a:	83 c4 1c             	add    esp,0x1c
c000b29d:	5b                   	pop    ebx
c000b29e:	5e                   	pop    esi
c000b29f:	5f                   	pop    edi
c000b2a0:	5d                   	pop    ebp
c000b2a1:	c3                   	ret    

c000b2a2 <VgaText::write(unsigned long long, void*, int*)>:
c000b2a2:	55                   	push   ebp
c000b2a3:	57                   	push   edi
c000b2a4:	56                   	push   esi
c000b2a5:	53                   	push   ebx
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b2ad:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b2b1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b2b5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b2bc:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b2bf:	39 eb                	cmp    ebx,ebp
c000b2c1:	74 13                	je     c000b2d6 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b2c3:	43                   	inc    ebx
c000b2c4:	50                   	push   eax
c000b2c5:	50                   	push   eax
c000b2c6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b2ca:	50                   	push   eax
c000b2cb:	56                   	push   esi
c000b2cc:	e8 13 fc ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b2d1:	83 c4 10             	add    esp,0x10
c000b2d4:	eb e9                	jmp    c000b2bf <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b2d6:	83 ec 0c             	sub    esp,0xc
c000b2d9:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b2e0:	56                   	push   esi
c000b2e1:	e8 1e fa ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000b2e6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b2ea:	89 38                	mov    DWORD PTR [eax],edi
c000b2ec:	83 c4 1c             	add    esp,0x1c
c000b2ef:	31 c0                	xor    eax,eax
c000b2f1:	5b                   	pop    ebx
c000b2f2:	5e                   	pop    esi
c000b2f3:	5f                   	pop    edi
c000b2f4:	5d                   	pop    ebp
c000b2f5:	c3                   	ret    

c000b2f6 <newTerminal(char*)>:
c000b2f6:	83 ec 28             	sub    esp,0x28
c000b2f9:	68 c4 02 00 00       	push   0x2c4
c000b2fe:	e8 0c e7 ff ff       	call   c0009a0f <malloc>
c000b303:	5a                   	pop    edx
c000b304:	59                   	pop    ecx
c000b305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b309:	50                   	push   eax
c000b30a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b30e:	e8 29 fd ff ff       	call   c000b03c <VgaText::VgaText(char const*)>
c000b313:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b317:	83 c4 2c             	add    esp,0x2c
c000b31a:	c3                   	ret    
c000b31b:	90                   	nop

c000b31c <TSS::TSS()>:
c000b31c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b320:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b327:	90                   	nop
c000b328:	c3                   	ret    
c000b329:	90                   	nop
c000b32a:	66 90                	xchg   ax,ax

c000b32c <TSS::setESP(unsigned long)>:
c000b32c:	55                   	push   ebp
c000b32d:	89 e5                	mov    ebp,esp
c000b32f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b332:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b335:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b338:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b33b:	90                   	nop
c000b33c:	5d                   	pop    ebp
c000b33d:	c3                   	ret    
c000b33e:	66 90                	xchg   ax,ax

c000b340 <TSS::flush()>:
c000b340:	55                   	push   ebp
c000b341:	89 e5                	mov    ebp,esp
c000b343:	83 ec 10             	sub    esp,0x10
c000b346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b349:	8b 00                	mov    eax,DWORD PTR [eax]
c000b34b:	83 c8 03             	or     eax,0x3
c000b34e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b352:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b356:	66 89 d0             	mov    ax,dx
c000b359:	0f 00 d8             	ltr    ax
c000b35c:	90                   	nop
c000b35d:	c9                   	leave  
c000b35e:	c3                   	ret    
c000b35f:	90                   	nop

c000b360 <TSS::setup(unsigned long, unsigned long)>:
c000b360:	55                   	push   ebp
c000b361:	89 e5                	mov    ebp,esp
c000b363:	83 ec 18             	sub    esp,0x18
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	6a 68                	push   0x68
c000b36b:	e8 9f e6 ff ff       	call   c0009a0f <malloc>
c000b370:	83 c4 10             	add    esp,0x10
c000b373:	89 c2                	mov    edx,eax
c000b375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b378:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b37b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b37e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b381:	83 ec 04             	sub    esp,0x4
c000b384:	6a 68                	push   0x68
c000b386:	6a 00                	push   0x0
c000b388:	50                   	push   eax
c000b389:	e8 f6 52 ff ff       	call   c0000684 <memset>
c000b38e:	83 c4 10             	add    esp,0x10
c000b391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b394:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b397:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b39d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3a3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b3a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3af:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b3b2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b3b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3bb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b3c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3c7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b3cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3d3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b3d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3df:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b3e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3eb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b3f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3f7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b3fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b400:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b403:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b406:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b409:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b40c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b40f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b412:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b415:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b418:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b41b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b422:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b425:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b428:	0f 20 da             	mov    edx,cr3
c000b42b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b42e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b431:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b434:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b437:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b43a:	83 ec 08             	sub    esp,0x8
c000b43d:	50                   	push   eax
c000b43e:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b441:	50                   	push   eax
c000b442:	e8 23 de ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c000b447:	83 c4 10             	add    esp,0x10
c000b44a:	83 ec 08             	sub    esp,0x8
c000b44d:	6a 68                	push   0x68
c000b44f:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b452:	50                   	push   eax
c000b453:	e8 2e de ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c000b458:	83 c4 10             	add    esp,0x10
c000b45b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b45f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b462:	83 e0 0f             	and    eax,0xf
c000b465:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b468:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b46b:	83 c8 40             	or     eax,0x40
c000b46e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b471:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000b476:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b47c:	05 78 01 00 00       	add    eax,0x178
c000b481:	83 ec 04             	sub    esp,0x4
c000b484:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b487:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b48a:	50                   	push   eax
c000b48b:	e8 2a de ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c000b490:	83 c4 10             	add    esp,0x10
c000b493:	89 c2                	mov    edx,eax
c000b495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b498:	89 10                	mov    DWORD PTR [eax],edx
c000b49a:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000b49f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b4a5:	05 78 01 00 00       	add    eax,0x178
c000b4aa:	83 ec 0c             	sub    esp,0xc
c000b4ad:	50                   	push   eax
c000b4ae:	e8 31 de ff ff       	call   c00092e4 <GDT::flush()>
c000b4b3:	83 c4 10             	add    esp,0x10
c000b4b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b4b9:	8b 00                	mov    eax,DWORD PTR [eax]
c000b4bb:	c9                   	leave  
c000b4bc:	c3                   	ret    
c000b4bd:	90                   	nop

c000b4be <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b4be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b4c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4c9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b4ce:	75 08                	jne    c000b4d8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b4d0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b4d6:	eb 38                	jmp    c000b510 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b4d8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b4dd:	75 17                	jne    c000b4f6 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b4df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b4e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b4e7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b4ed:	8b 10                	mov    edx,DWORD PTR [eax]
c000b4ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b4f3:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b4f6:	89 c1                	mov    ecx,eax
c000b4f8:	83 e1 fd             	and    ecx,0xfffffffd
c000b4fb:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b501:	74 cd                	je     c000b4d0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b503:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b508:	83 e0 ef             	and    eax,0xffffffef
c000b50b:	83 f8 08             	cmp    eax,0x8
c000b50e:	76 c0                	jbe    c000b4d0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b510:	31 c0                	xor    eax,eax
c000b512:	c3                   	ret    
c000b513:	90                   	nop

c000b514 <ReservedFilename::isAtty()>:
c000b514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b518:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b51b:	31 c0                	xor    eax,eax
c000b51d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b523:	74 09                	je     c000b52e <ReservedFilename::isAtty()+0x1a>
c000b525:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b52b:	0f 94 c0             	sete   al
c000b52e:	c3                   	ret    
c000b52f:	90                   	nop

c000b530 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b530:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b534:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b538:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b53b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b53f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b544:	75 08                	jne    c000b54e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b546:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b54c:	eb 3d                	jmp    c000b58b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b54e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b553:	75 17                	jne    c000b56c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b555:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b55a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b55d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b563:	8b 10                	mov    edx,DWORD PTR [eax]
c000b565:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b569:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b56c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b571:	75 04                	jne    c000b577 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b573:	89 0a                	mov    DWORD PTR [edx],ecx
c000b575:	eb 14                	jmp    c000b58b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b577:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b57c:	74 c8                	je     c000b546 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b57e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b583:	83 e0 ef             	and    eax,0xffffffef
c000b586:	83 f8 08             	cmp    eax,0x8
c000b589:	76 bb                	jbe    c000b546 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b58b:	31 c0                	xor    eax,eax
c000b58d:	c3                   	ret    

c000b58e <UnixFile::getFileDescriptor()>:
c000b58e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b592:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b595:	c3                   	ret    

c000b596 <UnixFile::UnixFile(int)>:
c000b596:	53                   	push   ebx
c000b597:	83 ec 28             	sub    esp,0x28
c000b59a:	ba 74 43 02 c0       	mov    edx,0xc0024374
c000b59f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5a3:	89 10                	mov    DWORD PTR [eax],edx
c000b5a5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b5ad:	0f 8f 8c 01 00 00    	jg     c000b73f <UnixFile::UnixFile(int)+0x1a9>
c000b5b3:	a1 20 73 02 c0       	mov    eax,ds:0xc0027320
c000b5b8:	8d 50 01             	lea    edx,[eax+0x1]
c000b5bb:	89 15 20 73 02 c0    	mov    DWORD PTR ds:0xc0027320,edx
c000b5c1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b5c5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b5c8:	83 ec 08             	sub    esp,0x8
c000b5cb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b5cf:	68 f8 7f 02 c0       	push   0xc0027ff8
c000b5d4:	e8 b3 73 01 00       	call   c002298c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b5d9:	83 c4 10             	add    esp,0x10
c000b5dc:	a0 f4 7f 02 c0       	mov    al,ds:0xc0027ff4
c000b5e1:	83 f0 01             	xor    eax,0x1
c000b5e4:	84 c0                	test   al,al
c000b5e6:	0f 84 54 01 00 00    	je     c000b740 <UnixFile::UnixFile(int)+0x1aa>
c000b5ec:	c6 05 f4 7f 02 c0 01 	mov    BYTE PTR ds:0xc0027ff4,0x1
c000b5f3:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b5fb:	83 ec 0c             	sub    esp,0xc
c000b5fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b602:	e8 08 e4 ff ff       	call   c0009a0f <malloc>
c000b607:	83 c4 10             	add    esp,0x10
c000b60a:	89 c3                	mov    ebx,eax
c000b60c:	83 ec 08             	sub    esp,0x8
c000b60f:	68 03 ff ff 0f       	push   0xfffff03
c000b614:	53                   	push   ebx
c000b615:	e8 2c 01 00 00       	call   c000b746 <ReservedFilename::ReservedFilename(int)>
c000b61a:	83 c4 10             	add    esp,0x10
c000b61d:	89 1d ec 7f 02 c0    	mov    DWORD PTR ds:0xc0027fec,ebx
c000b623:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b62b:	83 ec 0c             	sub    esp,0xc
c000b62e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b632:	e8 d8 e3 ff ff       	call   c0009a0f <malloc>
c000b637:	83 c4 10             	add    esp,0x10
c000b63a:	89 c3                	mov    ebx,eax
c000b63c:	83 ec 08             	sub    esp,0x8
c000b63f:	68 01 ff ff 0f       	push   0xfffff01
c000b644:	53                   	push   ebx
c000b645:	e8 fc 00 00 00       	call   c000b746 <ReservedFilename::ReservedFilename(int)>
c000b64a:	83 c4 10             	add    esp,0x10
c000b64d:	89 1d f0 7f 02 c0    	mov    DWORD PTR ds:0xc0027ff0,ebx
c000b653:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b65b:	83 ec 0c             	sub    esp,0xc
c000b65e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b662:	e8 a8 e3 ff ff       	call   c0009a0f <malloc>
c000b667:	83 c4 10             	add    esp,0x10
c000b66a:	89 c3                	mov    ebx,eax
c000b66c:	83 ec 08             	sub    esp,0x8
c000b66f:	68 00 ff ff 0f       	push   0xfffff00
c000b674:	53                   	push   ebx
c000b675:	e8 cc 00 00 00       	call   c000b746 <ReservedFilename::ReservedFilename(int)>
c000b67a:	83 c4 10             	add    esp,0x10
c000b67d:	89 1d e4 7f 02 c0    	mov    DWORD PTR ds:0xc0027fe4,ebx
c000b683:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b68b:	83 ec 0c             	sub    esp,0xc
c000b68e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b692:	e8 78 e3 ff ff       	call   c0009a0f <malloc>
c000b697:	83 c4 10             	add    esp,0x10
c000b69a:	89 c3                	mov    ebx,eax
c000b69c:	83 ec 08             	sub    esp,0x8
c000b69f:	68 02 ff ff 0f       	push   0xfffff02
c000b6a4:	53                   	push   ebx
c000b6a5:	e8 9c 00 00 00       	call   c000b746 <ReservedFilename::ReservedFilename(int)>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	89 1d e8 7f 02 c0    	mov    DWORD PTR ds:0xc0027fe8,ebx
c000b6b3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b6bb:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b6c0:	7f 7e                	jg     c000b740 <UnixFile::UnixFile(int)+0x1aa>
c000b6c2:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b6ca:	83 ec 0c             	sub    esp,0xc
c000b6cd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b6d1:	e8 39 e3 ff ff       	call   c0009a0f <malloc>
c000b6d6:	83 c4 10             	add    esp,0x10
c000b6d9:	89 c3                	mov    ebx,eax
c000b6db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6df:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b6e4:	83 ec 08             	sub    esp,0x8
c000b6e7:	50                   	push   eax
c000b6e8:	53                   	push   ebx
c000b6e9:	e8 58 00 00 00       	call   c000b746 <ReservedFilename::ReservedFilename(int)>
c000b6ee:	83 c4 10             	add    esp,0x10
c000b6f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6f5:	89 1c 85 c0 7f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8040],ebx
c000b6fc:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b704:	83 ec 0c             	sub    esp,0xc
c000b707:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70b:	e8 ff e2 ff ff       	call   c0009a0f <malloc>
c000b710:	83 c4 10             	add    esp,0x10
c000b713:	89 c3                	mov    ebx,eax
c000b715:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b719:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b71e:	83 ec 08             	sub    esp,0x8
c000b721:	50                   	push   eax
c000b722:	53                   	push   ebx
c000b723:	e8 1e 00 00 00       	call   c000b746 <ReservedFilename::ReservedFilename(int)>
c000b728:	83 c4 10             	add    esp,0x10
c000b72b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b72f:	89 1c 85 80 7f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8080],ebx
c000b736:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b73a:	e9 7c ff ff ff       	jmp    c000b6bb <UnixFile::UnixFile(int)+0x125>
c000b73f:	90                   	nop
c000b740:	83 c4 28             	add    esp,0x28
c000b743:	5b                   	pop    ebx
c000b744:	c3                   	ret    
c000b745:	90                   	nop

c000b746 <ReservedFilename::ReservedFilename(int)>:
c000b746:	83 ec 0c             	sub    esp,0xc
c000b749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b74d:	83 ec 08             	sub    esp,0x8
c000b750:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b754:	50                   	push   eax
c000b755:	e8 3c fe ff ff       	call   c000b596 <UnixFile::UnixFile(int)>
c000b75a:	83 c4 10             	add    esp,0x10
c000b75d:	ba 90 43 02 c0       	mov    edx,0xc0024390
c000b762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b766:	89 10                	mov    DWORD PTR [eax],edx
c000b768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b76c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b770:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b773:	90                   	nop
c000b774:	83 c4 0c             	add    esp,0xc
c000b777:	c3                   	ret    

c000b778 <UnixFile::~UnixFile()>:
c000b778:	83 ec 1c             	sub    esp,0x1c
c000b77b:	ba 74 43 02 c0       	mov    edx,0xc0024374
c000b780:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b784:	89 10                	mov    DWORD PTR [eax],edx
c000b786:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b78a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b78d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b792:	7f 73                	jg     c000b807 <UnixFile::~UnixFile()+0x8f>
c000b794:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b79c:	83 ec 0c             	sub    esp,0xc
c000b79f:	68 f8 7f 02 c0       	push   0xc0027ff8
c000b7a4:	e8 b7 72 01 00       	call   c0022a60 <LinkedList<UnixFile>::getFirstElement()>
c000b7a9:	83 c4 10             	add    esp,0x10
c000b7ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7b0:	83 ec 0c             	sub    esp,0xc
c000b7b3:	68 f8 7f 02 c0       	push   0xc0027ff8
c000b7b8:	e8 ab 72 01 00       	call   c0022a68 <LinkedList<UnixFile>::removeFirst()>
c000b7bd:	83 c4 10             	add    esp,0x10
c000b7c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7c4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b7c8:	74 40                	je     c000b80a <UnixFile::~UnixFile()+0x92>
c000b7ca:	83 ec 08             	sub    esp,0x8
c000b7cd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7d1:	68 f8 7f 02 c0       	push   0xc0027ff8
c000b7d6:	e8 b1 71 01 00       	call   c002298c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b7db:	83 c4 10             	add    esp,0x10
c000b7de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7e2:	8d 50 01             	lea    edx,[eax+0x1]
c000b7e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7e9:	3d 88 13 00 00       	cmp    eax,0x1388
c000b7ee:	0f 94 c0             	sete   al
c000b7f1:	84 c0                	test   al,al
c000b7f3:	74 a7                	je     c000b79c <UnixFile::~UnixFile()+0x24>
c000b7f5:	83 ec 0c             	sub    esp,0xc
c000b7f8:	68 4c 43 02 c0       	push   0xc002434c
c000b7fd:	e8 ed 90 00 00       	call   c00148ef <Krnl::panic(char const*)>
c000b802:	83 c4 10             	add    esp,0x10
c000b805:	eb 95                	jmp    c000b79c <UnixFile::~UnixFile()+0x24>
c000b807:	90                   	nop
c000b808:	eb 01                	jmp    c000b80b <UnixFile::~UnixFile()+0x93>
c000b80a:	90                   	nop
c000b80b:	90                   	nop
c000b80c:	83 c4 1c             	add    esp,0x1c
c000b80f:	c3                   	ret    

c000b810 <UnixFile::~UnixFile()>:
c000b810:	83 ec 0c             	sub    esp,0xc
c000b813:	83 ec 0c             	sub    esp,0xc
c000b816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b81a:	e8 59 ff ff ff       	call   c000b778 <UnixFile::~UnixFile()>
c000b81f:	83 c4 10             	add    esp,0x10
c000b822:	83 ec 08             	sub    esp,0x8
c000b825:	6a 0c                	push   0xc
c000b827:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b82b:	e8 ee 13 00 00       	call   c000cc1e <operator delete(void*, unsigned long)>
c000b830:	83 c4 10             	add    esp,0x10
c000b833:	83 c4 0c             	add    esp,0xc
c000b836:	c3                   	ret    
c000b837:	90                   	nop

c000b838 <ReservedFilename::~ReservedFilename()>:
c000b838:	83 ec 0c             	sub    esp,0xc
c000b83b:	ba 90 43 02 c0       	mov    edx,0xc0024390
c000b840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b844:	89 10                	mov    DWORD PTR [eax],edx
c000b846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b84a:	83 ec 0c             	sub    esp,0xc
c000b84d:	50                   	push   eax
c000b84e:	e8 25 ff ff ff       	call   c000b778 <UnixFile::~UnixFile()>
c000b853:	83 c4 10             	add    esp,0x10
c000b856:	90                   	nop
c000b857:	83 c4 0c             	add    esp,0xc
c000b85a:	c3                   	ret    
c000b85b:	90                   	nop

c000b85c <ReservedFilename::~ReservedFilename()>:
c000b85c:	83 ec 0c             	sub    esp,0xc
c000b85f:	83 ec 0c             	sub    esp,0xc
c000b862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b866:	e8 cd ff ff ff       	call   c000b838 <ReservedFilename::~ReservedFilename()>
c000b86b:	83 c4 10             	add    esp,0x10
c000b86e:	83 ec 08             	sub    esp,0x8
c000b871:	6a 0c                	push   0xc
c000b873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b877:	e8 a2 13 00 00       	call   c000cc1e <operator delete(void*, unsigned long)>
c000b87c:	83 c4 10             	add    esp,0x10
c000b87f:	83 c4 0c             	add    esp,0xc
c000b882:	c3                   	ret    

c000b883 <getFromFileDescriptor(int)>:
c000b883:	53                   	push   ebx
c000b884:	83 ec 08             	sub    esp,0x8
c000b887:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b88b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b891:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b897:	7f 2c                	jg     c000b8c5 <getFromFileDescriptor(int)+0x42>
c000b899:	83 ec 0c             	sub    esp,0xc
c000b89c:	68 f8 7f 02 c0       	push   0xc0027ff8
c000b8a1:	e8 ba 71 01 00       	call   c0022a60 <LinkedList<UnixFile>::getFirstElement()>
c000b8a6:	83 c4 10             	add    esp,0x10
c000b8a9:	85 c0                	test   eax,eax
c000b8ab:	75 04                	jne    c000b8b1 <getFromFileDescriptor(int)+0x2e>
c000b8ad:	31 c0                	xor    eax,eax
c000b8af:	eb 6e                	jmp    c000b91f <getFromFileDescriptor(int)+0x9c>
c000b8b1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b8b4:	74 69                	je     c000b91f <getFromFileDescriptor(int)+0x9c>
c000b8b6:	52                   	push   edx
c000b8b7:	52                   	push   edx
c000b8b8:	50                   	push   eax
c000b8b9:	68 f8 7f 02 c0       	push   0xc0027ff8
c000b8be:	e8 47 72 01 00       	call   c0022b0a <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b8c3:	eb e1                	jmp    c000b8a6 <getFromFileDescriptor(int)+0x23>
c000b8c5:	a1 ec 7f 02 c0       	mov    eax,ds:0xc0027fec
c000b8ca:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b8d0:	74 4d                	je     c000b91f <getFromFileDescriptor(int)+0x9c>
c000b8d2:	a1 f0 7f 02 c0       	mov    eax,ds:0xc0027ff0
c000b8d7:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b8dd:	74 40                	je     c000b91f <getFromFileDescriptor(int)+0x9c>
c000b8df:	a1 e8 7f 02 c0       	mov    eax,ds:0xc0027fe8
c000b8e4:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b8ea:	74 33                	je     c000b91f <getFromFileDescriptor(int)+0x9c>
c000b8ec:	a1 e4 7f 02 c0       	mov    eax,ds:0xc0027fe4
c000b8f1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b8f7:	74 26                	je     c000b91f <getFromFileDescriptor(int)+0x9c>
c000b8f9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b8ff:	83 f8 08             	cmp    eax,0x8
c000b902:	77 09                	ja     c000b90d <getFromFileDescriptor(int)+0x8a>
c000b904:	8b 04 85 c0 7f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8040]
c000b90b:	eb 12                	jmp    c000b91f <getFromFileDescriptor(int)+0x9c>
c000b90d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b913:	83 fb 08             	cmp    ebx,0x8
c000b916:	77 95                	ja     c000b8ad <getFromFileDescriptor(int)+0x2a>
c000b918:	8b 04 9d 80 7f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8080]
c000b91f:	83 c4 08             	add    esp,0x8
c000b922:	5b                   	pop    ebx
c000b923:	c3                   	ret    

c000b924 <__static_initialization_and_destruction_0(int, int)>:
c000b924:	83 ec 0c             	sub    esp,0xc
c000b927:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b92c:	75 34                	jne    c000b962 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b92e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b936:	75 2a                	jne    c000b962 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b938:	83 ec 0c             	sub    esp,0xc
c000b93b:	68 f8 7f 02 c0       	push   0xc0027ff8
c000b940:	e8 05 70 01 00       	call   c002294a <LinkedList<UnixFile>::LinkedList()>
c000b945:	83 c4 10             	add    esp,0x10
c000b948:	83 ec 04             	sub    esp,0x4
c000b94b:	68 44 71 02 c0       	push   0xc0027144
c000b950:	68 f8 7f 02 c0       	push   0xc0027ff8
c000b955:	68 48 29 02 c0       	push   0xc0022948
c000b95a:	e8 39 12 00 00       	call   c000cb98 <__cxa_atexit>
c000b95f:	83 c4 10             	add    esp,0x10
c000b962:	90                   	nop
c000b963:	83 c4 0c             	add    esp,0xc
c000b966:	c3                   	ret    

c000b967 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b967:	83 ec 0c             	sub    esp,0xc
c000b96a:	83 ec 08             	sub    esp,0x8
c000b96d:	68 ff ff 00 00       	push   0xffff
c000b972:	6a 01                	push   0x1
c000b974:	e8 ab ff ff ff       	call   c000b924 <__static_initialization_and_destruction_0(int, int)>
c000b979:	83 c4 10             	add    esp,0x10
c000b97c:	83 c4 0c             	add    esp,0xc
c000b97f:	c3                   	ret    

c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b980:	53                   	push   ebx
c000b981:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b985:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b989:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b98f:	89 c8                	mov    eax,ecx
c000b991:	d1 e8                	shr    eax,1
c000b993:	03 05 28 73 02 c0    	add    eax,DWORD PTR ds:0xc0027328
c000b999:	83 e1 01             	and    ecx,0x1
c000b99c:	8a 10                	mov    dl,BYTE PTR [eax]
c000b99e:	75 09                	jne    c000b9a9 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b9a0:	83 e2 f0             	and    edx,0xfffffff0
c000b9a3:	09 da                	or     edx,ebx
c000b9a5:	88 10                	mov    BYTE PTR [eax],dl
c000b9a7:	5b                   	pop    ebx
c000b9a8:	c3                   	ret    
c000b9a9:	c1 e3 04             	shl    ebx,0x4
c000b9ac:	83 e2 0f             	and    edx,0xf
c000b9af:	09 da                	or     edx,ebx
c000b9b1:	88 10                	mov    BYTE PTR [eax],dl
c000b9b3:	5b                   	pop    ebx
c000b9b4:	c3                   	ret    

c000b9b5 <Virt::getPageState(unsigned long)>:
c000b9b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9b9:	8b 0d 28 73 02 c0    	mov    ecx,DWORD PTR ds:0xc0027328
c000b9bf:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b9c5:	89 d0                	mov    eax,edx
c000b9c7:	d1 e8                	shr    eax,1
c000b9c9:	83 e2 01             	and    edx,0x1
c000b9cc:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b9cf:	75 04                	jne    c000b9d5 <Virt::getPageState(unsigned long)+0x20>
c000b9d1:	83 e0 0f             	and    eax,0xf
c000b9d4:	c3                   	ret    
c000b9d5:	c0 e8 04             	shr    al,0x4
c000b9d8:	c3                   	ret    

c000b9d9 <Virt::allocateKernelVirtualPages(int)>:
c000b9d9:	55                   	push   ebp
c000b9da:	31 ed                	xor    ebp,ebp
c000b9dc:	57                   	push   edi
c000b9dd:	56                   	push   esi
c000b9de:	53                   	push   ebx
c000b9df:	31 db                	xor    ebx,ebx
c000b9e1:	83 ec 1c             	sub    esp,0x1c
c000b9e4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b9e8:	8b 3d 24 73 02 c0    	mov    edi,DWORD PTR ds:0xc0027324
c000b9ee:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b9f3:	57                   	push   edi
c000b9f4:	e8 bc ff ff ff       	call   c000b9b5 <Virt::getPageState(unsigned long)>
c000b9f9:	5a                   	pop    edx
c000b9fa:	84 c0                	test   al,al
c000b9fc:	75 3a                	jne    c000ba38 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b9fe:	85 db                	test   ebx,ebx
c000ba00:	75 02                	jne    c000ba04 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000ba02:	89 fd                	mov    ebp,edi
c000ba04:	43                   	inc    ebx
c000ba05:	39 f3                	cmp    ebx,esi
c000ba07:	74 5a                	je     c000ba63 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000ba09:	47                   	inc    edi
c000ba0a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000ba10:	76 31                	jbe    c000ba43 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000ba12:	c7 05 24 73 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0027324,0xc8000
c000ba1c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ba21:	75 28                	jne    c000ba4b <Virt::allocateKernelVirtualPages(int)+0x72>
c000ba23:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ba28:	bf 00 80 0c 00       	mov    edi,0xc8000
c000ba2d:	57                   	push   edi
c000ba2e:	e8 82 ff ff ff       	call   c000b9b5 <Virt::getPageState(unsigned long)>
c000ba33:	5a                   	pop    edx
c000ba34:	84 c0                	test   al,al
c000ba36:	74 c6                	je     c000b9fe <Virt::allocateKernelVirtualPages(int)+0x25>
c000ba38:	31 db                	xor    ebx,ebx
c000ba3a:	47                   	inc    edi
c000ba3b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000ba41:	77 cf                	ja     c000ba12 <Virt::allocateKernelVirtualPages(int)+0x39>
c000ba43:	89 3d 24 73 02 c0    	mov    DWORD PTR ds:0xc0027324,edi
c000ba49:	eb a8                	jmp    c000b9f3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000ba4b:	83 ec 0c             	sub    esp,0xc
c000ba4e:	68 a4 43 02 c0       	push   0xc00243a4
c000ba53:	e8 97 8e 00 00       	call   c00148ef <Krnl::panic(char const*)>
c000ba58:	8b 3d 24 73 02 c0    	mov    edi,DWORD PTR ds:0xc0027324
c000ba5e:	83 c4 10             	add    esp,0x10
c000ba61:	eb 90                	jmp    c000b9f3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000ba63:	89 2d 24 73 02 c0    	mov    DWORD PTR ds:0xc0027324,ebp
c000ba69:	4b                   	dec    ebx
c000ba6a:	74 5f                	je     c000bacb <Virt::allocateKernelVirtualPages(int)+0xf2>
c000ba6c:	85 f6                	test   esi,esi
c000ba6e:	74 3d                	je     c000baad <Virt::allocateKernelVirtualPages(int)+0xd4>
c000ba70:	89 e8                	mov    eax,ebp
c000ba72:	31 db                	xor    ebx,ebx
c000ba74:	8d 7e ff             	lea    edi,[esi-0x1]
c000ba77:	eb 14                	jmp    c000ba8d <Virt::allocateKernelVirtualPages(int)+0xb4>
c000ba79:	6a 01                	push   0x1
c000ba7b:	43                   	inc    ebx
c000ba7c:	50                   	push   eax
c000ba7d:	e8 fe fe ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba82:	58                   	pop    eax
c000ba83:	39 f3                	cmp    ebx,esi
c000ba85:	5a                   	pop    edx
c000ba86:	74 25                	je     c000baad <Virt::allocateKernelVirtualPages(int)+0xd4>
c000ba88:	a1 24 73 02 c0       	mov    eax,ds:0xc0027324
c000ba8d:	8d 50 01             	lea    edx,[eax+0x1]
c000ba90:	85 db                	test   ebx,ebx
c000ba92:	89 15 24 73 02 c0    	mov    DWORD PTR ds:0xc0027324,edx
c000ba98:	74 20                	je     c000baba <Virt::allocateKernelVirtualPages(int)+0xe1>
c000ba9a:	39 df                	cmp    edi,ebx
c000ba9c:	75 db                	jne    c000ba79 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000ba9e:	6a 03                	push   0x3
c000baa0:	43                   	inc    ebx
c000baa1:	50                   	push   eax
c000baa2:	e8 d9 fe ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000baa7:	59                   	pop    ecx
c000baa8:	39 f3                	cmp    ebx,esi
c000baaa:	58                   	pop    eax
c000baab:	75 db                	jne    c000ba88 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000baad:	83 c4 1c             	add    esp,0x1c
c000bab0:	89 e8                	mov    eax,ebp
c000bab2:	5b                   	pop    ebx
c000bab3:	c1 e0 0c             	shl    eax,0xc
c000bab6:	5e                   	pop    esi
c000bab7:	5f                   	pop    edi
c000bab8:	5d                   	pop    ebp
c000bab9:	c3                   	ret    
c000baba:	6a 02                	push   0x2
c000babc:	bb 01 00 00 00       	mov    ebx,0x1
c000bac1:	50                   	push   eax
c000bac2:	e8 b9 fe ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bac7:	58                   	pop    eax
c000bac8:	5a                   	pop    edx
c000bac9:	eb bd                	jmp    c000ba88 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bacb:	6a 04                	push   0x4
c000bacd:	8d 45 01             	lea    eax,[ebp+0x1]
c000bad0:	55                   	push   ebp
c000bad1:	a3 24 73 02 c0       	mov    ds:0xc0027324,eax
c000bad6:	e8 a5 fe ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000badb:	59                   	pop    ecx
c000badc:	89 e8                	mov    eax,ebp
c000bade:	5b                   	pop    ebx
c000badf:	c1 e0 0c             	shl    eax,0xc
c000bae2:	83 c4 1c             	add    esp,0x1c
c000bae5:	5b                   	pop    ebx
c000bae6:	5e                   	pop    esi
c000bae7:	5f                   	pop    edi
c000bae8:	5d                   	pop    ebp
c000bae9:	c3                   	ret    

c000baea <Virt::freeSwapfilePage(unsigned long)>:
c000baea:	53                   	push   ebx
c000baeb:	8b 15 0c 80 02 c0    	mov    edx,DWORD PTR ds:0xc002800c
c000baf1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000baf5:	b8 01 00 00 00       	mov    eax,0x1
c000bafa:	89 cb                	mov    ebx,ecx
c000bafc:	d3 e0                	shl    eax,cl
c000bafe:	c1 eb 05             	shr    ebx,0x5
c000bb01:	f7 d0                	not    eax
c000bb03:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000bb06:	5b                   	pop    ebx
c000bb07:	c3                   	ret    

c000bb08 <Virt::swapIDToSector(unsigned long)>:
c000bb08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb0c:	0f af 05 2c 73 02 c0 	imul   eax,DWORD PTR ds:0xc002732c
c000bb13:	03 05 34 73 02 c0    	add    eax,DWORD PTR ds:0xc0027334
c000bb19:	c3                   	ret    

c000bb1a <Virt::allocateSwapfilePage()>:
c000bb1a:	55                   	push   ebp
c000bb1b:	31 d2                	xor    edx,edx
c000bb1d:	57                   	push   edi
c000bb1e:	56                   	push   esi
c000bb1f:	53                   	push   ebx
c000bb20:	83 ec 0c             	sub    esp,0xc
c000bb23:	8b 0d 2c 73 02 c0    	mov    ecx,DWORD PTR ds:0xc002732c
c000bb29:	a1 30 73 02 c0       	mov    eax,ds:0xc0027330
c000bb2e:	f7 f1                	div    ecx
c000bb30:	39 0d 30 73 02 c0    	cmp    DWORD PTR ds:0xc0027330,ecx
c000bb36:	72 2d                	jb     c000bb65 <Virt::allocateSwapfilePage()+0x4b>
c000bb38:	8b 35 0c 80 02 c0    	mov    esi,DWORD PTR ds:0xc002800c
c000bb3e:	8b 16                	mov    edx,DWORD PTR [esi]
c000bb40:	f6 c2 01             	test   dl,0x1
c000bb43:	74 3c                	je     c000bb81 <Virt::allocateSwapfilePage()+0x67>
c000bb45:	31 c9                	xor    ecx,ecx
c000bb47:	bf 01 00 00 00       	mov    edi,0x1
c000bb4c:	eb 12                	jmp    c000bb60 <Virt::allocateSwapfilePage()+0x46>
c000bb4e:	89 fd                	mov    ebp,edi
c000bb50:	89 ca                	mov    edx,ecx
c000bb52:	d3 e5                	shl    ebp,cl
c000bb54:	c1 ea 05             	shr    edx,0x5
c000bb57:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000bb5a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bb5c:	85 ea                	test   edx,ebp
c000bb5e:	74 2a                	je     c000bb8a <Virt::allocateSwapfilePage()+0x70>
c000bb60:	41                   	inc    ecx
c000bb61:	39 c8                	cmp    eax,ecx
c000bb63:	77 e9                	ja     c000bb4e <Virt::allocateSwapfilePage()+0x34>
c000bb65:	83 ec 0c             	sub    esp,0xc
c000bb68:	68 5c 45 02 c0       	push   0xc002455c
c000bb6d:	e8 7d 8d 00 00       	call   c00148ef <Krnl::panic(char const*)>
c000bb72:	83 c4 10             	add    esp,0x10
c000bb75:	31 c9                	xor    ecx,ecx
c000bb77:	83 c4 0c             	add    esp,0xc
c000bb7a:	89 c8                	mov    eax,ecx
c000bb7c:	5b                   	pop    ebx
c000bb7d:	5e                   	pop    esi
c000bb7e:	5f                   	pop    edi
c000bb7f:	5d                   	pop    ebp
c000bb80:	c3                   	ret    
c000bb81:	89 f3                	mov    ebx,esi
c000bb83:	bd 01 00 00 00       	mov    ebp,0x1
c000bb88:	31 c9                	xor    ecx,ecx
c000bb8a:	09 ea                	or     edx,ebp
c000bb8c:	89 c8                	mov    eax,ecx
c000bb8e:	89 13                	mov    DWORD PTR [ebx],edx
c000bb90:	83 c4 0c             	add    esp,0xc
c000bb93:	5b                   	pop    ebx
c000bb94:	5e                   	pop    esi
c000bb95:	5f                   	pop    edi
c000bb96:	5d                   	pop    ebp
c000bb97:	c3                   	ret    

c000bb98 <Virt::virtualMemorySetup()>:
c000bb98:	53                   	push   ebx
c000bb99:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bb9e:	6a 0f                	push   0xf
c000bba0:	53                   	push   ebx
c000bba1:	43                   	inc    ebx
c000bba2:	e8 d9 fd ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bba7:	58                   	pop    eax
c000bba8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bbae:	5a                   	pop    edx
c000bbaf:	75 ed                	jne    c000bb9e <Virt::virtualMemorySetup()+0x6>
c000bbb1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bbb6:	6a 00                	push   0x0
c000bbb8:	53                   	push   ebx
c000bbb9:	43                   	inc    ebx
c000bbba:	e8 c1 fd ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bbbf:	59                   	pop    ecx
c000bbc0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bbc6:	58                   	pop    eax
c000bbc7:	75 ed                	jne    c000bbb6 <Virt::virtualMemorySetup()+0x1e>
c000bbc9:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000bbce:	6a 0f                	push   0xf
c000bbd0:	53                   	push   ebx
c000bbd1:	43                   	inc    ebx
c000bbd2:	e8 a9 fd ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bbd7:	58                   	pop    eax
c000bbd8:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bbde:	5a                   	pop    edx
c000bbdf:	75 ed                	jne    c000bbce <Virt::virtualMemorySetup()+0x36>
c000bbe1:	5b                   	pop    ebx
c000bbe2:	c3                   	ret    

c000bbe3 <Virt::setupPageSwapping(int)>:
c000bbe3:	53                   	push   ebx
c000bbe4:	83 ec 0c             	sub    esp,0xc
c000bbe7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bbeb:	a1 a8 84 02 c0       	mov    eax,ds:0xc00284a8
c000bbf0:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bbf6:	8b 10                	mov    edx,DWORD PTR [eax]
c000bbf8:	53                   	push   ebx
c000bbf9:	c1 e3 0b             	shl    ebx,0xb
c000bbfc:	68 73 45 02 c0       	push   0xc0024573
c000bc01:	50                   	push   eax
c000bc02:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bc05:	89 1d 30 73 02 c0    	mov    DWORD PTR ds:0xc0027330,ebx
c000bc0b:	c6 05 38 73 02 c0 43 	mov    BYTE PTR ds:0xc0027338,0x43
c000bc12:	c1 eb 08             	shr    ebx,0x8
c000bc15:	a3 34 73 02 c0       	mov    ds:0xc0027334,eax
c000bc1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bc1d:	c7 05 2c 73 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002732c,0x8
c000bc27:	e8 e3 dd ff ff       	call   c0009a0f <malloc>
c000bc2c:	83 c4 0c             	add    esp,0xc
c000bc2f:	89 c1                	mov    ecx,eax
c000bc31:	a3 0c 80 02 c0       	mov    ds:0xc002800c,eax
c000bc36:	31 d2                	xor    edx,edx
c000bc38:	a1 30 73 02 c0       	mov    eax,ds:0xc0027330
c000bc3d:	f7 35 2c 73 02 c0    	div    DWORD PTR ds:0xc002732c
c000bc43:	c1 e8 05             	shr    eax,0x5
c000bc46:	50                   	push   eax
c000bc47:	6a 00                	push   0x0
c000bc49:	51                   	push   ecx
c000bc4a:	e8 35 4a ff ff       	call   c0000684 <memset>
c000bc4f:	83 c4 18             	add    esp,0x18
c000bc52:	5b                   	pop    ebx
c000bc53:	c3                   	ret    

c000bc54 <VAS::VAS()>:
c000bc54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc58:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc63:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bc6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc6e:	a3 10 80 02 c0       	mov    ds:0xc0028010,eax
c000bc73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc77:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000bc7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc7f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000bc82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc86:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000bc8d:	90                   	nop
c000bc8e:	c3                   	ret    
c000bc8f:	90                   	nop

c000bc90 <VAS::VAS(VAS*)>:
c000bc90:	83 ec 0c             	sub    esp,0xc
c000bc93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc97:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bca9:	83 ec 0c             	sub    esp,0xc
c000bcac:	68 c4 43 02 c0       	push   0xc00243c4
c000bcb1:	e8 39 8c 00 00       	call   c00148ef <Krnl::panic(char const*)>
c000bcb6:	83 c4 10             	add    esp,0x10
c000bcb9:	90                   	nop
c000bcba:	83 c4 0c             	add    esp,0xc
c000bcbd:	c3                   	ret    

c000bcbe <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000bcbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bcc2:	89 c2                	mov    edx,eax
c000bcc4:	c1 e8 0a             	shr    eax,0xa
c000bcc7:	c1 ea 16             	shr    edx,0x16
c000bcca:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bccf:	19 c9                	sbb    ecx,ecx
c000bcd1:	c1 e2 0c             	shl    edx,0xc
c000bcd4:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000bcda:	25 fc 0f 00 00       	and    eax,0xffc
c000bcdf:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000bce6:	01 d0                	add    eax,edx
c000bce8:	c3                   	ret    
c000bce9:	90                   	nop

c000bcea <VAS::getPageTableEntry(unsigned long)>:
c000bcea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bcee:	89 ca                	mov    edx,ecx
c000bcf0:	c1 e9 0a             	shr    ecx,0xa
c000bcf3:	c1 ea 16             	shr    edx,0x16
c000bcf6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000bcfc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000bd02:	c1 e0 0c             	shl    eax,0xc
c000bd05:	8d 04 08             	lea    eax,[eax+ecx*1]
c000bd08:	c3                   	ret    

c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>:
c000bd09:	57                   	push   edi
c000bd0a:	56                   	push   esi
c000bd0b:	be 01 00 00 00       	mov    esi,0x1
c000bd10:	53                   	push   ebx
c000bd11:	83 ec 10             	sub    esp,0x10
c000bd14:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bd18:	c1 eb 0c             	shr    ebx,0xc
c000bd1b:	eb 3f                	jmp    c000bd5c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000bd1d:	83 ec 08             	sub    esp,0x8
c000bd20:	57                   	push   edi
c000bd21:	ff 35 10 80 02 c0    	push   DWORD PTR ds:0xc0028010
c000bd27:	e8 be ff ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000bd2c:	83 c4 10             	add    esp,0x10
c000bd2f:	8b 00                	mov    eax,DWORD PTR [eax]
c000bd31:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bd35:	f6 c4 04             	test   ah,0x4
c000bd38:	75 5f                	jne    c000bd99 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000bd3a:	80 fa 04             	cmp    dl,0x4
c000bd3d:	74 78                	je     c000bdb7 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000bd3f:	80 fa 02             	cmp    dl,0x2
c000bd42:	0f 84 88 00 00 00    	je     c000bdd0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000bd48:	80 fa 03             	cmp    dl,0x3
c000bd4b:	0f 84 ad 00 00 00    	je     c000bdfe <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000bd51:	fe ca                	dec    dl
c000bd53:	0f 84 92 00 00 00    	je     c000bdeb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bd59:	43                   	inc    ebx
c000bd5a:	31 f6                	xor    esi,esi
c000bd5c:	53                   	push   ebx
c000bd5d:	89 df                	mov    edi,ebx
c000bd5f:	e8 51 fc ff ff       	call   c000b9b5 <Virt::getPageState(unsigned long)>
c000bd64:	c1 e7 0c             	shl    edi,0xc
c000bd67:	59                   	pop    ecx
c000bd68:	84 c0                	test   al,al
c000bd6a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000bd6e:	75 ad                	jne    c000bd1d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000bd70:	83 ec 0c             	sub    esp,0xc
c000bd73:	68 8a 45 02 c0       	push   0xc002458a
c000bd78:	e8 72 8b 00 00       	call   c00148ef <Krnl::panic(char const*)>
c000bd7d:	58                   	pop    eax
c000bd7e:	5a                   	pop    edx
c000bd7f:	57                   	push   edi
c000bd80:	ff 35 10 80 02 c0    	push   DWORD PTR ds:0xc0028010
c000bd86:	e8 5f ff ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000bd8b:	83 c4 10             	add    esp,0x10
c000bd8e:	8b 00                	mov    eax,DWORD PTR [eax]
c000bd90:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bd94:	f6 c4 04             	test   ah,0x4
c000bd97:	74 c0                	je     c000bd59 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bd99:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000bd9d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bda2:	83 ec 0c             	sub    esp,0xc
c000bda5:	50                   	push   eax
c000bda6:	e8 98 e2 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000bdab:	83 c4 10             	add    esp,0x10
c000bdae:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bdb2:	80 fa 04             	cmp    dl,0x4
c000bdb5:	75 88                	jne    c000bd3f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000bdb7:	89 f0                	mov    eax,esi
c000bdb9:	84 c0                	test   al,al
c000bdbb:	75 47                	jne    c000be04 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000bdbd:	c7 44 24 20 e8 43 02 c0 	mov    DWORD PTR [esp+0x20],0xc00243e8
c000bdc5:	83 c4 10             	add    esp,0x10
c000bdc8:	5b                   	pop    ebx
c000bdc9:	5e                   	pop    esi
c000bdca:	5f                   	pop    edi
c000bdcb:	e9 1f 8b 00 00       	jmp    c00148ef <Krnl::panic(char const*)>
c000bdd0:	89 f0                	mov    eax,esi
c000bdd2:	84 c0                	test   al,al
c000bdd4:	75 15                	jne    c000bdeb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bdd6:	83 ec 0c             	sub    esp,0xc
c000bdd9:	68 a6 45 02 c0       	push   0xc00245a6
c000bdde:	e8 0c 8b 00 00       	call   c00148ef <Krnl::panic(char const*)>
c000bde3:	83 c4 10             	add    esp,0x10
c000bde6:	e9 6e ff ff ff       	jmp    c000bd59 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bdeb:	83 ec 08             	sub    esp,0x8
c000bdee:	6a 00                	push   0x0
c000bdf0:	53                   	push   ebx
c000bdf1:	e8 8a fb ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bdf6:	83 c4 10             	add    esp,0x10
c000bdf9:	e9 5b ff ff ff       	jmp    c000bd59 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bdfe:	89 f0                	mov    eax,esi
c000be00:	84 c0                	test   al,al
c000be02:	75 15                	jne    c000be19 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000be04:	83 ec 08             	sub    esp,0x8
c000be07:	6a 00                	push   0x0
c000be09:	53                   	push   ebx
c000be0a:	e8 71 fb ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be0f:	83 c4 10             	add    esp,0x10
c000be12:	83 c4 10             	add    esp,0x10
c000be15:	5b                   	pop    ebx
c000be16:	5e                   	pop    esi
c000be17:	5f                   	pop    edi
c000be18:	c3                   	ret    
c000be19:	c7 44 24 20 c2 45 02 c0 	mov    DWORD PTR [esp+0x20],0xc00245c2
c000be21:	83 c4 10             	add    esp,0x10
c000be24:	5b                   	pop    ebx
c000be25:	5e                   	pop    esi
c000be26:	5f                   	pop    edi
c000be27:	e9 c3 8a 00 00       	jmp    c00148ef <Krnl::panic(char const*)>

c000be2c <VAS::freeAllocatedPages(unsigned long)>:
c000be2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000be34:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000be38:	74 09                	je     c000be43 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000be3a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000be3e:	e9 c6 fe ff ff       	jmp    c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c000be43:	c7 44 24 04 0c 44 02 c0 	mov    DWORD PTR [esp+0x4],0xc002440c
c000be4b:	e9 af 0e 00 00       	jmp    c000ccff <Dbg::kprintf(char const*, ...)>

c000be50 <VAS::virtualToPhysical(unsigned long)>:
c000be50:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000be54:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000be58:	e8 8d fe ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000be5d:	5a                   	pop    edx
c000be5e:	8b 00                	mov    eax,DWORD PTR [eax]
c000be60:	59                   	pop    ecx
c000be61:	25 00 f0 ff ff       	and    eax,0xfffff000
c000be66:	c3                   	ret    
c000be67:	90                   	nop

c000be68 <VAS::reflagRange(unsigned long, int, int, int)>:
c000be68:	55                   	push   ebp
c000be69:	57                   	push   edi
c000be6a:	56                   	push   esi
c000be6b:	53                   	push   ebx
c000be6c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be70:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000be74:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be78:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000be7c:	85 db                	test   ebx,ebx
c000be7e:	7e 22                	jle    c000bea2 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000be80:	c1 e3 0c             	shl    ebx,0xc
c000be83:	01 f3                	add    ebx,esi
c000be85:	56                   	push   esi
c000be86:	81 c6 00 10 00 00    	add    esi,0x1000
c000be8c:	55                   	push   ebp
c000be8d:	e8 58 fe ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000be92:	5a                   	pop    edx
c000be93:	59                   	pop    ecx
c000be94:	8b 08                	mov    ecx,DWORD PTR [eax]
c000be96:	21 f9                	and    ecx,edi
c000be98:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000be9c:	39 f3                	cmp    ebx,esi
c000be9e:	89 08                	mov    DWORD PTR [eax],ecx
c000bea0:	75 e3                	jne    c000be85 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000bea2:	5b                   	pop    ebx
c000bea3:	5e                   	pop    esi
c000bea4:	5f                   	pop    edi
c000bea5:	5d                   	pop    ebp
c000bea6:	c3                   	ret    
c000bea7:	90                   	nop

c000bea8 <VAS::setToWriteCombining(unsigned long, int)>:
c000bea8:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000bead:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000beb3:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000beba:	75 01                	jne    c000bebd <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000bebc:	c3                   	ret    
c000bebd:	68 80 00 00 00       	push   0x80
c000bec2:	6a ff                	push   0xffffffff
c000bec4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000becc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed0:	e8 93 ff ff ff       	call   c000be68 <VAS::reflagRange(unsigned long, int, int, int)>
c000bed5:	83 c4 14             	add    esp,0x14
c000bed8:	c3                   	ret    
c000bed9:	90                   	nop

c000beda <VAS::mapOtherVASIn(bool, VAS*)>:
c000beda:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bedf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bee3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000bee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000beea:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000beed:	19 c0                	sbb    eax,eax
c000beef:	83 ca 03             	or     edx,0x3
c000bef2:	83 e0 fc             	and    eax,0xfffffffc
c000bef5:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000befc:	0f 20 d8             	mov    eax,cr3
c000beff:	0f 22 d8             	mov    cr3,eax
c000bf02:	c3                   	ret    
c000bf03:	90                   	nop

c000bf04 <VAS::~VAS()>:
c000bf04:	83 ec 2c             	sub    esp,0x2c
c000bf07:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bf0f:	fa                   	cli    
c000bf10:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c000bf15:	40                   	inc    eax
c000bf16:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c000bf1b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bf20:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf22:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bf25:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bf2b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bf2f:	6a 01                	push   0x1
c000bf31:	50                   	push   eax
c000bf32:	e8 a3 ff ff ff       	call   c000beda <VAS::mapOtherVASIn(bool, VAS*)>
c000bf37:	83 c4 0c             	add    esp,0xc
c000bf3a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bf42:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000bf4a:	0f 8f d4 00 00 00    	jg     c000c024 <VAS::~VAS()+0x120>
c000bf50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf54:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bf5b:	c1 e2 02             	shl    edx,0x2
c000bf5e:	01 d0                	add    eax,edx
c000bf60:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf6a:	83 e0 01             	and    eax,0x1
c000bf6d:	0f 84 a8 00 00 00    	je     c000c01b <VAS::~VAS()+0x117>
c000bf73:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bf7b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bf83:	7f 72                	jg     c000bff7 <VAS::~VAS()+0xf3>
c000bf85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf89:	c1 e0 0a             	shl    eax,0xa
c000bf8c:	89 c2                	mov    edx,eax
c000bf8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf92:	01 d0                	add    eax,edx
c000bf94:	c1 e0 0c             	shl    eax,0xc
c000bf97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bf9b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bfa0:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfa2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bfa5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bfab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfaf:	6a 01                	push   0x1
c000bfb1:	50                   	push   eax
c000bfb2:	e8 07 fd ff ff       	call   c000bcbe <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bfb7:	83 c4 0c             	add    esp,0xc
c000bfba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bfc2:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfc4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bfc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfcc:	25 01 04 00 00       	and    eax,0x401
c000bfd1:	3d 01 04 00 00       	cmp    eax,0x401
c000bfd6:	75 19                	jne    c000bff1 <VAS::~VAS()+0xed>
c000bfd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfdc:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bfe1:	83 ec 0c             	sub    esp,0xc
c000bfe4:	50                   	push   eax
c000bfe5:	e8 59 e0 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000bfea:	83 c4 10             	add    esp,0x10
c000bfed:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bff1:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bff5:	eb 84                	jmp    c000bf7b <VAS::~VAS()+0x77>
c000bff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bffb:	25 00 04 00 00       	and    eax,0x400
c000c000:	74 19                	je     c000c01b <VAS::~VAS()+0x117>
c000c002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c006:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c00b:	83 ec 0c             	sub    esp,0xc
c000c00e:	50                   	push   eax
c000c00f:	e8 2f e0 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000c014:	83 c4 10             	add    esp,0x10
c000c017:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c01b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c01f:	e9 1e ff ff ff       	jmp    c000bf42 <VAS::~VAS()+0x3e>
c000c024:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c028:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c02b:	83 ec 0c             	sub    esp,0xc
c000c02e:	50                   	push   eax
c000c02f:	e8 d5 fc ff ff       	call   c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c000c034:	83 c4 10             	add    esp,0x10
c000c037:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c03b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 fc df ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c04e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c052:	c1 e0 02             	shl    eax,0x2
c000c055:	83 ec 08             	sub    esp,0x8
c000c058:	50                   	push   eax
c000c059:	68 30 44 02 c0       	push   0xc0024430
c000c05e:	e8 9c 0c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c000c06b:	48                   	dec    eax
c000c06c:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c000c071:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c000c076:	85 c0                	test   eax,eax
c000c078:	75 01                	jne    c000c07b <VAS::~VAS()+0x177>
c000c07a:	fb                   	sti    
c000c07b:	90                   	nop
c000c07c:	83 c4 2c             	add    esp,0x2c
c000c07f:	c3                   	ret    

c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c080:	55                   	push   ebp
c000c081:	57                   	push   edi
c000c082:	56                   	push   esi
c000c083:	53                   	push   ebx
c000c084:	83 ec 1c             	sub    esp,0x1c
c000c087:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c08b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c08f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c095:	77 08                	ja     c000c09f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000c097:	0f 20 d8             	mov    eax,cr3
c000c09a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c09d:	75 47                	jne    c000c0e6 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000c09f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c0a3:	09 d8                	or     eax,ebx
c000c0a5:	a9 ff 0f 00 00       	test   eax,0xfff
c000c0aa:	75 57                	jne    c000c103 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000c0ac:	89 de                	mov    esi,ebx
c000c0ae:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c0b1:	c1 ee 16             	shr    esi,0x16
c000c0b4:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c0bb:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c0bf:	74 54                	je     c000c115 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000c0c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0c5:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c0cb:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c0cf:	c1 e6 0c             	shl    esi,0xc
c000c0d2:	c1 eb 0a             	shr    ebx,0xa
c000c0d5:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c0db:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c0de:	83 c4 1c             	add    esp,0x1c
c000c0e1:	5b                   	pop    ebx
c000c0e2:	5e                   	pop    esi
c000c0e3:	5f                   	pop    edi
c000c0e4:	5d                   	pop    ebp
c000c0e5:	c3                   	ret    
c000c0e6:	83 ec 0c             	sub    esp,0xc
c000c0e9:	68 50 44 02 c0       	push   0xc0024450
c000c0ee:	e8 0c 0c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000c0f3:	83 c4 10             	add    esp,0x10
c000c0f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c0fa:	09 d8                	or     eax,ebx
c000c0fc:	a9 ff 0f 00 00       	test   eax,0xfff
c000c101:	74 a9                	je     c000c0ac <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c103:	83 ec 0c             	sub    esp,0xc
c000c106:	68 b8 44 02 c0       	push   0xc00244b8
c000c10b:	e8 df 87 00 00       	call   c00148ef <Krnl::panic(char const*)>
c000c110:	83 c4 10             	add    esp,0x10
c000c113:	eb 97                	jmp    c000c0ac <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c115:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c119:	e8 a8 df ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c11e:	83 ec 0c             	sub    esp,0xc
c000c121:	89 c5                	mov    ebp,eax
c000c123:	8b 0d 10 80 02 c0    	mov    ecx,DWORD PTR ds:0xc0028010
c000c129:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c12d:	6a 01                	push   0x1
c000c12f:	e8 a5 f8 ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c000c134:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c13b:	6a 01                	push   0x1
c000c13d:	50                   	push   eax
c000c13e:	55                   	push   ebp
c000c13f:	81 cd 07 04 00 00    	or     ebp,0x407
c000c145:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c149:	51                   	push   ecx
c000c14a:	e8 27 02 00 00       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c14f:	83 c4 1c             	add    esp,0x1c
c000c152:	68 00 10 00 00       	push   0x1000
c000c157:	6a 00                	push   0x0
c000c159:	50                   	push   eax
c000c15a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c15e:	e8 21 45 ff ff       	call   c0000684 <memset>
c000c163:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c167:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c16a:	e8 9a fb ff ff       	call   c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c000c16f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c173:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c176:	83 c4 10             	add    esp,0x10
c000c179:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c17c:	e9 40 ff ff ff       	jmp    c000c0c1 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000c181:	90                   	nop

c000c182 <VAS::allocatePages(int, int)>:
c000c182:	55                   	push   ebp
c000c183:	57                   	push   edi
c000c184:	56                   	push   esi
c000c185:	53                   	push   ebx
c000c186:	83 ec 1c             	sub    esp,0x1c
c000c189:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c18d:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000c192:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c198:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c19e:	83 e0 01             	and    eax,0x1
c000c1a1:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c1a5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c1a9:	0f 85 cc 00 00 00    	jne    c000c27b <VAS::allocatePages(int, int)+0xf9>
c000c1af:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c1b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c1b6:	85 c0                	test   eax,eax
c000c1b8:	0f 84 a1 00 00 00    	je     c000c25f <VAS::allocatePages(int, int)+0xdd>
c000c1be:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c1c2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c1c6:	c1 e6 0c             	shl    esi,0xc
c000c1c9:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c1cd:	85 c0                	test   eax,eax
c000c1cf:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c1d2:	7e 33                	jle    c000c207 <VAS::allocatePages(int, int)+0x85>
c000c1d4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c1d8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1dc:	81 cd 00 04 00 00    	or     ebp,0x400
c000c1e2:	e8 df de ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c1e7:	55                   	push   ebp
c000c1e8:	53                   	push   ebx
c000c1e9:	50                   	push   eax
c000c1ea:	57                   	push   edi
c000c1eb:	e8 90 fe ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c1f0:	83 c4 10             	add    esp,0x10
c000c1f3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c1f8:	74 03                	je     c000c1fd <VAS::allocatePages(int, int)+0x7b>
c000c1fa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c1fd:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c203:	39 de                	cmp    esi,ebx
c000c205:	75 db                	jne    c000c1e2 <VAS::allocatePages(int, int)+0x60>
c000c207:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c20c:	75 12                	jne    c000c220 <VAS::allocatePages(int, int)+0x9e>
c000c20e:	0f 20 d8             	mov    eax,cr3
c000c211:	0f 22 d8             	mov    cr3,eax
c000c214:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c218:	83 c4 1c             	add    esp,0x1c
c000c21b:	5b                   	pop    ebx
c000c21c:	5e                   	pop    esi
c000c21d:	5f                   	pop    edi
c000c21e:	5d                   	pop    ebp
c000c21f:	c3                   	ret    
c000c220:	c1 ee 0a             	shr    esi,0xa
c000c223:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c227:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c22d:	c1 eb 0a             	shr    ebx,0xa
c000c230:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c236:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c23c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c242:	39 c3                	cmp    ebx,eax
c000c244:	77 ce                	ja     c000c214 <VAS::allocatePages(int, int)+0x92>
c000c246:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c249:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c24f:	39 d8                	cmp    eax,ebx
c000c251:	73 f3                	jae    c000c246 <VAS::allocatePages(int, int)+0xc4>
c000c253:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c257:	83 c4 1c             	add    esp,0x1c
c000c25a:	5b                   	pop    ebx
c000c25b:	5e                   	pop    esi
c000c25c:	5f                   	pop    edi
c000c25d:	5d                   	pop    ebp
c000c25e:	c3                   	ret    
c000c25f:	83 ec 0c             	sub    esp,0xc
c000c262:	68 dc 44 02 c0       	push   0xc00244dc
c000c267:	e8 83 86 00 00       	call   c00148ef <Krnl::panic(char const*)>
c000c26c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c26f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c273:	83 c4 10             	add    esp,0x10
c000c276:	e9 43 ff ff ff       	jmp    c000c1be <VAS::allocatePages(int, int)+0x3c>
c000c27b:	83 ec 0c             	sub    esp,0xc
c000c27e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c282:	e8 52 f7 ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c000c287:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c28b:	83 c4 10             	add    esp,0x10
c000c28e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c293:	0f 87 9b 00 00 00    	ja     c000c334 <VAS::allocatePages(int, int)+0x1b2>
c000c299:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c29d:	85 d2                	test   edx,edx
c000c29f:	7e 3c                	jle    c000c2dd <VAS::allocatePages(int, int)+0x15b>
c000c2a1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c2a5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c2a9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c2ad:	c1 e5 0c             	shl    ebp,0xc
c000c2b0:	81 ce 00 04 00 00    	or     esi,0x400
c000c2b6:	01 dd                	add    ebp,ebx
c000c2b8:	e8 09 de ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c2bd:	56                   	push   esi
c000c2be:	53                   	push   ebx
c000c2bf:	50                   	push   eax
c000c2c0:	57                   	push   edi
c000c2c1:	e8 ba fd ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c2c6:	83 c4 10             	add    esp,0x10
c000c2c9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c2ce:	74 03                	je     c000c2d3 <VAS::allocatePages(int, int)+0x151>
c000c2d0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c2d3:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c2d9:	39 dd                	cmp    ebp,ebx
c000c2db:	75 db                	jne    c000c2b8 <VAS::allocatePages(int, int)+0x136>
c000c2dd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c2e2:	0f 84 26 ff ff ff    	je     c000c20e <VAS::allocatePages(int, int)+0x8c>
c000c2e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c2ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c2f0:	89 d3                	mov    ebx,edx
c000c2f2:	c1 e0 0c             	shl    eax,0xc
c000c2f5:	c1 eb 0a             	shr    ebx,0xa
c000c2f8:	01 d0                	add    eax,edx
c000c2fa:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c300:	c1 e8 0a             	shr    eax,0xa
c000c303:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c309:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c30e:	2d 00 00 40 00       	sub    eax,0x400000
c000c313:	39 c3                	cmp    ebx,eax
c000c315:	0f 87 f9 fe ff ff    	ja     c000c214 <VAS::allocatePages(int, int)+0x92>
c000c31b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c31e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c324:	39 d8                	cmp    eax,ebx
c000c326:	73 f3                	jae    c000c31b <VAS::allocatePages(int, int)+0x199>
c000c328:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c32c:	83 c4 1c             	add    esp,0x1c
c000c32f:	5b                   	pop    ebx
c000c330:	5e                   	pop    esi
c000c331:	5f                   	pop    edi
c000c332:	5d                   	pop    ebp
c000c333:	c3                   	ret    
c000c334:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000c339:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c33f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c346:	0f 84 4d ff ff ff    	je     c000c299 <VAS::allocatePages(int, int)+0x117>
c000c34c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c354:	e9 40 ff ff ff       	jmp    c000c299 <VAS::allocatePages(int, int)+0x117>
c000c359:	90                   	nop

c000c35a <VAS::setCPUSpecific(unsigned long)>:
c000c35a:	83 ec 0c             	sub    esp,0xc
c000c35d:	6a 05                	push   0x5
c000c35f:	68 00 00 40 c2       	push   0xc2400000
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	e8 0f fd ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c371:	83 c4 1c             	add    esp,0x1c
c000c374:	c3                   	ret    
c000c375:	90                   	nop

c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c376:	55                   	push   ebp
c000c377:	57                   	push   edi
c000c378:	56                   	push   esi
c000c379:	53                   	push   ebx
c000c37a:	83 ec 1c             	sub    esp,0x1c
c000c37d:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000c382:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c386:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c38c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c390:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c396:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c39a:	83 e0 01             	and    eax,0x1
c000c39d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c3a1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3a5:	85 c0                	test   eax,eax
c000c3a7:	7e 39                	jle    c000c3e2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c3a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3ad:	89 f3                	mov    ebx,esi
c000c3af:	c1 e0 0c             	shl    eax,0xc
c000c3b2:	01 f0                	add    eax,esi
c000c3b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c3b8:	55                   	push   ebp
c000c3b9:	53                   	push   ebx
c000c3ba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3be:	29 f0                	sub    eax,esi
c000c3c0:	01 d8                	add    eax,ebx
c000c3c2:	50                   	push   eax
c000c3c3:	57                   	push   edi
c000c3c4:	e8 b7 fc ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c3c9:	83 c4 10             	add    esp,0x10
c000c3cc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c3d1:	74 03                	je     c000c3d6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c3d3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c3d6:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c3dc:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c3e0:	75 d6                	jne    c000c3b8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c3e2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c3e7:	75 10                	jne    c000c3f9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c3e9:	0f 20 d8             	mov    eax,cr3
c000c3ec:	0f 22 d8             	mov    cr3,eax
c000c3ef:	83 c4 1c             	add    esp,0x1c
c000c3f2:	89 f0                	mov    eax,esi
c000c3f4:	5b                   	pop    ebx
c000c3f5:	5e                   	pop    esi
c000c3f6:	5f                   	pop    edi
c000c3f7:	5d                   	pop    ebp
c000c3f8:	c3                   	ret    
c000c3f9:	89 f3                	mov    ebx,esi
c000c3fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3ff:	c1 eb 0a             	shr    ebx,0xa
c000c402:	c1 e0 0c             	shl    eax,0xc
c000c405:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c40b:	01 f0                	add    eax,esi
c000c40d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c413:	c1 e8 0a             	shr    eax,0xa
c000c416:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c41b:	2d 00 00 40 00       	sub    eax,0x400000
c000c420:	39 c3                	cmp    ebx,eax
c000c422:	77 cb                	ja     c000c3ef <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c424:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c427:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c42d:	39 d8                	cmp    eax,ebx
c000c42f:	73 f3                	jae    c000c424 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c431:	83 c4 1c             	add    esp,0x1c
c000c434:	89 f0                	mov    eax,esi
c000c436:	5b                   	pop    ebx
c000c437:	5e                   	pop    esi
c000c438:	5f                   	pop    edi
c000c439:	5d                   	pop    ebp
c000c43a:	c3                   	ret    
c000c43b:	90                   	nop

c000c43c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c43c:	55                   	push   ebp
c000c43d:	57                   	push   edi
c000c43e:	56                   	push   esi
c000c43f:	53                   	push   ebx
c000c440:	83 ec 1c             	sub    esp,0x1c
c000c443:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c447:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c44b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c44f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c453:	a9 ff 0f 00 00       	test   eax,0xfff
c000c458:	75 4a                	jne    c000c4a4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c45a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c45e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c461:	c1 eb 16             	shr    ebx,0x16
c000c464:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c46b:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c46f:	74 4d                	je     c000c4be <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c471:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c475:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c479:	c1 e8 0a             	shr    eax,0xa
c000c47c:	80 fa 01             	cmp    dl,0x1
c000c47f:	19 d2                	sbb    edx,edx
c000c481:	c1 e3 0c             	shl    ebx,0xc
c000c484:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c488:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c48e:	25 fc 0f 00 00       	and    eax,0xffc
c000c493:	01 d8                	add    eax,ebx
c000c495:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c49c:	83 c4 1c             	add    esp,0x1c
c000c49f:	5b                   	pop    ebx
c000c4a0:	5e                   	pop    esi
c000c4a1:	5f                   	pop    edi
c000c4a2:	5d                   	pop    ebp
c000c4a3:	c3                   	ret    
c000c4a4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c4a8:	83 ec 0c             	sub    esp,0xc
c000c4ab:	68 08 45 02 c0       	push   0xc0024508
c000c4b0:	e8 3a 84 00 00       	call   c00148ef <Krnl::panic(char const*)>
c000c4b5:	83 c4 10             	add    esp,0x10
c000c4b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c4bc:	eb 9c                	jmp    c000c45a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c4be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c4c2:	e8 ff db ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c4c7:	83 ec 0c             	sub    esp,0xc
c000c4ca:	89 c5                	mov    ebp,eax
c000c4cc:	8b 0d 10 80 02 c0    	mov    ecx,DWORD PTR ds:0xc0028010
c000c4d2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c4d6:	6a 01                	push   0x1
c000c4d8:	e8 fc f4 ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c000c4dd:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c4e4:	6a 01                	push   0x1
c000c4e6:	50                   	push   eax
c000c4e7:	55                   	push   ebp
c000c4e8:	81 cd 07 04 00 00    	or     ebp,0x407
c000c4ee:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c4f2:	51                   	push   ecx
c000c4f3:	e8 7e fe ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c4f8:	83 c4 1c             	add    esp,0x1c
c000c4fb:	68 00 10 00 00       	push   0x1000
c000c500:	6a 00                	push   0x0
c000c502:	50                   	push   eax
c000c503:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c507:	e8 78 41 ff ff       	call   c0000684 <memset>
c000c50c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c510:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c513:	e8 f1 f7 ff ff       	call   c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c000c518:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c51b:	83 c4 10             	add    esp,0x10
c000c51e:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c521:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c525:	e9 47 ff ff ff       	jmp    c000c471 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c52a <VAS::VAS(bool)>:
c000c52a:	53                   	push   ebx
c000c52b:	83 ec 28             	sub    esp,0x28
c000c52e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c532:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c536:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c53a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c541:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c545:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c54c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c550:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c554:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c557:	e8 6a db ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c55c:	89 c2                	mov    edx,eax
c000c55e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c562:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c565:	8b 1d 10 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028010
c000c56b:	83 ec 0c             	sub    esp,0xc
c000c56e:	6a 01                	push   0x1
c000c570:	e8 64 f4 ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 c2                	mov    edx,eax
c000c57a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c57e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c581:	83 ec 0c             	sub    esp,0xc
c000c584:	6a 03                	push   0x3
c000c586:	6a 01                	push   0x1
c000c588:	52                   	push   edx
c000c589:	50                   	push   eax
c000c58a:	53                   	push   ebx
c000c58b:	e8 e6 fd ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c590:	83 c4 20             	add    esp,0x20
c000c593:	89 c2                	mov    edx,eax
c000c595:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c599:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c59c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c5a4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c5ac:	7f 1c                	jg     c000c5ca <VAS::VAS(bool)+0xa0>
c000c5ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c5b2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c5b5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c5b9:	c1 e2 02             	shl    edx,0x2
c000c5bc:	01 d0                	add    eax,edx
c000c5be:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c5c4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c5c8:	eb da                	jmp    c000c5a4 <VAS::VAS(bool)+0x7a>
c000c5ca:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c5d2:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c5da:	7f 7a                	jg     c000c656 <VAS::VAS(bool)+0x12c>
c000c5dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c5e0:	2d 00 02 00 00       	sub    eax,0x200
c000c5e5:	c1 e0 0c             	shl    eax,0xc
c000c5e8:	83 c8 03             	or     eax,0x3
c000c5eb:	89 c2                	mov    edx,eax
c000c5ed:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000c5f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c5f8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c5fe:	83 e0 10             	and    eax,0x10
c000c601:	84 c0                	test   al,al
c000c603:	74 07                	je     c000c60c <VAS::VAS(bool)+0xe2>
c000c605:	b8 00 01 00 00       	mov    eax,0x100
c000c60a:	eb 05                	jmp    c000c611 <VAS::VAS(bool)+0xe7>
c000c60c:	b8 00 00 00 00       	mov    eax,0x0
c000c611:	09 d0                	or     eax,edx
c000c613:	89 c1                	mov    ecx,eax
c000c615:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c619:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c61c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c620:	c1 e2 02             	shl    edx,0x2
c000c623:	01 d0                	add    eax,edx
c000c625:	89 ca                	mov    edx,ecx
c000c627:	89 10                	mov    DWORD PTR [eax],edx
c000c629:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c62d:	2d 40 03 00 00       	sub    eax,0x340
c000c632:	83 f8 7f             	cmp    eax,0x7f
c000c635:	77 16                	ja     c000c64d <VAS::VAS(bool)+0x123>
c000c637:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c63b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c63e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c642:	c1 e2 02             	shl    edx,0x2
c000c645:	01 d0                	add    eax,edx
c000c647:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c64d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c651:	e9 7c ff ff ff       	jmp    c000c5d2 <VAS::VAS(bool)+0xa8>
c000c656:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000c65b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c661:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c667:	83 e0 10             	and    eax,0x10
c000c66a:	84 c0                	test   al,al
c000c66c:	74 07                	je     c000c675 <VAS::VAS(bool)+0x14b>
c000c66e:	b8 03 41 00 00       	mov    eax,0x4103
c000c673:	eb 05                	jmp    c000c67a <VAS::VAS(bool)+0x150>
c000c675:	b8 03 40 00 00       	mov    eax,0x4003
c000c67a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c67e:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c681:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c687:	89 02                	mov    DWORD PTR [edx],eax
c000c689:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000c68e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c694:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c69a:	83 ec 08             	sub    esp,0x8
c000c69d:	50                   	push   eax
c000c69e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6a2:	e8 b3 fc ff ff       	call   c000c35a <VAS::setCPUSpecific(unsigned long)>
c000c6a7:	83 c4 10             	add    esp,0x10
c000c6aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6ae:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c6b1:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000c6b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6bc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c6c2:	83 e0 10             	and    eax,0x10
c000c6c5:	84 c0                	test   al,al
c000c6c7:	74 07                	je     c000c6d0 <VAS::VAS(bool)+0x1a6>
c000c6c9:	b8 00 01 00 00       	mov    eax,0x100
c000c6ce:	eb 05                	jmp    c000c6d5 <VAS::VAS(bool)+0x1ab>
c000c6d0:	b8 00 00 00 00       	mov    eax,0x0
c000c6d5:	09 c2                	or     edx,eax
c000c6d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6db:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c6de:	05 fc 0f 00 00       	add    eax,0xffc
c000c6e3:	83 ca 03             	or     edx,0x3
c000c6e6:	89 10                	mov    DWORD PTR [eax],edx
c000c6e8:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000c6ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6f3:	83 ec 0c             	sub    esp,0xc
c000c6f6:	50                   	push   eax
c000c6f7:	e8 aa 1d 00 00       	call   c000e4a6 <Device::getName()>
c000c6fc:	83 c4 10             	add    esp,0x10
c000c6ff:	83 ec 08             	sub    esp,0x8
c000c702:	68 dc 45 02 c0       	push   0xc00245dc
c000c707:	50                   	push   eax
c000c708:	e8 bf 40 ff ff       	call   c00007cc <strcmp>
c000c70d:	83 c4 10             	add    esp,0x10
c000c710:	85 c0                	test   eax,eax
c000c712:	0f 94 c0             	sete   al
c000c715:	84 c0                	test   al,al
c000c717:	0f 84 87 00 00 00    	je     c000c7a4 <VAS::VAS(bool)+0x27a>
c000c71d:	fa                   	cli    
c000c71e:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c000c723:	40                   	inc    eax
c000c724:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c000c729:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000c72e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c734:	05 7c 09 00 00       	add    eax,0x97c
c000c739:	83 ec 0c             	sub    esp,0xc
c000c73c:	50                   	push   eax
c000c73d:	e8 bc cd ff ff       	call   c00094fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c74a:	89 c3                	mov    ebx,eax
c000c74c:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000c751:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c757:	05 7c 09 00 00       	add    eax,0x97c
c000c75c:	83 ec 0c             	sub    esp,0xc
c000c75f:	50                   	push   eax
c000c760:	e8 99 cd ff ff       	call   c00094fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c765:	83 c4 10             	add    esp,0x10
c000c768:	83 ec 08             	sub    esp,0x8
c000c76b:	50                   	push   eax
c000c76c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c770:	e8 75 f5 ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000c775:	83 c4 10             	add    esp,0x10
c000c778:	8b 00                	mov    eax,DWORD PTR [eax]
c000c77a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c77f:	6a 11                	push   0x11
c000c781:	53                   	push   ebx
c000c782:	50                   	push   eax
c000c783:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c787:	e8 f4 f8 ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c78c:	83 c4 10             	add    esp,0x10
c000c78f:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c000c794:	48                   	dec    eax
c000c795:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c000c79a:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c000c79f:	85 c0                	test   eax,eax
c000c7a1:	75 01                	jne    c000c7a4 <VAS::VAS(bool)+0x27a>
c000c7a3:	fb                   	sti    
c000c7a4:	90                   	nop
c000c7a5:	83 c4 28             	add    esp,0x28
c000c7a8:	5b                   	pop    ebx
c000c7a9:	c3                   	ret    

c000c7aa <VAS::evict(unsigned long)>:
c000c7aa:	55                   	push   ebp
c000c7ab:	57                   	push   edi
c000c7ac:	56                   	push   esi
c000c7ad:	53                   	push   ebx
c000c7ae:	83 ec 1c             	sub    esp,0x1c
c000c7b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7b5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c7b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7bd:	e8 58 f3 ff ff       	call   c000bb1a <Virt::allocateSwapfilePage()>
c000c7c2:	89 c7                	mov    edi,eax
c000c7c4:	a1 2c 73 02 c0       	mov    eax,ds:0xc002732c
c000c7c9:	85 c0                	test   eax,eax
c000c7cb:	7e 3d                	jle    c000c80a <VAS::evict(unsigned long)+0x60>
c000c7cd:	89 ee                	mov    esi,ebp
c000c7cf:	31 db                	xor    ebx,ebx
c000c7d1:	83 ec 0c             	sub    esp,0xc
c000c7d4:	57                   	push   edi
c000c7d5:	e8 2e f3 ff ff       	call   c000bb08 <Virt::swapIDToSector(unsigned long)>
c000c7da:	89 34 24             	mov    DWORD PTR [esp],esi
c000c7dd:	01 d8                	add    eax,ebx
c000c7df:	6a 01                	push   0x1
c000c7e1:	31 d2                	xor    edx,edx
c000c7e3:	43                   	inc    ebx
c000c7e4:	52                   	push   edx
c000c7e5:	81 c6 00 02 00 00    	add    esi,0x200
c000c7eb:	50                   	push   eax
c000c7ec:	0f be 05 38 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027338
c000c7f3:	ff 34 85 9c 83 02 c0 	push   DWORD PTR [eax*4-0x3ffd7c64]
c000c7fa:	e8 ed 3c 00 00       	call   c00104ec <LogicalDisk::write(unsigned long long, int, void*)>
c000c7ff:	83 c4 20             	add    esp,0x20
c000c802:	39 1d 2c 73 02 c0    	cmp    DWORD PTR ds:0xc002732c,ebx
c000c808:	7f c7                	jg     c000c7d1 <VAS::evict(unsigned long)+0x27>
c000c80a:	83 ec 08             	sub    esp,0x8
c000c80d:	c1 e7 0b             	shl    edi,0xb
c000c810:	55                   	push   ebp
c000c811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c815:	e8 d0 f4 ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000c81a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c81c:	89 d3                	mov    ebx,edx
c000c81e:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c824:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c82a:	09 d7                	or     edi,edx
c000c82c:	89 38                	mov    DWORD PTR [eax],edi
c000c82e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c831:	ff 05 08 80 02 c0    	inc    DWORD PTR ds:0xc0028008
c000c837:	e8 07 d8 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000c83c:	0f 20 d8             	mov    eax,cr3
c000c83f:	0f 22 d8             	mov    cr3,eax
c000c842:	ff 35 08 80 02 c0    	push   DWORD PTR ds:0xc0028008
c000c848:	55                   	push   ebp
c000c849:	53                   	push   ebx
c000c84a:	68 2c 45 02 c0       	push   0xc002452c
c000c84f:	e8 ab 04 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000c854:	a1 04 80 02 c0       	mov    eax,ds:0xc0028004
c000c859:	c7 44 24 50 ea 45 02 c0 	mov    DWORD PTR [esp+0x50],0xc00245ea
c000c861:	8d 50 01             	lea    edx,[eax+0x1]
c000c864:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c868:	89 15 04 80 02 c0    	mov    DWORD PTR ds:0xc0028004,edx
c000c86e:	83 c4 3c             	add    esp,0x3c
c000c871:	5b                   	pop    ebx
c000c872:	5e                   	pop    esi
c000c873:	5f                   	pop    edi
c000c874:	5d                   	pop    ebp
c000c875:	e9 85 04 00 00       	jmp    c000ccff <Dbg::kprintf(char const*, ...)>

c000c87a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c87a:	55                   	push   ebp
c000c87b:	57                   	push   edi
c000c87c:	56                   	push   esi
c000c87d:	53                   	push   ebx
c000c87e:	83 ec 14             	sub    esp,0x14
c000c881:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c885:	68 fb 45 02 c0       	push   0xc00245fb
c000c88a:	e8 70 04 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000c88f:	83 c4 10             	add    esp,0x10
c000c892:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c896:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000c89c:	74 20                	je     c000c8be <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c89e:	83 ec 08             	sub    esp,0x8
c000c8a1:	55                   	push   ebp
c000c8a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c8a6:	e8 3f f4 ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000c8ab:	83 c4 10             	add    esp,0x10
c000c8ae:	89 c3                	mov    ebx,eax
c000c8b0:	85 c0                	test   eax,eax
c000c8b2:	74 0a                	je     c000c8be <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c8b4:	8b 38                	mov    edi,DWORD PTR [eax]
c000c8b6:	f7 c7 01 00 00 00    	test   edi,0x1
c000c8bc:	74 0a                	je     c000c8c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000c8be:	31 c0                	xor    eax,eax
c000c8c0:	83 c4 0c             	add    esp,0xc
c000c8c3:	5b                   	pop    ebx
c000c8c4:	5e                   	pop    esi
c000c8c5:	5f                   	pop    edi
c000c8c6:	5d                   	pop    ebp
c000c8c7:	c3                   	ret    
c000c8c8:	e8 f9 d7 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c8cd:	c1 ef 0b             	shr    edi,0xb
c000c8d0:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c8d2:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c8d8:	09 c2                	or     edx,eax
c000c8da:	81 ca 01 08 00 00    	or     edx,0x801
c000c8e0:	89 13                	mov    DWORD PTR [ebx],edx
c000c8e2:	8b 0d 2c 73 02 c0    	mov    ecx,DWORD PTR ds:0xc002732c
c000c8e8:	85 c9                	test   ecx,ecx
c000c8ea:	7e 3d                	jle    c000c929 <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000c8ec:	89 ee                	mov    esi,ebp
c000c8ee:	31 db                	xor    ebx,ebx
c000c8f0:	83 ec 0c             	sub    esp,0xc
c000c8f3:	57                   	push   edi
c000c8f4:	e8 0f f2 ff ff       	call   c000bb08 <Virt::swapIDToSector(unsigned long)>
c000c8f9:	89 34 24             	mov    DWORD PTR [esp],esi
c000c8fc:	01 d8                	add    eax,ebx
c000c8fe:	6a 01                	push   0x1
c000c900:	31 d2                	xor    edx,edx
c000c902:	43                   	inc    ebx
c000c903:	52                   	push   edx
c000c904:	81 c6 00 02 00 00    	add    esi,0x200
c000c90a:	50                   	push   eax
c000c90b:	0f be 05 38 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027338
c000c912:	ff 34 85 9c 83 02 c0 	push   DWORD PTR [eax*4-0x3ffd7c64]
c000c919:	e8 62 3b 00 00       	call   c0010480 <LogicalDisk::read(unsigned long long, int, void*)>
c000c91e:	83 c4 20             	add    esp,0x20
c000c921:	39 1d 2c 73 02 c0    	cmp    DWORD PTR ds:0xc002732c,ebx
c000c927:	7f c7                	jg     c000c8f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000c929:	a1 08 80 02 c0       	mov    eax,ds:0xc0028008
c000c92e:	48                   	dec    eax
c000c92f:	52                   	push   edx
c000c930:	a3 08 80 02 c0       	mov    ds:0xc0028008,eax
c000c935:	50                   	push   eax
c000c936:	55                   	push   ebp
c000c937:	68 0e 46 02 c0       	push   0xc002460e
c000c93c:	e8 be 03 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000c941:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c944:	e8 a1 f1 ff ff       	call   c000baea <Virt::freeSwapfilePage(unsigned long)>
c000c949:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c000c94e:	83 c4 10             	add    esp,0x10
c000c951:	48                   	dec    eax
c000c952:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c000c957:	85 c0                	test   eax,eax
c000c959:	74 1d                	je     c000c978 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000c95b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c95f:	25 ff 0f 00 00       	and    eax,0xfff
c000c964:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c969:	77 10                	ja     c000c97b <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000c96b:	0f 20 d8             	mov    eax,cr3
c000c96e:	0f 22 d8             	mov    cr3,eax
c000c971:	b0 01                	mov    al,0x1
c000c973:	e9 48 ff ff ff       	jmp    c000c8c0 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000c978:	fb                   	sti    
c000c979:	eb e0                	jmp    c000c95b <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000c97b:	83 ec 0c             	sub    esp,0xc
c000c97e:	68 23 46 02 c0       	push   0xc0024623
c000c983:	e8 77 03 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000c988:	83 c4 10             	add    esp,0x10
c000c98b:	eb de                	jmp    c000c96b <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000c98d:	90                   	nop

c000c98e <VAS::scanForEviction()>:
c000c98e:	57                   	push   edi
c000c98f:	31 ff                	xor    edi,edi
c000c991:	56                   	push   esi
c000c992:	53                   	push   ebx
c000c993:	83 ec 10             	sub    esp,0x10
c000c996:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c99a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c99d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c9a3:	75 0e                	jne    c000c9b3 <VAS::scanForEviction()+0x25>
c000c9a5:	89 da                	mov    edx,ebx
c000c9a7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c9aa:	c1 ea 16             	shr    edx,0x16
c000c9ad:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c9b1:	74 4e                	je     c000ca01 <VAS::scanForEviction()+0x73>
c000c9b3:	53                   	push   ebx
c000c9b4:	56                   	push   esi
c000c9b5:	e8 30 f3 ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000c9ba:	5a                   	pop    edx
c000c9bb:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9bd:	59                   	pop    ecx
c000c9be:	89 d1                	mov    ecx,edx
c000c9c0:	81 e1 01 08 00 00    	and    ecx,0x801
c000c9c6:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c9cc:	74 3e                	je     c000ca0c <VAS::scanForEviction()+0x7e>
c000c9ce:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c9d4:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c9da:	76 2b                	jbe    c000ca07 <VAS::scanForEviction()+0x79>
c000c9dc:	47                   	inc    edi
c000c9dd:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c9e4:	83 ff 03             	cmp    edi,0x3
c000c9e7:	74 32                	je     c000ca1b <VAS::scanForEviction()+0x8d>
c000c9e9:	31 db                	xor    ebx,ebx
c000c9eb:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c9f1:	75 c0                	jne    c000c9b3 <VAS::scanForEviction()+0x25>
c000c9f3:	89 da                	mov    edx,ebx
c000c9f5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c9f8:	c1 ea 16             	shr    edx,0x16
c000c9fb:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c9ff:	75 b2                	jne    c000c9b3 <VAS::scanForEviction()+0x25>
c000ca01:	81 c3 00 00 40 00    	add    ebx,0x400000
c000ca07:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000ca0a:	eb 91                	jmp    c000c99d <VAS::scanForEviction()+0xf>
c000ca0c:	f6 c2 20             	test   dl,0x20
c000ca0f:	74 13                	je     c000ca24 <VAS::scanForEviction()+0x96>
c000ca11:	83 e2 df             	and    edx,0xffffffdf
c000ca14:	89 10                	mov    DWORD PTR [eax],edx
c000ca16:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000ca19:	eb b3                	jmp    c000c9ce <VAS::scanForEviction()+0x40>
c000ca1b:	83 c4 10             	add    esp,0x10
c000ca1e:	31 c0                	xor    eax,eax
c000ca20:	5b                   	pop    ebx
c000ca21:	5e                   	pop    esi
c000ca22:	5f                   	pop    edi
c000ca23:	c3                   	ret    
c000ca24:	83 ec 08             	sub    esp,0x8
c000ca27:	89 d0                	mov    eax,edx
c000ca29:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ca2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ca32:	53                   	push   ebx
c000ca33:	68 33 46 02 c0       	push   0xc0024633
c000ca38:	e8 c2 02 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ca3d:	58                   	pop    eax
c000ca3e:	5a                   	pop    edx
c000ca3f:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ca42:	56                   	push   esi
c000ca43:	e8 62 fd ff ff       	call   c000c7aa <VAS::evict(unsigned long)>
c000ca48:	59                   	pop    ecx
c000ca49:	5b                   	pop    ebx
c000ca4a:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ca4d:	68 47 46 02 c0       	push   0xc0024647
c000ca52:	e8 a8 02 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ca57:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000ca5e:	83 c4 10             	add    esp,0x10
c000ca61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca65:	83 c4 10             	add    esp,0x10
c000ca68:	5b                   	pop    ebx
c000ca69:	5e                   	pop    esi
c000ca6a:	5f                   	pop    edi
c000ca6b:	c3                   	ret    

c000ca6c <mapVASFirstTime>:
c000ca6c:	55                   	push   ebp
c000ca6d:	57                   	push   edi
c000ca6e:	56                   	push   esi
c000ca6f:	53                   	push   ebx
c000ca70:	83 ec 0c             	sub    esp,0xc
c000ca73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ca78:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ca7b:	4a                   	dec    edx
c000ca7c:	0f 84 fe 00 00 00    	je     c000cb80 <mapVASFirstTime+0x114>
c000ca82:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000ca85:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000ca88:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ca8d:	c1 e5 15             	shl    ebp,0x15
c000ca90:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000ca95:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000ca9b:	29 eb                	sub    ebx,ebp
c000ca9d:	29 ef                	sub    edi,ebp
c000ca9f:	83 ec 08             	sub    esp,0x8
c000caa2:	53                   	push   ebx
c000caa3:	68 73 46 02 c0       	push   0xc0024673
c000caa8:	e8 52 02 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000caad:	e8 14 d6 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000cab2:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000cab9:	6a 01                	push   0x1
c000cabb:	53                   	push   ebx
c000cabc:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cac2:	50                   	push   eax
c000cac3:	56                   	push   esi
c000cac4:	e8 ad f8 ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cac9:	83 c4 20             	add    esp,0x20
c000cacc:	39 fb                	cmp    ebx,edi
c000cace:	75 cf                	jne    c000ca9f <mapVASFirstTime+0x33>
c000cad0:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000cad5:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000cada:	29 eb                	sub    ebx,ebp
c000cadc:	29 ef                	sub    edi,ebp
c000cade:	83 ec 08             	sub    esp,0x8
c000cae1:	53                   	push   ebx
c000cae2:	68 8f 46 02 c0       	push   0xc002468f
c000cae7:	e8 13 02 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000caec:	58                   	pop    eax
c000caed:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000caf1:	5a                   	pop    edx
c000caf2:	19 c0                	sbb    eax,eax
c000caf4:	83 e0 04             	and    eax,0x4
c000caf7:	05 03 04 00 00       	add    eax,0x403
c000cafc:	50                   	push   eax
c000cafd:	68 a3 46 02 c0       	push   0xc00246a3
c000cb02:	e8 f8 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cb07:	e8 ba d5 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000cb0c:	59                   	pop    ecx
c000cb0d:	89 c5                	mov    ebp,eax
c000cb0f:	58                   	pop    eax
c000cb10:	55                   	push   ebp
c000cb11:	68 b1 46 02 c0       	push   0xc00246b1
c000cb16:	e8 e4 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cb1b:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cb1f:	19 d2                	sbb    edx,edx
c000cb21:	83 e2 04             	and    edx,0x4
c000cb24:	81 c2 03 04 00 00    	add    edx,0x403
c000cb2a:	89 14 24             	mov    DWORD PTR [esp],edx
c000cb2d:	6a 01                	push   0x1
c000cb2f:	53                   	push   ebx
c000cb30:	55                   	push   ebp
c000cb31:	56                   	push   esi
c000cb32:	e8 3f f8 ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cb37:	83 c4 18             	add    esp,0x18
c000cb3a:	53                   	push   ebx
c000cb3b:	56                   	push   esi
c000cb3c:	e8 a9 f1 ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000cb41:	5a                   	pop    edx
c000cb42:	59                   	pop    ecx
c000cb43:	ff 30                	push   DWORD PTR [eax]
c000cb45:	68 cd 46 02 c0       	push   0xc00246cd
c000cb4a:	e8 b0 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cb4f:	0f 20 d8             	mov    eax,cr3
c000cb52:	83 c4 0c             	add    esp,0xc
c000cb55:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cb5b:	56                   	push   esi
c000cb5c:	50                   	push   eax
c000cb5d:	68 d8 46 02 c0       	push   0xc00246d8
c000cb62:	e8 98 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cb67:	83 c4 10             	add    esp,0x10
c000cb6a:	39 df                	cmp    edi,ebx
c000cb6c:	0f 85 6c ff ff ff    	jne    c000cade <mapVASFirstTime+0x72>
c000cb72:	0f 20 d8             	mov    eax,cr3
c000cb75:	0f 22 d8             	mov    cr3,eax
c000cb78:	83 c4 0c             	add    esp,0xc
c000cb7b:	5b                   	pop    ebx
c000cb7c:	5e                   	pop    esi
c000cb7d:	5f                   	pop    edi
c000cb7e:	5d                   	pop    ebp
c000cb7f:	c3                   	ret    
c000cb80:	83 ec 0c             	sub    esp,0xc
c000cb83:	68 5a 46 02 c0       	push   0xc002465a
c000cb88:	e8 72 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cb8d:	83 c4 10             	add    esp,0x10
c000cb90:	83 c4 0c             	add    esp,0xc
c000cb93:	5b                   	pop    ebx
c000cb94:	5e                   	pop    esi
c000cb95:	5f                   	pop    edi
c000cb96:	5d                   	pop    ebp
c000cb97:	c3                   	ret    

c000cb98 <__cxa_atexit>:
c000cb98:	31 c0                	xor    eax,eax
c000cb9a:	c3                   	ret    

c000cb9b <__cxa_finalize>:
c000cb9b:	c3                   	ret    

c000cb9c <__stack_chk_fail>:
c000cb9c:	55                   	push   ebp
c000cb9d:	89 e5                	mov    ebp,esp
c000cb9f:	83 ec 14             	sub    esp,0x14
c000cba2:	68 f0 46 02 c0       	push   0xc00246f0
c000cba7:	e8 53 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cbac:	58                   	pop    eax
c000cbad:	5a                   	pop    edx
c000cbae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbb1:	68 40 47 02 c0       	push   0xc0024740
c000cbb6:	e8 44 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cbbb:	59                   	pop    ecx
c000cbbc:	58                   	pop    eax
c000cbbd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbc0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cbc3:	68 40 47 02 c0       	push   0xc0024740
c000cbc8:	e8 32 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cbcd:	5a                   	pop    edx
c000cbce:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbd1:	59                   	pop    ecx
c000cbd2:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbd4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cbd7:	68 40 47 02 c0       	push   0xc0024740
c000cbdc:	e8 1e 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cbe1:	5a                   	pop    edx
c000cbe2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe5:	59                   	pop    ecx
c000cbe6:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbe8:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbea:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cbed:	68 40 47 02 c0       	push   0xc0024740
c000cbf2:	e8 08 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cbf7:	c7 04 24 48 47 02 c0 	mov    DWORD PTR [esp],0xc0024748
c000cbfe:	e8 ec 7c 00 00       	call   c00148ef <Krnl::panic(char const*)>
c000cc03:	83 c4 10             	add    esp,0x10
c000cc06:	c9                   	leave  
c000cc07:	c3                   	ret    

c000cc08 <__cxa_pure_virtual>:
c000cc08:	83 ec 18             	sub    esp,0x18
c000cc0b:	68 60 47 02 c0       	push   0xc0024760
c000cc10:	e8 da 7c 00 00       	call   c00148ef <Krnl::panic(char const*)>
c000cc15:	83 c4 1c             	add    esp,0x1c
c000cc18:	c3                   	ret    

c000cc19 <operator new[](unsigned long)>:
c000cc19:	e9 f1 cd ff ff       	jmp    c0009a0f <malloc>

c000cc1e <operator delete(void*, unsigned long)>:
c000cc1e:	e9 0c ce ff ff       	jmp    c0009a2f <rfree>

c000cc23 <operator delete[](void*)>:
c000cc23:	e9 07 ce ff ff       	jmp    c0009a2f <rfree>

c000cc28 <operator delete[](void*, unsigned long)>:
c000cc28:	e9 02 ce ff ff       	jmp    c0009a2f <rfree>

c000cc2d <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cc2d:	55                   	push   ebp
c000cc2e:	b9 11 00 00 00       	mov    ecx,0x11
c000cc33:	57                   	push   edi
c000cc34:	56                   	push   esi
c000cc35:	be 46 42 02 c0       	mov    esi,0xc0024246
c000cc3a:	53                   	push   ebx
c000cc3b:	83 ec 20             	sub    esp,0x20
c000cc3e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cc42:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cc46:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cc4a:	fc                   	cld    
c000cc4b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cc4d:	89 ee                	mov    esi,ebp
c000cc4f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cc53:	eb 02                	jmp    c000cc57 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cc55:	89 c6                	mov    esi,eax
c000cc57:	31 d2                	xor    edx,edx
c000cc59:	41                   	inc    ecx
c000cc5a:	89 f0                	mov    eax,esi
c000cc5c:	f7 f3                	div    ebx
c000cc5e:	39 de                	cmp    esi,ebx
c000cc60:	73 f3                	jae    c000cc55 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cc62:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cc65:	eb 02                	jmp    c000cc69 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cc67:	89 c5                	mov    ebp,eax
c000cc69:	31 d2                	xor    edx,edx
c000cc6b:	49                   	dec    ecx
c000cc6c:	89 e8                	mov    eax,ebp
c000cc6e:	f7 f3                	div    ebx
c000cc70:	39 dd                	cmp    ebp,ebx
c000cc72:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cc76:	88 11                	mov    BYTE PTR [ecx],dl
c000cc78:	73 ed                	jae    c000cc67 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cc7a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc7e:	83 c4 20             	add    esp,0x20
c000cc81:	5b                   	pop    ebx
c000cc82:	5e                   	pop    esi
c000cc83:	5f                   	pop    edi
c000cc84:	5d                   	pop    ebp
c000cc85:	c3                   	ret    

c000cc86 <Dbg::logc(char)>:
c000cc86:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cc8a:	f6 05 00 7f 02 c0 10 	test   BYTE PTR ds:0xc0027f00,0x10
c000cc91:	75 12                	jne    c000cca5 <Dbg::logc(char)+0x1f>
c000cc93:	ba fd 03 00 00       	mov    edx,0x3fd
c000cc98:	ec                   	in     al,dx
c000cc99:	a8 20                	test   al,0x20
c000cc9b:	74 fb                	je     c000cc98 <Dbg::logc(char)+0x12>
c000cc9d:	ba f8 03 00 00       	mov    edx,0x3f8
c000cca2:	88 c8                	mov    al,cl
c000cca4:	ee                   	out    dx,al
c000cca5:	c3                   	ret    

c000cca6 <Dbg::logs(char*)>:
c000cca6:	53                   	push   ebx
c000cca7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ccab:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ccae:	84 c0                	test   al,al
c000ccb0:	74 0f                	je     c000ccc1 <Dbg::logs(char*)+0x1b>
c000ccb2:	50                   	push   eax
c000ccb3:	43                   	inc    ebx
c000ccb4:	e8 cd ff ff ff       	call   c000cc86 <Dbg::logc(char)>
c000ccb9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ccbc:	5a                   	pop    edx
c000ccbd:	84 c0                	test   al,al
c000ccbf:	75 f1                	jne    c000ccb2 <Dbg::logs(char*)+0xc>
c000ccc1:	5b                   	pop    ebx
c000ccc2:	c3                   	ret    

c000ccc3 <Dbg::logWriteInt(unsigned int)>:
c000ccc3:	83 ec 10             	sub    esp,0x10
c000ccc6:	6a 0a                	push   0xa
c000ccc8:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cccc:	50                   	push   eax
c000cccd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd1:	e8 57 ff ff ff       	call   c000cc2d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ccd6:	50                   	push   eax
c000ccd7:	e8 ca ff ff ff       	call   c000cca6 <Dbg::logs(char*)>
c000ccdc:	83 c4 20             	add    esp,0x20
c000ccdf:	c3                   	ret    

c000cce0 <Dbg::logWriteIntBase(unsigned int, int)>:
c000cce0:	83 ec 10             	sub    esp,0x10
c000cce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cce7:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cceb:	50                   	push   eax
c000ccec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf0:	e8 38 ff ff ff       	call   c000cc2d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ccf5:	50                   	push   eax
c000ccf6:	e8 ab ff ff ff       	call   c000cca6 <Dbg::logs(char*)>
c000ccfb:	83 c4 20             	add    esp,0x20
c000ccfe:	c3                   	ret    

c000ccff <Dbg::kprintf(char const*, ...)>:
c000ccff:	55                   	push   ebp
c000cd00:	57                   	push   edi
c000cd01:	56                   	push   esi
c000cd02:	53                   	push   ebx
c000cd03:	83 ec 0c             	sub    esp,0xc
c000cd06:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cd0a:	f6 05 00 7f 02 c0 10 	test   BYTE PTR ds:0xc0027f00,0x10
c000cd11:	74 08                	je     c000cd1b <Dbg::kprintf(char const*, ...)+0x1c>
c000cd13:	83 c4 0c             	add    esp,0xc
c000cd16:	5b                   	pop    ebx
c000cd17:	5e                   	pop    esi
c000cd18:	5f                   	pop    edi
c000cd19:	5d                   	pop    ebp
c000cd1a:	c3                   	ret    
c000cd1b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cd1f:	31 db                	xor    ebx,ebx
c000cd21:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cd25:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cd28:	84 c0                	test   al,al
c000cd2a:	74 e7                	je     c000cd13 <Dbg::kprintf(char const*, ...)+0x14>
c000cd2c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cd2f:	3c 25                	cmp    al,0x25
c000cd31:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cd34:	75 44                	jne    c000cd7a <Dbg::kprintf(char const*, ...)+0x7b>
c000cd36:	83 c3 02             	add    ebx,0x2
c000cd39:	8a 07                	mov    al,BYTE PTR [edi]
c000cd3b:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000cd3e:	83 e8 25             	sub    eax,0x25
c000cd41:	3c 53                	cmp    al,0x53
c000cd43:	0f 87 c9 00 00 00    	ja     c000ce12 <Dbg::kprintf(char const*, ...)+0x113>
c000cd49:	0f b6 c0             	movzx  eax,al
c000cd4c:	ff 24 85 74 47 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb88c]
c000cd53:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd57:	89 c8                	mov    eax,ecx
c000cd59:	83 c1 04             	add    ecx,0x4
c000cd5c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd60:	ff 30                	push   DWORD PTR [eax]
c000cd62:	e8 5c ff ff ff       	call   c000ccc3 <Dbg::logWriteInt(unsigned int)>
c000cd67:	5f                   	pop    edi
c000cd68:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cd6c:	84 c0                	test   al,al
c000cd6e:	74 a3                	je     c000cd13 <Dbg::kprintf(char const*, ...)+0x14>
c000cd70:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cd73:	3c 25                	cmp    al,0x25
c000cd75:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cd78:	74 bc                	je     c000cd36 <Dbg::kprintf(char const*, ...)+0x37>
c000cd7a:	50                   	push   eax
c000cd7b:	89 eb                	mov    ebx,ebp
c000cd7d:	e8 04 ff ff ff       	call   c000cc86 <Dbg::logc(char)>
c000cd82:	89 fd                	mov    ebp,edi
c000cd84:	58                   	pop    eax
c000cd85:	eb e1                	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000cd87:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd8b:	89 c8                	mov    eax,ecx
c000cd8d:	83 c1 04             	add    ecx,0x4
c000cd90:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd94:	ff 30                	push   DWORD PTR [eax]
c000cd96:	e8 0b ff ff ff       	call   c000cca6 <Dbg::logs(char*)>
c000cd9b:	58                   	pop    eax
c000cd9c:	eb ca                	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000cd9e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cda2:	89 d0                	mov    eax,edx
c000cda4:	83 c2 04             	add    edx,0x4
c000cda7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cdab:	ff 30                	push   DWORD PTR [eax]
c000cdad:	e8 11 ff ff ff       	call   c000ccc3 <Dbg::logWriteInt(unsigned int)>
c000cdb2:	58                   	pop    eax
c000cdb3:	eb b3                	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000cdb5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cdb9:	89 d0                	mov    eax,edx
c000cdbb:	83 c2 04             	add    edx,0x4
c000cdbe:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cdc1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cdc5:	50                   	push   eax
c000cdc6:	e8 bb fe ff ff       	call   c000cc86 <Dbg::logc(char)>
c000cdcb:	58                   	pop    eax
c000cdcc:	eb 9a                	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000cdce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cdd2:	89 c8                	mov    eax,ecx
c000cdd4:	83 c1 04             	add    ecx,0x4
c000cdd7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cddb:	6a 10                	push   0x10
c000cddd:	ff 30                	push   DWORD PTR [eax]
c000cddf:	e8 fc fe ff ff       	call   c000cce0 <Dbg::logWriteIntBase(unsigned int, int)>
c000cde4:	59                   	pop    ecx
c000cde5:	5f                   	pop    edi
c000cde6:	eb 80                	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000cde8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cdec:	89 d0                	mov    eax,edx
c000cdee:	83 c2 08             	add    edx,0x8
c000cdf1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cdf5:	6a 10                	push   0x10
c000cdf7:	ff 30                	push   DWORD PTR [eax]
c000cdf9:	e8 e2 fe ff ff       	call   c000cce0 <Dbg::logWriteIntBase(unsigned int, int)>
c000cdfe:	58                   	pop    eax
c000cdff:	5a                   	pop    edx
c000ce00:	e9 63 ff ff ff       	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000ce05:	6a 25                	push   0x25
c000ce07:	e8 7a fe ff ff       	call   c000cc86 <Dbg::logc(char)>
c000ce0c:	58                   	pop    eax
c000ce0d:	e9 56 ff ff ff       	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000ce12:	6a 25                	push   0x25
c000ce14:	e8 6d fe ff ff       	call   c000cc86 <Dbg::logc(char)>
c000ce19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ce1c:	50                   	push   eax
c000ce1d:	e8 64 fe ff ff       	call   c000cc86 <Dbg::logc(char)>
c000ce22:	5a                   	pop    edx
c000ce23:	59                   	pop    ecx
c000ce24:	e9 3f ff ff ff       	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000ce29:	90                   	nop

c000ce2a <File::read(unsigned long long, void*, int*)>:
c000ce2a:	53                   	push   ebx
c000ce2b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce2f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ce33:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ce3a:	3c 19                	cmp    al,0x19
c000ce3c:	77 35                	ja     c000ce73 <File::read(unsigned long long, void*, int*)+0x49>
c000ce3e:	8b 04 85 a0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b60]
c000ce45:	85 c0                	test   eax,eax
c000ce47:	74 2a                	je     c000ce73 <File::read(unsigned long long, void*, int*)+0x49>
c000ce49:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ce4f:	85 c0                	test   eax,eax
c000ce51:	74 20                	je     c000ce73 <File::read(unsigned long long, void*, int*)+0x49>
c000ce53:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ce57:	74 21                	je     c000ce7a <File::read(unsigned long long, void*, int*)+0x50>
c000ce59:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ce5b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce5f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ce65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce69:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce6d:	5b                   	pop    ebx
c000ce6e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ce71:	ff e0                	jmp    eax
c000ce73:	b8 0b 00 00 00       	mov    eax,0xb
c000ce78:	eb 05                	jmp    c000ce7f <File::read(unsigned long long, void*, int*)+0x55>
c000ce7a:	b8 05 00 00 00       	mov    eax,0x5
c000ce7f:	5b                   	pop    ebx
c000ce80:	c3                   	ret    
c000ce81:	90                   	nop

c000ce82 <File::write(unsigned long long, void*, int*)>:
c000ce82:	53                   	push   ebx
c000ce83:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce87:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ce8b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ce92:	3c 19                	cmp    al,0x19
c000ce94:	77 35                	ja     c000cecb <File::write(unsigned long long, void*, int*)+0x49>
c000ce96:	8b 04 85 a0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b60]
c000ce9d:	85 c0                	test   eax,eax
c000ce9f:	74 2a                	je     c000cecb <File::write(unsigned long long, void*, int*)+0x49>
c000cea1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cea7:	85 c0                	test   eax,eax
c000cea9:	74 20                	je     c000cecb <File::write(unsigned long long, void*, int*)+0x49>
c000ceab:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ceaf:	74 21                	je     c000ced2 <File::write(unsigned long long, void*, int*)+0x50>
c000ceb1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ceb3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ceb7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cebd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cec1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cec5:	5b                   	pop    ebx
c000cec6:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000cec9:	ff e0                	jmp    eax
c000cecb:	b8 0b 00 00 00       	mov    eax,0xb
c000ced0:	eb 05                	jmp    c000ced7 <File::write(unsigned long long, void*, int*)+0x55>
c000ced2:	b8 05 00 00 00       	mov    eax,0x5
c000ced7:	5b                   	pop    ebx
c000ced8:	c3                   	ret    
c000ced9:	90                   	nop

c000ceda <Directory::read(unsigned long long, void*, int*)>:
c000ceda:	53                   	push   ebx
c000cedb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cedf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cee3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ceea:	3c 19                	cmp    al,0x19
c000ceec:	77 35                	ja     c000cf23 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ceee:	8b 04 85 a0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b60]
c000cef5:	85 c0                	test   eax,eax
c000cef7:	74 2a                	je     c000cf23 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cef9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ceff:	85 c0                	test   eax,eax
c000cf01:	74 20                	je     c000cf23 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cf03:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cf07:	74 21                	je     c000cf2a <Directory::read(unsigned long long, void*, int*)+0x50>
c000cf09:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cf0b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf0f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cf15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf1d:	5b                   	pop    ebx
c000cf1e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000cf21:	ff e0                	jmp    eax
c000cf23:	b8 0b 00 00 00       	mov    eax,0xb
c000cf28:	eb 05                	jmp    c000cf2f <Directory::read(unsigned long long, void*, int*)+0x55>
c000cf2a:	b8 05 00 00 00       	mov    eax,0x5
c000cf2f:	5b                   	pop    ebx
c000cf30:	c3                   	ret    
c000cf31:	90                   	nop

c000cf32 <Directory::write(unsigned long long, void*, int*)>:
c000cf32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf36:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000cf3d:	b8 0b 00 00 00       	mov    eax,0xb
c000cf42:	80 fa 19             	cmp    dl,0x19
c000cf45:	77 18                	ja     c000cf5f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cf47:	8b 14 95 a0 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7b60]
c000cf4e:	85 d2                	test   edx,edx
c000cf50:	74 0d                	je     c000cf5f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cf52:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000cf59:	19 c0                	sbb    eax,eax
c000cf5b:	83 e0 0a             	and    eax,0xa
c000cf5e:	40                   	inc    eax
c000cf5f:	c3                   	ret    

c000cf60 <File::isAtty()>:
c000cf60:	31 c0                	xor    eax,eax
c000cf62:	c3                   	ret    
c000cf63:	90                   	nop

c000cf64 <Directory::isAtty()>:
c000cf64:	31 c0                	xor    eax,eax
c000cf66:	c3                   	ret    
c000cf67:	90                   	nop

c000cf68 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000cf68:	b8 0a 00 00 00       	mov    eax,0xa
c000cf6d:	c3                   	ret    

c000cf6e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000cf6e:	b8 0a 00 00 00       	mov    eax,0xa
c000cf73:	c3                   	ret    

c000cf74 <Filesystem::allocateSwapfile(char const*, int)>:
c000cf74:	31 c0                	xor    eax,eax
c000cf76:	31 d2                	xor    edx,edx
c000cf78:	c3                   	ret    
c000cf79:	90                   	nop

c000cf7a <File::~File()>:
c000cf7a:	83 ec 0c             	sub    esp,0xc
c000cf7d:	ba 5c 49 02 c0       	mov    edx,0xc002495c
c000cf82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf86:	89 10                	mov    DWORD PTR [eax],edx
c000cf88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf8c:	83 ec 0c             	sub    esp,0xc
c000cf8f:	50                   	push   eax
c000cf90:	e8 e3 e7 ff ff       	call   c000b778 <UnixFile::~UnixFile()>
c000cf95:	83 c4 10             	add    esp,0x10
c000cf98:	90                   	nop
c000cf99:	83 c4 0c             	add    esp,0xc
c000cf9c:	c3                   	ret    
c000cf9d:	90                   	nop

c000cf9e <File::~File()>:
c000cf9e:	83 ec 0c             	sub    esp,0xc
c000cfa1:	83 ec 0c             	sub    esp,0xc
c000cfa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfa8:	e8 cd ff ff ff       	call   c000cf7a <File::~File()>
c000cfad:	83 c4 10             	add    esp,0x10
c000cfb0:	83 ec 08             	sub    esp,0x8
c000cfb3:	68 14 01 00 00       	push   0x114
c000cfb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfbc:	e8 5d fc ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000cfc1:	83 c4 10             	add    esp,0x10
c000cfc4:	83 c4 0c             	add    esp,0xc
c000cfc7:	c3                   	ret    

c000cfc8 <Directory::~Directory()>:
c000cfc8:	83 ec 0c             	sub    esp,0xc
c000cfcb:	ba 78 49 02 c0       	mov    edx,0xc0024978
c000cfd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd4:	89 10                	mov    DWORD PTR [eax],edx
c000cfd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfda:	83 ec 0c             	sub    esp,0xc
c000cfdd:	50                   	push   eax
c000cfde:	e8 95 e7 ff ff       	call   c000b778 <UnixFile::~UnixFile()>
c000cfe3:	83 c4 10             	add    esp,0x10
c000cfe6:	90                   	nop
c000cfe7:	83 c4 0c             	add    esp,0xc
c000cfea:	c3                   	ret    
c000cfeb:	90                   	nop

c000cfec <Directory::~Directory()>:
c000cfec:	83 ec 0c             	sub    esp,0xc
c000cfef:	83 ec 0c             	sub    esp,0xc
c000cff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff6:	e8 cd ff ff ff       	call   c000cfc8 <Directory::~Directory()>
c000cffb:	83 c4 10             	add    esp,0x10
c000cffe:	83 ec 08             	sub    esp,0x8
c000d001:	68 14 01 00 00       	push   0x114
c000d006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d00a:	e8 0f fc ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000d00f:	83 c4 10             	add    esp,0x10
c000d012:	83 c4 0c             	add    esp,0xc
c000d015:	c3                   	ret    

c000d016 <Filesystem::Filesystem()>:
c000d016:	ba f4 48 02 c0       	mov    edx,0xc00248f4
c000d01b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d01f:	89 10                	mov    DWORD PTR [eax],edx
c000d021:	8b 15 14 80 02 c0    	mov    edx,DWORD PTR ds:0xc0028014
c000d027:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d02b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d02e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d032:	a3 14 80 02 c0       	mov    ds:0xc0028014,eax
c000d037:	90                   	nop
c000d038:	c3                   	ret    
c000d039:	90                   	nop

c000d03a <Filesystem::~Filesystem()>:
c000d03a:	ba f4 48 02 c0       	mov    edx,0xc00248f4
c000d03f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d043:	89 10                	mov    DWORD PTR [eax],edx
c000d045:	90                   	nop
c000d046:	c3                   	ret    
c000d047:	90                   	nop

c000d048 <Filesystem::~Filesystem()>:
c000d048:	83 ec 0c             	sub    esp,0xc
c000d04b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d04f:	e8 e6 ff ff ff       	call   c000d03a <Filesystem::~Filesystem()>
c000d054:	83 c4 04             	add    esp,0x4
c000d057:	83 ec 08             	sub    esp,0x8
c000d05a:	6a 08                	push   0x8
c000d05c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d060:	e8 b9 fb ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000d065:	83 c4 10             	add    esp,0x10
c000d068:	83 c4 0c             	add    esp,0xc
c000d06b:	c3                   	ret    

c000d06c <Fs::getcwd(Process*, char*, int)>:
c000d06c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d070:	31 c0                	xor    eax,eax
c000d072:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d075:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d079:	7d 15                	jge    c000d090 <Fs::getcwd(Process*, char*, int)+0x24>
c000d07b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d07f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d086:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d089:	84 c9                	test   cl,cl
c000d08b:	74 06                	je     c000d093 <Fs::getcwd(Process*, char*, int)+0x27>
c000d08d:	40                   	inc    eax
c000d08e:	eb e2                	jmp    c000d072 <Fs::getcwd(Process*, char*, int)+0x6>
c000d090:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d093:	31 c0                	xor    eax,eax
c000d095:	c3                   	ret    

c000d096 <Fs::initVFS()>:
c000d096:	83 ec 18             	sub    esp,0x18
c000d099:	6a 08                	push   0x8
c000d09b:	e8 6f c9 ff ff       	call   c0009a0f <malloc>
c000d0a0:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0a3:	e8 30 e8 00 00       	call   c001b8d8 <FAT::FAT()>
c000d0a8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d0af:	e8 5b c9 ff ff       	call   c0009a0f <malloc>
c000d0b4:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0b7:	e8 7a fa 00 00       	call   c001cb36 <ISO9660::ISO9660()>
c000d0bc:	83 c4 1c             	add    esp,0x1c
c000d0bf:	c3                   	ret    

c000d0c0 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d0c0:	55                   	push   ebp
c000d0c1:	57                   	push   edi
c000d0c2:	56                   	push   esi
c000d0c3:	53                   	push   ebx
c000d0c4:	81 ec 10 04 00 00    	sub    esp,0x410
c000d0ca:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d0d1:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d0d8:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d0df:	68 00 04 00 00       	push   0x400
c000d0e4:	6a 00                	push   0x0
c000d0e6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d0ea:	56                   	push   esi
c000d0eb:	e8 94 35 ff ff       	call   c0000684 <memset>
c000d0f0:	83 c4 10             	add    esp,0x10
c000d0f3:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d0f7:	75 0b                	jne    c000d104 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d0f9:	50                   	push   eax
c000d0fa:	50                   	push   eax
c000d0fb:	57                   	push   edi
c000d0fc:	56                   	push   esi
c000d0fd:	e8 3e 36 ff ff       	call   c0000740 <strcpy>
c000d102:	eb 41                	jmp    c000d145 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d104:	8a 07                	mov    al,BYTE PTR [edi]
c000d106:	3c 5c                	cmp    al,0x5c
c000d108:	74 04                	je     c000d10e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d10a:	3c 2f                	cmp    al,0x2f
c000d10c:	75 18                	jne    c000d126 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d10e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d111:	3c 60                	cmp    al,0x60
c000d113:	7e 03                	jle    c000d118 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d115:	83 e8 20             	sub    eax,0x20
c000d118:	88 04 24             	mov    BYTE PTR [esp],al
c000d11b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d122:	50                   	push   eax
c000d123:	50                   	push   eax
c000d124:	eb 18                	jmp    c000d13e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d126:	50                   	push   eax
c000d127:	50                   	push   eax
c000d128:	55                   	push   ebp
c000d129:	56                   	push   esi
c000d12a:	e8 11 36 ff ff       	call   c0000740 <strcpy>
c000d12f:	5a                   	pop    edx
c000d130:	59                   	pop    ecx
c000d131:	68 6a 5f 02 c0       	push   0xc0025f6a
c000d136:	56                   	push   esi
c000d137:	e8 44 37 ff ff       	call   c0000880 <strcat>
c000d13c:	5d                   	pop    ebp
c000d13d:	58                   	pop    eax
c000d13e:	57                   	push   edi
c000d13f:	56                   	push   esi
c000d140:	e8 3b 37 ff ff       	call   c0000880 <strcat>
c000d145:	83 c4 10             	add    esp,0x10
c000d148:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d14b:	3c 60                	cmp    al,0x60
c000d14d:	7e 03                	jle    c000d152 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d14f:	83 e8 20             	sub    eax,0x20
c000d152:	88 04 24             	mov    BYTE PTR [esp],al
c000d155:	88 03                	mov    BYTE PTR [ebx],al
c000d157:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d15e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d164:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d168:	bf 03 00 00 00       	mov    edi,0x3
c000d16d:	b8 03 00 00 00       	mov    eax,0x3
c000d172:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d175:	84 d2                	test   dl,dl
c000d177:	0f 84 91 00 00 00    	je     c000d20e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d17d:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d180:	80 fa 5c             	cmp    dl,0x5c
c000d183:	74 05                	je     c000d18a <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d185:	80 fa 2f             	cmp    dl,0x2f
c000d188:	75 12                	jne    c000d19c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d18a:	89 c5                	mov    ebp,eax
c000d18c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d191:	74 09                	je     c000d19c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d193:	40                   	inc    eax
c000d194:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d198:	89 cf                	mov    edi,ecx
c000d19a:	eb d6                	jmp    c000d172 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d19c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d1a1:	75 5b                	jne    c000d1fe <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d1a3:	80 fa 2e             	cmp    dl,0x2e
c000d1a6:	75 56                	jne    c000d1fe <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d1a8:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d1ac:	74 19                	je     c000d1c7 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d1ae:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d1b3:	74 53                	je     c000d208 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d1b5:	89 f9                	mov    ecx,edi
c000d1b7:	41                   	inc    ecx
c000d1b8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d1bb:	80 fa 2f             	cmp    dl,0x2f
c000d1be:	74 f7                	je     c000d1b7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d1c0:	80 fa 5c             	cmp    dl,0x5c
c000d1c3:	74 f2                	je     c000d1b7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d1c5:	eb d1                	jmp    c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1c7:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d1cc:	74 3a                	je     c000d208 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d1ce:	83 f8 03             	cmp    eax,0x3
c000d1d1:	74 c5                	je     c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1d3:	41                   	inc    ecx
c000d1d4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d1d7:	80 fa 2f             	cmp    dl,0x2f
c000d1da:	74 f7                	je     c000d1d3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d1dc:	80 fa 5c             	cmp    dl,0x5c
c000d1df:	74 f2                	je     c000d1d3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d1e1:	48                   	dec    eax
c000d1e2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d1e6:	75 06                	jne    c000d1ee <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d1e8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d1ec:	eb f3                	jmp    c000d1e1 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d1ee:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d1f2:	74 07                	je     c000d1fb <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d1f4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d1f8:	48                   	dec    eax
c000d1f9:	eb f3                	jmp    c000d1ee <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d1fb:	40                   	inc    eax
c000d1fc:	eb 9a                	jmp    c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1fe:	80 fa 2f             	cmp    dl,0x2f
c000d201:	74 95                	je     c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d203:	80 fa 5c             	cmp    dl,0x5c
c000d206:	74 90                	je     c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d208:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d20b:	40                   	inc    eax
c000d20c:	eb 8a                	jmp    c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d20e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d212:	83 ec 0c             	sub    esp,0xc
c000d215:	53                   	push   ebx
c000d216:	e8 85 34 ff ff       	call   c00006a0 <strlen>
c000d21b:	83 c4 10             	add    esp,0x10
c000d21e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d223:	75 26                	jne    c000d24b <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d225:	83 ec 0c             	sub    esp,0xc
c000d228:	53                   	push   ebx
c000d229:	e8 72 34 ff ff       	call   c00006a0 <strlen>
c000d22e:	83 c4 10             	add    esp,0x10
c000d231:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d236:	74 26                	je     c000d25e <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d238:	83 ec 0c             	sub    esp,0xc
c000d23b:	53                   	push   ebx
c000d23c:	e8 5f 34 ff ff       	call   c00006a0 <strlen>
c000d241:	83 c4 10             	add    esp,0x10
c000d244:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d249:	eb c7                	jmp    c000d212 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d24b:	83 ec 0c             	sub    esp,0xc
c000d24e:	53                   	push   ebx
c000d24f:	e8 4c 34 ff ff       	call   c00006a0 <strlen>
c000d254:	83 c4 10             	add    esp,0x10
c000d257:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d25c:	74 c7                	je     c000d225 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d25e:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d264:	5b                   	pop    ebx
c000d265:	5e                   	pop    esi
c000d266:	5f                   	pop    edi
c000d267:	5d                   	pop    ebp
c000d268:	c3                   	ret    
c000d269:	90                   	nop

c000d26a <File::File(char const*, Process*)>:
c000d26a:	83 ec 0c             	sub    esp,0xc
c000d26d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d271:	83 ec 08             	sub    esp,0x8
c000d274:	6a 00                	push   0x0
c000d276:	50                   	push   eax
c000d277:	e8 1a e3 ff ff       	call   c000b596 <UnixFile::UnixFile(int)>
c000d27c:	83 c4 10             	add    esp,0x10
c000d27f:	ba 5c 49 02 c0       	mov    edx,0xc002495c
c000d284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d288:	89 10                	mov    DWORD PTR [eax],edx
c000d28a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d28e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d298:	83 c0 0d             	add    eax,0xd
c000d29b:	83 ec 04             	sub    esp,0x4
c000d29e:	52                   	push   edx
c000d29f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2a3:	50                   	push   eax
c000d2a4:	e8 17 fe ff ff       	call   c000d0c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d2a9:	83 c4 10             	add    esp,0x10
c000d2ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2b0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d2b3:	8d 50 bf             	lea    edx,[eax-0x41]
c000d2b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ba:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d2c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2c4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d2c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2cc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d2d2:	0f b6 c0             	movzx  eax,al
c000d2d5:	8b 04 85 a0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b60]
c000d2dc:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d2e2:	85 c0                	test   eax,eax
c000d2e4:	75 40                	jne    c000d326 <File::File(char const*, Process*)+0xbc>
c000d2e6:	83 ec 0c             	sub    esp,0xc
c000d2e9:	68 c4 48 02 c0       	push   0xc00248c4
c000d2ee:	e8 0c fa ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000d2f3:	83 c4 10             	add    esp,0x10
c000d2f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2fa:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d300:	0f b6 c0             	movzx  eax,al
c000d303:	8b 04 85 a0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b60]
c000d30a:	83 ec 0c             	sub    esp,0xc
c000d30d:	50                   	push   eax
c000d30e:	e8 ab 30 00 00       	call   c00103be <LogicalDisk::mount()>
c000d313:	83 c4 10             	add    esp,0x10
c000d316:	83 ec 0c             	sub    esp,0xc
c000d319:	68 88 6c 02 c0       	push   0xc0026c88
c000d31e:	e8 dc f9 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000d323:	83 c4 10             	add    esp,0x10
c000d326:	90                   	nop
c000d327:	83 c4 0c             	add    esp,0xc
c000d32a:	c3                   	ret    
c000d32b:	90                   	nop

c000d32c <File::open(FileOpenMode)>:
c000d32c:	53                   	push   ebx
c000d32d:	b8 0b 00 00 00       	mov    eax,0xb
c000d332:	83 ec 08             	sub    esp,0x8
c000d335:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d339:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d340:	80 fa 19             	cmp    dl,0x19
c000d343:	77 40                	ja     c000d385 <File::open(FileOpenMode)+0x59>
c000d345:	8b 14 95 a0 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7b60]
c000d34c:	85 d2                	test   edx,edx
c000d34e:	74 35                	je     c000d385 <File::open(FileOpenMode)+0x59>
c000d350:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d356:	85 d2                	test   edx,edx
c000d358:	74 2b                	je     c000d385 <File::open(FileOpenMode)+0x59>
c000d35a:	b8 06 00 00 00       	mov    eax,0x6
c000d35f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d363:	75 20                	jne    c000d385 <File::open(FileOpenMode)+0x59>
c000d365:	8b 02                	mov    eax,DWORD PTR [edx]
c000d367:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d36d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d371:	51                   	push   ecx
c000d372:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d375:	51                   	push   ecx
c000d376:	52                   	push   edx
c000d377:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d37a:	83 c4 10             	add    esp,0x10
c000d37d:	85 c0                	test   eax,eax
c000d37f:	75 04                	jne    c000d385 <File::open(FileOpenMode)+0x59>
c000d381:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d385:	83 c4 08             	add    esp,0x8
c000d388:	5b                   	pop    ebx
c000d389:	c3                   	ret    

c000d38a <File::close()>:
c000d38a:	53                   	push   ebx
c000d38b:	b8 0b 00 00 00       	mov    eax,0xb
c000d390:	83 ec 08             	sub    esp,0x8
c000d393:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d397:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d39e:	80 fa 19             	cmp    dl,0x19
c000d3a1:	77 41                	ja     c000d3e4 <File::close()+0x5a>
c000d3a3:	8b 1c 95 a0 84 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7b60]
c000d3aa:	85 db                	test   ebx,ebx
c000d3ac:	74 36                	je     c000d3e4 <File::close()+0x5a>
c000d3ae:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d3b5:	74 2d                	je     c000d3e4 <File::close()+0x5a>
c000d3b7:	b8 05 00 00 00       	mov    eax,0x5
c000d3bc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d3c0:	74 22                	je     c000d3e4 <File::close()+0x5a>
c000d3c2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d3c6:	8b 04 95 a0 84 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7b60]
c000d3cd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d3d3:	53                   	push   ebx
c000d3d4:	53                   	push   ebx
c000d3d5:	8b 10                	mov    edx,DWORD PTR [eax]
c000d3d7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d3dd:	50                   	push   eax
c000d3de:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d3e1:	83 c4 10             	add    esp,0x10
c000d3e4:	83 c4 08             	add    esp,0x8
c000d3e7:	5b                   	pop    ebx
c000d3e8:	c3                   	ret    
c000d3e9:	90                   	nop

c000d3ea <File::seek(unsigned long long)>:
c000d3ea:	56                   	push   esi
c000d3eb:	53                   	push   ebx
c000d3ec:	b8 0b 00 00 00       	mov    eax,0xb
c000d3f1:	51                   	push   ecx
c000d3f2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d3f6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3fa:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d401:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d405:	80 fa 19             	cmp    dl,0x19
c000d408:	77 31                	ja     c000d43b <File::seek(unsigned long long)+0x51>
c000d40a:	8b 14 95 a0 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7b60]
c000d411:	85 d2                	test   edx,edx
c000d413:	74 26                	je     c000d43b <File::seek(unsigned long long)+0x51>
c000d415:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d41b:	85 d2                	test   edx,edx
c000d41d:	74 1c                	je     c000d43b <File::seek(unsigned long long)+0x51>
c000d41f:	b8 05 00 00 00       	mov    eax,0x5
c000d424:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d428:	74 11                	je     c000d43b <File::seek(unsigned long long)+0x51>
c000d42a:	8b 02                	mov    eax,DWORD PTR [edx]
c000d42c:	53                   	push   ebx
c000d42d:	51                   	push   ecx
c000d42e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d434:	52                   	push   edx
c000d435:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d438:	83 c4 10             	add    esp,0x10
c000d43b:	5a                   	pop    edx
c000d43c:	5b                   	pop    ebx
c000d43d:	5e                   	pop    esi
c000d43e:	c3                   	ret    
c000d43f:	90                   	nop

c000d440 <File::tell(unsigned long long*)>:
c000d440:	83 ec 0c             	sub    esp,0xc
c000d443:	b8 0b 00 00 00       	mov    eax,0xb
c000d448:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d44c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d453:	80 fa 19             	cmp    dl,0x19
c000d456:	77 34                	ja     c000d48c <File::tell(unsigned long long*)+0x4c>
c000d458:	8b 14 95 a0 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7b60]
c000d45f:	85 d2                	test   edx,edx
c000d461:	74 29                	je     c000d48c <File::tell(unsigned long long*)+0x4c>
c000d463:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d469:	85 d2                	test   edx,edx
c000d46b:	74 1f                	je     c000d48c <File::tell(unsigned long long*)+0x4c>
c000d46d:	b8 05 00 00 00       	mov    eax,0x5
c000d472:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d476:	74 14                	je     c000d48c <File::tell(unsigned long long*)+0x4c>
c000d478:	50                   	push   eax
c000d479:	8b 02                	mov    eax,DWORD PTR [edx]
c000d47b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d47f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d485:	52                   	push   edx
c000d486:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d489:	83 c4 10             	add    esp,0x10
c000d48c:	83 c4 0c             	add    esp,0xc
c000d48f:	c3                   	ret    

c000d490 <File::rewind()>:
c000d490:	83 ec 10             	sub    esp,0x10
c000d493:	6a 00                	push   0x0
c000d495:	6a 00                	push   0x0
c000d497:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49b:	e8 4a ff ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c000d4a0:	83 c4 1c             	add    esp,0x1c
c000d4a3:	c3                   	ret    

c000d4a4 <File::unlink()>:
c000d4a4:	83 ec 0c             	sub    esp,0xc
c000d4a7:	b8 0b 00 00 00       	mov    eax,0xb
c000d4ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d4b0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d4b7:	80 f9 19             	cmp    cl,0x19
c000d4ba:	77 2f                	ja     c000d4eb <File::unlink()+0x47>
c000d4bc:	8b 0c 8d a0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b60]
c000d4c3:	85 c9                	test   ecx,ecx
c000d4c5:	74 24                	je     c000d4eb <File::unlink()+0x47>
c000d4c7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d4cd:	85 c9                	test   ecx,ecx
c000d4cf:	74 1a                	je     c000d4eb <File::unlink()+0x47>
c000d4d1:	b8 06 00 00 00       	mov    eax,0x6
c000d4d6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d4da:	75 0f                	jne    c000d4eb <File::unlink()+0x47>
c000d4dc:	83 c2 0d             	add    edx,0xd
c000d4df:	50                   	push   eax
c000d4e0:	50                   	push   eax
c000d4e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d4e3:	52                   	push   edx
c000d4e4:	51                   	push   ecx
c000d4e5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	83 c4 0c             	add    esp,0xc
c000d4ee:	c3                   	ret    
c000d4ef:	90                   	nop

c000d4f0 <File::rename(char const*)>:
c000d4f0:	83 ec 0c             	sub    esp,0xc
c000d4f3:	b8 0b 00 00 00       	mov    eax,0xb
c000d4f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d4fc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d503:	80 f9 19             	cmp    cl,0x19
c000d506:	77 32                	ja     c000d53a <File::rename(char const*)+0x4a>
c000d508:	8b 0c 8d a0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b60]
c000d50f:	85 c9                	test   ecx,ecx
c000d511:	74 27                	je     c000d53a <File::rename(char const*)+0x4a>
c000d513:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d519:	85 c9                	test   ecx,ecx
c000d51b:	74 1d                	je     c000d53a <File::rename(char const*)+0x4a>
c000d51d:	b8 06 00 00 00       	mov    eax,0x6
c000d522:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d526:	75 12                	jne    c000d53a <File::rename(char const*)+0x4a>
c000d528:	83 c2 0d             	add    edx,0xd
c000d52b:	50                   	push   eax
c000d52c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d52e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d532:	52                   	push   edx
c000d533:	51                   	push   ecx
c000d534:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d537:	83 c4 10             	add    esp,0x10
c000d53a:	83 c4 0c             	add    esp,0xc
c000d53d:	c3                   	ret    

c000d53e <File::chfatattr(unsigned char, unsigned char)>:
c000d53e:	57                   	push   edi
c000d53f:	b8 0b 00 00 00       	mov    eax,0xb
c000d544:	56                   	push   esi
c000d545:	53                   	push   ebx
c000d546:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d54a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d54e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d555:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d559:	80 f9 19             	cmp    cl,0x19
c000d55c:	77 37                	ja     c000d595 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d55e:	8b 0c 8d a0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b60]
c000d565:	85 c9                	test   ecx,ecx
c000d567:	74 2c                	je     c000d595 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d569:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d56f:	85 c9                	test   ecx,ecx
c000d571:	74 22                	je     c000d595 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d573:	b8 06 00 00 00       	mov    eax,0x6
c000d578:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d57c:	75 17                	jne    c000d595 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d57e:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d580:	89 f0                	mov    eax,esi
c000d582:	83 c2 0d             	add    edx,0xd
c000d585:	0f b6 f0             	movzx  esi,al
c000d588:	0f b6 db             	movzx  ebx,bl
c000d58b:	56                   	push   esi
c000d58c:	53                   	push   ebx
c000d58d:	52                   	push   edx
c000d58e:	51                   	push   ecx
c000d58f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d592:	83 c4 10             	add    esp,0x10
c000d595:	5b                   	pop    ebx
c000d596:	5e                   	pop    esi
c000d597:	5f                   	pop    edi
c000d598:	c3                   	ret    
c000d599:	90                   	nop

c000d59a <File::exists()>:
c000d59a:	83 ec 0c             	sub    esp,0xc
c000d59d:	31 c0                	xor    eax,eax
c000d59f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5a3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d5aa:	80 f9 19             	cmp    cl,0x19
c000d5ad:	77 24                	ja     c000d5d3 <File::exists()+0x39>
c000d5af:	8b 0c 8d a0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b60]
c000d5b6:	85 c9                	test   ecx,ecx
c000d5b8:	74 19                	je     c000d5d3 <File::exists()+0x39>
c000d5ba:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d5c0:	85 c9                	test   ecx,ecx
c000d5c2:	74 0f                	je     c000d5d3 <File::exists()+0x39>
c000d5c4:	83 c2 0d             	add    edx,0xd
c000d5c7:	50                   	push   eax
c000d5c8:	50                   	push   eax
c000d5c9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d5cb:	52                   	push   edx
c000d5cc:	51                   	push   ecx
c000d5cd:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d5d0:	83 c4 10             	add    esp,0x10
c000d5d3:	83 c4 0c             	add    esp,0xc
c000d5d6:	c3                   	ret    
c000d5d7:	90                   	nop

c000d5d8 <File::stat(unsigned long long*, bool*)>:
c000d5d8:	56                   	push   esi
c000d5d9:	53                   	push   ebx
c000d5da:	50                   	push   eax
c000d5db:	b8 0b 00 00 00       	mov    eax,0xb
c000d5e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5e4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d5e8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d5ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d5f3:	80 f9 19             	cmp    cl,0x19
c000d5f6:	77 3d                	ja     c000d635 <File::stat(unsigned long long*, bool*)+0x5d>
c000d5f8:	8b 0c 8d a0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b60]
c000d5ff:	85 c9                	test   ecx,ecx
c000d601:	74 32                	je     c000d635 <File::stat(unsigned long long*, bool*)+0x5d>
c000d603:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d609:	85 c9                	test   ecx,ecx
c000d60b:	74 28                	je     c000d635 <File::stat(unsigned long long*, bool*)+0x5d>
c000d60d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d60f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d613:	74 13                	je     c000d628 <File::stat(unsigned long long*, bool*)+0x50>
c000d615:	83 ec 04             	sub    esp,0x4
c000d618:	56                   	push   esi
c000d619:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d61f:	51                   	push   ecx
c000d620:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d623:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d626:	eb 0a                	jmp    c000d632 <File::stat(unsigned long long*, bool*)+0x5a>
c000d628:	53                   	push   ebx
c000d629:	83 c2 0d             	add    edx,0xd
c000d62c:	56                   	push   esi
c000d62d:	52                   	push   edx
c000d62e:	51                   	push   ecx
c000d62f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d632:	83 c4 10             	add    esp,0x10
c000d635:	5a                   	pop    edx
c000d636:	5b                   	pop    ebx
c000d637:	5e                   	pop    esi
c000d638:	c3                   	ret    

c000d639 <Fs::setcwd(Process*, char*)>:
c000d639:	55                   	push   ebp
c000d63a:	57                   	push   edi
c000d63b:	56                   	push   esi
c000d63c:	53                   	push   ebx
c000d63d:	81 ec 20 02 00 00    	sub    esp,0x220
c000d643:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d64a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d650:	57                   	push   edi
c000d651:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d658:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d65c:	56                   	push   esi
c000d65d:	e8 5e fa ff ff       	call   c000d0c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d662:	89 34 24             	mov    DWORD PTR [esp],esi
c000d665:	e8 36 30 ff ff       	call   c00006a0 <strlen>
c000d66a:	83 c4 10             	add    esp,0x10
c000d66d:	83 f8 02             	cmp    eax,0x2
c000d670:	77 17                	ja     c000d689 <Fs::setcwd(Process*, char*)+0x50>
c000d672:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000d677:	83 e8 41             	sub    eax,0x41
c000d67a:	83 f8 19             	cmp    eax,0x19
c000d67d:	76 24                	jbe    c000d6a3 <Fs::setcwd(Process*, char*)+0x6a>
c000d67f:	b8 03 00 00 00       	mov    eax,0x3
c000d684:	e9 e0 00 00 00       	jmp    c000d769 <Fs::setcwd(Process*, char*)+0x130>
c000d689:	83 ec 0c             	sub    esp,0xc
c000d68c:	56                   	push   esi
c000d68d:	e8 0e 30 ff ff       	call   c00006a0 <strlen>
c000d692:	83 c4 10             	add    esp,0x10
c000d695:	83 f8 03             	cmp    eax,0x3
c000d698:	75 34                	jne    c000d6ce <Fs::setcwd(Process*, char*)+0x95>
c000d69a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d69f:	75 2d                	jne    c000d6ce <Fs::setcwd(Process*, char*)+0x95>
c000d6a1:	eb cf                	jmp    c000d672 <Fs::setcwd(Process*, char*)+0x39>
c000d6a3:	8b 14 85 a0 84 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7b60]
c000d6aa:	b8 05 00 00 00       	mov    eax,0x5
c000d6af:	85 d2                	test   edx,edx
c000d6b1:	0f 84 b2 00 00 00    	je     c000d769 <Fs::setcwd(Process*, char*)+0x130>
c000d6b7:	b8 06 00 00 00       	mov    eax,0x6
c000d6bc:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d6c3:	0f 85 92 00 00 00    	jne    c000d75b <Fs::setcwd(Process*, char*)+0x122>
c000d6c9:	e9 9b 00 00 00       	jmp    c000d769 <Fs::setcwd(Process*, char*)+0x130>
c000d6ce:	83 ec 0c             	sub    esp,0xc
c000d6d1:	68 14 01 00 00       	push   0x114
c000d6d6:	e8 34 c3 ff ff       	call   c0009a0f <malloc>
c000d6db:	83 c4 0c             	add    esp,0xc
c000d6de:	89 c3                	mov    ebx,eax
c000d6e0:	55                   	push   ebp
c000d6e1:	56                   	push   esi
c000d6e2:	50                   	push   eax
c000d6e3:	e8 82 fb ff ff       	call   c000d26a <File::File(char const*, Process*)>
c000d6e8:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d6ed:	83 c4 0c             	add    esp,0xc
c000d6f0:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d6f4:	50                   	push   eax
c000d6f5:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d6f9:	50                   	push   eax
c000d6fa:	53                   	push   ebx
c000d6fb:	e8 d8 fe ff ff       	call   c000d5d8 <File::stat(unsigned long long*, bool*)>
c000d700:	83 c4 10             	add    esp,0x10
c000d703:	83 f8 02             	cmp    eax,0x2
c000d706:	74 04                	je     c000d70c <Fs::setcwd(Process*, char*)+0xd3>
c000d708:	85 c0                	test   eax,eax
c000d70a:	74 1c                	je     c000d728 <Fs::setcwd(Process*, char*)+0xef>
c000d70c:	b8 01 00 00 00       	mov    eax,0x1
c000d711:	85 db                	test   ebx,ebx
c000d713:	74 54                	je     c000d769 <Fs::setcwd(Process*, char*)+0x130>
c000d715:	83 ec 0c             	sub    esp,0xc
c000d718:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d71a:	53                   	push   ebx
c000d71b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d71e:	83 c4 10             	add    esp,0x10
c000d721:	b8 01 00 00 00       	mov    eax,0x1
c000d726:	eb 41                	jmp    c000d769 <Fs::setcwd(Process*, char*)+0x130>
c000d728:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d72d:	75 1c                	jne    c000d74b <Fs::setcwd(Process*, char*)+0x112>
c000d72f:	b8 02 00 00 00       	mov    eax,0x2
c000d734:	85 db                	test   ebx,ebx
c000d736:	74 31                	je     c000d769 <Fs::setcwd(Process*, char*)+0x130>
c000d738:	83 ec 0c             	sub    esp,0xc
c000d73b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d73d:	53                   	push   ebx
c000d73e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d741:	83 c4 10             	add    esp,0x10
c000d744:	b8 02 00 00 00       	mov    eax,0x2
c000d749:	eb 1e                	jmp    c000d769 <Fs::setcwd(Process*, char*)+0x130>
c000d74b:	85 db                	test   ebx,ebx
c000d74d:	74 0c                	je     c000d75b <Fs::setcwd(Process*, char*)+0x122>
c000d74f:	83 ec 0c             	sub    esp,0xc
c000d752:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d754:	53                   	push   ebx
c000d755:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d758:	83 c4 10             	add    esp,0x10
c000d75b:	50                   	push   eax
c000d75c:	50                   	push   eax
c000d75d:	56                   	push   esi
c000d75e:	57                   	push   edi
c000d75f:	e8 dc 2f ff ff       	call   c0000740 <strcpy>
c000d764:	83 c4 10             	add    esp,0x10
c000d767:	31 c0                	xor    eax,eax
c000d769:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d76f:	5b                   	pop    ebx
c000d770:	5e                   	pop    esi
c000d771:	5f                   	pop    edi
c000d772:	5d                   	pop    ebp
c000d773:	c3                   	ret    

c000d774 <Directory::Directory(char const*, Process*)>:
c000d774:	83 ec 0c             	sub    esp,0xc
c000d777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d77b:	83 ec 08             	sub    esp,0x8
c000d77e:	6a 00                	push   0x0
c000d780:	50                   	push   eax
c000d781:	e8 10 de ff ff       	call   c000b596 <UnixFile::UnixFile(int)>
c000d786:	83 c4 10             	add    esp,0x10
c000d789:	ba 78 49 02 c0       	mov    edx,0xc0024978
c000d78e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d792:	89 10                	mov    DWORD PTR [eax],edx
c000d794:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d798:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d79e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7a2:	83 c0 0d             	add    eax,0xd
c000d7a5:	83 ec 04             	sub    esp,0x4
c000d7a8:	52                   	push   edx
c000d7a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ad:	50                   	push   eax
c000d7ae:	e8 0d f9 ff ff       	call   c000d0c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d7b3:	83 c4 10             	add    esp,0x10
c000d7b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ba:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d7bd:	8d 50 bf             	lea    edx,[eax-0x41]
c000d7c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7c4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ce:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d7d2:	90                   	nop
c000d7d3:	83 c4 0c             	add    esp,0xc
c000d7d6:	c3                   	ret    
c000d7d7:	90                   	nop

c000d7d8 <Directory::open()>:
c000d7d8:	53                   	push   ebx
c000d7d9:	b8 0b 00 00 00       	mov    eax,0xb
c000d7de:	83 ec 08             	sub    esp,0x8
c000d7e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d7e5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d7ec:	80 fa 19             	cmp    dl,0x19
c000d7ef:	77 3d                	ja     c000d82e <Directory::open()+0x56>
c000d7f1:	8b 14 95 a0 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7b60]
c000d7f8:	85 d2                	test   edx,edx
c000d7fa:	74 32                	je     c000d82e <Directory::open()+0x56>
c000d7fc:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d802:	85 d2                	test   edx,edx
c000d804:	74 28                	je     c000d82e <Directory::open()+0x56>
c000d806:	b8 06 00 00 00       	mov    eax,0x6
c000d80b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d80f:	75 1d                	jne    c000d82e <Directory::open()+0x56>
c000d811:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d817:	50                   	push   eax
c000d818:	8b 02                	mov    eax,DWORD PTR [edx]
c000d81a:	51                   	push   ecx
c000d81b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d81e:	51                   	push   ecx
c000d81f:	52                   	push   edx
c000d820:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d823:	83 c4 10             	add    esp,0x10
c000d826:	85 c0                	test   eax,eax
c000d828:	75 04                	jne    c000d82e <Directory::open()+0x56>
c000d82a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d82e:	83 c4 08             	add    esp,0x8
c000d831:	5b                   	pop    ebx
c000d832:	c3                   	ret    
c000d833:	90                   	nop

c000d834 <Directory::close()>:
c000d834:	53                   	push   ebx
c000d835:	b8 0b 00 00 00       	mov    eax,0xb
c000d83a:	83 ec 08             	sub    esp,0x8
c000d83d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d841:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d848:	80 fa 19             	cmp    dl,0x19
c000d84b:	77 41                	ja     c000d88e <Directory::close()+0x5a>
c000d84d:	8b 1c 95 a0 84 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7b60]
c000d854:	85 db                	test   ebx,ebx
c000d856:	74 36                	je     c000d88e <Directory::close()+0x5a>
c000d858:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d85f:	74 2d                	je     c000d88e <Directory::close()+0x5a>
c000d861:	b8 05 00 00 00       	mov    eax,0x5
c000d866:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d86a:	74 22                	je     c000d88e <Directory::close()+0x5a>
c000d86c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d870:	8b 04 95 a0 84 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7b60]
c000d877:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d87d:	53                   	push   ebx
c000d87e:	53                   	push   ebx
c000d87f:	8b 10                	mov    edx,DWORD PTR [eax]
c000d881:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d887:	50                   	push   eax
c000d888:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d88b:	83 c4 10             	add    esp,0x10
c000d88e:	83 c4 08             	add    esp,0x8
c000d891:	5b                   	pop    ebx
c000d892:	c3                   	ret    
c000d893:	90                   	nop

c000d894 <Directory::unlink()>:
c000d894:	83 ec 0c             	sub    esp,0xc
c000d897:	b8 0b 00 00 00       	mov    eax,0xb
c000d89c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8a0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8a7:	80 f9 19             	cmp    cl,0x19
c000d8aa:	77 2f                	ja     c000d8db <Directory::unlink()+0x47>
c000d8ac:	8b 0c 8d a0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b60]
c000d8b3:	85 c9                	test   ecx,ecx
c000d8b5:	74 24                	je     c000d8db <Directory::unlink()+0x47>
c000d8b7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8bd:	85 c9                	test   ecx,ecx
c000d8bf:	74 1a                	je     c000d8db <Directory::unlink()+0x47>
c000d8c1:	b8 06 00 00 00       	mov    eax,0x6
c000d8c6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d8ca:	75 0f                	jne    c000d8db <Directory::unlink()+0x47>
c000d8cc:	83 c2 0d             	add    edx,0xd
c000d8cf:	50                   	push   eax
c000d8d0:	50                   	push   eax
c000d8d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8d3:	52                   	push   edx
c000d8d4:	51                   	push   ecx
c000d8d5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d8d8:	83 c4 10             	add    esp,0x10
c000d8db:	83 c4 0c             	add    esp,0xc
c000d8de:	c3                   	ret    
c000d8df:	90                   	nop

c000d8e0 <Directory::rename(char const*)>:
c000d8e0:	83 ec 0c             	sub    esp,0xc
c000d8e3:	b8 0b 00 00 00       	mov    eax,0xb
c000d8e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8ec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8f3:	80 f9 19             	cmp    cl,0x19
c000d8f6:	77 32                	ja     c000d92a <Directory::rename(char const*)+0x4a>
c000d8f8:	8b 0c 8d a0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b60]
c000d8ff:	85 c9                	test   ecx,ecx
c000d901:	74 27                	je     c000d92a <Directory::rename(char const*)+0x4a>
c000d903:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d909:	85 c9                	test   ecx,ecx
c000d90b:	74 1d                	je     c000d92a <Directory::rename(char const*)+0x4a>
c000d90d:	b8 06 00 00 00       	mov    eax,0x6
c000d912:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d916:	75 12                	jne    c000d92a <Directory::rename(char const*)+0x4a>
c000d918:	83 c2 0d             	add    edx,0xd
c000d91b:	50                   	push   eax
c000d91c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d91e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d922:	52                   	push   edx
c000d923:	51                   	push   ecx
c000d924:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d927:	83 c4 10             	add    esp,0x10
c000d92a:	83 c4 0c             	add    esp,0xc
c000d92d:	c3                   	ret    

c000d92e <Directory::exists()>:
c000d92e:	83 ec 0c             	sub    esp,0xc
c000d931:	31 c0                	xor    eax,eax
c000d933:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d937:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d93e:	80 f9 19             	cmp    cl,0x19
c000d941:	77 24                	ja     c000d967 <Directory::exists()+0x39>
c000d943:	8b 0c 8d a0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b60]
c000d94a:	85 c9                	test   ecx,ecx
c000d94c:	74 19                	je     c000d967 <Directory::exists()+0x39>
c000d94e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d954:	85 c9                	test   ecx,ecx
c000d956:	74 0f                	je     c000d967 <Directory::exists()+0x39>
c000d958:	83 c2 0d             	add    edx,0xd
c000d95b:	50                   	push   eax
c000d95c:	50                   	push   eax
c000d95d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d95f:	52                   	push   edx
c000d960:	51                   	push   ecx
c000d961:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d964:	83 c4 10             	add    esp,0x10
c000d967:	83 c4 0c             	add    esp,0xc
c000d96a:	c3                   	ret    
c000d96b:	90                   	nop

c000d96c <Directory::read(dirent*)>:
c000d96c:	83 ec 1c             	sub    esp,0x1c
c000d96f:	b8 0b 00 00 00       	mov    eax,0xb
c000d974:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d978:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d97f:	80 fa 19             	cmp    dl,0x19
c000d982:	77 30                	ja     c000d9b4 <Directory::read(dirent*)+0x48>
c000d984:	8b 14 95 a0 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7b60]
c000d98b:	85 d2                	test   edx,edx
c000d98d:	74 25                	je     c000d9b4 <Directory::read(dirent*)+0x48>
c000d98f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d996:	74 1c                	je     c000d9b4 <Directory::read(dirent*)+0x48>
c000d998:	83 ec 0c             	sub    esp,0xc
c000d99b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d99d:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d9a1:	52                   	push   edx
c000d9a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9a6:	6a 00                	push   0x0
c000d9a8:	68 10 01 00 00       	push   0x110
c000d9ad:	51                   	push   ecx
c000d9ae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d9b1:	83 c4 20             	add    esp,0x20
c000d9b4:	83 c4 1c             	add    esp,0x1c
c000d9b7:	c3                   	ret    

c000d9b8 <Directory::create()>:
c000d9b8:	83 ec 0c             	sub    esp,0xc
c000d9bb:	b8 0b 00 00 00       	mov    eax,0xb
c000d9c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d9c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d9cb:	80 f9 19             	cmp    cl,0x19
c000d9ce:	77 2f                	ja     c000d9ff <Directory::create()+0x47>
c000d9d0:	8b 0c 8d a0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b60]
c000d9d7:	85 c9                	test   ecx,ecx
c000d9d9:	74 24                	je     c000d9ff <Directory::create()+0x47>
c000d9db:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d9e1:	85 c9                	test   ecx,ecx
c000d9e3:	74 1a                	je     c000d9ff <Directory::create()+0x47>
c000d9e5:	b8 06 00 00 00       	mov    eax,0x6
c000d9ea:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d9ee:	75 0f                	jne    c000d9ff <Directory::create()+0x47>
c000d9f0:	83 c2 0d             	add    edx,0xd
c000d9f3:	50                   	push   eax
c000d9f4:	50                   	push   eax
c000d9f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d9f7:	52                   	push   edx
c000d9f8:	51                   	push   ecx
c000d9f9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	83 c4 0c             	add    esp,0xc
c000da02:	c3                   	ret    
c000da03:	90                   	nop

c000da04 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000da04:	b8 0a 00 00 00       	mov    eax,0xa
c000da09:	c3                   	ret    
c000da0a:	66 90                	xchg   ax,ax

c000da0c <Bus::Bus(char const*)>:
c000da0c:	83 ec 0c             	sub    esp,0xc
c000da0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da13:	83 ec 08             	sub    esp,0x8
c000da16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da1a:	50                   	push   eax
c000da1b:	e8 8a 09 00 00       	call   c000e3aa <Device::Device(char const*)>
c000da20:	83 c4 10             	add    esp,0x10
c000da23:	ba 94 49 02 c0       	mov    edx,0xc0024994
c000da28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da2c:	89 10                	mov    DWORD PTR [eax],edx
c000da2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da32:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000da3c:	90                   	nop
c000da3d:	83 c4 0c             	add    esp,0xc
c000da40:	c3                   	ret    
c000da41:	90                   	nop
c000da42:	66 90                	xchg   ax,ax

c000da44 <Bus::~Bus()>:
c000da44:	83 ec 0c             	sub    esp,0xc
c000da47:	ba 94 49 02 c0       	mov    edx,0xc0024994
c000da4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da50:	89 10                	mov    DWORD PTR [eax],edx
c000da52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da56:	83 ec 0c             	sub    esp,0xc
c000da59:	50                   	push   eax
c000da5a:	e8 15 06 00 00       	call   c000e074 <Device::~Device()>
c000da5f:	83 c4 10             	add    esp,0x10
c000da62:	90                   	nop
c000da63:	83 c4 0c             	add    esp,0xc
c000da66:	c3                   	ret    
c000da67:	90                   	nop

c000da68 <Bus::~Bus()>:
c000da68:	83 ec 0c             	sub    esp,0xc
c000da6b:	83 ec 0c             	sub    esp,0xc
c000da6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da72:	e8 cd ff ff ff       	call   c000da44 <Bus::~Bus()>
c000da77:	83 c4 10             	add    esp,0x10
c000da7a:	83 ec 08             	sub    esp,0x8
c000da7d:	68 58 01 00 00       	push   0x158
c000da82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da86:	e8 93 f1 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000da8b:	83 c4 10             	add    esp,0x10
c000da8e:	83 c4 0c             	add    esp,0xc
c000da91:	c3                   	ret    
c000da92:	66 90                	xchg   ax,ax

c000da94 <Buzzer::Buzzer(char const*)>:
c000da94:	83 ec 0c             	sub    esp,0xc
c000da97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da9b:	83 ec 08             	sub    esp,0x8
c000da9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daa2:	50                   	push   eax
c000daa3:	e8 02 09 00 00       	call   c000e3aa <Device::Device(char const*)>
c000daa8:	83 c4 10             	add    esp,0x10
c000daab:	ba c0 49 02 c0       	mov    edx,0xc00249c0
c000dab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dab4:	89 10                	mov    DWORD PTR [eax],edx
c000dab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daba:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000dac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dac8:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000dad2:	90                   	nop
c000dad3:	83 c4 0c             	add    esp,0xc
c000dad6:	c3                   	ret    
c000dad7:	90                   	nop

c000dad8 <Buzzer::~Buzzer()>:
c000dad8:	83 ec 0c             	sub    esp,0xc
c000dadb:	ba c0 49 02 c0       	mov    edx,0xc00249c0
c000dae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae4:	89 10                	mov    DWORD PTR [eax],edx
c000dae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daea:	83 ec 0c             	sub    esp,0xc
c000daed:	50                   	push   eax
c000daee:	e8 81 05 00 00       	call   c000e074 <Device::~Device()>
c000daf3:	83 c4 10             	add    esp,0x10
c000daf6:	90                   	nop
c000daf7:	83 c4 0c             	add    esp,0xc
c000dafa:	c3                   	ret    
c000dafb:	90                   	nop

c000dafc <Buzzer::~Buzzer()>:
c000dafc:	83 ec 0c             	sub    esp,0xc
c000daff:	83 ec 0c             	sub    esp,0xc
c000db02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db06:	e8 cd ff ff ff       	call   c000dad8 <Buzzer::~Buzzer()>
c000db0b:	83 c4 10             	add    esp,0x10
c000db0e:	83 ec 08             	sub    esp,0x8
c000db11:	68 5c 01 00 00       	push   0x15c
c000db16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db1a:	e8 ff f0 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000db1f:	83 c4 10             	add    esp,0x10
c000db22:	83 c4 0c             	add    esp,0xc
c000db25:	c3                   	ret    

c000db26 <Buzzer::stop()>:
c000db26:	83 ec 14             	sub    esp,0x14
c000db29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000db2d:	8b 10                	mov    edx,DWORD PTR [eax]
c000db2f:	6a 00                	push   0x0
c000db31:	50                   	push   eax
c000db32:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000db35:	83 c4 1c             	add    esp,0x1c
c000db38:	c3                   	ret    

c000db39 <beepThread(void*)>:
c000db39:	53                   	push   ebx
c000db3a:	83 ec 08             	sub    esp,0x8
c000db3d:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c000db42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db46:	48                   	dec    eax
c000db47:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c000db4c:	75 02                	jne    c000db50 <beepThread(void*)+0x17>
c000db4e:	fb                   	sti    
c000db4f:	90                   	nop
c000db50:	83 ec 0c             	sub    esp,0xc
c000db53:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000db5a:	50                   	push   eax
c000db5b:	e8 ec ad 00 00       	call   c001894c <milliTenthSleep(unsigned int)>
c000db60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000db63:	e8 be ff ff ff       	call   c000db26 <Buzzer::stop()>
c000db68:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000db70:	83 c4 18             	add    esp,0x18
c000db73:	5b                   	pop    ebx
c000db74:	e9 d3 ac 00 00       	jmp    c001884c <blockTask(TaskState)>
c000db79:	90                   	nop

c000db7a <Buzzer::beep(int, int, bool)>:
c000db7a:	57                   	push   edi
c000db7b:	56                   	push   esi
c000db7c:	53                   	push   ebx
c000db7d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db81:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000db85:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000db89:	50                   	push   eax
c000db8a:	50                   	push   eax
c000db8b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000db8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db91:	53                   	push   ebx
c000db92:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000db95:	83 c4 10             	add    esp,0x10
c000db98:	89 f8                	mov    eax,edi
c000db9a:	84 c0                	test   al,al
c000db9c:	74 1e                	je     c000dbbc <Buzzer::beep(int, int, bool)+0x42>
c000db9e:	83 ec 0c             	sub    esp,0xc
c000dba1:	6b f6 0a             	imul   esi,esi,0xa
c000dba4:	56                   	push   esi
c000dba5:	e8 a2 ad 00 00       	call   c001894c <milliTenthSleep(unsigned int)>
c000dbaa:	83 c4 10             	add    esp,0x10
c000dbad:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000dbb1:	5b                   	pop    ebx
c000dbb2:	5e                   	pop    esi
c000dbb3:	5f                   	pop    edi
c000dbb4:	e9 6d ff ff ff       	jmp    c000db26 <Buzzer::stop()>
c000dbb9:	8d 76 00             	lea    esi,[esi+0x0]
c000dbbc:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000dbc2:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000dbc7:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000dbcf:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dbd3:	c7 44 24 14 39 db 00 c0 	mov    DWORD PTR [esp+0x14],0xc000db39
c000dbdb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbdf:	5b                   	pop    ebx
c000dbe0:	5e                   	pop    esi
c000dbe1:	5f                   	pop    edi
c000dbe2:	e9 51 a8 00 00       	jmp    c0018438 <Process::createThread(void (*)(void*), void*, int)>
c000dbe7:	90                   	nop

c000dbe8 <User::loadClockSettings(int)>:
c000dbe8:	53                   	push   ebx
c000dbe9:	83 ec 14             	sub    esp,0x14
c000dbec:	68 14 01 00 00       	push   0x114
c000dbf1:	e8 19 be ff ff       	call   c0009a0f <malloc>
c000dbf6:	83 c4 0c             	add    esp,0xc
c000dbf9:	89 c3                	mov    ebx,eax
c000dbfb:	ff 35 30 94 02 c0    	push   DWORD PTR ds:0xc0029430
c000dc01:	68 e8 49 02 c0       	push   0xc00249e8
c000dc06:	50                   	push   eax
c000dc07:	e8 5e f6 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c000dc0c:	58                   	pop    eax
c000dc0d:	5a                   	pop    edx
c000dc0e:	6a 01                	push   0x1
c000dc10:	53                   	push   ebx
c000dc11:	e8 16 f7 ff ff       	call   c000d32c <File::open(FileOpenMode)>
c000dc16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dc19:	e8 6c f7 ff ff       	call   c000d38a <File::close()>
c000dc1e:	83 c4 10             	add    esp,0x10
c000dc21:	85 db                	test   ebx,ebx
c000dc23:	74 0f                	je     c000dc34 <User::loadClockSettings(int)+0x4c>
c000dc25:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dc27:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000dc2b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000dc2e:	83 c4 08             	add    esp,0x8
c000dc31:	5b                   	pop    ebx
c000dc32:	ff e0                	jmp    eax
c000dc34:	83 c4 08             	add    esp,0x8
c000dc37:	5b                   	pop    ebx
c000dc38:	c3                   	ret    
c000dc39:	90                   	nop

c000dc3a <Clock::Clock(char const*)>:
c000dc3a:	83 ec 0c             	sub    esp,0xc
c000dc3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc41:	83 ec 08             	sub    esp,0x8
c000dc44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc48:	50                   	push   eax
c000dc49:	e8 5c 07 00 00       	call   c000e3aa <Device::Device(char const*)>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	ba 10 4a 02 c0       	mov    edx,0xc0024a10
c000dc56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc5a:	89 10                	mov    DWORD PTR [eax],edx
c000dc5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc60:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000dc6a:	90                   	nop
c000dc6b:	83 c4 0c             	add    esp,0xc
c000dc6e:	c3                   	ret    
c000dc6f:	90                   	nop

c000dc70 <Clock::~Clock()>:
c000dc70:	83 ec 0c             	sub    esp,0xc
c000dc73:	ba 10 4a 02 c0       	mov    edx,0xc0024a10
c000dc78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc7c:	89 10                	mov    DWORD PTR [eax],edx
c000dc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc82:	83 ec 0c             	sub    esp,0xc
c000dc85:	50                   	push   eax
c000dc86:	e8 e9 03 00 00       	call   c000e074 <Device::~Device()>
c000dc8b:	83 c4 10             	add    esp,0x10
c000dc8e:	90                   	nop
c000dc8f:	83 c4 0c             	add    esp,0xc
c000dc92:	c3                   	ret    
c000dc93:	90                   	nop

c000dc94 <Clock::~Clock()>:
c000dc94:	83 ec 0c             	sub    esp,0xc
c000dc97:	83 ec 0c             	sub    esp,0xc
c000dc9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc9e:	e8 cd ff ff ff       	call   c000dc70 <Clock::~Clock()>
c000dca3:	83 c4 10             	add    esp,0x10
c000dca6:	83 ec 08             	sub    esp,0x8
c000dca9:	68 58 01 00 00       	push   0x158
c000dcae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcb2:	e8 67 ef ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000dcb7:	83 c4 10             	add    esp,0x10
c000dcba:	83 c4 0c             	add    esp,0xc
c000dcbd:	c3                   	ret    

c000dcbe <Clock::timeInSecondsLocal()>:
c000dcbe:	53                   	push   ebx
c000dcbf:	83 ec 14             	sub    esp,0x14
c000dcc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dcc6:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcc8:	50                   	push   eax
c000dcc9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dccc:	0f b6 0d 1c 80 02 c0 	movzx  ecx,BYTE PTR ds:0xc002801c
c000dcd3:	03 0d 20 80 02 c0    	add    ecx,DWORD PTR ds:0xc0028020
c000dcd9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dcdf:	89 cb                	mov    ebx,ecx
c000dce1:	c1 fb 1f             	sar    ebx,0x1f
c000dce4:	01 c8                	add    eax,ecx
c000dce6:	11 da                	adc    edx,ebx
c000dce8:	83 c4 10             	add    esp,0x10
c000dceb:	31 c9                	xor    ecx,ecx
c000dced:	80 3d 1d 80 02 c0 00 	cmp    BYTE PTR ds:0xc002801d,0x0
c000dcf4:	74 05                	je     c000dcfb <Clock::timeInSecondsLocal()+0x3d>
c000dcf6:	b9 08 07 00 00       	mov    ecx,0x708
c000dcfb:	31 db                	xor    ebx,ebx
c000dcfd:	01 c8                	add    eax,ecx
c000dcff:	11 da                	adc    edx,ebx
c000dd01:	83 c4 08             	add    esp,0x8
c000dd04:	5b                   	pop    ebx
c000dd05:	c3                   	ret    

c000dd06 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000dd06:	57                   	push   edi
c000dd07:	56                   	push   esi
c000dd08:	53                   	push   ebx
c000dd09:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dd0d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000dd11:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd13:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000dd17:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000dd1a:	0f b6 05 1c 80 02 c0 	movzx  eax,BYTE PTR ds:0xc002801c
c000dd21:	03 05 20 80 02 c0    	add    eax,DWORD PTR ds:0xc0028020
c000dd27:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000dd2d:	99                   	cdq    
c000dd2e:	29 c6                	sub    esi,eax
c000dd30:	19 d7                	sbb    edi,edx
c000dd32:	89 f0                	mov    eax,esi
c000dd34:	89 fa                	mov    edx,edi
c000dd36:	31 f6                	xor    esi,esi
c000dd38:	80 3d 1d 80 02 c0 00 	cmp    BYTE PTR ds:0xc002801d,0x0
c000dd3f:	74 05                	je     c000dd46 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000dd41:	be 08 07 00 00       	mov    esi,0x708
c000dd46:	31 ff                	xor    edi,edi
c000dd48:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000dd4c:	29 f0                	sub    eax,esi
c000dd4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd52:	19 fa                	sbb    edx,edi
c000dd54:	89 d8                	mov    eax,ebx
c000dd56:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd5a:	5b                   	pop    ebx
c000dd5b:	5e                   	pop    esi
c000dd5c:	5f                   	pop    edi
c000dd5d:	ff e0                	jmp    eax

c000dd5f <datetimeToSeconds(datetime_t)>:
c000dd5f:	55                   	push   ebp
c000dd60:	57                   	push   edi
c000dd61:	56                   	push   esi
c000dd62:	53                   	push   ebx
c000dd63:	83 ec 14             	sub    esp,0x14
c000dd66:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dd6a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dd6e:	89 d3                	mov    ebx,edx
c000dd70:	0f b6 c6             	movzx  eax,dh
c000dd73:	c1 eb 10             	shr    ebx,0x10
c000dd76:	48                   	dec    eax
c000dd77:	66 81 eb 6c 07       	sub    bx,0x76c
c000dd7c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000dd80:	0f b6 f5             	movzx  esi,ch
c000dd83:	89 cf                	mov    edi,ecx
c000dd85:	6b f6 3c             	imul   esi,esi,0x3c
c000dd88:	c1 ef 10             	shr    edi,0x10
c000dd8b:	0f b6 c9             	movzx  ecx,cl
c000dd8e:	89 f8                	mov    eax,edi
c000dd90:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dd96:	0f b6 f8             	movzx  edi,al
c000dd99:	0f b6 d2             	movzx  edx,dl
c000dd9c:	01 fe                	add    esi,edi
c000dd9e:	01 f1                	add    ecx,esi
c000dda0:	0f b7 f3             	movzx  esi,bx
c000dda3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000dda7:	c1 f9 1f             	sar    ecx,0x1f
c000ddaa:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000ddaf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ddb3:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000ddb8:	8b 0c 8d 60 4a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb5a0]
c000ddbf:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000ddc3:	76 29                	jbe    c000ddee <datetimeToSeconds(datetime_t)+0x8f>
c000ddc5:	f6 c3 03             	test   bl,0x3
c000ddc8:	75 24                	jne    c000ddee <datetimeToSeconds(datetime_t)+0x8f>
c000ddca:	31 d2                	xor    edx,edx
c000ddcc:	bf 64 00 00 00       	mov    edi,0x64
c000ddd1:	89 d8                	mov    eax,ebx
c000ddd3:	66 f7 f7             	div    di
c000ddd6:	66 85 d2             	test   dx,dx
c000ddd9:	75 12                	jne    c000dded <datetimeToSeconds(datetime_t)+0x8e>
c000dddb:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000dde1:	bf 90 01 00 00       	mov    edi,0x190
c000dde6:	99                   	cdq    
c000dde7:	f7 ff                	idiv   edi
c000dde9:	85 d2                	test   edx,edx
c000ddeb:	75 01                	jne    c000ddee <datetimeToSeconds(datetime_t)+0x8f>
c000dded:	41                   	inc    ecx
c000ddee:	66 83 fb 46          	cmp    bx,0x46
c000ddf2:	76 45                	jbe    c000de39 <datetimeToSeconds(datetime_t)+0xda>
c000ddf4:	bb 46 00 00 00       	mov    ebx,0x46
c000ddf9:	bf 64 00 00 00       	mov    edi,0x64
c000ddfe:	bd 90 01 00 00       	mov    ebp,0x190
c000de03:	b8 6d 01 00 00       	mov    eax,0x16d
c000de08:	f6 c3 03             	test   bl,0x3
c000de0b:	75 23                	jne    c000de30 <datetimeToSeconds(datetime_t)+0xd1>
c000de0d:	89 d8                	mov    eax,ebx
c000de0f:	99                   	cdq    
c000de10:	f7 ff                	idiv   edi
c000de12:	b8 6e 01 00 00       	mov    eax,0x16e
c000de17:	85 d2                	test   edx,edx
c000de19:	75 15                	jne    c000de30 <datetimeToSeconds(datetime_t)+0xd1>
c000de1b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000de21:	99                   	cdq    
c000de22:	f7 fd                	idiv   ebp
c000de24:	83 fa 01             	cmp    edx,0x1
c000de27:	19 c0                	sbb    eax,eax
c000de29:	f7 d0                	not    eax
c000de2b:	05 6e 01 00 00       	add    eax,0x16e
c000de30:	01 c1                	add    ecx,eax
c000de32:	43                   	inc    ebx
c000de33:	39 f3                	cmp    ebx,esi
c000de35:	7c cc                	jl     c000de03 <datetimeToSeconds(datetime_t)+0xa4>
c000de37:	eb 35                	jmp    c000de6e <datetimeToSeconds(datetime_t)+0x10f>
c000de39:	74 33                	je     c000de6e <datetimeToSeconds(datetime_t)+0x10f>
c000de3b:	b8 45 00 00 00       	mov    eax,0x45
c000de40:	89 c2                	mov    edx,eax
c000de42:	83 e2 03             	and    edx,0x3
c000de45:	39 f0                	cmp    eax,esi
c000de47:	7e 0f                	jle    c000de58 <datetimeToSeconds(datetime_t)+0xf9>
c000de49:	83 fa 01             	cmp    edx,0x1
c000de4c:	19 d2                	sbb    edx,edx
c000de4e:	48                   	dec    eax
c000de4f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000de56:	eb e8                	jmp    c000de40 <datetimeToSeconds(datetime_t)+0xe1>
c000de58:	b8 6d 01 00 00       	mov    eax,0x16d
c000de5d:	85 d2                	test   edx,edx
c000de5f:	75 0b                	jne    c000de6c <datetimeToSeconds(datetime_t)+0x10d>
c000de61:	66 83 fb 01          	cmp    bx,0x1
c000de65:	19 c0                	sbb    eax,eax
c000de67:	05 6e 01 00 00       	add    eax,0x16e
c000de6c:	29 c1                	sub    ecx,eax
c000de6e:	b8 80 51 01 00       	mov    eax,0x15180
c000de73:	f7 e9                	imul   ecx
c000de75:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000de79:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000de7d:	83 c4 14             	add    esp,0x14
c000de80:	5b                   	pop    ebx
c000de81:	5e                   	pop    esi
c000de82:	5f                   	pop    edi
c000de83:	5d                   	pop    ebp
c000de84:	c3                   	ret    
c000de85:	90                   	nop

c000de86 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000de86:	57                   	push   edi
c000de87:	56                   	push   esi
c000de88:	53                   	push   ebx
c000de89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de8d:	8b 06                	mov    eax,DWORD PTR [esi]
c000de8f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000de92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de9a:	e8 c0 fe ff ff       	call   c000dd5f <datetimeToSeconds(datetime_t)>
c000de9f:	59                   	pop    ecx
c000dea0:	0f b6 0d 1c 80 02 c0 	movzx  ecx,BYTE PTR ds:0xc002801c
c000dea7:	5b                   	pop    ebx
c000dea8:	03 0d 20 80 02 c0    	add    ecx,DWORD PTR ds:0xc0028020
c000deae:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000deb4:	89 cb                	mov    ebx,ecx
c000deb6:	c1 fb 1f             	sar    ebx,0x1f
c000deb9:	29 c8                	sub    eax,ecx
c000debb:	19 da                	sbb    edx,ebx
c000debd:	31 c9                	xor    ecx,ecx
c000debf:	80 3d 1d 80 02 c0 00 	cmp    BYTE PTR ds:0xc002801d,0x0
c000dec6:	74 05                	je     c000decd <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000dec8:	b9 08 07 00 00       	mov    ecx,0x708
c000decd:	31 db                	xor    ebx,ebx
c000decf:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000ded3:	29 c8                	sub    eax,ecx
c000ded5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ded9:	19 da                	sbb    edx,ebx
c000dedb:	89 f8                	mov    eax,edi
c000dedd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dee1:	5b                   	pop    ebx
c000dee2:	5e                   	pop    esi
c000dee3:	5f                   	pop    edi
c000dee4:	ff e0                	jmp    eax

c000dee6 <secondsToDatetime(unsigned long long)>:
c000dee6:	55                   	push   ebp
c000dee7:	57                   	push   edi
c000dee8:	56                   	push   esi
c000dee9:	53                   	push   ebx
c000deea:	83 ec 1c             	sub    esp,0x1c
c000deed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000def1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000def5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000def9:	6a 00                	push   0x0
c000defb:	68 80 51 01 00       	push   0x15180
c000df00:	55                   	push   ebp
c000df01:	57                   	push   edi
c000df02:	e8 9d 47 01 00       	call   c00226a4 <__udivdi3>
c000df07:	83 c4 10             	add    esp,0x10
c000df0a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000df10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df14:	6a 00                	push   0x0
c000df16:	68 80 51 01 00       	push   0x15180
c000df1b:	55                   	push   ebp
c000df1c:	57                   	push   edi
c000df1d:	bf 10 0e 00 00       	mov    edi,0xe10
c000df22:	e8 7d 48 01 00       	call   c00227a4 <__umoddi3>
c000df27:	83 c4 10             	add    esp,0x10
c000df2a:	99                   	cdq    
c000df2b:	f7 ff                	idiv   edi
c000df2d:	bf 3c 00 00 00       	mov    edi,0x3c
c000df32:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000df35:	89 d0                	mov    eax,edx
c000df37:	99                   	cdq    
c000df38:	f7 ff                	idiv   edi
c000df3a:	85 db                	test   ebx,ebx
c000df3c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000df3f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000df42:	79 11                	jns    c000df55 <secondsToDatetime(unsigned long long)+0x6f>
c000df44:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000df48:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000df4e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000df53:	eb 07                	jmp    c000df5c <secondsToDatetime(unsigned long long)+0x76>
c000df55:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000df5a:	89 d8                	mov    eax,ebx
c000df5c:	bf b4 05 00 00       	mov    edi,0x5b4
c000df61:	99                   	cdq    
c000df62:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000df67:	f7 f9                	idiv   ecx
c000df69:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000df6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df72:	31 d2                	xor    edx,edx
c000df74:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000df7c:	01 c3                	add    ebx,eax
c000df7e:	89 d8                	mov    eax,ebx
c000df80:	f7 f1                	div    ecx
c000df82:	31 d2                	xor    edx,edx
c000df84:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000df87:	89 d8                	mov    eax,ebx
c000df89:	f7 f7                	div    edi
c000df8b:	31 d2                	xor    edx,edx
c000df8d:	29 c1                	sub    ecx,eax
c000df8f:	89 d8                	mov    eax,ebx
c000df91:	f7 f5                	div    ebp
c000df93:	bd 6d 01 00 00       	mov    ebp,0x16d
c000df98:	29 c1                	sub    ecx,eax
c000df9a:	31 d2                	xor    edx,edx
c000df9c:	89 c8                	mov    eax,ecx
c000df9e:	f7 f5                	div    ebp
c000dfa0:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000dfa5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dfa9:	31 d2                	xor    edx,edx
c000dfab:	89 c8                	mov    eax,ecx
c000dfad:	f7 f5                	div    ebp
c000dfaf:	31 d2                	xor    edx,edx
c000dfb1:	01 c3                	add    ebx,eax
c000dfb3:	89 c8                	mov    eax,ecx
c000dfb5:	f7 f7                	div    edi
c000dfb7:	bf 99 00 00 00       	mov    edi,0x99
c000dfbc:	29 c3                	sub    ebx,eax
c000dfbe:	31 d2                	xor    edx,edx
c000dfc0:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000dfc8:	29 c3                	sub    ebx,eax
c000dfca:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000dfcd:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000dfd0:	bb 05 00 00 00       	mov    ebx,0x5
c000dfd5:	83 c1 02             	add    ecx,0x2
c000dfd8:	89 c8                	mov    eax,ecx
c000dfda:	f7 f7                	div    edi
c000dfdc:	31 d2                	xor    edx,edx
c000dfde:	89 c7                	mov    edi,eax
c000dfe0:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000dfe6:	83 c0 02             	add    eax,0x2
c000dfe9:	f7 f3                	div    ebx
c000dfeb:	89 eb                	mov    ebx,ebp
c000dfed:	29 c3                	sub    ebx,eax
c000dfef:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000dff5:	88 1e                	mov    BYTE PTR [esi],bl
c000dff7:	19 c0                	sbb    eax,eax
c000dff9:	31 d2                	xor    edx,edx
c000dffb:	83 e0 0c             	and    eax,0xc
c000dffe:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000e002:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000e00a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e00e:	83 f9 01             	cmp    ecx,0x1
c000e011:	0f 96 c2             	setbe  dl
c000e014:	41                   	inc    ecx
c000e015:	01 d0                	add    eax,edx
c000e017:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000e01a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000e01e:	83 c4 1c             	add    esp,0x1c
c000e021:	89 f0                	mov    eax,esi
c000e023:	5b                   	pop    ebx
c000e024:	5e                   	pop    esi
c000e025:	5f                   	pop    edi
c000e026:	5d                   	pop    ebp
c000e027:	c2 04 00             	ret    0x4

c000e02a <Clock::timeInDatetimeLocal()>:
c000e02a:	53                   	push   ebx
c000e02b:	83 ec 14             	sub    esp,0x14
c000e02e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e032:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e036:	e8 83 fc ff ff       	call   c000dcbe <Clock::timeInSecondsLocal()>
c000e03b:	83 c4 0c             	add    esp,0xc
c000e03e:	52                   	push   edx
c000e03f:	50                   	push   eax
c000e040:	53                   	push   ebx
c000e041:	e8 a0 fe ff ff       	call   c000dee6 <secondsToDatetime(unsigned long long)>
c000e046:	89 d8                	mov    eax,ebx
c000e048:	83 c4 14             	add    esp,0x14
c000e04b:	5b                   	pop    ebx
c000e04c:	c2 04 00             	ret    0x4
c000e04f:	90                   	nop

c000e050 <Device::hibernate()>:
c000e050:	c3                   	ret    
c000e051:	90                   	nop

c000e052 <Device::wake()>:
c000e052:	c3                   	ret    
c000e053:	90                   	nop

c000e054 <Device::detect()>:
c000e054:	c3                   	ret    
c000e055:	90                   	nop

c000e056 <Device::disableLegacy()>:
c000e056:	c3                   	ret    
c000e057:	90                   	nop

c000e058 <Device::powerSaving(PowerSavingLevel)>:
c000e058:	c3                   	ret    
c000e059:	90                   	nop

c000e05a <DriverlessDevice::close(int, int, void*)>:
c000e05a:	31 c0                	xor    eax,eax
c000e05c:	c3                   	ret    
c000e05d:	90                   	nop

c000e05e <DriverlessDevice::detect()>:
c000e05e:	c3                   	ret    
c000e05f:	90                   	nop

c000e060 <DriverlessDevice::open(int, int, void*)>:
c000e060:	83 ec 18             	sub    esp,0x18
c000e063:	68 90 4a 02 c0       	push   0xc0024a90
c000e068:	e8 82 68 00 00       	call   c00148ef <Krnl::panic(char const*)>
c000e06d:	83 c8 ff             	or     eax,0xffffffff
c000e070:	83 c4 1c             	add    esp,0x1c
c000e073:	c3                   	ret    

c000e074 <Device::~Device()>:
c000e074:	ba f0 4a 02 c0       	mov    edx,0xc0024af0
c000e079:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e07d:	89 10                	mov    DWORD PTR [eax],edx
c000e07f:	90                   	nop
c000e080:	c3                   	ret    
c000e081:	90                   	nop

c000e082 <Device::~Device()>:
c000e082:	83 ec 0c             	sub    esp,0xc
c000e085:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e089:	e8 e6 ff ff ff       	call   c000e074 <Device::~Device()>
c000e08e:	83 c4 04             	add    esp,0x4
c000e091:	83 ec 08             	sub    esp,0x8
c000e094:	68 58 01 00 00       	push   0x158
c000e099:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e09d:	e8 7c eb ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000e0a2:	83 c4 10             	add    esp,0x10
c000e0a5:	83 c4 0c             	add    esp,0xc
c000e0a8:	c3                   	ret    
c000e0a9:	90                   	nop

c000e0aa <Device::findAndLoadDriver()>:
c000e0aa:	c7 44 24 04 ae 4a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024aae
c000e0b2:	e9 48 ec ff ff       	jmp    c000ccff <Dbg::kprintf(char const*, ...)>
c000e0b7:	90                   	nop

c000e0b8 <Device::preOpenPCI(PCIDeviceInfo)>:
c000e0b8:	57                   	push   edi
c000e0b9:	b9 09 00 00 00       	mov    ecx,0x9
c000e0be:	56                   	push   esi
c000e0bf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e0c3:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e0c7:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e0d1:	81 c7 18 01 00 00    	add    edi,0x118
c000e0d7:	fc                   	cld    
c000e0d8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e0da:	5e                   	pop    esi
c000e0db:	5f                   	pop    edi
c000e0dc:	c3                   	ret    
c000e0dd:	90                   	nop

c000e0de <Device::preOpenACPI(void*, char*, char*)>:
c000e0de:	57                   	push   edi
c000e0df:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e0e4:	56                   	push   esi
c000e0e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e0e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e0ed:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e0f7:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e0fd:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e103:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e107:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e109:	b9 0e 00 00 00       	mov    ecx,0xe
c000e10e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e114:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e118:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e11a:	5e                   	pop    esi
c000e11b:	5f                   	pop    edi
c000e11c:	c3                   	ret    
c000e11d:	90                   	nop

c000e11e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e11e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e122:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e127:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e12e:	75 0b                	jne    c000e13b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e130:	8b 00                	mov    eax,DWORD PTR [eax]
c000e132:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e136:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e139:	eb 1e                	jmp    c000e159 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e13b:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000e140:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e146:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e14c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e14e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e152:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e156:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e159:	ff e0                	jmp    eax
c000e15b:	90                   	nop

c000e15c <Device::getParent()>:
c000e15c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e160:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e166:	c3                   	ret    
c000e167:	90                   	nop

c000e168 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e16c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e171:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e178:	75 0b                	jne    c000e185 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e17a:	8b 00                	mov    eax,DWORD PTR [eax]
c000e17c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e180:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e183:	eb 1e                	jmp    c000e1a3 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e185:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000e18a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e190:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e196:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e198:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e19c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e1a0:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e1a3:	ff e0                	jmp    eax
c000e1a5:	90                   	nop

c000e1a6 <Device::addChild(Device*)>:
c000e1a6:	53                   	push   ebx
c000e1a7:	83 ec 08             	sub    esp,0x8
c000e1aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e1b2:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e1b8:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e1be:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e1c0:	85 d2                	test   edx,edx
c000e1c2:	74 04                	je     c000e1c8 <Device::addChild(Device*)+0x22>
c000e1c4:	89 d3                	mov    ebx,edx
c000e1c6:	eb f6                	jmp    c000e1be <Device::addChild(Device*)+0x18>
c000e1c8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e1cb:	83 ec 0c             	sub    esp,0xc
c000e1ce:	6a 08                	push   0x8
c000e1d0:	e8 3a b8 ff ff       	call   c0009a0f <malloc>
c000e1d5:	89 03                	mov    DWORD PTR [ebx],eax
c000e1d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e1dd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e1e4:	83 c4 18             	add    esp,0x18
c000e1e7:	5b                   	pop    ebx
c000e1e8:	c3                   	ret    
c000e1e9:	90                   	nop

c000e1ea <Device::removeAllChildren()>:
c000e1ea:	56                   	push   esi
c000e1eb:	53                   	push   ebx
c000e1ec:	52                   	push   edx
c000e1ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e1f1:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e1f7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e1fa:	74 17                	je     c000e213 <Device::removeAllChildren()+0x29>
c000e1fc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e1ff:	85 c0                	test   eax,eax
c000e201:	74 0c                	je     c000e20f <Device::removeAllChildren()+0x25>
c000e203:	83 ec 0c             	sub    esp,0xc
c000e206:	8b 10                	mov    edx,DWORD PTR [eax]
c000e208:	50                   	push   eax
c000e209:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e20c:	83 c4 10             	add    esp,0x10
c000e20f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e211:	eb e4                	jmp    c000e1f7 <Device::removeAllChildren()+0xd>
c000e213:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e219:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e21f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e225:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e22c:	58                   	pop    eax
c000e22d:	5b                   	pop    ebx
c000e22e:	5e                   	pop    esi
c000e22f:	c3                   	ret    

c000e230 <Device::hibernateAll()>:
c000e230:	53                   	push   ebx
c000e231:	83 ec 14             	sub    esp,0x14
c000e234:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e238:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e23a:	53                   	push   ebx
c000e23b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e23e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e244:	83 c4 10             	add    esp,0x10
c000e247:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e24a:	74 0f                	je     c000e25b <Device::hibernateAll()+0x2b>
c000e24c:	83 ec 0c             	sub    esp,0xc
c000e24f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e252:	e8 d9 ff ff ff       	call   c000e230 <Device::hibernateAll()>
c000e257:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e259:	eb e9                	jmp    c000e244 <Device::hibernateAll()+0x14>
c000e25b:	83 c4 08             	add    esp,0x8
c000e25e:	5b                   	pop    ebx
c000e25f:	c3                   	ret    

c000e260 <Device::wakeAll()>:
c000e260:	53                   	push   ebx
c000e261:	83 ec 14             	sub    esp,0x14
c000e264:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e268:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e26a:	53                   	push   ebx
c000e26b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e26e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e274:	83 c4 10             	add    esp,0x10
c000e277:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e27a:	74 0f                	je     c000e28b <Device::wakeAll()+0x2b>
c000e27c:	83 ec 0c             	sub    esp,0xc
c000e27f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e282:	e8 d9 ff ff ff       	call   c000e260 <Device::wakeAll()>
c000e287:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e289:	eb e9                	jmp    c000e274 <Device::wakeAll()+0x14>
c000e28b:	83 c4 08             	add    esp,0x8
c000e28e:	5b                   	pop    ebx
c000e28f:	c3                   	ret    

c000e290 <Device::detectAll()>:
c000e290:	53                   	push   ebx
c000e291:	83 ec 14             	sub    esp,0x14
c000e294:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e298:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e29a:	53                   	push   ebx
c000e29b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e29e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e2a4:	83 c4 10             	add    esp,0x10
c000e2a7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e2aa:	74 0f                	je     c000e2bb <Device::detectAll()+0x2b>
c000e2ac:	83 ec 0c             	sub    esp,0xc
c000e2af:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2b2:	e8 d9 ff ff ff       	call   c000e290 <Device::detectAll()>
c000e2b7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e2b9:	eb e9                	jmp    c000e2a4 <Device::detectAll()+0x14>
c000e2bb:	83 c4 08             	add    esp,0x8
c000e2be:	5b                   	pop    ebx
c000e2bf:	c3                   	ret    

c000e2c0 <Device::disableLegacyAll()>:
c000e2c0:	53                   	push   ebx
c000e2c1:	83 ec 14             	sub    esp,0x14
c000e2c4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e2c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e2ca:	53                   	push   ebx
c000e2cb:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e2ce:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e2d4:	83 c4 10             	add    esp,0x10
c000e2d7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e2da:	74 0f                	je     c000e2eb <Device::disableLegacyAll()+0x2b>
c000e2dc:	83 ec 0c             	sub    esp,0xc
c000e2df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2e2:	e8 d9 ff ff ff       	call   c000e2c0 <Device::disableLegacyAll()>
c000e2e7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e2e9:	eb e9                	jmp    c000e2d4 <Device::disableLegacyAll()+0x14>
c000e2eb:	83 c4 08             	add    esp,0x8
c000e2ee:	5b                   	pop    ebx
c000e2ef:	c3                   	ret    

c000e2f0 <Device::loadDriversForAll()>:
c000e2f0:	53                   	push   ebx
c000e2f1:	83 ec 08             	sub    esp,0x8
c000e2f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2f8:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e2ff:	75 0c                	jne    c000e30d <Device::loadDriversForAll()+0x1d>
c000e301:	83 ec 0c             	sub    esp,0xc
c000e304:	53                   	push   ebx
c000e305:	e8 a0 fd ff ff       	call   c000e0aa <Device::findAndLoadDriver()>
c000e30a:	83 c4 10             	add    esp,0x10
c000e30d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e313:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e316:	74 12                	je     c000e32a <Device::loadDriversForAll()+0x3a>
c000e318:	83 ec 0c             	sub    esp,0xc
c000e31b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e31e:	e8 cd ff ff ff       	call   c000e2f0 <Device::loadDriversForAll()>
c000e323:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e325:	83 c4 10             	add    esp,0x10
c000e328:	eb e9                	jmp    c000e313 <Device::loadDriversForAll()+0x23>
c000e32a:	83 c4 08             	add    esp,0x8
c000e32d:	5b                   	pop    ebx
c000e32e:	c3                   	ret    
c000e32f:	90                   	nop

c000e330 <Device::closeAll()>:
c000e330:	53                   	push   ebx
c000e331:	83 ec 08             	sub    esp,0x8
c000e334:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e338:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e33a:	6a 00                	push   0x0
c000e33c:	6a 00                	push   0x0
c000e33e:	6a 00                	push   0x0
c000e340:	53                   	push   ebx
c000e341:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e344:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e34a:	83 c4 10             	add    esp,0x10
c000e34d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e350:	74 0f                	je     c000e361 <Device::closeAll()+0x31>
c000e352:	83 ec 0c             	sub    esp,0xc
c000e355:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e358:	e8 d3 ff ff ff       	call   c000e330 <Device::closeAll()>
c000e35d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e35f:	eb e9                	jmp    c000e34a <Device::closeAll()+0x1a>
c000e361:	83 c4 08             	add    esp,0x8
c000e364:	5b                   	pop    ebx
c000e365:	c3                   	ret    

c000e366 <Device::powerSavingAll(PowerSavingLevel)>:
c000e366:	56                   	push   esi
c000e367:	53                   	push   ebx
c000e368:	83 ec 0c             	sub    esp,0xc
c000e36b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e36f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e373:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e375:	56                   	push   esi
c000e376:	53                   	push   ebx
c000e377:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e37a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e380:	83 c4 10             	add    esp,0x10
c000e383:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e386:	74 0f                	je     c000e397 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e388:	52                   	push   edx
c000e389:	52                   	push   edx
c000e38a:	56                   	push   esi
c000e38b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e38e:	e8 d3 ff ff ff       	call   c000e366 <Device::powerSavingAll(PowerSavingLevel)>
c000e393:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e395:	eb e9                	jmp    c000e380 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e397:	58                   	pop    eax
c000e398:	5b                   	pop    ebx
c000e399:	5e                   	pop    esi
c000e39a:	c3                   	ret    
c000e39b:	90                   	nop

c000e39c <Device::setName(char const*)>:
c000e39c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e3a4:	e9 97 23 ff ff       	jmp    c0000740 <strcpy>
c000e3a9:	90                   	nop

c000e3aa <Device::Device(char const*)>:
c000e3aa:	83 ec 1c             	sub    esp,0x1c
c000e3ad:	ba f0 4a 02 c0       	mov    edx,0xc0024af0
c000e3b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3b6:	89 10                	mov    DWORD PTR [eax],edx
c000e3b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3bc:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e3c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3ca:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e3d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3d8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e3e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3e6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e3f0:	83 ec 08             	sub    esp,0x8
c000e3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e3f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e3fb:	e8 9c ff ff ff       	call   c000e39c <Device::setName(char const*)>
c000e400:	83 c4 10             	add    esp,0x10
c000e403:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e40b:	83 ec 0c             	sub    esp,0xc
c000e40e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e412:	e8 f8 b5 ff ff       	call   c0009a0f <malloc>
c000e417:	83 c4 10             	add    esp,0x10
c000e41a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e420:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e427:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e42b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e435:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e43b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e441:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e445:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e44b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e452:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e456:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e45d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e461:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e468:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e46c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e476:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e47a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e484:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e488:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e492:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e496:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e4a0:	90                   	nop
c000e4a1:	83 c4 1c             	add    esp,0x1c
c000e4a4:	c3                   	ret    
c000e4a5:	90                   	nop

c000e4a6 <Device::getName()>:
c000e4a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4aa:	05 d0 00 00 00       	add    eax,0xd0
c000e4af:	c3                   	ret    

c000e4b0 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e4b0:	83 ec 0c             	sub    esp,0xc
c000e4b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4b7:	83 ec 08             	sub    esp,0x8
c000e4ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4be:	50                   	push   eax
c000e4bf:	e8 e6 fe ff ff       	call   c000e3aa <Device::Device(char const*)>
c000e4c4:	83 c4 10             	add    esp,0x10
c000e4c7:	ba 1c 4b 02 c0       	mov    edx,0xc0024b1c
c000e4cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4d0:	89 10                	mov    DWORD PTR [eax],edx
c000e4d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4d6:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e4e0:	90                   	nop
c000e4e1:	83 c4 0c             	add    esp,0xc
c000e4e4:	c3                   	ret    
c000e4e5:	90                   	nop

c000e4e6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e4e6:	57                   	push   edi
c000e4e7:	56                   	push   esi
c000e4e8:	53                   	push   ebx
c000e4e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e4ed:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e4f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e4f5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e4fb:	75 0c                	jne    c000e509 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e4fd:	52                   	push   edx
c000e4fe:	52                   	push   edx
c000e4ff:	53                   	push   ebx
c000e500:	56                   	push   esi
c000e501:	e8 50 46 01 00       	call   c0022b56 <LinkedList<Device>::addElement(Device*)>
c000e506:	83 c4 10             	add    esp,0x10
c000e509:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e50f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e512:	74 12                	je     c000e526 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e514:	50                   	push   eax
c000e515:	57                   	push   edi
c000e516:	56                   	push   esi
c000e517:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e51a:	e8 c7 ff ff ff       	call   c000e4e6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e51f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e521:	83 c4 10             	add    esp,0x10
c000e524:	eb e9                	jmp    c000e50f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e526:	5b                   	pop    ebx
c000e527:	5e                   	pop    esi
c000e528:	5f                   	pop    edi
c000e529:	c3                   	ret    

c000e52a <getDevicesOfType(DeviceType)>:
c000e52a:	53                   	push   ebx
c000e52b:	83 ec 14             	sub    esp,0x14
c000e52e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e532:	53                   	push   ebx
c000e533:	e8 fa 46 01 00       	call   c0022c32 <LinkedList<Device>::LinkedList()>
c000e538:	83 c4 0c             	add    esp,0xc
c000e53b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e53f:	53                   	push   ebx
c000e540:	ff 35 e8 7e 02 c0    	push   DWORD PTR ds:0xc0027ee8
c000e546:	e8 9b ff ff ff       	call   c000e4e6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e54b:	89 d8                	mov    eax,ebx
c000e54d:	83 c4 18             	add    esp,0x18
c000e550:	5b                   	pop    ebx
c000e551:	c2 04 00             	ret    0x4

c000e554 <HardDiskController::HardDiskController(char const*)>:
c000e554:	83 ec 0c             	sub    esp,0xc
c000e557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e55b:	83 ec 08             	sub    esp,0x8
c000e55e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e562:	50                   	push   eax
c000e563:	e8 42 fe ff ff       	call   c000e3aa <Device::Device(char const*)>
c000e568:	83 c4 10             	add    esp,0x10
c000e56b:	ba 48 4b 02 c0       	mov    edx,0xc0024b48
c000e570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e574:	89 10                	mov    DWORD PTR [eax],edx
c000e576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e57a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e584:	90                   	nop
c000e585:	83 c4 0c             	add    esp,0xc
c000e588:	c3                   	ret    
c000e589:	90                   	nop
c000e58a:	66 90                	xchg   ax,ax

c000e58c <HardDiskController::~HardDiskController()>:
c000e58c:	83 ec 0c             	sub    esp,0xc
c000e58f:	ba 48 4b 02 c0       	mov    edx,0xc0024b48
c000e594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e598:	89 10                	mov    DWORD PTR [eax],edx
c000e59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e59e:	83 ec 0c             	sub    esp,0xc
c000e5a1:	50                   	push   eax
c000e5a2:	e8 cd fa ff ff       	call   c000e074 <Device::~Device()>
c000e5a7:	83 c4 10             	add    esp,0x10
c000e5aa:	90                   	nop
c000e5ab:	83 c4 0c             	add    esp,0xc
c000e5ae:	c3                   	ret    
c000e5af:	90                   	nop

c000e5b0 <HardDiskController::~HardDiskController()>:
c000e5b0:	83 ec 0c             	sub    esp,0xc
c000e5b3:	83 ec 0c             	sub    esp,0xc
c000e5b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5ba:	e8 cd ff ff ff       	call   c000e58c <HardDiskController::~HardDiskController()>
c000e5bf:	83 c4 10             	add    esp,0x10
c000e5c2:	83 ec 08             	sub    esp,0x8
c000e5c5:	68 58 01 00 00       	push   0x158
c000e5ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5ce:	e8 4b e6 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000e5d3:	83 c4 10             	add    esp,0x10
c000e5d6:	83 c4 0c             	add    esp,0xc
c000e5d9:	c3                   	ret    

c000e5da <PhysicalDisk::eject()>:
c000e5da:	83 c8 ff             	or     eax,0xffffffff
c000e5dd:	c3                   	ret    

c000e5de <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e5de:	83 ec 0c             	sub    esp,0xc
c000e5e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5e5:	83 ec 08             	sub    esp,0x8
c000e5e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5ec:	50                   	push   eax
c000e5ed:	e8 b8 fd ff ff       	call   c000e3aa <Device::Device(char const*)>
c000e5f2:	83 c4 10             	add    esp,0x10
c000e5f5:	ba 74 4b 02 c0       	mov    edx,0xc0024b74
c000e5fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5fe:	89 10                	mov    DWORD PTR [eax],edx
c000e600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e604:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e60b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e60f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e61a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e628:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e62c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e636:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e640:	90                   	nop
c000e641:	83 c4 0c             	add    esp,0xc
c000e644:	c3                   	ret    
c000e645:	90                   	nop

c000e646 <PhysicalDisk::startCache()>:
c000e646:	56                   	push   esi
c000e647:	53                   	push   ebx
c000e648:	83 ec 10             	sub    esp,0x10
c000e64b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e64f:	6a 44                	push   0x44
c000e651:	e8 b9 b3 ff ff       	call   c0009a0f <malloc>
c000e656:	89 c6                	mov    esi,eax
c000e658:	58                   	pop    eax
c000e659:	5a                   	pop    edx
c000e65a:	53                   	push   ebx
c000e65b:	56                   	push   esi
c000e65c:	e8 33 26 00 00       	call   c0010c94 <VCache::VCache(PhysicalDisk*)>
c000e661:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e667:	83 c4 14             	add    esp,0x14
c000e66a:	5b                   	pop    ebx
c000e66b:	5e                   	pop    esi
c000e66c:	c3                   	ret    
c000e66d:	90                   	nop

c000e66e <PhysicalDisk::~PhysicalDisk()>:
c000e66e:	83 ec 0c             	sub    esp,0xc
c000e671:	ba 74 4b 02 c0       	mov    edx,0xc0024b74
c000e676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e67a:	89 10                	mov    DWORD PTR [eax],edx
c000e67c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e680:	83 ec 0c             	sub    esp,0xc
c000e683:	50                   	push   eax
c000e684:	e8 eb f9 ff ff       	call   c000e074 <Device::~Device()>
c000e689:	83 c4 10             	add    esp,0x10
c000e68c:	90                   	nop
c000e68d:	83 c4 0c             	add    esp,0xc
c000e690:	c3                   	ret    
c000e691:	90                   	nop

c000e692 <PhysicalDisk::~PhysicalDisk()>:
c000e692:	83 ec 0c             	sub    esp,0xc
c000e695:	83 ec 0c             	sub    esp,0xc
c000e698:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e69c:	e8 cd ff ff ff       	call   c000e66e <PhysicalDisk::~PhysicalDisk()>
c000e6a1:	83 c4 10             	add    esp,0x10
c000e6a4:	83 ec 08             	sub    esp,0x8
c000e6a7:	68 6c 01 00 00       	push   0x16c
c000e6ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6b0:	e8 69 e5 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000e6b5:	83 c4 10             	add    esp,0x10
c000e6b8:	83 c4 0c             	add    esp,0xc
c000e6bb:	c3                   	ret    

c000e6bc <FPU::FPU(char const*)>:
c000e6bc:	83 ec 0c             	sub    esp,0xc
c000e6bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6c3:	83 ec 08             	sub    esp,0x8
c000e6c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6ca:	50                   	push   eax
c000e6cb:	e8 da fc ff ff       	call   c000e3aa <Device::Device(char const*)>
c000e6d0:	83 c4 10             	add    esp,0x10
c000e6d3:	ba b8 4b 02 c0       	mov    edx,0xc0024bb8
c000e6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6dc:	89 10                	mov    DWORD PTR [eax],edx
c000e6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6e2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e6ec:	90                   	nop
c000e6ed:	83 c4 0c             	add    esp,0xc
c000e6f0:	c3                   	ret    
c000e6f1:	90                   	nop
c000e6f2:	66 90                	xchg   ax,ax

c000e6f4 <FPU::~FPU()>:
c000e6f4:	83 ec 0c             	sub    esp,0xc
c000e6f7:	ba b8 4b 02 c0       	mov    edx,0xc0024bb8
c000e6fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e700:	89 10                	mov    DWORD PTR [eax],edx
c000e702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e706:	83 ec 0c             	sub    esp,0xc
c000e709:	50                   	push   eax
c000e70a:	e8 65 f9 ff ff       	call   c000e074 <Device::~Device()>
c000e70f:	83 c4 10             	add    esp,0x10
c000e712:	90                   	nop
c000e713:	83 c4 0c             	add    esp,0xc
c000e716:	c3                   	ret    
c000e717:	90                   	nop

c000e718 <FPU::~FPU()>:
c000e718:	83 ec 0c             	sub    esp,0xc
c000e71b:	83 ec 0c             	sub    esp,0xc
c000e71e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e722:	e8 cd ff ff ff       	call   c000e6f4 <FPU::~FPU()>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 08             	sub    esp,0x8
c000e72d:	68 58 01 00 00       	push   0x158
c000e732:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e736:	e8 e3 e4 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000e73b:	83 c4 10             	add    esp,0x10
c000e73e:	83 c4 0c             	add    esp,0xc
c000e741:	c3                   	ret    

c000e742 <setupFPU()>:
c000e742:	53                   	push   ebx
c000e743:	83 ec 08             	sub    esp,0x8
c000e746:	8b 15 e8 7e 02 c0    	mov    edx,DWORD PTR ds:0xc0027ee8
c000e74c:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000e753:	74 1b                	je     c000e770 <setupFPU()+0x2e>
c000e755:	83 ec 0c             	sub    esp,0xc
c000e758:	68 58 01 00 00       	push   0x158
c000e75d:	e8 ad b2 ff ff       	call   c0009a0f <malloc>
c000e762:	89 c3                	mov    ebx,eax
c000e764:	89 04 24             	mov    DWORD PTR [esp],eax
c000e767:	e8 c8 2a 01 00       	call   c0021234 <AVX::AVX()>
c000e76c:	eb 62                	jmp    c000e7d0 <setupFPU()+0x8e>
c000e76e:	66 90                	xchg   ax,ax
c000e770:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e776:	84 c0                	test   al,al
c000e778:	79 1a                	jns    c000e794 <setupFPU()+0x52>
c000e77a:	83 ec 0c             	sub    esp,0xc
c000e77d:	68 58 01 00 00       	push   0x158
c000e782:	e8 88 b2 ff ff       	call   c0009a0f <malloc>
c000e787:	89 c3                	mov    ebx,eax
c000e789:	89 04 24             	mov    DWORD PTR [esp],eax
c000e78c:	e8 d3 2b 01 00       	call   c0021364 <SSE::SSE()>
c000e791:	eb 3d                	jmp    c000e7d0 <setupFPU()+0x8e>
c000e793:	90                   	nop
c000e794:	a8 20                	test   al,0x20
c000e796:	74 1c                	je     c000e7b4 <setupFPU()+0x72>
c000e798:	83 ec 0c             	sub    esp,0xc
c000e79b:	68 58 01 00 00       	push   0x158
c000e7a0:	e8 6a b2 ff ff       	call   c0009a0f <malloc>
c000e7a5:	89 c3                	mov    ebx,eax
c000e7a7:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7aa:	e8 19 2b 01 00       	call   c00212c8 <MMX::MMX()>
c000e7af:	eb 1f                	jmp    c000e7d0 <setupFPU()+0x8e>
c000e7b1:	8d 76 00             	lea    esi,[esi+0x0]
c000e7b4:	a8 10                	test   al,0x10
c000e7b6:	74 20                	je     c000e7d8 <setupFPU()+0x96>
c000e7b8:	83 ec 0c             	sub    esp,0xc
c000e7bb:	68 58 01 00 00       	push   0x158
c000e7c0:	e8 4a b2 ff ff       	call   c0009a0f <malloc>
c000e7c5:	89 c3                	mov    ebx,eax
c000e7c7:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7ca:	e8 29 2c 01 00       	call   c00213f8 <x87::x87()>
c000e7cf:	90                   	nop
c000e7d0:	83 c4 10             	add    esp,0x10
c000e7d3:	eb 27                	jmp    c000e7fc <setupFPU()+0xba>
c000e7d5:	8d 76 00             	lea    esi,[esi+0x0]
c000e7d8:	83 e0 ef             	and    eax,0xffffffef
c000e7db:	83 ec 0c             	sub    esp,0xc
c000e7de:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e7e4:	68 a4 4b 02 c0       	push   0xc0024ba4
c000e7e9:	e8 11 e5 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000e7ee:	0f 20 c0             	mov    eax,cr0
c000e7f1:	83 c8 04             	or     eax,0x4
c000e7f4:	0f 22 c0             	mov    cr0,eax
c000e7f7:	31 db                	xor    ebx,ebx
c000e7f9:	83 c4 10             	add    esp,0x10
c000e7fc:	89 d8                	mov    eax,ebx
c000e7fe:	83 c4 08             	add    esp,0x8
c000e801:	5b                   	pop    ebx
c000e802:	c3                   	ret    
c000e803:	90                   	nop

c000e804 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e804:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e808:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e80c:	c1 e0 04             	shl    eax,0x4
c000e80f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e813:	8d 50 10             	lea    edx,[eax+0x10]
c000e816:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e81c:	74 08                	je     c000e826 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e81e:	83 c0 04             	add    eax,0x4
c000e821:	39 d0                	cmp    eax,edx
c000e823:	75 f1                	jne    c000e816 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e825:	c3                   	ret    
c000e826:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e830:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e83a:	eb e2                	jmp    c000e81e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e83c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e83c:	57                   	push   edi
c000e83d:	31 c0                	xor    eax,eax
c000e83f:	56                   	push   esi
c000e840:	53                   	push   ebx
c000e841:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e845:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e849:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e84d:	89 da                	mov    edx,ebx
c000e84f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e853:	c1 e2 04             	shl    edx,0x4
c000e856:	01 ca                	add    edx,ecx
c000e858:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e860:	74 16                	je     c000e878 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e862:	40                   	inc    eax
c000e863:	83 f8 04             	cmp    eax,0x4
c000e866:	75 f0                	jne    c000e858 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e868:	c7 44 24 10 e8 4b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024be8
c000e870:	5b                   	pop    ebx
c000e871:	5e                   	pop    esi
c000e872:	5f                   	pop    edi
c000e873:	e9 77 60 00 00       	jmp    c00148ef <Krnl::panic(char const*)>
c000e878:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e87b:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e87e:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e884:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e88a:	5b                   	pop    ebx
c000e88b:	5e                   	pop    esi
c000e88c:	5f                   	pop    edi
c000e88d:	c3                   	ret    

c000e88e <doubleFault(regs*, void*)>:
c000e88e:	55                   	push   ebp
c000e88f:	89 e5                	mov    ebp,esp
c000e891:	83 ec 08             	sub    esp,0x8
c000e894:	83 ec 0c             	sub    esp,0xc
c000e897:	68 f5 4b 02 c0       	push   0xc0024bf5
c000e89c:	e8 4e 60 00 00       	call   c00148ef <Krnl::panic(char const*)>
c000e8a1:	83 c4 10             	add    esp,0x10
c000e8a4:	90                   	nop
c000e8a5:	c9                   	leave  
c000e8a6:	c3                   	ret    
c000e8a7:	90                   	nop

c000e8a8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e8a8:	56                   	push   esi
c000e8a9:	53                   	push   ebx
c000e8aa:	50                   	push   eax
c000e8ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e8af:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e8b3:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e8b8:	75 35                	jne    c000e8ef <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e8ba:	8d 43 20             	lea    eax,[ebx+0x20]
c000e8bd:	31 d2                	xor    edx,edx
c000e8bf:	89 c1                	mov    ecx,eax
c000e8c1:	c1 e1 04             	shl    ecx,0x4
c000e8c4:	01 f1                	add    ecx,esi
c000e8c6:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e8ce:	74 3e                	je     c000e90e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e8d0:	42                   	inc    edx
c000e8d1:	83 fa 04             	cmp    edx,0x4
c000e8d4:	75 f0                	jne    c000e8c6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e8d6:	83 ec 0c             	sub    esp,0xc
c000e8d9:	68 0f 4c 02 c0       	push   0xc0024c0f
c000e8de:	e8 0c 60 00 00       	call   c00148ef <Krnl::panic(char const*)>
c000e8e3:	83 c4 10             	add    esp,0x10
c000e8e6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e8eb:	5a                   	pop    edx
c000e8ec:	5b                   	pop    ebx
c000e8ed:	5e                   	pop    esi
c000e8ee:	c3                   	ret    
c000e8ef:	83 ec 0c             	sub    esp,0xc
c000e8f2:	56                   	push   esi
c000e8f3:	e8 ae fb ff ff       	call   c000e4a6 <Device::getName()>
c000e8f8:	83 c4 10             	add    esp,0x10
c000e8fb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e8fe:	75 ba                	jne    c000e8ba <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e900:	83 fb 0f             	cmp    ebx,0xf
c000e903:	7f 29                	jg     c000e92e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e905:	0f b6 9b e0 75 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd8a20]
c000e90c:	eb ac                	jmp    c000e8ba <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e90e:	8d 04 82             	lea    eax,[edx+eax*4]
c000e911:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e915:	8d 04 86             	lea    eax,[esi+eax*4]
c000e918:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e91e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e922:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e928:	89 d8                	mov    eax,ebx
c000e92a:	5a                   	pop    edx
c000e92b:	5b                   	pop    ebx
c000e92c:	5e                   	pop    esi
c000e92d:	c3                   	ret    
c000e92e:	83 ec 0c             	sub    esp,0xc
c000e931:	68 02 4c 02 c0       	push   0xc0024c02
c000e936:	e8 b4 5f 00 00       	call   c00148ef <Krnl::panic(char const*)>
c000e93b:	83 c4 10             	add    esp,0x10
c000e93e:	e9 77 ff ff ff       	jmp    c000e8ba <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e943:	90                   	nop

c000e944 <InterruptController::clearAllHandlers(int, bool)>:
c000e944:	56                   	push   esi
c000e945:	53                   	push   ebx
c000e946:	52                   	push   edx
c000e947:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e94b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e94f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e954:	75 61                	jne    c000e9b7 <InterruptController::clearAllHandlers(int, bool)+0x73>
c000e956:	8d 46 20             	lea    eax,[esi+0x20]
c000e959:	c1 e6 04             	shl    esi,0x4
c000e95c:	c1 e0 04             	shl    eax,0x4
c000e95f:	01 de                	add    esi,ebx
c000e961:	01 d8                	add    eax,ebx
c000e963:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000e96d:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000e977:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000e981:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e98b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000e995:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000e99f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000e9a9:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000e9b3:	58                   	pop    eax
c000e9b4:	5b                   	pop    ebx
c000e9b5:	5e                   	pop    esi
c000e9b6:	c3                   	ret    
c000e9b7:	83 ec 0c             	sub    esp,0xc
c000e9ba:	53                   	push   ebx
c000e9bb:	e8 e6 fa ff ff       	call   c000e4a6 <Device::getName()>
c000e9c0:	83 c4 10             	add    esp,0x10
c000e9c3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e9c6:	75 8e                	jne    c000e956 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e9c8:	83 fe 0f             	cmp    esi,0xf
c000e9cb:	7f 09                	jg     c000e9d6 <InterruptController::clearAllHandlers(int, bool)+0x92>
c000e9cd:	0f b6 b6 e0 75 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd8a20]
c000e9d4:	eb 80                	jmp    c000e956 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	68 1c 4c 02 c0       	push   0xc0024c1c
c000e9de:	e8 0c 5f 00 00       	call   c00148ef <Krnl::panic(char const*)>
c000e9e3:	83 c4 10             	add    esp,0x10
c000e9e6:	e9 6b ff ff ff       	jmp    c000e956 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e9eb:	90                   	nop

c000e9ec <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e9ec:	56                   	push   esi
c000e9ed:	53                   	push   ebx
c000e9ee:	52                   	push   edx
c000e9ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e9f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e9f7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e9fc:	75 3a                	jne    c000ea38 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000e9fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea02:	8d 50 20             	lea    edx,[eax+0x20]
c000ea05:	c1 e2 04             	shl    edx,0x4
c000ea08:	8d 04 16             	lea    eax,[esi+edx*1]
c000ea0b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000ea0f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000ea15:	74 0b                	je     c000ea22 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000ea17:	83 c0 04             	add    eax,0x4
c000ea1a:	39 d0                	cmp    eax,edx
c000ea1c:	75 f1                	jne    c000ea0f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000ea1e:	58                   	pop    eax
c000ea1f:	5b                   	pop    ebx
c000ea20:	5e                   	pop    esi
c000ea21:	c3                   	ret    
c000ea22:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ea2c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ea36:	eb df                	jmp    c000ea17 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000ea38:	83 ec 0c             	sub    esp,0xc
c000ea3b:	56                   	push   esi
c000ea3c:	e8 65 fa ff ff       	call   c000e4a6 <Device::getName()>
c000ea41:	83 c4 10             	add    esp,0x10
c000ea44:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ea47:	75 b5                	jne    c000e9fe <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ea49:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000ea4e:	7f 11                	jg     c000ea61 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000ea50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea54:	0f b6 80 e0 75 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8a20]
c000ea5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ea5f:	eb 9d                	jmp    c000e9fe <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ea61:	83 ec 0c             	sub    esp,0xc
c000ea64:	68 29 4c 02 c0       	push   0xc0024c29
c000ea69:	e8 81 5e 00 00       	call   c00148ef <Krnl::panic(char const*)>
c000ea6e:	83 c4 10             	add    esp,0x10
c000ea71:	eb 8b                	jmp    c000e9fe <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000ea73 <nmiHandler(regs*, void*)>:
c000ea73:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000ea78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ea7c:	e9 57 a7 ff ff       	jmp    c00091d8 <Computer::handleNMI()>

c000ea81 <int_handler>:
c000ea81:	55                   	push   ebp
c000ea82:	57                   	push   edi
c000ea83:	56                   	push   esi
c000ea84:	53                   	push   ebx
c000ea85:	83 ec 0c             	sub    esp,0xc
c000ea88:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ea8c:	80 3d c4 89 02 c0 00 	cmp    BYTE PTR ds:0xc00289c4,0x0
c000ea93:	74 0b                	je     c000eaa0 <int_handler+0x1f>
c000ea95:	fa                   	cli    
c000ea96:	f4                   	hlt    
c000ea97:	80 3d c4 89 02 c0 00 	cmp    BYTE PTR ds:0xc00289c4,0x0
c000ea9e:	75 f5                	jne    c000ea95 <int_handler+0x14>
c000eaa0:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000eaa5:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000eaa8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000eaae:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000eab4:	8d 43 e0             	lea    eax,[ebx-0x20]
c000eab7:	83 f8 17             	cmp    eax,0x17
c000eaba:	77 13                	ja     c000eacf <int_handler+0x4e>
c000eabc:	83 ec 08             	sub    esp,0x8
c000eabf:	8b 17                	mov    edx,DWORD PTR [edi]
c000eac1:	8d 43 e0             	lea    eax,[ebx-0x20]
c000eac4:	0f b6 c0             	movzx  eax,al
c000eac7:	50                   	push   eax
c000eac8:	57                   	push   edi
c000eac9:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000eacc:	83 c4 10             	add    esp,0x10
c000eacf:	83 c3 15             	add    ebx,0x15
c000ead2:	c1 e3 04             	shl    ebx,0x4
c000ead5:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000ead9:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000eae0:	31 db                	xor    ebx,ebx
c000eae2:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000eae6:	85 c0                	test   eax,eax
c000eae8:	74 13                	je     c000eafd <int_handler+0x7c>
c000eaea:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000eaed:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000eaf1:	74 1c                	je     c000eb0f <int_handler+0x8e>
c000eaf3:	83 ec 08             	sub    esp,0x8
c000eaf6:	52                   	push   edx
c000eaf7:	56                   	push   esi
c000eaf8:	ff d0                	call   eax
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	43                   	inc    ebx
c000eafe:	83 fb 04             	cmp    ebx,0x4
c000eb01:	75 df                	jne    c000eae2 <int_handler+0x61>
c000eb03:	83 c4 0c             	add    esp,0xc
c000eb06:	31 c0                	xor    eax,eax
c000eb08:	5b                   	pop    ebx
c000eb09:	31 d2                	xor    edx,edx
c000eb0b:	5e                   	pop    esi
c000eb0c:	5f                   	pop    edi
c000eb0d:	5d                   	pop    ebp
c000eb0e:	c3                   	ret    
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	52                   	push   edx
c000eb13:	56                   	push   esi
c000eb14:	ff d0                	call   eax
c000eb16:	83 c4 10             	add    esp,0x10
c000eb19:	83 c4 0c             	add    esp,0xc
c000eb1c:	5b                   	pop    ebx
c000eb1d:	5e                   	pop    esi
c000eb1e:	5f                   	pop    edi
c000eb1f:	5d                   	pop    ebp
c000eb20:	c3                   	ret    
c000eb21:	90                   	nop

c000eb22 <InterruptController::InterruptController(char const*)>:
c000eb22:	83 ec 1c             	sub    esp,0x1c
c000eb25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eb29:	83 ec 08             	sub    esp,0x8
c000eb2c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eb30:	50                   	push   eax
c000eb31:	e8 74 f8 ff ff       	call   c000e3aa <Device::Device(char const*)>
c000eb36:	83 c4 10             	add    esp,0x10
c000eb39:	ba e0 4e 02 c0       	mov    edx,0xc0024ee0
c000eb3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eb42:	89 10                	mov    DWORD PTR [eax],edx
c000eb44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eb48:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000eb52:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eb5a:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000eb62:	7f 5e                	jg     c000ebc2 <InterruptController::InterruptController(char const*)+0xa0>
c000eb64:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eb6c:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000eb71:	7f 49                	jg     c000ebbc <InterruptController::InterruptController(char const*)+0x9a>
c000eb73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eb77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb7b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000eb82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb86:	01 ca                	add    edx,ecx
c000eb88:	83 c2 54             	add    edx,0x54
c000eb8b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000eb93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eb97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb9b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000eba2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eba6:	01 ca                	add    edx,ecx
c000eba8:	81 c2 54 04 00 00    	add    edx,0x454
c000ebae:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ebb6:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000ebba:	eb b0                	jmp    c000eb6c <InterruptController::InterruptController(char const*)+0x4a>
c000ebbc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ebc0:	eb 98                	jmp    c000eb5a <InterruptController::InterruptController(char const*)+0x38>
c000ebc2:	90                   	nop
c000ebc3:	83 c4 1c             	add    esp,0x1c
c000ebc6:	c3                   	ret    
c000ebc7:	90                   	nop

c000ebc8 <InterruptController::~InterruptController()>:
c000ebc8:	83 ec 0c             	sub    esp,0xc
c000ebcb:	ba e0 4e 02 c0       	mov    edx,0xc0024ee0
c000ebd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebd4:	89 10                	mov    DWORD PTR [eax],edx
c000ebd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebda:	83 ec 0c             	sub    esp,0xc
c000ebdd:	50                   	push   eax
c000ebde:	e8 91 f4 ff ff       	call   c000e074 <Device::~Device()>
c000ebe3:	83 c4 10             	add    esp,0x10
c000ebe6:	90                   	nop
c000ebe7:	83 c4 0c             	add    esp,0xc
c000ebea:	c3                   	ret    
c000ebeb:	90                   	nop

c000ebec <InterruptController::~InterruptController()>:
c000ebec:	83 ec 0c             	sub    esp,0xc
c000ebef:	83 ec 0c             	sub    esp,0xc
c000ebf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebf6:	e8 cd ff ff ff       	call   c000ebc8 <InterruptController::~InterruptController()>
c000ebfb:	83 c4 10             	add    esp,0x10
c000ebfe:	83 ec 08             	sub    esp,0x8
c000ec01:	68 58 21 00 00       	push   0x2158
c000ec06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec0a:	e8 0f e0 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000ec0f:	83 c4 10             	add    esp,0x10
c000ec12:	83 c4 0c             	add    esp,0xc
c000ec15:	c3                   	ret    

c000ec16 <displayDebugInfo(regs*)>:
c000ec16:	55                   	push   ebp
c000ec17:	57                   	push   edi
c000ec18:	56                   	push   esi
c000ec19:	53                   	push   ebx
c000ec1a:	83 ec 24             	sub    esp,0x24
c000ec1d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ec21:	0f 20 c2             	mov    edx,cr0
c000ec24:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ec28:	0f 20 d7             	mov    edi,cr2
c000ec2b:	0f 20 de             	mov    esi,cr3
c000ec2e:	0f 20 e5             	mov    ebp,cr4
c000ec31:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000ec34:	68 36 4c 02 c0       	push   0xc0024c36
c000ec39:	e8 c1 e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ec3e:	59                   	pop    ecx
c000ec3f:	58                   	pop    eax
c000ec40:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000ec43:	68 41 4c 02 c0       	push   0xc0024c41
c000ec48:	e8 b2 e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ec4d:	58                   	pop    eax
c000ec4e:	5a                   	pop    edx
c000ec4f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000ec52:	68 4c 4c 02 c0       	push   0xc0024c4c
c000ec57:	e8 a3 e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ec5c:	59                   	pop    ecx
c000ec5d:	58                   	pop    eax
c000ec5e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000ec61:	68 57 4c 02 c0       	push   0xc0024c57
c000ec66:	e8 94 e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ec6b:	58                   	pop    eax
c000ec6c:	5a                   	pop    edx
c000ec6d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ec70:	68 62 4c 02 c0       	push   0xc0024c62
c000ec75:	e8 85 e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ec7a:	59                   	pop    ecx
c000ec7b:	58                   	pop    eax
c000ec7c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ec7f:	68 6d 4c 02 c0       	push   0xc0024c6d
c000ec84:	e8 76 e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ec89:	58                   	pop    eax
c000ec8a:	5a                   	pop    edx
c000ec8b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ec8e:	68 78 4c 02 c0       	push   0xc0024c78
c000ec93:	e8 67 e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ec98:	59                   	pop    ecx
c000ec99:	58                   	pop    eax
c000ec9a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ec9d:	68 83 4c 02 c0       	push   0xc0024c83
c000eca2:	e8 58 e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000eca7:	58                   	pop    eax
c000eca8:	5a                   	pop    edx
c000eca9:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ecac:	68 8e 4c 02 c0       	push   0xc0024c8e
c000ecb1:	e8 49 e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ecb6:	59                   	pop    ecx
c000ecb7:	58                   	pop    eax
c000ecb8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ecbb:	68 9d 4c 02 c0       	push   0xc0024c9d
c000ecc0:	e8 3a e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ecc5:	58                   	pop    eax
c000ecc6:	5a                   	pop    edx
c000ecc7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ecca:	68 a8 4c 02 c0       	push   0xc0024ca8
c000eccf:	e8 2b e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ecd4:	59                   	pop    ecx
c000ecd5:	58                   	pop    eax
c000ecd6:	57                   	push   edi
c000ecd7:	68 b3 4c 02 c0       	push   0xc0024cb3
c000ecdc:	e8 1e e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ece1:	58                   	pop    eax
c000ece2:	5a                   	pop    edx
c000ece3:	56                   	push   esi
c000ece4:	68 be 4c 02 c0       	push   0xc0024cbe
c000ece9:	e8 11 e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ecee:	59                   	pop    ecx
c000ecef:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000ecf4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecfa:	e8 0a be ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c000ecff:	58                   	pop    eax
c000ed00:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ed03:	5a                   	pop    edx
c000ed04:	c1 e0 05             	shl    eax,0x5
c000ed07:	05 40 73 02 c0       	add    eax,0xc0027340
c000ed0c:	50                   	push   eax
c000ed0d:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000ed12:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed18:	e8 f9 c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ed1d:	59                   	pop    ecx
c000ed1e:	58                   	pop    eax
c000ed1f:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000ed24:	68 c9 4c 02 c0       	push   0xc0024cc9
c000ed29:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed2f:	e8 e2 c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ed34:	58                   	pop    eax
c000ed35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ed3a:	5a                   	pop    edx
c000ed3b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ed3e:	83 c0 0c             	add    eax,0xc
c000ed41:	50                   	push   eax
c000ed42:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000ed47:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed4d:	e8 c4 c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ed52:	59                   	pop    ecx
c000ed53:	58                   	pop    eax
c000ed54:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000ed59:	68 d2 4c 02 c0       	push   0xc0024cd2
c000ed5e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed64:	e8 ad c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ed69:	58                   	pop    eax
c000ed6a:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000ed6f:	5a                   	pop    edx
c000ed70:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed73:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed79:	e8 52 c2 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ed7e:	59                   	pop    ecx
c000ed7f:	58                   	pop    eax
c000ed80:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000ed85:	68 da 4c 02 c0       	push   0xc0024cda
c000ed8a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed90:	e8 81 c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ed95:	58                   	pop    eax
c000ed96:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000ed9b:	5a                   	pop    edx
c000ed9c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ed9f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eda5:	e8 26 c2 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000edaa:	59                   	pop    ecx
c000edab:	58                   	pop    eax
c000edac:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000edb1:	68 e2 4c 02 c0       	push   0xc0024ce2
c000edb6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edbc:	e8 55 c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000edc1:	58                   	pop    eax
c000edc2:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000edc7:	5a                   	pop    edx
c000edc8:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000edcb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edd1:	e8 fa c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000edd6:	59                   	pop    ecx
c000edd7:	58                   	pop    eax
c000edd8:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000eddd:	68 ea 4c 02 c0       	push   0xc0024cea
c000ede2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ede8:	e8 29 c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000eded:	58                   	pop    eax
c000edee:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000edf3:	5a                   	pop    edx
c000edf4:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000edf7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edfd:	e8 ce c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee02:	59                   	pop    ecx
c000ee03:	58                   	pop    eax
c000ee04:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000ee09:	68 f2 4c 02 c0       	push   0xc0024cf2
c000ee0e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee14:	e8 fd c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee19:	58                   	pop    eax
c000ee1a:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000ee1f:	5a                   	pop    edx
c000ee20:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ee23:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee29:	e8 a2 c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee2e:	59                   	pop    ecx
c000ee2f:	58                   	pop    eax
c000ee30:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000ee35:	68 fa 4c 02 c0       	push   0xc0024cfa
c000ee3a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee40:	e8 d1 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee45:	58                   	pop    eax
c000ee46:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000ee4b:	5a                   	pop    edx
c000ee4c:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000ee4f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee55:	e8 76 c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee5a:	59                   	pop    ecx
c000ee5b:	58                   	pop    eax
c000ee5c:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000ee61:	68 02 4d 02 c0       	push   0xc0024d02
c000ee66:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee6c:	e8 a5 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee71:	58                   	pop    eax
c000ee72:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000ee77:	5a                   	pop    edx
c000ee78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ee7c:	52                   	push   edx
c000ee7d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee83:	e8 48 c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee88:	59                   	pop    ecx
c000ee89:	58                   	pop    eax
c000ee8a:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000ee8f:	68 0b 4d 02 c0       	push   0xc0024d0b
c000ee94:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee9a:	e8 77 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee9f:	58                   	pop    eax
c000eea0:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000eea5:	5a                   	pop    edx
c000eea6:	57                   	push   edi
c000eea7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eead:	e8 1e c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000eeb2:	59                   	pop    ecx
c000eeb3:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000eeb8:	5f                   	pop    edi
c000eeb9:	68 13 4d 02 c0       	push   0xc0024d13
c000eebe:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eec4:	e8 4d c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000eec9:	58                   	pop    eax
c000eeca:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000eecf:	5a                   	pop    edx
c000eed0:	56                   	push   esi
c000eed1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eed7:	e8 f4 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000eedc:	59                   	pop    ecx
c000eedd:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000eee2:	5e                   	pop    esi
c000eee3:	68 1b 4d 02 c0       	push   0xc0024d1b
c000eee8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eeee:	e8 23 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000eef3:	5f                   	pop    edi
c000eef4:	58                   	pop    eax
c000eef5:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000eefa:	55                   	push   ebp
c000eefb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef01:	e8 ca c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef06:	58                   	pop    eax
c000ef07:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000ef0c:	5a                   	pop    edx
c000ef0d:	68 23 4d 02 c0       	push   0xc0024d23
c000ef12:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef18:	e8 f9 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef1d:	0f 21 c0             	mov    eax,db0
c000ef20:	59                   	pop    ecx
c000ef21:	5e                   	pop    esi
c000ef22:	50                   	push   eax
c000ef23:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000ef28:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef2e:	e8 9d c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef33:	5f                   	pop    edi
c000ef34:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000ef39:	5d                   	pop    ebp
c000ef3a:	68 2c 4d 02 c0       	push   0xc0024d2c
c000ef3f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef45:	e8 cc c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef4a:	0f 21 c8             	mov    eax,db1
c000ef4d:	5a                   	pop    edx
c000ef4e:	59                   	pop    ecx
c000ef4f:	50                   	push   eax
c000ef50:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000ef55:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef5b:	e8 70 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef60:	5e                   	pop    esi
c000ef61:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000ef66:	5f                   	pop    edi
c000ef67:	68 34 4d 02 c0       	push   0xc0024d34
c000ef6c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef72:	e8 9f c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef77:	0f 21 d0             	mov    eax,db2
c000ef7a:	5d                   	pop    ebp
c000ef7b:	5a                   	pop    edx
c000ef7c:	50                   	push   eax
c000ef7d:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000ef82:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef88:	e8 43 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef8d:	59                   	pop    ecx
c000ef8e:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000ef93:	5e                   	pop    esi
c000ef94:	68 3c 4d 02 c0       	push   0xc0024d3c
c000ef99:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef9f:	e8 72 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000efa4:	0f 21 d8             	mov    eax,db3
c000efa7:	5f                   	pop    edi
c000efa8:	5d                   	pop    ebp
c000efa9:	50                   	push   eax
c000efaa:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000efaf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efb5:	e8 16 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000efba:	58                   	pop    eax
c000efbb:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000efc0:	5a                   	pop    edx
c000efc1:	68 44 4d 02 c0       	push   0xc0024d44
c000efc6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efcc:	e8 45 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000efd1:	0f 21 f0             	mov    eax,db6
c000efd4:	59                   	pop    ecx
c000efd5:	5e                   	pop    esi
c000efd6:	50                   	push   eax
c000efd7:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000efdc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efe2:	e8 e9 bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000efe7:	5f                   	pop    edi
c000efe8:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000efed:	5d                   	pop    ebp
c000efee:	68 4c 4d 02 c0       	push   0xc0024d4c
c000eff3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eff9:	e8 18 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000effe:	0f 21 f8             	mov    eax,db7
c000f001:	5a                   	pop    edx
c000f002:	59                   	pop    ecx
c000f003:	50                   	push   eax
c000f004:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000f009:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f00f:	e8 bc bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f014:	5e                   	pop    esi
c000f015:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f018:	e8 00 8c 00 00       	call   c0017c1d <Thr::getDriverNameFromAddress(unsigned long)>
c000f01d:	83 c4 10             	add    esp,0x10
c000f020:	85 c0                	test   eax,eax
c000f022:	74 7d                	je     c000f0a1 <displayDebugInfo(regs*)+0x48b>
c000f024:	89 c6                	mov    esi,eax
c000f026:	50                   	push   eax
c000f027:	50                   	push   eax
c000f028:	56                   	push   esi
c000f029:	68 54 4d 02 c0       	push   0xc0024d54
c000f02e:	e8 cc dc ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f033:	5a                   	pop    edx
c000f034:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000f039:	59                   	pop    ecx
c000f03a:	68 62 4d 02 c0       	push   0xc0024d62
c000f03f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f045:	e8 cc bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f04a:	5f                   	pop    edi
c000f04b:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000f050:	5d                   	pop    ebp
c000f051:	56                   	push   esi
c000f052:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f058:	e8 b9 bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f05d:	58                   	pop    eax
c000f05e:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000f063:	5a                   	pop    edx
c000f064:	68 6e 4d 02 c0       	push   0xc0024d6e
c000f069:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f06f:	e8 a2 bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f074:	59                   	pop    ecx
c000f075:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000f07a:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000f080:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f083:	e8 cc 8b 00 00       	call   c0017c54 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000f088:	5b                   	pop    ebx
c000f089:	5d                   	pop    ebp
c000f08a:	50                   	push   eax
c000f08b:	57                   	push   edi
c000f08c:	e8 3f bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f091:	58                   	pop    eax
c000f092:	5a                   	pop    edx
c000f093:	56                   	push   esi
c000f094:	68 7a 4d 02 c0       	push   0xc0024d7a
c000f099:	e8 61 dc ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f09e:	83 c4 10             	add    esp,0x10
c000f0a1:	fa                   	cli    
c000f0a2:	f4                   	hlt    
c000f0a3:	eb fe                	jmp    c000f0a3 <displayDebugInfo(regs*)+0x48d>

c000f0a5 <x87EmulHandler(regs*, void*)>:
c000f0a5:	83 ec 0c             	sub    esp,0xc
c000f0a8:	0f 20 c2             	mov    edx,cr0
c000f0ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f0b0:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000f0b4:	75 4b                	jne    c000f101 <x87EmulHandler(regs*, void*)+0x5c>
c000f0b6:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000f0bb:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000f0c1:	85 c0                	test   eax,eax
c000f0c3:	74 05                	je     c000f0ca <x87EmulHandler(regs*, void*)+0x25>
c000f0c5:	83 e2 08             	and    edx,0x8
c000f0c8:	75 17                	jne    c000f0e1 <x87EmulHandler(regs*, void*)+0x3c>
c000f0ca:	83 ec 0c             	sub    esp,0xc
c000f0cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0d1:	e8 f4 af 00 00       	call   c001a0ca <Vm::x87Handler(regs*)>
c000f0d6:	83 c4 10             	add    esp,0x10
c000f0d9:	84 c0                	test   al,al
c000f0db:	74 24                	je     c000f101 <x87EmulHandler(regs*, void*)+0x5c>
c000f0dd:	83 c4 0c             	add    esp,0xc
c000f0e0:	c3                   	ret    
c000f0e1:	83 ec 0c             	sub    esp,0xc
c000f0e4:	68 a0 4d 02 c0       	push   0xc0024da0
c000f0e9:	e8 11 dc ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f0ee:	0f 06                	clts   
c000f0f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f0f5:	83 c4 10             	add    esp,0x10
c000f0f8:	a3 28 80 02 c0       	mov    ds:0xc0028028,eax
c000f0fd:	83 c4 0c             	add    esp,0xc
c000f100:	c3                   	ret    
c000f101:	83 ec 0c             	sub    esp,0xc
c000f104:	68 8a 4d 02 c0       	push   0xc0024d8a
c000f109:	e8 f1 db ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f10e:	5a                   	pop    edx
c000f10f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f113:	e8 fe fa ff ff       	call   c000ec16 <displayDebugInfo(regs*)>

c000f118 <gpFault(regs*, void*)>:
c000f118:	53                   	push   ebx
c000f119:	83 ec 14             	sub    esp,0x14
c000f11c:	c7 05 24 80 02 c0 86 95 01 c0 	mov    DWORD PTR ds:0xc0028024,0xc0019586
c000f126:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f12a:	53                   	push   ebx
c000f12b:	e8 56 a4 00 00       	call   c0019586 <Vm::faultHandler(regs*)>
c000f130:	83 c4 10             	add    esp,0x10
c000f133:	84 c0                	test   al,al
c000f135:	74 05                	je     c000f13c <gpFault(regs*, void*)+0x24>
c000f137:	83 c4 08             	add    esp,0x8
c000f13a:	5b                   	pop    ebx
c000f13b:	c3                   	ret    
c000f13c:	83 ec 0c             	sub    esp,0xc
c000f13f:	68 ad 4d 02 c0       	push   0xc0024dad
c000f144:	e8 b6 db ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f149:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f14c:	e8 c5 fa ff ff       	call   c000ec16 <displayDebugInfo(regs*)>

c000f151 <pgFault(regs*, void*)>:
c000f151:	53                   	push   ebx
c000f152:	83 ec 10             	sub    esp,0x10
c000f155:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f159:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f15c:	68 c8 4d 02 c0       	push   0xc0024dc8
c000f161:	e8 99 db ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f166:	0f 20 d0             	mov    eax,cr2
c000f169:	5a                   	pop    edx
c000f16a:	59                   	pop    ecx
c000f16b:	50                   	push   eax
c000f16c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f171:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f174:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f17a:	e8 fb d6 ff ff       	call   c000c87a <VAS::tryLoadBackOffDisk(unsigned long)>
c000f17f:	83 c4 10             	add    esp,0x10
c000f182:	84 c0                	test   al,al
c000f184:	74 05                	je     c000f18b <pgFault(regs*, void*)+0x3a>
c000f186:	83 c4 08             	add    esp,0x8
c000f189:	5b                   	pop    ebx
c000f18a:	c3                   	ret    
c000f18b:	83 ec 0c             	sub    esp,0xc
c000f18e:	68 dd 4d 02 c0       	push   0xc0024ddd
c000f193:	e8 67 db ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f198:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f19b:	e8 76 fa ff ff       	call   c000ec16 <displayDebugInfo(regs*)>

c000f1a0 <otherISRHandler(regs*, void*)>:
c000f1a0:	53                   	push   ebx
c000f1a1:	83 ec 0c             	sub    esp,0xc
c000f1a4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f1a8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f1ab:	50                   	push   eax
c000f1ac:	50                   	push   eax
c000f1ad:	68 ea 4d 02 c0       	push   0xc0024dea
c000f1b2:	e8 48 db ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f1b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f1ba:	e8 57 fa ff ff       	call   c000ec16 <displayDebugInfo(regs*)>

c000f1bf <opcodeFault(regs*, void*)>:
c000f1bf:	55                   	push   ebp
c000f1c0:	89 e5                	mov    ebp,esp
c000f1c2:	56                   	push   esi
c000f1c3:	53                   	push   ebx
c000f1c4:	83 ec 30             	sub    esp,0x30
c000f1c7:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000f1cc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f1d2:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f1d8:	84 c0                	test   al,al
c000f1da:	74 24                	je     c000f200 <opcodeFault(regs*, void*)+0x41>
c000f1dc:	83 ec 0c             	sub    esp,0xc
c000f1df:	68 08 4e 02 c0       	push   0xc0024e08
c000f1e4:	e8 16 db ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f1e9:	83 c4 10             	add    esp,0x10
c000f1ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1ef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f1f2:	8d 50 19             	lea    edx,[eax+0x19]
c000f1f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1f8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f1fb:	e9 7b 03 00 00       	jmp    c000f57b <opcodeFault(regs*, void*)+0x3bc>
c000f200:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f203:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f206:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f209:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f20d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f210:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f213:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f216:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f219:	8a 00                	mov    al,BYTE PTR [eax]
c000f21b:	3c f0                	cmp    al,0xf0
c000f21d:	75 17                	jne    c000f236 <opcodeFault(regs*, void*)+0x77>
c000f21f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f222:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f225:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f228:	8d 50 01             	lea    edx,[eax+0x1]
c000f22b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f22e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f231:	e9 d6 00 00 00       	jmp    c000f30c <opcodeFault(regs*, void*)+0x14d>
c000f236:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f239:	8a 00                	mov    al,BYTE PTR [eax]
c000f23b:	3c f2                	cmp    al,0xf2
c000f23d:	74 09                	je     c000f248 <opcodeFault(regs*, void*)+0x89>
c000f23f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f242:	8a 00                	mov    al,BYTE PTR [eax]
c000f244:	3c f3                	cmp    al,0xf3
c000f246:	75 1b                	jne    c000f263 <opcodeFault(regs*, void*)+0xa4>
c000f248:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f24c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f24f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f252:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f255:	8d 50 01             	lea    edx,[eax+0x1]
c000f258:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f25b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f25e:	e9 a9 00 00 00       	jmp    c000f30c <opcodeFault(regs*, void*)+0x14d>
c000f263:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f266:	8a 00                	mov    al,BYTE PTR [eax]
c000f268:	3c 66                	cmp    al,0x66
c000f26a:	75 1b                	jne    c000f287 <opcodeFault(regs*, void*)+0xc8>
c000f26c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f270:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f273:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f276:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f279:	8d 50 01             	lea    edx,[eax+0x1]
c000f27c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f27f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f282:	e9 85 00 00 00       	jmp    c000f30c <opcodeFault(regs*, void*)+0x14d>
c000f287:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f28a:	8a 00                	mov    al,BYTE PTR [eax]
c000f28c:	3c 67                	cmp    al,0x67
c000f28e:	75 18                	jne    c000f2a8 <opcodeFault(regs*, void*)+0xe9>
c000f290:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f294:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f297:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f29a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f29d:	8d 50 01             	lea    edx,[eax+0x1]
c000f2a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2a3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f2a6:	eb 64                	jmp    c000f30c <opcodeFault(regs*, void*)+0x14d>
c000f2a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2ab:	8a 00                	mov    al,BYTE PTR [eax]
c000f2ad:	3c 2e                	cmp    al,0x2e
c000f2af:	74 09                	je     c000f2ba <opcodeFault(regs*, void*)+0xfb>
c000f2b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2b4:	8a 00                	mov    al,BYTE PTR [eax]
c000f2b6:	3c 3e                	cmp    al,0x3e
c000f2b8:	75 18                	jne    c000f2d2 <opcodeFault(regs*, void*)+0x113>
c000f2ba:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f2be:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f2c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2c4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2c7:	8d 50 01             	lea    edx,[eax+0x1]
c000f2ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2cd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f2d0:	eb 3a                	jmp    c000f30c <opcodeFault(regs*, void*)+0x14d>
c000f2d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2d5:	8a 00                	mov    al,BYTE PTR [eax]
c000f2d7:	3c 36                	cmp    al,0x36
c000f2d9:	74 1b                	je     c000f2f6 <opcodeFault(regs*, void*)+0x137>
c000f2db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2de:	8a 00                	mov    al,BYTE PTR [eax]
c000f2e0:	3c 26                	cmp    al,0x26
c000f2e2:	74 12                	je     c000f2f6 <opcodeFault(regs*, void*)+0x137>
c000f2e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2e7:	8a 00                	mov    al,BYTE PTR [eax]
c000f2e9:	3c 64                	cmp    al,0x64
c000f2eb:	74 09                	je     c000f2f6 <opcodeFault(regs*, void*)+0x137>
c000f2ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2f0:	8a 00                	mov    al,BYTE PTR [eax]
c000f2f2:	3c 65                	cmp    al,0x65
c000f2f4:	75 16                	jne    c000f30c <opcodeFault(regs*, void*)+0x14d>
c000f2f6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f2fa:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f2fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f300:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f303:	8d 50 01             	lea    edx,[eax+0x1]
c000f306:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f309:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f30c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f30f:	8a 00                	mov    al,BYTE PTR [eax]
c000f311:	3c 0f                	cmp    al,0xf
c000f313:	0f 85 8d 01 00 00    	jne    c000f4a6 <opcodeFault(regs*, void*)+0x2e7>
c000f319:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f31c:	40                   	inc    eax
c000f31d:	8a 00                	mov    al,BYTE PTR [eax]
c000f31f:	3c c7                	cmp    al,0xc7
c000f321:	0f 85 7f 01 00 00    	jne    c000f4a6 <opcodeFault(regs*, void*)+0x2e7>
c000f327:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f32a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f32d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f330:	8d 50 01             	lea    edx,[eax+0x1]
c000f333:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f336:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f339:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f33c:	50                   	push   eax
c000f33d:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f340:	50                   	push   eax
c000f341:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f344:	50                   	push   eax
c000f345:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f348:	e8 bb 4c 00 00       	call   c0014008 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f34d:	83 c4 10             	add    esp,0x10
c000f350:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f353:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f356:	83 f0 01             	xor    eax,0x1
c000f359:	84 c0                	test   al,al
c000f35b:	0f 84 45 01 00 00    	je     c000f4a6 <opcodeFault(regs*, void*)+0x2e7>
c000f361:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f364:	3c 01                	cmp    al,0x1
c000f366:	0f 85 3a 01 00 00    	jne    c000f4a6 <opcodeFault(regs*, void*)+0x2e7>
c000f36c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f36f:	83 f0 01             	xor    eax,0x1
c000f372:	84 c0                	test   al,al
c000f374:	0f 84 2c 01 00 00    	je     c000f4a6 <opcodeFault(regs*, void*)+0x2e7>
c000f37a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f37d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f380:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f383:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f38a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f38d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f390:	89 c2                	mov    edx,eax
c000f392:	b8 00 00 00 00       	mov    eax,0x0
c000f397:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f39a:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f39d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3a0:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f3a3:	ba 00 00 00 00       	mov    edx,0x0
c000f3a8:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f3ab:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f3ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3b1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f3b4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f3b7:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f3be:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f3c1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f3c4:	89 c2                	mov    edx,eax
c000f3c6:	b8 00 00 00 00       	mov    eax,0x0
c000f3cb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f3ce:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f3d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3d4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f3d7:	ba 00 00 00 00       	mov    edx,0x0
c000f3dc:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f3df:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f3e2:	fa                   	cli    
c000f3e3:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c000f3e8:	40                   	inc    eax
c000f3e9:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c000f3ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f3f1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f3f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3f6:	89 c1                	mov    ecx,eax
c000f3f8:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f3fb:	89 cb                	mov    ebx,ecx
c000f3fd:	89 d0                	mov    eax,edx
c000f3ff:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f402:	89 c6                	mov    esi,eax
c000f404:	89 f0                	mov    eax,esi
c000f406:	09 d8                	or     eax,ebx
c000f408:	85 c0                	test   eax,eax
c000f40a:	75 21                	jne    c000f42d <opcodeFault(regs*, void*)+0x26e>
c000f40c:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f40f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f412:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f415:	89 01                	mov    DWORD PTR [ecx],eax
c000f417:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f41a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f41d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f420:	83 c8 40             	or     eax,0x40
c000f423:	89 c2                	mov    edx,eax
c000f425:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f428:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f42b:	eb 3e                	jmp    c000f46b <opcodeFault(regs*, void*)+0x2ac>
c000f42d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f430:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f433:	8b 00                	mov    eax,DWORD PTR [eax]
c000f435:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f438:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f43b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f43e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f441:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f444:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f447:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f44a:	89 d0                	mov    eax,edx
c000f44c:	31 d2                	xor    edx,edx
c000f44e:	89 c3                	mov    ebx,eax
c000f450:	89 d6                	mov    esi,edx
c000f452:	89 da                	mov    edx,ebx
c000f454:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f457:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f45a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f45d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f460:	83 e0 bf             	and    eax,0xffffffbf
c000f463:	89 c2                	mov    edx,eax
c000f465:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f468:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f46b:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c000f470:	48                   	dec    eax
c000f471:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c000f476:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c000f47b:	85 c0                	test   eax,eax
c000f47d:	75 01                	jne    c000f480 <opcodeFault(regs*, void*)+0x2c1>
c000f47f:	fb                   	sti    
c000f480:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f483:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f486:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f489:	01 c2                	add    edx,eax
c000f48b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f48e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f491:	83 ec 0c             	sub    esp,0xc
c000f494:	68 2b 4e 02 c0       	push   0xc0024e2b
c000f499:	e8 61 d8 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f49e:	83 c4 10             	add    esp,0x10
c000f4a1:	e9 d5 00 00 00       	jmp    c000f57b <opcodeFault(regs*, void*)+0x3bc>
c000f4a6:	83 ec 0c             	sub    esp,0xc
c000f4a9:	68 3e 4e 02 c0       	push   0xc0024e3e
c000f4ae:	e8 4c d8 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f4b3:	83 c4 10             	add    esp,0x10
c000f4b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4b9:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f4bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4bf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f4c2:	c1 e0 04             	shl    eax,0x4
c000f4c5:	01 d0                	add    eax,edx
c000f4c7:	83 c0 03             	add    eax,0x3
c000f4ca:	8a 00                	mov    al,BYTE PTR [eax]
c000f4cc:	0f b6 d8             	movzx  ebx,al
c000f4cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4d2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f4d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4d8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f4db:	c1 e0 04             	shl    eax,0x4
c000f4de:	01 d0                	add    eax,edx
c000f4e0:	83 c0 02             	add    eax,0x2
c000f4e3:	8a 00                	mov    al,BYTE PTR [eax]
c000f4e5:	0f b6 c8             	movzx  ecx,al
c000f4e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4eb:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f4ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4f1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f4f4:	c1 e0 04             	shl    eax,0x4
c000f4f7:	01 d0                	add    eax,edx
c000f4f9:	40                   	inc    eax
c000f4fa:	8a 00                	mov    al,BYTE PTR [eax]
c000f4fc:	0f b6 d0             	movzx  edx,al
c000f4ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f502:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f508:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f50b:	c1 e0 04             	shl    eax,0x4
c000f50e:	01 f0                	add    eax,esi
c000f510:	8a 00                	mov    al,BYTE PTR [eax]
c000f512:	0f b6 c0             	movzx  eax,al
c000f515:	83 ec 0c             	sub    esp,0xc
c000f518:	53                   	push   ebx
c000f519:	51                   	push   ecx
c000f51a:	52                   	push   edx
c000f51b:	50                   	push   eax
c000f51c:	68 50 4e 02 c0       	push   0xc0024e50
c000f521:	e8 d9 d7 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f52c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f52f:	83 c0 03             	add    eax,0x3
c000f532:	8a 00                	mov    al,BYTE PTR [eax]
c000f534:	0f b6 d8             	movzx  ebx,al
c000f537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f53a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f53d:	83 c0 02             	add    eax,0x2
c000f540:	8a 00                	mov    al,BYTE PTR [eax]
c000f542:	0f b6 c8             	movzx  ecx,al
c000f545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f548:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f54b:	40                   	inc    eax
c000f54c:	8a 00                	mov    al,BYTE PTR [eax]
c000f54e:	0f b6 d0             	movzx  edx,al
c000f551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f554:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f557:	8a 00                	mov    al,BYTE PTR [eax]
c000f559:	0f b6 c0             	movzx  eax,al
c000f55c:	83 ec 0c             	sub    esp,0xc
c000f55f:	53                   	push   ebx
c000f560:	51                   	push   ecx
c000f561:	52                   	push   edx
c000f562:	50                   	push   eax
c000f563:	68 78 4e 02 c0       	push   0xc0024e78
c000f568:	e8 92 d7 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f56d:	83 c4 20             	add    esp,0x20
c000f570:	83 ec 0c             	sub    esp,0xc
c000f573:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f576:	e8 9b f6 ff ff       	call   c000ec16 <displayDebugInfo(regs*)>
c000f57b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f57e:	5b                   	pop    ebx
c000f57f:	5e                   	pop    esi
c000f580:	5d                   	pop    ebp
c000f581:	c3                   	ret    

c000f582 <displayProgramFault(char const*)>:
c000f582:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f587:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f58a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f590:	85 c0                	test   eax,eax
c000f592:	74 15                	je     c000f5a9 <displayProgramFault(char const*)+0x27>
c000f594:	83 ec 0c             	sub    esp,0xc
c000f597:	6a 04                	push   0x4
c000f599:	6a 0f                	push   0xf
c000f59b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f59f:	50                   	push   eax
c000f5a0:	e8 6d b7 ff ff       	call   c000ad12 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f5a5:	83 c4 1c             	add    esp,0x1c
c000f5a8:	c3                   	ret    
c000f5a9:	c3                   	ret    

c000f5aa <setupInterruptController()>:
c000f5aa:	55                   	push   ebp
c000f5ab:	89 e5                	mov    ebp,esp
c000f5ad:	53                   	push   ebx
c000f5ae:	83 ec 24             	sub    esp,0x24
c000f5b1:	b8 00 00 00 00       	mov    eax,0x0
c000f5b6:	85 c0                	test   eax,eax
c000f5b8:	0f 95 c0             	setne  al
c000f5bb:	84 c0                	test   al,al
c000f5bd:	74 5b                	je     c000f61a <setupInterruptController()+0x70>
c000f5bf:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f5c6:	83 ec 0c             	sub    esp,0xc
c000f5c9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f5cc:	e8 3e a4 ff ff       	call   c0009a0f <malloc>
c000f5d1:	83 c4 10             	add    esp,0x10
c000f5d4:	89 c3                	mov    ebx,eax
c000f5d6:	83 ec 0c             	sub    esp,0xc
c000f5d9:	53                   	push   ebx
c000f5da:	e8 57 20 01 00       	call   c0021636 <APIC::APIC()>
c000f5df:	83 c4 10             	add    esp,0x10
c000f5e2:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f5e5:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f5e8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f5eb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5ed:	83 c0 08             	add    eax,0x8
c000f5f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5f2:	6a 00                	push   0x0
c000f5f4:	6a 00                	push   0x0
c000f5f6:	6a 00                	push   0x0
c000f5f8:	52                   	push   edx
c000f5f9:	ff d0                	call   eax
c000f5fb:	83 c4 10             	add    esp,0x10
c000f5fe:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000f603:	83 ec 08             	sub    esp,0x8
c000f606:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f609:	50                   	push   eax
c000f60a:	e8 97 eb ff ff       	call   c000e1a6 <Device::addChild(Device*)>
c000f60f:	83 c4 10             	add    esp,0x10
c000f612:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f615:	e9 79 03 00 00       	jmp    c000f993 <setupInterruptController()+0x3e9>
c000f61a:	a0 00 88 02 c0       	mov    al,ds:0xc0028800
c000f61f:	84 c0                	test   al,al
c000f621:	75 14                	jne    c000f637 <setupInterruptController()+0x8d>
c000f623:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000f628:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f62e:	83 e2 fe             	and    edx,0xfffffffe
c000f631:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f637:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000f63c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f642:	83 e0 01             	and    eax,0x1
c000f645:	84 c0                	test   al,al
c000f647:	0f 95 c0             	setne  al
c000f64a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f64d:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f654:	83 ec 0c             	sub    esp,0xc
c000f657:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f65a:	e8 b0 a3 ff ff       	call   c0009a0f <malloc>
c000f65f:	83 c4 10             	add    esp,0x10
c000f662:	89 c3                	mov    ebx,eax
c000f664:	83 ec 0c             	sub    esp,0xc
c000f667:	53                   	push   ebx
c000f668:	e8 21 25 01 00       	call   c0021b8e <PIC::PIC()>
c000f66d:	83 c4 10             	add    esp,0x10
c000f670:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f673:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f676:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f679:	8b 00                	mov    eax,DWORD PTR [eax]
c000f67b:	83 c0 08             	add    eax,0x8
c000f67e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f680:	6a 00                	push   0x0
c000f682:	6a 00                	push   0x0
c000f684:	6a 00                	push   0x0
c000f686:	52                   	push   edx
c000f687:	ff d0                	call   eax
c000f689:	83 c4 10             	add    esp,0x10
c000f68c:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f690:	74 73                	je     c000f705 <setupInterruptController()+0x15b>
c000f692:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f695:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f698:	8b 00                	mov    eax,DWORD PTR [eax]
c000f69a:	83 c0 0c             	add    eax,0xc
c000f69d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f69f:	6a 00                	push   0x0
c000f6a1:	6a 00                	push   0x0
c000f6a3:	6a 00                	push   0x0
c000f6a5:	52                   	push   edx
c000f6a6:	ff d0                	call   eax
c000f6a8:	83 c4 10             	add    esp,0x10
c000f6ab:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f6af:	74 15                	je     c000f6c6 <setupInterruptController()+0x11c>
c000f6b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6b4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6b6:	83 c0 04             	add    eax,0x4
c000f6b9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6bb:	83 ec 0c             	sub    esp,0xc
c000f6be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6c1:	ff d0                	call   eax
c000f6c3:	83 c4 10             	add    esp,0x10
c000f6c6:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f6cd:	83 ec 0c             	sub    esp,0xc
c000f6d0:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f6d3:	e8 37 a3 ff ff       	call   c0009a0f <malloc>
c000f6d8:	83 c4 10             	add    esp,0x10
c000f6db:	89 c3                	mov    ebx,eax
c000f6dd:	83 ec 0c             	sub    esp,0xc
c000f6e0:	53                   	push   ebx
c000f6e1:	e8 50 1f 01 00       	call   c0021636 <APIC::APIC()>
c000f6e6:	83 c4 10             	add    esp,0x10
c000f6e9:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f6ec:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f6ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6f2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6f4:	83 c0 08             	add    eax,0x8
c000f6f7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6f9:	6a 00                	push   0x0
c000f6fb:	6a 00                	push   0x0
c000f6fd:	6a 00                	push   0x0
c000f6ff:	52                   	push   edx
c000f700:	ff d0                	call   eax
c000f702:	83 c4 10             	add    esp,0x10
c000f705:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c000f70a:	83 ec 08             	sub    esp,0x8
c000f70d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f710:	50                   	push   eax
c000f711:	e8 90 ea ff ff       	call   c000e1a6 <Device::addChild(Device*)>
c000f716:	83 c4 10             	add    esp,0x10
c000f719:	c7 05 28 80 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028028,0x0
c000f723:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f726:	8b 00                	mov    eax,DWORD PTR [eax]
c000f728:	83 c0 24             	add    eax,0x24
c000f72b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f72d:	6a 00                	push   0x0
c000f72f:	68 a0 f1 00 c0       	push   0xc000f1a0
c000f734:	6a 00                	push   0x0
c000f736:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f739:	ff d0                	call   eax
c000f73b:	83 c4 10             	add    esp,0x10
c000f73e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f741:	8b 00                	mov    eax,DWORD PTR [eax]
c000f743:	83 c0 24             	add    eax,0x24
c000f746:	8b 00                	mov    eax,DWORD PTR [eax]
c000f748:	6a 00                	push   0x0
c000f74a:	68 a0 f1 00 c0       	push   0xc000f1a0
c000f74f:	6a 01                	push   0x1
c000f751:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f754:	ff d0                	call   eax
c000f756:	83 c4 10             	add    esp,0x10
c000f759:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f75c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f75e:	83 c0 24             	add    eax,0x24
c000f761:	8b 00                	mov    eax,DWORD PTR [eax]
c000f763:	6a 00                	push   0x0
c000f765:	68 73 ea 00 c0       	push   0xc000ea73
c000f76a:	6a 02                	push   0x2
c000f76c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f76f:	ff d0                	call   eax
c000f771:	83 c4 10             	add    esp,0x10
c000f774:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f777:	8b 00                	mov    eax,DWORD PTR [eax]
c000f779:	83 c0 24             	add    eax,0x24
c000f77c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f77e:	6a 00                	push   0x0
c000f780:	68 a0 f1 00 c0       	push   0xc000f1a0
c000f785:	6a 03                	push   0x3
c000f787:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f78a:	ff d0                	call   eax
c000f78c:	83 c4 10             	add    esp,0x10
c000f78f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f792:	8b 00                	mov    eax,DWORD PTR [eax]
c000f794:	83 c0 24             	add    eax,0x24
c000f797:	8b 00                	mov    eax,DWORD PTR [eax]
c000f799:	6a 00                	push   0x0
c000f79b:	68 a0 f1 00 c0       	push   0xc000f1a0
c000f7a0:	6a 04                	push   0x4
c000f7a2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7a5:	ff d0                	call   eax
c000f7a7:	83 c4 10             	add    esp,0x10
c000f7aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7af:	83 c0 24             	add    eax,0x24
c000f7b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7b4:	6a 00                	push   0x0
c000f7b6:	68 a0 f1 00 c0       	push   0xc000f1a0
c000f7bb:	6a 05                	push   0x5
c000f7bd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7c0:	ff d0                	call   eax
c000f7c2:	83 c4 10             	add    esp,0x10
c000f7c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7ca:	83 c0 24             	add    eax,0x24
c000f7cd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7cf:	6a 00                	push   0x0
c000f7d1:	68 bf f1 00 c0       	push   0xc000f1bf
c000f7d6:	6a 06                	push   0x6
c000f7d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7db:	ff d0                	call   eax
c000f7dd:	83 c4 10             	add    esp,0x10
c000f7e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7e5:	83 c0 24             	add    eax,0x24
c000f7e8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7ea:	6a 00                	push   0x0
c000f7ec:	68 a5 f0 00 c0       	push   0xc000f0a5
c000f7f1:	6a 07                	push   0x7
c000f7f3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7f6:	ff d0                	call   eax
c000f7f8:	83 c4 10             	add    esp,0x10
c000f7fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7fe:	8b 00                	mov    eax,DWORD PTR [eax]
c000f800:	83 c0 24             	add    eax,0x24
c000f803:	8b 00                	mov    eax,DWORD PTR [eax]
c000f805:	6a 00                	push   0x0
c000f807:	68 8e e8 00 c0       	push   0xc000e88e
c000f80c:	6a 08                	push   0x8
c000f80e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f811:	ff d0                	call   eax
c000f813:	83 c4 10             	add    esp,0x10
c000f816:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f819:	8b 00                	mov    eax,DWORD PTR [eax]
c000f81b:	83 c0 24             	add    eax,0x24
c000f81e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f820:	6a 00                	push   0x0
c000f822:	68 a0 f1 00 c0       	push   0xc000f1a0
c000f827:	6a 09                	push   0x9
c000f829:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f82c:	ff d0                	call   eax
c000f82e:	83 c4 10             	add    esp,0x10
c000f831:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f834:	8b 00                	mov    eax,DWORD PTR [eax]
c000f836:	83 c0 24             	add    eax,0x24
c000f839:	8b 00                	mov    eax,DWORD PTR [eax]
c000f83b:	6a 00                	push   0x0
c000f83d:	68 a0 f1 00 c0       	push   0xc000f1a0
c000f842:	6a 0a                	push   0xa
c000f844:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f847:	ff d0                	call   eax
c000f849:	83 c4 10             	add    esp,0x10
c000f84c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f84f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f851:	83 c0 24             	add    eax,0x24
c000f854:	8b 00                	mov    eax,DWORD PTR [eax]
c000f856:	6a 00                	push   0x0
c000f858:	68 a0 f1 00 c0       	push   0xc000f1a0
c000f85d:	6a 0b                	push   0xb
c000f85f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f862:	ff d0                	call   eax
c000f864:	83 c4 10             	add    esp,0x10
c000f867:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f86a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f86c:	83 c0 24             	add    eax,0x24
c000f86f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f871:	6a 00                	push   0x0
c000f873:	68 a0 f1 00 c0       	push   0xc000f1a0
c000f878:	6a 0c                	push   0xc
c000f87a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f87d:	ff d0                	call   eax
c000f87f:	83 c4 10             	add    esp,0x10
c000f882:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f885:	8b 00                	mov    eax,DWORD PTR [eax]
c000f887:	83 c0 24             	add    eax,0x24
c000f88a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f88c:	6a 00                	push   0x0
c000f88e:	68 18 f1 00 c0       	push   0xc000f118
c000f893:	6a 0d                	push   0xd
c000f895:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f898:	ff d0                	call   eax
c000f89a:	83 c4 10             	add    esp,0x10
c000f89d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8a0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8a2:	83 c0 24             	add    eax,0x24
c000f8a5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8a7:	6a 00                	push   0x0
c000f8a9:	68 51 f1 00 c0       	push   0xc000f151
c000f8ae:	6a 0e                	push   0xe
c000f8b0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8b3:	ff d0                	call   eax
c000f8b5:	83 c4 10             	add    esp,0x10
c000f8b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8bd:	83 c0 24             	add    eax,0x24
c000f8c0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8c2:	6a 00                	push   0x0
c000f8c4:	68 a0 f1 00 c0       	push   0xc000f1a0
c000f8c9:	6a 0f                	push   0xf
c000f8cb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8ce:	ff d0                	call   eax
c000f8d0:	83 c4 10             	add    esp,0x10
c000f8d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8d8:	83 c0 24             	add    eax,0x24
c000f8db:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8dd:	6a 00                	push   0x0
c000f8df:	68 a0 f1 00 c0       	push   0xc000f1a0
c000f8e4:	6a 10                	push   0x10
c000f8e6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8e9:	ff d0                	call   eax
c000f8eb:	83 c4 10             	add    esp,0x10
c000f8ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8f1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8f3:	83 c0 24             	add    eax,0x24
c000f8f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8f8:	6a 00                	push   0x0
c000f8fa:	68 a0 f1 00 c0       	push   0xc000f1a0
c000f8ff:	6a 11                	push   0x11
c000f901:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f904:	ff d0                	call   eax
c000f906:	83 c4 10             	add    esp,0x10
c000f909:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f90c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f90e:	83 c0 24             	add    eax,0x24
c000f911:	8b 00                	mov    eax,DWORD PTR [eax]
c000f913:	6a 00                	push   0x0
c000f915:	68 a0 f1 00 c0       	push   0xc000f1a0
c000f91a:	6a 12                	push   0x12
c000f91c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f91f:	ff d0                	call   eax
c000f921:	83 c4 10             	add    esp,0x10
c000f924:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f927:	8b 00                	mov    eax,DWORD PTR [eax]
c000f929:	83 c0 24             	add    eax,0x24
c000f92c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f92e:	6a 00                	push   0x0
c000f930:	68 a0 f1 00 c0       	push   0xc000f1a0
c000f935:	6a 13                	push   0x13
c000f937:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f93a:	ff d0                	call   eax
c000f93c:	83 c4 10             	add    esp,0x10
c000f93f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f942:	8b 00                	mov    eax,DWORD PTR [eax]
c000f944:	83 c0 24             	add    eax,0x24
c000f947:	8b 00                	mov    eax,DWORD PTR [eax]
c000f949:	6a 00                	push   0x0
c000f94b:	68 a0 f1 00 c0       	push   0xc000f1a0
c000f950:	6a 14                	push   0x14
c000f952:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f955:	ff d0                	call   eax
c000f957:	83 c4 10             	add    esp,0x10
c000f95a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f95d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f95f:	83 c0 24             	add    eax,0x24
c000f962:	8b 00                	mov    eax,DWORD PTR [eax]
c000f964:	6a 00                	push   0x0
c000f966:	68 a0 f1 00 c0       	push   0xc000f1a0
c000f96b:	6a 1e                	push   0x1e
c000f96d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f970:	ff d0                	call   eax
c000f972:	83 c4 10             	add    esp,0x10
c000f975:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f978:	8b 00                	mov    eax,DWORD PTR [eax]
c000f97a:	83 c0 24             	add    eax,0x24
c000f97d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f97f:	6a 00                	push   0x0
c000f981:	68 93 6c 01 c0       	push   0xc0016c93
c000f986:	6a 60                	push   0x60
c000f988:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f98b:	ff d0                	call   eax
c000f98d:	83 c4 10             	add    esp,0x10
c000f990:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f993:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f996:	c9                   	leave  
c000f997:	c3                   	ret    

c000f998 <InterruptController::convertLegacyIRQNumber(int)>:
c000f998:	55                   	push   ebp
c000f999:	89 e5                	mov    ebp,esp
c000f99b:	83 ec 08             	sub    esp,0x8
c000f99e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9a1:	83 ec 0c             	sub    esp,0xc
c000f9a4:	50                   	push   eax
c000f9a5:	e8 fc ea ff ff       	call   c000e4a6 <Device::getName()>
c000f9aa:	83 c4 10             	add    esp,0x10
c000f9ad:	8a 00                	mov    al,BYTE PTR [eax]
c000f9af:	3c 41                	cmp    al,0x41
c000f9b1:	0f 94 c0             	sete   al
c000f9b4:	84 c0                	test   al,al
c000f9b6:	74 28                	je     c000f9e0 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f9b8:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000f9bc:	7f 12                	jg     c000f9d0 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000f9be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f9c1:	05 e0 75 02 c0       	add    eax,0xc00275e0
c000f9c6:	8a 00                	mov    al,BYTE PTR [eax]
c000f9c8:	0f b6 c0             	movzx  eax,al
c000f9cb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000f9ce:	eb 10                	jmp    c000f9e0 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f9d0:	83 ec 0c             	sub    esp,0xc
c000f9d3:	68 a0 4e 02 c0       	push   0xc0024ea0
c000f9d8:	e8 12 4f 00 00       	call   c00148ef <Krnl::panic(char const*)>
c000f9dd:	83 c4 10             	add    esp,0x10
c000f9e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f9e3:	c9                   	leave  
c000f9e4:	c3                   	ret    
c000f9e5:	90                   	nop

c000f9e6 <startGUI(void*)>:
c000f9e6:	55                   	push   ebp
c000f9e7:	89 e5                	mov    ebp,esp
c000f9e9:	53                   	push   ebx
c000f9ea:	83 ec 04             	sub    esp,0x4
c000f9ed:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c000f9f2:	48                   	dec    eax
c000f9f3:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c000f9f8:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c000f9fd:	85 c0                	test   eax,eax
c000f9ff:	75 01                	jne    c000fa02 <startGUI(void*)+0x1c>
c000fa01:	fb                   	sti    
c000fa02:	8b 1d e8 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ee8
c000fa08:	83 ec 08             	sub    esp,0x8
c000fa0b:	6a 01                	push   0x1
c000fa0d:	68 20 4f 02 c0       	push   0xc0024f20
c000fa12:	e8 57 82 00 00       	call   c0017c6e <Thr::loadDLL(char const*, bool)>
c000fa17:	83 c4 10             	add    esp,0x10
c000fa1a:	83 ec 08             	sub    esp,0x8
c000fa1d:	53                   	push   ebx
c000fa1e:	50                   	push   eax
c000fa1f:	e8 7b 84 00 00       	call   c0017e9f <Thr::executeDLL(unsigned long, void*)>
c000fa24:	83 c4 10             	add    esp,0x10
c000fa27:	8b 1d e8 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ee8
c000fa2d:	83 ec 08             	sub    esp,0x8
c000fa30:	6a 01                	push   0x1
c000fa32:	68 3a 4f 02 c0       	push   0xc0024f3a
c000fa37:	e8 32 82 00 00       	call   c0017c6e <Thr::loadDLL(char const*, bool)>
c000fa3c:	83 c4 10             	add    esp,0x10
c000fa3f:	83 ec 08             	sub    esp,0x8
c000fa42:	53                   	push   ebx
c000fa43:	50                   	push   eax
c000fa44:	e8 56 84 00 00       	call   c0017e9f <Thr::executeDLL(unsigned long, void*)>
c000fa49:	83 c4 10             	add    esp,0x10
c000fa4c:	90                   	nop
c000fa4d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fa50:	c9                   	leave  
c000fa51:	c3                   	ret    

c000fa52 <startGUIVESA(void*)>:
c000fa52:	55                   	push   ebp
c000fa53:	89 e5                	mov    ebp,esp
c000fa55:	53                   	push   ebx
c000fa56:	83 ec 04             	sub    esp,0x4
c000fa59:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c000fa5e:	48                   	dec    eax
c000fa5f:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c000fa64:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c000fa69:	85 c0                	test   eax,eax
c000fa6b:	75 01                	jne    c000fa6e <startGUIVESA(void*)+0x1c>
c000fa6d:	fb                   	sti    
c000fa6e:	8b 1d e8 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ee8
c000fa74:	83 ec 08             	sub    esp,0x8
c000fa77:	6a 01                	push   0x1
c000fa79:	68 54 4f 02 c0       	push   0xc0024f54
c000fa7e:	e8 eb 81 00 00       	call   c0017c6e <Thr::loadDLL(char const*, bool)>
c000fa83:	83 c4 10             	add    esp,0x10
c000fa86:	83 ec 08             	sub    esp,0x8
c000fa89:	53                   	push   ebx
c000fa8a:	50                   	push   eax
c000fa8b:	e8 0f 84 00 00       	call   c0017e9f <Thr::executeDLL(unsigned long, void*)>
c000fa90:	83 c4 10             	add    esp,0x10
c000fa93:	8b 1d e8 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ee8
c000fa99:	83 ec 08             	sub    esp,0x8
c000fa9c:	6a 01                	push   0x1
c000fa9e:	68 3a 4f 02 c0       	push   0xc0024f3a
c000faa3:	e8 c6 81 00 00       	call   c0017c6e <Thr::loadDLL(char const*, bool)>
c000faa8:	83 c4 10             	add    esp,0x10
c000faab:	83 ec 08             	sub    esp,0x8
c000faae:	53                   	push   ebx
c000faaf:	50                   	push   eax
c000fab0:	e8 ea 83 00 00       	call   c0017e9f <Thr::executeDLL(unsigned long, void*)>
c000fab5:	83 c4 10             	add    esp,0x10
c000fab8:	90                   	nop
c000fab9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fabc:	c9                   	leave  
c000fabd:	c3                   	ret    

c000fabe <sendKeyToTerminal(unsigned char)>:
c000fabe:	55                   	push   ebp
c000fabf:	89 e5                	mov    ebp,esp
c000fac1:	83 ec 28             	sub    esp,0x28
c000fac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fac7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000faca:	a1 64 7f 02 c0       	mov    eax,ds:0xc0027f64
c000facf:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000fad3:	83 ec 08             	sub    esp,0x8
c000fad6:	52                   	push   edx
c000fad7:	50                   	push   eax
c000fad8:	e8 dd b6 ff ff       	call   c000b1ba <VgaText::receiveKey(unsigned char)>
c000fadd:	83 c4 10             	add    esp,0x10
c000fae0:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000fae4:	0f 85 8f 00 00 00    	jne    c000fb79 <sendKeyToTerminal(unsigned char)+0xbb>
c000faea:	fa                   	cli    
c000faeb:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c000faf0:	40                   	inc    eax
c000faf1:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c000faf6:	a1 04 94 02 c0       	mov    eax,ds:0xc0029404
c000fafb:	40                   	inc    eax
c000fafc:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000fb01:	a1 40 80 02 c0       	mov    eax,ds:0xc0028040
c000fb06:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fb09:	c7 05 40 80 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028040,0x0
c000fb13:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fb17:	74 1f                	je     c000fb38 <sendKeyToTerminal(unsigned char)+0x7a>
c000fb19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb1c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000fb1f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fb22:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000fb25:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fb28:	83 ec 0c             	sub    esp,0xc
c000fb2b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fb2e:	e8 dd 8f 00 00       	call   c0018b10 <unblockTask(ThreadControlBlock*)>
c000fb33:	83 c4 10             	add    esp,0x10
c000fb36:	eb db                	jmp    c000fb13 <sendKeyToTerminal(unsigned char)+0x55>
c000fb38:	a1 04 94 02 c0       	mov    eax,ds:0xc0029404
c000fb3d:	48                   	dec    eax
c000fb3e:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000fb43:	a1 04 94 02 c0       	mov    eax,ds:0xc0029404
c000fb48:	85 c0                	test   eax,eax
c000fb4a:	75 18                	jne    c000fb64 <sendKeyToTerminal(unsigned char)+0xa6>
c000fb4c:	a1 00 94 02 c0       	mov    eax,ds:0xc0029400
c000fb51:	85 c0                	test   eax,eax
c000fb53:	74 0f                	je     c000fb64 <sendKeyToTerminal(unsigned char)+0xa6>
c000fb55:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c000fb5f:	e8 f0 8a 00 00       	call   c0018654 <schedule()>
c000fb64:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c000fb69:	48                   	dec    eax
c000fb6a:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c000fb6f:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c000fb74:	85 c0                	test   eax,eax
c000fb76:	75 01                	jne    c000fb79 <sendKeyToTerminal(unsigned char)+0xbb>
c000fb78:	fb                   	sti    
c000fb79:	90                   	nop
c000fb7a:	c9                   	leave  
c000fb7b:	c3                   	ret    

c000fb7c <sendKeyboardToken(KeyboardToken)>:
c000fb7c:	55                   	push   ebp
c000fb7d:	89 e5                	mov    ebp,esp
c000fb7f:	83 ec 18             	sub    esp,0x18
c000fb82:	e8 9a 51 00 00       	call   c0014d21 <Krnl::userIOReceived()>
c000fb87:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000fb8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb8d:	0f b7 c0             	movzx  eax,ax
c000fb90:	83 f2 01             	xor    edx,0x1
c000fb93:	88 90 60 80 02 c0    	mov    BYTE PTR [eax-0x3ffd7fa0],dl
c000fb99:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000fb9e:	85 c0                	test   eax,eax
c000fba0:	74 24                	je     c000fbc6 <sendKeyboardToken(KeyboardToken)+0x4a>
c000fba2:	8b 0d 48 80 02 c0    	mov    ecx,DWORD PTR ds:0xc0028048
c000fba8:	83 ec 04             	sub    esp,0x4
c000fbab:	68 60 80 02 c0       	push   0xc0028060
c000fbb0:	83 ec 08             	sub    esp,0x8
c000fbb3:	89 e2                	mov    edx,esp
c000fbb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbb8:	89 02                	mov    DWORD PTR [edx],eax
c000fbba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fbbd:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fbc1:	ff d1                	call   ecx
c000fbc3:	83 c4 10             	add    esp,0x10
c000fbc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbc9:	66 3d 03 02          	cmp    ax,0x203
c000fbcd:	75 07                	jne    c000fbd6 <sendKeyboardToken(KeyboardToken)+0x5a>
c000fbcf:	a0 60 81 02 c0       	mov    al,ds:0xc0028160
c000fbd4:	84 c0                	test   al,al
c000fbd6:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fbda:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000fbdd:	a0 68 84 02 c0       	mov    al,ds:0xc0028468
c000fbe2:	38 c2                	cmp    dl,al
c000fbe4:	74 1c                	je     c000fc02 <sendKeyboardToken(KeyboardToken)+0x86>
c000fbe6:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000fbe9:	a2 68 84 02 c0       	mov    ds:0xc0028468,al
c000fbee:	a0 68 84 02 c0       	mov    al,ds:0xc0028468
c000fbf3:	0f b6 c0             	movzx  eax,al
c000fbf6:	83 ec 0c             	sub    esp,0xc
c000fbf9:	50                   	push   eax
c000fbfa:	e8 fb ab ff ff       	call   c000a7fa <setTerminalScrollLock(bool)>
c000fbff:	83 c4 10             	add    esp,0x10
c000fc02:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000fc05:	84 c0                	test   al,al
c000fc07:	0f 84 ae 00 00 00    	je     c000fcbb <sendKeyboardToken(KeyboardToken)+0x13f>
c000fc0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc10:	66 3d 10 03          	cmp    ax,0x310
c000fc14:	75 06                	jne    c000fc1c <sendKeyboardToken(KeyboardToken)+0xa0>
c000fc16:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000fc1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc1f:	66 3d 11 03          	cmp    ax,0x311
c000fc23:	75 06                	jne    c000fc2b <sendKeyboardToken(KeyboardToken)+0xaf>
c000fc25:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000fc2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc2e:	66 3d 12 03          	cmp    ax,0x312
c000fc32:	75 06                	jne    c000fc3a <sendKeyboardToken(KeyboardToken)+0xbe>
c000fc34:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000fc3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc3d:	66 3d 13 03          	cmp    ax,0x313
c000fc41:	75 06                	jne    c000fc49 <sendKeyboardToken(KeyboardToken)+0xcd>
c000fc43:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000fc49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc4c:	66 3d 14 03          	cmp    ax,0x314
c000fc50:	75 06                	jne    c000fc58 <sendKeyboardToken(KeyboardToken)+0xdc>
c000fc52:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000fc58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc5b:	66 3d 15 03          	cmp    ax,0x315
c000fc5f:	75 06                	jne    c000fc67 <sendKeyboardToken(KeyboardToken)+0xeb>
c000fc61:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fc67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc6a:	66 3d 16 03          	cmp    ax,0x316
c000fc6e:	75 06                	jne    c000fc76 <sendKeyboardToken(KeyboardToken)+0xfa>
c000fc70:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000fc76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc79:	66 3d 17 03          	cmp    ax,0x317
c000fc7d:	75 06                	jne    c000fc85 <sendKeyboardToken(KeyboardToken)+0x109>
c000fc7f:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000fc85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc88:	66 3d 18 03          	cmp    ax,0x318
c000fc8c:	75 06                	jne    c000fc94 <sendKeyboardToken(KeyboardToken)+0x118>
c000fc8e:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000fc94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc97:	66 3d 19 03          	cmp    ax,0x319
c000fc9b:	75 06                	jne    c000fca3 <sendKeyboardToken(KeyboardToken)+0x127>
c000fc9d:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000fca3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fca6:	66 3d 1a 03          	cmp    ax,0x31a
c000fcaa:	0f 85 c9 00 00 00    	jne    c000fd79 <sendKeyboardToken(KeyboardToken)+0x1fd>
c000fcb0:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000fcb6:	e9 be 00 00 00       	jmp    c000fd79 <sendKeyboardToken(KeyboardToken)+0x1fd>
c000fcbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcbe:	66 3d 10 03          	cmp    ax,0x310
c000fcc2:	75 0a                	jne    c000fcce <sendKeyboardToken(KeyboardToken)+0x152>
c000fcc4:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000fcca:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fcce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcd1:	66 3d 11 03          	cmp    ax,0x311
c000fcd5:	75 0a                	jne    c000fce1 <sendKeyboardToken(KeyboardToken)+0x165>
c000fcd7:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000fcdd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fce1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fce4:	66 3d 12 03          	cmp    ax,0x312
c000fce8:	75 0a                	jne    c000fcf4 <sendKeyboardToken(KeyboardToken)+0x178>
c000fcea:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000fcf0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fcf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcf7:	66 3d 13 03          	cmp    ax,0x313
c000fcfb:	75 0a                	jne    c000fd07 <sendKeyboardToken(KeyboardToken)+0x18b>
c000fcfd:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000fd03:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd0a:	66 3d 14 03          	cmp    ax,0x314
c000fd0e:	75 0a                	jne    c000fd1a <sendKeyboardToken(KeyboardToken)+0x19e>
c000fd10:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000fd16:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd1d:	66 3d 15 03          	cmp    ax,0x315
c000fd21:	75 0a                	jne    c000fd2d <sendKeyboardToken(KeyboardToken)+0x1b1>
c000fd23:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fd29:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd30:	66 3d 16 03          	cmp    ax,0x316
c000fd34:	75 0a                	jne    c000fd40 <sendKeyboardToken(KeyboardToken)+0x1c4>
c000fd36:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fd3c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd43:	66 3d 17 03          	cmp    ax,0x317
c000fd47:	75 0a                	jne    c000fd53 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000fd49:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000fd4f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd56:	66 3d 18 03          	cmp    ax,0x318
c000fd5a:	75 0a                	jne    c000fd66 <sendKeyboardToken(KeyboardToken)+0x1ea>
c000fd5c:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fd62:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd69:	66 3d 19 03          	cmp    ax,0x319
c000fd6d:	75 0a                	jne    c000fd79 <sendKeyboardToken(KeyboardToken)+0x1fd>
c000fd6f:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fd75:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd7c:	66 3d 00 02          	cmp    ax,0x200
c000fd80:	75 2c                	jne    c000fdae <sendKeyboardToken(KeyboardToken)+0x232>
c000fd82:	a0 60 84 02 c0       	mov    al,ds:0xc0028460
c000fd87:	83 f0 01             	xor    eax,0x1
c000fd8a:	84 c0                	test   al,al
c000fd8c:	74 20                	je     c000fdae <sendKeyboardToken(KeyboardToken)+0x232>
c000fd8e:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000fd93:	6a 01                	push   0x1
c000fd95:	6a 00                	push   0x0
c000fd97:	68 e6 f9 00 c0       	push   0xc000f9e6
c000fd9c:	50                   	push   eax
c000fd9d:	e8 96 86 00 00       	call   c0018438 <Process::createThread(void (*)(void*), void*, int)>
c000fda2:	83 c4 10             	add    esp,0x10
c000fda5:	c6 05 60 84 02 c0 01 	mov    BYTE PTR ds:0xc0028460,0x1
c000fdac:	eb 33                	jmp    c000fde1 <sendKeyboardToken(KeyboardToken)+0x265>
c000fdae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdb1:	66 3d 01 02          	cmp    ax,0x201
c000fdb5:	75 2a                	jne    c000fde1 <sendKeyboardToken(KeyboardToken)+0x265>
c000fdb7:	a0 60 84 02 c0       	mov    al,ds:0xc0028460
c000fdbc:	83 f0 01             	xor    eax,0x1
c000fdbf:	84 c0                	test   al,al
c000fdc1:	74 1e                	je     c000fde1 <sendKeyboardToken(KeyboardToken)+0x265>
c000fdc3:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c000fdc8:	6a 01                	push   0x1
c000fdca:	6a 00                	push   0x0
c000fdcc:	68 52 fa 00 c0       	push   0xc000fa52
c000fdd1:	50                   	push   eax
c000fdd2:	e8 61 86 00 00       	call   c0018438 <Process::createThread(void (*)(void*), void*, int)>
c000fdd7:	83 c4 10             	add    esp,0x10
c000fdda:	c6 05 60 84 02 c0 01 	mov    BYTE PTR ds:0xc0028460,0x1
c000fde1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fde4:	66 3d 1d 03          	cmp    ax,0x31d
c000fde8:	75 06                	jne    c000fdf0 <sendKeyboardToken(KeyboardToken)+0x274>
c000fdea:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000fdf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdf3:	66 3d 1c 03          	cmp    ax,0x31c
c000fdf7:	75 06                	jne    c000fdff <sendKeyboardToken(KeyboardToken)+0x283>
c000fdf9:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fdff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe02:	66 3d 1b 03          	cmp    ax,0x31b
c000fe06:	75 06                	jne    c000fe0e <sendKeyboardToken(KeyboardToken)+0x292>
c000fe08:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fe0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe11:	66 3d 1e 03          	cmp    ax,0x31e
c000fe15:	75 06                	jne    c000fe1d <sendKeyboardToken(KeyboardToken)+0x2a1>
c000fe17:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000fe1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe20:	66 3d 1f 03          	cmp    ax,0x31f
c000fe24:	75 06                	jne    c000fe2c <sendKeyboardToken(KeyboardToken)+0x2b0>
c000fe26:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000fe2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe2f:	66 3d 1a 03          	cmp    ax,0x31a
c000fe33:	75 06                	jne    c000fe3b <sendKeyboardToken(KeyboardToken)+0x2bf>
c000fe35:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000fe3b:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000fe3f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fe42:	83 f0 01             	xor    eax,0x1
c000fe45:	84 c0                	test   al,al
c000fe47:	74 77                	je     c000fec0 <sendKeyboardToken(KeyboardToken)+0x344>
c000fe49:	a0 61 81 02 c0       	mov    al,ds:0xc0028161
c000fe4e:	84 c0                	test   al,al
c000fe50:	74 41                	je     c000fe93 <sendKeyboardToken(KeyboardToken)+0x317>
c000fe52:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fe56:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000fe5a:	74 2b                	je     c000fe87 <sendKeyboardToken(KeyboardToken)+0x30b>
c000fe5c:	8b 15 64 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028464
c000fe62:	89 d0                	mov    eax,edx
c000fe64:	c1 e0 02             	shl    eax,0x2
c000fe67:	01 d0                	add    eax,edx
c000fe69:	01 c0                	add    eax,eax
c000fe6b:	a3 64 84 02 c0       	mov    ds:0xc0028464,eax
c000fe70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe73:	0f b7 c0             	movzx  eax,ax
c000fe76:	8d 50 d0             	lea    edx,[eax-0x30]
c000fe79:	a1 64 84 02 c0       	mov    eax,ds:0xc0028464
c000fe7e:	01 d0                	add    eax,edx
c000fe80:	a3 64 84 02 c0       	mov    ds:0xc0028464,eax
c000fe85:	eb 6d                	jmp    c000fef4 <sendKeyboardToken(KeyboardToken)+0x378>
c000fe87:	c7 05 64 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028464,0x0
c000fe91:	eb 61                	jmp    c000fef4 <sendKeyboardToken(KeyboardToken)+0x378>
c000fe93:	a1 64 84 02 c0       	mov    eax,ds:0xc0028464
c000fe98:	85 c0                	test   eax,eax
c000fe9a:	74 18                	je     c000feb4 <sendKeyboardToken(KeyboardToken)+0x338>
c000fe9c:	a1 64 84 02 c0       	mov    eax,ds:0xc0028464
c000fea1:	0f b6 c0             	movzx  eax,al
c000fea4:	83 ec 0c             	sub    esp,0xc
c000fea7:	50                   	push   eax
c000fea8:	e8 11 fc ff ff       	call   c000fabe <sendKeyToTerminal(unsigned char)>
c000fead:	83 c4 10             	add    esp,0x10
c000feb0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000feb4:	c7 05 64 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028464,0x0
c000febe:	eb 34                	jmp    c000fef4 <sendKeyboardToken(KeyboardToken)+0x378>
c000fec0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fec3:	66 3d 01 01          	cmp    ax,0x101
c000fec7:	75 2b                	jne    c000fef4 <sendKeyboardToken(KeyboardToken)+0x378>
c000fec9:	a1 64 84 02 c0       	mov    eax,ds:0xc0028464
c000fece:	85 c0                	test   eax,eax
c000fed0:	74 18                	je     c000feea <sendKeyboardToken(KeyboardToken)+0x36e>
c000fed2:	a1 64 84 02 c0       	mov    eax,ds:0xc0028464
c000fed7:	0f b6 c0             	movzx  eax,al
c000feda:	83 ec 0c             	sub    esp,0xc
c000fedd:	50                   	push   eax
c000fede:	e8 db fb ff ff       	call   c000fabe <sendKeyToTerminal(unsigned char)>
c000fee3:	83 c4 10             	add    esp,0x10
c000fee6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000feea:	c7 05 64 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028464,0x0
c000fef4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fef7:	83 f0 01             	xor    eax,0x1
c000fefa:	84 c0                	test   al,al
c000fefc:	74 4c                	je     c000ff4a <sendKeyboardToken(KeyboardToken)+0x3ce>
c000fefe:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ff01:	83 f0 01             	xor    eax,0x1
c000ff04:	84 c0                	test   al,al
c000ff06:	74 42                	je     c000ff4a <sendKeyboardToken(KeyboardToken)+0x3ce>
c000ff08:	a0 60 81 02 c0       	mov    al,ds:0xc0028160
c000ff0d:	83 f0 01             	xor    eax,0x1
c000ff10:	84 c0                	test   al,al
c000ff12:	74 36                	je     c000ff4a <sendKeyboardToken(KeyboardToken)+0x3ce>
c000ff14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff17:	66 83 f8 1f          	cmp    ax,0x1f
c000ff1b:	76 09                	jbe    c000ff26 <sendKeyboardToken(KeyboardToken)+0x3aa>
c000ff1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff20:	66 83 f8 7e          	cmp    ax,0x7e
c000ff24:	76 12                	jbe    c000ff38 <sendKeyboardToken(KeyboardToken)+0x3bc>
c000ff26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff29:	66 83 f8 0a          	cmp    ax,0xa
c000ff2d:	74 09                	je     c000ff38 <sendKeyboardToken(KeyboardToken)+0x3bc>
c000ff2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff32:	66 83 f8 08          	cmp    ax,0x8
c000ff36:	75 12                	jne    c000ff4a <sendKeyboardToken(KeyboardToken)+0x3ce>
c000ff38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff3b:	0f b6 c0             	movzx  eax,al
c000ff3e:	83 ec 0c             	sub    esp,0xc
c000ff41:	50                   	push   eax
c000ff42:	e8 77 fb ff ff       	call   c000fabe <sendKeyToTerminal(unsigned char)>
c000ff47:	83 c4 10             	add    esp,0x10
c000ff4a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ff4d:	83 f0 01             	xor    eax,0x1
c000ff50:	84 c0                	test   al,al
c000ff52:	74 4f                	je     c000ffa3 <sendKeyboardToken(KeyboardToken)+0x427>
c000ff54:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ff57:	83 f0 01             	xor    eax,0x1
c000ff5a:	84 c0                	test   al,al
c000ff5c:	74 45                	je     c000ffa3 <sendKeyboardToken(KeyboardToken)+0x427>
c000ff5e:	a0 60 81 02 c0       	mov    al,ds:0xc0028160
c000ff63:	84 c0                	test   al,al
c000ff65:	74 3c                	je     c000ffa3 <sendKeyboardToken(KeyboardToken)+0x427>
c000ff67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff6a:	66 83 f8 3f          	cmp    ax,0x3f
c000ff6e:	76 33                	jbe    c000ffa3 <sendKeyboardToken(KeyboardToken)+0x427>
c000ff70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff73:	66 83 f8 7f          	cmp    ax,0x7f
c000ff77:	77 2a                	ja     c000ffa3 <sendKeyboardToken(KeyboardToken)+0x427>
c000ff79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff7c:	88 c2                	mov    dl,al
c000ff7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff81:	66 83 f8 5f          	cmp    ax,0x5f
c000ff85:	76 04                	jbe    c000ff8b <sendKeyboardToken(KeyboardToken)+0x40f>
c000ff87:	b0 20                	mov    al,0x20
c000ff89:	eb 02                	jmp    c000ff8d <sendKeyboardToken(KeyboardToken)+0x411>
c000ff8b:	b0 00                	mov    al,0x0
c000ff8d:	29 c2                	sub    edx,eax
c000ff8f:	88 d0                	mov    al,dl
c000ff91:	83 e8 40             	sub    eax,0x40
c000ff94:	0f b6 c0             	movzx  eax,al
c000ff97:	83 ec 0c             	sub    esp,0xc
c000ff9a:	50                   	push   eax
c000ff9b:	e8 1e fb ff ff       	call   c000fabe <sendKeyToTerminal(unsigned char)>
c000ffa0:	83 c4 10             	add    esp,0x10
c000ffa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffa6:	66 3d 00 03          	cmp    ax,0x300
c000ffaa:	75 0f                	jne    c000ffbb <sendKeyboardToken(KeyboardToken)+0x43f>
c000ffac:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ffaf:	83 f0 01             	xor    eax,0x1
c000ffb2:	84 c0                	test   al,al
c000ffb4:	74 05                	je     c000ffbb <sendKeyboardToken(KeyboardToken)+0x43f>
c000ffb6:	e8 b0 ab ff ff       	call   c000ab6b <doTerminalCycle()>
c000ffbb:	90                   	nop
c000ffbc:	c9                   	leave  
c000ffbd:	c3                   	ret    

c000ffbe <clearInternalKeybuffer(VgaText*)>:
c000ffbe:	55                   	push   ebp
c000ffbf:	89 e5                	mov    ebp,esp
c000ffc1:	83 ec 08             	sub    esp,0x8
c000ffc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffc7:	05 98 01 00 00       	add    eax,0x198
c000ffcc:	83 ec 0c             	sub    esp,0xc
c000ffcf:	50                   	push   eax
c000ffd0:	e8 cb 06 ff ff       	call   c00006a0 <strlen>
c000ffd5:	83 c4 10             	add    esp,0x10
c000ffd8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ffdb:	81 c2 98 01 00 00    	add    edx,0x198
c000ffe1:	83 ec 04             	sub    esp,0x4
c000ffe4:	50                   	push   eax
c000ffe5:	6a 00                	push   0x0
c000ffe7:	52                   	push   edx
c000ffe8:	e8 97 06 ff ff       	call   c0000684 <memset>
c000ffed:	83 c4 10             	add    esp,0x10
c000fff0:	90                   	nop
c000fff1:	c9                   	leave  
c000fff2:	c3                   	ret    

c000fff3 <readKeyboard(VgaText*, char*, unsigned long)>:
c000fff3:	55                   	push   ebp
c000fff4:	89 e5                	mov    ebp,esp
c000fff6:	83 ec 18             	sub    esp,0x18
c000fff9:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c000fffe:	85 c0                	test   eax,eax
c0010000:	74 2a                	je     c001002c <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0010002:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0010008:	8b 0d 48 80 02 c0    	mov    ecx,DWORD PTR ds:0xc0028048
c001000e:	83 ec 04             	sub    esp,0x4
c0010011:	68 60 80 02 c0       	push   0xc0028060
c0010016:	83 ec 08             	sub    esp,0x8
c0010019:	89 e2                	mov    edx,esp
c001001b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001001e:	89 02                	mov    DWORD PTR [edx],eax
c0010020:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0010023:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0010027:	ff d1                	call   ecx
c0010029:	83 c4 10             	add    esp,0x10
c001002c:	fb                   	sti    
c001002d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0010034:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0010038:	0f 84 a1 00 00 00    	je     c00100df <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c001003e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010041:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0010047:	84 c0                	test   al,al
c0010049:	75 28                	jne    c0010073 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c001004b:	fa                   	cli    
c001004c:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0010051:	40                   	inc    eax
c0010052:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0010057:	e8 f8 85 00 00       	call   c0018654 <schedule()>
c001005c:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0010061:	48                   	dec    eax
c0010062:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0010067:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c001006c:	85 c0                	test   eax,eax
c001006e:	75 ce                	jne    c001003e <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010070:	fb                   	sti    
c0010071:	eb cb                	jmp    c001003e <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010073:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0010076:	8d 50 01             	lea    edx,[eax+0x1]
c0010079:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001007c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001007f:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0010085:	88 10                	mov    BYTE PTR [eax],dl
c0010087:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001008a:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0010090:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0010093:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010096:	05 98 01 00 00       	add    eax,0x198
c001009b:	83 ec 0c             	sub    esp,0xc
c001009e:	50                   	push   eax
c001009f:	e8 fc 05 ff ff       	call   c00006a0 <strlen>
c00100a4:	83 c4 10             	add    esp,0x10
c00100a7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00100aa:	81 c2 98 01 00 00    	add    edx,0x198
c00100b0:	8d 4a 01             	lea    ecx,[edx+0x1]
c00100b3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00100b6:	81 c2 98 01 00 00    	add    edx,0x198
c00100bc:	83 ec 04             	sub    esp,0x4
c00100bf:	50                   	push   eax
c00100c0:	51                   	push   ecx
c00100c1:	52                   	push   edx
c00100c2:	e8 f5 04 ff ff       	call   c00005bc <memmove>
c00100c7:	83 c4 10             	add    esp,0x10
c00100ca:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00100cd:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00100d0:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00100d4:	0f 85 5a ff ff ff    	jne    c0010034 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c00100da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00100dd:	eb 03                	jmp    c00100e2 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c00100df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00100e2:	c9                   	leave  
c00100e3:	c3                   	ret    

c00100e4 <Keyboard::Keyboard(char const*)>:
c00100e4:	83 ec 0c             	sub    esp,0xc
c00100e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100eb:	83 ec 08             	sub    esp,0x8
c00100ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100f2:	50                   	push   eax
c00100f3:	e8 b2 e2 ff ff       	call   c000e3aa <Device::Device(char const*)>
c00100f8:	83 c4 10             	add    esp,0x10
c00100fb:	ba 78 4f 02 c0       	mov    edx,0xc0024f78
c0010100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010104:	89 10                	mov    DWORD PTR [eax],edx
c0010106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001010a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0010114:	c6 05 44 80 02 c0 01 	mov    BYTE PTR ds:0xc0028044,0x1
c001011b:	90                   	nop
c001011c:	83 c4 0c             	add    esp,0xc
c001011f:	c3                   	ret    

c0010120 <Keyboard::~Keyboard()>:
c0010120:	83 ec 0c             	sub    esp,0xc
c0010123:	ba 78 4f 02 c0       	mov    edx,0xc0024f78
c0010128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001012c:	89 10                	mov    DWORD PTR [eax],edx
c001012e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010132:	83 ec 0c             	sub    esp,0xc
c0010135:	50                   	push   eax
c0010136:	e8 39 df ff ff       	call   c000e074 <Device::~Device()>
c001013b:	83 c4 10             	add    esp,0x10
c001013e:	90                   	nop
c001013f:	83 c4 0c             	add    esp,0xc
c0010142:	c3                   	ret    
c0010143:	90                   	nop

c0010144 <Keyboard::~Keyboard()>:
c0010144:	83 ec 0c             	sub    esp,0xc
c0010147:	83 ec 0c             	sub    esp,0xc
c001014a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001014e:	e8 cd ff ff ff       	call   c0010120 <Keyboard::~Keyboard()>
c0010153:	83 c4 10             	add    esp,0x10
c0010156:	83 ec 08             	sub    esp,0x8
c0010159:	68 5c 01 00 00       	push   0x15c
c001015e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010162:	e8 b7 ca ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0010167:	83 c4 10             	add    esp,0x10
c001016a:	83 c4 0c             	add    esp,0xc
c001016d:	c3                   	ret    

c001016e <LogicalDisk::close(int, int, void*)>:
c001016e:	83 c8 ff             	or     eax,0xffffffff
c0010171:	c3                   	ret    

c0010172 <LogicalDisk::~LogicalDisk()>:
c0010172:	83 ec 0c             	sub    esp,0xc
c0010175:	ba f0 4f 02 c0       	mov    edx,0xc0024ff0
c001017a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001017e:	89 10                	mov    DWORD PTR [eax],edx
c0010180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010184:	83 ec 0c             	sub    esp,0xc
c0010187:	50                   	push   eax
c0010188:	e8 e7 de ff ff       	call   c000e074 <Device::~Device()>
c001018d:	83 c4 10             	add    esp,0x10
c0010190:	90                   	nop
c0010191:	83 c4 0c             	add    esp,0xc
c0010194:	c3                   	ret    
c0010195:	90                   	nop

c0010196 <LogicalDisk::~LogicalDisk()>:
c0010196:	83 ec 0c             	sub    esp,0xc
c0010199:	83 ec 0c             	sub    esp,0xc
c001019c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101a0:	e8 cd ff ff ff       	call   c0010172 <LogicalDisk::~LogicalDisk()>
c00101a5:	83 c4 10             	add    esp,0x10
c00101a8:	83 ec 08             	sub    esp,0x8
c00101ab:	68 74 01 00 00       	push   0x174
c00101b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101b4:	e8 65 ca ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00101b9:	83 c4 10             	add    esp,0x10
c00101bc:	83 c4 0c             	add    esp,0xc
c00101bf:	c3                   	ret    

c00101c0 <LogicalDisk::open(int, int, void*)>:
c00101c0:	83 ec 18             	sub    esp,0x18
c00101c3:	68 a4 4f 02 c0       	push   0xc0024fa4
c00101c8:	e8 22 47 00 00       	call   c00148ef <Krnl::panic(char const*)>
c00101cd:	83 c8 ff             	or     eax,0xffffffff
c00101d0:	83 c4 1c             	add    esp,0x1c
c00101d3:	c3                   	ret    

c00101d4 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00101d4:	53                   	push   ebx
c00101d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00101dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00101e1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00101e7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00101ed:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00101f3:	77 10                	ja     c0010205 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00101f5:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00101fb:	89 d3                	mov    ebx,edx
c00101fd:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0010203:	72 05                	jb     c001020a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0010205:	83 c8 ff             	or     eax,0xffffffff
c0010208:	89 c2                	mov    edx,eax
c001020a:	5b                   	pop    ebx
c001020b:	c3                   	ret    

c001020c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001020c:	56                   	push   esi
c001020d:	83 c8 ff             	or     eax,0xffffffff
c0010210:	53                   	push   ebx
c0010211:	89 c2                	mov    edx,eax
c0010213:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010217:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001021b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001021f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010225:	77 27                	ja     c001024e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0010227:	89 d8                	mov    eax,ebx
c0010229:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001022f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0010235:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001023a:	89 c2                	mov    edx,eax
c001023c:	73 10                	jae    c001024e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001023e:	89 c8                	mov    eax,ecx
c0010240:	89 da                	mov    edx,ebx
c0010242:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0010248:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001024e:	5b                   	pop    ebx
c001024f:	5e                   	pop    esi
c0010250:	c3                   	ret    
c0010251:	90                   	nop

c0010252 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0010252:	83 ec 1c             	sub    esp,0x1c
c0010255:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010259:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001025d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010261:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010265:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010269:	89 04 24             	mov    DWORD PTR [esp],eax
c001026c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010270:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010274:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010278:	83 ec 08             	sub    esp,0x8
c001027b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001027f:	50                   	push   eax
c0010280:	e8 25 e1 ff ff       	call   c000e3aa <Device::Device(char const*)>
c0010285:	83 c4 10             	add    esp,0x10
c0010288:	ba f0 4f 02 c0       	mov    edx,0xc0024ff0
c001028d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010291:	89 10                	mov    DWORD PTR [eax],edx
c0010293:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010297:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001029e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00102a2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00102a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00102ad:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00102b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00102bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00102bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102c3:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00102c9:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00102cf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00102d3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00102d6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00102da:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00102e0:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00102e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00102ea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00102ee:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00102f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00102f8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010302:	90                   	nop
c0010303:	83 c4 1c             	add    esp,0x1c
c0010306:	c3                   	ret    
c0010307:	90                   	nop

c0010308 <LogicalDisk::assignDriveLetter()>:
c0010308:	55                   	push   ebp
c0010309:	57                   	push   edi
c001030a:	56                   	push   esi
c001030b:	53                   	push   ebx
c001030c:	83 ec 14             	sub    esp,0x14
c001030f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010313:	8b 3d 80 84 02 c0    	mov    edi,DWORD PTR ds:0xc0028480
c0010319:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001031f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010323:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0010329:	8b 3d 84 84 02 c0    	mov    edi,DWORD PTR ds:0xc0028484
c001032f:	3c 01                	cmp    al,0x1
c0010331:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0010335:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010339:	19 c0                	sbb    eax,eax
c001033b:	83 e0 02             	and    eax,0x2
c001033e:	83 c0 41             	add    eax,0x41
c0010341:	0f be e8             	movsx  ebp,al
c0010344:	3c 43                	cmp    al,0x43
c0010346:	75 10                	jne    c0010358 <LogicalDisk::assignDriveLetter()+0x50>
c0010348:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001034f:	75 5d                	jne    c00103ae <LogicalDisk::assignDriveLetter()+0xa6>
c0010351:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0010356:	75 56                	jne    c00103ae <LogicalDisk::assignDriveLetter()+0xa6>
c0010358:	8d 75 bf             	lea    esi,[ebp-0x41]
c001035b:	ba 01 00 00 00       	mov    edx,0x1
c0010360:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010364:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0010368:	d3 e2                	shl    edx,cl
c001036a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001036e:	89 d7                	mov    edi,edx
c0010370:	89 d6                	mov    esi,edx
c0010372:	c1 ff 1f             	sar    edi,0x1f
c0010375:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0010379:	21 f9                	and    ecx,edi
c001037b:	09 d1                	or     ecx,edx
c001037d:	75 2f                	jne    c00103ae <LogicalDisk::assignDriveLetter()+0xa6>
c001037f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010383:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010387:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001038d:	09 f2                	or     edx,esi
c001038f:	89 15 80 84 02 c0    	mov    DWORD PTR ds:0xc0028480,edx
c0010395:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010399:	09 fa                	or     edx,edi
c001039b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001039f:	89 15 84 84 02 c0    	mov    DWORD PTR ds:0xc0028484,edx
c00103a5:	89 1c bd a0 84 02 c0 	mov    DWORD PTR [edi*4-0x3ffd7b60],ebx
c00103ac:	eb 08                	jmp    c00103b6 <LogicalDisk::assignDriveLetter()+0xae>
c00103ae:	45                   	inc    ebp
c00103af:	40                   	inc    eax
c00103b0:	3c 5b                	cmp    al,0x5b
c00103b2:	75 90                	jne    c0010344 <LogicalDisk::assignDriveLetter()+0x3c>
c00103b4:	31 c0                	xor    eax,eax
c00103b6:	83 c4 14             	add    esp,0x14
c00103b9:	5b                   	pop    ebx
c00103ba:	5e                   	pop    esi
c00103bb:	5f                   	pop    edi
c00103bc:	5d                   	pop    ebp
c00103bd:	c3                   	ret    

c00103be <LogicalDisk::mount()>:
c00103be:	56                   	push   esi
c00103bf:	53                   	push   ebx
c00103c0:	53                   	push   ebx
c00103c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00103c5:	8b 1d 14 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028014
c00103cb:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00103d5:	85 db                	test   ebx,ebx
c00103d7:	74 27                	je     c0010400 <LogicalDisk::mount()+0x42>
c00103d9:	51                   	push   ecx
c00103da:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00103e1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00103e3:	83 e8 41             	sub    eax,0x41
c00103e6:	50                   	push   eax
c00103e7:	56                   	push   esi
c00103e8:	53                   	push   ebx
c00103e9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00103ec:	83 c4 10             	add    esp,0x10
c00103ef:	84 c0                	test   al,al
c00103f1:	74 08                	je     c00103fb <LogicalDisk::mount()+0x3d>
c00103f3:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00103f9:	eb 07                	jmp    c0010402 <LogicalDisk::mount()+0x44>
c00103fb:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00103fe:	eb d5                	jmp    c00103d5 <LogicalDisk::mount()+0x17>
c0010400:	31 c0                	xor    eax,eax
c0010402:	5a                   	pop    edx
c0010403:	5b                   	pop    ebx
c0010404:	5e                   	pop    esi
c0010405:	c3                   	ret    

c0010406 <LogicalDisk::unmount()>:
c0010406:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001040a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010414:	c3                   	ret    
c0010415:	90                   	nop

c0010416 <LogicalDisk::eject()>:
c0010416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001041a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0010420:	8b 10                	mov    edx,DWORD PTR [eax]
c0010422:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010426:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0010429:	90                   	nop

c001042a <LogicalDisk::unassignDriveLetter()>:
c001042a:	57                   	push   edi
c001042b:	56                   	push   esi
c001042c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010430:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0010437:	84 c9                	test   cl,cl
c0010439:	75 0f                	jne    c001044a <LogicalDisk::unassignDriveLetter()+0x20>
c001043b:	c7 44 24 0c c8 4f 02 c0 	mov    DWORD PTR [esp+0xc],0xc0024fc8
c0010443:	5e                   	pop    esi
c0010444:	5f                   	pop    edi
c0010445:	e9 a5 44 00 00       	jmp    c00148ef <Krnl::panic(char const*)>
c001044a:	83 e9 41             	sub    ecx,0x41
c001044d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0010454:	b8 01 00 00 00       	mov    eax,0x1
c0010459:	c7 04 8d a0 84 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7b60],0x0
c0010464:	d3 e0                	shl    eax,cl
c0010466:	89 c7                	mov    edi,eax
c0010468:	f7 d0                	not    eax
c001046a:	c1 ff 1f             	sar    edi,0x1f
c001046d:	21 05 80 84 02 c0    	and    DWORD PTR ds:0xc0028480,eax
c0010473:	89 fe                	mov    esi,edi
c0010475:	f7 d6                	not    esi
c0010477:	21 35 84 84 02 c0    	and    DWORD PTR ds:0xc0028484,esi
c001047d:	5e                   	pop    esi
c001047e:	5f                   	pop    edi
c001047f:	c3                   	ret    

c0010480 <LogicalDisk::read(unsigned long long, int, void*)>:
c0010480:	57                   	push   edi
c0010481:	56                   	push   esi
c0010482:	53                   	push   ebx
c0010483:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010487:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001048b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001048f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010493:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010499:	77 41                	ja     c00104dc <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001049b:	99                   	cdq    
c001049c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00104a2:	01 c8                	add    eax,ecx
c00104a4:	11 da                	adc    edx,ebx
c00104a6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00104ac:	19 d7                	sbb    edi,edx
c00104ae:	72 33                	jb     c00104e3 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00104b0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00104b6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00104bc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00104c0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00104c4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00104ca:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00104d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104d4:	5b                   	pop    ebx
c00104d5:	5e                   	pop    esi
c00104d6:	5f                   	pop    edi
c00104d7:	e9 e2 0a 00 00       	jmp    c0010fbe <VCache::read(unsigned long long, int, void*)>
c00104dc:	b8 05 00 00 00       	mov    eax,0x5
c00104e1:	eb 05                	jmp    c00104e8 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00104e3:	b8 07 00 00 00       	mov    eax,0x7
c00104e8:	5b                   	pop    ebx
c00104e9:	5e                   	pop    esi
c00104ea:	5f                   	pop    edi
c00104eb:	c3                   	ret    

c00104ec <LogicalDisk::write(unsigned long long, int, void*)>:
c00104ec:	57                   	push   edi
c00104ed:	56                   	push   esi
c00104ee:	53                   	push   ebx
c00104ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00104f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00104f7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00104fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00104ff:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010505:	77 41                	ja     c0010548 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0010507:	99                   	cdq    
c0010508:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001050e:	01 c8                	add    eax,ecx
c0010510:	11 da                	adc    edx,ebx
c0010512:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010518:	19 d7                	sbb    edi,edx
c001051a:	72 33                	jb     c001054f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001051c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010522:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010528:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001052c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010530:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010536:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001053c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010540:	5b                   	pop    ebx
c0010541:	5e                   	pop    esi
c0010542:	5f                   	pop    edi
c0010543:	e9 7c 09 00 00       	jmp    c0010ec4 <VCache::write(unsigned long long, int, void*)>
c0010548:	b8 05 00 00 00       	mov    eax,0x5
c001054d:	eb 05                	jmp    c0010554 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001054f:	b8 07 00 00 00       	mov    eax,0x7
c0010554:	5b                   	pop    ebx
c0010555:	5e                   	pop    esi
c0010556:	5f                   	pop    edi
c0010557:	c3                   	ret    

c0010558 <Mouse::Mouse(char const*)>:
c0010558:	83 ec 0c             	sub    esp,0xc
c001055b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001055f:	83 ec 08             	sub    esp,0x8
c0010562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010566:	50                   	push   eax
c0010567:	e8 3e de ff ff       	call   c000e3aa <Device::Device(char const*)>
c001056c:	83 c4 10             	add    esp,0x10
c001056f:	ba 1c 50 02 c0       	mov    edx,0xc002501c
c0010574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010578:	89 10                	mov    DWORD PTR [eax],edx
c001057a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001057e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010588:	90                   	nop
c0010589:	83 c4 0c             	add    esp,0xc
c001058c:	c3                   	ret    
c001058d:	90                   	nop
c001058e:	66 90                	xchg   ax,ax

c0010590 <Mouse::~Mouse()>:
c0010590:	83 ec 0c             	sub    esp,0xc
c0010593:	ba 1c 50 02 c0       	mov    edx,0xc002501c
c0010598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001059c:	89 10                	mov    DWORD PTR [eax],edx
c001059e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105a2:	83 ec 0c             	sub    esp,0xc
c00105a5:	50                   	push   eax
c00105a6:	e8 c9 da ff ff       	call   c000e074 <Device::~Device()>
c00105ab:	83 c4 10             	add    esp,0x10
c00105ae:	90                   	nop
c00105af:	83 c4 0c             	add    esp,0xc
c00105b2:	c3                   	ret    
c00105b3:	90                   	nop

c00105b4 <Mouse::~Mouse()>:
c00105b4:	83 ec 0c             	sub    esp,0xc
c00105b7:	83 ec 0c             	sub    esp,0xc
c00105ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105be:	e8 cd ff ff ff       	call   c0010590 <Mouse::~Mouse()>
c00105c3:	83 c4 10             	add    esp,0x10
c00105c6:	83 ec 08             	sub    esp,0x8
c00105c9:	68 58 01 00 00       	push   0x158
c00105ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105d2:	e8 47 c6 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00105d7:	83 c4 10             	add    esp,0x10
c00105da:	83 c4 0c             	add    esp,0xc
c00105dd:	c3                   	ret    

c00105de <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00105de:	55                   	push   ebp
c00105df:	57                   	push   edi
c00105e0:	56                   	push   esi
c00105e1:	53                   	push   ebx
c00105e2:	81 ec 28 01 00 00    	sub    esp,0x128
c00105e8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00105ef:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00105f6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00105fd:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010604:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010608:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001060c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010613:	e8 8e de ff ff       	call   c000e4a6 <Device::getName()>
c0010618:	5a                   	pop    edx
c0010619:	59                   	pop    ecx
c001061a:	50                   	push   eax
c001061b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001061f:	55                   	push   ebp
c0010620:	e8 1b 01 ff ff       	call   c0000740 <strcpy>
c0010625:	5b                   	pop    ebx
c0010626:	58                   	pop    eax
c0010627:	68 40 50 02 c0       	push   0xc0025040
c001062c:	55                   	push   ebp
c001062d:	e8 4e 02 ff ff       	call   c0000880 <strcat>
c0010632:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010639:	e8 d1 93 ff ff       	call   c0009a0f <malloc>
c001063e:	83 c4 0c             	add    esp,0xc
c0010641:	89 c3                	mov    ebx,eax
c0010643:	57                   	push   edi
c0010644:	56                   	push   esi
c0010645:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010649:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001064d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010654:	55                   	push   ebp
c0010655:	50                   	push   eax
c0010656:	e8 f7 fb ff ff       	call   c0010252 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001065b:	83 c4 14             	add    esp,0x14
c001065e:	53                   	push   ebx
c001065f:	e8 a4 fc ff ff       	call   c0010308 <LogicalDisk::assignDriveLetter()>
c0010664:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010667:	e8 52 fd ff ff       	call   c00103be <LogicalDisk::mount()>
c001066c:	58                   	pop    eax
c001066d:	5a                   	pop    edx
c001066e:	53                   	push   ebx
c001066f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010676:	e8 2b db ff ff       	call   c000e1a6 <Device::addChild(Device*)>
c001067b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010681:	5b                   	pop    ebx
c0010682:	5e                   	pop    esi
c0010683:	5f                   	pop    edi
c0010684:	5d                   	pop    ebp
c0010685:	c3                   	ret    

c0010686 <createPartitionsForDisk(PhysicalDisk*)>:
c0010686:	55                   	push   ebp
c0010687:	57                   	push   edi
c0010688:	56                   	push   esi
c0010689:	53                   	push   ebx
c001068a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010690:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010697:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001069d:	3d 00 02 00 00       	cmp    eax,0x200
c00106a2:	74 27                	je     c00106cb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00106a4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00106aa:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00106b0:	83 ec 10             	sub    esp,0x10
c00106b3:	0f a4 f7 0a          	shld   edi,esi,0xa
c00106b7:	99                   	cdq    
c00106b8:	c1 e6 0a             	shl    esi,0xa
c00106bb:	52                   	push   edx
c00106bc:	89 fd                	mov    ebp,edi
c00106be:	50                   	push   eax
c00106bf:	55                   	push   ebp
c00106c0:	56                   	push   esi
c00106c1:	e8 de 1f 01 00       	call   c00226a4 <__udivdi3>
c00106c6:	e9 b1 00 00 00       	jmp    c001077c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00106cb:	83 ec 0c             	sub    esp,0xc
c00106ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106d0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00106d4:	56                   	push   esi
c00106d5:	6a 01                	push   0x1
c00106d7:	6a 00                	push   0x0
c00106d9:	6a 00                	push   0x0
c00106db:	53                   	push   ebx
c00106dc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00106df:	83 c4 20             	add    esp,0x20
c00106e2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00106ea:	75 0a                	jne    c00106f6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00106ec:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00106f4:	74 2c                	je     c0010722 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00106f6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00106fc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010702:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010708:	83 ec 10             	sub    esp,0x10
c001070b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001070f:	89 f7                	mov    edi,esi
c0010711:	c1 e0 0a             	shl    eax,0xa
c0010714:	c1 ff 1f             	sar    edi,0x1f
c0010717:	57                   	push   edi
c0010718:	56                   	push   esi
c0010719:	52                   	push   edx
c001071a:	50                   	push   eax
c001071b:	e8 84 1f 01 00       	call   c00226a4 <__udivdi3>
c0010720:	eb 5a                	jmp    c001077c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010722:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010729:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010730:	83 e1 7f             	and    ecx,0x7f
c0010733:	83 e0 7f             	and    eax,0x7f
c0010736:	01 c1                	add    ecx,eax
c0010738:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001073f:	83 e0 7f             	and    eax,0x7f
c0010742:	01 c1                	add    ecx,eax
c0010744:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001074b:	83 e0 7f             	and    eax,0x7f
c001074e:	00 c1                	add    cl,al
c0010750:	74 41                	je     c0010793 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0010752:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010758:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001075e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010764:	83 ec 10             	sub    esp,0x10
c0010767:	0f a4 c2 0a          	shld   edx,eax,0xa
c001076b:	89 f7                	mov    edi,esi
c001076d:	c1 e0 0a             	shl    eax,0xa
c0010770:	c1 ff 1f             	sar    edi,0x1f
c0010773:	57                   	push   edi
c0010774:	56                   	push   esi
c0010775:	52                   	push   edx
c0010776:	50                   	push   eax
c0010777:	e8 28 1f 01 00       	call   c00226a4 <__udivdi3>
c001077c:	83 c4 14             	add    esp,0x14
c001077f:	52                   	push   edx
c0010780:	50                   	push   eax
c0010781:	6a 00                	push   0x0
c0010783:	6a 00                	push   0x0
c0010785:	53                   	push   ebx
c0010786:	e8 53 fe ff ff       	call   c00105de <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001078b:	83 c4 20             	add    esp,0x20
c001078e:	e9 79 01 00 00       	jmp    c001090c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010793:	89 f0                	mov    eax,esi
c0010795:	31 f6                	xor    esi,esi
c0010797:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001079e:	75 02                	jne    c00107a2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00107a0:	89 f1                	mov    ecx,esi
c00107a2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00107a9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00107b0:	c1 e2 08             	shl    edx,0x8
c00107b3:	c1 e7 10             	shl    edi,0x10
c00107b6:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00107be:	09 fa                	or     edx,edi
c00107c0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00107c8:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00107cf:	83 c0 10             	add    eax,0x10
c00107d2:	09 fa                	or     edx,edi
c00107d4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00107db:	c1 e7 18             	shl    edi,0x18
c00107de:	09 fa                	or     edx,edi
c00107e0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00107e7:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00107eb:	c1 e7 10             	shl    edi,0x10
c00107ee:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00107f5:	c1 e2 08             	shl    edx,0x8
c00107f8:	09 fa                	or     edx,edi
c00107fa:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010801:	09 fa                	or     edx,edi
c0010803:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001080a:	c1 e7 18             	shl    edi,0x18
c001080d:	09 fa                	or     edx,edi
c001080f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0010813:	46                   	inc    esi
c0010814:	83 fe 04             	cmp    esi,0x4
c0010817:	0f 85 7a ff ff ff    	jne    c0010797 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001081d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010821:	83 f0 01             	xor    eax,0x1
c0010824:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010828:	75 57                	jne    c0010881 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001082a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001082e:	83 f0 01             	xor    eax,0x1
c0010831:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010835:	75 4a                	jne    c0010881 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010837:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001083b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0010843:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001084b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010851:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010857:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001085d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010861:	89 f7                	mov    edi,esi
c0010863:	c1 e0 0a             	shl    eax,0xa
c0010866:	c1 ff 1f             	sar    edi,0x1f
c0010869:	57                   	push   edi
c001086a:	56                   	push   esi
c001086b:	52                   	push   edx
c001086c:	50                   	push   eax
c001086d:	e8 32 1e 01 00       	call   c00226a4 <__udivdi3>
c0010872:	83 c4 10             	add    esp,0x10
c0010875:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010879:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001087d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010881:	84 c9                	test   cl,cl
c0010883:	74 53                	je     c00108d8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010885:	0f b6 c9             	movzx  ecx,cl
c0010888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010890:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010894:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010898:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001089c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00108a0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00108a4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00108a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00108ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00108b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00108b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108b8:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00108bc:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00108c0:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00108c4:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00108c8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00108cc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00108d0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00108d4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00108d8:	31 ed                	xor    ebp,ebp
c00108da:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00108de:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00108e2:	89 f8                	mov    eax,edi
c00108e4:	09 f0                	or     eax,esi
c00108e6:	74 1e                	je     c0010906 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00108e8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00108ec:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00108f0:	89 d1                	mov    ecx,edx
c00108f2:	09 c1                	or     ecx,eax
c00108f4:	74 10                	je     c0010906 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00108f6:	83 ec 0c             	sub    esp,0xc
c00108f9:	57                   	push   edi
c00108fa:	56                   	push   esi
c00108fb:	52                   	push   edx
c00108fc:	50                   	push   eax
c00108fd:	53                   	push   ebx
c00108fe:	e8 db fc ff ff       	call   c00105de <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010903:	83 c4 20             	add    esp,0x20
c0010906:	45                   	inc    ebp
c0010907:	83 fd 04             	cmp    ebp,0x4
c001090a:	75 ce                	jne    c00108da <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001090c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010912:	5b                   	pop    ebx
c0010913:	5e                   	pop    esi
c0010914:	5f                   	pop    edi
c0010915:	5d                   	pop    ebp
c0010916:	c3                   	ret    
c0010917:	90                   	nop

c0010918 <Serial::Serial(char const*)>:
c0010918:	83 ec 0c             	sub    esp,0xc
c001091b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001091f:	83 ec 08             	sub    esp,0x8
c0010922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010926:	50                   	push   eax
c0010927:	e8 7e da ff ff       	call   c000e3aa <Device::Device(char const*)>
c001092c:	83 c4 10             	add    esp,0x10
c001092f:	ba 54 50 02 c0       	mov    edx,0xc0025054
c0010934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010938:	89 10                	mov    DWORD PTR [eax],edx
c001093a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001093e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010948:	90                   	nop
c0010949:	83 c4 0c             	add    esp,0xc
c001094c:	c3                   	ret    
c001094d:	90                   	nop
c001094e:	66 90                	xchg   ax,ax

c0010950 <Serial::~Serial()>:
c0010950:	83 ec 0c             	sub    esp,0xc
c0010953:	ba 54 50 02 c0       	mov    edx,0xc0025054
c0010958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001095c:	89 10                	mov    DWORD PTR [eax],edx
c001095e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010962:	83 ec 0c             	sub    esp,0xc
c0010965:	50                   	push   eax
c0010966:	e8 09 d7 ff ff       	call   c000e074 <Device::~Device()>
c001096b:	83 c4 10             	add    esp,0x10
c001096e:	90                   	nop
c001096f:	83 c4 0c             	add    esp,0xc
c0010972:	c3                   	ret    
c0010973:	90                   	nop

c0010974 <Serial::~Serial()>:
c0010974:	83 ec 0c             	sub    esp,0xc
c0010977:	83 ec 0c             	sub    esp,0xc
c001097a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001097e:	e8 cd ff ff ff       	call   c0010950 <Serial::~Serial()>
c0010983:	83 c4 10             	add    esp,0x10
c0010986:	83 ec 08             	sub    esp,0x8
c0010989:	68 58 01 00 00       	push   0x158
c001098e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010992:	e8 87 c2 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0010997:	83 c4 10             	add    esp,0x10
c001099a:	83 c4 0c             	add    esp,0xc
c001099d:	c3                   	ret    
c001099e:	66 90                	xchg   ax,ax

c00109a0 <Timer::Timer(char const*)>:
c00109a0:	83 ec 0c             	sub    esp,0xc
c00109a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a7:	83 ec 08             	sub    esp,0x8
c00109aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109ae:	50                   	push   eax
c00109af:	e8 f6 d9 ff ff       	call   c000e3aa <Device::Device(char const*)>
c00109b4:	83 c4 10             	add    esp,0x10
c00109b7:	ba 98 50 02 c0       	mov    edx,0xc0025098
c00109bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c0:	89 10                	mov    DWORD PTR [eax],edx
c00109c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c6:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00109d0:	90                   	nop
c00109d1:	83 c4 0c             	add    esp,0xc
c00109d4:	c3                   	ret    
c00109d5:	90                   	nop
c00109d6:	66 90                	xchg   ax,ax

c00109d8 <Timer::~Timer()>:
c00109d8:	83 ec 0c             	sub    esp,0xc
c00109db:	ba 98 50 02 c0       	mov    edx,0xc0025098
c00109e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e4:	89 10                	mov    DWORD PTR [eax],edx
c00109e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ea:	83 ec 0c             	sub    esp,0xc
c00109ed:	50                   	push   eax
c00109ee:	e8 81 d6 ff ff       	call   c000e074 <Device::~Device()>
c00109f3:	83 c4 10             	add    esp,0x10
c00109f6:	90                   	nop
c00109f7:	83 c4 0c             	add    esp,0xc
c00109fa:	c3                   	ret    
c00109fb:	90                   	nop

c00109fc <Timer::~Timer()>:
c00109fc:	83 ec 0c             	sub    esp,0xc
c00109ff:	83 ec 0c             	sub    esp,0xc
c0010a02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a06:	e8 cd ff ff ff       	call   c00109d8 <Timer::~Timer()>
c0010a0b:	83 c4 10             	add    esp,0x10
c0010a0e:	83 ec 08             	sub    esp,0x8
c0010a11:	68 5c 01 00 00       	push   0x15c
c0010a16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a1a:	e8 ff c1 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0010a1f:	83 c4 10             	add    esp,0x10
c0010a22:	83 c4 0c             	add    esp,0xc
c0010a25:	c3                   	ret    

c0010a26 <Timer::read()>:
c0010a26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a2a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010a30:	c3                   	ret    

c0010a31 <timerHandler(unsigned int)>:
c0010a31:	56                   	push   esi
c0010a32:	53                   	push   ebx
c0010a33:	51                   	push   ecx
c0010a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a38:	01 05 0c 85 02 c0    	add    DWORD PTR ds:0xc002850c,eax
c0010a3e:	80 3d ed 7e 02 c0 00 	cmp    BYTE PTR ds:0xc0027eed,0x0
c0010a45:	0f 84 49 01 00 00    	je     c0010b94 <timerHandler(unsigned int)+0x163>
c0010a4b:	fa                   	cli    
c0010a4c:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c0010a52:	83 ec 0c             	sub    esp,0xc
c0010a55:	ff 05 04 94 02 c0    	inc    DWORD PTR ds:0xc0029404
c0010a5b:	68 18 94 02 c0       	push   0xc0029418
c0010a60:	e8 0f 22 01 00       	call   c0022c74 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010a65:	83 c4 10             	add    esp,0x10
c0010a68:	84 c0                	test   al,al
c0010a6a:	0f 85 a0 00 00 00    	jne    c0010b10 <timerHandler(unsigned int)+0xdf>
c0010a70:	83 ec 0c             	sub    esp,0xc
c0010a73:	68 18 94 02 c0       	push   0xc0029418
c0010a78:	e8 13 22 01 00       	call   c0022c90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010a7d:	83 c4 10             	add    esp,0x10
c0010a80:	89 c6                	mov    esi,eax
c0010a82:	66 90                	xchg   ax,ax
c0010a84:	83 ec 0c             	sub    esp,0xc
c0010a87:	68 18 94 02 c0       	push   0xc0029418
c0010a8c:	e8 ff 21 01 00       	call   c0022c90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010a91:	c7 04 24 18 94 02 c0 	mov    DWORD PTR [esp],0xc0029418
c0010a98:	89 c3                	mov    ebx,eax
c0010a9a:	e8 f9 21 01 00       	call   c0022c98 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0010a9f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010aa2:	83 c4 10             	add    esp,0x10
c0010aa5:	3b 05 0c 85 02 c0    	cmp    eax,DWORD PTR ds:0xc002850c
c0010aab:	77 23                	ja     c0010ad0 <timerHandler(unsigned int)+0x9f>
c0010aad:	83 ec 0c             	sub    esp,0xc
c0010ab0:	53                   	push   ebx
c0010ab1:	e8 5a 80 00 00       	call   c0018b10 <unblockTask(ThreadControlBlock*)>
c0010ab6:	83 c4 10             	add    esp,0x10
c0010ab9:	39 de                	cmp    esi,ebx
c0010abb:	75 27                	jne    c0010ae4 <timerHandler(unsigned int)+0xb3>
c0010abd:	83 ec 0c             	sub    esp,0xc
c0010ac0:	68 18 94 02 c0       	push   0xc0029418
c0010ac5:	e8 c6 21 01 00       	call   c0022c90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010aca:	89 c6                	mov    esi,eax
c0010acc:	eb 12                	jmp    c0010ae0 <timerHandler(unsigned int)+0xaf>
c0010ace:	66 90                	xchg   ax,ax
c0010ad0:	52                   	push   edx
c0010ad1:	52                   	push   edx
c0010ad2:	53                   	push   ebx
c0010ad3:	68 18 94 02 c0       	push   0xc0029418
c0010ad8:	e8 73 22 01 00       	call   c0022d50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0010add:	8d 76 00             	lea    esi,[esi+0x0]
c0010ae0:	83 c4 10             	add    esp,0x10
c0010ae3:	90                   	nop
c0010ae4:	83 ec 0c             	sub    esp,0xc
c0010ae7:	68 18 94 02 c0       	push   0xc0029418
c0010aec:	e8 83 21 01 00       	call   c0022c74 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010af1:	83 c4 10             	add    esp,0x10
c0010af4:	84 c0                	test   al,al
c0010af6:	75 18                	jne    c0010b10 <timerHandler(unsigned int)+0xdf>
c0010af8:	83 ec 0c             	sub    esp,0xc
c0010afb:	68 18 94 02 c0       	push   0xc0029418
c0010b00:	e8 8b 21 01 00       	call   c0022c90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010b05:	83 c4 10             	add    esp,0x10
c0010b08:	39 f0                	cmp    eax,esi
c0010b0a:	0f 85 74 ff ff ff    	jne    c0010a84 <timerHandler(unsigned int)+0x53>
c0010b10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b15:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010b19:	74 41                	je     c0010b5c <timerHandler(unsigned int)+0x12b>
c0010b1b:	80 3d ec 7e 02 c0 00 	cmp    BYTE PTR ds:0xc0027eec,0x0
c0010b22:	74 38                	je     c0010b5c <timerHandler(unsigned int)+0x12b>
c0010b24:	fa                   	cli    
c0010b25:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c0010b2b:	a1 0c 85 02 c0       	mov    eax,ds:0xc002850c
c0010b30:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010b36:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010b39:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010b3f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c0010b42:	72 08                	jb     c0010b4c <timerHandler(unsigned int)+0x11b>
c0010b44:	e8 0b 7b 00 00       	call   c0018654 <schedule()>
c0010b49:	8d 76 00             	lea    esi,[esi+0x0]
c0010b4c:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0010b51:	48                   	dec    eax
c0010b52:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0010b57:	75 03                	jne    c0010b5c <timerHandler(unsigned int)+0x12b>
c0010b59:	fb                   	sti    
c0010b5a:	66 90                	xchg   ax,ax
c0010b5c:	a1 04 94 02 c0       	mov    eax,ds:0xc0029404
c0010b61:	48                   	dec    eax
c0010b62:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c0010b67:	75 1b                	jne    c0010b84 <timerHandler(unsigned int)+0x153>
c0010b69:	83 3d 00 94 02 c0 00 	cmp    DWORD PTR ds:0xc0029400,0x0
c0010b70:	74 12                	je     c0010b84 <timerHandler(unsigned int)+0x153>
c0010b72:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c0010b7c:	e8 d3 7a 00 00       	call   c0018654 <schedule()>
c0010b81:	8d 76 00             	lea    esi,[esi+0x0]
c0010b84:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0010b89:	48                   	dec    eax
c0010b8a:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0010b8f:	75 03                	jne    c0010b94 <timerHandler(unsigned int)+0x163>
c0010b91:	fb                   	sti    
c0010b92:	66 90                	xchg   ax,ax
c0010b94:	58                   	pop    eax
c0010b95:	5b                   	pop    ebx
c0010b96:	5e                   	pop    esi
c0010b97:	c3                   	ret    

c0010b98 <setupTimer(int)>:
c0010b98:	57                   	push   edi
c0010b99:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c0010b9e:	56                   	push   esi
c0010b9f:	53                   	push   ebx
c0010ba0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010ba4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010baa:	83 ec 0c             	sub    esp,0xc
c0010bad:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010bb3:	e8 ee d8 ff ff       	call   c000e4a6 <Device::getName()>
c0010bb8:	83 c4 10             	add    esp,0x10
c0010bbb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010bbe:	0f 85 94 00 00 00    	jne    c0010c58 <setupTimer(int)+0xc0>
c0010bc4:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c0010bc9:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0010bd0:	0f 84 82 00 00 00    	je     c0010c58 <setupTimer(int)+0xc0>
c0010bd6:	83 ec 0c             	sub    esp,0xc
c0010bd9:	68 5c 01 00 00       	push   0x15c
c0010bde:	e8 2c 8e ff ff       	call   c0009a0f <malloc>
c0010be3:	89 04 24             	mov    DWORD PTR [esp],eax
c0010be6:	89 c3                	mov    ebx,eax
c0010be8:	e8 8b 16 01 00       	call   c0022278 <PIT::PIT()>
c0010bed:	59                   	pop    ecx
c0010bee:	5f                   	pop    edi
c0010bef:	53                   	push   ebx
c0010bf0:	ff 35 e8 7e 02 c0    	push   DWORD PTR ds:0xc0027ee8
c0010bf6:	e8 ab d5 ff ff       	call   c000e1a6 <Device::addChild(Device*)>
c0010bfb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010bfd:	6a 00                	push   0x0
c0010bff:	6a 00                	push   0x0
c0010c01:	56                   	push   esi
c0010c02:	53                   	push   ebx
c0010c03:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010c06:	83 c4 14             	add    esp,0x14
c0010c09:	68 60 01 00 00       	push   0x160
c0010c0e:	e8 fc 8d ff ff       	call   c0009a0f <malloc>
c0010c13:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c16:	89 c7                	mov    edi,eax
c0010c18:	e8 0f 15 01 00       	call   c002212c <APICTimer::APICTimer()>
c0010c1d:	6a 00                	push   0x0
c0010c1f:	6a 00                	push   0x0
c0010c21:	56                   	push   esi
c0010c22:	57                   	push   edi
c0010c23:	e8 04 14 01 00       	call   c002202c <APICTimer::open(int, int, void*)>
c0010c28:	83 c4 20             	add    esp,0x20
c0010c2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c2d:	6a 00                	push   0x0
c0010c2f:	6a 00                	push   0x0
c0010c31:	6a 00                	push   0x0
c0010c33:	53                   	push   ebx
c0010c34:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010c37:	58                   	pop    eax
c0010c38:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c0010c3d:	5a                   	pop    edx
c0010c3e:	57                   	push   edi
c0010c3f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c45:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010c4b:	e8 56 d5 ff ff       	call   c000e1a6 <Device::addChild(Device*)>
c0010c50:	83 c4 10             	add    esp,0x10
c0010c53:	eb 37                	jmp    c0010c8c <setupTimer(int)+0xf4>
c0010c55:	8d 76 00             	lea    esi,[esi+0x0]
c0010c58:	83 ec 0c             	sub    esp,0xc
c0010c5b:	68 5c 01 00 00       	push   0x15c
c0010c60:	e8 aa 8d ff ff       	call   c0009a0f <malloc>
c0010c65:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c68:	89 c3                	mov    ebx,eax
c0010c6a:	e8 09 16 01 00       	call   c0022278 <PIT::PIT()>
c0010c6f:	58                   	pop    eax
c0010c70:	5a                   	pop    edx
c0010c71:	53                   	push   ebx
c0010c72:	ff 35 e8 7e 02 c0    	push   DWORD PTR ds:0xc0027ee8
c0010c78:	e8 29 d5 ff ff       	call   c000e1a6 <Device::addChild(Device*)>
c0010c7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c7f:	6a 00                	push   0x0
c0010c81:	6a 00                	push   0x0
c0010c83:	56                   	push   esi
c0010c84:	53                   	push   ebx
c0010c85:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010c88:	83 c4 20             	add    esp,0x20
c0010c8b:	90                   	nop
c0010c8c:	89 d8                	mov    eax,ebx
c0010c8e:	5b                   	pop    ebx
c0010c8f:	5e                   	pop    esi
c0010c90:	5f                   	pop    edi
c0010c91:	c3                   	ret    
c0010c92:	66 90                	xchg   ax,ax

c0010c94 <VCache::VCache(PhysicalDisk*)>:
c0010c94:	53                   	push   ebx
c0010c95:	83 ec 18             	sub    esp,0x18
c0010c98:	ba c8 50 02 c0       	mov    edx,0xc00250c8
c0010c9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ca1:	89 10                	mov    DWORD PTR [eax],edx
c0010ca3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ca7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0010cae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cb2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0010cb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cbd:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0010cc4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0010ccb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ccf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0010cd6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010cdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ce1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0010ce8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cec:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010cf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cf4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0010cfb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010d02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d06:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d0e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010d12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d16:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010d1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d1e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010d25:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010d2d:	83 ec 0c             	sub    esp,0xc
c0010d30:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010d34:	e8 d6 8c ff ff       	call   c0009a0f <malloc>
c0010d39:	83 c4 10             	add    esp,0x10
c0010d3c:	89 c3                	mov    ebx,eax
c0010d3e:	83 ec 0c             	sub    esp,0xc
c0010d41:	53                   	push   ebx
c0010d42:	e8 dd 76 00 00       	call   c0018424 <Mutex::Mutex()>
c0010d47:	83 c4 10             	add    esp,0x10
c0010d4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d4e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010d51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d55:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010d59:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010d5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d60:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010d67:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010d6b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010d71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d75:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010d78:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010d7c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010d82:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010d88:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010d8c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010d8f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010d92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d96:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010d9a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010d9e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010da4:	05 00 01 00 00       	add    eax,0x100
c0010da9:	c1 e0 04             	shl    eax,0x4
c0010dac:	83 ec 0c             	sub    esp,0xc
c0010daf:	50                   	push   eax
c0010db0:	e8 5a 8c ff ff       	call   c0009a0f <malloc>
c0010db5:	83 c4 10             	add    esp,0x10
c0010db8:	89 c2                	mov    edx,eax
c0010dba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dbe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010dc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dc5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010dcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dd0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010dd4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010dd8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010dde:	c1 e0 06             	shl    eax,0x6
c0010de1:	83 ec 0c             	sub    esp,0xc
c0010de4:	50                   	push   eax
c0010de5:	e8 25 8c ff ff       	call   c0009a0f <malloc>
c0010dea:	83 c4 10             	add    esp,0x10
c0010ded:	89 c2                	mov    edx,eax
c0010def:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010df3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010df6:	90                   	nop
c0010df7:	83 c4 18             	add    esp,0x18
c0010dfa:	5b                   	pop    ebx
c0010dfb:	c3                   	ret    

c0010dfc <VCache::invalidateReadBuffer()>:
c0010dfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e00:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010e06:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010e0a:	c3                   	ret    
c0010e0b:	90                   	nop

c0010e0c <VCache::writeWriteBuffer()>:
c0010e0c:	53                   	push   ebx
c0010e0d:	83 ec 14             	sub    esp,0x14
c0010e10:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010e14:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010e17:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e19:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010e1c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010e1f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010e22:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010e25:	50                   	push   eax
c0010e26:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010e29:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010e30:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010e37:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010e3b:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010e42:	83 c4 28             	add    esp,0x28
c0010e45:	5b                   	pop    ebx
c0010e46:	c3                   	ret    
c0010e47:	90                   	nop

c0010e48 <VCache::~VCache()>:
c0010e48:	83 ec 0c             	sub    esp,0xc
c0010e4b:	ba c8 50 02 c0       	mov    edx,0xc00250c8
c0010e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e54:	89 10                	mov    DWORD PTR [eax],edx
c0010e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e5a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010e5d:	84 c0                	test   al,al
c0010e5f:	74 0f                	je     c0010e70 <VCache::~VCache()+0x28>
c0010e61:	83 ec 0c             	sub    esp,0xc
c0010e64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e68:	e8 9f ff ff ff       	call   c0010e0c <VCache::writeWriteBuffer()>
c0010e6d:	83 c4 10             	add    esp,0x10
c0010e70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e74:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010e77:	83 ec 0c             	sub    esp,0xc
c0010e7a:	50                   	push   eax
c0010e7b:	e8 9f 8b ff ff       	call   c0009a1f <free>
c0010e80:	83 c4 10             	add    esp,0x10
c0010e83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e87:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010e8a:	83 ec 0c             	sub    esp,0xc
c0010e8d:	50                   	push   eax
c0010e8e:	e8 8c 8b ff ff       	call   c0009a1f <free>
c0010e93:	83 c4 10             	add    esp,0x10
c0010e96:	90                   	nop
c0010e97:	83 c4 0c             	add    esp,0xc
c0010e9a:	c3                   	ret    
c0010e9b:	90                   	nop

c0010e9c <VCache::~VCache()>:
c0010e9c:	83 ec 0c             	sub    esp,0xc
c0010e9f:	83 ec 0c             	sub    esp,0xc
c0010ea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ea6:	e8 9d ff ff ff       	call   c0010e48 <VCache::~VCache()>
c0010eab:	83 c4 10             	add    esp,0x10
c0010eae:	83 ec 08             	sub    esp,0x8
c0010eb1:	6a 44                	push   0x44
c0010eb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010eb7:	e8 62 bd ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0010ebc:	83 c4 10             	add    esp,0x10
c0010ebf:	83 c4 0c             	add    esp,0xc
c0010ec2:	c3                   	ret    
c0010ec3:	90                   	nop

c0010ec4 <VCache::write(unsigned long long, int, void*)>:
c0010ec4:	55                   	push   ebp
c0010ec5:	31 c0                	xor    eax,eax
c0010ec7:	57                   	push   edi
c0010ec8:	56                   	push   esi
c0010ec9:	53                   	push   ebx
c0010eca:	83 ec 0c             	sub    esp,0xc
c0010ecd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010ed1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010ed5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0010edc:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010ee0:	7d 1a                	jge    c0010efc <VCache::write(unsigned long long, int, void*)+0x38>
c0010ee2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010ee5:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010eeb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010eef:	0f af c8             	imul   ecx,eax
c0010ef2:	01 ca                	add    edx,ecx
c0010ef4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010ef6:	40                   	inc    eax
c0010ef7:	eb e3                	jmp    c0010edc <VCache::write(unsigned long long, int, void*)+0x18>
c0010ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0010efc:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010f00:	74 0a                	je     c0010f0c <VCache::write(unsigned long long, int, void*)+0x48>
c0010f02:	53                   	push   ebx
c0010f03:	e8 f4 fe ff ff       	call   c0010dfc <VCache::invalidateReadBuffer()>
c0010f08:	58                   	pop    eax
c0010f09:	8d 76 00             	lea    esi,[esi+0x0]
c0010f0c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010f10:	74 5e                	je     c0010f70 <VCache::write(unsigned long long, int, void*)+0xac>
c0010f12:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0010f15:	89 e8                	mov    eax,ebp
c0010f17:	99                   	cdq    
c0010f18:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0010f1b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010f1e:	89 c1                	mov    ecx,eax
c0010f20:	89 d0                	mov    eax,edx
c0010f22:	31 f1                	xor    ecx,esi
c0010f24:	31 f8                	xor    eax,edi
c0010f26:	09 c1                	or     ecx,eax
c0010f28:	75 3a                	jne    c0010f64 <VCache::write(unsigned long long, int, void*)+0xa0>
c0010f2a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0010f2f:	75 33                	jne    c0010f64 <VCache::write(unsigned long long, int, void*)+0xa0>
c0010f31:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010f34:	89 ef                	mov    edi,ebp
c0010f36:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010f3c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010f40:	0f af f9             	imul   edi,ecx
c0010f43:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0010f46:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f48:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010f4b:	40                   	inc    eax
c0010f4c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010f4f:	83 f8 40             	cmp    eax,0x40
c0010f52:	75 60                	jne    c0010fb4 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010f54:	83 ec 0c             	sub    esp,0xc
c0010f57:	53                   	push   ebx
c0010f58:	e8 af fe ff ff       	call   c0010e0c <VCache::writeWriteBuffer()>
c0010f5d:	83 c4 10             	add    esp,0x10
c0010f60:	eb 52                	jmp    c0010fb4 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010f62:	66 90                	xchg   ax,ax
c0010f64:	83 ec 0c             	sub    esp,0xc
c0010f67:	53                   	push   ebx
c0010f68:	e8 9f fe ff ff       	call   c0010e0c <VCache::writeWriteBuffer()>
c0010f6d:	83 c4 10             	add    esp,0x10
c0010f70:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010f73:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0010f78:	7f 22                	jg     c0010f9c <VCache::write(unsigned long long, int, void*)+0xd8>
c0010f7a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0010f7d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0010f80:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010f84:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0010f88:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0010f8b:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010f8e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010f94:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010f98:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f9a:	eb 18                	jmp    c0010fb4 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010f9c:	83 ec 0c             	sub    esp,0xc
c0010f9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010fa1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010fa5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010fa9:	57                   	push   edi
c0010faa:	56                   	push   esi
c0010fab:	50                   	push   eax
c0010fac:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010faf:	83 c4 20             	add    esp,0x20
c0010fb2:	66 90                	xchg   ax,ax
c0010fb4:	83 c4 0c             	add    esp,0xc
c0010fb7:	31 c0                	xor    eax,eax
c0010fb9:	5b                   	pop    ebx
c0010fba:	5e                   	pop    esi
c0010fbb:	5f                   	pop    edi
c0010fbc:	5d                   	pop    ebp
c0010fbd:	c3                   	ret    

c0010fbe <VCache::read(unsigned long long, int, void*)>:
c0010fbe:	55                   	push   ebp
c0010fbf:	31 c0                	xor    eax,eax
c0010fc1:	57                   	push   edi
c0010fc2:	56                   	push   esi
c0010fc3:	53                   	push   ebx
c0010fc4:	83 ec 1c             	sub    esp,0x1c
c0010fc7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010fcb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010fcf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0010fd3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010fd7:	90                   	nop
c0010fd8:	39 e8                	cmp    eax,ebp
c0010fda:	7d 18                	jge    c0010ff4 <VCache::read(unsigned long long, int, void*)+0x36>
c0010fdc:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010fdf:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010fe5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010fe9:	0f af c8             	imul   ecx,eax
c0010fec:	01 ca                	add    edx,ecx
c0010fee:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010ff0:	40                   	inc    eax
c0010ff1:	eb e5                	jmp    c0010fd8 <VCache::read(unsigned long long, int, void*)+0x1a>
c0010ff3:	90                   	nop
c0010ff4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010ff8:	74 0e                	je     c0011008 <VCache::read(unsigned long long, int, void*)+0x4a>
c0010ffa:	83 ec 0c             	sub    esp,0xc
c0010ffd:	53                   	push   ebx
c0010ffe:	e8 09 fe ff ff       	call   c0010e0c <VCache::writeWriteBuffer()>
c0011003:	83 c4 10             	add    esp,0x10
c0011006:	66 90                	xchg   ax,ax
c0011008:	83 fd 01             	cmp    ebp,0x1
c001100b:	0f 85 87 00 00 00    	jne    c0011098 <VCache::read(unsigned long long, int, void*)+0xda>
c0011011:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011014:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011018:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001101f:	75 77                	jne    c0011098 <VCache::read(unsigned long long, int, void*)+0xda>
c0011021:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0011024:	89 e9                	mov    ecx,ebp
c0011026:	f7 d9                	neg    ecx
c0011028:	89 c8                	mov    eax,ecx
c001102a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001102e:	c1 f8 1f             	sar    eax,0x1f
c0011031:	21 f1                	and    ecx,esi
c0011033:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011037:	89 c8                	mov    eax,ecx
c0011039:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001103d:	21 f9                	and    ecx,edi
c001103f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0011043:	89 ca                	mov    edx,ecx
c0011045:	74 0d                	je     c0011054 <VCache::read(unsigned long long, int, void*)+0x96>
c0011047:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001104a:	75 08                	jne    c0011054 <VCache::read(unsigned long long, int, void*)+0x96>
c001104c:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001104f:	74 27                	je     c0011078 <VCache::read(unsigned long long, int, void*)+0xba>
c0011051:	8d 76 00             	lea    esi,[esi+0x0]
c0011054:	83 ec 0c             	sub    esp,0xc
c0011057:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001105b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001105f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0011062:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0011065:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0011067:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001106a:	55                   	push   ebp
c001106b:	52                   	push   edx
c001106c:	50                   	push   eax
c001106d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011071:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0011074:	83 c4 20             	add    esp,0x20
c0011077:	90                   	nop
c0011078:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001107b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001107f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011085:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0011088:	48                   	dec    eax
c0011089:	21 c6                	and    esi,eax
c001108b:	0f af f1             	imul   esi,ecx
c001108e:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0011091:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011093:	eb 23                	jmp    c00110b8 <VCache::read(unsigned long long, int, void*)+0xfa>
c0011095:	8d 76 00             	lea    esi,[esi+0x0]
c0011098:	83 ec 0c             	sub    esp,0xc
c001109b:	53                   	push   ebx
c001109c:	e8 5b fd ff ff       	call   c0010dfc <VCache::invalidateReadBuffer()>
c00110a1:	5a                   	pop    edx
c00110a2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00110a5:	8b 10                	mov    edx,DWORD PTR [eax]
c00110a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00110ab:	55                   	push   ebp
c00110ac:	57                   	push   edi
c00110ad:	56                   	push   esi
c00110ae:	50                   	push   eax
c00110af:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00110b2:	83 c4 20             	add    esp,0x20
c00110b5:	8d 76 00             	lea    esi,[esi+0x0]
c00110b8:	83 c4 1c             	add    esp,0x1c
c00110bb:	31 c0                	xor    eax,eax
c00110bd:	5b                   	pop    ebx
c00110be:	5e                   	pop    esi
c00110bf:	5f                   	pop    edi
c00110c0:	5d                   	pop    ebp
c00110c1:	c3                   	ret    

c00110c2 <Video::putrect(int, int, int, int, unsigned int)>:
c00110c2:	55                   	push   ebp
c00110c3:	57                   	push   edi
c00110c4:	56                   	push   esi
c00110c5:	53                   	push   ebx
c00110c6:	83 ec 1c             	sub    esp,0x1c
c00110c9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00110cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00110d1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00110d5:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00110d9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00110dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00110e1:	01 df                	add    edi,ebx
c00110e3:	39 fb                	cmp    ebx,edi
c00110e5:	7d 1f                	jge    c0011106 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00110e7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00110eb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00110ef:	7d 12                	jge    c0011103 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00110f1:	8b 16                	mov    edx,DWORD PTR [esi]
c00110f3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00110f7:	53                   	push   ebx
c00110f8:	55                   	push   ebp
c00110f9:	45                   	inc    ebp
c00110fa:	56                   	push   esi
c00110fb:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00110fe:	83 c4 10             	add    esp,0x10
c0011101:	eb e8                	jmp    c00110eb <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0011103:	43                   	inc    ebx
c0011104:	eb dd                	jmp    c00110e3 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0011106:	83 c4 1c             	add    esp,0x1c
c0011109:	5b                   	pop    ebx
c001110a:	5e                   	pop    esi
c001110b:	5f                   	pop    edi
c001110c:	5d                   	pop    ebp
c001110d:	c3                   	ret    

c001110e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001110e:	55                   	push   ebp
c001110f:	57                   	push   edi
c0011110:	31 ff                	xor    edi,edi
c0011112:	56                   	push   esi
c0011113:	53                   	push   ebx
c0011114:	83 ec 1c             	sub    esp,0x1c
c0011117:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001111b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001111f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0011126:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001112b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001112f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0011133:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011137:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001113a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001113e:	01 f9                	add    ecx,edi
c0011140:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0011144:	7d 2f                	jge    c0011175 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0011146:	31 f6                	xor    esi,esi
c0011148:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001114c:	01 f2                	add    edx,esi
c001114e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0011152:	7d 1a                	jge    c001116e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0011154:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011157:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001115a:	46                   	inc    esi
c001115b:	51                   	push   ecx
c001115c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011160:	52                   	push   edx
c0011161:	55                   	push   ebp
c0011162:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011165:	83 c4 10             	add    esp,0x10
c0011168:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001116c:	eb da                	jmp    c0011148 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001116e:	47                   	inc    edi
c001116f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0011173:	eb c5                	jmp    c001113a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0011175:	83 c4 1c             	add    esp,0x1c
c0011178:	5b                   	pop    ebx
c0011179:	5e                   	pop    esi
c001117a:	5f                   	pop    edi
c001117b:	5d                   	pop    ebp
c001117c:	c3                   	ret    
c001117d:	90                   	nop

c001117e <Video::blit(unsigned int*, int, int, int, int)>:
c001117e:	55                   	push   ebp
c001117f:	57                   	push   edi
c0011180:	56                   	push   esi
c0011181:	53                   	push   ebx
c0011182:	83 ec 1c             	sub    esp,0x1c
c0011185:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011189:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001118d:	85 c0                	test   eax,eax
c001118f:	79 02                	jns    c0011193 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0011191:	31 c0                	xor    eax,eax
c0011193:	c1 e0 02             	shl    eax,0x2
c0011196:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001119a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001119e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00111a2:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00111a6:	39 d8                	cmp    eax,ebx
c00111a8:	7e 49                	jle    c00111f3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00111aa:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00111b0:	7c 41                	jl     c00111f3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00111b2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00111b6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00111ba:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00111be:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00111c2:	39 f9                	cmp    ecx,edi
c00111c4:	7e 22                	jle    c00111e8 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00111c6:	83 c5 04             	add    ebp,0x4
c00111c9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00111cf:	7c 14                	jl     c00111e5 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00111d1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00111d3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00111d6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00111da:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00111de:	56                   	push   esi
c00111df:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00111e2:	83 c4 10             	add    esp,0x10
c00111e5:	47                   	inc    edi
c00111e6:	eb d2                	jmp    c00111ba <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00111e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111ec:	43                   	inc    ebx
c00111ed:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00111f1:	eb ab                	jmp    c001119e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00111f3:	83 c4 1c             	add    esp,0x1c
c00111f6:	5b                   	pop    ebx
c00111f7:	5e                   	pop    esi
c00111f8:	5f                   	pop    edi
c00111f9:	5d                   	pop    ebp
c00111fa:	c3                   	ret    
c00111fb:	90                   	nop

c00111fc <Video::clearScreen(unsigned int)>:
c00111fc:	57                   	push   edi
c00111fd:	56                   	push   esi
c00111fe:	53                   	push   ebx
c00111ff:	31 db                	xor    ebx,ebx
c0011201:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011205:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001120b:	7e 1f                	jle    c001122c <Video::clearScreen(unsigned int)+0x30>
c001120d:	31 ff                	xor    edi,edi
c001120f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0011215:	7e 12                	jle    c0011229 <Video::clearScreen(unsigned int)+0x2d>
c0011217:	8b 06                	mov    eax,DWORD PTR [esi]
c0011219:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001121d:	53                   	push   ebx
c001121e:	57                   	push   edi
c001121f:	47                   	inc    edi
c0011220:	56                   	push   esi
c0011221:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011224:	83 c4 10             	add    esp,0x10
c0011227:	eb e6                	jmp    c001120f <Video::clearScreen(unsigned int)+0x13>
c0011229:	43                   	inc    ebx
c001122a:	eb d9                	jmp    c0011205 <Video::clearScreen(unsigned int)+0x9>
c001122c:	5b                   	pop    ebx
c001122d:	5e                   	pop    esi
c001122e:	5f                   	pop    edi
c001122f:	c3                   	ret    

c0011230 <Video::putpixel(int, int, unsigned int)>:
c0011230:	c7 44 24 04 d0 50 02 c0 	mov    DWORD PTR [esp+0x4],0xc00250d0
c0011238:	e9 b2 36 00 00       	jmp    c00148ef <Krnl::panic(char const*)>
c001123d:	90                   	nop

c001123e <Video::Video(char const*)>:
c001123e:	83 ec 0c             	sub    esp,0xc
c0011241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011245:	83 ec 08             	sub    esp,0x8
c0011248:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001124c:	50                   	push   eax
c001124d:	e8 58 d1 ff ff       	call   c000e3aa <Device::Device(char const*)>
c0011252:	83 c4 10             	add    esp,0x10
c0011255:	ba 40 51 02 c0       	mov    edx,0xc0025140
c001125a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001125e:	89 10                	mov    DWORD PTR [eax],edx
c0011260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011264:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001126e:	90                   	nop
c001126f:	83 c4 0c             	add    esp,0xc
c0011272:	c3                   	ret    
c0011273:	90                   	nop

c0011274 <Video::~Video()>:
c0011274:	83 ec 0c             	sub    esp,0xc
c0011277:	ba 40 51 02 c0       	mov    edx,0xc0025140
c001127c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011280:	89 10                	mov    DWORD PTR [eax],edx
c0011282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011286:	83 ec 0c             	sub    esp,0xc
c0011289:	50                   	push   eax
c001128a:	e8 e5 cd ff ff       	call   c000e074 <Device::~Device()>
c001128f:	83 c4 10             	add    esp,0x10
c0011292:	90                   	nop
c0011293:	83 c4 0c             	add    esp,0xc
c0011296:	c3                   	ret    
c0011297:	90                   	nop

c0011298 <Video::~Video()>:
c0011298:	83 ec 0c             	sub    esp,0xc
c001129b:	83 ec 0c             	sub    esp,0xc
c001129e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112a2:	e8 cd ff ff ff       	call   c0011274 <Video::~Video()>
c00112a7:	83 c4 10             	add    esp,0x10
c00112aa:	83 ec 08             	sub    esp,0x8
c00112ad:	68 64 01 00 00       	push   0x164
c00112b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112b6:	e8 63 b9 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00112bb:	83 c4 10             	add    esp,0x10
c00112be:	83 c4 0c             	add    esp,0xc
c00112c1:	c3                   	ret    

c00112c2 <Video::isMonochrome()>:
c00112c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112c6:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00112cc:	c3                   	ret    
c00112cd:	90                   	nop

c00112ce <Video::getWidth()>:
c00112ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112d2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00112d8:	c3                   	ret    
c00112d9:	90                   	nop

c00112da <Video::getHeight()>:
c00112da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112de:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00112e4:	c3                   	ret    
c00112e5:	90                   	nop

c00112e6 <Video::drawCursor(int, int, unsigned char*, int)>:
c00112e6:	55                   	push   ebp
c00112e7:	57                   	push   edi
c00112e8:	56                   	push   esi
c00112e9:	53                   	push   ebx
c00112ea:	83 ec 2c             	sub    esp,0x2c
c00112ed:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00112f1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00112f5:	83 f8 01             	cmp    eax,0x1
c00112f8:	19 c9                	sbb    ecx,ecx
c00112fa:	31 db                	xor    ebx,ebx
c00112fc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0011300:	89 cd                	mov    ebp,ecx
c0011302:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001130a:	f7 d5                	not    ebp
c001130c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0011312:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011316:	01 d8                	add    eax,ebx
c0011318:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001131c:	56                   	push   esi
c001131d:	e8 b8 ff ff ff       	call   c00112da <Video::getHeight()>
c0011322:	59                   	pop    ecx
c0011323:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0011327:	7e 70                	jle    c0011399 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0011329:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001132d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011331:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0011334:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011338:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001133c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0011343:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011347:	89 f8                	mov    eax,edi
c0011349:	83 c0 20             	add    eax,0x20
c001134c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011350:	56                   	push   esi
c0011351:	e8 78 ff ff ff       	call   c00112ce <Video::getWidth()>
c0011356:	5a                   	pop    edx
c0011357:	39 c7                	cmp    edi,eax
c0011359:	7d 34                	jge    c001138f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001135b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0011360:	74 05                	je     c0011367 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0011362:	8b 06                	mov    eax,DWORD PTR [esi]
c0011364:	55                   	push   ebp
c0011365:	eb 0d                	jmp    c0011374 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0011367:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001136c:	74 12                	je     c0011380 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001136e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011370:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011374:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011378:	57                   	push   edi
c0011379:	56                   	push   esi
c001137a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001137d:	83 c4 10             	add    esp,0x10
c0011380:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0011384:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0011388:	47                   	inc    edi
c0011389:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001138d:	75 c1                	jne    c0011350 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001138f:	43                   	inc    ebx
c0011390:	83 fb 20             	cmp    ebx,0x20
c0011393:	0f 85 79 ff ff ff    	jne    c0011312 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0011399:	83 c4 2c             	add    esp,0x2c
c001139c:	5b                   	pop    ebx
c001139d:	5e                   	pop    esi
c001139e:	5f                   	pop    edi
c001139f:	5d                   	pop    ebp
c00113a0:	c3                   	ret    
c00113a1:	90                   	nop

c00113a2 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00113a2:	55                   	push   ebp
c00113a3:	57                   	push   edi
c00113a4:	56                   	push   esi
c00113a5:	53                   	push   ebx
c00113a6:	83 ec 28             	sub    esp,0x28
c00113a9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00113ad:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00113b1:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c00113b5:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00113b9:	c1 e6 08             	shl    esi,0x8
c00113bc:	01 c6                	add    esi,eax
c00113be:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00113c2:	c1 e0 08             	shl    eax,0x8
c00113c5:	01 d0                	add    eax,edx
c00113c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00113cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113cf:	0f af c6             	imul   eax,esi
c00113d2:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00113d9:	50                   	push   eax
c00113da:	e8 30 86 ff ff       	call   c0009a0f <malloc>
c00113df:	83 c4 10             	add    esp,0x10
c00113e2:	89 c7                	mov    edi,eax
c00113e4:	85 c0                	test   eax,eax
c00113e6:	75 10                	jne    c00113f8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00113e8:	83 ec 0c             	sub    esp,0xc
c00113eb:	68 f1 50 02 c0       	push   0xc00250f1
c00113f0:	e8 fa 34 00 00       	call   c00148ef <Krnl::panic(char const*)>
c00113f5:	83 c4 10             	add    esp,0x10
c00113f8:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00113fb:	ba 12 00 00 00       	mov    edx,0x12
c0011400:	84 c0                	test   al,al
c0011402:	74 11                	je     c0011415 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0011404:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0011408:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001140c:	c1 fa 03             	sar    edx,0x3
c001140f:	0f af d1             	imul   edx,ecx
c0011412:	83 c2 12             	add    edx,0x12
c0011415:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0011419:	74 04                	je     c001141f <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c001141b:	85 f6                	test   esi,esi
c001141d:	75 12                	jne    c0011431 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c001141f:	83 ec 0c             	sub    esp,0xc
c0011422:	68 01 51 02 c0       	push   0xc0025101
c0011427:	e8 d3 b8 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001142c:	e9 b8 00 00 00       	jmp    c00114e9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0011431:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0011435:	80 f9 02             	cmp    cl,0x2
c0011438:	0f 85 96 00 00 00    	jne    c00114d4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001143e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0011443:	75 0e                	jne    c0011453 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011445:	84 c0                	test   al,al
c0011447:	75 0a                	jne    c0011453 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011449:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001144c:	83 e8 18             	sub    eax,0x18
c001144f:	a8 f7                	test   al,0xf7
c0011451:	74 0a                	je     c001145d <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0011453:	83 ec 0c             	sub    esp,0xc
c0011456:	68 16 51 02 c0       	push   0xc0025116
c001145b:	eb 7f                	jmp    c00114dc <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c001145d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011465:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001146d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0011471:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011479:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001147d:	75 0c                	jne    c001148b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001147f:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0011484:	c1 e0 18             	shl    eax,0x18
c0011487:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001148b:	45                   	inc    ebp
c001148c:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0011491:	c1 e1 10             	shl    ecx,0x10
c0011494:	89 c8                	mov    eax,ecx
c0011496:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c001149b:	c1 e1 08             	shl    ecx,0x8
c001149e:	09 c1                	or     ecx,eax
c00114a0:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00114a4:	09 c1                	or     ecx,eax
c00114a6:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00114aa:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c00114ae:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00114b2:	c1 f8 03             	sar    eax,0x3
c00114b5:	01 c2                	add    edx,eax
c00114b7:	89 e8                	mov    eax,ebp
c00114b9:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00114bd:	39 c6                	cmp    esi,eax
c00114bf:	7f b0                	jg     c0011471 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00114c1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00114c5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00114c9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00114cc:	7e 22                	jle    c00114f0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00114ce:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00114d2:	eb 99                	jmp    c001146d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00114d4:	50                   	push   eax
c00114d5:	50                   	push   eax
c00114d6:	51                   	push   ecx
c00114d7:	68 24 51 02 c0       	push   0xc0025124
c00114dc:	e8 1e b8 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00114e1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114e4:	e8 36 85 ff ff       	call   c0009a1f <free>
c00114e9:	83 c4 10             	add    esp,0x10
c00114ec:	31 ff                	xor    edi,edi
c00114ee:	eb 0f                	jmp    c00114ff <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00114f0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00114f4:	89 30                	mov    DWORD PTR [eax],esi
c00114f6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00114fa:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00114fd:	89 30                	mov    DWORD PTR [eax],esi
c00114ff:	83 c4 1c             	add    esp,0x1c
c0011502:	89 f8                	mov    eax,edi
c0011504:	5b                   	pop    ebx
c0011505:	5e                   	pop    esi
c0011506:	5f                   	pop    edi
c0011507:	5d                   	pop    ebp
c0011508:	c3                   	ret    
c0011509:	90                   	nop

c001150a <Video::putTGA(int, int, unsigned char*, int)>:
c001150a:	55                   	push   ebp
c001150b:	57                   	push   edi
c001150c:	56                   	push   esi
c001150d:	53                   	push   ebx
c001150e:	83 ec 28             	sub    esp,0x28
c0011511:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0011515:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011519:	50                   	push   eax
c001151a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001151e:	50                   	push   eax
c001151f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011523:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011527:	56                   	push   esi
c0011528:	e8 75 fe ff ff       	call   c00113a2 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001152d:	83 c4 20             	add    esp,0x20
c0011530:	85 c0                	test   eax,eax
c0011532:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011536:	74 35                	je     c001156d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011538:	89 c7                	mov    edi,eax
c001153a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001153e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0011542:	39 d8                	cmp    eax,ebx
c0011544:	7e 27                	jle    c001156d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011546:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001154a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001154e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0011552:	39 e8                	cmp    eax,ebp
c0011554:	7e 14                	jle    c001156a <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0011556:	8b 06                	mov    eax,DWORD PTR [esi]
c0011558:	83 c7 04             	add    edi,0x4
c001155b:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001155e:	53                   	push   ebx
c001155f:	55                   	push   ebp
c0011560:	45                   	inc    ebp
c0011561:	56                   	push   esi
c0011562:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011565:	83 c4 10             	add    esp,0x10
c0011568:	eb e0                	jmp    c001154a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001156a:	43                   	inc    ebx
c001156b:	eb cd                	jmp    c001153a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001156d:	83 c4 1c             	add    esp,0x1c
c0011570:	5b                   	pop    ebx
c0011571:	5e                   	pop    esi
c0011572:	5f                   	pop    edi
c0011573:	5d                   	pop    ebp
c0011574:	c3                   	ret    
c0011575:	66 90                	xchg   ax,ax
c0011577:	90                   	nop

c0011578 <ACPI::close(int, int, void*)>:
c0011578:	83 ec 1c             	sub    esp,0x1c
c001157b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0011583:	74 0b                	je     c0011590 <ACPI::close(int, int, void*)+0x18>
c0011585:	b8 00 00 00 00       	mov    eax,0x0
c001158a:	e9 99 00 00 00       	jmp    c0011628 <ACPI::close(int, int, void*)+0xb0>
c001158f:	90                   	nop
c0011590:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011595:	75 29                	jne    c00115c0 <ACPI::close(int, int, void*)+0x48>
c0011597:	a1 28 85 02 c0       	mov    eax,ds:0xc0028528
c001159c:	85 c0                	test   eax,eax
c001159e:	74 08                	je     c00115a8 <ACPI::close(int, int, void*)+0x30>
c00115a0:	a1 28 85 02 c0       	mov    eax,ds:0xc0028528
c00115a5:	ff d0                	call   eax
c00115a7:	90                   	nop
c00115a8:	83 ec 0c             	sub    esp,0xc
c00115ab:	68 80 51 02 c0       	push   0xc0025180
c00115b0:	e8 3a 33 00 00       	call   c00148ef <Krnl::panic(char const*)>
c00115b5:	83 c4 10             	add    esp,0x10
c00115b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115bd:	eb 69                	jmp    c0011628 <ACPI::close(int, int, void*)+0xb0>
c00115bf:	90                   	nop
c00115c0:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00115c5:	75 59                	jne    c0011620 <ACPI::close(int, int, void*)+0xa8>
c00115c7:	a1 24 85 02 c0       	mov    eax,ds:0xc0028524
c00115cc:	85 c0                	test   eax,eax
c00115ce:	74 08                	je     c00115d8 <ACPI::close(int, int, void*)+0x60>
c00115d0:	a1 24 85 02 c0       	mov    eax,ds:0xc0028524
c00115d5:	ff d0                	call   eax
c00115d7:	90                   	nop
c00115d8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00115dd:	8d 76 00             	lea    esi,[esi+0x0]
c00115e0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00115e5:	83 e0 02             	and    eax,0x2
c00115e8:	74 1e                	je     c0011608 <ACPI::close(int, int, void*)+0x90>
c00115ea:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00115f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115f5:	89 c2                	mov    edx,eax
c00115f7:	ec                   	in     al,dx
c00115f8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00115fc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011600:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011604:	eb da                	jmp    c00115e0 <ACPI::close(int, int, void*)+0x68>
c0011606:	66 90                	xchg   ax,ax
c0011608:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001160f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0011614:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0011618:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001161c:	ee                   	out    dx,al
c001161d:	8d 76 00             	lea    esi,[esi+0x0]
c0011620:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011625:	8d 76 00             	lea    esi,[esi+0x0]
c0011628:	83 c4 1c             	add    esp,0x1c
c001162b:	c3                   	ret    

c001162c <findRSDP()>:
c001162c:	83 ec 1c             	sub    esp,0x1c
c001162f:	83 ec 0c             	sub    esp,0xc
c0011632:	68 a3 52 02 c0       	push   0xc00252a3
c0011637:	e8 2d 84 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001163c:	83 c4 10             	add    esp,0x10
c001163f:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c0011644:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001164a:	83 e0 04             	and    eax,0x4
c001164d:	84 c0                	test   al,al
c001164f:	75 0b                	jne    c001165c <findRSDP()+0x30>
c0011651:	b8 00 00 00 00       	mov    eax,0x0
c0011656:	e9 a1 00 00 00       	jmp    c00116fc <findRSDP()+0xd0>
c001165b:	90                   	nop
c001165c:	a1 18 7f 02 c0       	mov    eax,ds:0xc0027f18
c0011661:	3d ff 07 00 00       	cmp    eax,0x7ff
c0011666:	7f 1c                	jg     c0011684 <findRSDP()+0x58>
c0011668:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c001166d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011673:	83 e2 fb             	and    edx,0xfffffffb
c0011676:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001167c:	b8 00 00 00 00       	mov    eax,0x0
c0011681:	eb 79                	jmp    c00116fc <findRSDP()+0xd0>
c0011683:	90                   	nop
c0011684:	83 ec 0c             	sub    esp,0xc
c0011687:	68 b3 52 02 c0       	push   0xc00252b3
c001168c:	e8 d8 83 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011691:	83 c4 10             	add    esp,0x10
c0011694:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001169c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00116a4:	77 3e                	ja     c00116e4 <findRSDP()+0xb8>
c00116a6:	83 ec 04             	sub    esp,0x4
c00116a9:	6a 08                	push   0x8
c00116ab:	68 cc 52 02 c0       	push   0xc00252cc
c00116b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00116b4:	e8 c7 ee fe ff       	call   c0000580 <memcmp>
c00116b9:	83 c4 10             	add    esp,0x10
c00116bc:	85 c0                	test   eax,eax
c00116be:	0f 94 c0             	sete   al
c00116c1:	84 c0                	test   al,al
c00116c3:	74 17                	je     c00116dc <findRSDP()+0xb0>
c00116c5:	83 ec 0c             	sub    esp,0xc
c00116c8:	68 d5 52 02 c0       	push   0xc00252d5
c00116cd:	e8 97 83 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00116d2:	83 c4 10             	add    esp,0x10
c00116d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116d9:	eb 21                	jmp    c00116fc <findRSDP()+0xd0>
c00116db:	90                   	nop
c00116dc:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00116e1:	eb b9                	jmp    c001169c <findRSDP()+0x70>
c00116e3:	90                   	nop
c00116e4:	83 ec 0c             	sub    esp,0xc
c00116e7:	68 e3 52 02 c0       	push   0xc00252e3
c00116ec:	e8 78 83 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00116f1:	83 c4 10             	add    esp,0x10
c00116f4:	b8 00 00 00 00       	mov    eax,0x0
c00116f9:	8d 76 00             	lea    esi,[esi+0x0]
c00116fc:	83 c4 1c             	add    esp,0x1c
c00116ff:	c3                   	ret    

c0011700 <loadACPITables(unsigned char*)>:
c0011700:	57                   	push   edi
c0011701:	56                   	push   esi
c0011702:	53                   	push   ebx
c0011703:	83 ec 60             	sub    esp,0x60
c0011706:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c001170b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011711:	83 e0 04             	and    eax,0x4
c0011714:	84 c0                	test   al,al
c0011716:	0f 84 3c 02 00 00    	je     c0011958 <loadACPITables(unsigned char*)+0x258>
c001171c:	a0 40 87 02 c0       	mov    al,ds:0xc0028740
c0011721:	84 c0                	test   al,al
c0011723:	74 77                	je     c001179c <loadACPITables(unsigned char*)+0x9c>
c0011725:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011729:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001172d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011731:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011734:	83 e8 24             	sub    eax,0x24
c0011737:	c1 e8 03             	shr    eax,0x3
c001173a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001173e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0011746:	66 90                	xchg   ax,ax
c0011748:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001174c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011750:	0f 8d b6 00 00 00    	jge    c001180c <loadACPITables(unsigned char*)+0x10c>
c0011756:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001175a:	83 c0 24             	add    eax,0x24
c001175d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011761:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011765:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011769:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001176d:	c1 e0 03             	shl    eax,0x3
c0011770:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011774:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011778:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001177b:	8b 00                	mov    eax,DWORD PTR [eax]
c001177d:	89 c1                	mov    ecx,eax
c001177f:	a1 2c 85 02 c0       	mov    eax,ds:0xc002852c
c0011784:	8d 50 01             	lea    edx,[eax+0x1]
c0011787:	89 15 2c 85 02 c0    	mov    DWORD PTR ds:0xc002852c,edx
c001178d:	89 ca                	mov    edx,ecx
c001178f:	89 14 c5 44 85 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7abc],edx
c0011796:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001179a:	eb ac                	jmp    c0011748 <loadACPITables(unsigned char*)+0x48>
c001179c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00117a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00117a4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00117a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00117ab:	83 e8 24             	sub    eax,0x24
c00117ae:	c1 e8 02             	shr    eax,0x2
c00117b1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00117b5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00117bd:	8d 76 00             	lea    esi,[esi+0x0]
c00117c0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00117c4:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00117c8:	7d 42                	jge    c001180c <loadACPITables(unsigned char*)+0x10c>
c00117ca:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00117ce:	83 c0 24             	add    eax,0x24
c00117d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00117d5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00117d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00117dd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00117e1:	c1 e0 02             	shl    eax,0x2
c00117e4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00117e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00117ec:	8b 08                	mov    ecx,DWORD PTR [eax]
c00117ee:	a1 2c 85 02 c0       	mov    eax,ds:0xc002852c
c00117f3:	8d 50 01             	lea    edx,[eax+0x1]
c00117f6:	89 15 2c 85 02 c0    	mov    DWORD PTR ds:0xc002852c,edx
c00117fc:	89 ca                	mov    edx,ecx
c00117fe:	89 14 c5 44 85 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7abc],edx
c0011805:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0011809:	eb b5                	jmp    c00117c0 <loadACPITables(unsigned char*)+0xc0>
c001180b:	90                   	nop
c001180c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0011814:	a1 2c 85 02 c0       	mov    eax,ds:0xc002852c
c0011819:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001181d:	0f 8d 39 01 00 00    	jge    c001195c <loadACPITables(unsigned char*)+0x25c>
c0011823:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011827:	8b 04 c5 44 85 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7abc]
c001182e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011832:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011836:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001183a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001183e:	25 ff 0f 00 00       	and    eax,0xfff
c0011843:	89 c6                	mov    esi,eax
c0011845:	8b 1d 10 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028010
c001184b:	83 ec 0c             	sub    esp,0xc
c001184e:	6a 01                	push   0x1
c0011850:	e8 84 a1 ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c0011855:	83 c4 10             	add    esp,0x10
c0011858:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001185c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011862:	83 ec 0c             	sub    esp,0xc
c0011865:	6a 01                	push   0x1
c0011867:	6a 01                	push   0x1
c0011869:	50                   	push   eax
c001186a:	52                   	push   edx
c001186b:	53                   	push   ebx
c001186c:	e8 05 ab ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011871:	83 c4 20             	add    esp,0x20
c0011874:	09 f0                	or     eax,esi
c0011876:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001187a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001187e:	c1 e0 03             	shl    eax,0x3
c0011881:	05 40 85 02 c0       	add    eax,0xc0028540
c0011886:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001188a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001188e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011892:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001189a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001189e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00118a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00118a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00118aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00118ae:	89 c6                	mov    esi,eax
c00118b0:	89 d7                	mov    edi,edx
c00118b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00118b4:	89 c8                	mov    eax,ecx
c00118b6:	89 fa                	mov    edx,edi
c00118b8:	89 f3                	mov    ebx,esi
c00118ba:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00118be:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00118c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00118d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00118d5:	05 00 10 00 00       	add    eax,0x1000
c00118da:	c1 e8 0c             	shr    eax,0xc
c00118dd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00118e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00118e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118ed:	25 ff 0f 00 00       	and    eax,0xfff
c00118f2:	89 c6                	mov    esi,eax
c00118f4:	8b 1d 10 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028010
c00118fa:	83 ec 0c             	sub    esp,0xc
c00118fd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011901:	e8 d3 a0 ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c0011906:	83 c4 10             	add    esp,0x10
c0011909:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001190d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011913:	83 ec 0c             	sub    esp,0xc
c0011916:	6a 01                	push   0x1
c0011918:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001191c:	50                   	push   eax
c001191d:	52                   	push   edx
c001191e:	53                   	push   ebx
c001191f:	e8 52 aa ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011924:	83 c4 20             	add    esp,0x20
c0011927:	09 f0                	or     eax,esi
c0011929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001192d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011931:	83 ec 0c             	sub    esp,0xc
c0011934:	50                   	push   eax
c0011935:	e8 cf a3 ff ff       	call   c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c001193a:	83 c4 10             	add    esp,0x10
c001193d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011941:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011945:	89 14 c5 44 85 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7abc],edx
c001194c:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011950:	e9 bf fe ff ff       	jmp    c0011814 <loadACPITables(unsigned char*)+0x114>
c0011955:	8d 76 00             	lea    esi,[esi+0x0]
c0011958:	90                   	nop
c0011959:	8d 76 00             	lea    esi,[esi+0x0]
c001195c:	83 c4 60             	add    esp,0x60
c001195f:	5b                   	pop    ebx
c0011960:	5e                   	pop    esi
c0011961:	5f                   	pop    edi
c0011962:	c3                   	ret    
c0011963:	90                   	nop

c0011964 <findRSDT(unsigned char*)>:
c0011964:	57                   	push   edi
c0011965:	56                   	push   esi
c0011966:	53                   	push   ebx
c0011967:	83 ec 50             	sub    esp,0x50
c001196a:	83 ec 0c             	sub    esp,0xc
c001196d:	68 f7 52 02 c0       	push   0xc00252f7
c0011972:	e8 f2 80 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011977:	83 c4 10             	add    esp,0x10
c001197a:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c001197f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011985:	83 e0 04             	and    eax,0x4
c0011988:	84 c0                	test   al,al
c001198a:	75 0c                	jne    c0011998 <findRSDT(unsigned char*)+0x34>
c001198c:	b8 00 00 00 00       	mov    eax,0x0
c0011991:	e9 86 01 00 00       	jmp    c0011b1c <findRSDT(unsigned char*)+0x1b8>
c0011996:	66 90                	xchg   ax,ax
c0011998:	83 ec 0c             	sub    esp,0xc
c001199b:	68 09 53 02 c0       	push   0xc0025309
c00119a0:	e8 c4 80 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00119a5:	83 c4 10             	add    esp,0x10
c00119a8:	89 e0                	mov    eax,esp
c00119aa:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00119ae:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00119b2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00119b6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00119be:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00119c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00119c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00119ca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00119ce:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00119d2:	89 c6                	mov    esi,eax
c00119d4:	89 d7                	mov    edi,edx
c00119d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119d8:	89 c8                	mov    eax,ecx
c00119da:	89 fa                	mov    edx,edi
c00119dc:	89 f3                	mov    ebx,esi
c00119de:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00119e2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00119e6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00119ea:	83 ec 0c             	sub    esp,0xc
c00119ed:	68 1b 53 02 c0       	push   0xc002531b
c00119f2:	e8 72 80 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00119f7:	83 c4 10             	add    esp,0x10
c00119fa:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00119fe:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011a02:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0011a0a:	83 ec 0c             	sub    esp,0xc
c0011a0d:	68 2d 53 02 c0       	push   0xc002532d
c0011a12:	e8 52 80 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011a17:	83 c4 10             	add    esp,0x10
c0011a1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011a1e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a22:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011a26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a2a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011a2e:	83 ec 04             	sub    esp,0x4
c0011a31:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011a35:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011a39:	68 a4 51 02 c0       	push   0xc00251a4
c0011a3e:	e8 bc b2 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0011a43:	83 c4 10             	add    esp,0x10
c0011a46:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011a4a:	25 ff 0f 00 00       	and    eax,0xfff
c0011a4f:	89 c6                	mov    esi,eax
c0011a51:	8b 1d 10 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028010
c0011a57:	83 ec 0c             	sub    esp,0xc
c0011a5a:	6a 02                	push   0x2
c0011a5c:	e8 78 9f ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c0011a61:	83 c4 10             	add    esp,0x10
c0011a64:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011a68:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011a6e:	83 ec 0c             	sub    esp,0xc
c0011a71:	6a 01                	push   0x1
c0011a73:	6a 02                	push   0x2
c0011a75:	50                   	push   eax
c0011a76:	52                   	push   edx
c0011a77:	53                   	push   ebx
c0011a78:	e8 f9 a8 ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a7d:	83 c4 20             	add    esp,0x20
c0011a80:	09 f0                	or     eax,esi
c0011a82:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011a86:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011a8a:	25 ff 0f 00 00       	and    eax,0xfff
c0011a8f:	89 c6                	mov    esi,eax
c0011a91:	8b 1d 10 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028010
c0011a97:	83 ec 0c             	sub    esp,0xc
c0011a9a:	6a 02                	push   0x2
c0011a9c:	e8 38 9f ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c0011aa1:	83 c4 10             	add    esp,0x10
c0011aa4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011aa8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011aae:	83 ec 0c             	sub    esp,0xc
c0011ab1:	6a 01                	push   0x1
c0011ab3:	6a 02                	push   0x2
c0011ab5:	50                   	push   eax
c0011ab6:	52                   	push   edx
c0011ab7:	53                   	push   ebx
c0011ab8:	e8 b9 a8 ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011abd:	83 c4 20             	add    esp,0x20
c0011ac0:	09 f0                	or     eax,esi
c0011ac2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011ac6:	83 ec 04             	sub    esp,0x4
c0011ac9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011acd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011ad1:	68 c4 51 02 c0       	push   0xc00251c4
c0011ad6:	e8 24 b2 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0011adb:	83 c4 10             	add    esp,0x10
c0011ade:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0011ae3:	75 13                	jne    c0011af8 <findRSDT(unsigned char*)+0x194>
c0011ae5:	c6 05 40 87 02 c0 00 	mov    BYTE PTR ds:0xc0028740,0x0
c0011aec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011af0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011af4:	eb 22                	jmp    c0011b18 <findRSDT(unsigned char*)+0x1b4>
c0011af6:	66 90                	xchg   ax,ax
c0011af8:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011afd:	75 11                	jne    c0011b10 <findRSDT(unsigned char*)+0x1ac>
c0011aff:	c6 05 40 87 02 c0 01 	mov    BYTE PTR ds:0xc0028740,0x1
c0011b06:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011b0a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011b0e:	eb 08                	jmp    c0011b18 <findRSDT(unsigned char*)+0x1b4>
c0011b10:	b8 00 00 00 00       	mov    eax,0x0
c0011b15:	eb 05                	jmp    c0011b1c <findRSDT(unsigned char*)+0x1b8>
c0011b17:	90                   	nop
c0011b18:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011b1c:	83 c4 50             	add    esp,0x50
c0011b1f:	5b                   	pop    ebx
c0011b20:	5e                   	pop    esi
c0011b21:	5f                   	pop    edi
c0011b22:	c3                   	ret    
c0011b23:	90                   	nop

c0011b24 <findDataTable(unsigned char*, char*)>:
c0011b24:	83 ec 1c             	sub    esp,0x1c
c0011b27:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c0011b2c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011b32:	83 e0 04             	and    eax,0x4
c0011b35:	84 c0                	test   al,al
c0011b37:	75 07                	jne    c0011b40 <findDataTable(unsigned char*, char*)+0x1c>
c0011b39:	b8 00 00 00 00       	mov    eax,0x0
c0011b3e:	eb 58                	jmp    c0011b98 <findDataTable(unsigned char*, char*)+0x74>
c0011b40:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011b48:	a1 2c 85 02 c0       	mov    eax,ds:0xc002852c
c0011b4d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011b51:	7d 3d                	jge    c0011b90 <findDataTable(unsigned char*, char*)+0x6c>
c0011b53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b57:	c1 e0 03             	shl    eax,0x3
c0011b5a:	05 40 85 02 c0       	add    eax,0xc0028540
c0011b5f:	83 ec 04             	sub    esp,0x4
c0011b62:	6a 04                	push   0x4
c0011b64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011b68:	50                   	push   eax
c0011b69:	e8 12 ea fe ff       	call   c0000580 <memcmp>
c0011b6e:	83 c4 10             	add    esp,0x10
c0011b71:	85 c0                	test   eax,eax
c0011b73:	0f 94 c0             	sete   al
c0011b76:	84 c0                	test   al,al
c0011b78:	74 0e                	je     c0011b88 <findDataTable(unsigned char*, char*)+0x64>
c0011b7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b7e:	8b 04 c5 44 85 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7abc]
c0011b85:	eb 11                	jmp    c0011b98 <findDataTable(unsigned char*, char*)+0x74>
c0011b87:	90                   	nop
c0011b88:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011b8c:	eb ba                	jmp    c0011b48 <findDataTable(unsigned char*, char*)+0x24>
c0011b8e:	66 90                	xchg   ax,ax
c0011b90:	b8 00 00 00 00       	mov    eax,0x0
c0011b95:	8d 76 00             	lea    esi,[esi+0x0]
c0011b98:	83 c4 1c             	add    esp,0x1c
c0011b9b:	c3                   	ret    

c0011b9c <scanMADT()>:
c0011b9c:	53                   	push   ebx
c0011b9d:	83 ec 38             	sub    esp,0x38
c0011ba0:	83 ec 0c             	sub    esp,0xc
c0011ba3:	68 3f 53 02 c0       	push   0xc002533f
c0011ba8:	e8 bc 7e ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011bad:	83 c4 10             	add    esp,0x10
c0011bb0:	a1 00 7f 02 c0       	mov    eax,ds:0xc0027f00
c0011bb5:	25 00 04 00 00       	and    eax,0x400
c0011bba:	74 14                	je     c0011bd0 <scanMADT()+0x34>
c0011bbc:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c0011bc1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011bc7:	83 e2 fb             	and    edx,0xfffffffb
c0011bca:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011bd0:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c0011bd5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011bdb:	83 e0 04             	and    eax,0x4
c0011bde:	84 c0                	test   al,al
c0011be0:	0f 84 82 04 00 00    	je     c0012068 <scanMADT()+0x4cc>
c0011be6:	83 ec 0c             	sub    esp,0xc
c0011be9:	68 4c 53 02 c0       	push   0xc002534c
c0011bee:	e8 76 7e ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011bf3:	83 c4 10             	add    esp,0x10
c0011bf6:	e8 31 fa ff ff       	call   c001162c <findRSDP()>
c0011bfb:	a3 4c 87 02 c0       	mov    ds:0xc002874c,eax
c0011c00:	a1 4c 87 02 c0       	mov    eax,ds:0xc002874c
c0011c05:	85 c0                	test   eax,eax
c0011c07:	75 1b                	jne    c0011c24 <scanMADT()+0x88>
c0011c09:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c0011c0e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011c14:	83 e2 fb             	and    edx,0xfffffffb
c0011c17:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011c1d:	e9 4e 04 00 00       	jmp    c0012070 <scanMADT()+0x4d4>
c0011c22:	66 90                	xchg   ax,ax
c0011c24:	83 ec 0c             	sub    esp,0xc
c0011c27:	68 5e 53 02 c0       	push   0xc002535e
c0011c2c:	e8 38 7e ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011c31:	83 c4 10             	add    esp,0x10
c0011c34:	a1 4c 87 02 c0       	mov    eax,ds:0xc002874c
c0011c39:	83 ec 0c             	sub    esp,0xc
c0011c3c:	50                   	push   eax
c0011c3d:	e8 22 fd ff ff       	call   c0011964 <findRSDT(unsigned char*)>
c0011c42:	83 c4 10             	add    esp,0x10
c0011c45:	a3 48 87 02 c0       	mov    ds:0xc0028748,eax
c0011c4a:	a1 48 87 02 c0       	mov    eax,ds:0xc0028748
c0011c4f:	85 c0                	test   eax,eax
c0011c51:	75 19                	jne    c0011c6c <scanMADT()+0xd0>
c0011c53:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c0011c58:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011c5e:	83 e2 fb             	and    edx,0xfffffffb
c0011c61:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011c67:	e9 04 04 00 00       	jmp    c0012070 <scanMADT()+0x4d4>
c0011c6c:	83 ec 0c             	sub    esp,0xc
c0011c6f:	68 6e 53 02 c0       	push   0xc002536e
c0011c74:	e8 f0 7d ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011c79:	83 c4 10             	add    esp,0x10
c0011c7c:	a1 48 87 02 c0       	mov    eax,ds:0xc0028748
c0011c81:	83 ec 0c             	sub    esp,0xc
c0011c84:	50                   	push   eax
c0011c85:	e8 76 fa ff ff       	call   c0011700 <loadACPITables(unsigned char*)>
c0011c8a:	83 c4 10             	add    esp,0x10
c0011c8d:	a1 48 87 02 c0       	mov    eax,ds:0xc0028748
c0011c92:	83 ec 08             	sub    esp,0x8
c0011c95:	68 86 53 02 c0       	push   0xc0025386
c0011c9a:	50                   	push   eax
c0011c9b:	e8 84 fe ff ff       	call   c0011b24 <findDataTable(unsigned char*, char*)>
c0011ca0:	83 c4 10             	add    esp,0x10
c0011ca3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011ca7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011cac:	75 1a                	jne    c0011cc8 <scanMADT()+0x12c>
c0011cae:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c0011cb3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011cb9:	83 e2 fe             	and    edx,0xfffffffe
c0011cbc:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011cc2:	e9 a9 03 00 00       	jmp    c0012070 <scanMADT()+0x4d4>
c0011cc7:	90                   	nop
c0011cc8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011cd0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011cd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011cd7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011cdb:	0f 87 8f 03 00 00    	ja     c0012070 <scanMADT()+0x4d4>
c0011ce1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011ce9:	0f 87 81 03 00 00    	ja     c0012070 <scanMADT()+0x4d4>
c0011cef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cf3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011cf7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cfb:	8d 50 01             	lea    edx,[eax+0x1]
c0011cfe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d02:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d06:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011d0a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011d0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d12:	8d 50 01             	lea    edx,[eax+0x1]
c0011d15:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d19:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d1d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011d21:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011d25:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011d2a:	0f 86 3c 03 00 00    	jbe    c001206c <scanMADT()+0x4d0>
c0011d30:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011d35:	75 59                	jne    c0011d90 <scanMADT()+0x1f4>
c0011d37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d3b:	8d 50 01             	lea    edx,[eax+0x1]
c0011d3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d42:	8a 15 40 89 02 c0    	mov    dl,BYTE PTR ds:0xc0028940
c0011d48:	0f b6 d2             	movzx  edx,dl
c0011d4b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011d4f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011d53:	88 82 80 89 02 c0    	mov    BYTE PTR [edx-0x3ffd7680],al
c0011d59:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d5d:	8d 50 01             	lea    edx,[eax+0x1]
c0011d60:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d64:	8a 15 40 89 02 c0    	mov    dl,BYTE PTR ds:0xc0028940
c0011d6a:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011d6d:	88 0d 40 89 02 c0    	mov    BYTE PTR ds:0xc0028940,cl
c0011d73:	0f b6 d2             	movzx  edx,dl
c0011d76:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011d7a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011d7e:	88 82 60 89 02 c0    	mov    BYTE PTR [edx-0x3ffd76a0],al
c0011d84:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011d89:	e9 c6 02 00 00       	jmp    c0012054 <scanMADT()+0x4b8>
c0011d8e:	66 90                	xchg   ax,ax
c0011d90:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011d95:	0f 85 15 01 00 00    	jne    c0011eb0 <scanMADT()+0x314>
c0011d9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d9f:	8d 50 01             	lea    edx,[eax+0x1]
c0011da2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011da6:	8a 15 00 88 02 c0    	mov    dl,BYTE PTR ds:0xc0028800
c0011dac:	0f b6 d2             	movzx  edx,dl
c0011daf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011db3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011db7:	88 82 20 88 02 c0    	mov    BYTE PTR [edx-0x3ffd77e0],al
c0011dbd:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011dc1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011dc5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dc9:	01 d0                	add    eax,edx
c0011dcb:	83 c0 2c             	add    eax,0x2c
c0011dce:	8a 00                	mov    al,BYTE PTR [eax]
c0011dd0:	0f b6 d0             	movzx  edx,al
c0011dd3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dd7:	8d 48 01             	lea    ecx,[eax+0x1]
c0011dda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011dde:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011de2:	0f b6 c0             	movzx  eax,al
c0011de5:	c1 e0 08             	shl    eax,0x8
c0011de8:	89 d1                	mov    ecx,edx
c0011dea:	09 c1                	or     ecx,eax
c0011dec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011df0:	8d 50 02             	lea    edx,[eax+0x2]
c0011df3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011df7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011dfb:	0f b6 c0             	movzx  eax,al
c0011dfe:	c1 e0 10             	shl    eax,0x10
c0011e01:	09 c1                	or     ecx,eax
c0011e03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e07:	8d 50 03             	lea    edx,[eax+0x3]
c0011e0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e0e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011e12:	0f b6 c0             	movzx  eax,al
c0011e15:	c1 e0 18             	shl    eax,0x18
c0011e18:	09 c1                	or     ecx,eax
c0011e1a:	89 ca                	mov    edx,ecx
c0011e1c:	a0 00 88 02 c0       	mov    al,ds:0xc0028800
c0011e21:	0f b6 c0             	movzx  eax,al
c0011e24:	89 14 85 40 88 02 c0 	mov    DWORD PTR [eax*4-0x3ffd77c0],edx
c0011e2b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011e30:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e34:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e38:	01 d0                	add    eax,edx
c0011e3a:	83 c0 2c             	add    eax,0x2c
c0011e3d:	8a 00                	mov    al,BYTE PTR [eax]
c0011e3f:	0f b6 d0             	movzx  edx,al
c0011e42:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e46:	8d 48 01             	lea    ecx,[eax+0x1]
c0011e49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e4d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011e51:	0f b6 c0             	movzx  eax,al
c0011e54:	c1 e0 08             	shl    eax,0x8
c0011e57:	89 d1                	mov    ecx,edx
c0011e59:	09 c1                	or     ecx,eax
c0011e5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e5f:	8d 50 02             	lea    edx,[eax+0x2]
c0011e62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e66:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011e6a:	0f b6 c0             	movzx  eax,al
c0011e6d:	c1 e0 10             	shl    eax,0x10
c0011e70:	09 c1                	or     ecx,eax
c0011e72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e76:	8d 50 03             	lea    edx,[eax+0x3]
c0011e79:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e7d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011e81:	0f b6 c0             	movzx  eax,al
c0011e84:	c1 e0 18             	shl    eax,0x18
c0011e87:	09 c1                	or     ecx,eax
c0011e89:	89 ca                	mov    edx,ecx
c0011e8b:	a0 00 88 02 c0       	mov    al,ds:0xc0028800
c0011e90:	0f b6 c0             	movzx  eax,al
c0011e93:	89 14 85 c0 88 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7740],edx
c0011e9a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011e9f:	a0 00 88 02 c0       	mov    al,ds:0xc0028800
c0011ea4:	40                   	inc    eax
c0011ea5:	a2 00 88 02 c0       	mov    ds:0xc0028800,al
c0011eaa:	e9 a5 01 00 00       	jmp    c0012054 <scanMADT()+0x4b8>
c0011eaf:	90                   	nop
c0011eb0:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011eb5:	0f 85 e9 00 00 00    	jne    c0011fa4 <scanMADT()+0x408>
c0011ebb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ebf:	8d 50 01             	lea    edx,[eax+0x1]
c0011ec2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ec6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011eca:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011ece:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011ed2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ed6:	8d 50 01             	lea    edx,[eax+0x1]
c0011ed9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011edd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ee1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011ee5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011ee9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011eed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ef1:	01 d0                	add    eax,edx
c0011ef3:	83 c0 2c             	add    eax,0x2c
c0011ef6:	8a 00                	mov    al,BYTE PTR [eax]
c0011ef8:	0f b6 d0             	movzx  edx,al
c0011efb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011eff:	8d 48 01             	lea    ecx,[eax+0x1]
c0011f02:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f06:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011f0a:	0f b6 c0             	movzx  eax,al
c0011f0d:	c1 e0 08             	shl    eax,0x8
c0011f10:	89 d1                	mov    ecx,edx
c0011f12:	09 c1                	or     ecx,eax
c0011f14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f18:	8d 50 02             	lea    edx,[eax+0x2]
c0011f1b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f1f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011f23:	0f b6 c0             	movzx  eax,al
c0011f26:	c1 e0 10             	shl    eax,0x10
c0011f29:	09 c1                	or     ecx,eax
c0011f2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f2f:	8d 50 03             	lea    edx,[eax+0x3]
c0011f32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f36:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011f3a:	0f b6 c0             	movzx  eax,al
c0011f3d:	c1 e0 18             	shl    eax,0x18
c0011f40:	09 c8                	or     eax,ecx
c0011f42:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f46:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011f4b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f53:	01 d0                	add    eax,edx
c0011f55:	83 c0 2c             	add    eax,0x2c
c0011f58:	8a 00                	mov    al,BYTE PTR [eax]
c0011f5a:	0f b6 c0             	movzx  eax,al
c0011f5d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011f61:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011f64:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f68:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0011f6c:	0f b6 d2             	movzx  edx,dl
c0011f6f:	c1 e2 08             	shl    edx,0x8
c0011f72:	09 d0                	or     eax,edx
c0011f74:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0011f79:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011f7e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0011f83:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f87:	88 90 e0 75 02 c0    	mov    BYTE PTR [eax-0x3ffd8a20],dl
c0011f8d:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0011f92:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0011f97:	66 89 84 12 e0 87 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7820],ax
c0011f9f:	e9 b0 00 00 00       	jmp    c0012054 <scanMADT()+0x4b8>
c0011fa4:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0011fa9:	0f 85 99 00 00 00    	jne    c0012048 <scanMADT()+0x4ac>
c0011faf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fb3:	8d 50 01             	lea    edx,[eax+0x1]
c0011fb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011fba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011fbe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011fc2:	0f b6 c0             	movzx  eax,al
c0011fc5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011fc9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011fcd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fd1:	01 d0                	add    eax,edx
c0011fd3:	83 c0 2c             	add    eax,0x2c
c0011fd6:	8a 00                	mov    al,BYTE PTR [eax]
c0011fd8:	0f b6 d0             	movzx  edx,al
c0011fdb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fdf:	8d 48 01             	lea    ecx,[eax+0x1]
c0011fe2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011fe6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011fea:	0f b6 c0             	movzx  eax,al
c0011fed:	c1 e0 08             	shl    eax,0x8
c0011ff0:	09 d0                	or     eax,edx
c0011ff2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011ff6:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011ffb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fff:	8d 50 01             	lea    edx,[eax+0x1]
c0012002:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012006:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001200a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001200e:	0f b6 c0             	movzx  eax,al
c0012011:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012019:	c1 e0 08             	shl    eax,0x8
c001201c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012020:	89 c1                	mov    ecx,eax
c0012022:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012026:	c1 e0 18             	shl    eax,0x18
c0012029:	89 c3                	mov    ebx,eax
c001202b:	a1 50 87 02 c0       	mov    eax,ds:0xc0028750
c0012030:	8d 50 01             	lea    edx,[eax+0x1]
c0012033:	89 15 50 87 02 c0    	mov    DWORD PTR ds:0xc0028750,edx
c0012039:	09 d9                	or     ecx,ebx
c001203b:	89 ca                	mov    edx,ecx
c001203d:	89 14 85 60 87 02 c0 	mov    DWORD PTR [eax*4-0x3ffd78a0],edx
c0012044:	eb 0e                	jmp    c0012054 <scanMADT()+0x4b8>
c0012046:	66 90                	xchg   ax,ax
c0012048:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001204d:	75 05                	jne    c0012054 <scanMADT()+0x4b8>
c001204f:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0012054:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0012059:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001205d:	01 d0                	add    eax,edx
c001205f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012063:	e9 68 fc ff ff       	jmp    c0011cd0 <scanMADT()+0x134>
c0012068:	90                   	nop
c0012069:	eb 05                	jmp    c0012070 <scanMADT()+0x4d4>
c001206b:	90                   	nop
c001206c:	90                   	nop
c001206d:	8d 76 00             	lea    esi,[esi+0x0]
c0012070:	83 c4 38             	add    esp,0x38
c0012073:	5b                   	pop    ebx
c0012074:	c3                   	ret    
c0012075:	90                   	nop
c0012076:	66 90                	xchg   ax,ax

c0012078 <ACPI::ACPI()>:
c0012078:	83 ec 0c             	sub    esp,0xc
c001207b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001207f:	83 ec 08             	sub    esp,0x8
c0012082:	68 8b 53 02 c0       	push   0xc002538b
c0012087:	50                   	push   eax
c0012088:	e8 1d c3 ff ff       	call   c000e3aa <Device::Device(char const*)>
c001208d:	83 c4 10             	add    esp,0x10
c0012090:	ba 4c 55 02 c0       	mov    edx,0xc002554c
c0012095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012099:	89 10                	mov    DWORD PTR [eax],edx
c001209b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001209f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00120a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120aa:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00120b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120b8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00120c2:	83 ec 0c             	sub    esp,0xc
c00120c5:	68 90 53 02 c0       	push   0xc0025390
c00120ca:	e8 9a 79 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00120cf:	83 c4 10             	add    esp,0x10
c00120d2:	e8 c5 fa ff ff       	call   c0011b9c <scanMADT()>
c00120d7:	90                   	nop
c00120d8:	83 c4 0c             	add    esp,0xc
c00120db:	c3                   	ret    

c00120dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00120dc:	83 ec 2c             	sub    esp,0x2c
c00120df:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00120e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120e7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00120eb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00120ef:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00120f4:	88 d0                	mov    al,dl
c00120f6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00120fa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00120ff:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012107:	90                   	nop
c0012108:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001210c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012112:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012116:	0f 8d 9c 00 00 00    	jge    c00121b8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c001211c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012120:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012124:	83 c2 2a             	add    edx,0x2a
c0012127:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001212b:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0012130:	75 7a                	jne    c00121ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0012132:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012136:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001213a:	83 c2 2a             	add    edx,0x2a
c001213d:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0012141:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0012145:	75 65                	jne    c00121ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0012147:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001214c:	74 3a                	je     c0012188 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c001214e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012152:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012156:	83 c2 2a             	add    edx,0x2a
c0012159:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001215d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012161:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012164:	39 c2                	cmp    edx,eax
c0012166:	74 10                	je     c0012178 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0012168:	83 ec 0c             	sub    esp,0xc
c001216b:	68 e4 51 02 c0       	push   0xc00251e4
c0012170:	e8 7a 27 00 00       	call   c00148ef <Krnl::panic(char const*)>
c0012175:	83 c4 10             	add    esp,0x10
c0012178:	83 ec 0c             	sub    esp,0xc
c001217b:	68 9e 53 02 c0       	push   0xc002539e
c0012180:	e8 6a 27 00 00       	call   c00148ef <Krnl::panic(char const*)>
c0012185:	83 c4 10             	add    esp,0x10
c0012188:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001218c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012190:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012194:	83 c2 2a             	add    edx,0x2a
c0012197:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001219b:	8b 02                	mov    eax,DWORD PTR [edx]
c001219d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00121a0:	89 01                	mov    DWORD PTR [ecx],eax
c00121a2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00121a5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00121aa:	66 90                	xchg   ax,ax
c00121ac:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00121b0:	e9 53 ff ff ff       	jmp    c0012108 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c00121b5:	8d 76 00             	lea    esi,[esi+0x0]
c00121b8:	90                   	nop
c00121b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121bd:	83 c4 2c             	add    esp,0x2c
c00121c0:	c2 04 00             	ret    0x4
c00121c3:	90                   	nop

c00121c4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00121c4:	83 ec 1c             	sub    esp,0x1c
c00121c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00121cb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00121cf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00121d3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00121d8:	88 c8                	mov    al,cl
c00121da:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00121de:	88 d0                	mov    al,dl
c00121e0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00121e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121e8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00121ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121f2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00121f5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00121f9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00121fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012201:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012207:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001220b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001220e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012212:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0012217:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001221b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012221:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0012225:	8d 48 01             	lea    ecx,[eax+0x1]
c0012228:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001222c:	83 c2 2a             	add    edx,0x2a
c001222f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0012233:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012237:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001223d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012241:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012244:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012248:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001224c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012250:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012256:	8d 50 01             	lea    edx,[eax+0x1]
c0012259:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001225d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0012263:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012267:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001226d:	3d 00 02 00 00       	cmp    eax,0x200
c0012272:	75 10                	jne    c0012284 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0012274:	83 ec 0c             	sub    esp,0xc
c0012277:	68 ad 53 02 c0       	push   0xc00253ad
c001227c:	e8 6e 26 00 00       	call   c00148ef <Krnl::panic(char const*)>
c0012281:	83 c4 10             	add    esp,0x10
c0012284:	90                   	nop
c0012285:	83 c4 1c             	add    esp,0x1c
c0012288:	c3                   	ret    
c0012289:	90                   	nop
c001228a:	66 90                	xchg   ax,ax

c001228c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001228c:	b8 00 00 00 00       	mov    eax,0x0
c0012291:	c3                   	ret    
c0012292:	66 90                	xchg   ax,ax

c0012294 <ACPI::detectPCI()>:
c0012294:	53                   	push   ebx
c0012295:	83 ec 68             	sub    esp,0x68
c0012298:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c001229d:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c00122a2:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c00122a7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00122ad:	83 e0 04             	and    eax,0x4
c00122b0:	84 c0                	test   al,al
c00122b2:	74 2c                	je     c00122e0 <ACPI::detectPCI()+0x4c>
c00122b4:	a1 48 87 02 c0       	mov    eax,ds:0xc0028748
c00122b9:	83 ec 08             	sub    esp,0x8
c00122bc:	68 ca 53 02 c0       	push   0xc00253ca
c00122c1:	50                   	push   eax
c00122c2:	e8 5d f8 ff ff       	call   c0011b24 <findDataTable(unsigned char*, char*)>
c00122c7:	83 c4 10             	add    esp,0x10
c00122ca:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00122ce:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c00122d3:	74 0b                	je     c00122e0 <ACPI::detectPCI()+0x4c>
c00122d5:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00122da:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00122df:	90                   	nop
c00122e0:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c00122e8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00122ec:	8a 00                	mov    al,BYTE PTR [eax]
c00122ee:	3c 01                	cmp    al,0x1
c00122f0:	75 0e                	jne    c0012300 <ACPI::detectPCI()+0x6c>
c00122f2:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00122f7:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00122fc:	eb 2a                	jmp    c0012328 <ACPI::detectPCI()+0x94>
c00122fe:	66 90                	xchg   ax,ax
c0012300:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012304:	8a 00                	mov    al,BYTE PTR [eax]
c0012306:	3c 02                	cmp    al,0x2
c0012308:	75 1e                	jne    c0012328 <ACPI::detectPCI()+0x94>
c001230a:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001230f:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012314:	74 12                	je     c0012328 <ACPI::detectPCI()+0x94>
c0012316:	83 ec 0c             	sub    esp,0xc
c0012319:	68 14 52 02 c0       	push   0xc0025214
c001231e:	e8 cc 25 00 00       	call   c00148ef <Krnl::panic(char const*)>
c0012323:	83 c4 10             	add    esp,0x10
c0012326:	66 90                	xchg   ax,ax
c0012328:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c001232c:	83 f0 01             	xor    eax,0x1
c001232f:	84 c0                	test   al,al
c0012331:	74 41                	je     c0012374 <ACPI::detectPCI()+0xe0>
c0012333:	e8 18 de fe ff       	call   c0000150 <manualPCIProbe>
c0012338:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001233c:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c0012341:	75 0d                	jne    c0012350 <ACPI::detectPCI()+0xbc>
c0012343:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012348:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c001234d:	eb 25                	jmp    c0012374 <ACPI::detectPCI()+0xe0>
c001234f:	90                   	nop
c0012350:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c0012355:	75 1d                	jne    c0012374 <ACPI::detectPCI()+0xe0>
c0012357:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001235c:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012361:	74 11                	je     c0012374 <ACPI::detectPCI()+0xe0>
c0012363:	83 ec 0c             	sub    esp,0xc
c0012366:	68 14 52 02 c0       	push   0xc0025214
c001236b:	e8 7f 25 00 00       	call   c00148ef <Krnl::panic(char const*)>
c0012370:	83 c4 10             	add    esp,0x10
c0012373:	90                   	nop
c0012374:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c0012379:	0f 84 49 03 00 00    	je     c00126c8 <ACPI::detectPCI()+0x434>
c001237f:	83 ec 0c             	sub    esp,0xc
c0012382:	68 cf 53 02 c0       	push   0xc00253cf
c0012387:	e8 dd 76 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001238c:	83 c4 10             	add    esp,0x10
c001238f:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012394:	0f 84 8e 00 00 00    	je     c0012428 <ACPI::detectPCI()+0x194>
c001239a:	a1 00 7f 02 c0       	mov    eax,ds:0xc0027f00
c001239f:	25 00 08 00 00       	and    eax,0x800
c00123a4:	0f 84 16 01 00 00    	je     c00124c0 <ACPI::detectPCI()+0x22c>
c00123aa:	83 ec 0c             	sub    esp,0xc
c00123ad:	68 3c 52 02 c0       	push   0xc002523c
c00123b2:	e8 b2 76 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00123b7:	83 c4 10             	add    esp,0x10
c00123ba:	a1 00 7f 02 c0       	mov    eax,ds:0xc0027f00
c00123bf:	25 80 00 00 00       	and    eax,0x80
c00123c4:	0f 85 f6 00 00 00    	jne    c00124c0 <ACPI::detectPCI()+0x22c>
c00123ca:	66 90                	xchg   ax,ax
c00123cc:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c00123d3:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c00123d8:	89 c2                	mov    edx,eax
c00123da:	ec                   	in     al,dx
c00123db:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c00123df:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c00123e3:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c00123e7:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c00123ec:	74 0a                	je     c00123f8 <ACPI::detectPCI()+0x164>
c00123ee:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c00123f3:	74 03                	je     c00123f8 <ACPI::detectPCI()+0x164>
c00123f5:	eb d5                	jmp    c00123cc <ACPI::detectPCI()+0x138>
c00123f7:	90                   	nop
c00123f8:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c00123ff:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c0012404:	89 c2                	mov    edx,eax
c0012406:	ec                   	in     al,dx
c0012407:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c001240b:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001240f:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c0012413:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c0012418:	74 de                	je     c00123f8 <ACPI::detectPCI()+0x164>
c001241a:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c001241f:	0f 85 93 00 00 00    	jne    c00124b8 <ACPI::detectPCI()+0x224>
c0012425:	eb d1                	jmp    c00123f8 <ACPI::detectPCI()+0x164>
c0012427:	90                   	nop
c0012428:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c001242c:	83 f0 01             	xor    eax,0x1
c001242f:	84 c0                	test   al,al
c0012431:	0f 84 89 00 00 00    	je     c00124c0 <ACPI::detectPCI()+0x22c>
c0012437:	a1 00 7f 02 c0       	mov    eax,ds:0xc0027f00
c001243c:	25 00 08 00 00       	and    eax,0x800
c0012441:	74 7d                	je     c00124c0 <ACPI::detectPCI()+0x22c>
c0012443:	83 ec 0c             	sub    esp,0xc
c0012446:	68 60 52 02 c0       	push   0xc0025260
c001244b:	e8 19 76 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012450:	83 c4 10             	add    esp,0x10
c0012453:	a1 00 7f 02 c0       	mov    eax,ds:0xc0027f00
c0012458:	25 80 00 00 00       	and    eax,0x80
c001245d:	75 61                	jne    c00124c0 <ACPI::detectPCI()+0x22c>
c001245f:	90                   	nop
c0012460:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c0012467:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c001246c:	89 c2                	mov    edx,eax
c001246e:	ec                   	in     al,dx
c001246f:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0012473:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c0012477:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c001247b:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c0012480:	74 0a                	je     c001248c <ACPI::detectPCI()+0x1f8>
c0012482:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c0012487:	74 03                	je     c001248c <ACPI::detectPCI()+0x1f8>
c0012489:	eb d5                	jmp    c0012460 <ACPI::detectPCI()+0x1cc>
c001248b:	90                   	nop
c001248c:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c0012493:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0012498:	89 c2                	mov    edx,eax
c001249a:	ec                   	in     al,dx
c001249b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001249f:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00124a3:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c00124a7:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c00124ac:	74 de                	je     c001248c <ACPI::detectPCI()+0x1f8>
c00124ae:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c00124b3:	75 07                	jne    c00124bc <ACPI::detectPCI()+0x228>
c00124b5:	eb d5                	jmp    c001248c <ACPI::detectPCI()+0x1f8>
c00124b7:	90                   	nop
c00124b8:	90                   	nop
c00124b9:	eb 05                	jmp    c00124c0 <ACPI::detectPCI()+0x22c>
c00124bb:	90                   	nop
c00124bc:	90                   	nop
c00124bd:	8d 76 00             	lea    esi,[esi+0x0]
c00124c0:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c00124c8:	83 ec 0c             	sub    esp,0xc
c00124cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00124cf:	e8 3b 75 ff ff       	call   c0009a0f <malloc>
c00124d4:	83 c4 10             	add    esp,0x10
c00124d7:	89 c3                	mov    ebx,eax
c00124d9:	83 ec 0c             	sub    esp,0xc
c00124dc:	53                   	push   ebx
c00124dd:	e8 30 ad 00 00       	call   c001d212 <PCI::PCI()>
c00124e2:	83 c4 10             	add    esp,0x10
c00124e5:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c00124e9:	a1 00 7f 02 c0       	mov    eax,ds:0xc0027f00
c00124ee:	25 00 08 00 00       	and    eax,0x800
c00124f3:	74 7b                	je     c0012570 <ACPI::detectPCI()+0x2dc>
c00124f5:	83 ec 0c             	sub    esp,0xc
c00124f8:	68 e7 53 02 c0       	push   0xc00253e7
c00124fd:	e8 67 75 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012502:	83 c4 10             	add    esp,0x10
c0012505:	a1 00 7f 02 c0       	mov    eax,ds:0xc0027f00
c001250a:	25 80 00 00 00       	and    eax,0x80
c001250f:	75 5f                	jne    c0012570 <ACPI::detectPCI()+0x2dc>
c0012511:	8d 76 00             	lea    esi,[esi+0x0]
c0012514:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c001251b:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0012520:	89 c2                	mov    edx,eax
c0012522:	ec                   	in     al,dx
c0012523:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c0012527:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c001252b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001252f:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c0012534:	74 0a                	je     c0012540 <ACPI::detectPCI()+0x2ac>
c0012536:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c001253b:	74 03                	je     c0012540 <ACPI::detectPCI()+0x2ac>
c001253d:	eb d5                	jmp    c0012514 <ACPI::detectPCI()+0x280>
c001253f:	90                   	nop
c0012540:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c0012547:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c001254c:	89 c2                	mov    edx,eax
c001254e:	ec                   	in     al,dx
c001254f:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0012553:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c0012557:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001255b:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0012560:	74 de                	je     c0012540 <ACPI::detectPCI()+0x2ac>
c0012562:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c0012567:	75 03                	jne    c001256c <ACPI::detectPCI()+0x2d8>
c0012569:	eb d5                	jmp    c0012540 <ACPI::detectPCI()+0x2ac>
c001256b:	90                   	nop
c001256c:	90                   	nop
c001256d:	8d 76 00             	lea    esi,[esi+0x0]
c0012570:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012574:	83 ec 08             	sub    esp,0x8
c0012577:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001257b:	50                   	push   eax
c001257c:	e8 25 bc ff ff       	call   c000e1a6 <Device::addChild(Device*)>
c0012581:	83 c4 10             	add    esp,0x10
c0012584:	a1 00 7f 02 c0       	mov    eax,ds:0xc0027f00
c0012589:	25 00 08 00 00       	and    eax,0x800
c001258e:	74 78                	je     c0012608 <ACPI::detectPCI()+0x374>
c0012590:	83 ec 0c             	sub    esp,0xc
c0012593:	68 ed 53 02 c0       	push   0xc00253ed
c0012598:	e8 cc 74 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001259d:	83 c4 10             	add    esp,0x10
c00125a0:	a1 00 7f 02 c0       	mov    eax,ds:0xc0027f00
c00125a5:	25 80 00 00 00       	and    eax,0x80
c00125aa:	75 5c                	jne    c0012608 <ACPI::detectPCI()+0x374>
c00125ac:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c00125b3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00125b8:	89 c2                	mov    edx,eax
c00125ba:	ec                   	in     al,dx
c00125bb:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c00125bf:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c00125c3:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c00125c7:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c00125cc:	74 0a                	je     c00125d8 <ACPI::detectPCI()+0x344>
c00125ce:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c00125d3:	74 03                	je     c00125d8 <ACPI::detectPCI()+0x344>
c00125d5:	eb d5                	jmp    c00125ac <ACPI::detectPCI()+0x318>
c00125d7:	90                   	nop
c00125d8:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c00125df:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00125e4:	89 c2                	mov    edx,eax
c00125e6:	ec                   	in     al,dx
c00125e7:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c00125eb:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c00125ef:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c00125f3:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c00125f8:	74 de                	je     c00125d8 <ACPI::detectPCI()+0x344>
c00125fa:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c00125ff:	75 03                	jne    c0012604 <ACPI::detectPCI()+0x370>
c0012601:	eb d5                	jmp    c00125d8 <ACPI::detectPCI()+0x344>
c0012603:	90                   	nop
c0012604:	90                   	nop
c0012605:	8d 76 00             	lea    esi,[esi+0x0]
c0012608:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001260c:	8b 00                	mov    eax,DWORD PTR [eax]
c001260e:	83 c0 08             	add    eax,0x8
c0012611:	8b 00                	mov    eax,DWORD PTR [eax]
c0012613:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012618:	74 0a                	je     c0012624 <ACPI::detectPCI()+0x390>
c001261a:	ba 01 00 00 00       	mov    edx,0x1
c001261f:	eb 0b                	jmp    c001262c <ACPI::detectPCI()+0x398>
c0012621:	8d 76 00             	lea    esi,[esi+0x0]
c0012624:	ba 02 00 00 00       	mov    edx,0x2
c0012629:	8d 76 00             	lea    esi,[esi+0x0]
c001262c:	6a 00                	push   0x0
c001262e:	6a 00                	push   0x0
c0012630:	52                   	push   edx
c0012631:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012635:	ff d0                	call   eax
c0012637:	83 c4 10             	add    esp,0x10
c001263a:	a1 00 7f 02 c0       	mov    eax,ds:0xc0027f00
c001263f:	25 00 08 00 00       	and    eax,0x800
c0012644:	0f 84 26 01 00 00    	je     c0012770 <ACPI::detectPCI()+0x4dc>
c001264a:	83 ec 0c             	sub    esp,0xc
c001264d:	68 f3 53 02 c0       	push   0xc00253f3
c0012652:	e8 12 74 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012657:	83 c4 10             	add    esp,0x10
c001265a:	a1 00 7f 02 c0       	mov    eax,ds:0xc0027f00
c001265f:	25 80 00 00 00       	and    eax,0x80
c0012664:	0f 85 06 01 00 00    	jne    c0012770 <ACPI::detectPCI()+0x4dc>
c001266a:	66 90                	xchg   ax,ax
c001266c:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c0012673:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012678:	89 c2                	mov    edx,eax
c001267a:	ec                   	in     al,dx
c001267b:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001267f:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0012683:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0012687:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c001268c:	74 0a                	je     c0012698 <ACPI::detectPCI()+0x404>
c001268e:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c0012693:	74 03                	je     c0012698 <ACPI::detectPCI()+0x404>
c0012695:	eb d5                	jmp    c001266c <ACPI::detectPCI()+0x3d8>
c0012697:	90                   	nop
c0012698:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c001269f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00126a4:	89 c2                	mov    edx,eax
c00126a6:	ec                   	in     al,dx
c00126a7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00126ab:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00126af:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c00126b3:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c00126b8:	74 de                	je     c0012698 <ACPI::detectPCI()+0x404>
c00126ba:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c00126bf:	0f 85 a7 00 00 00    	jne    c001276c <ACPI::detectPCI()+0x4d8>
c00126c5:	eb d1                	jmp    c0012698 <ACPI::detectPCI()+0x404>
c00126c7:	90                   	nop
c00126c8:	83 ec 0c             	sub    esp,0xc
c00126cb:	68 f9 53 02 c0       	push   0xc00253f9
c00126d0:	e8 2a a6 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00126d5:	83 c4 10             	add    esp,0x10
c00126d8:	83 ec 0c             	sub    esp,0xc
c00126db:	68 04 54 02 c0       	push   0xc0025404
c00126e0:	e8 84 73 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00126e5:	83 c4 10             	add    esp,0x10
c00126e8:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c00126f0:	83 ec 0c             	sub    esp,0xc
c00126f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126f7:	e8 13 73 ff ff       	call   c0009a0f <malloc>
c00126fc:	83 c4 10             	add    esp,0x10
c00126ff:	89 c3                	mov    ebx,eax
c0012701:	83 ec 0c             	sub    esp,0xc
c0012704:	53                   	push   ebx
c0012705:	e8 72 bc 00 00       	call   c001e37c <IDE::IDE()>
c001270a:	83 c4 10             	add    esp,0x10
c001270d:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012711:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012715:	83 ec 08             	sub    esp,0x8
c0012718:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001271c:	50                   	push   eax
c001271d:	e8 84 ba ff ff       	call   c000e1a6 <Device::addChild(Device*)>
c0012722:	83 c4 10             	add    esp,0x10
c0012725:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012729:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0012733:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012737:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012740:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012744:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001274d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012751:	8b 00                	mov    eax,DWORD PTR [eax]
c0012753:	83 c0 08             	add    eax,0x8
c0012756:	8b 00                	mov    eax,DWORD PTR [eax]
c0012758:	6a 00                	push   0x0
c001275a:	6a 00                	push   0x0
c001275c:	6a 00                	push   0x0
c001275e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012762:	ff d0                	call   eax
c0012764:	83 c4 10             	add    esp,0x10
c0012767:	eb 07                	jmp    c0012770 <ACPI::detectPCI()+0x4dc>
c0012769:	8d 76 00             	lea    esi,[esi+0x0]
c001276c:	90                   	nop
c001276d:	8d 76 00             	lea    esi,[esi+0x0]
c0012770:	90                   	nop
c0012771:	83 c4 68             	add    esp,0x68
c0012774:	5b                   	pop    ebx
c0012775:	c3                   	ret    
c0012776:	66 90                	xchg   ax,ax

c0012778 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0012778:	83 ec 1c             	sub    esp,0x1c
c001277b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001277f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012782:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012786:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c001278b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012790:	83 ec 08             	sub    esp,0x8
c0012793:	52                   	push   edx
c0012794:	50                   	push   eax
c0012795:	e8 44 68 ff ff       	call   c0008fde <Computer::readCMOS(unsigned char)>
c001279a:	83 c4 10             	add    esp,0x10
c001279d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00127a1:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c00127a6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00127ab:	83 ec 04             	sub    esp,0x4
c00127ae:	6a 01                	push   0x1
c00127b0:	52                   	push   edx
c00127b1:	50                   	push   eax
c00127b2:	e8 03 6a ff ff       	call   c00091ba <Computer::writeCMOS(unsigned char, unsigned char)>
c00127b7:	83 c4 10             	add    esp,0x10
c00127ba:	90                   	nop
c00127bb:	83 c4 1c             	add    esp,0x1c
c00127be:	c3                   	ret    
c00127bf:	90                   	nop

c00127c0 <ACPI::sleep()>:
c00127c0:	83 ec 0c             	sub    esp,0xc
c00127c3:	83 ec 0c             	sub    esp,0xc
c00127c6:	68 19 54 02 c0       	push   0xc0025419
c00127cb:	e8 2f a5 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00127d0:	83 c4 10             	add    esp,0x10
c00127d3:	a1 20 85 02 c0       	mov    eax,ds:0xc0028520
c00127d8:	85 c0                	test   eax,eax
c00127da:	74 18                	je     c00127f4 <ACPI::sleep()+0x34>
c00127dc:	83 ec 0c             	sub    esp,0xc
c00127df:	68 26 54 02 c0       	push   0xc0025426
c00127e4:	e8 16 a5 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00127e9:	83 c4 10             	add    esp,0x10
c00127ec:	a1 20 85 02 c0       	mov    eax,ds:0xc0028520
c00127f1:	ff d0                	call   eax
c00127f3:	90                   	nop
c00127f4:	90                   	nop
c00127f5:	83 c4 0c             	add    esp,0xc
c00127f8:	c3                   	ret    
c00127f9:	90                   	nop
c00127fa:	66 90                	xchg   ax,ax

c00127fc <ACPI::open(int, int, void*)>:
c00127fc:	57                   	push   edi
c00127fd:	56                   	push   esi
c00127fe:	53                   	push   ebx
c00127ff:	81 ec 70 01 00 00    	sub    esp,0x170
c0012805:	83 ec 0c             	sub    esp,0xc
c0012808:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001280f:	e8 80 fa ff ff       	call   c0012294 <ACPI::detectPCI()>
c0012814:	83 c4 10             	add    esp,0x10
c0012817:	83 ec 0c             	sub    esp,0xc
c001281a:	68 84 52 02 c0       	push   0xc0025284
c001281f:	e8 45 72 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012824:	83 c4 10             	add    esp,0x10
c0012827:	83 ec 0c             	sub    esp,0xc
c001282a:	68 40 54 02 c0       	push   0xc0025440
c001282f:	e8 c3 49 00 00       	call   c00171f7 <Thr::loadKernelSymbolTable(char const*)>
c0012834:	83 c4 10             	add    esp,0x10
c0012837:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c001283f:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c001284a:	83 ec 0c             	sub    esp,0xc
c001284d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012854:	e8 b6 71 ff ff       	call   c0009a0f <malloc>
c0012859:	83 c4 10             	add    esp,0x10
c001285c:	89 c3                	mov    ebx,eax
c001285e:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0012863:	83 ec 04             	sub    esp,0x4
c0012866:	50                   	push   eax
c0012867:	68 5e 54 02 c0       	push   0xc002545e
c001286c:	53                   	push   ebx
c001286d:	e8 f8 a9 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0012872:	83 c4 10             	add    esp,0x10
c0012875:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c001287c:	83 ec 08             	sub    esp,0x8
c001287f:	6a 01                	push   0x1
c0012881:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012888:	e8 9f aa ff ff       	call   c000d32c <File::open(FileOpenMode)>
c001288d:	83 c4 10             	add    esp,0x10
c0012890:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0012897:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c001289f:	75 17                	jne    c00128b8 <ACPI::open(int, int, void*)+0xbc>
c00128a1:	83 ec 0c             	sub    esp,0xc
c00128a4:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00128ab:	e8 da aa ff ff       	call   c000d38a <File::close()>
c00128b0:	83 c4 10             	add    esp,0x10
c00128b3:	eb 0b                	jmp    c00128c0 <ACPI::open(int, int, void*)+0xc4>
c00128b5:	8d 76 00             	lea    esi,[esi+0x0]
c00128b8:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c00128c0:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c00128c8:	74 1e                	je     c00128e8 <ACPI::open(int, int, void*)+0xec>
c00128ca:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c00128d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00128d3:	83 c0 08             	add    eax,0x8
c00128d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00128d8:	83 ec 0c             	sub    esp,0xc
c00128db:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00128e2:	ff d0                	call   eax
c00128e4:	83 c4 10             	add    esp,0x10
c00128e7:	90                   	nop
c00128e8:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c00128ef:	83 f0 01             	xor    eax,0x1
c00128f2:	84 c0                	test   al,al
c00128f4:	74 42                	je     c0012938 <ACPI::open(int, int, void*)+0x13c>
c00128f6:	83 ec 0c             	sub    esp,0xc
c00128f9:	68 7c 54 02 c0       	push   0xc002547c
c00128fe:	e8 66 71 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012903:	83 c4 10             	add    esp,0x10
c0012906:	83 ec 04             	sub    esp,0x4
c0012909:	6a 0c                	push   0xc
c001290b:	68 97 54 02 c0       	push   0xc0025497
c0012910:	68 a8 54 02 c0       	push   0xc00254a8
c0012915:	e8 47 2f 00 00       	call   c0015861 <Reg::readIntWithDefault(char*, char*, int)>
c001291a:	83 c4 10             	add    esp,0x10
c001291d:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012924:	83 ec 0c             	sub    esp,0xc
c0012927:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c001292e:	e8 b0 92 ff ff       	call   c000bbe3 <Virt::setupPageSwapping(int)>
c0012933:	83 c4 10             	add    esp,0x10
c0012936:	66 90                	xchg   ax,ax
c0012938:	83 ec 0c             	sub    esp,0xc
c001293b:	68 86 3c 02 c0       	push   0xc0023c86
c0012940:	e8 24 71 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012945:	83 c4 10             	add    esp,0x10
c0012948:	8b 1d e8 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ee8
c001294e:	83 ec 08             	sub    esp,0x8
c0012951:	6a 01                	push   0x1
c0012953:	68 af 54 02 c0       	push   0xc00254af
c0012958:	e8 11 53 00 00       	call   c0017c6e <Thr::loadDLL(char const*, bool)>
c001295d:	83 c4 10             	add    esp,0x10
c0012960:	83 ec 08             	sub    esp,0x8
c0012963:	53                   	push   ebx
c0012964:	50                   	push   eax
c0012965:	e8 35 55 00 00       	call   c0017e9f <Thr::executeDLL(unsigned long, void*)>
c001296a:	83 c4 10             	add    esp,0x10
c001296d:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012974:	83 ec 08             	sub    esp,0x8
c0012977:	6a 12                	push   0x12
c0012979:	50                   	push   eax
c001297a:	e8 ab bb ff ff       	call   c000e52a <getDevicesOfType(DeviceType)>
c001297f:	83 c4 0c             	add    esp,0xc
c0012982:	66 90                	xchg   ax,ax
c0012984:	83 ec 0c             	sub    esp,0xc
c0012987:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001298e:	50                   	push   eax
c001298f:	e8 ec 04 01 00       	call   c0022e80 <LinkedList<Device>::isEmpty()>
c0012994:	83 c4 10             	add    esp,0x10
c0012997:	83 f0 01             	xor    eax,0x1
c001299a:	84 c0                	test   al,al
c001299c:	0f 84 46 01 00 00    	je     c0012ae8 <ACPI::open(int, int, void*)+0x2ec>
c00129a2:	83 ec 0c             	sub    esp,0xc
c00129a5:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00129ac:	50                   	push   eax
c00129ad:	e8 ea 04 01 00       	call   c0022e9c <LinkedList<Device>::getFirstElement()>
c00129b2:	83 c4 10             	add    esp,0x10
c00129b5:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c00129bc:	83 ec 0c             	sub    esp,0xc
c00129bf:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00129c6:	50                   	push   eax
c00129c7:	e8 d8 04 01 00       	call   c0022ea4 <LinkedList<Device>::removeFirst()>
c00129cc:	83 c4 10             	add    esp,0x10
c00129cf:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c00129d6:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c00129dd:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c00129e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00129e8:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00129ee:	ba 09 00 00 00       	mov    edx,0x9
c00129f3:	fc                   	cld    
c00129f4:	89 c7                	mov    edi,eax
c00129f6:	89 de                	mov    esi,ebx
c00129f8:	89 d1                	mov    ecx,edx
c00129fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00129fc:	83 ec 08             	sub    esp,0x8
c00129ff:	8d 44 24 38          	lea    eax,[esp+0x38]
c0012a03:	50                   	push   eax
c0012a04:	83 ec 24             	sub    esp,0x24
c0012a07:	89 e0                	mov    eax,esp
c0012a09:	89 c3                	mov    ebx,eax
c0012a0b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012a0f:	ba 09 00 00 00       	mov    edx,0x9
c0012a14:	89 df                	mov    edi,ebx
c0012a16:	89 c6                	mov    esi,eax
c0012a18:	89 d1                	mov    ecx,edx
c0012a1a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012a1c:	e8 cf ac 00 00       	call   c001d6f0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012a21:	83 c4 30             	add    esp,0x30
c0012a24:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0012a2b:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0012a33:	0f 84 4b ff ff ff    	je     c0012984 <ACPI::open(int, int, void*)+0x188>
c0012a39:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0012a44:	83 ec 0c             	sub    esp,0xc
c0012a47:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0012a4e:	e8 bc 6f ff ff       	call   c0009a0f <malloc>
c0012a53:	83 c4 10             	add    esp,0x10
c0012a56:	89 c3                	mov    ebx,eax
c0012a58:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0012a5d:	83 ec 04             	sub    esp,0x4
c0012a60:	50                   	push   eax
c0012a61:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012a68:	53                   	push   ebx
c0012a69:	e8 fc a7 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0012a6e:	83 c4 10             	add    esp,0x10
c0012a71:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012a78:	83 ec 0c             	sub    esp,0xc
c0012a7b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012a82:	e8 13 ab ff ff       	call   c000d59a <File::exists()>
c0012a87:	83 c4 10             	add    esp,0x10
c0012a8a:	84 c0                	test   al,al
c0012a8c:	74 2a                	je     c0012ab8 <ACPI::open(int, int, void*)+0x2bc>
c0012a8e:	83 ec 08             	sub    esp,0x8
c0012a91:	6a 01                	push   0x1
c0012a93:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012a9a:	e8 cf 51 00 00       	call   c0017c6e <Thr::loadDLL(char const*, bool)>
c0012a9f:	83 c4 10             	add    esp,0x10
c0012aa2:	83 ec 08             	sub    esp,0x8
c0012aa5:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012aac:	50                   	push   eax
c0012aad:	e8 ed 53 00 00       	call   c0017e9f <Thr::executeDLL(unsigned long, void*)>
c0012ab2:	83 c4 10             	add    esp,0x10
c0012ab5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ab8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0012ac0:	0f 84 be fe ff ff    	je     c0012984 <ACPI::open(int, int, void*)+0x188>
c0012ac6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012acd:	8b 00                	mov    eax,DWORD PTR [eax]
c0012acf:	83 c0 08             	add    eax,0x8
c0012ad2:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ad4:	83 ec 0c             	sub    esp,0xc
c0012ad7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012ade:	ff d0                	call   eax
c0012ae0:	83 c4 10             	add    esp,0x10
c0012ae3:	e9 9c fe ff ff       	jmp    c0012984 <ACPI::open(int, int, void*)+0x188>
c0012ae8:	83 ec 0c             	sub    esp,0xc
c0012aeb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012af2:	50                   	push   eax
c0012af3:	e8 84 03 01 00       	call   c0022e7c <LinkedList<Device>::~LinkedList()>
c0012af8:	83 c4 10             	add    esp,0x10
c0012afb:	8b 1d e8 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ee8
c0012b01:	83 ec 08             	sub    esp,0x8
c0012b04:	6a 01                	push   0x1
c0012b06:	68 ca 54 02 c0       	push   0xc00254ca
c0012b0b:	e8 5e 51 00 00       	call   c0017c6e <Thr::loadDLL(char const*, bool)>
c0012b10:	83 c4 10             	add    esp,0x10
c0012b13:	83 ec 08             	sub    esp,0x8
c0012b16:	53                   	push   ebx
c0012b17:	50                   	push   eax
c0012b18:	e8 82 53 00 00       	call   c0017e9f <Thr::executeDLL(unsigned long, void*)>
c0012b1d:	83 c4 10             	add    esp,0x10
c0012b20:	8b 1d e8 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ee8
c0012b26:	83 ec 08             	sub    esp,0x8
c0012b29:	6a 01                	push   0x1
c0012b2b:	68 e7 54 02 c0       	push   0xc00254e7
c0012b30:	e8 39 51 00 00       	call   c0017c6e <Thr::loadDLL(char const*, bool)>
c0012b35:	83 c4 10             	add    esp,0x10
c0012b38:	83 ec 08             	sub    esp,0x8
c0012b3b:	53                   	push   ebx
c0012b3c:	50                   	push   eax
c0012b3d:	e8 5d 53 00 00       	call   c0017e9f <Thr::executeDLL(unsigned long, void*)>
c0012b42:	83 c4 10             	add    esp,0x10
c0012b45:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c0012b4a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012b50:	83 e0 04             	and    eax,0x4
c0012b53:	84 c0                	test   al,al
c0012b55:	0f 84 15 01 00 00    	je     c0012c70 <ACPI::open(int, int, void*)+0x474>
c0012b5b:	83 ec 0c             	sub    esp,0xc
c0012b5e:	68 04 55 02 c0       	push   0xc0025504
c0012b63:	e8 01 6f ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012b68:	83 c4 10             	add    esp,0x10
c0012b6b:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0012b76:	83 ec 0c             	sub    esp,0xc
c0012b79:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012b80:	e8 8a 6e ff ff       	call   c0009a0f <malloc>
c0012b85:	83 c4 10             	add    esp,0x10
c0012b88:	89 c3                	mov    ebx,eax
c0012b8a:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0012b8f:	83 ec 04             	sub    esp,0x4
c0012b92:	50                   	push   eax
c0012b93:	68 21 55 02 c0       	push   0xc0025521
c0012b98:	53                   	push   ebx
c0012b99:	e8 cc a6 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0012b9e:	83 c4 10             	add    esp,0x10
c0012ba1:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0012ba8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012bb0:	74 1a                	je     c0012bcc <ACPI::open(int, int, void*)+0x3d0>
c0012bb2:	83 ec 0c             	sub    esp,0xc
c0012bb5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012bbc:	e8 d9 a9 ff ff       	call   c000d59a <File::exists()>
c0012bc1:	83 c4 10             	add    esp,0x10
c0012bc4:	84 c0                	test   al,al
c0012bc6:	74 04                	je     c0012bcc <ACPI::open(int, int, void*)+0x3d0>
c0012bc8:	b0 01                	mov    al,0x1
c0012bca:	eb 04                	jmp    c0012bd0 <ACPI::open(int, int, void*)+0x3d4>
c0012bcc:	b0 00                	mov    al,0x0
c0012bce:	66 90                	xchg   ax,ax
c0012bd0:	84 c0                	test   al,al
c0012bd2:	74 28                	je     c0012bfc <ACPI::open(int, int, void*)+0x400>
c0012bd4:	83 ec 08             	sub    esp,0x8
c0012bd7:	6a 01                	push   0x1
c0012bd9:	68 21 55 02 c0       	push   0xc0025521
c0012bde:	e8 8b 50 00 00       	call   c0017c6e <Thr::loadDLL(char const*, bool)>
c0012be3:	83 c4 10             	add    esp,0x10
c0012be6:	83 ec 08             	sub    esp,0x8
c0012be9:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0012bf0:	50                   	push   eax
c0012bf1:	e8 a9 52 00 00       	call   c0017e9f <Thr::executeDLL(unsigned long, void*)>
c0012bf6:	83 c4 10             	add    esp,0x10
c0012bf9:	8d 76 00             	lea    esi,[esi+0x0]
c0012bfc:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012c04:	74 2a                	je     c0012c30 <ACPI::open(int, int, void*)+0x434>
c0012c06:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012c0e:	74 20                	je     c0012c30 <ACPI::open(int, int, void*)+0x434>
c0012c10:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0012c17:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c19:	83 c0 08             	add    eax,0x8
c0012c1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c1e:	83 ec 0c             	sub    esp,0xc
c0012c21:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012c28:	ff d0                	call   eax
c0012c2a:	83 c4 10             	add    esp,0x10
c0012c2d:	8d 76 00             	lea    esi,[esi+0x0]
c0012c30:	a1 48 87 02 c0       	mov    eax,ds:0xc0028748
c0012c35:	83 ec 08             	sub    esp,0x8
c0012c38:	68 3e 55 02 c0       	push   0xc002553e
c0012c3d:	50                   	push   eax
c0012c3e:	e8 e1 ee ff ff       	call   c0011b24 <findDataTable(unsigned char*, char*)>
c0012c43:	83 c4 10             	add    esp,0x10
c0012c46:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0012c4d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0012c55:	74 19                	je     c0012c70 <ACPI::open(int, int, void*)+0x474>
c0012c57:	83 ec 08             	sub    esp,0x8
c0012c5a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012c61:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012c68:	e8 0b fb ff ff       	call   c0012778 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0012c6d:	83 c4 10             	add    esp,0x10
c0012c70:	b8 00 00 00 00       	mov    eax,0x0
c0012c75:	81 c4 70 01 00 00    	add    esp,0x170
c0012c7b:	5b                   	pop    ebx
c0012c7c:	5e                   	pop    esi
c0012c7d:	5f                   	pop    edi
c0012c7e:	c3                   	ret    
c0012c7f:	90                   	nop

c0012c80 <CPU::close(int, int, void*)>:
c0012c80:	31 c0                	xor    eax,eax
c0012c82:	c3                   	ret    
c0012c83:	90                   	nop

c0012c84 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0012c84:	55                   	push   ebp
c0012c85:	57                   	push   edi
c0012c86:	56                   	push   esi
c0012c87:	53                   	push   ebx
c0012c88:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012c8c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012c90:	89 ce                	mov    esi,ecx
c0012c92:	89 d5                	mov    ebp,edx
c0012c94:	80 f9 04             	cmp    cl,0x4
c0012c97:	75 28                	jne    c0012cc1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0012c99:	8d 42 f9             	lea    eax,[edx-0x7]
c0012c9c:	3c 03                	cmp    al,0x3
c0012c9e:	0f 86 63 01 00 00    	jbe    c0012e07 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012ca4:	80 fa 03             	cmp    dl,0x3
c0012ca7:	0f 84 5a 01 00 00    	je     c0012e07 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012cad:	8d 7a f2             	lea    edi,[edx-0xe]
c0012cb0:	b8 b0 77 02 c0       	mov    eax,0xc00277b0
c0012cb5:	89 fb                	mov    ebx,edi
c0012cb7:	80 fb 01             	cmp    bl,0x1
c0012cba:	77 4e                	ja     c0012d0a <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0012cbc:	e9 52 01 00 00       	jmp    c0012e13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012cc1:	80 f9 05             	cmp    cl,0x5
c0012cc4:	75 4d                	jne    c0012d13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0012cc6:	b8 c0 77 02 c0       	mov    eax,0xc00277c0
c0012ccb:	80 fa 03             	cmp    dl,0x3
c0012cce:	0f 86 3f 01 00 00    	jbe    c0012e13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012cd4:	8d 7a fa             	lea    edi,[edx-0x6]
c0012cd7:	b8 d0 77 02 c0       	mov    eax,0xc00277d0
c0012cdc:	89 fb                	mov    ebx,edi
c0012cde:	80 fb 01             	cmp    bl,0x1
c0012ce1:	0f 86 2c 01 00 00    	jbe    c0012e13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ce7:	b8 e0 77 02 c0       	mov    eax,0xc00277e0
c0012cec:	80 fa 08             	cmp    dl,0x8
c0012cef:	0f 84 1e 01 00 00    	je     c0012e13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012cf5:	89 d7                	mov    edi,edx
c0012cf7:	b8 f0 77 02 c0       	mov    eax,0xc00277f0
c0012cfc:	83 e7 fb             	and    edi,0xfffffffb
c0012cff:	89 fb                	mov    ebx,edi
c0012d01:	80 fb 09             	cmp    bl,0x9
c0012d04:	0f 84 09 01 00 00    	je     c0012e13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d0a:	31 c0                	xor    eax,eax
c0012d0c:	89 eb                	mov    ebx,ebp
c0012d0e:	0f b6 fb             	movzx  edi,bl
c0012d11:	eb 30                	jmp    c0012d43 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0012d13:	31 c0                	xor    eax,eax
c0012d15:	80 f9 06             	cmp    cl,0x6
c0012d18:	75 f2                	jne    c0012d0c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012d1a:	80 fa 0a             	cmp    dl,0xa
c0012d1d:	77 ed                	ja     c0012d0c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012d1f:	bf de 05 00 00       	mov    edi,0x5de
c0012d24:	0f a3 d7             	bt     edi,edx
c0012d27:	73 e3                	jae    c0012d0c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012d29:	b8 00 78 02 c0       	mov    eax,0xc0027800
c0012d2e:	e9 e0 00 00 00       	jmp    c0012e13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d33:	39 c7                	cmp    edi,eax
c0012d35:	0f 84 d3 00 00 00    	je     c0012e0e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012d3b:	40                   	inc    eax
c0012d3c:	3d d0 00 00 00       	cmp    eax,0xd0
c0012d41:	74 09                	je     c0012d4c <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0012d43:	89 f3                	mov    ebx,esi
c0012d45:	80 fb 0f             	cmp    bl,0xf
c0012d48:	75 f1                	jne    c0012d3b <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0012d4a:	eb e7                	jmp    c0012d33 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0012d4c:	80 f9 10             	cmp    cl,0x10
c0012d4f:	75 14                	jne    c0012d65 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0012d51:	8d 42 fc             	lea    eax,[edx-0x4]
c0012d54:	83 e0 fb             	and    eax,0xfffffffb
c0012d57:	3c 02                	cmp    al,0x2
c0012d59:	76 34                	jbe    c0012d8f <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0012d5b:	b8 c5 56 02 c0       	mov    eax,0xc00256c5
c0012d60:	80 fa 02             	cmp    dl,0x2
c0012d63:	eb 24                	jmp    c0012d89 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012d65:	80 f9 11             	cmp    cl,0x11
c0012d68:	75 13                	jne    c0012d7d <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0012d6a:	b8 c5 56 02 c0       	mov    eax,0xc00256c5
c0012d6f:	80 fa 03             	cmp    dl,0x3
c0012d72:	0f 85 9b 00 00 00    	jne    c0012e13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d78:	e9 91 00 00 00       	jmp    c0012e0e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012d7d:	80 f9 12             	cmp    cl,0x12
c0012d80:	75 14                	jne    c0012d96 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0012d82:	b8 c5 56 02 c0       	mov    eax,0xc00256c5
c0012d87:	fe ca                	dec    dl
c0012d89:	0f 85 84 00 00 00    	jne    c0012e13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d8f:	b8 20 78 02 c0       	mov    eax,0xc0027820
c0012d94:	eb 7d                	jmp    c0012e13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d96:	80 f9 14             	cmp    cl,0x14
c0012d99:	75 12                	jne    c0012dad <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0012d9b:	4a                   	dec    edx
c0012d9c:	b8 c5 56 02 c0       	mov    eax,0xc00256c5
c0012da1:	80 fa 01             	cmp    dl,0x1
c0012da4:	77 6d                	ja     c0012e13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012da6:	b8 30 78 02 c0       	mov    eax,0xc0027830
c0012dab:	eb 66                	jmp    c0012e13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012dad:	80 f9 15             	cmp    cl,0x15
c0012db0:	75 31                	jne    c0012de3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0012db2:	b8 40 78 02 c0       	mov    eax,0xc0027840
c0012db7:	80 fa 01             	cmp    dl,0x1
c0012dba:	74 57                	je     c0012e13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012dbc:	b8 c5 56 02 c0       	mov    eax,0xc00256c5
c0012dc1:	80 fa 13             	cmp    dl,0x13
c0012dc4:	76 0c                	jbe    c0012dd2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0012dc6:	80 fa 30             	cmp    dl,0x30
c0012dc9:	75 48                	jne    c0012e13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012dcb:	b8 60 78 02 c0       	mov    eax,0xc0027860
c0012dd0:	eb 41                	jmp    c0012e13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012dd2:	b9 04 00 09 00       	mov    ecx,0x90004
c0012dd7:	0f a3 d1             	bt     ecx,edx
c0012dda:	73 37                	jae    c0012e13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ddc:	b8 50 78 02 c0       	mov    eax,0xc0027850
c0012de1:	eb 30                	jmp    c0012e13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012de3:	b8 c5 56 02 c0       	mov    eax,0xc00256c5
c0012de8:	80 f9 16             	cmp    cl,0x16
c0012deb:	75 26                	jne    c0012e13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ded:	b8 70 78 02 c0       	mov    eax,0xc0027870
c0012df2:	84 d2                	test   dl,dl
c0012df4:	74 1d                	je     c0012e13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012df6:	b8 c5 56 02 c0       	mov    eax,0xc00256c5
c0012dfb:	80 fa 30             	cmp    dl,0x30
c0012dfe:	75 13                	jne    c0012e13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e00:	b8 80 78 02 c0       	mov    eax,0xc0027880
c0012e05:	eb 0c                	jmp    c0012e13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e07:	b8 a0 77 02 c0       	mov    eax,0xc00277a0
c0012e0c:	eb 05                	jmp    c0012e13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e0e:	b8 10 78 02 c0       	mov    eax,0xc0027810
c0012e13:	5b                   	pop    ebx
c0012e14:	5e                   	pop    esi
c0012e15:	5f                   	pop    edi
c0012e16:	5d                   	pop    ebp
c0012e17:	c3                   	ret    

c0012e18 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0012e18:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012e20:	80 f9 04             	cmp    cl,0x4
c0012e23:	75 6b                	jne    c0012e90 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0012e25:	b8 00 76 02 c0       	mov    eax,0xc0027600
c0012e2a:	80 fa 01             	cmp    dl,0x1
c0012e2d:	0f 86 92 02 00 00    	jbe    c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e33:	b8 10 76 02 c0       	mov    eax,0xc0027610
c0012e38:	80 fa 02             	cmp    dl,0x2
c0012e3b:	0f 84 84 02 00 00    	je     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e41:	b8 20 76 02 c0       	mov    eax,0xc0027620
c0012e46:	80 fa 03             	cmp    dl,0x3
c0012e49:	0f 84 76 02 00 00    	je     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e4f:	b8 30 76 02 c0       	mov    eax,0xc0027630
c0012e54:	80 fa 04             	cmp    dl,0x4
c0012e57:	0f 84 68 02 00 00    	je     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e5d:	b8 40 76 02 c0       	mov    eax,0xc0027640
c0012e62:	80 fa 05             	cmp    dl,0x5
c0012e65:	0f 84 5a 02 00 00    	je     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e6b:	b8 20 76 02 c0       	mov    eax,0xc0027620
c0012e70:	80 fa 07             	cmp    dl,0x7
c0012e73:	0f 84 4c 02 00 00    	je     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e79:	83 ea 08             	sub    edx,0x8
c0012e7c:	b8 c5 56 02 c0       	mov    eax,0xc00256c5
c0012e81:	80 fa 01             	cmp    dl,0x1
c0012e84:	0f 87 3b 02 00 00    	ja     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e8a:	b8 50 76 02 c0       	mov    eax,0xc0027650
c0012e8f:	c3                   	ret    
c0012e90:	80 f9 05             	cmp    cl,0x5
c0012e93:	75 45                	jne    c0012eda <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0012e95:	8d 4a ff             	lea    ecx,[edx-0x1]
c0012e98:	b8 60 76 02 c0       	mov    eax,0xc0027660
c0012e9d:	80 f9 02             	cmp    cl,0x2
c0012ea0:	0f 86 1f 02 00 00    	jbe    c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ea6:	80 fa 04             	cmp    dl,0x4
c0012ea9:	0f 84 f3 01 00 00    	je     c00130a2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0012eaf:	80 fa 07             	cmp    dl,0x7
c0012eb2:	0f 84 0d 02 00 00    	je     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012eb8:	b8 70 76 02 c0       	mov    eax,0xc0027670
c0012ebd:	80 fa 08             	cmp    dl,0x8
c0012ec0:	0f 84 ff 01 00 00    	je     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ec6:	b8 c5 56 02 c0       	mov    eax,0xc00256c5
c0012ecb:	80 fa 09             	cmp    dl,0x9
c0012ece:	0f 85 f1 01 00 00    	jne    c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ed4:	b8 80 76 02 c0       	mov    eax,0xc0027680
c0012ed9:	c3                   	ret    
c0012eda:	80 f9 06             	cmp    cl,0x6
c0012edd:	0f 85 85 01 00 00    	jne    c0013068 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0012ee3:	b8 90 76 02 c0       	mov    eax,0xc0027690
c0012ee8:	80 fa 01             	cmp    dl,0x1
c0012eeb:	0f 84 d4 01 00 00    	je     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ef1:	8d 42 fb             	lea    eax,[edx-0x5]
c0012ef4:	3c 01                	cmp    al,0x1
c0012ef6:	0f 86 ac 01 00 00    	jbe    c00130a8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012efc:	80 fa 03             	cmp    dl,0x3
c0012eff:	0f 84 a3 01 00 00    	je     c00130a8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012f05:	8d 4a f9             	lea    ecx,[edx-0x7]
c0012f08:	b8 b0 76 02 c0       	mov    eax,0xc00276b0
c0012f0d:	80 f9 01             	cmp    cl,0x1
c0012f10:	0f 86 af 01 00 00    	jbe    c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f16:	80 fa 09             	cmp    dl,0x9
c0012f19:	0f 84 8f 01 00 00    	je     c00130ae <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0012f1f:	8d 4a f6             	lea    ecx,[edx-0xa]
c0012f22:	80 f9 01             	cmp    cl,0x1
c0012f25:	0f 86 9a 01 00 00    	jbe    c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f2b:	b8 c0 76 02 c0       	mov    eax,0xc00276c0
c0012f30:	80 fa 0d             	cmp    dl,0xd
c0012f33:	0f 84 8c 01 00 00    	je     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f39:	b8 d0 76 02 c0       	mov    eax,0xc00276d0
c0012f3e:	80 fa 0e             	cmp    dl,0xe
c0012f41:	0f 84 7e 01 00 00    	je     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f47:	b8 e0 76 02 c0       	mov    eax,0xc00276e0
c0012f4c:	80 fa 0f             	cmp    dl,0xf
c0012f4f:	0f 84 70 01 00 00    	je     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f55:	b8 c0 76 02 c0       	mov    eax,0xc00276c0
c0012f5a:	80 fa 15             	cmp    dl,0x15
c0012f5d:	0f 84 62 01 00 00    	je     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f63:	8d 4a ea             	lea    ecx,[edx-0x16]
c0012f66:	b8 e0 76 02 c0       	mov    eax,0xc00276e0
c0012f6b:	80 f9 01             	cmp    cl,0x1
c0012f6e:	0f 86 51 01 00 00    	jbe    c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f74:	80 fa 1a             	cmp    dl,0x1a
c0012f77:	0f 84 37 01 00 00    	je     c00130b4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0012f7d:	80 fa 1c             	cmp    dl,0x1c
c0012f80:	0f 84 34 01 00 00    	je     c00130ba <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0012f86:	80 fa 1d             	cmp    dl,0x1d
c0012f89:	0f 84 36 01 00 00    	je     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f8f:	b8 10 77 02 c0       	mov    eax,0xc0027710
c0012f94:	80 fa 25             	cmp    dl,0x25
c0012f97:	0f 84 28 01 00 00    	je     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f9d:	8d 4a da             	lea    ecx,[edx-0x26]
c0012fa0:	b8 00 77 02 c0       	mov    eax,0xc0027700
c0012fa5:	80 f9 01             	cmp    cl,0x1
c0012fa8:	0f 86 17 01 00 00    	jbe    c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fae:	b8 20 77 02 c0       	mov    eax,0xc0027720
c0012fb3:	80 fa 2a             	cmp    dl,0x2a
c0012fb6:	0f 84 09 01 00 00    	je     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fbc:	b8 10 77 02 c0       	mov    eax,0xc0027710
c0012fc1:	80 fa 2c             	cmp    dl,0x2c
c0012fc4:	0f 84 fb 00 00 00    	je     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fca:	b8 20 77 02 c0       	mov    eax,0xc0027720
c0012fcf:	80 fa 2d             	cmp    dl,0x2d
c0012fd2:	0f 84 ed 00 00 00    	je     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fd8:	b8 f0 76 02 c0       	mov    eax,0xc00276f0
c0012fdd:	80 fa 2e             	cmp    dl,0x2e
c0012fe0:	0f 84 df 00 00 00    	je     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fe6:	b8 10 77 02 c0       	mov    eax,0xc0027710
c0012feb:	80 fa 2f             	cmp    dl,0x2f
c0012fee:	0f 84 d1 00 00 00    	je     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ff4:	8d 4a cb             	lea    ecx,[edx-0x35]
c0012ff7:	b8 00 77 02 c0       	mov    eax,0xc0027700
c0012ffc:	80 f9 01             	cmp    cl,0x1
c0012fff:	0f 86 c0 00 00 00    	jbe    c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013005:	b8 30 77 02 c0       	mov    eax,0xc0027730
c001300a:	80 fa 37             	cmp    dl,0x37
c001300d:	0f 84 b2 00 00 00    	je     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013013:	b8 40 77 02 c0       	mov    eax,0xc0027740
c0013018:	80 fa 3a             	cmp    dl,0x3a
c001301b:	0f 84 a4 00 00 00    	je     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013021:	b8 50 77 02 c0       	mov    eax,0xc0027750
c0013026:	80 fa 3c             	cmp    dl,0x3c
c0013029:	0f 84 96 00 00 00    	je     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001302f:	b8 60 77 02 c0       	mov    eax,0xc0027760
c0013034:	80 fa 3d             	cmp    dl,0x3d
c0013037:	0f 84 88 00 00 00    	je     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001303d:	b8 40 77 02 c0       	mov    eax,0xc0027740
c0013042:	80 fa 3e             	cmp    dl,0x3e
c0013045:	74 7e                	je     c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013047:	8d 42 bb             	lea    eax,[edx-0x45]
c001304a:	3c 01                	cmp    al,0x1
c001304c:	76 72                	jbe    c00130c0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001304e:	80 fa 3f             	cmp    dl,0x3f
c0013051:	74 6d                	je     c00130c0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0013053:	80 fa 4a             	cmp    dl,0x4a
c0013056:	74 0a                	je     c0013062 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0013058:	b8 c5 56 02 c0       	mov    eax,0xc00256c5
c001305d:	80 fa 4d             	cmp    dl,0x4d
c0013060:	75 63                	jne    c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013062:	b8 30 77 02 c0       	mov    eax,0xc0027730
c0013067:	c3                   	ret    
c0013068:	b8 c5 56 02 c0       	mov    eax,0xc00256c5
c001306d:	80 f9 0b             	cmp    cl,0xb
c0013070:	75 0a                	jne    c001307c <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0013072:	fe ca                	dec    dl
c0013074:	75 4f                	jne    c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013076:	b8 70 77 02 c0       	mov    eax,0xc0027770
c001307b:	c3                   	ret    
c001307c:	80 f9 0f             	cmp    cl,0xf
c001307f:	75 44                	jne    c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013081:	b8 80 77 02 c0       	mov    eax,0xc0027780
c0013086:	80 fa 02             	cmp    dl,0x2
c0013089:	76 3a                	jbe    c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001308b:	8d 42 fd             	lea    eax,[edx-0x3]
c001308e:	3c 01                	cmp    al,0x1
c0013090:	76 0a                	jbe    c001309c <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0013092:	b8 c5 56 02 c0       	mov    eax,0xc00256c5
c0013097:	80 fa 06             	cmp    dl,0x6
c001309a:	75 29                	jne    c00130c5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001309c:	b8 90 77 02 c0       	mov    eax,0xc0027790
c00130a1:	c3                   	ret    
c00130a2:	b8 70 76 02 c0       	mov    eax,0xc0027670
c00130a7:	c3                   	ret    
c00130a8:	b8 a0 76 02 c0       	mov    eax,0xc00276a0
c00130ad:	c3                   	ret    
c00130ae:	b8 c0 76 02 c0       	mov    eax,0xc00276c0
c00130b3:	c3                   	ret    
c00130b4:	b8 f0 76 02 c0       	mov    eax,0xc00276f0
c00130b9:	c3                   	ret    
c00130ba:	b8 00 77 02 c0       	mov    eax,0xc0027700
c00130bf:	c3                   	ret    
c00130c0:	b8 50 77 02 c0       	mov    eax,0xc0027750
c00130c5:	c3                   	ret    

c00130c6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00130c6:	60                   	pusha  
c00130c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00130cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00130cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00130d3:	9c                   	pushf  
c00130d4:	fa                   	cli    
c00130d5:	0f 09                	wbinvd 
c00130d7:	0f 30                	wrmsr  
c00130d9:	9d                   	popf   
c00130da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130de:	89 02                	mov    DWORD PTR [edx],eax
c00130e0:	61                   	popa   
c00130e1:	c3                   	ret    

c00130e2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00130e2:	60                   	pusha  
c00130e3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00130e7:	9c                   	pushf  
c00130e8:	fa                   	cli    
c00130e9:	0f 09                	wbinvd 
c00130eb:	31 c0                	xor    eax,eax
c00130ed:	31 d2                	xor    edx,edx
c00130ef:	0f 32                	rdmsr  
c00130f1:	9d                   	popf   
c00130f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130f6:	89 02                	mov    DWORD PTR [edx],eax
c00130f8:	61                   	popa   
c00130f9:	c3                   	ret    

c00130fa <CPU::AMD_K6_writeback(int, int, int)>:
c00130fa:	56                   	push   esi
c00130fb:	53                   	push   ebx
c00130fc:	83 ec 10             	sub    esp,0x10
c00130ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013103:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013108:	75 5d                	jne    c0013167 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001310a:	83 f8 08             	cmp    eax,0x8
c001310d:	75 09                	jne    c0013118 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001310f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013114:	7e 13                	jle    c0013129 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0013116:	eb 30                	jmp    c0013148 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0013118:	83 f8 06             	cmp    eax,0x6
c001311b:	7c 4a                	jl     c0013167 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001311d:	83 f8 07             	cmp    eax,0x7
c0013120:	7e 07                	jle    c0013129 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0013122:	83 f8 09             	cmp    eax,0x9
c0013125:	74 21                	je     c0013148 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0013127:	eb 3e                	jmp    c0013167 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013129:	89 e6                	mov    esi,esp
c001312b:	8b 1d 0c 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f0c
c0013131:	56                   	push   esi
c0013132:	c1 eb 15             	shr    ebx,0x15
c0013135:	68 82 00 00 c0       	push   0xc0000082
c001313a:	83 e3 7e             	and    ebx,0x7e
c001313d:	e8 a0 ff ff ff       	call   c00130e2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0013142:	56                   	push   esi
c0013143:	6a 00                	push   0x0
c0013145:	53                   	push   ebx
c0013146:	eb 12                	jmp    c001315a <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0013148:	89 e3                	mov    ebx,esp
c001314a:	53                   	push   ebx
c001314b:	68 82 00 00 c0       	push   0xc0000082
c0013150:	e8 8d ff ff ff       	call   c00130e2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0013155:	53                   	push   ebx
c0013156:	6a 00                	push   0x0
c0013158:	6a 00                	push   0x0
c001315a:	68 82 00 00 c0       	push   0xc0000082
c001315f:	e8 62 ff ff ff       	call   c00130c6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0013164:	83 c4 18             	add    esp,0x18
c0013167:	83 c4 10             	add    esp,0x10
c001316a:	5b                   	pop    ebx
c001316b:	5e                   	pop    esi
c001316c:	c3                   	ret    
c001316d:	90                   	nop

c001316e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001316e:	55                   	push   ebp
c001316f:	57                   	push   edi
c0013170:	56                   	push   esi
c0013171:	53                   	push   ebx
c0013172:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013176:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001317a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001317e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013182:	39 05 a0 78 02 c0    	cmp    DWORD PTR ds:0xc00278a0,eax
c0013188:	75 23                	jne    c00131ad <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001318a:	a1 ac 89 02 c0       	mov    eax,ds:0xc00289ac
c001318f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013193:	89 06                	mov    DWORD PTR [esi],eax
c0013195:	a1 a8 89 02 c0       	mov    eax,ds:0xc00289a8
c001319a:	89 07                	mov    DWORD PTR [edi],eax
c001319c:	a1 a4 89 02 c0       	mov    eax,ds:0xc00289a4
c00131a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00131a4:	a1 a0 89 02 c0       	mov    eax,ds:0xc00289a0
c00131a9:	89 02                	mov    DWORD PTR [edx],eax
c00131ab:	eb 3f                	jmp    c00131ec <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00131ad:	31 c9                	xor    ecx,ecx
c00131af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131b3:	0f a2                	cpuid  
c00131b5:	89 06                	mov    DWORD PTR [esi],eax
c00131b7:	89 1f                	mov    DWORD PTR [edi],ebx
c00131b9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00131bd:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00131c0:	89 10                	mov    DWORD PTR [eax],edx
c00131c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131c6:	a3 a0 78 02 c0       	mov    ds:0xc00278a0,eax
c00131cb:	8b 06                	mov    eax,DWORD PTR [esi]
c00131cd:	a3 ac 89 02 c0       	mov    ds:0xc00289ac,eax
c00131d2:	8b 07                	mov    eax,DWORD PTR [edi]
c00131d4:	a3 a8 89 02 c0       	mov    ds:0xc00289a8,eax
c00131d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00131dc:	a3 a4 89 02 c0       	mov    ds:0xc00289a4,eax
c00131e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00131e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00131e7:	a3 a0 89 02 c0       	mov    ds:0xc00289a0,eax
c00131ec:	5b                   	pop    ebx
c00131ed:	5e                   	pop    esi
c00131ee:	5f                   	pop    edi
c00131ef:	5d                   	pop    ebp
c00131f0:	c3                   	ret    
c00131f1:	90                   	nop

c00131f2 <CPU::cpuidCheckEDX(unsigned int)>:
c00131f2:	83 ec 10             	sub    esp,0x10
c00131f5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131f9:	50                   	push   eax
c00131fa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131fe:	50                   	push   eax
c00131ff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013203:	50                   	push   eax
c0013204:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013208:	50                   	push   eax
c0013209:	6a 01                	push   0x1
c001320b:	e8 5e ff ff ff       	call   c001316e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013210:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013214:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013218:	0f 95 c0             	setne  al
c001321b:	83 c4 24             	add    esp,0x24
c001321e:	c3                   	ret    
c001321f:	90                   	nop

c0013220 <CPU::cpuidCheckECX(unsigned int)>:
c0013220:	83 ec 10             	sub    esp,0x10
c0013223:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013227:	50                   	push   eax
c0013228:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001322c:	50                   	push   eax
c001322d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013231:	50                   	push   eax
c0013232:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013236:	50                   	push   eax
c0013237:	6a 01                	push   0x1
c0013239:	e8 30 ff ff ff       	call   c001316e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001323e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013242:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013246:	0f 95 c0             	setne  al
c0013249:	83 c4 24             	add    esp,0x24
c001324c:	c3                   	ret    
c001324d:	90                   	nop

c001324e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001324e:	83 ec 10             	sub    esp,0x10
c0013251:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013255:	50                   	push   eax
c0013256:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001325a:	50                   	push   eax
c001325b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001325f:	50                   	push   eax
c0013260:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013264:	50                   	push   eax
c0013265:	6a 07                	push   0x7
c0013267:	e8 02 ff ff ff       	call   c001316e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001326c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013270:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0013274:	0f 95 c0             	setne  al
c0013277:	83 c4 24             	add    esp,0x24
c001327a:	c3                   	ret    
c001327b:	90                   	nop

c001327c <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001327c:	83 ec 10             	sub    esp,0x10
c001327f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013283:	50                   	push   eax
c0013284:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013288:	50                   	push   eax
c0013289:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001328d:	50                   	push   eax
c001328e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013292:	50                   	push   eax
c0013293:	6a 07                	push   0x7
c0013295:	e8 d4 fe ff ff       	call   c001316e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001329a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001329e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00132a2:	0f 95 c0             	setne  al
c00132a5:	83 c4 24             	add    esp,0x24
c00132a8:	c3                   	ret    
c00132a9:	90                   	nop

c00132aa <CPU::CPU()>:
c00132aa:	83 ec 0c             	sub    esp,0xc
c00132ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132b1:	83 ec 08             	sub    esp,0x8
c00132b4:	68 c5 56 02 c0       	push   0xc00256c5
c00132b9:	50                   	push   eax
c00132ba:	e8 eb b0 ff ff       	call   c000e3aa <Device::Device(char const*)>
c00132bf:	83 c4 10             	add    esp,0x10
c00132c2:	ba 28 59 02 c0       	mov    edx,0xc0025928
c00132c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132cb:	89 10                	mov    DWORD PTR [eax],edx
c00132cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132d1:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00132db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132df:	05 78 01 00 00       	add    eax,0x178
c00132e4:	83 ec 0c             	sub    esp,0xc
c00132e7:	50                   	push   eax
c00132e8:	e8 b7 5f ff ff       	call   c00092a4 <GDT::GDT()>
c00132ed:	83 c4 10             	add    esp,0x10
c00132f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132f4:	05 7c 09 00 00       	add    eax,0x97c
c00132f9:	83 ec 0c             	sub    esp,0xc
c00132fc:	50                   	push   eax
c00132fd:	e8 fa 61 ff ff       	call   c00094fc <IDT::IDT()>
c0013302:	83 c4 10             	add    esp,0x10
c0013305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013309:	05 7c 11 00 00       	add    eax,0x117c
c001330e:	83 ec 0c             	sub    esp,0xc
c0013311:	50                   	push   eax
c0013312:	e8 05 80 ff ff       	call   c000b31c <TSS::TSS()>
c0013317:	83 c4 10             	add    esp,0x10
c001331a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001331e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0013325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013329:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0013333:	90                   	nop
c0013334:	83 c4 0c             	add    esp,0xc
c0013337:	c3                   	ret    

c0013338 <CPU::displayFeatures()>:
c0013338:	c3                   	ret    
c0013339:	90                   	nop

c001333a <CPU::detectFeatures()>:
c001333a:	55                   	push   ebp
c001333b:	57                   	push   edi
c001333c:	56                   	push   esi
c001333d:	53                   	push   ebx
c001333e:	83 ec 50             	sub    esp,0x50
c0013341:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013345:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001334f:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013356:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001335c:	6a 0d                	push   0xd
c001335e:	6a 00                	push   0x0
c0013360:	55                   	push   ebp
c0013361:	e8 1e d3 fe ff       	call   c0000684 <memset>
c0013366:	83 c4 10             	add    esp,0x10
c0013369:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c001336e:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013375:	0f 84 22 09 00 00    	je     c0013c9d <CPU::detectFeatures()+0x963>
c001337b:	83 ec 0c             	sub    esp,0xc
c001337e:	89 ef                	mov    edi,ebp
c0013380:	6a 10                	push   0x10
c0013382:	e8 6b fe ff ff       	call   c00131f2 <CPU::cpuidCheckEDX(unsigned int)>
c0013387:	83 e0 01             	and    eax,0x1
c001338a:	8d 14 00             	lea    edx,[eax+eax*1]
c001338d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013393:	83 e0 fd             	and    eax,0xfffffffd
c0013396:	09 d0                	or     eax,edx
c0013398:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001339e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00133a5:	e8 48 fe ff ff       	call   c00131f2 <CPU::cpuidCheckEDX(unsigned int)>
c00133aa:	83 e0 01             	and    eax,0x1
c00133ad:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00133b4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00133ba:	83 e0 fb             	and    eax,0xfffffffb
c00133bd:	09 d0                	or     eax,edx
c00133bf:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00133c5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00133cc:	e8 21 fe ff ff       	call   c00131f2 <CPU::cpuidCheckEDX(unsigned int)>
c00133d1:	83 e0 01             	and    eax,0x1
c00133d4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00133db:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00133e1:	83 e0 f7             	and    eax,0xfffffff7
c00133e4:	09 d0                	or     eax,edx
c00133e6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00133ec:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00133f3:	e8 fa fd ff ff       	call   c00131f2 <CPU::cpuidCheckEDX(unsigned int)>
c00133f8:	83 e0 01             	and    eax,0x1
c00133fb:	c1 e0 04             	shl    eax,0x4
c00133fe:	88 c2                	mov    dl,al
c0013400:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013406:	83 e0 ef             	and    eax,0xffffffef
c0013409:	09 d0                	or     eax,edx
c001340b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013411:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0013418:	e8 d5 fd ff ff       	call   c00131f2 <CPU::cpuidCheckEDX(unsigned int)>
c001341d:	83 e0 01             	and    eax,0x1
c0013420:	c1 e0 05             	shl    eax,0x5
c0013423:	88 c2                	mov    dl,al
c0013425:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001342b:	83 e0 df             	and    eax,0xffffffdf
c001342e:	09 d0                	or     eax,edx
c0013430:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013436:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001343d:	e8 b0 fd ff ff       	call   c00131f2 <CPU::cpuidCheckEDX(unsigned int)>
c0013442:	83 e0 01             	and    eax,0x1
c0013445:	8d 14 00             	lea    edx,[eax+eax*1]
c0013448:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001344e:	83 e0 fd             	and    eax,0xfffffffd
c0013451:	09 d0                	or     eax,edx
c0013453:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013459:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013460:	e8 8d fd ff ff       	call   c00131f2 <CPU::cpuidCheckEDX(unsigned int)>
c0013465:	83 e0 01             	and    eax,0x1
c0013468:	c1 e0 06             	shl    eax,0x6
c001346b:	88 c2                	mov    dl,al
c001346d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013473:	83 e0 bf             	and    eax,0xffffffbf
c0013476:	09 d0                	or     eax,edx
c0013478:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001347e:	58                   	pop    eax
c001347f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013483:	50                   	push   eax
c0013484:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013488:	50                   	push   eax
c0013489:	8d 74 24 28          	lea    esi,[esp+0x28]
c001348d:	56                   	push   esi
c001348e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013492:	50                   	push   eax
c0013493:	6a 00                	push   0x0
c0013495:	e8 d4 fc ff ff       	call   c001316e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001349a:	b8 04 00 00 00       	mov    eax,0x4
c001349f:	89 c1                	mov    ecx,eax
c00134a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00134a3:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00134a9:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00134ad:	89 c1                	mov    ecx,eax
c00134af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00134b1:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00134b7:	8d 74 24 38          	lea    esi,[esp+0x38]
c00134bb:	89 c1                	mov    ecx,eax
c00134bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00134bf:	83 c4 18             	add    esp,0x18
c00134c2:	68 70 55 02 c0       	push   0xc0025570
c00134c7:	55                   	push   ebp
c00134c8:	e8 ff d2 fe ff       	call   c00007cc <strcmp>
c00134cd:	83 c4 10             	add    esp,0x10
c00134d0:	85 c0                	test   eax,eax
c00134d2:	75 0f                	jne    c00134e3 <CPU::detectFeatures()+0x1a9>
c00134d4:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00134de:	e9 22 02 00 00       	jmp    c0013705 <CPU::detectFeatures()+0x3cb>
c00134e3:	50                   	push   eax
c00134e4:	50                   	push   eax
c00134e5:	68 7d 55 02 c0       	push   0xc002557d
c00134ea:	55                   	push   ebp
c00134eb:	e8 dc d2 fe ff       	call   c00007cc <strcmp>
c00134f0:	83 c4 10             	add    esp,0x10
c00134f3:	85 c0                	test   eax,eax
c00134f5:	74 dd                	je     c00134d4 <CPU::detectFeatures()+0x19a>
c00134f7:	50                   	push   eax
c00134f8:	50                   	push   eax
c00134f9:	68 8a 55 02 c0       	push   0xc002558a
c00134fe:	55                   	push   ebp
c00134ff:	e8 c8 d2 fe ff       	call   c00007cc <strcmp>
c0013504:	83 c4 10             	add    esp,0x10
c0013507:	85 c0                	test   eax,eax
c0013509:	74 2a                	je     c0013535 <CPU::detectFeatures()+0x1fb>
c001350b:	50                   	push   eax
c001350c:	50                   	push   eax
c001350d:	68 97 55 02 c0       	push   0xc0025597
c0013512:	55                   	push   ebp
c0013513:	e8 b4 d2 fe ff       	call   c00007cc <strcmp>
c0013518:	83 c4 10             	add    esp,0x10
c001351b:	85 c0                	test   eax,eax
c001351d:	74 16                	je     c0013535 <CPU::detectFeatures()+0x1fb>
c001351f:	50                   	push   eax
c0013520:	50                   	push   eax
c0013521:	68 a4 55 02 c0       	push   0xc00255a4
c0013526:	55                   	push   ebp
c0013527:	e8 a0 d2 fe ff       	call   c00007cc <strcmp>
c001352c:	83 c4 10             	add    esp,0x10
c001352f:	85 c0                	test   eax,eax
c0013531:	74 48                	je     c001357b <CPU::detectFeatures()+0x241>
c0013533:	eb 0f                	jmp    c0013544 <CPU::detectFeatures()+0x20a>
c0013535:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001353f:	e9 c1 01 00 00       	jmp    c0013705 <CPU::detectFeatures()+0x3cb>
c0013544:	50                   	push   eax
c0013545:	50                   	push   eax
c0013546:	68 b1 55 02 c0       	push   0xc00255b1
c001354b:	55                   	push   ebp
c001354c:	e8 7b d2 fe ff       	call   c00007cc <strcmp>
c0013551:	83 c4 10             	add    esp,0x10
c0013554:	85 c0                	test   eax,eax
c0013556:	74 23                	je     c001357b <CPU::detectFeatures()+0x241>
c0013558:	57                   	push   edi
c0013559:	57                   	push   edi
c001355a:	68 be 55 02 c0       	push   0xc00255be
c001355f:	55                   	push   ebp
c0013560:	e8 67 d2 fe ff       	call   c00007cc <strcmp>
c0013565:	83 c4 10             	add    esp,0x10
c0013568:	85 c0                	test   eax,eax
c001356a:	75 1e                	jne    c001358a <CPU::detectFeatures()+0x250>
c001356c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013576:	e9 8a 01 00 00       	jmp    c0013705 <CPU::detectFeatures()+0x3cb>
c001357b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013585:	e9 7b 01 00 00       	jmp    c0013705 <CPU::detectFeatures()+0x3cb>
c001358a:	56                   	push   esi
c001358b:	56                   	push   esi
c001358c:	68 cb 55 02 c0       	push   0xc00255cb
c0013591:	55                   	push   ebp
c0013592:	e8 35 d2 fe ff       	call   c00007cc <strcmp>
c0013597:	83 c4 10             	add    esp,0x10
c001359a:	85 c0                	test   eax,eax
c001359c:	75 0f                	jne    c00135ad <CPU::detectFeatures()+0x273>
c001359e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00135a8:	e9 58 01 00 00       	jmp    c0013705 <CPU::detectFeatures()+0x3cb>
c00135ad:	51                   	push   ecx
c00135ae:	51                   	push   ecx
c00135af:	68 8a 55 02 c0       	push   0xc002558a
c00135b4:	55                   	push   ebp
c00135b5:	e8 12 d2 fe ff       	call   c00007cc <strcmp>
c00135ba:	83 c4 10             	add    esp,0x10
c00135bd:	85 c0                	test   eax,eax
c00135bf:	75 0f                	jne    c00135d0 <CPU::detectFeatures()+0x296>
c00135c1:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00135cb:	e9 35 01 00 00       	jmp    c0013705 <CPU::detectFeatures()+0x3cb>
c00135d0:	52                   	push   edx
c00135d1:	52                   	push   edx
c00135d2:	68 d8 55 02 c0       	push   0xc00255d8
c00135d7:	55                   	push   ebp
c00135d8:	e8 ef d1 fe ff       	call   c00007cc <strcmp>
c00135dd:	83 c4 10             	add    esp,0x10
c00135e0:	85 c0                	test   eax,eax
c00135e2:	75 0f                	jne    c00135f3 <CPU::detectFeatures()+0x2b9>
c00135e4:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00135ee:	e9 12 01 00 00       	jmp    c0013705 <CPU::detectFeatures()+0x3cb>
c00135f3:	50                   	push   eax
c00135f4:	50                   	push   eax
c00135f5:	68 e5 55 02 c0       	push   0xc00255e5
c00135fa:	55                   	push   ebp
c00135fb:	e8 cc d1 fe ff       	call   c00007cc <strcmp>
c0013600:	83 c4 10             	add    esp,0x10
c0013603:	85 c0                	test   eax,eax
c0013605:	75 0f                	jne    c0013616 <CPU::detectFeatures()+0x2dc>
c0013607:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013611:	e9 ef 00 00 00       	jmp    c0013705 <CPU::detectFeatures()+0x3cb>
c0013616:	50                   	push   eax
c0013617:	50                   	push   eax
c0013618:	68 f2 55 02 c0       	push   0xc00255f2
c001361d:	55                   	push   ebp
c001361e:	e8 a9 d1 fe ff       	call   c00007cc <strcmp>
c0013623:	83 c4 10             	add    esp,0x10
c0013626:	85 c0                	test   eax,eax
c0013628:	75 0f                	jne    c0013639 <CPU::detectFeatures()+0x2ff>
c001362a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013634:	e9 cc 00 00 00       	jmp    c0013705 <CPU::detectFeatures()+0x3cb>
c0013639:	50                   	push   eax
c001363a:	50                   	push   eax
c001363b:	68 ff 55 02 c0       	push   0xc00255ff
c0013640:	55                   	push   ebp
c0013641:	e8 86 d1 fe ff       	call   c00007cc <strcmp>
c0013646:	83 c4 10             	add    esp,0x10
c0013649:	85 c0                	test   eax,eax
c001364b:	75 0f                	jne    c001365c <CPU::detectFeatures()+0x322>
c001364d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013657:	e9 a9 00 00 00       	jmp    c0013705 <CPU::detectFeatures()+0x3cb>
c001365c:	50                   	push   eax
c001365d:	50                   	push   eax
c001365e:	68 0c 56 02 c0       	push   0xc002560c
c0013663:	55                   	push   ebp
c0013664:	e8 63 d1 fe ff       	call   c00007cc <strcmp>
c0013669:	83 c4 10             	add    esp,0x10
c001366c:	85 c0                	test   eax,eax
c001366e:	75 0f                	jne    c001367f <CPU::detectFeatures()+0x345>
c0013670:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001367a:	e9 86 00 00 00       	jmp    c0013705 <CPU::detectFeatures()+0x3cb>
c001367f:	50                   	push   eax
c0013680:	50                   	push   eax
c0013681:	68 19 56 02 c0       	push   0xc0025619
c0013686:	55                   	push   ebp
c0013687:	e8 40 d1 fe ff       	call   c00007cc <strcmp>
c001368c:	83 c4 10             	add    esp,0x10
c001368f:	85 c0                	test   eax,eax
c0013691:	75 0c                	jne    c001369f <CPU::detectFeatures()+0x365>
c0013693:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001369d:	eb 66                	jmp    c0013705 <CPU::detectFeatures()+0x3cb>
c001369f:	50                   	push   eax
c00136a0:	50                   	push   eax
c00136a1:	68 26 56 02 c0       	push   0xc0025626
c00136a6:	55                   	push   ebp
c00136a7:	e8 20 d1 fe ff       	call   c00007cc <strcmp>
c00136ac:	83 c4 10             	add    esp,0x10
c00136af:	85 c0                	test   eax,eax
c00136b1:	75 0c                	jne    c00136bf <CPU::detectFeatures()+0x385>
c00136b3:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00136bd:	eb 46                	jmp    c0013705 <CPU::detectFeatures()+0x3cb>
c00136bf:	57                   	push   edi
c00136c0:	57                   	push   edi
c00136c1:	68 33 56 02 c0       	push   0xc0025633
c00136c6:	55                   	push   ebp
c00136c7:	e8 00 d1 fe ff       	call   c00007cc <strcmp>
c00136cc:	83 c4 10             	add    esp,0x10
c00136cf:	85 c0                	test   eax,eax
c00136d1:	74 e0                	je     c00136b3 <CPU::detectFeatures()+0x379>
c00136d3:	56                   	push   esi
c00136d4:	56                   	push   esi
c00136d5:	68 40 56 02 c0       	push   0xc0025640
c00136da:	55                   	push   ebp
c00136db:	e8 ec d0 fe ff       	call   c00007cc <strcmp>
c00136e0:	83 c4 10             	add    esp,0x10
c00136e3:	85 c0                	test   eax,eax
c00136e5:	74 cc                	je     c00136b3 <CPU::detectFeatures()+0x379>
c00136e7:	51                   	push   ecx
c00136e8:	51                   	push   ecx
c00136e9:	68 4d 56 02 c0       	push   0xc002564d
c00136ee:	55                   	push   ebp
c00136ef:	e8 d8 d0 fe ff       	call   c00007cc <strcmp>
c00136f4:	83 c4 10             	add    esp,0x10
c00136f7:	85 c0                	test   eax,eax
c00136f9:	74 b8                	je     c00136b3 <CPU::detectFeatures()+0x379>
c00136fb:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0013705:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001370a:	0f 86 be 00 00 00    	jbe    c00137ce <CPU::detectFeatures()+0x494>
c0013710:	83 ec 0c             	sub    esp,0xc
c0013713:	68 80 00 00 00       	push   0x80
c0013718:	e8 31 fb ff ff       	call   c001324e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001371d:	83 e0 01             	and    eax,0x1
c0013720:	c1 e0 06             	shl    eax,0x6
c0013723:	88 c2                	mov    dl,al
c0013725:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001372b:	83 e0 bf             	and    eax,0xffffffbf
c001372e:	09 d0                	or     eax,edx
c0013730:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013736:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001373d:	e8 0c fb ff ff       	call   c001324e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013742:	83 e0 01             	and    eax,0x1
c0013745:	c1 e0 04             	shl    eax,0x4
c0013748:	88 c2                	mov    dl,al
c001374a:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013750:	83 e0 ef             	and    eax,0xffffffef
c0013753:	09 d0                	or     eax,edx
c0013755:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001375b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0013762:	e8 e7 fa ff ff       	call   c001324e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013767:	c1 e0 07             	shl    eax,0x7
c001376a:	88 c2                	mov    dl,al
c001376c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013772:	83 e0 7f             	and    eax,0x7f
c0013775:	09 d0                	or     eax,edx
c0013777:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001377d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013784:	e8 f3 fa ff ff       	call   c001327c <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013789:	83 e0 01             	and    eax,0x1
c001378c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013793:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013799:	83 e0 f7             	and    eax,0xfffffff7
c001379c:	09 d0                	or     eax,edx
c001379e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00137a4:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00137ab:	e8 cc fa ff ff       	call   c001327c <CPU::cpuidCheckExtendedECX(unsigned int)>
c00137b0:	83 c4 10             	add    esp,0x10
c00137b3:	83 e0 01             	and    eax,0x1
c00137b6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00137bd:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00137c3:	83 e0 fb             	and    eax,0xfffffffb
c00137c6:	09 d0                	or     eax,edx
c00137c8:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00137ce:	83 ec 0c             	sub    esp,0xc
c00137d1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00137d5:	50                   	push   eax
c00137d6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00137da:	50                   	push   eax
c00137db:	8d 74 24 28          	lea    esi,[esp+0x28]
c00137df:	56                   	push   esi
c00137e0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00137e4:	50                   	push   eax
c00137e5:	6a 01                	push   0x1
c00137e7:	e8 82 f9 ff ff       	call   c001316e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00137ec:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00137f0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00137f6:	88 ca                	mov    dl,cl
c00137f8:	83 e0 f0             	and    eax,0xfffffff0
c00137fb:	83 e2 0f             	and    edx,0xf
c00137fe:	09 d0                	or     eax,edx
c0013800:	88 ca                	mov    dl,cl
c0013802:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0013808:	c0 ea 04             	shr    dl,0x4
c001380b:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001380f:	0f b6 c2             	movzx  eax,dl
c0013812:	83 c4 20             	add    esp,0x20
c0013815:	c1 e0 06             	shl    eax,0x6
c0013818:	89 c7                	mov    edi,eax
c001381a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013820:	66 25 3f c0          	and    ax,0xc03f
c0013824:	09 f8                	or     eax,edi
c0013826:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001382d:	89 c8                	mov    eax,ecx
c001382f:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0013836:	c1 e8 08             	shr    eax,0x8
c0013839:	83 e5 3f             	and    ebp,0x3f
c001383c:	83 e0 0f             	and    eax,0xf
c001383f:	89 c7                	mov    edi,eax
c0013841:	c1 e7 06             	shl    edi,0x6
c0013844:	09 ef                	or     edi,ebp
c0013846:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c001384d:	89 fa                	mov    edx,edi
c001384f:	83 e5 c0             	and    ebp,0xffffffc0
c0013852:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0013858:	88 c2                	mov    dl,al
c001385a:	c0 ea 02             	shr    dl,0x2
c001385d:	89 d7                	mov    edi,edx
c001385f:	09 ef                	or     edi,ebp
c0013861:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0013867:	89 fa                	mov    edx,edi
c0013869:	83 e5 cf             	and    ebp,0xffffffcf
c001386c:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0013872:	89 cf                	mov    edi,ecx
c0013874:	c1 ef 0c             	shr    edi,0xc
c0013877:	83 e7 03             	and    edi,0x3
c001387a:	c1 e7 04             	shl    edi,0x4
c001387d:	09 ef                	or     edi,ebp
c001387f:	3c 06                	cmp    al,0x6
c0013881:	89 fa                	mov    edx,edi
c0013883:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0013889:	74 04                	je     c001388f <CPU::detectFeatures()+0x555>
c001388b:	3c 0f                	cmp    al,0xf
c001388d:	75 5c                	jne    c00138eb <CPU::detectFeatures()+0x5b1>
c001388f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0013893:	89 cf                	mov    edi,ecx
c0013895:	c1 ef 10             	shr    edi,0x10
c0013898:	c1 e7 04             	shl    edi,0x4
c001389b:	09 fa                	or     edx,edi
c001389d:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c00138a3:	0f b6 d2             	movzx  edx,dl
c00138a6:	66 81 e7 3f c0       	and    di,0xc03f
c00138ab:	c1 e2 06             	shl    edx,0x6
c00138ae:	09 fa                	or     edx,edi
c00138b0:	3c 0f                	cmp    al,0xf
c00138b2:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00138b9:	75 30                	jne    c00138eb <CPU::detectFeatures()+0x5b1>
c00138bb:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00138c1:	c1 e9 14             	shr    ecx,0x14
c00138c4:	83 e0 3f             	and    eax,0x3f
c00138c7:	83 c1 0f             	add    ecx,0xf
c00138ca:	88 ca                	mov    dl,cl
c00138cc:	c0 e9 02             	shr    cl,0x2
c00138cf:	c1 e2 06             	shl    edx,0x6
c00138d2:	09 d0                	or     eax,edx
c00138d4:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00138da:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00138e0:	83 e0 c0             	and    eax,0xffffffc0
c00138e3:	09 c1                	or     ecx,eax
c00138e5:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00138eb:	83 ec 0c             	sub    esp,0xc
c00138ee:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00138f5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00138f9:	50                   	push   eax
c00138fa:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00138fe:	55                   	push   ebp
c00138ff:	56                   	push   esi
c0013900:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0013904:	57                   	push   edi
c0013905:	68 00 00 00 80       	push   0x80000000
c001390a:	e8 5f f8 ff ff       	call   c001316e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001390f:	83 c4 20             	add    esp,0x20
c0013912:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001391a:	76 22                	jbe    c001393e <CPU::detectFeatures()+0x604>
c001391c:	83 ec 0c             	sub    esp,0xc
c001391f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013923:	50                   	push   eax
c0013924:	55                   	push   ebp
c0013925:	56                   	push   esi
c0013926:	57                   	push   edi
c0013927:	68 01 00 00 80       	push   0x80000001
c001392c:	e8 3d f8 ff ff       	call   c001316e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013931:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001393b:	83 c4 20             	add    esp,0x20
c001393e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0013944:	83 f8 01             	cmp    eax,0x1
c0013947:	75 6f                	jne    c00139b8 <CPU::detectFeatures()+0x67e>
c0013949:	51                   	push   ecx
c001394a:	51                   	push   ecx
c001394b:	68 59 56 02 c0       	push   0xc0025659
c0013950:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013954:	56                   	push   esi
c0013955:	e8 e6 cd fe ff       	call   c0000740 <strcpy>
c001395a:	5f                   	pop    edi
c001395b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013961:	5d                   	pop    ebp
c0013962:	66 c1 e8 06          	shr    ax,0x6
c0013966:	0f b6 c0             	movzx  eax,al
c0013969:	50                   	push   eax
c001396a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013970:	c1 e8 0e             	shr    eax,0xe
c0013973:	0f b6 c0             	movzx  eax,al
c0013976:	50                   	push   eax
c0013977:	e8 9c f4 ff ff       	call   c0012e18 <CPU::lookupIntelName(unsigned char, unsigned char)>
c001397c:	5a                   	pop    edx
c001397d:	59                   	pop    ecx
c001397e:	50                   	push   eax
c001397f:	56                   	push   esi
c0013980:	e8 fb ce fe ff       	call   c0000880 <strcat>
c0013985:	5f                   	pop    edi
c0013986:	5d                   	pop    ebp
c0013987:	56                   	push   esi
c0013988:	53                   	push   ebx
c0013989:	e8 0e aa ff ff       	call   c000e39c <Device::setName(char const*)>
c001398e:	58                   	pop    eax
c001398f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013995:	5a                   	pop    edx
c0013996:	68 60 56 02 c0       	push   0xc0025660
c001399b:	50                   	push   eax
c001399c:	e8 2b ce fe ff       	call   c00007cc <strcmp>
c00139a1:	83 c4 10             	add    esp,0x10
c00139a4:	85 c0                	test   eax,eax
c00139a6:	0f 85 71 03 00 00    	jne    c0013d1d <CPU::detectFeatures()+0x9e3>
c00139ac:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00139b3:	e9 65 03 00 00       	jmp    c0013d1d <CPU::detectFeatures()+0x9e3>
c00139b8:	83 f8 02             	cmp    eax,0x2
c00139bb:	0f 85 b5 00 00 00    	jne    c0013a76 <CPU::detectFeatures()+0x73c>
c00139c1:	57                   	push   edi
c00139c2:	57                   	push   edi
c00139c3:	68 72 56 02 c0       	push   0xc0025672
c00139c8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00139cc:	56                   	push   esi
c00139cd:	e8 6e cd fe ff       	call   c0000740 <strcpy>
c00139d2:	5d                   	pop    ebp
c00139d3:	58                   	pop    eax
c00139d4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00139da:	66 c1 e8 06          	shr    ax,0x6
c00139de:	0f b6 c0             	movzx  eax,al
c00139e1:	50                   	push   eax
c00139e2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00139e8:	c1 e8 0e             	shr    eax,0xe
c00139eb:	0f b6 c0             	movzx  eax,al
c00139ee:	50                   	push   eax
c00139ef:	e8 90 f2 ff ff       	call   c0012c84 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00139f4:	5a                   	pop    edx
c00139f5:	59                   	pop    ecx
c00139f6:	50                   	push   eax
c00139f7:	56                   	push   esi
c00139f8:	e8 83 ce fe ff       	call   c0000880 <strcat>
c00139fd:	5f                   	pop    edi
c00139fe:	5d                   	pop    ebp
c00139ff:	56                   	push   esi
c0013a00:	53                   	push   ebx
c0013a01:	e8 96 a9 ff ff       	call   c000e39c <Device::setName(char const*)>
c0013a06:	58                   	pop    eax
c0013a07:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013a0d:	5a                   	pop    edx
c0013a0e:	68 77 56 02 c0       	push   0xc0025677
c0013a13:	50                   	push   eax
c0013a14:	e8 b3 cd fe ff       	call   c00007cc <strcmp>
c0013a19:	83 c4 10             	add    esp,0x10
c0013a1c:	85 c0                	test   eax,eax
c0013a1e:	75 20                	jne    c0013a40 <CPU::detectFeatures()+0x706>
c0013a20:	8b 15 e8 7e 02 c0    	mov    edx,DWORD PTR ds:0xc0027ee8
c0013a26:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013a2c:	a8 01                	test   al,0x1
c0013a2e:	74 10                	je     c0013a40 <CPU::detectFeatures()+0x706>
c0013a30:	83 e0 fe             	and    eax,0xfffffffe
c0013a33:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013a39:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0013a40:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013a46:	c1 e8 0e             	shr    eax,0xe
c0013a49:	3c 05                	cmp    al,0x5
c0013a4b:	0f 85 cc 02 00 00    	jne    c0013d1d <CPU::detectFeatures()+0x9e3>
c0013a51:	56                   	push   esi
c0013a52:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013a58:	83 e0 0f             	and    eax,0xf
c0013a5b:	50                   	push   eax
c0013a5c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013a62:	66 c1 e8 06          	shr    ax,0x6
c0013a66:	0f b6 c0             	movzx  eax,al
c0013a69:	50                   	push   eax
c0013a6a:	6a 05                	push   0x5
c0013a6c:	e8 89 f6 ff ff       	call   c00130fa <CPU::AMD_K6_writeback(int, int, int)>
c0013a71:	e9 1f 02 00 00       	jmp    c0013c95 <CPU::detectFeatures()+0x95b>
c0013a76:	8d 50 fd             	lea    edx,[eax-0x3]
c0013a79:	83 fa 01             	cmp    edx,0x1
c0013a7c:	76 09                	jbe    c0013a87 <CPU::detectFeatures()+0x74d>
c0013a7e:	83 f8 06             	cmp    eax,0x6
c0013a81:	0f 85 91 01 00 00    	jne    c0013c18 <CPU::detectFeatures()+0x8de>
c0013a87:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013a8d:	c1 ea 0e             	shr    edx,0xe
c0013a90:	80 fa 05             	cmp    dl,0x5
c0013a93:	75 7b                	jne    c0013b10 <CPU::detectFeatures()+0x7d6>
c0013a95:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013a9b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013aa0:	66 81 fa 00 01       	cmp    dx,0x100
c0013aa5:	75 0c                	jne    c0013ab3 <CPU::detectFeatures()+0x779>
c0013aa7:	51                   	push   ecx
c0013aa8:	51                   	push   ecx
c0013aa9:	68 7e 56 02 c0       	push   0xc002567e
c0013aae:	e9 dc 01 00 00       	jmp    c0013c8f <CPU::detectFeatures()+0x955>
c0013ab3:	66 81 fa 00 02       	cmp    dx,0x200
c0013ab8:	75 0c                	jne    c0013ac6 <CPU::detectFeatures()+0x78c>
c0013aba:	52                   	push   edx
c0013abb:	52                   	push   edx
c0013abc:	68 91 56 02 c0       	push   0xc0025691
c0013ac1:	e9 c9 01 00 00       	jmp    c0013c8f <CPU::detectFeatures()+0x955>
c0013ac6:	66 81 fa 40 02       	cmp    dx,0x240
c0013acb:	75 0c                	jne    c0013ad9 <CPU::detectFeatures()+0x79f>
c0013acd:	50                   	push   eax
c0013ace:	50                   	push   eax
c0013acf:	68 a3 56 02 c0       	push   0xc00256a3
c0013ad4:	e9 b6 01 00 00       	jmp    c0013c8f <CPU::detectFeatures()+0x955>
c0013ad9:	83 f8 06             	cmp    eax,0x6
c0013adc:	75 0c                	jne    c0013aea <CPU::detectFeatures()+0x7b0>
c0013ade:	50                   	push   eax
c0013adf:	50                   	push   eax
c0013ae0:	68 b5 56 02 c0       	push   0xc00256b5
c0013ae5:	e9 a5 01 00 00       	jmp    c0013c8f <CPU::detectFeatures()+0x955>
c0013aea:	83 f8 04             	cmp    eax,0x4
c0013aed:	75 0c                	jne    c0013afb <CPU::detectFeatures()+0x7c1>
c0013aef:	50                   	push   eax
c0013af0:	50                   	push   eax
c0013af1:	68 c1 56 02 c0       	push   0xc00256c1
c0013af6:	e9 94 01 00 00       	jmp    c0013c8f <CPU::detectFeatures()+0x955>
c0013afb:	83 f8 03             	cmp    eax,0x3
c0013afe:	0f 85 19 02 00 00    	jne    c0013d1d <CPU::detectFeatures()+0x9e3>
c0013b04:	50                   	push   eax
c0013b05:	50                   	push   eax
c0013b06:	68 c9 56 02 c0       	push   0xc00256c9
c0013b0b:	e9 7f 01 00 00       	jmp    c0013c8f <CPU::detectFeatures()+0x955>
c0013b10:	80 fa 06             	cmp    dl,0x6
c0013b13:	0f 85 db 00 00 00    	jne    c0013bf4 <CPU::detectFeatures()+0x8ba>
c0013b19:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013b1f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013b24:	66 81 fa 80 01       	cmp    dx,0x180
c0013b29:	75 0c                	jne    c0013b37 <CPU::detectFeatures()+0x7fd>
c0013b2b:	50                   	push   eax
c0013b2c:	50                   	push   eax
c0013b2d:	68 d4 56 02 c0       	push   0xc00256d4
c0013b32:	e9 58 01 00 00       	jmp    c0013c8f <CPU::detectFeatures()+0x955>
c0013b37:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0013b3d:	66 f7 c1 80 ff       	test   cx,0xff80
c0013b42:	75 0c                	jne    c0013b50 <CPU::detectFeatures()+0x816>
c0013b44:	50                   	push   eax
c0013b45:	50                   	push   eax
c0013b46:	68 e4 56 02 c0       	push   0xc00256e4
c0013b4b:	e9 3f 01 00 00       	jmp    c0013c8f <CPU::detectFeatures()+0x955>
c0013b50:	66 81 fa 40 02       	cmp    dx,0x240
c0013b55:	75 0c                	jne    c0013b63 <CPU::detectFeatures()+0x829>
c0013b57:	55                   	push   ebp
c0013b58:	55                   	push   ebp
c0013b59:	68 eb 56 02 c0       	push   0xc00256eb
c0013b5e:	e9 2c 01 00 00       	jmp    c0013c8f <CPU::detectFeatures()+0x955>
c0013b63:	66 81 fa 80 02       	cmp    dx,0x280
c0013b68:	75 0c                	jne    c0013b76 <CPU::detectFeatures()+0x83c>
c0013b6a:	57                   	push   edi
c0013b6b:	57                   	push   edi
c0013b6c:	68 f4 56 02 c0       	push   0xc00256f4
c0013b71:	e9 19 01 00 00       	jmp    c0013c8f <CPU::detectFeatures()+0x955>
c0013b76:	66 81 fa 40 03       	cmp    dx,0x340
c0013b7b:	74 ed                	je     c0013b6a <CPU::detectFeatures()+0x830>
c0013b7d:	66 81 fa c0 03       	cmp    dx,0x3c0
c0013b82:	75 0c                	jne    c0013b90 <CPU::detectFeatures()+0x856>
c0013b84:	56                   	push   esi
c0013b85:	56                   	push   esi
c0013b86:	68 fb 56 02 c0       	push   0xc00256fb
c0013b8b:	e9 ff 00 00 00       	jmp    c0013c8f <CPU::detectFeatures()+0x955>
c0013b90:	83 f8 06             	cmp    eax,0x6
c0013b93:	0f 84 45 ff ff ff    	je     c0013ade <CPU::detectFeatures()+0x7a4>
c0013b99:	83 f8 04             	cmp    eax,0x4
c0013b9c:	0f 84 4d ff ff ff    	je     c0013aef <CPU::detectFeatures()+0x7b5>
c0013ba2:	83 f8 03             	cmp    eax,0x3
c0013ba5:	0f 85 72 01 00 00    	jne    c0013d1d <CPU::detectFeatures()+0x9e3>
c0013bab:	51                   	push   ecx
c0013bac:	51                   	push   ecx
c0013bad:	68 04 57 02 c0       	push   0xc0025704
c0013bb2:	53                   	push   ebx
c0013bb3:	e8 e4 a7 ff ff       	call   c000e39c <Device::setName(char const*)>
c0013bb8:	b1 c1                	mov    cl,0xc1
c0013bba:	88 c8                	mov    al,cl
c0013bbc:	e6 22                	out    0x22,al
c0013bbe:	e4 23                	in     al,0x23
c0013bc0:	88 c2                	mov    dl,al
c0013bc2:	88 c8                	mov    al,cl
c0013bc4:	e6 22                	out    0x22,al
c0013bc6:	88 d0                	mov    al,dl
c0013bc8:	83 c8 10             	or     eax,0x10
c0013bcb:	e6 23                	out    0x23,al
c0013bcd:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0013bd4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0013bd7:	89 d0                	mov    eax,edx
c0013bd9:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0013bdf:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0013be3:	40                   	inc    eax
c0013be4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0013bea:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0013bef:	e9 a1 00 00 00       	jmp    c0013c95 <CPU::detectFeatures()+0x95b>
c0013bf4:	83 f8 06             	cmp    eax,0x6
c0013bf7:	0f 84 e1 fe ff ff    	je     c0013ade <CPU::detectFeatures()+0x7a4>
c0013bfd:	83 f8 04             	cmp    eax,0x4
c0013c00:	0f 84 e9 fe ff ff    	je     c0013aef <CPU::detectFeatures()+0x7b5>
c0013c06:	83 f8 03             	cmp    eax,0x3
c0013c09:	0f 85 0e 01 00 00    	jne    c0013d1d <CPU::detectFeatures()+0x9e3>
c0013c0f:	52                   	push   edx
c0013c10:	52                   	push   edx
c0013c11:	68 0f 57 02 c0       	push   0xc002570f
c0013c16:	eb 77                	jmp    c0013c8f <CPU::detectFeatures()+0x955>
c0013c18:	83 f8 07             	cmp    eax,0x7
c0013c1b:	75 09                	jne    c0013c26 <CPU::detectFeatures()+0x8ec>
c0013c1d:	50                   	push   eax
c0013c1e:	50                   	push   eax
c0013c1f:	68 19 57 02 c0       	push   0xc0025719
c0013c24:	eb 69                	jmp    c0013c8f <CPU::detectFeatures()+0x955>
c0013c26:	83 f8 0a             	cmp    eax,0xa
c0013c29:	75 09                	jne    c0013c34 <CPU::detectFeatures()+0x8fa>
c0013c2b:	50                   	push   eax
c0013c2c:	50                   	push   eax
c0013c2d:	68 24 57 02 c0       	push   0xc0025724
c0013c32:	eb 5b                	jmp    c0013c8f <CPU::detectFeatures()+0x955>
c0013c34:	83 f8 0b             	cmp    eax,0xb
c0013c37:	75 09                	jne    c0013c42 <CPU::detectFeatures()+0x908>
c0013c39:	50                   	push   eax
c0013c3a:	50                   	push   eax
c0013c3b:	68 2c 57 02 c0       	push   0xc002572c
c0013c40:	eb 4d                	jmp    c0013c8f <CPU::detectFeatures()+0x955>
c0013c42:	83 f8 08             	cmp    eax,0x8
c0013c45:	75 09                	jne    c0013c50 <CPU::detectFeatures()+0x916>
c0013c47:	50                   	push   eax
c0013c48:	50                   	push   eax
c0013c49:	68 35 57 02 c0       	push   0xc0025735
c0013c4e:	eb 3f                	jmp    c0013c8f <CPU::detectFeatures()+0x955>
c0013c50:	83 f8 09             	cmp    eax,0x9
c0013c53:	75 09                	jne    c0013c5e <CPU::detectFeatures()+0x924>
c0013c55:	50                   	push   eax
c0013c56:	50                   	push   eax
c0013c57:	68 3d 57 02 c0       	push   0xc002573d
c0013c5c:	eb 31                	jmp    c0013c8f <CPU::detectFeatures()+0x955>
c0013c5e:	83 f8 05             	cmp    eax,0x5
c0013c61:	75 09                	jne    c0013c6c <CPU::detectFeatures()+0x932>
c0013c63:	50                   	push   eax
c0013c64:	50                   	push   eax
c0013c65:	68 45 57 02 c0       	push   0xc0025745
c0013c6a:	eb 23                	jmp    c0013c8f <CPU::detectFeatures()+0x955>
c0013c6c:	83 f8 0c             	cmp    eax,0xc
c0013c6f:	75 09                	jne    c0013c7a <CPU::detectFeatures()+0x940>
c0013c71:	55                   	push   ebp
c0013c72:	55                   	push   ebp
c0013c73:	68 53 57 02 c0       	push   0xc0025753
c0013c78:	eb 15                	jmp    c0013c8f <CPU::detectFeatures()+0x955>
c0013c7a:	83 f8 0d             	cmp    eax,0xd
c0013c7d:	75 09                	jne    c0013c88 <CPU::detectFeatures()+0x94e>
c0013c7f:	57                   	push   edi
c0013c80:	57                   	push   edi
c0013c81:	68 5e 57 02 c0       	push   0xc002575e
c0013c86:	eb 07                	jmp    c0013c8f <CPU::detectFeatures()+0x955>
c0013c88:	56                   	push   esi
c0013c89:	56                   	push   esi
c0013c8a:	68 72 57 02 c0       	push   0xc0025772
c0013c8f:	53                   	push   ebx
c0013c90:	e8 07 a7 ff ff       	call   c000e39c <Device::setName(char const*)>
c0013c95:	83 c4 10             	add    esp,0x10
c0013c98:	e9 80 00 00 00       	jmp    c0013d1d <CPU::detectFeatures()+0x9e3>
c0013c9d:	51                   	push   ecx
c0013c9e:	51                   	push   ecx
c0013c9f:	68 be 55 02 c0       	push   0xc00255be
c0013ca4:	55                   	push   ebp
c0013ca5:	e8 96 ca fe ff       	call   c0000740 <strcpy>
c0013caa:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013cb4:	e8 2a c5 fe ff       	call   c00001e3 <is486>
c0013cb9:	83 c4 10             	add    esp,0x10
c0013cbc:	85 c0                	test   eax,eax
c0013cbe:	74 2b                	je     c0013ceb <CPU::detectFeatures()+0x9b1>
c0013cc0:	52                   	push   edx
c0013cc1:	52                   	push   edx
c0013cc2:	68 7e 57 02 c0       	push   0xc002577e
c0013cc7:	53                   	push   ebx
c0013cc8:	e8 cf a6 ff ff       	call   c000e39c <Device::setName(char const*)>
c0013ccd:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013cd4:	0f 20 c0             	mov    eax,cr0
c0013cd7:	83 e0 14             	and    eax,0x14
c0013cda:	83 c4 10             	add    esp,0x10
c0013cdd:	83 f8 04             	cmp    eax,0x4
c0013ce0:	75 1f                	jne    c0013d01 <CPU::detectFeatures()+0x9c7>
c0013ce2:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0013ce9:	eb 32                	jmp    c0013d1d <CPU::detectFeatures()+0x9e3>
c0013ceb:	50                   	push   eax
c0013cec:	50                   	push   eax
c0013ced:	68 89 57 02 c0       	push   0xc0025789
c0013cf2:	53                   	push   ebx
c0013cf3:	e8 a4 a6 ff ff       	call   c000e39c <Device::setName(char const*)>
c0013cf8:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0013cff:	eb d3                	jmp    c0013cd4 <CPU::detectFeatures()+0x99a>
c0013d01:	e8 b8 c4 fe ff       	call   c00001be <hasLegacyFPU>
c0013d06:	83 e0 01             	and    eax,0x1
c0013d09:	8d 14 00             	lea    edx,[eax+eax*1]
c0013d0c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013d12:	83 e0 fd             	and    eax,0xfffffffd
c0013d15:	09 d0                	or     eax,edx
c0013d17:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013d1d:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0013d24:	83 c4 4c             	add    esp,0x4c
c0013d27:	5b                   	pop    ebx
c0013d28:	5e                   	pop    esi
c0013d29:	5f                   	pop    edi
c0013d2a:	5d                   	pop    ebp
c0013d2b:	c3                   	ret    

c0013d2c <CPU::setupSMEP()>:
c0013d2c:	0f 20 e0             	mov    eax,cr4
c0013d2f:	0d 00 00 10 00       	or     eax,0x100000
c0013d34:	0f 22 e0             	mov    cr4,eax
c0013d37:	c3                   	ret    

c0013d38 <CPU::setupUMIP()>:
c0013d38:	0f 20 e0             	mov    eax,cr4
c0013d3b:	80 cc 08             	or     ah,0x8
c0013d3e:	0f 22 e0             	mov    cr4,eax
c0013d41:	c3                   	ret    

c0013d42 <CPU::setupTSC()>:
c0013d42:	0f 20 e0             	mov    eax,cr4
c0013d45:	83 c8 04             	or     eax,0x4
c0013d48:	0f 22 e0             	mov    cr4,eax
c0013d4b:	c3                   	ret    

c0013d4c <CPU::setupLargePages()>:
c0013d4c:	0f 20 e0             	mov    eax,cr4
c0013d4f:	83 c8 10             	or     eax,0x10
c0013d52:	0f 22 e0             	mov    cr4,eax
c0013d55:	c3                   	ret    

c0013d56 <CPU::setupPAT()>:
c0013d56:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c0013d5b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013d62:	74 2c                	je     c0013d90 <CPU::setupPAT()+0x3a>
c0013d64:	53                   	push   ebx
c0013d65:	83 ec 10             	sub    esp,0x10
c0013d68:	68 77 02 00 00       	push   0x277
c0013d6d:	50                   	push   eax
c0013d6e:	e8 b7 51 ff ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c0013d73:	83 e2 f8             	and    edx,0xfffffff8
c0013d76:	83 ca 01             	or     edx,0x1
c0013d79:	52                   	push   edx
c0013d7a:	50                   	push   eax
c0013d7b:	68 77 02 00 00       	push   0x277
c0013d80:	ff 35 e8 7e 02 c0    	push   DWORD PTR ds:0xc0027ee8
c0013d86:	e8 cb 51 ff ff       	call   c0008f56 <Computer::wrmsr(unsigned int, unsigned long long)>
c0013d8b:	83 c4 28             	add    esp,0x28
c0013d8e:	5b                   	pop    ebx
c0013d8f:	c3                   	ret    
c0013d90:	c3                   	ret    
c0013d91:	90                   	nop

c0013d92 <CPU::setupMTRR()>:
c0013d92:	c3                   	ret    
c0013d93:	90                   	nop

c0013d94 <CPU::setupGlobalPages()>:
c0013d94:	0f 20 e0             	mov    eax,cr4
c0013d97:	0c 80                	or     al,0x80
c0013d99:	0f 22 e0             	mov    cr4,eax
c0013d9c:	c3                   	ret    
c0013d9d:	90                   	nop

c0013d9e <CPU::allowUsermodeDataAccess()>:
c0013d9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013da2:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013da9:	74 03                	je     c0013dae <CPU::allowUsermodeDataAccess()+0x10>
c0013dab:	0f 01 cb             	stac   
c0013dae:	c3                   	ret    
c0013daf:	90                   	nop

c0013db0 <CPU::prohibitUsermodeDataAccess()>:
c0013db0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013db4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013dbb:	74 03                	je     c0013dc0 <CPU::prohibitUsermodeDataAccess()+0x10>
c0013dbd:	0f 01 ca             	clac   
c0013dc0:	c3                   	ret    
c0013dc1:	90                   	nop

c0013dc2 <CPU::setupSMAP()>:
c0013dc2:	0f 20 e0             	mov    eax,cr4
c0013dc5:	0d 00 00 20 00       	or     eax,0x200000
c0013dca:	0f 22 e0             	mov    cr4,eax
c0013dcd:	eb e1                	jmp    c0013db0 <CPU::prohibitUsermodeDataAccess()>
c0013dcf:	90                   	nop

c0013dd0 <CPU::setupFeatures()>:
c0013dd0:	53                   	push   ebx
c0013dd1:	83 ec 08             	sub    esp,0x8
c0013dd4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013dd8:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0013ddf:	74 18                	je     c0013df9 <CPU::setupFeatures()+0x29>
c0013de1:	83 ec 0c             	sub    esp,0xc
c0013de4:	68 94 57 02 c0       	push   0xc0025794
c0013de9:	e8 11 8f ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0013dee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013df1:	e8 42 ff ff ff       	call   c0013d38 <CPU::setupUMIP()>
c0013df6:	83 c4 10             	add    esp,0x10
c0013df9:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0013e00:	74 18                	je     c0013e1a <CPU::setupFeatures()+0x4a>
c0013e02:	83 ec 0c             	sub    esp,0xc
c0013e05:	68 9e 57 02 c0       	push   0xc002579e
c0013e0a:	e8 f0 8e ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0013e0f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e12:	e8 2b ff ff ff       	call   c0013d42 <CPU::setupTSC()>
c0013e17:	83 c4 10             	add    esp,0x10
c0013e1a:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0013e21:	74 18                	je     c0013e3b <CPU::setupFeatures()+0x6b>
c0013e23:	83 ec 0c             	sub    esp,0xc
c0013e26:	68 a7 57 02 c0       	push   0xc00257a7
c0013e2b:	e8 cf 8e ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0013e30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e33:	e8 14 ff ff ff       	call   c0013d4c <CPU::setupLargePages()>
c0013e38:	83 c4 10             	add    esp,0x10
c0013e3b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0013e42:	74 18                	je     c0013e5c <CPU::setupFeatures()+0x8c>
c0013e44:	83 ec 0c             	sub    esp,0xc
c0013e47:	68 b0 57 02 c0       	push   0xc00257b0
c0013e4c:	e8 ae 8e ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0013e51:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e54:	e8 3b ff ff ff       	call   c0013d94 <CPU::setupGlobalPages()>
c0013e59:	83 c4 10             	add    esp,0x10
c0013e5c:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0013e63:	74 18                	je     c0013e7d <CPU::setupFeatures()+0xad>
c0013e65:	83 ec 0c             	sub    esp,0xc
c0013e68:	68 c2 57 02 c0       	push   0xc00257c2
c0013e6d:	e8 8d 8e ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0013e72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e75:	e8 dc fe ff ff       	call   c0013d56 <CPU::setupPAT()>
c0013e7a:	83 c4 10             	add    esp,0x10
c0013e7d:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013e84:	74 11                	je     c0013e97 <CPU::setupFeatures()+0xc7>
c0013e86:	c7 44 24 10 cb 57 02 c0 	mov    DWORD PTR [esp+0x10],0xc00257cb
c0013e8e:	83 c4 08             	add    esp,0x8
c0013e91:	5b                   	pop    ebx
c0013e92:	e9 68 8e ff ff       	jmp    c000ccff <Dbg::kprintf(char const*, ...)>
c0013e97:	83 c4 08             	add    esp,0x8
c0013e9a:	5b                   	pop    ebx
c0013e9b:	c3                   	ret    

c0013e9c <CPU::open(int, int, void*)>:
c0013e9c:	57                   	push   edi
c0013e9d:	56                   	push   esi
c0013e9e:	53                   	push   ebx
c0013e9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ea3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ea7:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0013ead:	83 ec 0c             	sub    esp,0xc
c0013eb0:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0013eb6:	68 d5 57 02 c0       	push   0xc00257d5
c0013ebb:	e8 a9 5b ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013ec0:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0013ec6:	89 04 24             	mov    DWORD PTR [esp],eax
c0013ec9:	e8 38 54 ff ff       	call   c0009306 <GDT::setup()>
c0013ece:	c7 04 24 e7 57 02 c0 	mov    DWORD PTR [esp],0xc00257e7
c0013ed5:	e8 8f 5b ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013eda:	83 c4 0c             	add    esp,0xc
c0013edd:	6a 00                	push   0x0
c0013edf:	68 ef be ad de       	push   0xdeadbeef
c0013ee4:	57                   	push   edi
c0013ee5:	e8 76 74 ff ff       	call   c000b360 <TSS::setup(unsigned long, unsigned long)>
c0013eea:	c7 04 24 f9 57 02 c0 	mov    DWORD PTR [esp],0xc00257f9
c0013ef1:	e8 73 5b ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013ef6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013ef9:	e8 42 74 ff ff       	call   c000b340 <TSS::flush()>
c0013efe:	c7 04 24 0d 58 02 c0 	mov    DWORD PTR [esp],0xc002580d
c0013f05:	e8 5f 5b ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013f0a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0013f10:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f13:	e8 5a 56 ff ff       	call   c0009572 <IDT::setup()>
c0013f18:	c7 04 24 1f 58 02 c0 	mov    DWORD PTR [esp],0xc002581f
c0013f1f:	e8 45 5b ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013f24:	b8 00 04 00 00       	mov    eax,0x400
c0013f29:	0f 23 f8             	mov    db7,eax
c0013f2c:	c7 04 24 3d 58 02 c0 	mov    DWORD PTR [esp],0xc002583d
c0013f33:	e8 31 5b ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013f38:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0013f42:	e8 7f 61 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c0013f47:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0013f4d:	89 30                	mov    DWORD PTR [eax],esi
c0013f4f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0013f55:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0013f58:	c7 04 24 5f 58 02 c0 	mov    DWORD PTR [esp],0xc002585f
c0013f5f:	e8 05 5b ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013f64:	58                   	pop    eax
c0013f65:	5a                   	pop    edx
c0013f66:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0013f6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013f70:	e8 e5 83 ff ff       	call   c000c35a <VAS::setCPUSpecific(unsigned long)>
c0013f75:	c7 04 24 87 58 02 c0 	mov    DWORD PTR [esp],0xc0025887
c0013f7c:	e8 e8 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013f81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f84:	e8 b1 f3 ff ff       	call   c001333a <CPU::detectFeatures()>
c0013f89:	c7 04 24 aa 58 02 c0 	mov    DWORD PTR [esp],0xc00258aa
c0013f90:	e8 d4 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013f95:	e8 10 b6 ff ff       	call   c000f5aa <setupInterruptController()>
c0013f9a:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0013fa0:	c7 04 24 ce 58 02 c0 	mov    DWORD PTR [esp],0xc00258ce
c0013fa7:	e8 bd 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013fac:	a1 00 7f 02 c0       	mov    eax,ds:0xc0027f00
c0013fb1:	83 e0 10             	and    eax,0x10
c0013fb4:	83 f8 01             	cmp    eax,0x1
c0013fb7:	19 c0                	sbb    eax,eax
c0013fb9:	83 e0 46             	and    eax,0x46
c0013fbc:	83 c0 1e             	add    eax,0x1e
c0013fbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fc2:	e8 d1 cb ff ff       	call   c0010b98 <setupTimer(int)>
c0013fc7:	83 c4 10             	add    esp,0x10
c0013fca:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0013fd0:	f6 05 00 7f 02 c0 20 	test   BYTE PTR ds:0xc0027f00,0x20
c0013fd7:	74 18                	je     c0013ff1 <CPU::open(int, int, void*)+0x155>
c0013fd9:	83 ec 0c             	sub    esp,0xc
c0013fdc:	68 e9 58 02 c0       	push   0xc00258e9
c0013fe1:	e8 83 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013fe6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013fe9:	e8 e2 fd ff ff       	call   c0013dd0 <CPU::setupFeatures()>
c0013fee:	83 c4 10             	add    esp,0x10
c0013ff1:	83 ec 0c             	sub    esp,0xc
c0013ff4:	68 04 59 02 c0       	push   0xc0025904
c0013ff9:	e8 6b 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013ffe:	83 c4 10             	add    esp,0x10
c0014001:	31 c0                	xor    eax,eax
c0014003:	5b                   	pop    ebx
c0014004:	5e                   	pop    esi
c0014005:	5f                   	pop    edi
c0014006:	c3                   	ret    
c0014007:	90                   	nop

c0014008 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0014008:	57                   	push   edi
c0014009:	56                   	push   esi
c001400a:	53                   	push   ebx
c001400b:	51                   	push   ecx
c001400c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014010:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0014013:	0f 02 c0             	lar    eax,ax
c0014016:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0014019:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001401d:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0014020:	88 ca                	mov    dl,cl
c0014022:	c0 ea 06             	shr    dl,0x6
c0014025:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0014029:	89 ca                	mov    edx,ecx
c001402b:	66 c1 ea 03          	shr    dx,0x3
c001402f:	83 e2 07             	and    edx,0x7
c0014032:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0014037:	88 17                	mov    BYTE PTR [edi],dl
c0014039:	0f 84 a6 01 00 00    	je     c00141e5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001403f:	83 e1 07             	and    ecx,0x7
c0014042:	80 f9 04             	cmp    cl,0x4
c0014045:	0f 84 98 00 00 00    	je     c00140e3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001404b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014050:	0f 95 c0             	setne  al
c0014053:	80 f9 05             	cmp    cl,0x5
c0014056:	0f 95 c2             	setne  dl
c0014059:	08 c2                	or     dl,al
c001405b:	74 79                	je     c00140d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001405d:	84 c9                	test   cl,cl
c001405f:	75 05                	jne    c0014066 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0014061:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014064:	eb 3c                	jmp    c00140a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014066:	80 f9 01             	cmp    cl,0x1
c0014069:	75 05                	jne    c0014070 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001406b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001406e:	eb 32                	jmp    c00140a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014070:	80 f9 02             	cmp    cl,0x2
c0014073:	75 05                	jne    c001407a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0014075:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0014078:	eb 28                	jmp    c00140a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001407a:	31 c0                	xor    eax,eax
c001407c:	80 f9 03             	cmp    cl,0x3
c001407f:	75 05                	jne    c0014086 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0014081:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014084:	eb 1c                	jmp    c00140a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014086:	80 f9 05             	cmp    cl,0x5
c0014089:	75 05                	jne    c0014090 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001408b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001408e:	eb 12                	jmp    c00140a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014090:	80 f9 06             	cmp    cl,0x6
c0014093:	75 05                	jne    c001409a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0014095:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014098:	eb 08                	jmp    c00140a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001409a:	80 f9 07             	cmp    cl,0x7
c001409d:	75 03                	jne    c00140a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001409f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00140a2:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00140a7:	75 10                	jne    c00140b9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00140a9:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00140ad:	b9 03 00 00 00       	mov    ecx,0x3
c00140b2:	01 d0                	add    eax,edx
c00140b4:	e9 37 01 00 00       	jmp    c00141f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00140b9:	b9 02 00 00 00       	mov    ecx,0x2
c00140be:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00140c3:	0f 85 27 01 00 00    	jne    c00141f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00140c9:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00140cc:	b9 06 00 00 00       	mov    ecx,0x6
c00140d1:	e9 1a 01 00 00       	jmp    c00141f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00140d6:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00140d9:	b9 06 00 00 00       	mov    ecx,0x6
c00140de:	e9 0f 01 00 00       	jmp    c00141f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00140e3:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00140e6:	88 ca                	mov    dl,cl
c00140e8:	c0 ea 06             	shr    dl,0x6
c00140eb:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00140ef:	89 ca                	mov    edx,ecx
c00140f1:	66 c1 ea 03          	shr    dx,0x3
c00140f5:	83 e2 07             	and    edx,0x7
c00140f8:	80 e1 07             	and    cl,0x7
c00140fb:	75 05                	jne    c0014102 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00140fd:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0014100:	eb 4c                	jmp    c001414e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014102:	80 f9 01             	cmp    cl,0x1
c0014105:	75 05                	jne    c001410c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0014107:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001410a:	eb 42                	jmp    c001414e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001410c:	80 f9 02             	cmp    cl,0x2
c001410f:	75 05                	jne    c0014116 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0014111:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0014114:	eb 38                	jmp    c001414e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014116:	80 f9 03             	cmp    cl,0x3
c0014119:	75 05                	jne    c0014120 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001411b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001411e:	eb 2e                	jmp    c001414e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014120:	80 f9 04             	cmp    cl,0x4
c0014123:	75 12                	jne    c0014137 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0014125:	f6 c4 60             	test   ah,0x60
c0014128:	75 08                	jne    c0014132 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001412a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001412d:	8d 78 14             	lea    edi,[eax+0x14]
c0014130:	eb 1c                	jmp    c001414e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014132:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0014135:	eb 17                	jmp    c001414e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014137:	80 f9 05             	cmp    cl,0x5
c001413a:	75 05                	jne    c0014141 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001413c:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001413f:	eb 0d                	jmp    c001414e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014141:	80 f9 06             	cmp    cl,0x6
c0014144:	75 05                	jne    c001414b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0014146:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0014149:	eb 03                	jmp    c001414e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001414b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001414e:	84 d2                	test   dl,dl
c0014150:	75 05                	jne    c0014157 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0014152:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014155:	eb 3c                	jmp    c0014193 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014157:	80 fa 01             	cmp    dl,0x1
c001415a:	75 05                	jne    c0014161 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001415c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001415f:	eb 32                	jmp    c0014193 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014161:	80 fa 02             	cmp    dl,0x2
c0014164:	75 05                	jne    c001416b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0014166:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0014169:	eb 28                	jmp    c0014193 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001416b:	80 fa 03             	cmp    dl,0x3
c001416e:	75 05                	jne    c0014175 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0014170:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014173:	eb 1e                	jmp    c0014193 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014175:	31 c0                	xor    eax,eax
c0014177:	80 fa 04             	cmp    dl,0x4
c001417a:	74 17                	je     c0014193 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001417c:	80 fa 05             	cmp    dl,0x5
c001417f:	75 05                	jne    c0014186 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0014181:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014184:	eb 0d                	jmp    c0014193 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014186:	80 fa 06             	cmp    dl,0x6
c0014189:	75 05                	jne    c0014190 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001418b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001418e:	eb 03                	jmp    c0014193 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014190:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014193:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014198:	0f 94 c2             	sete   dl
c001419b:	80 f9 05             	cmp    cl,0x5
c001419e:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00141a2:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00141a7:	d3 e0                	shl    eax,cl
c00141a9:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00141ad:	74 0a                	je     c00141b9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00141af:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00141b2:	b9 07 00 00 00       	mov    ecx,0x7
c00141b7:	eb 37                	jmp    c00141f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00141b9:	01 f8                	add    eax,edi
c00141bb:	b9 03 00 00 00       	mov    ecx,0x3
c00141c0:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00141c5:	74 2b                	je     c00141f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00141c7:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00141cc:	75 0d                	jne    c00141db <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00141ce:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00141d2:	01 c8                	add    eax,ecx
c00141d4:	b9 04 00 00 00       	mov    ecx,0x4
c00141d9:	eb 17                	jmp    c00141f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00141db:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00141de:	b9 07 00 00 00       	mov    ecx,0x7
c00141e3:	eb 0d                	jmp    c00141f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00141e5:	b9 02 00 00 00       	mov    ecx,0x2
c00141ea:	b2 01                	mov    dl,0x1
c00141ec:	31 c0                	xor    eax,eax
c00141ee:	eb 02                	jmp    c00141f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00141f0:	31 d2                	xor    edx,edx
c00141f2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00141f6:	89 0b                	mov    DWORD PTR [ebx],ecx
c00141f8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00141fc:	88 11                	mov    BYTE PTR [ecx],dl
c00141fe:	5a                   	pop    edx
c00141ff:	5b                   	pop    ebx
c0014200:	5e                   	pop    esi
c0014201:	5f                   	pop    edi
c0014202:	c3                   	ret    

c0014203 <Krnl::smpEntry()>:
c0014203:	eb fe                	jmp    c0014203 <Krnl::smpEntry()>

c0014205 <Krnl::startCPU(int)>:
c0014205:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c001420a:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014211:	0f 84 36 01 00 00    	je     c001434d <Krnl::startCPU(int)+0x148>
c0014217:	53                   	push   ebx
c0014218:	83 ec 10             	sub    esp,0x10
c001421b:	fa                   	cli    
c001421c:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c0014222:	6a 1b                	push   0x1b
c0014224:	ff 35 e8 7e 02 c0    	push   DWORD PTR ds:0xc0027ee8
c001422a:	e8 fb 4c ff ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c001422f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014234:	89 c3                	mov    ebx,eax
c0014236:	58                   	pop    eax
c0014237:	5a                   	pop    edx
c0014238:	53                   	push   ebx
c0014239:	68 4c 59 02 c0       	push   0xc002594c
c001423e:	e8 bc 8a ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0014243:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001424d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014251:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001425b:	c1 e0 18             	shl    eax,0x18
c001425e:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0014264:	83 c4 10             	add    esp,0x10
c0014267:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001426d:	09 c2                	or     edx,eax
c001426f:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0014275:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001427b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014281:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014287:	80 cd c5             	or     ch,0xc5
c001428a:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014290:	f3 90                	pause  
c0014292:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014294:	0f ba e1 0c          	bt     ecx,0xc
c0014298:	72 f6                	jb     c0014290 <Krnl::startCPU(int)+0x8b>
c001429a:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00142a0:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00142a6:	09 c1                	or     ecx,eax
c00142a8:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00142ae:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00142b4:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00142ba:	80 cd 85             	or     ch,0x85
c00142bd:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00142c3:	f3 90                	pause  
c00142c5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00142c7:	0f ba e1 0c          	bt     ecx,0xc
c00142cb:	72 f6                	jb     c00142c3 <Krnl::startCPU(int)+0xbe>
c00142cd:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00142d7:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00142dd:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00142e3:	09 c1                	or     ecx,eax
c00142e5:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00142eb:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00142f1:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c00142f7:	81 c9 02 06 00 00    	or     ecx,0x602
c00142fd:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014303:	f3 90                	pause  
c0014305:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014307:	0f ba e1 0c          	bt     ecx,0xc
c001430b:	72 f6                	jb     c0014303 <Krnl::startCPU(int)+0xfe>
c001430d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014317:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001431d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014323:	09 c8                	or     eax,ecx
c0014325:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001432b:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0014331:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0014336:	0d 02 06 00 00       	or     eax,0x602
c001433b:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0014341:	f3 90                	pause  
c0014343:	8b 02                	mov    eax,DWORD PTR [edx]
c0014345:	0f ba e0 0c          	bt     eax,0xc
c0014349:	72 f6                	jb     c0014341 <Krnl::startCPU(int)+0x13c>
c001434b:	eb fe                	jmp    c001434b <Krnl::startCPU(int)+0x146>
c001434d:	c3                   	ret    

c001434e <Krnl::startCPUs()>:
c001434e:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c0014353:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014359:	88 c2                	mov    dl,al
c001435b:	83 e2 0a             	and    edx,0xa
c001435e:	80 fa 0a             	cmp    dl,0xa
c0014361:	75 09                	jne    c001436c <Krnl::startCPUs()+0x1e>
c0014363:	a8 01                	test   al,0x1
c0014365:	74 05                	je     c001436c <Krnl::startCPUs()+0x1e>
c0014367:	e9 2f be fe ff       	jmp    c000019b <prepareTramp>
c001436c:	c3                   	ret    
c001436d:	90                   	nop

c001436e <EnvVarContainer::getEnv(char const*)>:
c001436e:	57                   	push   edi
c001436f:	56                   	push   esi
c0014370:	53                   	push   ebx
c0014371:	31 db                	xor    ebx,ebx
c0014373:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014377:	39 1e                	cmp    DWORD PTR [esi],ebx
c0014379:	7e 2b                	jle    c00143a6 <EnvVarContainer::getEnv(char const*)+0x38>
c001437b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0014382:	50                   	push   eax
c0014383:	50                   	push   eax
c0014384:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014387:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001438a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001438e:	e8 39 c4 fe ff       	call   c00007cc <strcmp>
c0014393:	83 c4 10             	add    esp,0x10
c0014396:	85 c0                	test   eax,eax
c0014398:	75 09                	jne    c00143a3 <EnvVarContainer::getEnv(char const*)+0x35>
c001439a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001439d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00143a1:	eb 05                	jmp    c00143a8 <EnvVarContainer::getEnv(char const*)+0x3a>
c00143a3:	43                   	inc    ebx
c00143a4:	eb d1                	jmp    c0014377 <EnvVarContainer::getEnv(char const*)+0x9>
c00143a6:	31 c0                	xor    eax,eax
c00143a8:	5b                   	pop    ebx
c00143a9:	5e                   	pop    esi
c00143aa:	5f                   	pop    edi
c00143ab:	c3                   	ret    

c00143ac <EnvVarContainer::setEnv(char const*, char const*)>:
c00143ac:	55                   	push   ebp
c00143ad:	57                   	push   edi
c00143ae:	56                   	push   esi
c00143af:	53                   	push   ebx
c00143b0:	83 ec 28             	sub    esp,0x28
c00143b3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00143b7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00143bb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00143bf:	56                   	push   esi
c00143c0:	e8 db c2 fe ff       	call   c00006a0 <strlen>
c00143c5:	40                   	inc    eax
c00143c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00143c9:	e8 41 56 ff ff       	call   c0009a0f <malloc>
c00143ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00143d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00143d5:	e8 c6 c2 fe ff       	call   c00006a0 <strlen>
c00143da:	40                   	inc    eax
c00143db:	89 04 24             	mov    DWORD PTR [esp],eax
c00143de:	e8 2c 56 ff ff       	call   c0009a0f <malloc>
c00143e3:	89 34 24             	mov    DWORD PTR [esp],esi
c00143e6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00143ea:	e8 b1 c2 fe ff       	call   c00006a0 <strlen>
c00143ef:	83 c4 0c             	add    esp,0xc
c00143f2:	40                   	inc    eax
c00143f3:	50                   	push   eax
c00143f4:	6a 00                	push   0x0
c00143f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00143fa:	e8 85 c2 fe ff       	call   c0000684 <memset>
c00143ff:	89 34 24             	mov    DWORD PTR [esp],esi
c0014402:	e8 99 c2 fe ff       	call   c00006a0 <strlen>
c0014407:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001440b:	8d 48 01             	lea    ecx,[eax+0x1]
c001440e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014410:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014413:	89 de                	mov    esi,ebx
c0014415:	e8 86 c2 fe ff       	call   c00006a0 <strlen>
c001441a:	83 c4 0c             	add    esp,0xc
c001441d:	40                   	inc    eax
c001441e:	50                   	push   eax
c001441f:	6a 00                	push   0x0
c0014421:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014425:	e8 5a c2 fe ff       	call   c0000684 <memset>
c001442a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001442d:	e8 6e c2 fe ff       	call   c00006a0 <strlen>
c0014432:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014436:	8d 48 01             	lea    ecx,[eax+0x1]
c0014439:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001443b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001443e:	40                   	inc    eax
c001443f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014442:	c1 e0 03             	shl    eax,0x3
c0014445:	5a                   	pop    edx
c0014446:	59                   	pop    ecx
c0014447:	50                   	push   eax
c0014448:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001444b:	e8 ab 55 ff ff       	call   c00099fb <realloc>
c0014450:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014454:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014457:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001445a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001445e:	b9 08 00 00 00       	mov    ecx,0x8
c0014463:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014465:	83 c4 2c             	add    esp,0x2c
c0014468:	5b                   	pop    ebx
c0014469:	5e                   	pop    esi
c001446a:	5f                   	pop    edi
c001446b:	5d                   	pop    ebp
c001446c:	c3                   	ret    
c001446d:	90                   	nop

c001446e <EnvVarContainer::deleteEnv(char const*)>:
c001446e:	c3                   	ret    
c001446f:	90                   	nop

c0014470 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0014470:	55                   	push   ebp
c0014471:	57                   	push   edi
c0014472:	56                   	push   esi
c0014473:	53                   	push   ebx
c0014474:	81 ec 38 01 00 00    	sub    esp,0x138
c001447a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014481:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0014488:	68 14 01 00 00       	push   0x114
c001448d:	e8 7d 55 ff ff       	call   c0009a0f <malloc>
c0014492:	83 c4 0c             	add    esp,0xc
c0014495:	89 c3                	mov    ebx,eax
c0014497:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001449a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00144a1:	50                   	push   eax
c00144a2:	e8 c3 8d ff ff       	call   c000d26a <File::File(char const*, Process*)>
c00144a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144aa:	e8 eb 90 ff ff       	call   c000d59a <File::exists()>
c00144af:	83 c4 10             	add    esp,0x10
c00144b2:	84 c0                	test   al,al
c00144b4:	75 31                	jne    c00144e7 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00144b6:	50                   	push   eax
c00144b7:	50                   	push   eax
c00144b8:	6a 12                	push   0x12
c00144ba:	53                   	push   ebx
c00144bb:	e8 6c 8e ff ff       	call   c000d32c <File::open(FileOpenMode)>
c00144c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144c2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00144c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00144c8:	e8 d3 c1 fe ff       	call   c00006a0 <strlen>
c00144cd:	5a                   	pop    edx
c00144ce:	31 d2                	xor    edx,edx
c00144d0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00144d4:	51                   	push   ecx
c00144d5:	56                   	push   esi
c00144d6:	52                   	push   edx
c00144d7:	50                   	push   eax
c00144d8:	53                   	push   ebx
c00144d9:	ff d7                	call   edi
c00144db:	83 c4 14             	add    esp,0x14
c00144de:	53                   	push   ebx
c00144df:	e8 a6 8e ff ff       	call   c000d38a <File::close()>
c00144e4:	83 c4 10             	add    esp,0x10
c00144e7:	56                   	push   esi
c00144e8:	31 f6                	xor    esi,esi
c00144ea:	68 00 01 00 00       	push   0x100
c00144ef:	6a 00                	push   0x0
c00144f1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00144f5:	50                   	push   eax
c00144f6:	e8 89 c1 fe ff       	call   c0000684 <memset>
c00144fb:	5f                   	pop    edi
c00144fc:	58                   	pop    eax
c00144fd:	6a 01                	push   0x1
c00144ff:	53                   	push   ebx
c0014500:	e8 27 8e ff ff       	call   c000d32c <File::open(FileOpenMode)>
c0014505:	83 c4 10             	add    esp,0x10
c0014508:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014510:	83 ec 0c             	sub    esp,0xc
c0014513:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014515:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014519:	51                   	push   ecx
c001451a:	8d 54 24 23          	lea    edx,[esp+0x23]
c001451e:	52                   	push   edx
c001451f:	6a 00                	push   0x0
c0014521:	6a 01                	push   0x1
c0014523:	53                   	push   ebx
c0014524:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014527:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001452b:	83 c4 20             	add    esp,0x20
c001452e:	3c 0d                	cmp    al,0xd
c0014530:	0f 84 09 01 00 00    	je     c001463f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014536:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001453b:	0f 84 ef 00 00 00    	je     c0014630 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014541:	3c 0a                	cmp    al,0xa
c0014543:	74 13                	je     c0014558 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014545:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001454a:	74 0c                	je     c0014558 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c001454c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0014552:	0f 8e d8 00 00 00    	jle    c0014630 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001455c:	83 ec 0c             	sub    esp,0xc
c001455f:	8d 78 01             	lea    edi,[eax+0x1]
c0014562:	57                   	push   edi
c0014563:	e8 a7 54 ff ff       	call   c0009a0f <malloc>
c0014568:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001456c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014570:	8d 56 04             	lea    edx,[esi+0x4]
c0014573:	89 14 24             	mov    DWORD PTR [esp],edx
c0014576:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001457a:	e8 90 54 ff ff       	call   c0009a0f <malloc>
c001457f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014583:	83 c4 0c             	add    esp,0xc
c0014586:	57                   	push   edi
c0014587:	6a 00                	push   0x0
c0014589:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001458d:	e8 f2 c0 fe ff       	call   c0000684 <memset>
c0014592:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014596:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001459a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001459e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00145a0:	83 c4 0c             	add    esp,0xc
c00145a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00145a7:	52                   	push   edx
c00145a8:	6a 00                	push   0x0
c00145aa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00145ae:	e8 d1 c0 fe ff       	call   c0000684 <memset>
c00145b3:	8d 74 24 30          	lea    esi,[esp+0x30]
c00145b7:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00145bb:	89 34 24             	mov    DWORD PTR [esp],esi
c00145be:	e8 dd c0 fe ff       	call   c00006a0 <strlen>
c00145c3:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00145c7:	89 c1                	mov    ecx,eax
c00145c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00145cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00145ce:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00145d1:	40                   	inc    eax
c00145d2:	83 c4 10             	add    esp,0x10
c00145d5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00145d8:	85 d2                	test   edx,edx
c00145da:	75 0c                	jne    c00145e8 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c00145dc:	83 ec 0c             	sub    esp,0xc
c00145df:	6a 08                	push   0x8
c00145e1:	e8 29 54 ff ff       	call   c0009a0f <malloc>
c00145e6:	eb 0c                	jmp    c00145f4 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c00145e8:	c1 e0 03             	shl    eax,0x3
c00145eb:	51                   	push   ecx
c00145ec:	51                   	push   ecx
c00145ed:	50                   	push   eax
c00145ee:	52                   	push   edx
c00145ef:	e8 07 54 ff ff       	call   c00099fb <realloc>
c00145f4:	83 c4 10             	add    esp,0x10
c00145f7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00145fa:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00145fd:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014600:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014604:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014608:	b9 08 00 00 00       	mov    ecx,0x8
c001460d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001460f:	31 f6                	xor    esi,esi
c0014611:	50                   	push   eax
c0014612:	68 00 01 00 00       	push   0x100
c0014617:	6a 00                	push   0x0
c0014619:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001461d:	50                   	push   eax
c001461e:	e8 61 c0 fe ff       	call   c0000684 <memset>
c0014623:	83 c4 10             	add    esp,0x10
c0014626:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001462e:	eb 0f                	jmp    c001463f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014630:	3c 3d                	cmp    al,0x3d
c0014632:	74 07                	je     c001463b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0014634:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014638:	46                   	inc    esi
c0014639:	eb 04                	jmp    c001463f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001463b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001463f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014644:	0f 85 c6 fe ff ff    	jne    c0014510 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001464a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014650:	5b                   	pop    ebx
c0014651:	5e                   	pop    esi
c0014652:	5f                   	pop    edi
c0014653:	5d                   	pop    ebp
c0014654:	c3                   	ret    
c0014655:	90                   	nop

c0014656 <EnvVarContainer::__loadSystem()>:
c0014656:	83 ec 10             	sub    esp,0x10
c0014659:	68 c0 78 02 c0       	push   0xc00278c0
c001465e:	68 5d 59 02 c0       	push   0xc002595d
c0014663:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014667:	e8 04 fe ff ff       	call   c0014470 <EnvVarContainer::loadFrom(char const*, char const*)>
c001466c:	83 c4 1c             	add    esp,0x1c
c001466f:	c3                   	ret    

c0014670 <EnvVarContainer::__loadUser()>:
c0014670:	c3                   	ret    
c0014671:	90                   	nop

c0014672 <EnvVarContainer::EnvVarContainer(Process*)>:
c0014672:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014676:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001467c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014680:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014684:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0014687:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001468b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014692:	90                   	nop
c0014693:	c3                   	ret    

c0014694 <EnvVarContainer::~EnvVarContainer()>:
c0014694:	83 ec 0c             	sub    esp,0xc
c0014697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001469b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001469e:	85 c0                	test   eax,eax
c00146a0:	74 1d                	je     c00146bf <EnvVarContainer::~EnvVarContainer()+0x2b>
c00146a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00146a8:	85 c0                	test   eax,eax
c00146aa:	74 13                	je     c00146bf <EnvVarContainer::~EnvVarContainer()+0x2b>
c00146ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00146b3:	83 ec 0c             	sub    esp,0xc
c00146b6:	50                   	push   eax
c00146b7:	e8 63 53 ff ff       	call   c0009a1f <free>
c00146bc:	83 c4 10             	add    esp,0x10
c00146bf:	90                   	nop
c00146c0:	83 c4 0c             	add    esp,0xc
c00146c3:	c3                   	ret    

c00146c4 <Krnl::getEnv(Process*, char const*)>:
c00146c4:	53                   	push   ebx
c00146c5:	83 ec 08             	sub    esp,0x8
c00146c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146cc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00146d0:	39 05 30 94 02 c0    	cmp    DWORD PTR ds:0xc0029430,eax
c00146d6:	74 04                	je     c00146dc <Krnl::getEnv(Process*, char const*)+0x18>
c00146d8:	85 c0                	test   eax,eax
c00146da:	75 0b                	jne    c00146e7 <Krnl::getEnv(Process*, char const*)+0x23>
c00146dc:	a1 b4 89 02 c0       	mov    eax,ds:0xc00289b4
c00146e1:	85 c0                	test   eax,eax
c00146e3:	75 19                	jne    c00146fe <Krnl::getEnv(Process*, char const*)+0x3a>
c00146e5:	eb 27                	jmp    c001470e <Krnl::getEnv(Process*, char const*)+0x4a>
c00146e7:	52                   	push   edx
c00146e8:	52                   	push   edx
c00146e9:	53                   	push   ebx
c00146ea:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00146f0:	e8 79 fc ff ff       	call   c001436e <EnvVarContainer::getEnv(char const*)>
c00146f5:	83 c4 10             	add    esp,0x10
c00146f8:	85 c0                	test   eax,eax
c00146fa:	75 28                	jne    c0014724 <Krnl::getEnv(Process*, char const*)+0x60>
c00146fc:	eb de                	jmp    c00146dc <Krnl::getEnv(Process*, char const*)+0x18>
c00146fe:	52                   	push   edx
c00146ff:	52                   	push   edx
c0014700:	53                   	push   ebx
c0014701:	50                   	push   eax
c0014702:	e8 67 fc ff ff       	call   c001436e <EnvVarContainer::getEnv(char const*)>
c0014707:	83 c4 10             	add    esp,0x10
c001470a:	85 c0                	test   eax,eax
c001470c:	75 16                	jne    c0014724 <Krnl::getEnv(Process*, char const*)+0x60>
c001470e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0014712:	a1 b8 89 02 c0       	mov    eax,ds:0xc00289b8
c0014717:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001471b:	83 c4 08             	add    esp,0x8
c001471e:	5b                   	pop    ebx
c001471f:	e9 4a fc ff ff       	jmp    c001436e <EnvVarContainer::getEnv(char const*)>
c0014724:	83 c4 08             	add    esp,0x8
c0014727:	5b                   	pop    ebx
c0014728:	c3                   	ret    

c0014729 <Krnl::setEnvSystem(char const*, char const*)>:
c0014729:	83 ec 10             	sub    esp,0x10
c001472c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014730:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014734:	ff 35 b8 89 02 c0    	push   DWORD PTR ds:0xc00289b8
c001473a:	e8 6d fc ff ff       	call   c00143ac <EnvVarContainer::setEnv(char const*, char const*)>
c001473f:	83 c4 1c             	add    esp,0x1c
c0014742:	c3                   	ret    

c0014743 <Krnl::setEnvUser(char const*, char const*)>:
c0014743:	a1 b4 89 02 c0       	mov    eax,ds:0xc00289b4
c0014748:	85 c0                	test   eax,eax
c001474a:	74 15                	je     c0014761 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001474c:	83 ec 10             	sub    esp,0x10
c001474f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014753:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014757:	50                   	push   eax
c0014758:	e8 4f fc ff ff       	call   c00143ac <EnvVarContainer::setEnv(char const*, char const*)>
c001475d:	83 c4 1c             	add    esp,0x1c
c0014760:	c3                   	ret    
c0014761:	c3                   	ret    

c0014762 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0014762:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014766:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001476c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014770:	e9 37 fc ff ff       	jmp    c00143ac <EnvVarContainer::setEnv(char const*, char const*)>

c0014775 <Krnl::deleteEnvSystem(char const*)>:
c0014775:	c3                   	ret    

c0014776 <Krnl::deleteEnvUser(char const*)>:
c0014776:	c3                   	ret    

c0014777 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0014777:	c3                   	ret    

c0014778 <Krnl::newProcessEnv(Process*)>:
c0014778:	83 ec 28             	sub    esp,0x28
c001477b:	6a 0c                	push   0xc
c001477d:	e8 8d 52 ff ff       	call   c0009a0f <malloc>
c0014782:	5a                   	pop    edx
c0014783:	59                   	pop    ecx
c0014784:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014788:	50                   	push   eax
c0014789:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001478d:	e8 e0 fe ff ff       	call   c0014672 <EnvVarContainer::EnvVarContainer(Process*)>
c0014792:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014796:	83 c4 2c             	add    esp,0x2c
c0014799:	c3                   	ret    

c001479a <Krnl::copyProcessEnv(Process*, Process*)>:
c001479a:	57                   	push   edi
c001479b:	56                   	push   esi
c001479c:	53                   	push   ebx
c001479d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147a1:	83 ec 0c             	sub    esp,0xc
c00147a4:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00147aa:	6a 0c                	push   0xc
c00147ac:	e8 5e 52 ff ff       	call   c0009a0f <malloc>
c00147b1:	89 c3                	mov    ebx,eax
c00147b3:	58                   	pop    eax
c00147b4:	5a                   	pop    edx
c00147b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147b9:	53                   	push   ebx
c00147ba:	e8 b3 fe ff ff       	call   c0014672 <EnvVarContainer::EnvVarContainer(Process*)>
c00147bf:	8b 07                	mov    eax,DWORD PTR [edi]
c00147c1:	89 03                	mov    DWORD PTR [ebx],eax
c00147c3:	c1 e0 03             	shl    eax,0x3
c00147c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00147c9:	e8 41 52 ff ff       	call   c0009a0f <malloc>
c00147ce:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00147d1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00147d3:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00147d6:	c1 e1 03             	shl    ecx,0x3
c00147d9:	89 c7                	mov    edi,eax
c00147db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00147dd:	83 c4 10             	add    esp,0x10
c00147e0:	89 d8                	mov    eax,ebx
c00147e2:	5b                   	pop    ebx
c00147e3:	5e                   	pop    esi
c00147e4:	5f                   	pop    edi
c00147e5:	c3                   	ret    

c00147e6 <Krnl::loadSystemEnv()>:
c00147e6:	53                   	push   ebx
c00147e7:	83 ec 14             	sub    esp,0x14
c00147ea:	6a 0c                	push   0xc
c00147ec:	e8 1e 52 ff ff       	call   c0009a0f <malloc>
c00147f1:	89 c3                	mov    ebx,eax
c00147f3:	58                   	pop    eax
c00147f4:	5a                   	pop    edx
c00147f5:	ff 35 30 94 02 c0    	push   DWORD PTR ds:0xc0029430
c00147fb:	53                   	push   ebx
c00147fc:	e8 71 fe ff ff       	call   c0014672 <EnvVarContainer::EnvVarContainer(Process*)>
c0014801:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014804:	89 1d b8 89 02 c0    	mov    DWORD PTR ds:0xc00289b8,ebx
c001480a:	e8 47 fe ff ff       	call   c0014656 <EnvVarContainer::__loadSystem()>
c001480f:	83 c4 18             	add    esp,0x18
c0014812:	5b                   	pop    ebx
c0014813:	c3                   	ret    

c0014814 <Krnl::loadUserEnv()>:
c0014814:	53                   	push   ebx
c0014815:	83 ec 14             	sub    esp,0x14
c0014818:	6a 0c                	push   0xc
c001481a:	e8 f0 51 ff ff       	call   c0009a0f <malloc>
c001481f:	89 c3                	mov    ebx,eax
c0014821:	58                   	pop    eax
c0014822:	5a                   	pop    edx
c0014823:	ff 35 30 94 02 c0    	push   DWORD PTR ds:0xc0029430
c0014829:	53                   	push   ebx
c001482a:	e8 43 fe ff ff       	call   c0014672 <EnvVarContainer::EnvVarContainer(Process*)>
c001482f:	89 1d b4 89 02 c0    	mov    DWORD PTR ds:0xc00289b4,ebx
c0014835:	83 c4 18             	add    esp,0x18
c0014838:	5b                   	pop    ebx
c0014839:	c3                   	ret    

c001483a <Krnl::flushEnv()>:
c001483a:	c3                   	ret    

c001483b <Krnl::getProcessTotalEnvCount(Process*)>:
c001483b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001483f:	8b 15 b4 89 02 c0    	mov    edx,DWORD PTR ds:0xc00289b4
c0014845:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001484b:	a1 b8 89 02 c0       	mov    eax,ds:0xc00289b8
c0014850:	8b 00                	mov    eax,DWORD PTR [eax]
c0014852:	03 01                	add    eax,DWORD PTR [ecx]
c0014854:	85 d2                	test   edx,edx
c0014856:	74 02                	je     c001485a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0014858:	03 02                	add    eax,DWORD PTR [edx]
c001485a:	c3                   	ret    

c001485b <Krnl::getProcessEnvPair(Process*, int)>:
c001485b:	57                   	push   edi
c001485c:	56                   	push   esi
c001485d:	8b 35 b4 89 02 c0    	mov    esi,DWORD PTR ds:0xc00289b4
c0014863:	53                   	push   ebx
c0014864:	85 f6                	test   esi,esi
c0014866:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001486a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001486e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014874:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014878:	8b 01                	mov    eax,DWORD PTR [ecx]
c001487a:	75 16                	jne    c0014892 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001487c:	39 c2                	cmp    edx,eax
c001487e:	7c 16                	jl     c0014896 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014880:	8b 0d b8 89 02 c0    	mov    ecx,DWORD PTR ds:0xc00289b8
c0014886:	8b 31                	mov    esi,DWORD PTR [ecx]
c0014888:	01 c6                	add    esi,eax
c001488a:	39 d6                	cmp    esi,edx
c001488c:	7e 3c                	jle    c00148ca <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001488e:	29 c2                	sub    edx,eax
c0014890:	eb 04                	jmp    c0014896 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014892:	39 c2                	cmp    edx,eax
c0014894:	7d 05                	jge    c001489b <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0014896:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0014899:	eb 20                	jmp    c00148bb <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001489b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001489d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00148a0:	39 d1                	cmp    ecx,edx
c00148a2:	7e 04                	jle    c00148a8 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00148a4:	29 c2                	sub    edx,eax
c00148a6:	eb 10                	jmp    c00148b8 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00148a8:	8b 35 b8 89 02 c0    	mov    esi,DWORD PTR ds:0xc00289b8
c00148ae:	03 0e                	add    ecx,DWORD PTR [esi]
c00148b0:	39 d1                	cmp    ecx,edx
c00148b2:	7e 16                	jle    c00148ca <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00148b4:	29 c2                	sub    edx,eax
c00148b6:	29 fa                	sub    edx,edi
c00148b8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00148bb:	8d 14 d0             	lea    edx,[eax+edx*8]
c00148be:	8b 02                	mov    eax,DWORD PTR [edx]
c00148c0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00148c3:	89 03                	mov    DWORD PTR [ebx],eax
c00148c5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00148c8:	eb 1d                	jmp    c00148e7 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00148ca:	83 ec 0c             	sub    esp,0xc
c00148cd:	68 7f 59 02 c0       	push   0xc002597f
c00148d2:	e8 18 00 00 00       	call   c00148ef <Krnl::panic(char const*)>
c00148d7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00148dd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00148e4:	83 c4 10             	add    esp,0x10
c00148e7:	89 d8                	mov    eax,ebx
c00148e9:	5b                   	pop    ebx
c00148ea:	5e                   	pop    esi
c00148eb:	5f                   	pop    edi
c00148ec:	c2 04 00             	ret    0x4

c00148ef <Krnl::panic(char const*)>:
c00148ef:	55                   	push   ebp
c00148f0:	89 e5                	mov    ebp,esp
c00148f2:	53                   	push   ebx
c00148f3:	83 ec 10             	sub    esp,0x10
c00148f6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00148f9:	fa                   	cli    
c00148fa:	c6 05 c4 89 02 c0 01 	mov    BYTE PTR ds:0xc00289c4,0x1
c0014901:	53                   	push   ebx
c0014902:	e8 62 51 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0014907:	58                   	pop    eax
c0014908:	c6 05 c0 72 02 c0 00 	mov    BYTE PTR ds:0xc00272c0,0x0
c001490f:	5a                   	pop    edx
c0014910:	53                   	push   ebx
c0014911:	68 99 59 02 c0       	push   0xc0025999
c0014916:	e8 e4 83 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001491b:	59                   	pop    ecx
c001491c:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014921:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014927:	e8 dd 61 ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c001492c:	83 c4 0c             	add    esp,0xc
c001492f:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014934:	6a 01                	push   0x1
c0014936:	6a 0f                	push   0xf
c0014938:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001493e:	e8 25 60 ff ff       	call   c000a968 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014943:	58                   	pop    eax
c0014944:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014949:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001494f:	e8 36 65 ff ff       	call   c000ae8a <VgaText::clearScreen()>
c0014954:	58                   	pop    eax
c0014955:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c001495a:	5a                   	pop    edx
c001495b:	68 b2 59 02 c0       	push   0xc00259b2
c0014960:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014966:	e8 ab 66 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c001496b:	59                   	pop    ecx
c001496c:	58                   	pop    eax
c001496d:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014972:	68 58 5a 02 c0       	push   0xc0025a58
c0014977:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001497d:	e8 94 66 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014982:	58                   	pop    eax
c0014983:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014988:	5a                   	pop    edx
c0014989:	68 ce 59 02 c0       	push   0xc00259ce
c001498e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014994:	e8 7d 66 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014999:	59                   	pop    ecx
c001499a:	58                   	pop    eax
c001499b:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c00149a0:	53                   	push   ebx
c00149a1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00149a7:	e8 6a 66 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c00149ac:	58                   	pop    eax
c00149ad:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c00149b2:	5a                   	pop    edx
c00149b3:	68 ee 59 02 c0       	push   0xc00259ee
c00149b8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00149be:	e8 53 66 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c00149c3:	a1 c0 89 02 c0       	mov    eax,ds:0xc00289c0
c00149c8:	83 c4 10             	add    esp,0x10
c00149cb:	85 c0                	test   eax,eax
c00149cd:	74 02                	je     c00149d1 <Krnl::panic(char const*)+0xe2>
c00149cf:	ff d0                	call   eax
c00149d1:	83 ec 0c             	sub    esp,0xc
c00149d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00149d7:	e8 41 32 00 00       	call   c0017c1d <Thr::getDriverNameFromAddress(unsigned long)>
c00149dc:	83 c4 10             	add    esp,0x10
c00149df:	89 c3                	mov    ebx,eax
c00149e1:	85 c0                	test   eax,eax
c00149e3:	0f 84 4e 02 00 00    	je     c0014c37 <Krnl::panic(char const*)+0x348>
c00149e9:	83 ec 08             	sub    esp,0x8
c00149ec:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c00149f1:	68 94 5a 02 c0       	push   0xc0025a94
c00149f6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00149fc:	e8 15 66 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a01:	58                   	pop    eax
c0014a02:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014a07:	5a                   	pop    edx
c0014a08:	68 ce 59 02 c0       	push   0xc00259ce
c0014a0d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a13:	e8 fe 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a18:	59                   	pop    ecx
c0014a19:	58                   	pop    eax
c0014a1a:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014a1f:	53                   	push   ebx
c0014a20:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a26:	e8 eb 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a2b:	83 c4 10             	add    esp,0x10
c0014a2e:	83 ec 08             	sub    esp,0x8
c0014a31:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014a36:	68 ed 59 02 c0       	push   0xc00259ed
c0014a3b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a41:	e8 d0 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a46:	58                   	pop    eax
c0014a47:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014a4c:	5a                   	pop    edx
c0014a4d:	68 ec 5a 02 c0       	push   0xc0025aec
c0014a52:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a58:	e8 b9 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a5d:	59                   	pop    ecx
c0014a5e:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014a63:	5b                   	pop    ebx
c0014a64:	68 2c 5b 02 c0       	push   0xc0025b2c
c0014a69:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a6f:	e8 a2 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a74:	58                   	pop    eax
c0014a75:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014a7a:	5a                   	pop    edx
c0014a7b:	68 d9 59 02 c0       	push   0xc00259d9
c0014a80:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a86:	e8 8b 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a8b:	59                   	pop    ecx
c0014a8c:	5b                   	pop    ebx
c0014a8d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014a90:	68 f1 59 02 c0       	push   0xc00259f1
c0014a95:	e8 65 82 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0014a9a:	58                   	pop    eax
c0014a9b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014a9e:	5a                   	pop    edx
c0014a9f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014aa2:	68 fa 59 02 c0       	push   0xc00259fa
c0014aa7:	e8 53 82 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0014aac:	59                   	pop    ecx
c0014aad:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014ab0:	5b                   	pop    ebx
c0014ab1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ab3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014ab6:	68 03 5a 02 c0       	push   0xc0025a03
c0014abb:	e8 3f 82 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0014ac0:	58                   	pop    eax
c0014ac1:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014ac6:	5a                   	pop    edx
c0014ac7:	68 70 5b 02 c0       	push   0xc0025b70
c0014acc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014ad2:	e8 3f 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014ad7:	59                   	pop    ecx
c0014ad8:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014add:	5b                   	pop    ebx
c0014ade:	68 0c 5a 02 c0       	push   0xc0025a0c
c0014ae3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014ae9:	e8 28 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014aee:	0f 20 c0             	mov    eax,cr0
c0014af1:	5a                   	pop    edx
c0014af2:	59                   	pop    ecx
c0014af3:	50                   	push   eax
c0014af4:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014af9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014aff:	e8 cc 64 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014b04:	5b                   	pop    ebx
c0014b05:	58                   	pop    eax
c0014b06:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014b0b:	68 16 5a 02 c0       	push   0xc0025a16
c0014b10:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b16:	e8 fb 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b1b:	0f 20 d0             	mov    eax,cr2
c0014b1e:	5a                   	pop    edx
c0014b1f:	59                   	pop    ecx
c0014b20:	50                   	push   eax
c0014b21:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014b26:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b2c:	e8 9f 64 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014b31:	5b                   	pop    ebx
c0014b32:	58                   	pop    eax
c0014b33:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014b38:	68 20 5a 02 c0       	push   0xc0025a20
c0014b3d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b43:	e8 ce 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b48:	0f 20 d8             	mov    eax,cr3
c0014b4b:	5a                   	pop    edx
c0014b4c:	59                   	pop    ecx
c0014b4d:	50                   	push   eax
c0014b4e:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014b53:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b59:	e8 72 64 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014b5e:	5b                   	pop    ebx
c0014b5f:	58                   	pop    eax
c0014b60:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014b65:	68 33 5a 02 c0       	push   0xc0025a33
c0014b6a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b70:	e8 a1 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b75:	0f 20 e0             	mov    eax,cr4
c0014b78:	5a                   	pop    edx
c0014b79:	59                   	pop    ecx
c0014b7a:	50                   	push   eax
c0014b7b:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014b80:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b86:	e8 45 64 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014b8b:	5b                   	pop    ebx
c0014b8c:	58                   	pop    eax
c0014b8d:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014b92:	68 3d 5a 02 c0       	push   0xc0025a3d
c0014b97:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b9d:	e8 74 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014ba2:	5a                   	pop    edx
c0014ba3:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014ba8:	59                   	pop    ecx
c0014ba9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014baf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014bb2:	50                   	push   eax
c0014bb3:	e8 18 64 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014bb8:	5b                   	pop    ebx
c0014bb9:	58                   	pop    eax
c0014bba:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014bbf:	68 54 5a 02 c0       	push   0xc0025a54
c0014bc4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014bca:	e8 47 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014bcf:	5a                   	pop    edx
c0014bd0:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014bd5:	59                   	pop    ecx
c0014bd6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bdc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014bdf:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014be2:	50                   	push   eax
c0014be3:	e8 e8 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014be8:	5b                   	pop    ebx
c0014be9:	58                   	pop    eax
c0014bea:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014bef:	68 54 5a 02 c0       	push   0xc0025a54
c0014bf4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014bfa:	e8 17 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014bff:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014c04:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014c07:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c0d:	8b 12                	mov    edx,DWORD PTR [edx]
c0014c0f:	59                   	pop    ecx
c0014c10:	5b                   	pop    ebx
c0014c11:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014c14:	50                   	push   eax
c0014c15:	e8 b6 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014c1a:	83 c4 10             	add    esp,0x10
c0014c1d:	b2 fe                	mov    dl,0xfe
c0014c1f:	e4 60                	in     al,0x60
c0014c21:	3c 1c                	cmp    al,0x1c
c0014c23:	74 04                	je     c0014c29 <Krnl::panic(char const*)+0x33a>
c0014c25:	3c 5a                	cmp    al,0x5a
c0014c27:	75 f6                	jne    c0014c1f <Krnl::panic(char const*)+0x330>
c0014c29:	e4 64                	in     al,0x64
c0014c2b:	a8 02                	test   al,0x2
c0014c2d:	75 fa                	jne    c0014c29 <Krnl::panic(char const*)+0x33a>
c0014c2f:	88 d0                	mov    al,dl
c0014c31:	e6 64                	out    0x64,al
c0014c33:	fa                   	cli    
c0014c34:	f4                   	hlt    
c0014c35:	eb e8                	jmp    c0014c1f <Krnl::panic(char const*)+0x330>
c0014c37:	50                   	push   eax
c0014c38:	50                   	push   eax
c0014c39:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014c3e:	68 c0 5a 02 c0       	push   0xc0025ac0
c0014c43:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c49:	e8 c8 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014c4e:	58                   	pop    eax
c0014c4f:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014c54:	5a                   	pop    edx
c0014c55:	68 ce 59 02 c0       	push   0xc00259ce
c0014c5a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c60:	e8 b1 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014c65:	59                   	pop    ecx
c0014c66:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c6b:	5b                   	pop    ebx
c0014c6c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014c6f:	83 c0 0c             	add    eax,0xc
c0014c72:	50                   	push   eax
c0014c73:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0014c78:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c7e:	e8 93 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014c83:	83 c4 10             	add    esp,0x10
c0014c86:	e9 a3 fd ff ff       	jmp    c0014a2e <Krnl::panic(char const*)+0x13f>

c0014c8b <Krnl::powerThread(void*)>:
c0014c8b:	53                   	push   ebx
c0014c8c:	83 ec 08             	sub    esp,0x8
c0014c8f:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0014c94:	48                   	dec    eax
c0014c95:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0014c9a:	75 01                	jne    c0014c9d <Krnl::powerThread(void*)+0x12>
c0014c9c:	fb                   	sti    
c0014c9d:	52                   	push   edx
c0014c9e:	52                   	push   edx
c0014c9f:	ff 35 24 8a 02 c0    	push   DWORD PTR ds:0xc0028a24
c0014ca5:	68 96 5b 02 c0       	push   0xc0025b96
c0014caa:	e8 50 80 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0014caf:	59                   	pop    ecx
c0014cb0:	8b 1d 14 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a14
c0014cb6:	58                   	pop    eax
c0014cb7:	c6 05 e0 89 02 c0 00 	mov    BYTE PTR ds:0xc00289e0,0x0
c0014cbe:	53                   	push   ebx
c0014cbf:	68 a0 5b 02 c0       	push   0xc0025ba0
c0014cc4:	e8 36 80 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0014cc9:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0014cd0:	e8 87 3c 00 00       	call   c001895c <sleep(unsigned int)>
c0014cd5:	a1 24 8a 02 c0       	mov    eax,ds:0xc0028a24
c0014cda:	83 c4 10             	add    esp,0x10
c0014cdd:	83 c0 0a             	add    eax,0xa
c0014ce0:	85 db                	test   ebx,ebx
c0014ce2:	a3 24 8a 02 c0       	mov    ds:0xc0028a24,eax
c0014ce7:	74 b4                	je     c0014c9d <Krnl::powerThread(void*)+0x12>
c0014ce9:	39 d8                	cmp    eax,ebx
c0014ceb:	7e b0                	jle    c0014c9d <Krnl::powerThread(void*)+0x12>
c0014ced:	83 ec 0c             	sub    esp,0xc
c0014cf0:	68 b8 5b 02 c0       	push   0xc0025bb8
c0014cf5:	e8 05 80 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0014cfa:	58                   	pop    eax
c0014cfb:	ff 35 e8 7e 02 c0    	push   DWORD PTR ds:0xc0027ee8
c0014d01:	e8 b8 42 ff ff       	call   c0008fbe <Computer::sleep()>
c0014d06:	83 c4 10             	add    esp,0x10
c0014d09:	eb 92                	jmp    c0014c9d <Krnl::powerThread(void*)+0x12>

c0014d0b <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0014d0b:	57                   	push   edi
c0014d0c:	b9 09 00 00 00       	mov    ecx,0x9
c0014d11:	56                   	push   esi
c0014d12:	bf 00 8a 02 c0       	mov    edi,0xc0028a00
c0014d17:	fc                   	cld    
c0014d18:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014d1c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014d1e:	5e                   	pop    esi
c0014d1f:	5f                   	pop    edi
c0014d20:	c3                   	ret    

c0014d21 <Krnl::userIOReceived()>:
c0014d21:	c7 05 24 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a24,0x0
c0014d2b:	c3                   	ret    

c0014d2c <Krnl::handlePowerButton()>:
c0014d2c:	83 ec 0c             	sub    esp,0xc
c0014d2f:	a1 00 8a 02 c0       	mov    eax,ds:0xc0028a00
c0014d34:	83 f8 02             	cmp    eax,0x2
c0014d37:	75 10                	jne    c0014d49 <Krnl::handlePowerButton()+0x1d>
c0014d39:	83 ec 0c             	sub    esp,0xc
c0014d3c:	ff 35 e8 7e 02 c0    	push   DWORD PTR ds:0xc0027ee8
c0014d42:	e8 47 42 ff ff       	call   c0008f8e <Computer::shutdown()>
c0014d47:	eb 11                	jmp    c0014d5a <Krnl::handlePowerButton()+0x2e>
c0014d49:	48                   	dec    eax
c0014d4a:	75 11                	jne    c0014d5d <Krnl::handlePowerButton()+0x31>
c0014d4c:	83 ec 0c             	sub    esp,0xc
c0014d4f:	ff 35 e8 7e 02 c0    	push   DWORD PTR ds:0xc0027ee8
c0014d55:	e8 64 42 ff ff       	call   c0008fbe <Computer::sleep()>
c0014d5a:	83 c4 10             	add    esp,0x10
c0014d5d:	83 c4 0c             	add    esp,0xc
c0014d60:	c3                   	ret    

c0014d61 <Krnl::handleSleepButton()>:
c0014d61:	83 ec 0c             	sub    esp,0xc
c0014d64:	a1 04 8a 02 c0       	mov    eax,ds:0xc0028a04
c0014d69:	83 f8 02             	cmp    eax,0x2
c0014d6c:	75 10                	jne    c0014d7e <Krnl::handleSleepButton()+0x1d>
c0014d6e:	83 ec 0c             	sub    esp,0xc
c0014d71:	ff 35 e8 7e 02 c0    	push   DWORD PTR ds:0xc0027ee8
c0014d77:	e8 12 42 ff ff       	call   c0008f8e <Computer::shutdown()>
c0014d7c:	eb 11                	jmp    c0014d8f <Krnl::handleSleepButton()+0x2e>
c0014d7e:	48                   	dec    eax
c0014d7f:	75 11                	jne    c0014d92 <Krnl::handleSleepButton()+0x31>
c0014d81:	83 ec 0c             	sub    esp,0xc
c0014d84:	ff 35 e8 7e 02 c0    	push   DWORD PTR ds:0xc0027ee8
c0014d8a:	e8 2f 42 ff ff       	call   c0008fbe <Computer::sleep()>
c0014d8f:	83 c4 10             	add    esp,0x10
c0014d92:	83 c4 0c             	add    esp,0xc
c0014d95:	c3                   	ret    

c0014d96 <Krnl::setupPowerManager()>:
c0014d96:	83 ec 0c             	sub    esp,0xc
c0014d99:	c7 05 24 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a24,0x0
c0014da3:	68 f0 00 00 00       	push   0xf0
c0014da8:	c6 05 e0 89 02 c0 00 	mov    BYTE PTR ds:0xc00289e0,0x0
c0014daf:	6a 00                	push   0x0
c0014db1:	68 8b 4c 01 c0       	push   0xc0014c8b
c0014db6:	ff 35 30 94 02 c0    	push   DWORD PTR ds:0xc0029430
c0014dbc:	e8 77 36 00 00       	call   c0018438 <Process::createThread(void (*)(void*), void*, int)>
c0014dc1:	c7 05 00 8a 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028a00,0x2
c0014dcb:	c7 05 04 8a 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028a04,0x1
c0014dd5:	c7 05 08 8a 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028a08,0x3
c0014ddf:	c7 05 0c 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a0c,0x0
c0014de9:	c7 05 18 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a18,0x0
c0014df3:	c7 05 10 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a10,0x0
c0014dfd:	c7 05 1c 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a1c,0x0
c0014e07:	c7 05 14 8a 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028a14,0x3c
c0014e11:	c7 05 20 8a 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028a20,0x3c
c0014e1b:	83 c4 1c             	add    esp,0x1c
c0014e1e:	c3                   	ret    
c0014e1f:	90                   	nop

c0014e20 <Net::switchEndian16(unsigned short)>:
c0014e20:	83 ec 04             	sub    esp,0x4
c0014e23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014e27:	66 89 04 24          	mov    WORD PTR [esp],ax
c0014e2b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014e2f:	c1 f8 08             	sar    eax,0x8
c0014e32:	89 c2                	mov    edx,eax
c0014e34:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014e38:	c1 e0 08             	shl    eax,0x8
c0014e3b:	09 d0                	or     eax,edx
c0014e3d:	83 c4 04             	add    esp,0x4
c0014e40:	c3                   	ret    
c0014e41:	8d 76 00             	lea    esi,[esi+0x0]

c0014e44 <Net::switchEndian32(unsigned int)>:
c0014e44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e48:	c1 e8 18             	shr    eax,0x18
c0014e4b:	89 c2                	mov    edx,eax
c0014e4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e51:	c1 e0 08             	shl    eax,0x8
c0014e54:	25 00 00 ff 00       	and    eax,0xff0000
c0014e59:	09 c2                	or     edx,eax
c0014e5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e5f:	c1 e8 08             	shr    eax,0x8
c0014e62:	25 00 ff 00 00       	and    eax,0xff00
c0014e67:	09 c2                	or     edx,eax
c0014e69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e6d:	c1 e0 18             	shl    eax,0x18
c0014e70:	09 d0                	or     eax,edx
c0014e72:	c3                   	ret    
c0014e73:	90                   	nop

c0014e74 <Net::crc32Calc(unsigned char*, int)>:
c0014e74:	83 ec 10             	sub    esp,0x10
c0014e77:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014e7c:	75 0a                	jne    c0014e88 <Net::crc32Calc(unsigned char*, int)+0x14>
c0014e7e:	b8 00 00 00 00       	mov    eax,0x0
c0014e83:	e9 8c 00 00 00       	jmp    c0014f14 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014e88:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014e8d:	7f 09                	jg     c0014e98 <Net::crc32Calc(unsigned char*, int)+0x24>
c0014e8f:	b8 00 00 00 00       	mov    eax,0x0
c0014e94:	eb 7e                	jmp    c0014f14 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014e96:	66 90                	xchg   ax,ax
c0014e98:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0014ea0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014ea8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014eac:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0014eb0:	7d 5a                	jge    c0014f0c <Net::crc32Calc(unsigned char*, int)+0x98>
c0014eb2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014eb6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014eba:	01 d0                	add    eax,edx
c0014ebc:	8a 00                	mov    al,BYTE PTR [eax]
c0014ebe:	0f b6 c0             	movzx  eax,al
c0014ec1:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0014ec5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014ecd:	8d 76 00             	lea    esi,[esi+0x0]
c0014ed0:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0014ed5:	7f 2d                	jg     c0014f04 <Net::crc32Calc(unsigned char*, int)+0x90>
c0014ed7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014edb:	83 e0 01             	and    eax,0x1
c0014ede:	74 10                	je     c0014ef0 <Net::crc32Calc(unsigned char*, int)+0x7c>
c0014ee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ee4:	d1 e8                	shr    eax,1
c0014ee6:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0014eeb:	eb 0b                	jmp    c0014ef8 <Net::crc32Calc(unsigned char*, int)+0x84>
c0014eed:	8d 76 00             	lea    esi,[esi+0x0]
c0014ef0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ef4:	d1 e8                	shr    eax,1
c0014ef6:	66 90                	xchg   ax,ax
c0014ef8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014efc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014f00:	eb ce                	jmp    c0014ed0 <Net::crc32Calc(unsigned char*, int)+0x5c>
c0014f02:	66 90                	xchg   ax,ax
c0014f04:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014f08:	eb 9e                	jmp    c0014ea8 <Net::crc32Calc(unsigned char*, int)+0x34>
c0014f0a:	66 90                	xchg   ax,ax
c0014f0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f10:	f7 d0                	not    eax
c0014f12:	66 90                	xchg   ax,ax
c0014f14:	83 c4 10             	add    esp,0x10
c0014f17:	c3                   	ret    

c0014f18 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0014f18:	57                   	push   edi
c0014f19:	56                   	push   esi
c0014f1a:	53                   	push   ebx
c0014f1b:	83 ec 60             	sub    esp,0x60
c0014f1e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014f25:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014f29:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0014f31:	8d 76 00             	lea    esi,[esi+0x0]
c0014f34:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c0014f39:	7f 1d                	jg     c0014f58 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c0014f3b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014f42:	8d 50 01             	lea    edx,[eax+0x1]
c0014f45:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014f4c:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0014f4f:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0014f53:	eb df                	jmp    c0014f34 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c0014f55:	8d 76 00             	lea    esi,[esi+0x0]
c0014f58:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014f5f:	8d 50 01             	lea    edx,[eax+0x1]
c0014f62:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014f69:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0014f6c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014f73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014f77:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c0014f7b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014f7f:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c0014f87:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014f97:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014f9b:	89 c6                	mov    esi,eax
c0014f9d:	89 d7                	mov    edi,edx
c0014f9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014fa1:	89 c8                	mov    eax,ecx
c0014fa3:	89 fa                	mov    edx,edi
c0014fa5:	89 f3                	mov    ebx,esi
c0014fa7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014fab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014faf:	89 04 24             	mov    DWORD PTR [esp],eax
c0014fb2:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014fba:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014fc1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014fc5:	8d 44 24 78          	lea    eax,[esp+0x78]
c0014fc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014fcd:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014fd5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014fd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014fdd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fe1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014fe5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014fe9:	89 c6                	mov    esi,eax
c0014feb:	89 d7                	mov    edi,edx
c0014fed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014fef:	89 c8                	mov    eax,ecx
c0014ff1:	89 fa                	mov    edx,edi
c0014ff3:	89 f3                	mov    ebx,esi
c0014ff5:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014ff9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014ffd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015001:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0015009:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015010:	0f b7 c0             	movzx  eax,ax
c0015013:	c1 f8 08             	sar    eax,0x8
c0015016:	89 c1                	mov    ecx,eax
c0015018:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001501f:	8d 50 01             	lea    edx,[eax+0x1]
c0015022:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015029:	88 ca                	mov    dl,cl
c001502b:	88 10                	mov    BYTE PTR [eax],dl
c001502d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0015034:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001503b:	8d 48 01             	lea    ecx,[eax+0x1]
c001503e:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c0015045:	88 10                	mov    BYTE PTR [eax],dl
c0015047:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001504b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001504f:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c0015056:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001505a:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001505e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0015062:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015066:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001506a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001506e:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0015072:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0015076:	89 c6                	mov    esi,eax
c0015078:	89 d7                	mov    edi,edx
c001507a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001507c:	89 c8                	mov    eax,ecx
c001507e:	89 fa                	mov    edx,edi
c0015080:	89 f3                	mov    ebx,esi
c0015082:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0015086:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001508a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001508e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0015092:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0015099:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00150a0:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c00150a4:	50                   	push   eax
c00150a5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00150a9:	e8 c6 fd ff ff       	call   c0014e74 <Net::crc32Calc(unsigned char*, int)>
c00150ae:	83 c4 08             	add    esp,0x8
c00150b1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00150b5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00150b9:	c1 e8 18             	shr    eax,0x18
c00150bc:	89 c1                	mov    ecx,eax
c00150be:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00150c5:	8d 50 01             	lea    edx,[eax+0x1]
c00150c8:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00150cf:	88 ca                	mov    dl,cl
c00150d1:	88 10                	mov    BYTE PTR [eax],dl
c00150d3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00150d7:	c1 e8 10             	shr    eax,0x10
c00150da:	89 c1                	mov    ecx,eax
c00150dc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00150e3:	8d 50 01             	lea    edx,[eax+0x1]
c00150e6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00150ed:	88 ca                	mov    dl,cl
c00150ef:	88 10                	mov    BYTE PTR [eax],dl
c00150f1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00150f5:	c1 e8 08             	shr    eax,0x8
c00150f8:	89 c1                	mov    ecx,eax
c00150fa:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015101:	8d 50 01             	lea    edx,[eax+0x1]
c0015104:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001510b:	88 ca                	mov    dl,cl
c001510d:	88 10                	mov    BYTE PTR [eax],dl
c001510f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015116:	8d 50 01             	lea    edx,[eax+0x1]
c0015119:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015120:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0015124:	88 10                	mov    BYTE PTR [eax],dl
c0015126:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001512a:	83 c4 60             	add    esp,0x60
c001512d:	5b                   	pop    ebx
c001512e:	5e                   	pop    esi
c001512f:	5f                   	pop    edi
c0015130:	c3                   	ret    
c0015131:	8d 76 00             	lea    esi,[esi+0x0]

c0015134 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0015134:	57                   	push   edi
c0015135:	56                   	push   esi
c0015136:	53                   	push   ebx
c0015137:	83 ec 70             	sub    esp,0x70
c001513a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015141:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0015145:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001514d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015154:	83 c0 0e             	add    eax,0xe
c0015157:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001515b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015162:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015166:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001516e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015172:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015176:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001517a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001517e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015182:	89 c6                	mov    esi,eax
c0015184:	89 d7                	mov    edi,edx
c0015186:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015188:	89 c8                	mov    eax,ecx
c001518a:	89 fa                	mov    edx,edi
c001518c:	89 f3                	mov    ebx,esi
c001518e:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0015192:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0015196:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001519a:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c00151a2:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00151a9:	83 c0 08             	add    eax,0x8
c00151ac:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00151b0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00151b7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00151bb:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c00151c3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00151c7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00151cb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00151cf:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00151d3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00151d7:	89 c6                	mov    esi,eax
c00151d9:	89 d7                	mov    edi,edx
c00151db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00151dd:	89 c8                	mov    eax,ecx
c00151df:	89 fa                	mov    edx,edi
c00151e1:	89 f3                	mov    ebx,esi
c00151e3:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c00151e7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00151eb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00151ef:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c00151f7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00151fe:	8d 50 01             	lea    edx,[eax+0x1]
c0015201:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015208:	8a 00                	mov    al,BYTE PTR [eax]
c001520a:	0f b6 c0             	movzx  eax,al
c001520d:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c0015212:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015219:	8d 50 01             	lea    edx,[eax+0x1]
c001521c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015223:	8a 00                	mov    al,BYTE PTR [eax]
c0015225:	0f b6 c0             	movzx  eax,al
c0015228:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001522d:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0015232:	c1 e0 08             	shl    eax,0x8
c0015235:	89 c2                	mov    edx,eax
c0015237:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001523b:	09 d0                	or     eax,edx
c001523d:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015244:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0015248:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0015250:	75 46                	jne    c0015298 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015252:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015259:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001525c:	66 3d dc 05          	cmp    ax,0x5dc
c0015260:	77 16                	ja     c0015278 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0015262:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015269:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001526c:	0f b7 c0             	movzx  eax,ax
c001526f:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0015276:	eb 20                	jmp    c0015298 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015278:	83 ec 0c             	sub    esp,0xc
c001527b:	68 c8 5b 02 c0       	push   0xc0025bc8
c0015280:	e8 7a 7a ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0015285:	83 c4 10             	add    esp,0x10
c0015288:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001528f:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0015293:	e9 18 01 00 00       	jmp    c00153b0 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0015298:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001529f:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00152a6:	8b 12                	mov    edx,DWORD PTR [edx]
c00152a8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00152ac:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00152b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00152b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00152bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00152bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00152c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00152c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00152cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00152cf:	89 c6                	mov    esi,eax
c00152d1:	89 d7                	mov    edi,edx
c00152d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00152d5:	89 c8                	mov    eax,ecx
c00152d7:	89 fa                	mov    edx,edi
c00152d9:	89 f3                	mov    ebx,esi
c00152db:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00152df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00152e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00152e6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00152ed:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c00152f4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00152fb:	8d 50 01             	lea    edx,[eax+0x1]
c00152fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015305:	8a 00                	mov    al,BYTE PTR [eax]
c0015307:	0f b6 c0             	movzx  eax,al
c001530a:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001530e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015315:	8d 50 01             	lea    edx,[eax+0x1]
c0015318:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001531f:	8a 00                	mov    al,BYTE PTR [eax]
c0015321:	0f b6 c0             	movzx  eax,al
c0015324:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0015328:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001532f:	8d 50 01             	lea    edx,[eax+0x1]
c0015332:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015339:	8a 00                	mov    al,BYTE PTR [eax]
c001533b:	0f b6 c0             	movzx  eax,al
c001533e:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0015342:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015349:	8d 50 01             	lea    edx,[eax+0x1]
c001534c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015353:	8a 00                	mov    al,BYTE PTR [eax]
c0015355:	0f b6 c0             	movzx  eax,al
c0015358:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001535c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0015360:	c1 e0 18             	shl    eax,0x18
c0015363:	89 c2                	mov    edx,eax
c0015365:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0015369:	c1 e0 10             	shl    eax,0x10
c001536c:	09 c2                	or     edx,eax
c001536e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0015372:	c1 e0 08             	shl    eax,0x8
c0015375:	09 d0                	or     eax,edx
c0015377:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001537b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001537f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015386:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001538a:	83 e8 04             	sub    eax,0x4
c001538d:	83 ec 08             	sub    esp,0x8
c0015390:	50                   	push   eax
c0015391:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015395:	e8 da fa ff ff       	call   c0014e74 <Net::crc32Calc(unsigned char*, int)>
c001539a:	83 c4 10             	add    esp,0x10
c001539d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00153a1:	0f 94 c2             	sete   dl
c00153a4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00153ab:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c00153ae:	90                   	nop
c00153af:	90                   	nop
c00153b0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00153b7:	83 c4 70             	add    esp,0x70
c00153ba:	5b                   	pop    ebx
c00153bb:	5e                   	pop    esi
c00153bc:	5f                   	pop    edi
c00153bd:	c2 04 00             	ret    0x4

c00153c0 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00153c0:	55                   	push   ebp
c00153c1:	57                   	push   edi
c00153c2:	56                   	push   esi
c00153c3:	53                   	push   ebx
c00153c4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00153ca:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00153d1:	8a 1e                	mov    bl,BYTE PTR [esi]
c00153d3:	8d 6e 01             	lea    ebp,[esi+0x1]
c00153d6:	80 fb 40             	cmp    bl,0x40
c00153d9:	75 1b                	jne    c00153f6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00153db:	8a 16                	mov    dl,BYTE PTR [esi]
c00153dd:	84 d2                	test   dl,dl
c00153df:	0f 84 f1 00 00 00    	je     c00154d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00153e5:	8d 46 01             	lea    eax,[esi+0x1]
c00153e8:	80 fa 3a             	cmp    dl,0x3a
c00153eb:	74 04                	je     c00153f1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00153ed:	89 c6                	mov    esi,eax
c00153ef:	eb ea                	jmp    c00153db <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00153f1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00153f4:	89 c6                	mov    esi,eax
c00153f6:	50                   	push   eax
c00153f7:	6a 40                	push   0x40
c00153f9:	6a 00                	push   0x0
c00153fb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00153ff:	50                   	push   eax
c0015400:	e8 7f b2 fe ff       	call   c0000684 <memset>
c0015405:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001540c:	31 c0                	xor    eax,eax
c001540e:	83 c4 10             	add    esp,0x10
c0015411:	8a 0f                	mov    cl,BYTE PTR [edi]
c0015413:	84 c9                	test   cl,cl
c0015415:	0f 84 bb 00 00 00    	je     c00154d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001541b:	3d c7 00 00 00       	cmp    eax,0xc7
c0015420:	0f 8f b0 00 00 00    	jg     c00154d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015426:	80 f9 0a             	cmp    cl,0xa
c0015429:	0f 85 98 00 00 00    	jne    c00154c7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001542f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0015434:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0015438:	a8 df                	test   al,0xdf
c001543a:	0f 94 c1             	sete   cl
c001543d:	3c 23                	cmp    al,0x23
c001543f:	0f 94 c2             	sete   dl
c0015442:	08 d1                	or     cl,dl
c0015444:	75 4a                	jne    c0015490 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015446:	8d 50 f7             	lea    edx,[eax-0x9]
c0015449:	80 fa 01             	cmp    dl,0x1
c001544c:	76 42                	jbe    c0015490 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001544e:	3c 5b                	cmp    al,0x5b
c0015450:	75 42                	jne    c0015494 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0015452:	80 fb 40             	cmp    bl,0x40
c0015455:	75 39                	jne    c0015490 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015457:	83 ec 0c             	sub    esp,0xc
c001545a:	8d 54 24 65          	lea    edx,[esp+0x65]
c001545e:	52                   	push   edx
c001545f:	e8 3c b2 fe ff       	call   c00006a0 <strlen>
c0015464:	83 c4 10             	add    esp,0x10
c0015467:	83 f8 3f             	cmp    eax,0x3f
c001546a:	77 6a                	ja     c00154d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001546c:	50                   	push   eax
c001546d:	50                   	push   eax
c001546e:	8d 54 24 61          	lea    edx,[esp+0x61]
c0015472:	52                   	push   edx
c0015473:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015477:	52                   	push   edx
c0015478:	e8 c3 b2 fe ff       	call   c0000740 <strcpy>
c001547d:	58                   	pop    eax
c001547e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015482:	52                   	push   edx
c0015483:	e8 18 b2 fe ff       	call   c00006a0 <strlen>
c0015488:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001548d:	83 c4 10             	add    esp,0x10
c0015490:	31 d2                	xor    edx,edx
c0015492:	eb 3a                	jmp    c00154ce <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015494:	80 fb 40             	cmp    bl,0x40
c0015497:	74 06                	je     c001549f <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015499:	8d 44 24 58          	lea    eax,[esp+0x58]
c001549d:	eb 20                	jmp    c00154bf <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001549f:	50                   	push   eax
c00154a0:	50                   	push   eax
c00154a1:	55                   	push   ebp
c00154a2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00154a6:	50                   	push   eax
c00154a7:	e8 20 b3 fe ff       	call   c00007cc <strcmp>
c00154ac:	83 c4 10             	add    esp,0x10
c00154af:	85 c0                	test   eax,eax
c00154b1:	75 dd                	jne    c0015490 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00154b3:	eb e4                	jmp    c0015499 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c00154b5:	8d 50 01             	lea    edx,[eax+0x1]
c00154b8:	80 f9 3d             	cmp    cl,0x3d
c00154bb:	74 1d                	je     c00154da <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00154bd:	89 d0                	mov    eax,edx
c00154bf:	8a 08                	mov    cl,BYTE PTR [eax]
c00154c1:	84 c9                	test   cl,cl
c00154c3:	75 f0                	jne    c00154b5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00154c5:	eb 0f                	jmp    c00154d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00154c7:	8d 50 01             	lea    edx,[eax+0x1]
c00154ca:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00154ce:	47                   	inc    edi
c00154cf:	89 d0                	mov    eax,edx
c00154d1:	e9 3b ff ff ff       	jmp    c0015411 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00154d6:	31 c0                	xor    eax,eax
c00154d8:	eb 33                	jmp    c001550d <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00154da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00154de:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00154e1:	50                   	push   eax
c00154e2:	50                   	push   eax
c00154e3:	8d 44 24 60          	lea    eax,[esp+0x60]
c00154e7:	50                   	push   eax
c00154e8:	56                   	push   esi
c00154e9:	e8 de b2 fe ff       	call   c00007cc <strcmp>
c00154ee:	83 c4 10             	add    esp,0x10
c00154f1:	85 c0                	test   eax,eax
c00154f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00154f7:	75 97                	jne    c0015490 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00154f9:	51                   	push   ecx
c00154fa:	51                   	push   ecx
c00154fb:	52                   	push   edx
c00154fc:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015503:	e8 38 b2 fe ff       	call   c0000740 <strcpy>
c0015508:	83 c4 10             	add    esp,0x10
c001550b:	b0 01                	mov    al,0x1
c001550d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015513:	5b                   	pop    ebx
c0015514:	5e                   	pop    esi
c0015515:	5f                   	pop    edi
c0015516:	5d                   	pop    ebp
c0015517:	c3                   	ret    

c0015518 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015518:	57                   	push   edi
c0015519:	56                   	push   esi
c001551a:	53                   	push   ebx
c001551b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015521:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0015528:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001552f:	53                   	push   ebx
c0015530:	e8 6b b1 fe ff       	call   c00006a0 <strlen>
c0015535:	89 34 24             	mov    DWORD PTR [esp],esi
c0015538:	89 c7                	mov    edi,eax
c001553a:	e8 61 b1 fe ff       	call   c00006a0 <strlen>
c001553f:	83 c4 10             	add    esp,0x10
c0015542:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015546:	3d ff 00 00 00       	cmp    eax,0xff
c001554b:	0f 87 d3 00 00 00    	ja     c0015624 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015551:	57                   	push   edi
c0015552:	57                   	push   edi
c0015553:	56                   	push   esi
c0015554:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015558:	56                   	push   esi
c0015559:	e8 e2 b1 fe ff       	call   c0000740 <strcpy>
c001555e:	58                   	pop    eax
c001555f:	5a                   	pop    edx
c0015560:	68 6a 5f 02 c0       	push   0xc0025f6a
c0015565:	56                   	push   esi
c0015566:	e8 15 b3 fe ff       	call   c0000880 <strcat>
c001556b:	59                   	pop    ecx
c001556c:	5f                   	pop    edi
c001556d:	53                   	push   ebx
c001556e:	56                   	push   esi
c001556f:	e8 0c b3 fe ff       	call   c0000880 <strcat>
c0015574:	58                   	pop    eax
c0015575:	5a                   	pop    edx
c0015576:	68 14 5c 02 c0       	push   0xc0025c14
c001557b:	56                   	push   esi
c001557c:	e8 ff b2 fe ff       	call   c0000880 <strcat>
c0015581:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015588:	e8 82 44 ff ff       	call   c0009a0f <malloc>
c001558d:	83 c4 0c             	add    esp,0xc
c0015590:	89 c3                	mov    ebx,eax
c0015592:	ff 35 30 94 02 c0    	push   DWORD PTR ds:0xc0029430
c0015598:	56                   	push   esi
c0015599:	50                   	push   eax
c001559a:	e8 cb 7c ff ff       	call   c000d26a <File::File(char const*, Process*)>
c001559f:	83 c4 10             	add    esp,0x10
c00155a2:	85 db                	test   ebx,ebx
c00155a4:	74 7e                	je     c0015624 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00155a6:	51                   	push   ecx
c00155a7:	51                   	push   ecx
c00155a8:	6a 01                	push   0x1
c00155aa:	53                   	push   ebx
c00155ab:	e8 7c 7d ff ff       	call   c000d32c <File::open(FileOpenMode)>
c00155b0:	83 c4 10             	add    esp,0x10
c00155b3:	85 c0                	test   eax,eax
c00155b5:	74 08                	je     c00155bf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00155b7:	83 ec 0c             	sub    esp,0xc
c00155ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00155bc:	53                   	push   ebx
c00155bd:	eb 5f                	jmp    c001561e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00155bf:	52                   	push   edx
c00155c0:	8d 44 24 17          	lea    eax,[esp+0x17]
c00155c4:	50                   	push   eax
c00155c5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00155c9:	50                   	push   eax
c00155ca:	53                   	push   ebx
c00155cb:	e8 08 80 ff ff       	call   c000d5d8 <File::stat(unsigned long long*, bool*)>
c00155d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00155d4:	83 c4 10             	add    esp,0x10
c00155d7:	89 c1                	mov    ecx,eax
c00155d9:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00155dd:	74 31                	je     c0015610 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00155df:	83 ec 0c             	sub    esp,0xc
c00155e2:	50                   	push   eax
c00155e3:	e8 27 44 ff ff       	call   c0009a0f <malloc>
c00155e8:	89 c6                	mov    esi,eax
c00155ea:	58                   	pop    eax
c00155eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00155ed:	8d 54 24 20          	lea    edx,[esp+0x20]
c00155f1:	52                   	push   edx
c00155f2:	56                   	push   esi
c00155f3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00155f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00155fb:	53                   	push   ebx
c00155fc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00155ff:	83 c4 20             	add    esp,0x20
c0015602:	85 c0                	test   eax,eax
c0015604:	75 0a                	jne    c0015610 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015606:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001560a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001560e:	74 18                	je     c0015628 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0015610:	83 ec 0c             	sub    esp,0xc
c0015613:	53                   	push   ebx
c0015614:	e8 71 7d ff ff       	call   c000d38a <File::close()>
c0015619:	8b 03                	mov    eax,DWORD PTR [ebx]
c001561b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001561e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015621:	83 c4 10             	add    esp,0x10
c0015624:	31 c0                	xor    eax,eax
c0015626:	eb 3b                	jmp    c0015663 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0015628:	83 ec 0c             	sub    esp,0xc
c001562b:	53                   	push   ebx
c001562c:	e8 59 7d ff ff       	call   c000d38a <File::close()>
c0015631:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015633:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015636:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015639:	83 c4 0c             	add    esp,0xc
c001563c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015643:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001564a:	56                   	push   esi
c001564b:	e8 70 fd ff ff       	call   c00153c0 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015650:	89 34 24             	mov    DWORD PTR [esp],esi
c0015653:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015657:	e8 c3 43 ff ff       	call   c0009a1f <free>
c001565c:	83 c4 10             	add    esp,0x10
c001565f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015663:	81 c4 20 01 00 00    	add    esp,0x120
c0015669:	5b                   	pop    ebx
c001566a:	5e                   	pop    esi
c001566b:	5f                   	pop    edi
c001566c:	c3                   	ret    

c001566d <Reg::getLine(char*, char*, char*)>:
c001566d:	57                   	push   edi
c001566e:	56                   	push   esi
c001566f:	53                   	push   ebx
c0015670:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015674:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015678:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001567c:	57                   	push   edi
c001567d:	56                   	push   esi
c001567e:	53                   	push   ebx
c001567f:	68 19 5c 02 c0       	push   0xc0025c19
c0015684:	e8 8f fe ff ff       	call   c0015518 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015689:	83 c4 10             	add    esp,0x10
c001568c:	84 c0                	test   al,al
c001568e:	75 10                	jne    c00156a0 <Reg::getLine(char*, char*, char*)+0x33>
c0015690:	57                   	push   edi
c0015691:	56                   	push   esi
c0015692:	53                   	push   ebx
c0015693:	68 3e 5c 02 c0       	push   0xc0025c3e
c0015698:	e8 7b fe ff ff       	call   c0015518 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001569d:	83 c4 10             	add    esp,0x10
c00156a0:	5b                   	pop    ebx
c00156a1:	5e                   	pop    esi
c00156a2:	5f                   	pop    edi
c00156a3:	c3                   	ret    

c00156a4 <Reg::readInt(char*, char*, int*)>:
c00156a4:	55                   	push   ebp
c00156a5:	57                   	push   edi
c00156a6:	56                   	push   esi
c00156a7:	53                   	push   ebx
c00156a8:	81 ec f0 00 00 00    	sub    esp,0xf0
c00156ae:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00156b2:	57                   	push   edi
c00156b3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00156ba:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00156c1:	e8 a7 ff ff ff       	call   c001566d <Reg::getLine(char*, char*, char*)>
c00156c6:	83 c4 10             	add    esp,0x10
c00156c9:	84 c0                	test   al,al
c00156cb:	0f 84 b3 00 00 00    	je     c0015784 <Reg::readInt(char*, char*, int*)+0xe0>
c00156d1:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00156d5:	80 fa 2b             	cmp    dl,0x2b
c00156d8:	74 0c                	je     c00156e6 <Reg::readInt(char*, char*, int*)+0x42>
c00156da:	80 fa 2d             	cmp    dl,0x2d
c00156dd:	75 0e                	jne    c00156ed <Reg::readInt(char*, char*, int*)+0x49>
c00156df:	ba 01 00 00 00       	mov    edx,0x1
c00156e4:	eb 0b                	jmp    c00156f1 <Reg::readInt(char*, char*, int*)+0x4d>
c00156e6:	ba 01 00 00 00       	mov    edx,0x1
c00156eb:	eb 02                	jmp    c00156ef <Reg::readInt(char*, char*, int*)+0x4b>
c00156ed:	31 d2                	xor    edx,edx
c00156ef:	31 c0                	xor    eax,eax
c00156f1:	be 0a 00 00 00       	mov    esi,0xa
c00156f6:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00156fb:	75 20                	jne    c001571d <Reg::readInt(char*, char*, int*)+0x79>
c00156fd:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015701:	80 f9 78             	cmp    cl,0x78
c0015704:	75 0a                	jne    c0015710 <Reg::readInt(char*, char*, int*)+0x6c>
c0015706:	83 c2 02             	add    edx,0x2
c0015709:	be 10 00 00 00       	mov    esi,0x10
c001570e:	eb 0d                	jmp    c001571d <Reg::readInt(char*, char*, int*)+0x79>
c0015710:	80 f9 62             	cmp    cl,0x62
c0015713:	75 08                	jne    c001571d <Reg::readInt(char*, char*, int*)+0x79>
c0015715:	83 c2 02             	add    edx,0x2
c0015718:	be 02 00 00 00       	mov    esi,0x2
c001571d:	01 d7                	add    edi,edx
c001571f:	31 d2                	xor    edx,edx
c0015721:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015723:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015727:	80 fb 0d             	cmp    bl,0xd
c001572a:	0f 94 c3             	sete   bl
c001572d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015732:	0f 94 c1             	sete   cl
c0015735:	08 cb                	or     bl,cl
c0015737:	75 3a                	jne    c0015773 <Reg::readInt(char*, char*, int*)+0xcf>
c0015739:	0f af d6             	imul   edx,esi
c001573c:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015741:	83 fe 10             	cmp    esi,0x10
c0015744:	75 26                	jne    c001576c <Reg::readInt(char*, char*, int*)+0xc8>
c0015746:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001574a:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001574d:	89 e9                	mov    ecx,ebp
c001574f:	80 f9 05             	cmp    cl,0x5
c0015752:	77 06                	ja     c001575a <Reg::readInt(char*, char*, int*)+0xb6>
c0015754:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015758:	eb 16                	jmp    c0015770 <Reg::readInt(char*, char*, int*)+0xcc>
c001575a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001575e:	83 e9 61             	sub    ecx,0x61
c0015761:	80 f9 05             	cmp    cl,0x5
c0015764:	77 06                	ja     c001576c <Reg::readInt(char*, char*, int*)+0xc8>
c0015766:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001576a:	eb 04                	jmp    c0015770 <Reg::readInt(char*, char*, int*)+0xcc>
c001576c:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015770:	47                   	inc    edi
c0015771:	eb ae                	jmp    c0015721 <Reg::readInt(char*, char*, int*)+0x7d>
c0015773:	84 c0                	test   al,al
c0015775:	74 02                	je     c0015779 <Reg::readInt(char*, char*, int*)+0xd5>
c0015777:	f7 da                	neg    edx
c0015779:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015780:	89 10                	mov    DWORD PTR [eax],edx
c0015782:	88 d8                	mov    al,bl
c0015784:	81 c4 ec 00 00 00    	add    esp,0xec
c001578a:	5b                   	pop    ebx
c001578b:	5e                   	pop    esi
c001578c:	5f                   	pop    edi
c001578d:	5d                   	pop    ebp
c001578e:	c3                   	ret    

c001578f <Reg::readString(char*, char*, char*, int)>:
c001578f:	57                   	push   edi
c0015790:	56                   	push   esi
c0015791:	53                   	push   ebx
c0015792:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015798:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001579f:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00157a3:	57                   	push   edi
c00157a4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00157ab:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00157b2:	e8 b6 fe ff ff       	call   c001566d <Reg::getLine(char*, char*, char*)>
c00157b7:	83 c4 10             	add    esp,0x10
c00157ba:	89 c6                	mov    esi,eax
c00157bc:	84 c0                	test   al,al
c00157be:	74 44                	je     c0015804 <Reg::readString(char*, char*, char*, int)+0x75>
c00157c0:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00157c7:	31 c0                	xor    eax,eax
c00157c9:	4a                   	dec    edx
c00157ca:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00157cd:	84 c9                	test   cl,cl
c00157cf:	74 0f                	je     c00157e0 <Reg::readString(char*, char*, char*, int)+0x51>
c00157d1:	39 c2                	cmp    edx,eax
c00157d3:	7e 0b                	jle    c00157e0 <Reg::readString(char*, char*, char*, int)+0x51>
c00157d5:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00157d8:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00157dd:	40                   	inc    eax
c00157de:	eb ea                	jmp    c00157ca <Reg::readString(char*, char*, char*, int)+0x3b>
c00157e0:	83 ec 0c             	sub    esp,0xc
c00157e3:	53                   	push   ebx
c00157e4:	e8 b7 ae fe ff       	call   c00006a0 <strlen>
c00157e9:	83 c4 10             	add    esp,0x10
c00157ec:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00157f1:	75 11                	jne    c0015804 <Reg::readString(char*, char*, char*, int)+0x75>
c00157f3:	83 ec 0c             	sub    esp,0xc
c00157f6:	53                   	push   ebx
c00157f7:	e8 a4 ae fe ff       	call   c00006a0 <strlen>
c00157fc:	83 c4 10             	add    esp,0x10
c00157ff:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0015804:	81 c4 d0 00 00 00    	add    esp,0xd0
c001580a:	89 f0                	mov    eax,esi
c001580c:	5b                   	pop    ebx
c001580d:	5e                   	pop    esi
c001580e:	5f                   	pop    edi
c001580f:	c3                   	ret    

c0015810 <Reg::readBool(char*, char*, bool*)>:
c0015810:	83 ec 20             	sub    esp,0x20
c0015813:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015817:	50                   	push   eax
c0015818:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001581c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015820:	e8 7f fe ff ff       	call   c00156a4 <Reg::readInt(char*, char*, int*)>
c0015825:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001582a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001582e:	0f 95 02             	setne  BYTE PTR [edx]
c0015831:	83 c4 2c             	add    esp,0x2c
c0015834:	c3                   	ret    

c0015835 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015835:	53                   	push   ebx
c0015836:	83 ec 1c             	sub    esp,0x1c
c0015839:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001583d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015841:	50                   	push   eax
c0015842:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015846:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001584a:	e8 c1 ff ff ff       	call   c0015810 <Reg::readBool(char*, char*, bool*)>
c001584f:	83 c4 10             	add    esp,0x10
c0015852:	84 c0                	test   al,al
c0015854:	74 04                	je     c001585a <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015856:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001585a:	88 d8                	mov    al,bl
c001585c:	83 c4 18             	add    esp,0x18
c001585f:	5b                   	pop    ebx
c0015860:	c3                   	ret    

c0015861 <Reg::readIntWithDefault(char*, char*, int)>:
c0015861:	53                   	push   ebx
c0015862:	83 ec 1c             	sub    esp,0x1c
c0015865:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015869:	8d 44 24 10          	lea    eax,[esp+0x10]
c001586d:	50                   	push   eax
c001586e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015872:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015876:	e8 29 fe ff ff       	call   c00156a4 <Reg::readInt(char*, char*, int*)>
c001587b:	83 c4 10             	add    esp,0x10
c001587e:	84 c0                	test   al,al
c0015880:	74 04                	je     c0015886 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015882:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0015886:	89 d8                	mov    eax,ebx
c0015888:	83 c4 18             	add    esp,0x18
c001588b:	5b                   	pop    ebx
c001588c:	c3                   	ret    

c001588d <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001588d:	57                   	push   edi
c001588e:	56                   	push   esi
c001588f:	56                   	push   esi
c0015890:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015894:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015898:	56                   	push   esi
c0015899:	57                   	push   edi
c001589a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001589e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00158a2:	e8 e8 fe ff ff       	call   c001578f <Reg::readString(char*, char*, char*, int)>
c00158a7:	83 c4 10             	add    esp,0x10
c00158aa:	84 c0                	test   al,al
c00158ac:	75 1a                	jne    c00158c8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00158ae:	51                   	push   ecx
c00158af:	56                   	push   esi
c00158b0:	6a 00                	push   0x0
c00158b2:	57                   	push   edi
c00158b3:	e8 cc ad fe ff       	call   c0000684 <memset>
c00158b8:	8d 4e ff             	lea    ecx,[esi-0x1]
c00158bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00158bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00158c1:	83 c4 10             	add    esp,0x10
c00158c4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00158c8:	89 f8                	mov    eax,edi
c00158ca:	5a                   	pop    edx
c00158cb:	5e                   	pop    esi
c00158cc:	5f                   	pop    edi
c00158cd:	c3                   	ret    

c00158ce <Sys::eject(regs*)>:
c00158ce:	83 ec 0c             	sub    esp,0xc
c00158d1:	83 ca ff             	or     edx,0xffffffff
c00158d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158d8:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00158db:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00158e0:	83 e9 41             	sub    ecx,0x41
c00158e3:	83 f9 19             	cmp    ecx,0x19
c00158e6:	77 18                	ja     c0015900 <Sys::eject(regs*)+0x32>
c00158e8:	8b 0c 8d a0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b60]
c00158ef:	85 c9                	test   ecx,ecx
c00158f1:	74 0d                	je     c0015900 <Sys::eject(regs*)+0x32>
c00158f3:	83 ec 0c             	sub    esp,0xc
c00158f6:	51                   	push   ecx
c00158f7:	e8 1a ab ff ff       	call   c0010416 <LogicalDisk::eject()>
c00158fc:	83 c4 10             	add    esp,0x10
c00158ff:	99                   	cdq    
c0015900:	83 c4 0c             	add    esp,0xc
c0015903:	c3                   	ret    

c0015904 <Sys::exit(regs*)>:
c0015904:	83 ec 18             	sub    esp,0x18
c0015907:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001590b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001590e:	e8 59 36 00 00       	call   c0018f6c <terminateTask(int)>
c0015913:	83 c8 ff             	or     eax,0xffffffff
c0015916:	83 c4 1c             	add    esp,0x1c
c0015919:	89 c2                	mov    edx,eax
c001591b:	c3                   	ret    

c001591c <Sys::getCwd(regs*)>:
c001591c:	83 ec 10             	sub    esp,0x10
c001591f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015923:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015926:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015929:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001592e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015931:	e8 36 77 ff ff       	call   c000d06c <Fs::getcwd(Process*, char*, int)>
c0015936:	83 c4 1c             	add    esp,0x1c
c0015939:	99                   	cdq    
c001593a:	c3                   	ret    

c001593b <Sys::getPID(regs*)>:
c001593b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015940:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015943:	8b 00                	mov    eax,DWORD PTR [eax]
c0015945:	99                   	cdq    
c0015946:	c3                   	ret    

c0015947 <Sys::getRAMData(regs*)>:
c0015947:	8b 0d 18 7f 02 c0    	mov    ecx,DWORD PTR ds:0xc0027f18
c001594d:	69 05 14 7f 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0027f14,0xc8
c0015957:	99                   	cdq    
c0015958:	f7 f9                	idiv   ecx
c001595a:	c1 e0 18             	shl    eax,0x18
c001595d:	09 c8                	or     eax,ecx
c001595f:	99                   	cdq    
c0015960:	c3                   	ret    

c0015961 <Sys::getVGAPtr(regs*)>:
c0015961:	55                   	push   ebp
c0015962:	57                   	push   edi
c0015963:	56                   	push   esi
c0015964:	53                   	push   ebx
c0015965:	83 ec 18             	sub    esp,0x18
c0015968:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001596c:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001596f:	e8 fc 30 00 00       	call   c0018a70 <Thr::processFromPID(int)>
c0015974:	83 c4 10             	add    esp,0x10
c0015977:	89 c1                	mov    ecx,eax
c0015979:	b8 01 00 00 00       	mov    eax,0x1
c001597e:	85 c9                	test   ecx,ecx
c0015980:	74 59                	je     c00159db <Sys::getVGAPtr(regs*)+0x7a>
c0015982:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0015988:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001598c:	74 0c                	je     c001599a <Sys::getVGAPtr(regs*)+0x39>
c001598e:	83 ec 0c             	sub    esp,0xc
c0015991:	53                   	push   ebx
c0015992:	e8 72 51 ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c0015997:	83 c4 10             	add    esp,0x10
c001599a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001599d:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00159a0:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00159a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00159a7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00159aa:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00159ad:	81 c3 82 00 00 00    	add    ebx,0x82
c00159b3:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00159b9:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00159bc:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c00159bf:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00159c5:	50                   	push   eax
c00159c6:	50                   	push   eax
c00159c7:	53                   	push   ebx
c00159c8:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00159cb:	05 a8 0f 00 00       	add    eax,0xfa8
c00159d0:	50                   	push   eax
c00159d1:	e8 6a ad fe ff       	call   c0000740 <strcpy>
c00159d6:	83 c4 10             	add    esp,0x10
c00159d9:	31 c0                	xor    eax,eax
c00159db:	83 c4 0c             	add    esp,0xc
c00159de:	31 d2                	xor    edx,edx
c00159e0:	5b                   	pop    ebx
c00159e1:	5e                   	pop    esi
c00159e2:	5f                   	pop    edi
c00159e3:	5d                   	pop    ebp
c00159e4:	c3                   	ret    

c00159e5 <Sys::loadDLL(regs*)>:
c00159e5:	56                   	push   esi
c00159e6:	53                   	push   ebx
c00159e7:	31 d2                	xor    edx,edx
c00159e9:	51                   	push   ecx
c00159ea:	b8 01 00 00 00       	mov    eax,0x1
c00159ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00159f3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00159f7:	0f 84 8c 00 00 00    	je     c0015a89 <Sys::loadDLL(regs*)+0xa4>
c00159fd:	83 ec 0c             	sub    esp,0xc
c0015a00:	68 14 01 00 00       	push   0x114
c0015a05:	e8 05 40 ff ff       	call   c0009a0f <malloc>
c0015a0a:	83 c4 0c             	add    esp,0xc
c0015a0d:	89 c3                	mov    ebx,eax
c0015a0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a14:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015a17:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015a1a:	53                   	push   ebx
c0015a1b:	e8 4a 78 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0015a20:	83 c4 10             	add    esp,0x10
c0015a23:	31 d2                	xor    edx,edx
c0015a25:	b8 02 00 00 00       	mov    eax,0x2
c0015a2a:	85 db                	test   ebx,ebx
c0015a2c:	74 5b                	je     c0015a89 <Sys::loadDLL(regs*)+0xa4>
c0015a2e:	83 ec 0c             	sub    esp,0xc
c0015a31:	53                   	push   ebx
c0015a32:	e8 63 7b ff ff       	call   c000d59a <File::exists()>
c0015a37:	83 c4 10             	add    esp,0x10
c0015a3a:	84 c0                	test   al,al
c0015a3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015a3e:	75 11                	jne    c0015a51 <Sys::loadDLL(regs*)+0x6c>
c0015a40:	83 ec 0c             	sub    esp,0xc
c0015a43:	53                   	push   ebx
c0015a44:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015a47:	83 c4 10             	add    esp,0x10
c0015a4a:	b8 03 00 00 00       	mov    eax,0x3
c0015a4f:	eb 36                	jmp    c0015a87 <Sys::loadDLL(regs*)+0xa2>
c0015a51:	83 ec 0c             	sub    esp,0xc
c0015a54:	53                   	push   ebx
c0015a55:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015a58:	58                   	pop    eax
c0015a59:	5a                   	pop    edx
c0015a5a:	6a 00                	push   0x0
c0015a5c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015a5f:	e8 0a 22 00 00       	call   c0017c6e <Thr::loadDLL(char const*, bool)>
c0015a64:	83 c4 10             	add    esp,0x10
c0015a67:	89 c1                	mov    ecx,eax
c0015a69:	31 d2                	xor    edx,edx
c0015a6b:	b8 04 00 00 00       	mov    eax,0x4
c0015a70:	85 c9                	test   ecx,ecx
c0015a72:	74 15                	je     c0015a89 <Sys::loadDLL(regs*)+0xa4>
c0015a74:	53                   	push   ebx
c0015a75:	53                   	push   ebx
c0015a76:	ff 35 e8 7e 02 c0    	push   DWORD PTR ds:0xc0027ee8
c0015a7c:	51                   	push   ecx
c0015a7d:	e8 1d 24 00 00       	call   c0017e9f <Thr::executeDLL(unsigned long, void*)>
c0015a82:	83 c4 10             	add    esp,0x10
c0015a85:	31 c0                	xor    eax,eax
c0015a87:	31 d2                	xor    edx,edx
c0015a89:	59                   	pop    ecx
c0015a8a:	5b                   	pop    ebx
c0015a8b:	5e                   	pop    esi
c0015a8c:	c3                   	ret    

c0015a8d <Sys::read(regs*)>:
c0015a8d:	57                   	push   edi
c0015a8e:	56                   	push   esi
c0015a8f:	53                   	push   ebx
c0015a90:	83 ec 10             	sub    esp,0x10
c0015a93:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015a97:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015a9a:	83 f8 02             	cmp    eax,0x2
c0015a9d:	77 10                	ja     c0015aaf <Sys::read(regs*)+0x22>
c0015a9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015aa4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015aa7:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015aad:	eb 0e                	jmp    c0015abd <Sys::read(regs*)+0x30>
c0015aaf:	83 ec 0c             	sub    esp,0xc
c0015ab2:	50                   	push   eax
c0015ab3:	e8 cb 5d ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c0015ab8:	83 c4 10             	add    esp,0x10
c0015abb:	89 c1                	mov    ecx,eax
c0015abd:	83 c8 ff             	or     eax,0xffffffff
c0015ac0:	85 c9                	test   ecx,ecx
c0015ac2:	89 c2                	mov    edx,eax
c0015ac4:	74 28                	je     c0015aee <Sys::read(regs*)+0x61>
c0015ac6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015ace:	31 ff                	xor    edi,edi
c0015ad0:	83 ec 0c             	sub    esp,0xc
c0015ad3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015ad5:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015ad9:	52                   	push   edx
c0015ada:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015add:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015ae0:	57                   	push   edi
c0015ae1:	56                   	push   esi
c0015ae2:	51                   	push   ecx
c0015ae3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015ae6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015aea:	83 c4 20             	add    esp,0x20
c0015aed:	99                   	cdq    
c0015aee:	83 c4 10             	add    esp,0x10
c0015af1:	5b                   	pop    ebx
c0015af2:	5e                   	pop    esi
c0015af3:	5f                   	pop    edi
c0015af4:	c3                   	ret    

c0015af5 <Sys::sbrk(regs*)>:
c0015af5:	56                   	push   esi
c0015af6:	53                   	push   ebx
c0015af7:	50                   	push   eax
c0015af8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015afd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b01:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015b04:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0015b07:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0015b0d:	85 db                	test   ebx,ebx
c0015b0f:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0015b12:	74 02                	je     c0015b16 <Sys::sbrk(regs*)+0x21>
c0015b14:	79 06                	jns    c0015b1c <Sys::sbrk(regs*)+0x27>
c0015b16:	89 f0                	mov    eax,esi
c0015b18:	31 d2                	xor    edx,edx
c0015b1a:	eb 2a                	jmp    c0015b46 <Sys::sbrk(regs*)+0x51>
c0015b1c:	83 c8 ff             	or     eax,0xffffffff
c0015b1f:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015b25:	89 c2                	mov    edx,eax
c0015b27:	77 1d                	ja     c0015b46 <Sys::sbrk(regs*)+0x51>
c0015b29:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0015b2f:	50                   	push   eax
c0015b30:	c1 ea 0c             	shr    edx,0xc
c0015b33:	68 07 0c 00 00       	push   0xc07
c0015b38:	52                   	push   edx
c0015b39:	51                   	push   ecx
c0015b3a:	e8 43 66 ff ff       	call   c000c182 <VAS::allocatePages(int, int)>
c0015b3f:	89 f0                	mov    eax,esi
c0015b41:	31 d2                	xor    edx,edx
c0015b43:	83 c4 10             	add    esp,0x10
c0015b46:	59                   	pop    ecx
c0015b47:	5b                   	pop    ebx
c0015b48:	5e                   	pop    esi
c0015b49:	c3                   	ret    

c0015b4a <Sys::setCwd(regs*)>:
c0015b4a:	83 ec 14             	sub    esp,0x14
c0015b4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b51:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015b54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b59:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015b5c:	e8 d8 7a ff ff       	call   c000d639 <Fs::setcwd(Process*, char*)>
c0015b61:	83 c4 1c             	add    esp,0x1c
c0015b64:	99                   	cdq    
c0015b65:	c3                   	ret    

c0015b66 <Sys::setTime(regs*)>:
c0015b66:	55                   	push   ebp
c0015b67:	31 c9                	xor    ecx,ecx
c0015b69:	57                   	push   edi
c0015b6a:	bd 0c 00 00 00       	mov    ebp,0xc
c0015b6f:	56                   	push   esi
c0015b70:	53                   	push   ebx
c0015b71:	31 db                	xor    ebx,ebx
c0015b73:	83 ec 10             	sub    esp,0x10
c0015b76:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015b7a:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015b7d:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015b80:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0015b83:	89 c2                	mov    edx,eax
c0015b85:	66 81 ef 6c 07       	sub    di,0x76c
c0015b8a:	83 e2 1f             	and    edx,0x1f
c0015b8d:	c1 e7 10             	shl    edi,0x10
c0015b90:	42                   	inc    edx
c0015b91:	c1 e8 05             	shr    eax,0x5
c0015b94:	88 d1                	mov    cl,dl
c0015b96:	31 d2                	xor    edx,edx
c0015b98:	f7 f5                	div    ebp
c0015b9a:	89 dd                	mov    ebp,ebx
c0015b9c:	88 d5                	mov    ch,dl
c0015b9e:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0015ba4:	0f b7 c1             	movzx  eax,cx
c0015ba7:	31 d2                	xor    edx,edx
c0015ba9:	09 f8                	or     eax,edi
c0015bab:	bf 3c 00 00 00       	mov    edi,0x3c
c0015bb0:	89 c1                	mov    ecx,eax
c0015bb2:	89 f0                	mov    eax,esi
c0015bb4:	f7 f7                	div    edi
c0015bb6:	c1 e2 10             	shl    edx,0x10
c0015bb9:	09 d5                	or     ebp,edx
c0015bbb:	31 d2                	xor    edx,edx
c0015bbd:	89 eb                	mov    ebx,ebp
c0015bbf:	f7 f7                	div    edi
c0015bc1:	bf 10 0e 00 00       	mov    edi,0xe10
c0015bc6:	88 d7                	mov    bh,dl
c0015bc8:	89 f0                	mov    eax,esi
c0015bca:	31 d2                	xor    edx,edx
c0015bcc:	f7 f7                	div    edi
c0015bce:	bf 18 00 00 00       	mov    edi,0x18
c0015bd3:	31 d2                	xor    edx,edx
c0015bd5:	f7 f7                	div    edi
c0015bd7:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c0015bdc:	88 d3                	mov    bl,dl
c0015bde:	53                   	push   ebx
c0015bdf:	51                   	push   ecx
c0015be0:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0015be6:	e8 9b 82 ff ff       	call   c000de86 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0015beb:	83 c4 1c             	add    esp,0x1c
c0015bee:	83 f0 01             	xor    eax,0x1
c0015bf1:	5b                   	pop    ebx
c0015bf2:	0f b6 c0             	movzx  eax,al
c0015bf5:	5e                   	pop    esi
c0015bf6:	31 d2                	xor    edx,edx
c0015bf8:	5f                   	pop    edi
c0015bf9:	5d                   	pop    ebp
c0015bfa:	c3                   	ret    

c0015bfb <Sys::timezone(regs*)>:
c0015bfb:	53                   	push   ebx
c0015bfc:	83 ec 08             	sub    esp,0x8
c0015bff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c03:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0015c07:	75 17                	jne    c0015c20 <Sys::timezone(regs*)+0x25>
c0015c09:	83 ec 0c             	sub    esp,0xc
c0015c0c:	68 59 5c 02 c0       	push   0xc0025c59
c0015c11:	e8 e9 70 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0015c16:	83 c8 ff             	or     eax,0xffffffff
c0015c19:	83 c4 10             	add    esp,0x10
c0015c1c:	89 c2                	mov    edx,eax
c0015c1e:	eb 20                	jmp    c0015c40 <Sys::timezone(regs*)+0x45>
c0015c20:	83 ec 0c             	sub    esp,0xc
c0015c23:	68 6e 5c 02 c0       	push   0xc0025c6e
c0015c28:	e8 d2 70 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0015c2d:	58                   	pop    eax
c0015c2e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015c31:	e8 b2 7f ff ff       	call   c000dbe8 <User::loadClockSettings(int)>
c0015c36:	83 c4 10             	add    esp,0x10
c0015c39:	b8 01 00 00 00       	mov    eax,0x1
c0015c3e:	31 d2                	xor    edx,edx
c0015c40:	83 c4 08             	add    esp,0x8
c0015c43:	5b                   	pop    ebx
c0015c44:	c3                   	ret    

c0015c45 <Sys::write(regs*)>:
c0015c45:	57                   	push   edi
c0015c46:	56                   	push   esi
c0015c47:	53                   	push   ebx
c0015c48:	83 ec 10             	sub    esp,0x10
c0015c4b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015c4f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015c52:	83 f8 02             	cmp    eax,0x2
c0015c55:	77 10                	ja     c0015c67 <Sys::write(regs*)+0x22>
c0015c57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c5c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015c5f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015c65:	eb 0e                	jmp    c0015c75 <Sys::write(regs*)+0x30>
c0015c67:	83 ec 0c             	sub    esp,0xc
c0015c6a:	50                   	push   eax
c0015c6b:	e8 13 5c ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c0015c70:	83 c4 10             	add    esp,0x10
c0015c73:	89 c1                	mov    ecx,eax
c0015c75:	83 c8 ff             	or     eax,0xffffffff
c0015c78:	85 c9                	test   ecx,ecx
c0015c7a:	89 c2                	mov    edx,eax
c0015c7c:	74 28                	je     c0015ca6 <Sys::write(regs*)+0x61>
c0015c7e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015c86:	31 ff                	xor    edi,edi
c0015c88:	83 ec 0c             	sub    esp,0xc
c0015c8b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015c8d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015c91:	52                   	push   edx
c0015c92:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015c95:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015c98:	57                   	push   edi
c0015c99:	56                   	push   esi
c0015c9a:	51                   	push   ecx
c0015c9b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015c9e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015ca2:	83 c4 20             	add    esp,0x20
c0015ca5:	99                   	cdq    
c0015ca6:	83 c4 10             	add    esp,0x10
c0015ca9:	5b                   	pop    ebx
c0015caa:	5e                   	pop    esi
c0015cab:	5f                   	pop    edi
c0015cac:	c3                   	ret    

c0015cad <Sys::wsbe(regs*)>:
c0015cad:	57                   	push   edi
c0015cae:	b9 0b 00 00 00       	mov    ecx,0xb
c0015cb3:	56                   	push   esi
c0015cb4:	be ad 5c 02 c0       	mov    esi,0xc0025cad
c0015cb9:	53                   	push   ebx
c0015cba:	83 ec 30             	sub    esp,0x30
c0015cbd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015cc1:	fc                   	cld    
c0015cc2:	83 ec 0c             	sub    esp,0xc
c0015cc5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015cc7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015ccb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cd0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015cd3:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0015cd9:	8b 06                	mov    eax,DWORD PTR [esi]
c0015cdb:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0015cde:	57                   	push   edi
c0015cdf:	e8 bc a9 fe ff       	call   c00006a0 <strlen>
c0015ce4:	5a                   	pop    edx
c0015ce5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015ce9:	52                   	push   edx
c0015cea:	31 d2                	xor    edx,edx
c0015cec:	57                   	push   edi
c0015ced:	52                   	push   edx
c0015cee:	50                   	push   eax
c0015cef:	56                   	push   esi
c0015cf0:	ff d3                	call   ebx
c0015cf2:	83 c4 14             	add    esp,0x14
c0015cf5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015cf9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015cfc:	e8 6b 32 00 00       	call   c0018f6c <terminateTask(int)>
c0015d01:	83 c4 40             	add    esp,0x40
c0015d04:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015d09:	5b                   	pop    ebx
c0015d0a:	31 d2                	xor    edx,edx
c0015d0c:	5e                   	pop    esi
c0015d0d:	5f                   	pop    edi
c0015d0e:	c3                   	ret    

c0015d0f <Sys::yield(regs*)>:
c0015d0f:	83 ec 0c             	sub    esp,0xc
c0015d12:	fa                   	cli    
c0015d13:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c0015d19:	e8 36 29 00 00       	call   c0018654 <schedule()>
c0015d1e:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0015d23:	48                   	dec    eax
c0015d24:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0015d29:	75 01                	jne    c0015d2c <Sys::yield(regs*)+0x1d>
c0015d2b:	fb                   	sti    
c0015d2c:	8b 15 0c 85 02 c0    	mov    edx,DWORD PTR ds:0xc002850c
c0015d32:	83 c4 0c             	add    esp,0xc
c0015d35:	89 d0                	mov    eax,edx
c0015d37:	c1 ea 11             	shr    edx,0x11
c0015d3a:	c1 e0 07             	shl    eax,0x7
c0015d3d:	25 80 30 0f 00       	and    eax,0xf3080
c0015d42:	31 d0                	xor    eax,edx
c0015d44:	31 d2                	xor    edx,edx
c0015d46:	c3                   	ret    

c0015d47 <sysCallSeekDir(regs*)>:
c0015d47:	31 c0                	xor    eax,eax
c0015d49:	31 d2                	xor    edx,edx
c0015d4b:	c3                   	ret    

c0015d4c <sysCallTellDir(regs*)>:
c0015d4c:	31 c0                	xor    eax,eax
c0015d4e:	31 d2                	xor    edx,edx
c0015d50:	c3                   	ret    

c0015d51 <sysCallVerify(regs*)>:
c0015d51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d55:	31 d2                	xor    edx,edx
c0015d57:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015d5a:	c3                   	ret    

c0015d5b <sysCallGetArgc(regs*)>:
c0015d5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d60:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015d63:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0015d69:	99                   	cdq    
c0015d6a:	c3                   	ret    

c0015d6b <sysFormatDisk(regs*)>:
c0015d6b:	56                   	push   esi
c0015d6c:	53                   	push   ebx
c0015d6d:	53                   	push   ebx
c0015d6e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d72:	8b 1d 14 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028014
c0015d78:	eb 25                	jmp    c0015d9f <sysFormatDisk(regs*)+0x34>
c0015d7a:	83 ec 0c             	sub    esp,0xc
c0015d7d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015d80:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015d82:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015d85:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015d88:	50                   	push   eax
c0015d89:	ff 34 85 a0 84 02 c0 	push   DWORD PTR [eax*4-0x3ffd7b60]
c0015d90:	53                   	push   ebx
c0015d91:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015d94:	83 c4 20             	add    esp,0x20
c0015d97:	83 f8 08             	cmp    eax,0x8
c0015d9a:	75 12                	jne    c0015dae <sysFormatDisk(regs*)+0x43>
c0015d9c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015d9f:	85 db                	test   ebx,ebx
c0015da1:	75 d7                	jne    c0015d7a <sysFormatDisk(regs*)+0xf>
c0015da3:	59                   	pop    ecx
c0015da4:	b8 03 00 00 00       	mov    eax,0x3
c0015da9:	31 d2                	xor    edx,edx
c0015dab:	5b                   	pop    ebx
c0015dac:	5e                   	pop    esi
c0015dad:	c3                   	ret    
c0015dae:	85 c0                	test   eax,eax
c0015db0:	74 1b                	je     c0015dcd <sysFormatDisk(regs*)+0x62>
c0015db2:	83 f8 09             	cmp    eax,0x9
c0015db5:	74 0b                	je     c0015dc2 <sysFormatDisk(regs*)+0x57>
c0015db7:	59                   	pop    ecx
c0015db8:	b8 02 00 00 00       	mov    eax,0x2
c0015dbd:	31 d2                	xor    edx,edx
c0015dbf:	5b                   	pop    ebx
c0015dc0:	5e                   	pop    esi
c0015dc1:	c3                   	ret    
c0015dc2:	59                   	pop    ecx
c0015dc3:	b8 01 00 00 00       	mov    eax,0x1
c0015dc8:	31 d2                	xor    edx,edx
c0015dca:	5b                   	pop    ebx
c0015dcb:	5e                   	pop    esi
c0015dcc:	c3                   	ret    
c0015dcd:	59                   	pop    ecx
c0015dce:	31 c0                	xor    eax,eax
c0015dd0:	31 d2                	xor    edx,edx
c0015dd2:	5b                   	pop    ebx
c0015dd3:	5e                   	pop    esi
c0015dd4:	c3                   	ret    

c0015dd5 <sysSetDiskVolumeLabel(regs*)>:
c0015dd5:	56                   	push   esi
c0015dd6:	53                   	push   ebx
c0015dd7:	53                   	push   ebx
c0015dd8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ddc:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015ddf:	83 f8 19             	cmp    eax,0x19
c0015de2:	77 2d                	ja     c0015e11 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015de4:	8b 0c 85 a0 84 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7b60]
c0015deb:	85 c9                	test   ecx,ecx
c0015ded:	74 22                	je     c0015e11 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015def:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0015df2:	85 db                	test   ebx,ebx
c0015df4:	74 1b                	je     c0015e11 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015df6:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0015dfc:	85 d2                	test   edx,edx
c0015dfe:	74 11                	je     c0015e11 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015e00:	8b 32                	mov    esi,DWORD PTR [edx]
c0015e02:	53                   	push   ebx
c0015e03:	50                   	push   eax
c0015e04:	51                   	push   ecx
c0015e05:	52                   	push   edx
c0015e06:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015e09:	83 c4 10             	add    esp,0x10
c0015e0c:	99                   	cdq    
c0015e0d:	59                   	pop    ecx
c0015e0e:	5b                   	pop    ebx
c0015e0f:	5e                   	pop    esi
c0015e10:	c3                   	ret    
c0015e11:	59                   	pop    ecx
c0015e12:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015e17:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015e1c:	5b                   	pop    ebx
c0015e1d:	5e                   	pop    esi
c0015e1e:	c3                   	ret    

c0015e1f <sysGetDiskVolumeLabel(regs*)>:
c0015e1f:	57                   	push   edi
c0015e20:	56                   	push   esi
c0015e21:	53                   	push   ebx
c0015e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e26:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015e29:	83 fa 19             	cmp    edx,0x19
c0015e2c:	77 38                	ja     c0015e66 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015e2e:	8b 0c 95 a0 84 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7b60]
c0015e35:	85 c9                	test   ecx,ecx
c0015e37:	74 2d                	je     c0015e66 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015e39:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015e3c:	85 db                	test   ebx,ebx
c0015e3e:	74 26                	je     c0015e66 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015e40:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015e43:	85 f6                	test   esi,esi
c0015e45:	74 1f                	je     c0015e66 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015e47:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0015e4d:	85 c0                	test   eax,eax
c0015e4f:	74 15                	je     c0015e66 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015e51:	83 ec 0c             	sub    esp,0xc
c0015e54:	8b 38                	mov    edi,DWORD PTR [eax]
c0015e56:	56                   	push   esi
c0015e57:	53                   	push   ebx
c0015e58:	52                   	push   edx
c0015e59:	51                   	push   ecx
c0015e5a:	50                   	push   eax
c0015e5b:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015e5e:	83 c4 20             	add    esp,0x20
c0015e61:	99                   	cdq    
c0015e62:	5b                   	pop    ebx
c0015e63:	5e                   	pop    esi
c0015e64:	5f                   	pop    edi
c0015e65:	c3                   	ret    
c0015e66:	5b                   	pop    ebx
c0015e67:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015e6c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015e71:	5e                   	pop    esi
c0015e72:	5f                   	pop    edi
c0015e73:	c3                   	ret    

c0015e74 <sysShutdown(regs*)>:
c0015e74:	83 ec 0c             	sub    esp,0xc
c0015e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e7b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e7e:	85 c0                	test   eax,eax
c0015e80:	74 18                	je     c0015e9a <sysShutdown(regs*)+0x26>
c0015e82:	83 f8 01             	cmp    eax,0x1
c0015e85:	74 38                	je     c0015ebf <sysShutdown(regs*)+0x4b>
c0015e87:	83 f8 02             	cmp    eax,0x2
c0015e8a:	74 24                	je     c0015eb0 <sysShutdown(regs*)+0x3c>
c0015e8c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015e91:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015e96:	83 c4 0c             	add    esp,0xc
c0015e99:	c3                   	ret    
c0015e9a:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c0015e9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0015ea1:	6a 00                	push   0x0
c0015ea3:	6a 00                	push   0x0
c0015ea5:	6a 00                	push   0x0
c0015ea7:	50                   	push   eax
c0015ea8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015eab:	83 c4 10             	add    esp,0x10
c0015eae:	eb dc                	jmp    c0015e8c <sysShutdown(regs*)+0x18>
c0015eb0:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c0015eb5:	8b 10                	mov    edx,DWORD PTR [eax]
c0015eb7:	6a 00                	push   0x0
c0015eb9:	6a 00                	push   0x0
c0015ebb:	6a 01                	push   0x1
c0015ebd:	eb e8                	jmp    c0015ea7 <sysShutdown(regs*)+0x33>
c0015ebf:	a1 20 85 02 c0       	mov    eax,ds:0xc0028520
c0015ec4:	85 c0                	test   eax,eax
c0015ec6:	74 02                	je     c0015eca <sysShutdown(regs*)+0x56>
c0015ec8:	ff d0                	call   eax
c0015eca:	31 c0                	xor    eax,eax
c0015ecc:	31 d2                	xor    edx,edx
c0015ece:	83 c4 0c             	add    esp,0xc
c0015ed1:	c3                   	ret    

c0015ed2 <sysCallRealpath(regs*)>:
c0015ed2:	83 ec 0c             	sub    esp,0xc
c0015ed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ed9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015edc:	85 d2                	test   edx,edx
c0015ede:	74 07                	je     c0015ee7 <sysCallRealpath(regs*)+0x15>
c0015ee0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015ee3:	85 c0                	test   eax,eax
c0015ee5:	75 0b                	jne    c0015ef2 <sysCallRealpath(regs*)+0x20>
c0015ee7:	b8 01 00 00 00       	mov    eax,0x1
c0015eec:	31 d2                	xor    edx,edx
c0015eee:	83 c4 0c             	add    esp,0xc
c0015ef1:	c3                   	ret    
c0015ef2:	51                   	push   ecx
c0015ef3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015ef9:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015efc:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015f02:	51                   	push   ecx
c0015f03:	52                   	push   edx
c0015f04:	50                   	push   eax
c0015f05:	e8 b6 71 ff ff       	call   c000d0c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0015f0a:	83 c4 10             	add    esp,0x10
c0015f0d:	31 c0                	xor    eax,eax
c0015f0f:	31 d2                	xor    edx,edx
c0015f11:	83 c4 0c             	add    esp,0xc
c0015f14:	c3                   	ret    

c0015f15 <sysCallReadDir(regs*)>:
c0015f15:	53                   	push   ebx
c0015f16:	83 ec 18             	sub    esp,0x18
c0015f19:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015f1d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015f20:	83 f8 02             	cmp    eax,0x2
c0015f23:	76 60                	jbe    c0015f85 <sysCallReadDir(regs*)+0x70>
c0015f25:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0015f2c:	77 48                	ja     c0015f76 <sysCallReadDir(regs*)+0x61>
c0015f2e:	83 ec 0c             	sub    esp,0xc
c0015f31:	50                   	push   eax
c0015f32:	e8 4c 59 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c0015f37:	83 c4 10             	add    esp,0x10
c0015f3a:	85 c0                	test   eax,eax
c0015f3c:	74 38                	je     c0015f76 <sysCallReadDir(regs*)+0x61>
c0015f3e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015f46:	83 ec 0c             	sub    esp,0xc
c0015f49:	8b 10                	mov    edx,DWORD PTR [eax]
c0015f4b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0015f4f:	51                   	push   ecx
c0015f50:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015f53:	6a 00                	push   0x0
c0015f55:	68 10 01 00 00       	push   0x110
c0015f5a:	50                   	push   eax
c0015f5b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015f5e:	83 c4 20             	add    esp,0x20
c0015f61:	85 c0                	test   eax,eax
c0015f63:	74 29                	je     c0015f8e <sysCallReadDir(regs*)+0x79>
c0015f65:	83 f8 07             	cmp    eax,0x7
c0015f68:	74 1b                	je     c0015f85 <sysCallReadDir(regs*)+0x70>
c0015f6a:	b8 02 00 00 00       	mov    eax,0x2
c0015f6f:	31 d2                	xor    edx,edx
c0015f71:	83 c4 18             	add    esp,0x18
c0015f74:	5b                   	pop    ebx
c0015f75:	c3                   	ret    
c0015f76:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f7b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015f80:	83 c4 18             	add    esp,0x18
c0015f83:	5b                   	pop    ebx
c0015f84:	c3                   	ret    
c0015f85:	b8 01 00 00 00       	mov    eax,0x1
c0015f8a:	31 d2                	xor    edx,edx
c0015f8c:	eb e3                	jmp    c0015f71 <sysCallReadDir(regs*)+0x5c>
c0015f8e:	31 c0                	xor    eax,eax
c0015f90:	31 d2                	xor    edx,edx
c0015f92:	eb dd                	jmp    c0015f71 <sysCallReadDir(regs*)+0x5c>

c0015f94 <sysCallIsATTY(regs*)>:
c0015f94:	83 ec 0c             	sub    esp,0xc
c0015f97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f9b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015f9e:	83 f8 02             	cmp    eax,0x2
c0015fa1:	76 07                	jbe    c0015faa <sysCallIsATTY(regs*)+0x16>
c0015fa3:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015fa8:	75 26                	jne    c0015fd0 <sysCallIsATTY(regs*)+0x3c>
c0015faa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015faf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015fb2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015fb8:	85 c0                	test   eax,eax
c0015fba:	74 24                	je     c0015fe0 <sysCallIsATTY(regs*)+0x4c>
c0015fbc:	83 ec 0c             	sub    esp,0xc
c0015fbf:	8b 10                	mov    edx,DWORD PTR [eax]
c0015fc1:	50                   	push   eax
c0015fc2:	ff 12                	call   DWORD PTR [edx]
c0015fc4:	31 d2                	xor    edx,edx
c0015fc6:	0f b6 c0             	movzx  eax,al
c0015fc9:	83 c4 10             	add    esp,0x10
c0015fcc:	83 c4 0c             	add    esp,0xc
c0015fcf:	c3                   	ret    
c0015fd0:	83 ec 0c             	sub    esp,0xc
c0015fd3:	50                   	push   eax
c0015fd4:	e8 aa 58 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c0015fd9:	83 c4 10             	add    esp,0x10
c0015fdc:	85 c0                	test   eax,eax
c0015fde:	75 dc                	jne    c0015fbc <sysCallIsATTY(regs*)+0x28>
c0015fe0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015fe5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015fea:	83 c4 0c             	add    esp,0xc
c0015fed:	c3                   	ret    

c0015fee <sysCallSeek(regs*)>:
c0015fee:	53                   	push   ebx
c0015fef:	83 ec 08             	sub    esp,0x8
c0015ff2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ff6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015ff9:	8d 50 fd             	lea    edx,[eax-0x3]
c0015ffc:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0016002:	77 32                	ja     c0016036 <sysCallSeek(regs*)+0x48>
c0016004:	83 ec 0c             	sub    esp,0xc
c0016007:	50                   	push   eax
c0016008:	e8 76 58 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c001600d:	83 c4 0c             	add    esp,0xc
c0016010:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016013:	31 db                	xor    ebx,ebx
c0016015:	53                   	push   ebx
c0016016:	51                   	push   ecx
c0016017:	50                   	push   eax
c0016018:	e8 cd 73 ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c001601d:	83 c4 10             	add    esp,0x10
c0016020:	85 c0                	test   eax,eax
c0016022:	0f 95 c0             	setne  al
c0016025:	31 d2                	xor    edx,edx
c0016027:	0f b6 c0             	movzx  eax,al
c001602a:	f7 d8                	neg    eax
c001602c:	83 d2 00             	adc    edx,0x0
c001602f:	83 c4 08             	add    esp,0x8
c0016032:	f7 da                	neg    edx
c0016034:	5b                   	pop    ebx
c0016035:	c3                   	ret    
c0016036:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001603b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016040:	83 c4 08             	add    esp,0x8
c0016043:	5b                   	pop    ebx
c0016044:	c3                   	ret    

c0016045 <sysCallTell(regs*)>:
c0016045:	53                   	push   ebx
c0016046:	83 ec 08             	sub    esp,0x8
c0016049:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001604d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016050:	83 f8 02             	cmp    eax,0x2
c0016053:	76 4d                	jbe    c00160a2 <sysCallTell(regs*)+0x5d>
c0016055:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001605a:	76 19                	jbe    c0016075 <sysCallTell(regs*)+0x30>
c001605c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001605f:	31 d2                	xor    edx,edx
c0016061:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016067:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001606e:	31 c0                	xor    eax,eax
c0016070:	83 c4 08             	add    esp,0x8
c0016073:	5b                   	pop    ebx
c0016074:	c3                   	ret    
c0016075:	83 ec 0c             	sub    esp,0xc
c0016078:	50                   	push   eax
c0016079:	e8 05 58 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c001607e:	5a                   	pop    edx
c001607f:	59                   	pop    ecx
c0016080:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016083:	50                   	push   eax
c0016084:	e8 b7 73 ff ff       	call   c000d440 <File::tell(unsigned long long*)>
c0016089:	83 c4 10             	add    esp,0x10
c001608c:	85 c0                	test   eax,eax
c001608e:	0f 95 c0             	setne  al
c0016091:	31 d2                	xor    edx,edx
c0016093:	0f b6 c0             	movzx  eax,al
c0016096:	f7 d8                	neg    eax
c0016098:	83 d2 00             	adc    edx,0x0
c001609b:	83 c4 08             	add    esp,0x8
c001609e:	f7 da                	neg    edx
c00160a0:	5b                   	pop    ebx
c00160a1:	c3                   	ret    
c00160a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00160a7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00160ac:	83 c4 08             	add    esp,0x8
c00160af:	5b                   	pop    ebx
c00160b0:	c3                   	ret    

c00160b1 <sysCallSize(regs*)>:
c00160b1:	53                   	push   ebx
c00160b2:	83 ec 18             	sub    esp,0x18
c00160b5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00160b9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00160bc:	83 f8 02             	cmp    eax,0x2
c00160bf:	76 53                	jbe    c0016114 <sysCallSize(regs*)+0x63>
c00160c1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00160c6:	76 19                	jbe    c00160e1 <sysCallSize(regs*)+0x30>
c00160c8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00160cb:	31 d2                	xor    edx,edx
c00160cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00160d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00160da:	31 c0                	xor    eax,eax
c00160dc:	83 c4 18             	add    esp,0x18
c00160df:	5b                   	pop    ebx
c00160e0:	c3                   	ret    
c00160e1:	83 ec 0c             	sub    esp,0xc
c00160e4:	50                   	push   eax
c00160e5:	e8 99 57 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c00160ea:	83 c4 0c             	add    esp,0xc
c00160ed:	8d 54 24 13          	lea    edx,[esp+0x13]
c00160f1:	52                   	push   edx
c00160f2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00160f5:	50                   	push   eax
c00160f6:	e8 dd 74 ff ff       	call   c000d5d8 <File::stat(unsigned long long*, bool*)>
c00160fb:	83 c4 10             	add    esp,0x10
c00160fe:	85 c0                	test   eax,eax
c0016100:	0f 95 c0             	setne  al
c0016103:	31 d2                	xor    edx,edx
c0016105:	0f b6 c0             	movzx  eax,al
c0016108:	f7 d8                	neg    eax
c001610a:	83 d2 00             	adc    edx,0x0
c001610d:	83 c4 18             	add    esp,0x18
c0016110:	f7 da                	neg    edx
c0016112:	5b                   	pop    ebx
c0016113:	c3                   	ret    
c0016114:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016119:	ba ff ff ff ff       	mov    edx,0xffffffff
c001611e:	83 c4 18             	add    esp,0x18
c0016121:	5b                   	pop    ebx
c0016122:	c3                   	ret    

c0016123 <sysCallSizeFromFilename(regs*)>:
c0016123:	57                   	push   edi
c0016124:	56                   	push   esi
c0016125:	53                   	push   ebx
c0016126:	83 ec 20             	sub    esp,0x20
c0016129:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001612d:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0016130:	83 fb 02             	cmp    ebx,0x2
c0016133:	0f 86 88 00 00 00    	jbe    c00161c1 <sysCallSizeFromFilename(regs*)+0x9e>
c0016139:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001613f:	76 1b                	jbe    c001615c <sysCallSizeFromFilename(regs*)+0x39>
c0016141:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016144:	31 d2                	xor    edx,edx
c0016146:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001614c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016153:	83 c4 20             	add    esp,0x20
c0016156:	31 c0                	xor    eax,eax
c0016158:	5b                   	pop    ebx
c0016159:	5e                   	pop    esi
c001615a:	5f                   	pop    edi
c001615b:	c3                   	ret    
c001615c:	83 ec 0c             	sub    esp,0xc
c001615f:	68 14 01 00 00       	push   0x114
c0016164:	e8 a6 38 ff ff       	call   c0009a0f <malloc>
c0016169:	83 c4 0c             	add    esp,0xc
c001616c:	89 c7                	mov    edi,eax
c001616e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016173:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016176:	53                   	push   ebx
c0016177:	57                   	push   edi
c0016178:	e8 ed 70 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c001617d:	83 c4 0c             	add    esp,0xc
c0016180:	8d 44 24 23          	lea    eax,[esp+0x23]
c0016184:	50                   	push   eax
c0016185:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0016188:	57                   	push   edi
c0016189:	e8 4a 74 ff ff       	call   c000d5d8 <File::stat(unsigned long long*, bool*)>
c001618e:	83 c4 10             	add    esp,0x10
c0016191:	85 ff                	test   edi,edi
c0016193:	74 14                	je     c00161a9 <sysCallSizeFromFilename(regs*)+0x86>
c0016195:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016199:	8b 17                	mov    edx,DWORD PTR [edi]
c001619b:	83 ec 0c             	sub    esp,0xc
c001619e:	57                   	push   edi
c001619f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00161a2:	83 c4 10             	add    esp,0x10
c00161a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00161a9:	85 c0                	test   eax,eax
c00161ab:	0f 95 c0             	setne  al
c00161ae:	31 d2                	xor    edx,edx
c00161b0:	0f b6 c0             	movzx  eax,al
c00161b3:	f7 d8                	neg    eax
c00161b5:	83 d2 00             	adc    edx,0x0
c00161b8:	83 c4 20             	add    esp,0x20
c00161bb:	f7 da                	neg    edx
c00161bd:	5b                   	pop    ebx
c00161be:	5e                   	pop    esi
c00161bf:	5f                   	pop    edi
c00161c0:	c3                   	ret    
c00161c1:	83 c4 20             	add    esp,0x20
c00161c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00161c9:	5b                   	pop    ebx
c00161ca:	ba ff ff ff ff       	mov    edx,0xffffffff
c00161cf:	5e                   	pop    esi
c00161d0:	5f                   	pop    edi
c00161d1:	c3                   	ret    

c00161d2 <sysCallClose(regs*)>:
c00161d2:	53                   	push   ebx
c00161d3:	83 ec 08             	sub    esp,0x8
c00161d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161da:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00161dd:	83 f8 02             	cmp    eax,0x2
c00161e0:	76 41                	jbe    c0016223 <sysCallClose(regs*)+0x51>
c00161e2:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00161e8:	83 fa 01             	cmp    edx,0x1
c00161eb:	76 2d                	jbe    c001621a <sysCallClose(regs*)+0x48>
c00161ed:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00161f2:	77 2f                	ja     c0016223 <sysCallClose(regs*)+0x51>
c00161f4:	83 ec 0c             	sub    esp,0xc
c00161f7:	50                   	push   eax
c00161f8:	e8 86 56 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c00161fd:	89 c3                	mov    ebx,eax
c00161ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0016202:	e8 83 71 ff ff       	call   c000d38a <File::close()>
c0016207:	83 c4 10             	add    esp,0x10
c001620a:	85 db                	test   ebx,ebx
c001620c:	74 0c                	je     c001621a <sysCallClose(regs*)+0x48>
c001620e:	83 ec 0c             	sub    esp,0xc
c0016211:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016213:	53                   	push   ebx
c0016214:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016217:	83 c4 10             	add    esp,0x10
c001621a:	31 c0                	xor    eax,eax
c001621c:	31 d2                	xor    edx,edx
c001621e:	83 c4 08             	add    esp,0x8
c0016221:	5b                   	pop    ebx
c0016222:	c3                   	ret    
c0016223:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016228:	ba ff ff ff ff       	mov    edx,0xffffffff
c001622d:	83 c4 08             	add    esp,0x8
c0016230:	5b                   	pop    ebx
c0016231:	c3                   	ret    

c0016232 <sysCallOpenDir(regs*)>:
c0016232:	56                   	push   esi
c0016233:	53                   	push   ebx
c0016234:	53                   	push   ebx
c0016235:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016239:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001623c:	85 f6                	test   esi,esi
c001623e:	74 59                	je     c0016299 <sysCallOpenDir(regs*)+0x67>
c0016240:	83 ec 0c             	sub    esp,0xc
c0016243:	68 14 01 00 00       	push   0x114
c0016248:	e8 c2 37 ff ff       	call   c0009a0f <malloc>
c001624d:	83 c4 0c             	add    esp,0xc
c0016250:	89 c6                	mov    esi,eax
c0016252:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016257:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001625a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001625d:	56                   	push   esi
c001625e:	e8 11 75 ff ff       	call   c000d774 <Directory::Directory(char const*, Process*)>
c0016263:	83 c4 10             	add    esp,0x10
c0016266:	85 f6                	test   esi,esi
c0016268:	74 2f                	je     c0016299 <sysCallOpenDir(regs*)+0x67>
c001626a:	83 ec 0c             	sub    esp,0xc
c001626d:	56                   	push   esi
c001626e:	e8 65 75 ff ff       	call   c000d7d8 <Directory::open()>
c0016273:	83 c4 10             	add    esp,0x10
c0016276:	85 c0                	test   eax,eax
c0016278:	75 1f                	jne    c0016299 <sysCallOpenDir(regs*)+0x67>
c001627a:	83 ec 0c             	sub    esp,0xc
c001627d:	56                   	push   esi
c001627e:	e8 0b 53 ff ff       	call   c000b58e <UnixFile::getFileDescriptor()>
c0016283:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016286:	83 c4 10             	add    esp,0x10
c0016289:	89 02                	mov    DWORD PTR [edx],eax
c001628b:	c1 f8 1f             	sar    eax,0x1f
c001628e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016291:	31 c0                	xor    eax,eax
c0016293:	59                   	pop    ecx
c0016294:	31 d2                	xor    edx,edx
c0016296:	5b                   	pop    ebx
c0016297:	5e                   	pop    esi
c0016298:	c3                   	ret    
c0016299:	59                   	pop    ecx
c001629a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001629f:	ba ff ff ff ff       	mov    edx,0xffffffff
c00162a4:	5b                   	pop    ebx
c00162a5:	5e                   	pop    esi
c00162a6:	c3                   	ret    

c00162a7 <sysCallCloseDir(regs*)>:
c00162a7:	53                   	push   ebx
c00162a8:	83 ec 08             	sub    esp,0x8
c00162ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162af:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00162b2:	8d 50 fd             	lea    edx,[eax-0x3]
c00162b5:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00162bb:	77 2f                	ja     c00162ec <sysCallCloseDir(regs*)+0x45>
c00162bd:	83 ec 0c             	sub    esp,0xc
c00162c0:	50                   	push   eax
c00162c1:	e8 bd 55 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c00162c6:	89 c3                	mov    ebx,eax
c00162c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00162cb:	e8 64 75 ff ff       	call   c000d834 <Directory::close()>
c00162d0:	83 c4 10             	add    esp,0x10
c00162d3:	85 db                	test   ebx,ebx
c00162d5:	74 0c                	je     c00162e3 <sysCallCloseDir(regs*)+0x3c>
c00162d7:	83 ec 0c             	sub    esp,0xc
c00162da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00162dc:	53                   	push   ebx
c00162dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00162e0:	83 c4 10             	add    esp,0x10
c00162e3:	31 c0                	xor    eax,eax
c00162e5:	31 d2                	xor    edx,edx
c00162e7:	83 c4 08             	add    esp,0x8
c00162ea:	5b                   	pop    ebx
c00162eb:	c3                   	ret    
c00162ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00162f1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00162f6:	83 c4 08             	add    esp,0x8
c00162f9:	5b                   	pop    ebx
c00162fa:	c3                   	ret    

c00162fb <sysCallMakeDir(regs*)>:
c00162fb:	56                   	push   esi
c00162fc:	53                   	push   ebx
c00162fd:	83 ec 10             	sub    esp,0x10
c0016300:	68 14 01 00 00       	push   0x114
c0016305:	e8 05 37 ff ff       	call   c0009a0f <malloc>
c001630a:	83 c4 0c             	add    esp,0xc
c001630d:	89 c3                	mov    ebx,eax
c001630f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016314:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016317:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001631b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001631e:	53                   	push   ebx
c001631f:	e8 50 74 ff ff       	call   c000d774 <Directory::Directory(char const*, Process*)>
c0016324:	83 c4 10             	add    esp,0x10
c0016327:	85 db                	test   ebx,ebx
c0016329:	74 32                	je     c001635d <sysCallMakeDir(regs*)+0x62>
c001632b:	83 ec 0c             	sub    esp,0xc
c001632e:	53                   	push   ebx
c001632f:	e8 84 76 ff ff       	call   c000d9b8 <Directory::create()>
c0016334:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016337:	89 c6                	mov    esi,eax
c0016339:	e8 f6 74 ff ff       	call   c000d834 <Directory::close()>
c001633e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016340:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016343:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016346:	83 c4 10             	add    esp,0x10
c0016349:	31 c0                	xor    eax,eax
c001634b:	59                   	pop    ecx
c001634c:	85 f6                	test   esi,esi
c001634e:	5b                   	pop    ebx
c001634f:	0f 95 c0             	setne  al
c0016352:	5e                   	pop    esi
c0016353:	31 d2                	xor    edx,edx
c0016355:	f7 d8                	neg    eax
c0016357:	83 d2 00             	adc    edx,0x0
c001635a:	f7 da                	neg    edx
c001635c:	c3                   	ret    
c001635d:	59                   	pop    ecx
c001635e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016363:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016368:	5b                   	pop    ebx
c0016369:	5e                   	pop    esi
c001636a:	c3                   	ret    

c001636b <sysCallWait(regs*)>:
c001636b:	83 ec 10             	sub    esp,0x10
c001636e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016372:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016375:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016378:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001637b:	e8 fc 24 00 00       	call   c001887c <waitTask(int, int*, int)>
c0016380:	83 c4 1c             	add    esp,0x1c
c0016383:	99                   	cdq    
c0016384:	c3                   	ret    

c0016385 <sysCallNotImpl(regs*)>:
c0016385:	83 ec 18             	sub    esp,0x18
c0016388:	68 d9 5c 02 c0       	push   0xc0025cd9
c001638d:	e8 5d e5 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0016392:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016397:	ba ff ff ff ff       	mov    edx,0xffffffff
c001639c:	83 c4 1c             	add    esp,0x1c
c001639f:	c3                   	ret    

c00163a0 <sysPanic(regs*)>:
c00163a0:	83 ec 18             	sub    esp,0x18
c00163a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00163a7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00163aa:	e8 40 e5 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c00163af:	b8 01 00 00 00       	mov    eax,0x1
c00163b4:	31 d2                	xor    edx,edx
c00163b6:	83 c4 1c             	add    esp,0x1c
c00163b9:	c3                   	ret    

c00163ba <sysCallRmdir(regs*)>:
c00163ba:	56                   	push   esi
c00163bb:	53                   	push   ebx
c00163bc:	83 ec 20             	sub    esp,0x20
c00163bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00163c3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00163c6:	68 14 01 00 00       	push   0x114
c00163cb:	e8 3f 36 ff ff       	call   c0009a0f <malloc>
c00163d0:	83 c4 0c             	add    esp,0xc
c00163d3:	89 c3                	mov    ebx,eax
c00163d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163da:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00163dd:	56                   	push   esi
c00163de:	53                   	push   ebx
c00163df:	e8 86 6e ff ff       	call   c000d26a <File::File(char const*, Process*)>
c00163e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163e7:	e8 b8 70 ff ff       	call   c000d4a4 <File::unlink()>
c00163ec:	83 c4 10             	add    esp,0x10
c00163ef:	85 db                	test   ebx,ebx
c00163f1:	74 14                	je     c0016407 <sysCallRmdir(regs*)+0x4d>
c00163f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00163f7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00163f9:	83 ec 0c             	sub    esp,0xc
c00163fc:	53                   	push   ebx
c00163fd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016400:	83 c4 10             	add    esp,0x10
c0016403:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016407:	85 c0                	test   eax,eax
c0016409:	0f 95 c0             	setne  al
c001640c:	31 d2                	xor    edx,edx
c001640e:	0f b6 c0             	movzx  eax,al
c0016411:	f7 d8                	neg    eax
c0016413:	83 d2 00             	adc    edx,0x0
c0016416:	83 c4 14             	add    esp,0x14
c0016419:	f7 da                	neg    edx
c001641b:	5b                   	pop    ebx
c001641c:	5e                   	pop    esi
c001641d:	c3                   	ret    

c001641e <sysCallUnlink(regs*)>:
c001641e:	56                   	push   esi
c001641f:	53                   	push   ebx
c0016420:	83 ec 20             	sub    esp,0x20
c0016423:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016427:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001642a:	68 14 01 00 00       	push   0x114
c001642f:	e8 db 35 ff ff       	call   c0009a0f <malloc>
c0016434:	83 c4 0c             	add    esp,0xc
c0016437:	89 c3                	mov    ebx,eax
c0016439:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001643e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016441:	56                   	push   esi
c0016442:	53                   	push   ebx
c0016443:	e8 22 6e ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0016448:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001644b:	e8 54 70 ff ff       	call   c000d4a4 <File::unlink()>
c0016450:	83 c4 10             	add    esp,0x10
c0016453:	85 db                	test   ebx,ebx
c0016455:	74 14                	je     c001646b <sysCallUnlink(regs*)+0x4d>
c0016457:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001645b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001645d:	83 ec 0c             	sub    esp,0xc
c0016460:	53                   	push   ebx
c0016461:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016464:	83 c4 10             	add    esp,0x10
c0016467:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001646b:	85 c0                	test   eax,eax
c001646d:	0f 95 c0             	setne  al
c0016470:	31 d2                	xor    edx,edx
c0016472:	0f b6 c0             	movzx  eax,al
c0016475:	f7 d8                	neg    eax
c0016477:	83 d2 00             	adc    edx,0x0
c001647a:	83 c4 14             	add    esp,0x14
c001647d:	f7 da                	neg    edx
c001647f:	5b                   	pop    ebx
c0016480:	5e                   	pop    esi
c0016481:	c3                   	ret    

c0016482 <sysCallGetArgv(regs*)>:
c0016482:	83 ec 0c             	sub    esp,0xc
c0016485:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016489:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001648c:	85 c0                	test   eax,eax
c001648e:	78 2b                	js     c00164bb <sysCallGetArgv(regs*)+0x39>
c0016490:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016496:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0016499:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001649f:	7d 1a                	jge    c00164bb <sysCallGetArgv(regs*)+0x39>
c00164a1:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00164a8:	85 c0                	test   eax,eax
c00164aa:	74 17                	je     c00164c3 <sysCallGetArgv(regs*)+0x41>
c00164ac:	83 ec 08             	sub    esp,0x8
c00164af:	50                   	push   eax
c00164b0:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00164b3:	e8 88 a2 fe ff       	call   c0000740 <strcpy>
c00164b8:	83 c4 10             	add    esp,0x10
c00164bb:	31 c0                	xor    eax,eax
c00164bd:	31 d2                	xor    edx,edx
c00164bf:	83 c4 0c             	add    esp,0xc
c00164c2:	c3                   	ret    
c00164c3:	b8 01 00 00 00       	mov    eax,0x1
c00164c8:	31 d2                	xor    edx,edx
c00164ca:	83 c4 0c             	add    esp,0xc
c00164cd:	c3                   	ret    

c00164ce <sysCallTTYName(regs*)>:
c00164ce:	56                   	push   esi
c00164cf:	53                   	push   ebx
c00164d0:	53                   	push   ebx
c00164d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00164d5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00164d8:	85 c0                	test   eax,eax
c00164da:	74 5f                	je     c001653b <sysCallTTYName(regs*)+0x6d>
c00164dc:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00164df:	83 f8 02             	cmp    eax,0x2
c00164e2:	77 3e                	ja     c0016522 <sysCallTTYName(regs*)+0x54>
c00164e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164e9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00164ec:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c00164f2:	85 db                	test   ebx,ebx
c00164f4:	74 45                	je     c001653b <sysCallTTYName(regs*)+0x6d>
c00164f6:	83 ec 0c             	sub    esp,0xc
c00164f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00164fb:	53                   	push   ebx
c00164fc:	ff 10                	call   DWORD PTR [eax]
c00164fe:	83 c4 10             	add    esp,0x10
c0016501:	84 c0                	test   al,al
c0016503:	74 41                	je     c0016546 <sysCallTTYName(regs*)+0x78>
c0016505:	83 ec 08             	sub    esp,0x8
c0016508:	81 c3 82 00 00 00    	add    ebx,0x82
c001650e:	53                   	push   ebx
c001650f:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016512:	e8 29 a2 fe ff       	call   c0000740 <strcpy>
c0016517:	83 c4 10             	add    esp,0x10
c001651a:	31 c0                	xor    eax,eax
c001651c:	59                   	pop    ecx
c001651d:	31 d2                	xor    edx,edx
c001651f:	5b                   	pop    ebx
c0016520:	5e                   	pop    esi
c0016521:	c3                   	ret    
c0016522:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016527:	74 bb                	je     c00164e4 <sysCallTTYName(regs*)+0x16>
c0016529:	83 ec 0c             	sub    esp,0xc
c001652c:	50                   	push   eax
c001652d:	e8 51 53 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c0016532:	83 c4 10             	add    esp,0x10
c0016535:	89 c3                	mov    ebx,eax
c0016537:	85 db                	test   ebx,ebx
c0016539:	75 bb                	jne    c00164f6 <sysCallTTYName(regs*)+0x28>
c001653b:	59                   	pop    ecx
c001653c:	b8 01 00 00 00       	mov    eax,0x1
c0016541:	31 d2                	xor    edx,edx
c0016543:	5b                   	pop    ebx
c0016544:	5e                   	pop    esi
c0016545:	c3                   	ret    
c0016546:	59                   	pop    ecx
c0016547:	b8 02 00 00 00       	mov    eax,0x2
c001654c:	31 d2                	xor    edx,edx
c001654e:	5b                   	pop    ebx
c001654f:	5e                   	pop    esi
c0016550:	c3                   	ret    

c0016551 <sysCallUSleep(regs*)>:
c0016551:	83 ec 1c             	sub    esp,0x1c
c0016554:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016558:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001655b:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001655e:	6a 00                	push   0x0
c0016560:	6a 64                	push   0x64
c0016562:	52                   	push   edx
c0016563:	50                   	push   eax
c0016564:	e8 3b c1 00 00       	call   c00226a4 <__udivdi3>
c0016569:	83 c4 14             	add    esp,0x14
c001656c:	50                   	push   eax
c001656d:	e8 da 23 00 00       	call   c001894c <milliTenthSleep(unsigned int)>
c0016572:	31 c0                	xor    eax,eax
c0016574:	31 d2                	xor    edx,edx
c0016576:	83 c4 1c             	add    esp,0x1c
c0016579:	c3                   	ret    

c001657a <sysCallSpawn(regs*)>:
c001657a:	56                   	push   esi
c001657b:	53                   	push   ebx
c001657c:	50                   	push   eax
c001657d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016581:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016584:	85 c0                	test   eax,eax
c0016586:	75 08                	jne    c0016590 <sysCallSpawn(regs*)+0x16>
c0016588:	59                   	pop    ecx
c0016589:	31 c0                	xor    eax,eax
c001658b:	31 d2                	xor    edx,edx
c001658d:	5b                   	pop    ebx
c001658e:	5e                   	pop    esi
c001658f:	c3                   	ret    
c0016590:	83 ec 0c             	sub    esp,0xc
c0016593:	68 1f 07 00 00       	push   0x71f
c0016598:	e8 72 34 ff ff       	call   c0009a0f <malloc>
c001659d:	83 c4 10             	add    esp,0x10
c00165a0:	89 c6                	mov    esi,eax
c00165a2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00165a5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00165a8:	85 c0                	test   eax,eax
c00165aa:	75 32                	jne    c00165de <sysCallSpawn(regs*)+0x64>
c00165ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165b1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00165b4:	52                   	push   edx
c00165b5:	50                   	push   eax
c00165b6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00165b9:	56                   	push   esi
c00165ba:	e8 85 1a 00 00       	call   c0018044 <Process::Process(char const*, Process*, char**)>
c00165bf:	83 c4 10             	add    esp,0x10
c00165c2:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00165c9:	75 bd                	jne    c0016588 <sysCallSpawn(regs*)+0xe>
c00165cb:	83 ec 0c             	sub    esp,0xc
c00165ce:	56                   	push   esi
c00165cf:	e8 5c 1f 00 00       	call   c0018530 <Process::createUserThread()>
c00165d4:	8b 06                	mov    eax,DWORD PTR [esi]
c00165d6:	83 c4 10             	add    esp,0x10
c00165d9:	99                   	cdq    
c00165da:	59                   	pop    ecx
c00165db:	5b                   	pop    ebx
c00165dc:	5e                   	pop    esi
c00165dd:	c3                   	ret    
c00165de:	31 c0                	xor    eax,eax
c00165e0:	eb d2                	jmp    c00165b4 <sysCallSpawn(regs*)+0x3a>

c00165e2 <sysCallGetEnv(regs*)>:
c00165e2:	57                   	push   edi
c00165e3:	56                   	push   esi
c00165e4:	53                   	push   ebx
c00165e5:	83 ec 1c             	sub    esp,0x1c
c00165e8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00165ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165f1:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00165f4:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00165f7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00165fa:	e8 3c e2 ff ff       	call   c001483b <Krnl::getProcessTotalEnvCount(Process*)>
c00165ff:	83 c4 10             	add    esp,0x10
c0016602:	39 c7                	cmp    edi,eax
c0016604:	7c 14                	jl     c001661a <sysCallGetEnv(regs*)+0x38>
c0016606:	85 f6                	test   esi,esi
c0016608:	75 0b                	jne    c0016615 <sysCallGetEnv(regs*)+0x33>
c001660a:	83 c4 10             	add    esp,0x10
c001660d:	31 c0                	xor    eax,eax
c001660f:	5b                   	pop    ebx
c0016610:	31 d2                	xor    edx,edx
c0016612:	5e                   	pop    esi
c0016613:	5f                   	pop    edi
c0016614:	c3                   	ret    
c0016615:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016618:	eb f0                	jmp    c001660a <sysCallGetEnv(regs*)+0x28>
c001661a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001661e:	52                   	push   edx
c001661f:	57                   	push   edi
c0016620:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016626:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0016629:	50                   	push   eax
c001662a:	e8 2c e2 ff ff       	call   c001485b <Krnl::getProcessEnvPair(Process*, int)>
c001662f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016632:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016636:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001663a:	83 c4 0c             	add    esp,0xc
c001663d:	85 c9                	test   ecx,ecx
c001663f:	75 23                	jne    c0016664 <sysCallGetEnv(regs*)+0x82>
c0016641:	83 ec 0c             	sub    esp,0xc
c0016644:	50                   	push   eax
c0016645:	e8 56 a0 fe ff       	call   c00006a0 <strlen>
c001664a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001664d:	89 c3                	mov    ebx,eax
c001664f:	e8 4c a0 fe ff       	call   c00006a0 <strlen>
c0016654:	83 c4 10             	add    esp,0x10
c0016657:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001665b:	83 c4 10             	add    esp,0x10
c001665e:	31 d2                	xor    edx,edx
c0016660:	5b                   	pop    ebx
c0016661:	5e                   	pop    esi
c0016662:	5f                   	pop    edi
c0016663:	c3                   	ret    
c0016664:	83 ec 08             	sub    esp,0x8
c0016667:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001666a:	50                   	push   eax
c001666b:	56                   	push   esi
c001666c:	e8 cf a0 fe ff       	call   c0000740 <strcpy>
c0016671:	58                   	pop    eax
c0016672:	5a                   	pop    edx
c0016673:	68 f3 5c 02 c0       	push   0xc0025cf3
c0016678:	56                   	push   esi
c0016679:	e8 02 a2 fe ff       	call   c0000880 <strcat>
c001667e:	59                   	pop    ecx
c001667f:	5b                   	pop    ebx
c0016680:	57                   	push   edi
c0016681:	56                   	push   esi
c0016682:	e8 f9 a1 fe ff       	call   c0000880 <strcat>
c0016687:	83 c4 10             	add    esp,0x10
c001668a:	e9 7b ff ff ff       	jmp    c001660a <sysCallGetEnv(regs*)+0x28>

c001668f <sysAppSettings(regs*)>:
c001668f:	57                   	push   edi
c0016690:	56                   	push   esi
c0016691:	56                   	push   esi
c0016692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016696:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016699:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001669f:	25 e0 1f 00 00       	and    eax,0x1fe0
c00166a4:	66 3d c0 09          	cmp    ax,0x9c0
c00166a8:	75 2e                	jne    c00166d8 <sysAppSettings(regs*)+0x49>
c00166aa:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c00166b0:	83 e0 1f             	and    eax,0x1f
c00166b3:	3c 01                	cmp    al,0x1
c00166b5:	74 2c                	je     c00166e3 <sysAppSettings(regs*)+0x54>
c00166b7:	3c 07                	cmp    al,0x7
c00166b9:	0f 84 b3 00 00 00    	je     c0016772 <sysAppSettings(regs*)+0xe3>
c00166bf:	84 c0                	test   al,al
c00166c1:	0f 84 d2 00 00 00    	je     c0016799 <sysAppSettings(regs*)+0x10a>
c00166c7:	3c 08                	cmp    al,0x8
c00166c9:	74 63                	je     c001672e <sysAppSettings(regs*)+0x9f>
c00166cb:	59                   	pop    ecx
c00166cc:	0f b6 c0             	movzx  eax,al
c00166cf:	5e                   	pop    esi
c00166d0:	05 e8 03 00 00       	add    eax,0x3e8
c00166d5:	5f                   	pop    edi
c00166d6:	99                   	cdq    
c00166d7:	c3                   	ret    
c00166d8:	b8 01 00 00 00       	mov    eax,0x1
c00166dd:	59                   	pop    ecx
c00166de:	31 d2                	xor    edx,edx
c00166e0:	5e                   	pop    esi
c00166e1:	5f                   	pop    edi
c00166e2:	c3                   	ret    
c00166e3:	50                   	push   eax
c00166e4:	68 00 01 00 00       	push   0x100
c00166e9:	6a 00                	push   0x0
c00166eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166f3:	83 c0 0c             	add    eax,0xc
c00166f6:	50                   	push   eax
c00166f7:	e8 88 9f fe ff       	call   c0000684 <memset>
c00166fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016701:	b9 ff 00 00 00       	mov    ecx,0xff
c0016706:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0016709:	83 c7 0c             	add    edi,0xc
c001670c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001670e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016713:	5a                   	pop    edx
c0016714:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016717:	59                   	pop    ecx
c0016718:	8d 50 0c             	lea    edx,[eax+0xc]
c001671b:	52                   	push   edx
c001671c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016722:	e8 81 42 ff ff       	call   c000a9a8 <VgaText::setTitle(char*)>
c0016727:	83 c4 10             	add    esp,0x10
c001672a:	31 c0                	xor    eax,eax
c001672c:	eb af                	jmp    c00166dd <sysAppSettings(regs*)+0x4e>
c001672e:	83 ec 08             	sub    esp,0x8
c0016731:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016737:	83 e0 0f             	and    eax,0xf
c001673a:	50                   	push   eax
c001673b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016740:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016743:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016749:	e8 4a 42 ff ff       	call   c000a998 <VgaText::setTitleColour(VgaColour)>
c001674e:	5f                   	pop    edi
c001674f:	58                   	pop    eax
c0016750:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016756:	c1 e8 04             	shr    eax,0x4
c0016759:	83 e0 0f             	and    eax,0xf
c001675c:	50                   	push   eax
c001675d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016762:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016765:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001676b:	e8 18 42 ff ff       	call   c000a988 <VgaText::setTitleTextColour(VgaColour)>
c0016770:	eb b5                	jmp    c0016727 <sysAppSettings(regs*)+0x98>
c0016772:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016777:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001677a:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016780:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c0016786:	c0 e8 06             	shr    al,0x6
c0016789:	83 e0 01             	and    eax,0x1
c001678c:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c0016792:	31 c0                	xor    eax,eax
c0016794:	e9 44 ff ff ff       	jmp    c00166dd <sysAppSettings(regs*)+0x4e>
c0016799:	b8 02 00 00 00       	mov    eax,0x2
c001679e:	e9 3a ff ff ff       	jmp    c00166dd <sysAppSettings(regs*)+0x4e>

c00167a3 <sysSetFatAttrib(regs*)>:
c00167a3:	57                   	push   edi
c00167a4:	56                   	push   esi
c00167a5:	53                   	push   ebx
c00167a6:	83 ec 1c             	sub    esp,0x1c
c00167a9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00167ad:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00167b0:	68 14 01 00 00       	push   0x114
c00167b5:	e8 55 32 ff ff       	call   c0009a0f <malloc>
c00167ba:	83 c4 0c             	add    esp,0xc
c00167bd:	89 c3                	mov    ebx,eax
c00167bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167c4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00167c7:	57                   	push   edi
c00167c8:	53                   	push   ebx
c00167c9:	e8 9c 6a ff ff       	call   c000d26a <File::File(char const*, Process*)>
c00167ce:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00167d1:	83 c4 0c             	add    esp,0xc
c00167d4:	0f b6 d4             	movzx  edx,ah
c00167d7:	0f b6 c0             	movzx  eax,al
c00167da:	52                   	push   edx
c00167db:	50                   	push   eax
c00167dc:	53                   	push   ebx
c00167dd:	e8 5c 6d ff ff       	call   c000d53e <File::chfatattr(unsigned char, unsigned char)>
c00167e2:	83 c4 10             	add    esp,0x10
c00167e5:	85 db                	test   ebx,ebx
c00167e7:	74 14                	je     c00167fd <sysSetFatAttrib(regs*)+0x5a>
c00167e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167ed:	8b 13                	mov    edx,DWORD PTR [ebx]
c00167ef:	83 ec 0c             	sub    esp,0xc
c00167f2:	53                   	push   ebx
c00167f3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00167f6:	83 c4 10             	add    esp,0x10
c00167f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00167fd:	85 c0                	test   eax,eax
c00167ff:	0f 95 c0             	setne  al
c0016802:	31 d2                	xor    edx,edx
c0016804:	0f b6 c0             	movzx  eax,al
c0016807:	f7 d8                	neg    eax
c0016809:	83 d2 00             	adc    edx,0x0
c001680c:	83 c4 10             	add    esp,0x10
c001680f:	f7 da                	neg    edx
c0016811:	5b                   	pop    ebx
c0016812:	5e                   	pop    esi
c0016813:	5f                   	pop    edi
c0016814:	c3                   	ret    

c0016815 <sysPipe(regs*)>:
c0016815:	57                   	push   edi
c0016816:	56                   	push   esi
c0016817:	53                   	push   ebx
c0016818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001681c:	83 ec 0c             	sub    esp,0xc
c001681f:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016822:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016825:	6a 20                	push   0x20
c0016827:	e8 e3 31 ff ff       	call   c0009a0f <malloc>
c001682c:	89 c3                	mov    ebx,eax
c001682e:	58                   	pop    eax
c001682f:	5a                   	pop    edx
c0016830:	68 00 50 00 00       	push   0x5000
c0016835:	53                   	push   ebx
c0016836:	e8 e5 3e ff ff       	call   c000a720 <Pipe::Pipe(int)>
c001683b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001683e:	e8 4b 4d ff ff       	call   c000b58e <UnixFile::getFileDescriptor()>
c0016843:	89 07                	mov    DWORD PTR [edi],eax
c0016845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016848:	e8 41 4d ff ff       	call   c000b58e <UnixFile::getFileDescriptor()>
c001684d:	83 c4 10             	add    esp,0x10
c0016850:	89 06                	mov    DWORD PTR [esi],eax
c0016852:	31 d2                	xor    edx,edx
c0016854:	5b                   	pop    ebx
c0016855:	31 c0                	xor    eax,eax
c0016857:	5e                   	pop    esi
c0016858:	5f                   	pop    edi
c0016859:	c3                   	ret    

c001685a <sysGetUnixTime(regs*)>:
c001685a:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c001685f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016865:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016869:	e9 50 74 ff ff       	jmp    c000dcbe <Clock::timeInSecondsLocal()>

c001686e <string_ends_with(char const*, char const*)>:
c001686e:	57                   	push   edi
c001686f:	56                   	push   esi
c0016870:	53                   	push   ebx
c0016871:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016875:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016879:	83 ec 0c             	sub    esp,0xc
c001687c:	53                   	push   ebx
c001687d:	e8 1e 9e fe ff       	call   c00006a0 <strlen>
c0016882:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016885:	89 c6                	mov    esi,eax
c0016887:	e8 14 9e fe ff       	call   c00006a0 <strlen>
c001688c:	83 c4 10             	add    esp,0x10
c001688f:	39 c6                	cmp    esi,eax
c0016891:	7d 06                	jge    c0016899 <string_ends_with(char const*, char const*)+0x2b>
c0016893:	5b                   	pop    ebx
c0016894:	31 c0                	xor    eax,eax
c0016896:	5e                   	pop    esi
c0016897:	5f                   	pop    edi
c0016898:	c3                   	ret    
c0016899:	83 ec 08             	sub    esp,0x8
c001689c:	29 c6                	sub    esi,eax
c001689e:	57                   	push   edi
c001689f:	01 f3                	add    ebx,esi
c00168a1:	53                   	push   ebx
c00168a2:	e8 25 9f fe ff       	call   c00007cc <strcmp>
c00168a7:	83 c4 10             	add    esp,0x10
c00168aa:	85 c0                	test   eax,eax
c00168ac:	5b                   	pop    ebx
c00168ad:	0f 94 c0             	sete   al
c00168b0:	5e                   	pop    esi
c00168b1:	0f b6 c0             	movzx  eax,al
c00168b4:	5f                   	pop    edi
c00168b5:	c3                   	ret    

c00168b6 <sysCallOpen(regs*)>:
c00168b6:	56                   	push   esi
c00168b7:	53                   	push   ebx
c00168b8:	81 ec 04 01 00 00    	sub    esp,0x104
c00168be:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00168c5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00168c8:	85 c9                	test   ecx,ecx
c00168ca:	0f 84 ad 01 00 00    	je     c0016a7d <sysCallOpen(regs*)+0x1c7>
c00168d0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00168d3:	85 c0                	test   eax,eax
c00168d5:	0f 84 a2 01 00 00    	je     c0016a7d <sysCallOpen(regs*)+0x1c7>
c00168db:	52                   	push   edx
c00168dc:	68 f5 5c 02 c0       	push   0xc0025cf5
c00168e1:	50                   	push   eax
c00168e2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00168e6:	56                   	push   esi
c00168e7:	e8 d4 67 ff ff       	call   c000d0c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c00168ec:	89 34 24             	mov    DWORD PTR [esp],esi
c00168ef:	e8 ac 9d fe ff       	call   c00006a0 <strlen>
c00168f4:	83 c4 10             	add    esp,0x10
c00168f7:	48                   	dec    eax
c00168f8:	74 1d                	je     c0016917 <sysCallOpen(regs*)+0x61>
c00168fa:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00168fd:	eb 0f                	jmp    c001690e <sysCallOpen(regs*)+0x58>
c00168ff:	80 fa 3a             	cmp    dl,0x3a
c0016902:	74 0f                	je     c0016913 <sysCallOpen(regs*)+0x5d>
c0016904:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016908:	48                   	dec    eax
c0016909:	74 0c                	je     c0016917 <sysCallOpen(regs*)+0x61>
c001690b:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001690e:	80 fa 2e             	cmp    dl,0x2e
c0016911:	75 ec                	jne    c00168ff <sysCallOpen(regs*)+0x49>
c0016913:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016917:	83 ec 08             	sub    esp,0x8
c001691a:	68 f9 5c 02 c0       	push   0xc0025cf9
c001691f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016922:	e8 47 ff ff ff       	call   c001686e <string_ends_with(char const*, char const*)>
c0016927:	83 c4 10             	add    esp,0x10
c001692a:	85 c0                	test   eax,eax
c001692c:	74 1d                	je     c001694b <sysCallOpen(regs*)+0x95>
c001692e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016931:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016937:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001693e:	81 c4 04 01 00 00    	add    esp,0x104
c0016944:	31 c0                	xor    eax,eax
c0016946:	31 d2                	xor    edx,edx
c0016948:	5b                   	pop    ebx
c0016949:	5e                   	pop    esi
c001694a:	c3                   	ret    
c001694b:	83 ec 08             	sub    esp,0x8
c001694e:	68 fe 5c 02 c0       	push   0xc0025cfe
c0016953:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016956:	e8 13 ff ff ff       	call   c001686e <string_ends_with(char const*, char const*)>
c001695b:	83 c4 10             	add    esp,0x10
c001695e:	85 c0                	test   eax,eax
c0016960:	75 cc                	jne    c001692e <sysCallOpen(regs*)+0x78>
c0016962:	83 ec 08             	sub    esp,0x8
c0016965:	68 fa 5c 02 c0       	push   0xc0025cfa
c001696a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001696d:	e8 5a 9e fe ff       	call   c00007cc <strcmp>
c0016972:	83 c4 10             	add    esp,0x10
c0016975:	85 c0                	test   eax,eax
c0016977:	74 b5                	je     c001692e <sysCallOpen(regs*)+0x78>
c0016979:	83 ec 08             	sub    esp,0x8
c001697c:	68 f9 5c 02 c0       	push   0xc0025cf9
c0016981:	56                   	push   esi
c0016982:	e8 e7 fe ff ff       	call   c001686e <string_ends_with(char const*, char const*)>
c0016987:	83 c4 10             	add    esp,0x10
c001698a:	85 c0                	test   eax,eax
c001698c:	75 a0                	jne    c001692e <sysCallOpen(regs*)+0x78>
c001698e:	83 ec 08             	sub    esp,0x8
c0016991:	68 03 5d 02 c0       	push   0xc0025d03
c0016996:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016999:	e8 d0 fe ff ff       	call   c001686e <string_ends_with(char const*, char const*)>
c001699e:	83 c4 10             	add    esp,0x10
c00169a1:	85 c0                	test   eax,eax
c00169a3:	0f 85 e7 00 00 00    	jne    c0016a90 <sysCallOpen(regs*)+0x1da>
c00169a9:	83 ec 08             	sub    esp,0x8
c00169ac:	68 08 5d 02 c0       	push   0xc0025d08
c00169b1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00169b4:	e8 b5 fe ff ff       	call   c001686e <string_ends_with(char const*, char const*)>
c00169b9:	83 c4 10             	add    esp,0x10
c00169bc:	85 c0                	test   eax,eax
c00169be:	0f 85 cc 00 00 00    	jne    c0016a90 <sysCallOpen(regs*)+0x1da>
c00169c4:	83 ec 08             	sub    esp,0x8
c00169c7:	68 04 5d 02 c0       	push   0xc0025d04
c00169cc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00169cf:	e8 f8 9d fe ff       	call   c00007cc <strcmp>
c00169d4:	83 c4 10             	add    esp,0x10
c00169d7:	85 c0                	test   eax,eax
c00169d9:	0f 84 b1 00 00 00    	je     c0016a90 <sysCallOpen(regs*)+0x1da>
c00169df:	83 ec 08             	sub    esp,0x8
c00169e2:	68 03 5d 02 c0       	push   0xc0025d03
c00169e7:	56                   	push   esi
c00169e8:	e8 81 fe ff ff       	call   c001686e <string_ends_with(char const*, char const*)>
c00169ed:	83 c4 10             	add    esp,0x10
c00169f0:	85 c0                	test   eax,eax
c00169f2:	0f 85 98 00 00 00    	jne    c0016a90 <sysCallOpen(regs*)+0x1da>
c00169f8:	83 ec 0c             	sub    esp,0xc
c00169fb:	68 14 01 00 00       	push   0x114
c0016a00:	e8 0a 30 ff ff       	call   c0009a0f <malloc>
c0016a05:	83 c4 0c             	add    esp,0xc
c0016a08:	89 c6                	mov    esi,eax
c0016a0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a0f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016a12:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a15:	56                   	push   esi
c0016a16:	e8 4f 68 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0016a1b:	83 c4 10             	add    esp,0x10
c0016a1e:	85 f6                	test   esi,esi
c0016a20:	74 5b                	je     c0016a7d <sysCallOpen(regs*)+0x1c7>
c0016a22:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016a25:	0f b6 c2             	movzx  eax,dl
c0016a28:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0016a2b:	89 d0                	mov    eax,edx
c0016a2d:	83 e0 01             	and    eax,0x1
c0016a30:	f6 c2 02             	test   dl,0x2
c0016a33:	74 03                	je     c0016a38 <sysCallOpen(regs*)+0x182>
c0016a35:	83 c8 02             	or     eax,0x2
c0016a38:	f6 c2 04             	test   dl,0x4
c0016a3b:	74 03                	je     c0016a40 <sysCallOpen(regs*)+0x18a>
c0016a3d:	83 c8 04             	or     eax,0x4
c0016a40:	f6 c2 08             	test   dl,0x8
c0016a43:	74 03                	je     c0016a48 <sysCallOpen(regs*)+0x192>
c0016a45:	83 c8 0a             	or     eax,0xa
c0016a48:	83 e2 10             	and    edx,0x10
c0016a4b:	74 03                	je     c0016a50 <sysCallOpen(regs*)+0x19a>
c0016a4d:	83 c8 12             	or     eax,0x12
c0016a50:	83 ec 08             	sub    esp,0x8
c0016a53:	50                   	push   eax
c0016a54:	56                   	push   esi
c0016a55:	e8 d2 68 ff ff       	call   c000d32c <File::open(FileOpenMode)>
c0016a5a:	83 c4 10             	add    esp,0x10
c0016a5d:	85 c0                	test   eax,eax
c0016a5f:	75 1c                	jne    c0016a7d <sysCallOpen(regs*)+0x1c7>
c0016a61:	83 ec 0c             	sub    esp,0xc
c0016a64:	56                   	push   esi
c0016a65:	e8 24 4b ff ff       	call   c000b58e <UnixFile::getFileDescriptor()>
c0016a6a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016a6d:	83 c4 10             	add    esp,0x10
c0016a70:	89 02                	mov    DWORD PTR [edx],eax
c0016a72:	c1 f8 1f             	sar    eax,0x1f
c0016a75:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016a78:	e9 c1 fe ff ff       	jmp    c001693e <sysCallOpen(regs*)+0x88>
c0016a7d:	81 c4 04 01 00 00    	add    esp,0x104
c0016a83:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016a88:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016a8d:	5b                   	pop    ebx
c0016a8e:	5e                   	pop    esi
c0016a8f:	c3                   	ret    
c0016a90:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016a93:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016a99:	e9 99 fe ff ff       	jmp    c0016937 <sysCallOpen(regs*)+0x81>

c0016a9e <Sys::loadSyscalls()>:
c0016a9e:	c7 05 40 8a 02 c0 0f 5d 01 c0 	mov    DWORD PTR ds:0xc0028a40,0xc0015d0f
c0016aa8:	c7 05 44 8a 02 c0 04 59 01 c0 	mov    DWORD PTR ds:0xc0028a44,0xc0015904
c0016ab2:	c7 05 48 8a 02 c0 f5 5a 01 c0 	mov    DWORD PTR ds:0xc0028a48,0xc0015af5
c0016abc:	c7 05 4c 8a 02 c0 45 5c 01 c0 	mov    DWORD PTR ds:0xc0028a4c,0xc0015c45
c0016ac6:	c7 05 50 8a 02 c0 8d 5a 01 c0 	mov    DWORD PTR ds:0xc0028a50,0xc0015a8d
c0016ad0:	c7 05 54 8a 02 c0 3b 59 01 c0 	mov    DWORD PTR ds:0xc0028a54,0xc001593b
c0016ada:	c7 05 58 8a 02 c0 1c 59 01 c0 	mov    DWORD PTR ds:0xc0028a58,0xc001591c
c0016ae4:	c7 05 5c 8a 02 c0 4a 5b 01 c0 	mov    DWORD PTR ds:0xc0028a5c,0xc0015b4a
c0016aee:	c7 05 64 8a 02 c0 d2 61 01 c0 	mov    DWORD PTR ds:0xc0028a64,0xc00161d2
c0016af8:	c7 05 60 8a 02 c0 b6 68 01 c0 	mov    DWORD PTR ds:0xc0028a60,0xc00168b6
c0016b02:	c7 05 68 8a 02 c0 32 62 01 c0 	mov    DWORD PTR ds:0xc0028a68,0xc0016232
c0016b0c:	c7 05 6c 8a 02 c0 15 5f 01 c0 	mov    DWORD PTR ds:0xc0028a6c,0xc0015f15
c0016b16:	c7 05 70 8a 02 c0 47 5d 01 c0 	mov    DWORD PTR ds:0xc0028a70,0xc0015d47
c0016b20:	c7 05 74 8a 02 c0 4c 5d 01 c0 	mov    DWORD PTR ds:0xc0028a74,0xc0015d4c
c0016b2a:	c7 05 78 8a 02 c0 fb 62 01 c0 	mov    DWORD PTR ds:0xc0028a78,0xc00162fb
c0016b34:	c7 05 7c 8a 02 c0 a7 62 01 c0 	mov    DWORD PTR ds:0xc0028a7c,0xc00162a7
c0016b3e:	c7 05 80 8a 02 c0 ee 5f 01 c0 	mov    DWORD PTR ds:0xc0028a80,0xc0015fee
c0016b48:	c7 05 84 8a 02 c0 45 60 01 c0 	mov    DWORD PTR ds:0xc0028a84,0xc0016045
c0016b52:	c7 05 88 8a 02 c0 b1 60 01 c0 	mov    DWORD PTR ds:0xc0028a88,0xc00160b1
c0016b5c:	c7 05 8c 8a 02 c0 51 5d 01 c0 	mov    DWORD PTR ds:0xc0028a8c,0xc0015d51
c0016b66:	c7 05 90 8a 02 c0 6b 63 01 c0 	mov    DWORD PTR ds:0xc0028a90,0xc001636b
c0016b70:	c7 05 94 8a 02 c0 85 63 01 c0 	mov    DWORD PTR ds:0xc0028a94,0xc0016385
c0016b7a:	c7 05 98 8a 02 c0 85 63 01 c0 	mov    DWORD PTR ds:0xc0028a98,0xc0016385
c0016b84:	c7 05 9c 8a 02 c0 ba 63 01 c0 	mov    DWORD PTR ds:0xc0028a9c,0xc00163ba
c0016b8e:	c7 05 a0 8a 02 c0 1e 64 01 c0 	mov    DWORD PTR ds:0xc0028aa0,0xc001641e
c0016b98:	c7 05 a4 8a 02 c0 5b 5d 01 c0 	mov    DWORD PTR ds:0xc0028aa4,0xc0015d5b
c0016ba2:	c7 05 a8 8a 02 c0 82 64 01 c0 	mov    DWORD PTR ds:0xc0028aa8,0xc0016482
c0016bac:	c7 05 ac 8a 02 c0 d2 5e 01 c0 	mov    DWORD PTR ds:0xc0028aac,0xc0015ed2
c0016bb6:	c7 05 b0 8a 02 c0 ce 64 01 c0 	mov    DWORD PTR ds:0xc0028ab0,0xc00164ce
c0016bc0:	c7 05 b4 8a 02 c0 94 5f 01 c0 	mov    DWORD PTR ds:0xc0028ab4,0xc0015f94
c0016bca:	c7 05 b8 8a 02 c0 51 65 01 c0 	mov    DWORD PTR ds:0xc0028ab8,0xc0016551
c0016bd4:	c7 05 bc 8a 02 c0 23 61 01 c0 	mov    DWORD PTR ds:0xc0028abc,0xc0016123
c0016bde:	c7 05 c0 8a 02 c0 7a 65 01 c0 	mov    DWORD PTR ds:0xc0028ac0,0xc001657a
c0016be8:	c7 05 c4 8a 02 c0 e2 65 01 c0 	mov    DWORD PTR ds:0xc0028ac4,0xc00165e2
c0016bf2:	c7 05 c8 8a 02 c0 8f 66 01 c0 	mov    DWORD PTR ds:0xc0028ac8,0xc001668f
c0016bfc:	c7 05 cc 8a 02 c0 6b 5d 01 c0 	mov    DWORD PTR ds:0xc0028acc,0xc0015d6b
c0016c06:	c7 05 d0 8a 02 c0 d5 5d 01 c0 	mov    DWORD PTR ds:0xc0028ad0,0xc0015dd5
c0016c10:	c7 05 d4 8a 02 c0 1f 5e 01 c0 	mov    DWORD PTR ds:0xc0028ad4,0xc0015e1f
c0016c1a:	c7 05 d8 8a 02 c0 a3 67 01 c0 	mov    DWORD PTR ds:0xc0028ad8,0xc00167a3
c0016c24:	c7 05 dc 8a 02 c0 a0 63 01 c0 	mov    DWORD PTR ds:0xc0028adc,0xc00163a0
c0016c2e:	c7 05 e0 8a 02 c0 74 5e 01 c0 	mov    DWORD PTR ds:0xc0028ae0,0xc0015e74
c0016c38:	c7 05 e4 8a 02 c0 15 68 01 c0 	mov    DWORD PTR ds:0xc0028ae4,0xc0016815
c0016c42:	c7 05 e8 8a 02 c0 5a 68 01 c0 	mov    DWORD PTR ds:0xc0028ae8,0xc001685a
c0016c4c:	c7 05 ec 8a 02 c0 e5 59 01 c0 	mov    DWORD PTR ds:0xc0028aec,0xc00159e5
c0016c56:	c7 05 f0 8a 02 c0 66 5b 01 c0 	mov    DWORD PTR ds:0xc0028af0,0xc0015b66
c0016c60:	c7 05 f4 8a 02 c0 fb 5b 01 c0 	mov    DWORD PTR ds:0xc0028af4,0xc0015bfb
c0016c6a:	c7 05 f8 8a 02 c0 ce 58 01 c0 	mov    DWORD PTR ds:0xc0028af8,0xc00158ce
c0016c74:	c7 05 fc 8a 02 c0 ad 5c 01 c0 	mov    DWORD PTR ds:0xc0028afc,0xc0015cad
c0016c7e:	c7 05 00 8b 02 c0 47 59 01 c0 	mov    DWORD PTR ds:0xc0028b00,0xc0015947
c0016c88:	c7 05 04 8b 02 c0 61 59 01 c0 	mov    DWORD PTR ds:0xc0028b04,0xc0015961
c0016c92:	c3                   	ret    

c0016c93 <Sys::systemCall(regs*, void*)>:
c0016c93:	53                   	push   ebx
c0016c94:	83 ec 08             	sub    esp,0x8
c0016c97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016c9b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016c9e:	83 f8 7f             	cmp    eax,0x7f
c0016ca1:	77 16                	ja     c0016cb9 <Sys::systemCall(regs*, void*)+0x26>
c0016ca3:	8b 14 85 40 8a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd75c0]
c0016caa:	85 d2                	test   edx,edx
c0016cac:	74 0b                	je     c0016cb9 <Sys::systemCall(regs*, void*)+0x26>
c0016cae:	83 ec 0c             	sub    esp,0xc
c0016cb1:	53                   	push   ebx
c0016cb2:	ff d2                	call   edx
c0016cb4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016cb7:	eb 0d                	jmp    c0016cc6 <Sys::systemCall(regs*, void*)+0x33>
c0016cb9:	52                   	push   edx
c0016cba:	52                   	push   edx
c0016cbb:	50                   	push   eax
c0016cbc:	68 0d 5d 02 c0       	push   0xc0025d0d
c0016cc1:	e8 39 60 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0016cc6:	83 c4 10             	add    esp,0x10
c0016cc9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016cce:	31 d2                	xor    edx,edx
c0016cd0:	83 c4 08             	add    esp,0x8
c0016cd3:	5b                   	pop    ebx
c0016cd4:	c3                   	ret    

c0016cd5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016cd5:	55                   	push   ebp
c0016cd6:	57                   	push   edi
c0016cd7:	56                   	push   esi
c0016cd8:	53                   	push   ebx
c0016cd9:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016cdf:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016ce6:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0016ced:	85 c0                	test   eax,eax
c0016cef:	0f 95 c1             	setne  cl
c0016cf2:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0016cfa:	0f 94 c2             	sete   dl
c0016cfd:	84 d1                	test   cl,dl
c0016cff:	74 23                	je     c0016d24 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016d01:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0016d07:	74 1b                	je     c0016d24 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016d09:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016d0f:	89 da                	mov    edx,ebx
c0016d11:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0016d17:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0016d1d:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0016d24:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0016d2b:	05 ff 0f 00 00       	add    eax,0xfff
c0016d30:	83 ec 0c             	sub    esp,0xc
c0016d33:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016d37:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0016d3d:	c1 e8 0c             	shr    eax,0xc
c0016d40:	89 fe                	mov    esi,edi
c0016d42:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d46:	c1 ee 0c             	shr    esi,0xc
c0016d49:	6a 01                	push   0x1
c0016d4b:	e8 89 4c ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c0016d50:	89 c5                	mov    ebp,eax
c0016d52:	58                   	pop    eax
c0016d53:	5a                   	pop    edx
c0016d54:	56                   	push   esi
c0016d55:	68 21 5d 02 c0       	push   0xc0025d21
c0016d5a:	e8 a0 5f ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0016d5f:	59                   	pop    ecx
c0016d60:	58                   	pop    eax
c0016d61:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016d65:	68 33 5d 02 c0       	push   0xc0025d33
c0016d6a:	e8 90 5f ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0016d6f:	83 c4 10             	add    esp,0x10
c0016d72:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0016d78:	0f 86 31 01 00 00    	jbe    c0016eaf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0016d7e:	c1 e6 0c             	shl    esi,0xc
c0016d81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016d84:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0016d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d8b:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0016d92:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016d95:	01 df                	add    edi,ebx
c0016d97:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0016d9a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016d9e:	0f 84 08 01 00 00    	je     c0016eac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0016da4:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0016daa:	76 05                	jbe    c0016db1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016dac:	bf 00 10 00 00       	mov    edi,0x1000
c0016db1:	83 ec 0c             	sub    esp,0xc
c0016db4:	31 d2                	xor    edx,edx
c0016db6:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016dbd:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016dbf:	8d 44 24 28          	lea    eax,[esp+0x28]
c0016dc3:	50                   	push   eax
c0016dc4:	8d 74 24 30          	lea    esi,[esp+0x30]
c0016dc8:	56                   	push   esi
c0016dc9:	52                   	push   edx
c0016dca:	57                   	push   edi
c0016dcb:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0016dd2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016dd5:	83 c4 20             	add    esp,0x20
c0016dd8:	85 c0                	test   eax,eax
c0016dda:	74 0a                	je     c0016de6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016ddc:	53                   	push   ebx
c0016ddd:	53                   	push   ebx
c0016dde:	50                   	push   eax
c0016ddf:	68 45 5d 02 c0       	push   0xc0025d45
c0016de4:	eb 0f                	jmp    c0016df5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0016de6:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016dea:	74 20                	je     c0016e0c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0016dec:	51                   	push   ecx
c0016ded:	51                   	push   ecx
c0016dee:	6a 00                	push   0x0
c0016df0:	68 70 5d 02 c0       	push   0xc0025d70
c0016df5:	e8 05 5f ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0016dfa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016dfd:	e8 07 4f ff ff       	call   c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c0016e02:	83 c4 10             	add    esp,0x10
c0016e05:	31 c0                	xor    eax,eax
c0016e07:	e9 68 01 00 00       	jmp    c0016f74 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0016e0c:	fa                   	cli    
c0016e0d:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c0016e13:	e8 ae 32 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c0016e18:	6a 07                	push   0x7
c0016e1a:	89 c7                	mov    edi,eax
c0016e1c:	55                   	push   ebp
c0016e1d:	50                   	push   eax
c0016e1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e23:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016e26:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016e2c:	e8 4f 52 ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016e31:	83 c4 0c             	add    esp,0xc
c0016e34:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016e3b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016e41:	6a 00                	push   0x0
c0016e43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e48:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016e4b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016e51:	e8 84 50 ff ff       	call   c000beda <VAS::mapOtherVASIn(bool, VAS*)>
c0016e56:	58                   	pop    eax
c0016e57:	5a                   	pop    edx
c0016e58:	68 07 0c 00 00       	push   0xc07
c0016e5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016e61:	57                   	push   edi
c0016e62:	89 ef                	mov    edi,ebp
c0016e64:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016e6b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016e71:	6a 00                	push   0x0
c0016e73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e78:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016e7b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016e81:	e8 b6 55 ff ff       	call   c000c43c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016e86:	b9 00 10 00 00       	mov    ecx,0x1000
c0016e8b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e8d:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0016e92:	83 c4 20             	add    esp,0x20
c0016e95:	48                   	dec    eax
c0016e96:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0016e9b:	85 c0                	test   eax,eax
c0016e9d:	75 01                	jne    c0016ea0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0016e9f:	fb                   	sti    
c0016ea0:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0016ea7:	e9 df fe ff ff       	jmp    c0016d8b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016eac:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0016eaf:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0016eb7:	0f 86 a9 00 00 00    	jbe    c0016f66 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016ebd:	fa                   	cli    
c0016ebe:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c0016ec4:	51                   	push   ecx
c0016ec5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016ecc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016ed2:	6a 00                	push   0x0
c0016ed4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ed9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016edc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016ee2:	e8 f3 4f ff ff       	call   c000beda <VAS::mapOtherVASIn(bool, VAS*)>
c0016ee7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016eeb:	c1 e6 0c             	shl    esi,0xc
c0016eee:	01 de                	add    esi,ebx
c0016ef0:	83 c4 10             	add    esp,0x10
c0016ef3:	39 de                	cmp    esi,ebx
c0016ef5:	74 61                	je     c0016f58 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0016ef7:	e8 ca 31 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c0016efc:	6a 07                	push   0x7
c0016efe:	89 c7                	mov    edi,eax
c0016f00:	55                   	push   ebp
c0016f01:	50                   	push   eax
c0016f02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f07:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016f0a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f10:	e8 6b 51 ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016f15:	58                   	pop    eax
c0016f16:	5a                   	pop    edx
c0016f17:	68 07 0c 00 00       	push   0xc07
c0016f1c:	53                   	push   ebx
c0016f1d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016f23:	57                   	push   edi
c0016f24:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016f2b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f31:	6a 00                	push   0x0
c0016f33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f38:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016f3b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f41:	e8 f6 54 ff ff       	call   c000c43c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016f46:	83 c4 1c             	add    esp,0x1c
c0016f49:	68 00 10 00 00       	push   0x1000
c0016f4e:	6a 00                	push   0x0
c0016f50:	55                   	push   ebp
c0016f51:	e8 2e 97 fe ff       	call   c0000684 <memset>
c0016f56:	eb 98                	jmp    c0016ef0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0016f58:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0016f5d:	48                   	dec    eax
c0016f5e:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0016f63:	75 01                	jne    c0016f66 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016f65:	fb                   	sti    
c0016f66:	83 ec 0c             	sub    esp,0xc
c0016f69:	55                   	push   ebp
c0016f6a:	e8 9a 4d ff ff       	call   c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c0016f6f:	83 c4 10             	add    esp,0x10
c0016f72:	b0 01                	mov    al,0x1
c0016f74:	81 c4 2c 10 00 00    	add    esp,0x102c
c0016f7a:	5b                   	pop    ebx
c0016f7b:	5e                   	pop    esi
c0016f7c:	5f                   	pop    edi
c0016f7d:	5d                   	pop    ebp
c0016f7e:	c3                   	ret    

c0016f7f <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016f7f:	55                   	push   ebp
c0016f80:	57                   	push   edi
c0016f81:	56                   	push   esi
c0016f82:	53                   	push   ebx
c0016f83:	83 ec 48             	sub    esp,0x48
c0016f86:	68 14 01 00 00       	push   0x114
c0016f8b:	e8 7f 2a ff ff       	call   c0009a0f <malloc>
c0016f90:	83 c4 0c             	add    esp,0xc
c0016f93:	89 c6                	mov    esi,eax
c0016f95:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016f99:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016f9d:	50                   	push   eax
c0016f9e:	e8 c7 62 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0016fa3:	58                   	pop    eax
c0016fa4:	5a                   	pop    edx
c0016fa5:	6a 01                	push   0x1
c0016fa7:	56                   	push   esi
c0016fa8:	e8 7f 63 ff ff       	call   c000d32c <File::open(FileOpenMode)>
c0016fad:	83 c4 10             	add    esp,0x10
c0016fb0:	85 c0                	test   eax,eax
c0016fb2:	0f 85 47 01 00 00    	jne    c00170ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016fb8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016fc0:	83 ec 0c             	sub    esp,0xc
c0016fc3:	6a 34                	push   0x34
c0016fc5:	e8 45 2a ff ff       	call   c0009a0f <malloc>
c0016fca:	89 c3                	mov    ebx,eax
c0016fcc:	58                   	pop    eax
c0016fcd:	8b 06                	mov    eax,DWORD PTR [esi]
c0016fcf:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0016fd3:	57                   	push   edi
c0016fd4:	53                   	push   ebx
c0016fd5:	6a 00                	push   0x0
c0016fd7:	6a 34                	push   0x34
c0016fd9:	56                   	push   esi
c0016fda:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016fdd:	83 c4 20             	add    esp,0x20
c0016fe0:	85 c0                	test   eax,eax
c0016fe2:	0f 85 17 01 00 00    	jne    c00170ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016fe8:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0016fee:	0f 85 0b 01 00 00    	jne    c00170ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016ff4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016ff7:	85 c0                	test   eax,eax
c0016ff9:	0f 84 00 01 00 00    	je     c00170ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016fff:	31 d2                	xor    edx,edx
c0017001:	55                   	push   ebp
c0017002:	52                   	push   edx
c0017003:	50                   	push   eax
c0017004:	56                   	push   esi
c0017005:	e8 e0 63 ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c001700a:	83 c4 10             	add    esp,0x10
c001700d:	85 c0                	test   eax,eax
c001700f:	0f 85 ea 00 00 00    	jne    c00170ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017015:	83 ec 0c             	sub    esp,0xc
c0017018:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001701b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001701f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017023:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0017027:	0f af c2             	imul   eax,edx
c001702a:	50                   	push   eax
c001702b:	e8 df 29 ff ff       	call   c0009a0f <malloc>
c0017030:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017032:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017036:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017039:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001703d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0017041:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0017045:	0f af c2             	imul   eax,edx
c0017048:	99                   	cdq    
c0017049:	52                   	push   edx
c001704a:	50                   	push   eax
c001704b:	56                   	push   esi
c001704c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001704f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0017052:	83 c4 20             	add    esp,0x20
c0017055:	85 c0                	test   eax,eax
c0017057:	0f 84 a2 00 00 00    	je     c00170ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001705d:	31 d2                	xor    edx,edx
c001705f:	51                   	push   ecx
c0017060:	52                   	push   edx
c0017061:	50                   	push   eax
c0017062:	56                   	push   esi
c0017063:	e8 82 63 ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c0017068:	83 c4 10             	add    esp,0x10
c001706b:	85 c0                	test   eax,eax
c001706d:	0f 85 8c 00 00 00    	jne    c00170ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017073:	83 ec 0c             	sub    esp,0xc
c0017076:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001707a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001707e:	31 ed                	xor    ebp,ebp
c0017080:	0f af c2             	imul   eax,edx
c0017083:	50                   	push   eax
c0017084:	e8 86 29 ff ff       	call   c0009a0f <malloc>
c0017089:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001708b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001708f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017096:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001709a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001709e:	0f af c2             	imul   eax,edx
c00170a1:	99                   	cdq    
c00170a2:	52                   	push   edx
c00170a3:	50                   	push   eax
c00170a4:	56                   	push   esi
c00170a5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00170a8:	83 c4 20             	add    esp,0x20
c00170ab:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00170b3:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00170b7:	0f 86 80 00 00 00    	jbe    c001713d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00170bd:	0f b7 fd             	movzx  edi,bp
c00170c0:	c1 e7 05             	shl    edi,0x5
c00170c3:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00170c7:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00170ca:	75 6b                	jne    c0017137 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00170cc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00170cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00170d3:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00170d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00170da:	52                   	push   edx
c00170db:	31 d2                	xor    edx,edx
c00170dd:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00170e0:	52                   	push   edx
c00170e1:	50                   	push   eax
c00170e2:	56                   	push   esi
c00170e3:	e8 02 63 ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c00170e8:	83 c4 10             	add    esp,0x10
c00170eb:	85 c0                	test   eax,eax
c00170ed:	74 17                	je     c0017106 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00170ef:	83 ec 0c             	sub    esp,0xc
c00170f2:	68 9c 5d 02 c0       	push   0xc0025d9c
c00170f7:	e8 03 5c ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00170fc:	83 c4 10             	add    esp,0x10
c00170ff:	31 c0                	xor    eax,eax
c0017101:	e9 87 00 00 00       	jmp    c001718d <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0017106:	83 ec 0c             	sub    esp,0xc
c0017109:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001710c:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001710f:	50                   	push   eax
c0017110:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017114:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017118:	56                   	push   esi
c0017119:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001711d:	e8 b3 fb ff ff       	call   c0016cd5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0017122:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017126:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001712a:	83 c4 20             	add    esp,0x20
c001712d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0017131:	73 04                	jae    c0017137 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017133:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017137:	45                   	inc    ebp
c0017138:	e9 76 ff ff ff       	jmp    c00170b3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001713d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0017141:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017145:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017149:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001714f:	83 ec 0c             	sub    esp,0xc
c0017152:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0017158:	25 00 f0 ff ff       	and    eax,0xfffff000
c001715d:	05 00 10 00 00       	add    eax,0x1000
c0017162:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017165:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017169:	e8 b1 28 ff ff       	call   c0009a1f <free>
c001716e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017171:	e8 a9 28 ff ff       	call   c0009a1f <free>
c0017176:	58                   	pop    eax
c0017177:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001717b:	e8 9f 28 ff ff       	call   c0009a1f <free>
c0017180:	89 34 24             	mov    DWORD PTR [esp],esi
c0017183:	e8 02 62 ff ff       	call   c000d38a <File::close()>
c0017188:	83 c4 10             	add    esp,0x10
c001718b:	b0 01                	mov    al,0x1
c001718d:	83 c4 3c             	add    esp,0x3c
c0017190:	5b                   	pop    ebx
c0017191:	5e                   	pop    esi
c0017192:	5f                   	pop    edi
c0017193:	5d                   	pop    ebp
c0017194:	c3                   	ret    

c0017195 <Thr::runtimeReferenceHelper()>:
c0017195:	83 ec 18             	sub    esp,0x18
c0017198:	68 a4 5d 02 c0       	push   0xc0025da4
c001719d:	e8 5d 5b ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00171a2:	fa                   	cli    
c00171a3:	83 c4 10             	add    esp,0x10
c00171a6:	eb fe                	jmp    c00171a6 <Thr::runtimeReferenceHelper()+0x11>

c00171a8 <Thr::getAddressOfKernelSymbol(char const*)>:
c00171a8:	57                   	push   edi
c00171a9:	56                   	push   esi
c00171aa:	53                   	push   ebx
c00171ab:	31 db                	xor    ebx,ebx
c00171ad:	39 1d e0 93 02 c0    	cmp    DWORD PTR ds:0xc00293e0,ebx
c00171b3:	7e 3c                	jle    c00171f1 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00171b5:	8b 34 9d 60 93 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd6ca0]
c00171bc:	31 ff                	xor    edi,edi
c00171be:	39 3c 9d 60 92 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6da0],edi
c00171c5:	7e 27                	jle    c00171ee <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00171c7:	50                   	push   eax
c00171c8:	50                   	push   eax
c00171c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171cd:	8b 06                	mov    eax,DWORD PTR [esi]
c00171cf:	03 04 9d e0 92 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6d20]
c00171d6:	50                   	push   eax
c00171d7:	e8 f0 95 fe ff       	call   c00007cc <strcmp>
c00171dc:	83 c4 10             	add    esp,0x10
c00171df:	85 c0                	test   eax,eax
c00171e1:	75 05                	jne    c00171e8 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00171e3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00171e6:	eb 0b                	jmp    c00171f3 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00171e8:	83 c6 10             	add    esi,0x10
c00171eb:	47                   	inc    edi
c00171ec:	eb d0                	jmp    c00171be <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00171ee:	43                   	inc    ebx
c00171ef:	eb bc                	jmp    c00171ad <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00171f1:	31 c0                	xor    eax,eax
c00171f3:	5b                   	pop    ebx
c00171f4:	5e                   	pop    esi
c00171f5:	5f                   	pop    edi
c00171f6:	c3                   	ret    

c00171f7 <Thr::loadKernelSymbolTable(char const*)>:
c00171f7:	55                   	push   ebp
c00171f8:	57                   	push   edi
c00171f9:	56                   	push   esi
c00171fa:	53                   	push   ebx
c00171fb:	83 ec 68             	sub    esp,0x68
c00171fe:	8b 35 30 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029430
c0017204:	68 14 01 00 00       	push   0x114
c0017209:	e8 01 28 ff ff       	call   c0009a0f <malloc>
c001720e:	83 c4 0c             	add    esp,0xc
c0017211:	89 c3                	mov    ebx,eax
c0017213:	56                   	push   esi
c0017214:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0017218:	50                   	push   eax
c0017219:	e8 4c 60 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c001721e:	5e                   	pop    esi
c001721f:	5f                   	pop    edi
c0017220:	6a 01                	push   0x1
c0017222:	53                   	push   ebx
c0017223:	e8 04 61 ff ff       	call   c000d32c <File::open(FileOpenMode)>
c0017228:	83 c4 10             	add    esp,0x10
c001722b:	85 c0                	test   eax,eax
c001722d:	74 0a                	je     c0017239 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001722f:	83 ec 0c             	sub    esp,0xc
c0017232:	68 c6 5d 02 c0       	push   0xc0025dc6
c0017237:	eb 34                	jmp    c001726d <Thr::loadKernelSymbolTable(char const*)+0x76>
c0017239:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017241:	83 ec 0c             	sub    esp,0xc
c0017244:	6a 34                	push   0x34
c0017246:	e8 c4 27 ff ff       	call   c0009a0f <malloc>
c001724b:	59                   	pop    ecx
c001724c:	89 c7                	mov    edi,eax
c001724e:	8d 74 24 34          	lea    esi,[esp+0x34]
c0017252:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017254:	56                   	push   esi
c0017255:	57                   	push   edi
c0017256:	6a 00                	push   0x0
c0017258:	6a 34                	push   0x34
c001725a:	53                   	push   ebx
c001725b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001725e:	83 c4 20             	add    esp,0x20
c0017261:	85 c0                	test   eax,eax
c0017263:	74 17                	je     c001727c <Thr::loadKernelSymbolTable(char const*)+0x85>
c0017265:	83 ec 0c             	sub    esp,0xc
c0017268:	68 dd 5d 02 c0       	push   0xc0025ddd
c001726d:	e8 7d d6 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0017272:	83 c4 10             	add    esp,0x10
c0017275:	31 c0                	xor    eax,eax
c0017277:	e9 31 02 00 00       	jmp    c00174ad <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001727c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017282:	75 e1                	jne    c0017265 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017284:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017287:	85 c0                	test   eax,eax
c0017289:	74 da                	je     c0017265 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001728b:	52                   	push   edx
c001728c:	31 d2                	xor    edx,edx
c001728e:	52                   	push   edx
c001728f:	50                   	push   eax
c0017290:	53                   	push   ebx
c0017291:	e8 54 61 ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c0017296:	83 c4 10             	add    esp,0x10
c0017299:	85 c0                	test   eax,eax
c001729b:	75 c8                	jne    c0017265 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001729d:	83 ec 0c             	sub    esp,0xc
c00172a0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00172a4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00172a8:	31 ed                	xor    ebp,ebp
c00172aa:	0f af c2             	imul   eax,edx
c00172ad:	50                   	push   eax
c00172ae:	e8 5c 27 ff ff       	call   c0009a0f <malloc>
c00172b3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00172b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00172b9:	89 34 24             	mov    DWORD PTR [esp],esi
c00172bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172c0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00172c4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00172c8:	0f af c2             	imul   eax,edx
c00172cb:	99                   	cdq    
c00172cc:	52                   	push   edx
c00172cd:	50                   	push   eax
c00172ce:	53                   	push   ebx
c00172cf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00172d2:	83 c4 20             	add    esp,0x20
c00172d5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00172dd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00172e5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00172ed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00172f5:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00172f9:	0f 86 aa 00 00 00    	jbe    c00173a9 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00172ff:	0f b7 f5             	movzx  esi,bp
c0017302:	6b f6 28             	imul   esi,esi,0x28
c0017305:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017309:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001730c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017310:	50                   	push   eax
c0017311:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017315:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017319:	8b 16                	mov    edx,DWORD PTR [esi]
c001731b:	6b c0 28             	imul   eax,eax,0x28
c001731e:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017322:	89 d0                	mov    eax,edx
c0017324:	31 d2                	xor    edx,edx
c0017326:	52                   	push   edx
c0017327:	50                   	push   eax
c0017328:	53                   	push   ebx
c0017329:	e8 bc 60 ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c001732e:	83 c4 0c             	add    esp,0xc
c0017331:	6a 20                	push   0x20
c0017333:	6a 00                	push   0x0
c0017335:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017339:	52                   	push   edx
c001733a:	e8 45 93 fe ff       	call   c0000684 <memset>
c001733f:	58                   	pop    eax
c0017340:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017342:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0017346:	51                   	push   ecx
c0017347:	8d 54 24 40          	lea    edx,[esp+0x40]
c001734b:	52                   	push   edx
c001734c:	6a 00                	push   0x0
c001734e:	6a 1f                	push   0x1f
c0017350:	53                   	push   ebx
c0017351:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017354:	83 c4 18             	add    esp,0x18
c0017357:	68 f4 5d 02 c0       	push   0xc0025df4
c001735c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017360:	52                   	push   edx
c0017361:	e8 66 94 fe ff       	call   c00007cc <strcmp>
c0017366:	83 c4 10             	add    esp,0x10
c0017369:	85 c0                	test   eax,eax
c001736b:	75 0f                	jne    c001737c <Thr::loadKernelSymbolTable(char const*)+0x185>
c001736d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017370:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017374:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017378:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001737c:	50                   	push   eax
c001737d:	50                   	push   eax
c001737e:	68 fc 5d 02 c0       	push   0xc0025dfc
c0017383:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017387:	50                   	push   eax
c0017388:	e8 3f 94 fe ff       	call   c00007cc <strcmp>
c001738d:	83 c4 10             	add    esp,0x10
c0017390:	85 c0                	test   eax,eax
c0017392:	75 0f                	jne    c00173a3 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0017394:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017397:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001739b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001739f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00173a3:	45                   	inc    ebp
c00173a4:	e9 4c ff ff ff       	jmp    c00172f5 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00173a9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00173ae:	75 10                	jne    c00173c0 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00173b0:	83 ec 0c             	sub    esp,0xc
c00173b3:	68 04 5e 02 c0       	push   0xc0025e04
c00173b8:	e8 32 d5 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c00173bd:	83 c4 10             	add    esp,0x10
c00173c0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00173c5:	75 10                	jne    c00173d7 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00173c7:	83 ec 0c             	sub    esp,0xc
c00173ca:	68 04 5e 02 c0       	push   0xc0025e04
c00173cf:	e8 1b d5 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c00173d4:	83 c4 10             	add    esp,0x10
c00173d7:	31 d2                	xor    edx,edx
c00173d9:	50                   	push   eax
c00173da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173de:	52                   	push   edx
c00173df:	50                   	push   eax
c00173e0:	53                   	push   ebx
c00173e1:	e8 04 60 ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c00173e6:	5a                   	pop    edx
c00173e7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00173eb:	e8 1f 26 ff ff       	call   c0009a0f <malloc>
c00173f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00173f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00173f8:	31 c9                	xor    ecx,ecx
c00173fa:	5e                   	pop    esi
c00173fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00173fd:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017401:	55                   	push   ebp
c0017402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017406:	51                   	push   ecx
c0017407:	52                   	push   edx
c0017408:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001740c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0017410:	53                   	push   ebx
c0017411:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017414:	83 c4 14             	add    esp,0x14
c0017417:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001741b:	e8 ef 25 ff ff       	call   c0009a0f <malloc>
c0017420:	89 c6                	mov    esi,eax
c0017422:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017424:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017427:	56                   	push   esi
c0017428:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001742c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017430:	51                   	push   ecx
c0017431:	52                   	push   edx
c0017432:	53                   	push   ebx
c0017433:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017436:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001743a:	8b 15 e0 93 02 c0    	mov    edx,DWORD PTR ds:0xc00293e0
c0017440:	83 c4 1c             	add    esp,0x1c
c0017443:	c1 e8 04             	shr    eax,0x4
c0017446:	89 04 95 60 92 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6da0],eax
c001744d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017451:	31 d2                	xor    edx,edx
c0017453:	52                   	push   edx
c0017454:	50                   	push   eax
c0017455:	53                   	push   ebx
c0017456:	e8 8f 5f ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c001745b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001745d:	31 d2                	xor    edx,edx
c001745f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017462:	56                   	push   esi
c0017463:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017467:	52                   	push   edx
c0017468:	50                   	push   eax
c0017469:	53                   	push   ebx
c001746a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001746d:	83 c4 14             	add    esp,0x14
c0017470:	53                   	push   ebx
c0017471:	e8 14 5f ff ff       	call   c000d38a <File::close()>
c0017476:	5d                   	pop    ebp
c0017477:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001747b:	e8 9f 25 ff ff       	call   c0009a1f <free>
c0017480:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017483:	e8 97 25 ff ff       	call   c0009a1f <free>
c0017488:	a1 e0 93 02 c0       	mov    eax,ds:0xc00293e0
c001748d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017491:	8d 50 01             	lea    edx,[eax+0x1]
c0017494:	89 0c 85 60 93 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ca0],ecx
c001749b:	89 34 85 e0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d20],esi
c00174a2:	89 15 e0 93 02 c0    	mov    DWORD PTR ds:0xc00293e0,edx
c00174a8:	83 c4 10             	add    esp,0x10
c00174ab:	b0 01                	mov    al,0x1
c00174ad:	83 c4 5c             	add    esp,0x5c
c00174b0:	5b                   	pop    ebx
c00174b1:	5e                   	pop    esi
c00174b2:	5f                   	pop    edi
c00174b3:	5d                   	pop    ebp
c00174b4:	c3                   	ret    

c00174b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00174b5:	55                   	push   ebp
c00174b6:	57                   	push   edi
c00174b7:	56                   	push   esi
c00174b8:	53                   	push   ebx
c00174b9:	81 ec 68 03 00 00    	sub    esp,0x368
c00174bf:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00174c6:	8b 1d 30 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029430
c00174cc:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00174d0:	68 14 01 00 00       	push   0x114
c00174d5:	e8 35 25 ff ff       	call   c0009a0f <malloc>
c00174da:	83 c4 0c             	add    esp,0xc
c00174dd:	89 c5                	mov    ebp,eax
c00174df:	53                   	push   ebx
c00174e0:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00174e7:	50                   	push   eax
c00174e8:	e8 7d 5d ff ff       	call   c000d26a <File::File(char const*, Process*)>
c00174ed:	5e                   	pop    esi
c00174ee:	5f                   	pop    edi
c00174ef:	6a 01                	push   0x1
c00174f1:	55                   	push   ebp
c00174f2:	e8 35 5e ff ff       	call   c000d32c <File::open(FileOpenMode)>
c00174f7:	83 c4 10             	add    esp,0x10
c00174fa:	85 c0                	test   eax,eax
c00174fc:	0f 85 a7 06 00 00    	jne    c0017ba9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017502:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001750a:	83 ec 0c             	sub    esp,0xc
c001750d:	6a 34                	push   0x34
c001750f:	e8 fb 24 ff ff       	call   c0009a0f <malloc>
c0017514:	5b                   	pop    ebx
c0017515:	89 c7                	mov    edi,eax
c0017517:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001751b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001751e:	53                   	push   ebx
c001751f:	57                   	push   edi
c0017520:	6a 00                	push   0x0
c0017522:	6a 34                	push   0x34
c0017524:	55                   	push   ebp
c0017525:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017528:	83 c4 20             	add    esp,0x20
c001752b:	85 c0                	test   eax,eax
c001752d:	0f 85 76 06 00 00    	jne    c0017ba9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017533:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017539:	0f 85 6a 06 00 00    	jne    c0017ba9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001753f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017542:	85 c0                	test   eax,eax
c0017544:	0f 84 5f 06 00 00    	je     c0017ba9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001754a:	31 d2                	xor    edx,edx
c001754c:	51                   	push   ecx
c001754d:	52                   	push   edx
c001754e:	50                   	push   eax
c001754f:	55                   	push   ebp
c0017550:	e8 95 5e ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c0017555:	83 c4 10             	add    esp,0x10
c0017558:	85 c0                	test   eax,eax
c001755a:	0f 85 49 06 00 00    	jne    c0017ba9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017560:	83 ec 0c             	sub    esp,0xc
c0017563:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0017566:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001756a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001756e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017572:	0f af c2             	imul   eax,edx
c0017575:	50                   	push   eax
c0017576:	e8 94 24 ff ff       	call   c0009a0f <malloc>
c001757b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001757e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017582:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017585:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017589:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001758d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017591:	0f af c2             	imul   eax,edx
c0017594:	99                   	cdq    
c0017595:	52                   	push   edx
c0017596:	50                   	push   eax
c0017597:	55                   	push   ebp
c0017598:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001759b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001759e:	83 c4 20             	add    esp,0x20
c00175a1:	85 c0                	test   eax,eax
c00175a3:	0f 84 00 06 00 00    	je     c0017ba9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00175a9:	52                   	push   edx
c00175aa:	31 d2                	xor    edx,edx
c00175ac:	52                   	push   edx
c00175ad:	50                   	push   eax
c00175ae:	55                   	push   ebp
c00175af:	e8 36 5e ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c00175b4:	83 c4 10             	add    esp,0x10
c00175b7:	85 c0                	test   eax,eax
c00175b9:	0f 85 ea 05 00 00    	jne    c0017ba9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00175bf:	83 ec 0c             	sub    esp,0xc
c00175c2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00175c6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00175ca:	31 f6                	xor    esi,esi
c00175cc:	0f af c2             	imul   eax,edx
c00175cf:	50                   	push   eax
c00175d0:	e8 3a 24 ff ff       	call   c0009a0f <malloc>
c00175d5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00175d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00175dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00175df:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00175e3:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00175e7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00175eb:	0f af c2             	imul   eax,edx
c00175ee:	99                   	cdq    
c00175ef:	52                   	push   edx
c00175f0:	50                   	push   eax
c00175f1:	55                   	push   ebp
c00175f2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00175f5:	83 c4 20             	add    esp,0x20
c00175f8:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00175fc:	0f 86 8a 00 00 00    	jbe    c001768c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0017602:	0f b7 de             	movzx  ebx,si
c0017605:	c1 e3 05             	shl    ebx,0x5
c0017608:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001760c:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001760f:	75 75                	jne    c0017686 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0017611:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017614:	31 d2                	xor    edx,edx
c0017616:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001761a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001761d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017621:	50                   	push   eax
c0017622:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017625:	52                   	push   edx
c0017626:	50                   	push   eax
c0017627:	55                   	push   ebp
c0017628:	e8 bd 5d ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c001762d:	83 c4 10             	add    esp,0x10
c0017630:	85 c0                	test   eax,eax
c0017632:	0f 85 71 05 00 00    	jne    c0017ba9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017638:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001763f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017642:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0017646:	31 d2                	xor    edx,edx
c0017648:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001764c:	83 ec 0c             	sub    esp,0xc
c001764f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017653:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001765a:	50                   	push   eax
c001765b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001765f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017663:	52                   	push   edx
c0017664:	50                   	push   eax
c0017665:	55                   	push   ebp
c0017666:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017669:	83 c4 1c             	add    esp,0x1c
c001766c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001766f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017672:	50                   	push   eax
c0017673:	6a 00                	push   0x0
c0017675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017679:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001767d:	50                   	push   eax
c001767e:	e8 01 90 fe ff       	call   c0000684 <memset>
c0017683:	83 c4 10             	add    esp,0x10
c0017686:	46                   	inc    esi
c0017687:	e9 6c ff ff ff       	jmp    c00175f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001768c:	53                   	push   ebx
c001768d:	31 db                	xor    ebx,ebx
c001768f:	68 00 01 00 00       	push   0x100
c0017694:	6a 00                	push   0x0
c0017696:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001769a:	50                   	push   eax
c001769b:	e8 e4 8f fe ff       	call   c0000684 <memset>
c00176a0:	83 c4 0c             	add    esp,0xc
c00176a3:	68 00 01 00 00       	push   0x100
c00176a8:	6a 00                	push   0x0
c00176aa:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00176b1:	50                   	push   eax
c00176b2:	e8 cd 8f fe ff       	call   c0000684 <memset>
c00176b7:	83 c4 10             	add    esp,0x10
c00176ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00176c2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00176ca:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00176d2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00176da:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00176e2:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00176e6:	0f 86 30 01 00 00    	jbe    c001781c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00176ec:	0f b7 f3             	movzx  esi,bx
c00176ef:	6b f6 28             	imul   esi,esi,0x28
c00176f2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00176f6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00176f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176fd:	52                   	push   edx
c00176fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017702:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0017706:	8b 06                	mov    eax,DWORD PTR [esi]
c0017708:	6b d2 28             	imul   edx,edx,0x28
c001770b:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001770f:	31 d2                	xor    edx,edx
c0017711:	52                   	push   edx
c0017712:	50                   	push   eax
c0017713:	55                   	push   ebp
c0017714:	e8 d1 5c ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c0017719:	83 c4 0c             	add    esp,0xc
c001771c:	6a 20                	push   0x20
c001771e:	6a 00                	push   0x0
c0017720:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017727:	51                   	push   ecx
c0017728:	e8 57 8f fe ff       	call   c0000684 <memset>
c001772d:	59                   	pop    ecx
c001772e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017731:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017735:	52                   	push   edx
c0017736:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001773d:	51                   	push   ecx
c001773e:	6a 00                	push   0x0
c0017740:	6a 1f                	push   0x1f
c0017742:	55                   	push   ebp
c0017743:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017746:	83 c4 1c             	add    esp,0x1c
c0017749:	6a 09                	push   0x9
c001774b:	68 1e 5e 02 c0       	push   0xc0025e1e
c0017750:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017757:	51                   	push   ecx
c0017758:	e8 23 8e fe ff       	call   c0000580 <memcmp>
c001775d:	83 c4 10             	add    esp,0x10
c0017760:	85 c0                	test   eax,eax
c0017762:	75 21                	jne    c0017785 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0017764:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017768:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001776c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017770:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017774:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017777:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001777e:	89 d0                	mov    eax,edx
c0017780:	40                   	inc    eax
c0017781:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017785:	50                   	push   eax
c0017786:	6a 09                	push   0x9
c0017788:	68 28 5e 02 c0       	push   0xc0025e28
c001778d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017794:	50                   	push   eax
c0017795:	e8 e6 8d fe ff       	call   c0000580 <memcmp>
c001779a:	83 c4 10             	add    esp,0x10
c001779d:	85 c0                	test   eax,eax
c001779f:	75 21                	jne    c00177c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00177a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00177a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00177a9:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00177ad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00177b1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00177b4:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00177bb:	89 d0                	mov    eax,edx
c00177bd:	40                   	inc    eax
c00177be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00177c2:	50                   	push   eax
c00177c3:	50                   	push   eax
c00177c4:	68 f4 5d 02 c0       	push   0xc0025df4
c00177c9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00177d0:	50                   	push   eax
c00177d1:	e8 f6 8f fe ff       	call   c00007cc <strcmp>
c00177d6:	83 c4 10             	add    esp,0x10
c00177d9:	85 c0                	test   eax,eax
c00177db:	75 0f                	jne    c00177ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00177dd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00177e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00177e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00177e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00177ec:	50                   	push   eax
c00177ed:	50                   	push   eax
c00177ee:	68 fc 5d 02 c0       	push   0xc0025dfc
c00177f3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00177fa:	50                   	push   eax
c00177fb:	e8 cc 8f fe ff       	call   c00007cc <strcmp>
c0017800:	83 c4 10             	add    esp,0x10
c0017803:	85 c0                	test   eax,eax
c0017805:	75 0f                	jne    c0017816 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0017807:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001780a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001780e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017812:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017816:	43                   	inc    ebx
c0017817:	e9 c6 fe ff ff       	jmp    c00176e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001781c:	31 d2                	xor    edx,edx
c001781e:	50                   	push   eax
c001781f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017823:	52                   	push   edx
c0017824:	50                   	push   eax
c0017825:	55                   	push   ebp
c0017826:	e8 bf 5b ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c001782b:	58                   	pop    eax
c001782c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017830:	e8 da 21 ff ff       	call   c0009a0f <malloc>
c0017835:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017838:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001783c:	31 d2                	xor    edx,edx
c001783e:	58                   	pop    eax
c001783f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017843:	53                   	push   ebx
c0017844:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017848:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001784c:	52                   	push   edx
c001784d:	50                   	push   eax
c001784e:	55                   	push   ebp
c001784f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017852:	83 c4 14             	add    esp,0x14
c0017855:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017859:	e8 b1 21 ff ff       	call   c0009a0f <malloc>
c001785e:	31 d2                	xor    edx,edx
c0017860:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017864:	83 c4 0c             	add    esp,0xc
c0017867:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001786b:	52                   	push   edx
c001786c:	50                   	push   eax
c001786d:	55                   	push   ebp
c001786e:	e8 77 5b ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c0017873:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017876:	31 d2                	xor    edx,edx
c0017878:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001787b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001787f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017883:	52                   	push   edx
c0017884:	50                   	push   eax
c0017885:	55                   	push   ebp
c0017886:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017889:	83 c4 20             	add    esp,0x20
c001788c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017894:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017898:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001789c:	0f 84 0b 03 00 00    	je     c0017bad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00178a2:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00178a9:	31 d2                	xor    edx,edx
c00178ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00178af:	c1 e8 03             	shr    eax,0x3
c00178b2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00178b6:	51                   	push   ecx
c00178b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00178bb:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00178bf:	52                   	push   edx
c00178c0:	50                   	push   eax
c00178c1:	55                   	push   ebp
c00178c2:	e8 23 5b ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c00178c7:	5b                   	pop    ebx
c00178c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178cc:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00178d3:	e8 37 21 ff ff       	call   c0009a0f <malloc>
c00178d8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00178db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00178df:	31 d2                	xor    edx,edx
c00178e1:	5e                   	pop    esi
c00178e2:	8d 44 24 58          	lea    eax,[esp+0x58]
c00178e6:	50                   	push   eax
c00178e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178ef:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00178f6:	52                   	push   edx
c00178f7:	50                   	push   eax
c00178f8:	55                   	push   ebp
c00178f9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00178fc:	83 c4 20             	add    esp,0x20
c00178ff:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017907:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001790b:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001790f:	0f 8d 7c 02 00 00    	jge    c0017b91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0017915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017919:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001791d:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0017922:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0017925:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017929:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001792d:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0017931:	89 d8                	mov    eax,ebx
c0017933:	c1 e8 08             	shr    eax,0x8
c0017936:	89 c6                	mov    esi,eax
c0017938:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001793c:	c1 e6 04             	shl    esi,0x4
c001793f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0017943:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0017946:	85 d2                	test   edx,edx
c0017948:	0f 85 bf 00 00 00    	jne    c0017a0d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001794e:	83 ec 0c             	sub    esp,0xc
c0017951:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017955:	03 06                	add    eax,DWORD PTR [esi]
c0017957:	50                   	push   eax
c0017958:	e8 4b f8 ff ff       	call   c00171a8 <Thr::getAddressOfKernelSymbol(char const*)>
c001795d:	83 c4 10             	add    esp,0x10
c0017960:	89 c2                	mov    edx,eax
c0017962:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0017967:	85 c0                	test   eax,eax
c0017969:	0f 85 9e 00 00 00    	jne    c0017a0d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001796f:	83 ec 0c             	sub    esp,0xc
c0017972:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017976:	03 06                	add    eax,DWORD PTR [esi]
c0017978:	50                   	push   eax
c0017979:	e8 92 0f ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c001797e:	83 c4 10             	add    esp,0x10
c0017981:	89 c2                	mov    edx,eax
c0017983:	85 c0                	test   eax,eax
c0017985:	0f 85 82 00 00 00    	jne    c0017a0d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001798b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001798f:	50                   	push   eax
c0017990:	50                   	push   eax
c0017991:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017995:	03 06                	add    eax,DWORD PTR [esi]
c0017997:	50                   	push   eax
c0017998:	68 32 5e 02 c0       	push   0xc0025e32
c001799d:	e8 5d 53 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00179a2:	58                   	pop    eax
c00179a3:	5a                   	pop    edx
c00179a4:	68 4c 5e 02 c0       	push   0xc0025e4c
c00179a9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00179b0:	50                   	push   eax
c00179b1:	e8 8a 8d fe ff       	call   c0000740 <strcpy>
c00179b6:	59                   	pop    ecx
c00179b7:	58                   	pop    eax
c00179b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179bc:	03 06                	add    eax,DWORD PTR [esi]
c00179be:	50                   	push   eax
c00179bf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00179c6:	50                   	push   eax
c00179c7:	e8 b4 8e fe ff       	call   c0000880 <strcat>
c00179cc:	58                   	pop    eax
c00179cd:	5a                   	pop    edx
c00179ce:	68 e2 5e 02 c0       	push   0xc0025ee2
c00179d3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00179da:	50                   	push   eax
c00179db:	e8 a0 8e fe ff       	call   c0000880 <strcat>
c00179e0:	83 c4 10             	add    esp,0x10
c00179e3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00179e8:	0f 84 5d 01 00 00    	je     c0017b4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00179ee:	83 ec 0c             	sub    esp,0xc
c00179f1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00179f8:	50                   	push   eax
c00179f9:	e8 f1 ce ff ff       	call   c00148ef <Krnl::panic(char const*)>
c00179fe:	83 c4 10             	add    esp,0x10
c0017a01:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017a05:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017a09:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017a0d:	80 fb 01             	cmp    bl,0x1
c0017a10:	0f 85 88 00 00 00    	jne    c0017a9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0017a16:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017a1d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017a21:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0017a25:	01 ce                	add    esi,ecx
c0017a27:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017a2d:	0f 94 c0             	sete   al
c0017a30:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017a36:	0f 94 c3             	sete   bl
c0017a39:	09 c3                	or     ebx,eax
c0017a3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0017a3d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017a42:	74 41                	je     c0017a85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0017a44:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017a47:	84 db                	test   bl,bl
c0017a49:	75 15                	jne    c0017a60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0017a4b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017a4f:	66 83 f8 0c          	cmp    ax,0xc
c0017a53:	76 05                	jbe    c0017a5a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0017a55:	b8 0c 00 00 00       	mov    eax,0xc
c0017a5a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017a5e:	76 37                	jbe    c0017a97 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017a60:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0017a64:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017a69:	0f 84 dc 00 00 00    	je     c0017b4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017a6f:	83 ec 0c             	sub    esp,0xc
c0017a72:	68 63 5e 02 c0       	push   0xc0025e63
c0017a77:	e8 73 ce ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0017a7c:	83 c4 10             	add    esp,0x10
c0017a7f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0017a83:	eb 12                	jmp    c0017a97 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017a85:	01 c1                	add    ecx,eax
c0017a87:	84 db                	test   bl,bl
c0017a89:	75 0c                	jne    c0017a97 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017a8b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017a8f:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017a93:	77 02                	ja     c0017a97 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017a95:	01 d1                	add    ecx,edx
c0017a97:	89 0e                	mov    DWORD PTR [esi],ecx
c0017a99:	e9 ea 00 00 00       	jmp    c0017b88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017a9e:	80 fb 02             	cmp    bl,0x2
c0017aa1:	75 7c                	jne    c0017b1f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0017aa3:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017aaa:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0017aae:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0017ab2:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017ab8:	74 20                	je     c0017ada <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017aba:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017ac0:	74 18                	je     c0017ada <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017ac2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017ac6:	b9 0a 00 00 00       	mov    ecx,0xa
c0017acb:	66 83 f8 0e          	cmp    ax,0xe
c0017acf:	77 03                	ja     c0017ad4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0017ad1:	8d 48 fc             	lea    ecx,[eax-0x4]
c0017ad4:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0017ad8:	76 1f                	jbe    c0017af9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0017ada:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0017ade:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017ae3:	74 66                	je     c0017b4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017ae5:	83 ec 0c             	sub    esp,0xc
c0017ae8:	68 7f 5e 02 c0       	push   0xc0025e7f
c0017aed:	e8 fd cd ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0017af2:	83 c4 10             	add    esp,0x10
c0017af5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017af9:	8b 06                	mov    eax,DWORD PTR [esi]
c0017afb:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017b00:	74 13                	je     c0017b15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0017b02:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017b06:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0017b0d:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017b11:	01 c8                	add    eax,ecx
c0017b13:	eb 04                	jmp    c0017b19 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0017b15:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0017b19:	01 c2                	add    edx,eax
c0017b1b:	89 16                	mov    DWORD PTR [esi],edx
c0017b1d:	eb 69                	jmp    c0017b88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017b1f:	0f b6 db             	movzx  ebx,bl
c0017b22:	50                   	push   eax
c0017b23:	50                   	push   eax
c0017b24:	53                   	push   ebx
c0017b25:	68 9b 5e 02 c0       	push   0xc0025e9b
c0017b2a:	e8 d0 51 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0017b2f:	83 c4 10             	add    esp,0x10
c0017b32:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017b37:	74 12                	je     c0017b4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017b39:	83 ec 0c             	sub    esp,0xc
c0017b3c:	68 a6 5e 02 c0       	push   0xc0025ea6
c0017b41:	e8 a9 cd ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0017b46:	83 c4 10             	add    esp,0x10
c0017b49:	eb 3d                	jmp    c0017b88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017b4b:	83 ec 0c             	sub    esp,0xc
c0017b4e:	55                   	push   ebp
c0017b4f:	e8 36 58 ff ff       	call   c000d38a <File::close()>
c0017b54:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017b57:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017b5a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017b5d:	59                   	pop    ecx
c0017b5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b62:	e8 b8 1e ff ff       	call   c0009a1f <free>
c0017b67:	5b                   	pop    ebx
c0017b68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b6c:	e8 ae 1e ff ff       	call   c0009a1f <free>
c0017b71:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017b74:	e8 a6 1e ff ff       	call   c0009a1f <free>
c0017b79:	5e                   	pop    esi
c0017b7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b7e:	e8 9c 1e ff ff       	call   c0009a1f <free>
c0017b83:	83 c4 10             	add    esp,0x10
c0017b86:	eb 21                	jmp    c0017ba9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017b88:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0017b8c:	e9 76 fd ff ff       	jmp    c0017907 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0017b91:	83 ec 0c             	sub    esp,0xc
c0017b94:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b98:	e8 82 1e ff ff       	call   c0009a1f <free>
c0017b9d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0017ba1:	83 c4 10             	add    esp,0x10
c0017ba4:	e9 eb fc ff ff       	jmp    c0017894 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0017ba9:	31 c0                	xor    eax,eax
c0017bab:	eb 33                	jmp    c0017be0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0017bad:	83 ec 0c             	sub    esp,0xc
c0017bb0:	55                   	push   ebp
c0017bb1:	e8 d4 57 ff ff       	call   c000d38a <File::close()>
c0017bb6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017bb9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017bbc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017bbf:	58                   	pop    eax
c0017bc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017bc4:	e8 56 1e ff ff       	call   c0009a1f <free>
c0017bc9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017bcc:	e8 4e 1e ff ff       	call   c0009a1f <free>
c0017bd1:	5a                   	pop    edx
c0017bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017bd6:	e8 44 1e ff ff       	call   c0009a1f <free>
c0017bdb:	83 c4 10             	add    esp,0x10
c0017bde:	b0 01                	mov    al,0x1
c0017be0:	81 c4 5c 03 00 00    	add    esp,0x35c
c0017be6:	5b                   	pop    ebx
c0017be7:	5e                   	pop    esi
c0017be8:	5f                   	pop    edi
c0017be9:	5d                   	pop    ebp
c0017bea:	c3                   	ret    

c0017beb <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017beb:	56                   	push   esi
c0017bec:	31 d2                	xor    edx,edx
c0017bee:	53                   	push   ebx
c0017bef:	8b 1d 40 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c40
c0017bf5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017bf9:	39 d3                	cmp    ebx,edx
c0017bfb:	7e 1b                	jle    c0017c18 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017bfd:	8b 04 95 60 8e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd71a0]
c0017c04:	39 c8                	cmp    eax,ecx
c0017c06:	77 0d                	ja     c0017c15 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017c08:	8b 34 95 60 8c 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd73a0]
c0017c0f:	01 c6                	add    esi,eax
c0017c11:	39 ce                	cmp    esi,ecx
c0017c13:	77 05                	ja     c0017c1a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017c15:	42                   	inc    edx
c0017c16:	eb e1                	jmp    c0017bf9 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017c18:	31 c0                	xor    eax,eax
c0017c1a:	5b                   	pop    ebx
c0017c1b:	5e                   	pop    esi
c0017c1c:	c3                   	ret    

c0017c1d <Thr::getDriverNameFromAddress(unsigned long)>:
c0017c1d:	53                   	push   ebx
c0017c1e:	31 c0                	xor    eax,eax
c0017c20:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017c24:	8b 1d 40 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c40
c0017c2a:	39 c3                	cmp    ebx,eax
c0017c2c:	7e 22                	jle    c0017c50 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0017c2e:	8b 14 85 60 8e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd71a0]
c0017c35:	39 ca                	cmp    edx,ecx
c0017c37:	77 14                	ja     c0017c4d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017c39:	03 14 85 60 8c 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd73a0]
c0017c40:	39 ca                	cmp    edx,ecx
c0017c42:	76 09                	jbe    c0017c4d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017c44:	8b 04 85 60 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6fa0]
c0017c4b:	eb 05                	jmp    c0017c52 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0017c4d:	40                   	inc    eax
c0017c4e:	eb da                	jmp    c0017c2a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017c50:	31 c0                	xor    eax,eax
c0017c52:	5b                   	pop    ebx
c0017c53:	c3                   	ret    

c0017c54 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017c54:	53                   	push   ebx
c0017c55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017c59:	53                   	push   ebx
c0017c5a:	e8 8c ff ff ff       	call   c0017beb <Thr::getDriverBaseFromAddress(unsigned long)>
c0017c5f:	5a                   	pop    edx
c0017c60:	31 d2                	xor    edx,edx
c0017c62:	85 c0                	test   eax,eax
c0017c64:	74 04                	je     c0017c6a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0017c66:	89 da                	mov    edx,ebx
c0017c68:	29 c2                	sub    edx,eax
c0017c6a:	89 d0                	mov    eax,edx
c0017c6c:	5b                   	pop    ebx
c0017c6d:	c3                   	ret    

c0017c6e <Thr::loadDLL(char const*, bool)>:
c0017c6e:	55                   	push   ebp
c0017c6f:	57                   	push   edi
c0017c70:	56                   	push   esi
c0017c71:	53                   	push   ebx
c0017c72:	81 ec 34 01 00 00    	sub    esp,0x134
c0017c78:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0017c7f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0017c86:	56                   	push   esi
c0017c87:	68 be 5e 02 c0       	push   0xc0025ebe
c0017c8c:	e8 6e 50 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0017c91:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017c98:	e8 72 1d ff ff       	call   c0009a0f <malloc>
c0017c9d:	83 c4 0c             	add    esp,0xc
c0017ca0:	89 c3                	mov    ebx,eax
c0017ca2:	ff 35 30 94 02 c0    	push   DWORD PTR ds:0xc0029430
c0017ca8:	56                   	push   esi
c0017ca9:	50                   	push   eax
c0017caa:	e8 bb 55 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0017caf:	83 c4 10             	add    esp,0x10
c0017cb2:	85 db                	test   ebx,ebx
c0017cb4:	75 3c                	jne    c0017cf2 <Thr::loadDLL(char const*, bool)+0x84>
c0017cb6:	89 f8                	mov    eax,edi
c0017cb8:	84 c0                	test   al,al
c0017cba:	0f 84 d2 01 00 00    	je     c0017e92 <Thr::loadDLL(char const*, bool)+0x224>
c0017cc0:	55                   	push   ebp
c0017cc1:	55                   	push   ebp
c0017cc2:	68 cf 5e 02 c0       	push   0xc0025ecf
c0017cc7:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0017ccb:	55                   	push   ebp
c0017ccc:	e8 6f 8a fe ff       	call   c0000740 <strcpy>
c0017cd1:	58                   	pop    eax
c0017cd2:	5a                   	pop    edx
c0017cd3:	56                   	push   esi
c0017cd4:	55                   	push   ebp
c0017cd5:	e8 a6 8b fe ff       	call   c0000880 <strcat>
c0017cda:	59                   	pop    ecx
c0017cdb:	58                   	pop    eax
c0017cdc:	68 e2 5e 02 c0       	push   0xc0025ee2
c0017ce1:	55                   	push   ebp
c0017ce2:	e8 99 8b fe ff       	call   c0000880 <strcat>
c0017ce7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017cea:	e8 00 cc ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0017cef:	83 c4 10             	add    esp,0x10
c0017cf2:	51                   	push   ecx
c0017cf3:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0017cf7:	50                   	push   eax
c0017cf8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017cfc:	50                   	push   eax
c0017cfd:	53                   	push   ebx
c0017cfe:	e8 d5 58 ff ff       	call   c000d5d8 <File::stat(unsigned long long*, bool*)>
c0017d03:	83 c4 10             	add    esp,0x10
c0017d06:	85 db                	test   ebx,ebx
c0017d08:	74 0c                	je     c0017d16 <Thr::loadDLL(char const*, bool)+0xa8>
c0017d0a:	83 ec 0c             	sub    esp,0xc
c0017d0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017d0f:	53                   	push   ebx
c0017d10:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017d13:	83 c4 10             	add    esp,0x10
c0017d16:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0017d1b:	75 0a                	jne    c0017d27 <Thr::loadDLL(char const*, bool)+0xb9>
c0017d1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d21:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017d25:	75 3c                	jne    c0017d63 <Thr::loadDLL(char const*, bool)+0xf5>
c0017d27:	89 f8                	mov    eax,edi
c0017d29:	84 c0                	test   al,al
c0017d2b:	0f 84 49 01 00 00    	je     c0017e7a <Thr::loadDLL(char const*, bool)+0x20c>
c0017d31:	51                   	push   ecx
c0017d32:	51                   	push   ecx
c0017d33:	68 cf 5e 02 c0       	push   0xc0025ecf
c0017d38:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0017d3c:	53                   	push   ebx
c0017d3d:	e8 fe 89 fe ff       	call   c0000740 <strcpy>
c0017d42:	5d                   	pop    ebp
c0017d43:	58                   	pop    eax
c0017d44:	56                   	push   esi
c0017d45:	53                   	push   ebx
c0017d46:	e8 35 8b fe ff       	call   c0000880 <strcat>
c0017d4b:	58                   	pop    eax
c0017d4c:	5a                   	pop    edx
c0017d4d:	68 e2 5e 02 c0       	push   0xc0025ee2
c0017d52:	53                   	push   ebx
c0017d53:	e8 28 8b fe ff       	call   c0000880 <strcat>
c0017d58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017d5b:	e8 8f cb ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0017d60:	83 c4 10             	add    esp,0x10
c0017d63:	52                   	push   edx
c0017d64:	6a 03                	push   0x3
c0017d66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d6a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017d6e:	05 ff 0f 00 00       	add    eax,0xfff
c0017d73:	83 d2 00             	adc    edx,0x0
c0017d76:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017d7a:	50                   	push   eax
c0017d7b:	ff 35 10 80 02 c0    	push   DWORD PTR ds:0xc0028010
c0017d81:	e8 fc 43 ff ff       	call   c000c182 <VAS::allocatePages(int, int)>
c0017d86:	59                   	pop    ecx
c0017d87:	89 c3                	mov    ebx,eax
c0017d89:	5d                   	pop    ebp
c0017d8a:	50                   	push   eax
c0017d8b:	68 de 40 02 c0       	push   0xc00240de
c0017d90:	e8 6a 4f ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0017d95:	89 34 24             	mov    DWORD PTR [esp],esi
c0017d98:	e8 03 89 fe ff       	call   c00006a0 <strlen>
c0017d9d:	8b 2d 40 8c 02 c0    	mov    ebp,DWORD PTR ds:0xc0028c40
c0017da3:	40                   	inc    eax
c0017da4:	89 04 24             	mov    DWORD PTR [esp],eax
c0017da7:	e8 63 1c ff ff       	call   c0009a0f <malloc>
c0017dac:	89 04 ad 60 90 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6fa0],eax
c0017db3:	58                   	pop    eax
c0017db4:	a1 40 8c 02 c0       	mov    eax,ds:0xc0028c40
c0017db9:	5a                   	pop    edx
c0017dba:	56                   	push   esi
c0017dbb:	ff 34 85 60 90 02 c0 	push   DWORD PTR [eax*4-0x3ffd6fa0]
c0017dc2:	e8 79 89 fe ff       	call   c0000740 <strcpy>
c0017dc7:	a1 40 8c 02 c0       	mov    eax,ds:0xc0028c40
c0017dcc:	8d 50 01             	lea    edx,[eax+0x1]
c0017dcf:	89 1c 85 60 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71a0],ebx
c0017dd6:	89 15 40 8c 02 c0    	mov    DWORD PTR ds:0xc0028c40,edx
c0017ddc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017de0:	83 c4 0c             	add    esp,0xc
c0017de3:	89 14 85 60 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73a0],edx
c0017dea:	6a 01                	push   0x1
c0017dec:	53                   	push   ebx
c0017ded:	56                   	push   esi
c0017dee:	e8 c2 f6 ff ff       	call   c00174b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0017df3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017df7:	83 c4 10             	add    esp,0x10
c0017dfa:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017dff:	0f 85 89 00 00 00    	jne    c0017e8e <Thr::loadDLL(char const*, bool)+0x220>
c0017e05:	89 f8                	mov    eax,edi
c0017e07:	84 c0                	test   al,al
c0017e09:	74 73                	je     c0017e7e <Thr::loadDLL(char const*, bool)+0x210>
c0017e0b:	83 ec 0c             	sub    esp,0xc
c0017e0e:	68 e4 5e 02 c0       	push   0xc0025ee4
c0017e13:	e8 d7 ca ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0017e18:	83 c4 10             	add    esp,0x10
c0017e1b:	eb 61                	jmp    c0017e7e <Thr::loadDLL(char const*, bool)+0x210>
c0017e1d:	50                   	push   eax
c0017e1e:	50                   	push   eax
c0017e1f:	89 e8                	mov    eax,ebp
c0017e21:	c1 e0 0c             	shl    eax,0xc
c0017e24:	01 d8                	add    eax,ebx
c0017e26:	50                   	push   eax
c0017e27:	ff 35 10 80 02 c0    	push   DWORD PTR ds:0xc0028010
c0017e2d:	e8 b8 3e ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c0017e32:	83 c4 10             	add    esp,0x10
c0017e35:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e37:	a8 60                	test   al,0x60
c0017e39:	75 11                	jne    c0017e4c <Thr::loadDLL(char const*, bool)+0x1de>
c0017e3b:	83 ec 0c             	sub    esp,0xc
c0017e3e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017e43:	50                   	push   eax
c0017e44:	e8 fa 21 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c0017e49:	83 c4 10             	add    esp,0x10
c0017e4c:	45                   	inc    ebp
c0017e4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017e51:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e55:	05 ff 0f 00 00       	add    eax,0xfff
c0017e5a:	bf 00 00 00 00       	mov    edi,0x0
c0017e5f:	83 d2 00             	adc    edx,0x0
c0017e62:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017e66:	c1 ea 0c             	shr    edx,0xc
c0017e69:	39 c5                	cmp    ebp,eax
c0017e6b:	89 d1                	mov    ecx,edx
c0017e6d:	89 f8                	mov    eax,edi
c0017e6f:	19 c8                	sbb    eax,ecx
c0017e71:	72 aa                	jb     c0017e1d <Thr::loadDLL(char const*, bool)+0x1af>
c0017e73:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017e78:	75 18                	jne    c0017e92 <Thr::loadDLL(char const*, bool)+0x224>
c0017e7a:	31 db                	xor    ebx,ebx
c0017e7c:	eb 14                	jmp    c0017e92 <Thr::loadDLL(char const*, bool)+0x224>
c0017e7e:	83 ec 0c             	sub    esp,0xc
c0017e81:	68 03 5f 02 c0       	push   0xc0025f03
c0017e86:	e8 64 ca ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0017e8b:	83 c4 10             	add    esp,0x10
c0017e8e:	31 ed                	xor    ebp,ebp
c0017e90:	eb bb                	jmp    c0017e4d <Thr::loadDLL(char const*, bool)+0x1df>
c0017e92:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017e98:	89 d8                	mov    eax,ebx
c0017e9a:	5b                   	pop    ebx
c0017e9b:	5e                   	pop    esi
c0017e9c:	5f                   	pop    edi
c0017e9d:	5d                   	pop    ebp
c0017e9e:	c3                   	ret    

c0017e9f <Thr::executeDLL(unsigned long, void*)>:
c0017e9f:	56                   	push   esi
c0017ea0:	53                   	push   ebx
c0017ea1:	52                   	push   edx
c0017ea2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017ea6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017eaa:	85 db                	test   ebx,ebx
c0017eac:	75 10                	jne    c0017ebe <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017eae:	83 ec 0c             	sub    esp,0xc
c0017eb1:	68 1f 5f 02 c0       	push   0xc0025f1f
c0017eb6:	e8 34 ca ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0017ebb:	83 c4 10             	add    esp,0x10
c0017ebe:	50                   	push   eax
c0017ebf:	50                   	push   eax
c0017ec0:	53                   	push   ebx
c0017ec1:	68 49 5f 02 c0       	push   0xc0025f49
c0017ec6:	e8 34 4e ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0017ecb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017ecf:	89 d8                	mov    eax,ebx
c0017ed1:	83 c4 14             	add    esp,0x14
c0017ed4:	5b                   	pop    ebx
c0017ed5:	5e                   	pop    esi
c0017ed6:	ff e0                	jmp    eax

c0017ed8 <userModeEntryPoint(void*)>:
c0017ed8:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0017edd:	48                   	dec    eax
c0017ede:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0017ee3:	75 03                	jne    c0017ee8 <userModeEntryPoint(void*)+0x10>
c0017ee5:	fb                   	sti    
c0017ee6:	66 90                	xchg   ax,ax
c0017ee8:	fb                   	sti    
c0017ee9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017eee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017ef1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0017ef7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017efb:	e9 5f 83 fe ff       	jmp    c000025f <goToUsermode>

c0017f00 <changeTSS>:
c0017f00:	83 ec 14             	sub    esp,0x14
c0017f03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f08:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017f0b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0017f10:	c1 e2 15             	shl    edx,0x15
c0017f13:	29 d0                	sub    eax,edx
c0017f15:	50                   	push   eax
c0017f16:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c0017f1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017f21:	05 7c 11 00 00       	add    eax,0x117c
c0017f26:	50                   	push   eax
c0017f27:	e8 00 34 ff ff       	call   c000b32c <TSS::setESP(unsigned long)>
c0017f2c:	83 c4 1c             	add    esp,0x1c
c0017f2f:	c3                   	ret    

c0017f30 <switchToThread(ThreadControlBlock*)>:
c0017f30:	57                   	push   edi
c0017f31:	a1 04 94 02 c0       	mov    eax,ds:0xc0029404
c0017f36:	56                   	push   esi
c0017f37:	85 c0                	test   eax,eax
c0017f39:	53                   	push   ebx
c0017f3a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017f3e:	0f 85 90 00 00 00    	jne    c0017fd4 <switchToThread(ThreadControlBlock*)+0xa4>
c0017f44:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c0017f47:	3c ff                	cmp    al,0xff
c0017f49:	0f 84 81 00 00 00    	je     c0017fd0 <switchToThread(ThreadControlBlock*)+0xa0>
c0017f4f:	0f b6 d0             	movzx  edx,al
c0017f52:	b8 00 04 00 00       	mov    eax,0x400
c0017f57:	29 d0                	sub    eax,edx
c0017f59:	d1 f8                	sar    eax,1
c0017f5b:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c0017f5e:	66 90                	xchg   ax,ax
c0017f60:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c0017f63:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c0017f68:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017f6e:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017f75:	74 4d                	je     c0017fc4 <switchToThread(ThreadControlBlock*)+0x94>
c0017f77:	0f 31                	rdtsc  
c0017f79:	a3 48 94 02 c0       	mov    ds:0xc0029448,eax
c0017f7e:	89 c6                	mov    esi,eax
c0017f80:	89 d7                	mov    edi,edx
c0017f82:	2b 35 38 94 02 c0    	sub    esi,DWORD PTR ds:0xc0029438
c0017f88:	89 15 4c 94 02 c0    	mov    DWORD PTR ds:0xc002944c,edx
c0017f8e:	1b 3d 3c 94 02 c0    	sbb    edi,DWORD PTR ds:0xc002943c
c0017f94:	89 35 40 94 02 c0    	mov    DWORD PTR ds:0xc0029440,esi
c0017f9a:	a3 38 94 02 c0       	mov    ds:0xc0029438,eax
c0017f9f:	89 3d 44 94 02 c0    	mov    DWORD PTR ds:0xc0029444,edi
c0017fa5:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017fab:	89 15 3c 94 02 c0    	mov    DWORD PTR ds:0xc002943c,edx
c0017fb1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017fb4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0017fb7:	01 c6                	add    esi,eax
c0017fb9:	11 d7                	adc    edi,edx
c0017fbb:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0017fbe:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0017fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0017fc4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0017fc8:	5b                   	pop    ebx
c0017fc9:	5e                   	pop    esi
c0017fca:	5f                   	pop    edi
c0017fcb:	e9 c7 82 fe ff       	jmp    c0000297 <switchToThreadASM>
c0017fd0:	31 c0                	xor    eax,eax
c0017fd2:	eb 8c                	jmp    c0017f60 <switchToThread(ThreadControlBlock*)+0x30>
c0017fd4:	5b                   	pop    ebx
c0017fd5:	c7 05 00 94 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x1
c0017fdf:	5e                   	pop    esi
c0017fe0:	5f                   	pop    edi
c0017fe1:	c3                   	ret    
c0017fe2:	66 90                	xchg   ax,ax

c0017fe4 <Process::addArgs(char**)>:
c0017fe4:	57                   	push   edi
c0017fe5:	56                   	push   esi
c0017fe6:	53                   	push   ebx
c0017fe7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017feb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017fef:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0017ff9:	85 ff                	test   edi,edi
c0017ffb:	74 43                	je     c0018040 <Process::addArgs(char**)+0x5c>
c0017ffd:	8b 07                	mov    eax,DWORD PTR [edi]
c0017fff:	85 c0                	test   eax,eax
c0018001:	74 3d                	je     c0018040 <Process::addArgs(char**)+0x5c>
c0018003:	31 db                	xor    ebx,ebx
c0018005:	8d 76 00             	lea    esi,[esi+0x0]
c0018008:	83 ec 0c             	sub    esp,0xc
c001800b:	50                   	push   eax
c001800c:	e8 8f 86 fe ff       	call   c00006a0 <strlen>
c0018011:	40                   	inc    eax
c0018012:	89 04 24             	mov    DWORD PTR [esp],eax
c0018015:	e8 f5 19 ff ff       	call   c0009a0f <malloc>
c001801a:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0018021:	5a                   	pop    edx
c0018022:	59                   	pop    ecx
c0018023:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0018026:	43                   	inc    ebx
c0018027:	50                   	push   eax
c0018028:	e8 13 87 fe ff       	call   c0000740 <strcpy>
c001802d:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0018033:	83 c4 10             	add    esp,0x10
c0018036:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018039:	85 c0                	test   eax,eax
c001803b:	75 cb                	jne    c0018008 <Process::addArgs(char**)+0x24>
c001803d:	8d 76 00             	lea    esi,[esi+0x0]
c0018040:	5b                   	pop    ebx
c0018041:	5e                   	pop    esi
c0018042:	5f                   	pop    edi
c0018043:	c3                   	ret    

c0018044 <Process::Process(char const*, Process*, char**)>:
c0018044:	56                   	push   esi
c0018045:	53                   	push   ebx
c0018046:	83 ec 14             	sub    esp,0x14
c0018049:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001804d:	05 0c 02 00 00       	add    eax,0x20c
c0018052:	bb 07 00 00 00       	mov    ebx,0x7
c0018057:	89 c6                	mov    esi,eax
c0018059:	8d 76 00             	lea    esi,[esi+0x0]
c001805c:	85 db                	test   ebx,ebx
c001805e:	78 14                	js     c0018074 <Process::Process(char const*, Process*, char**)+0x30>
c0018060:	83 ec 0c             	sub    esp,0xc
c0018063:	56                   	push   esi
c0018064:	e8 47 af 00 00       	call   c0022fb0 <ThreadControlBlock::ThreadControlBlock()>
c0018069:	83 c4 10             	add    esp,0x10
c001806c:	83 c6 5f             	add    esi,0x5f
c001806f:	4b                   	dec    ebx
c0018070:	eb ea                	jmp    c001805c <Process::Process(char const*, Process*, char**)+0x18>
c0018072:	66 90                	xchg   ax,ax
c0018074:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018078:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001807f:	83 ec 0c             	sub    esp,0xc
c0018082:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018086:	e8 ed c6 ff ff       	call   c0014778 <Krnl::newProcessEnv(Process*)>
c001808b:	83 c4 10             	add    esp,0x10
c001808e:	89 c2                	mov    edx,eax
c0018090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018094:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001809a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001809e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00180a7:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c00180ac:	8d 50 01             	lea    edx,[eax+0x1]
c00180af:	89 15 10 79 02 c0    	mov    DWORD PTR ds:0xc0027910,edx
c00180b5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00180b9:	89 02                	mov    DWORD PTR [edx],eax
c00180bb:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00180c3:	83 ec 0c             	sub    esp,0xc
c00180c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00180ca:	e8 40 19 ff ff       	call   c0009a0f <malloc>
c00180cf:	83 c4 10             	add    esp,0x10
c00180d2:	89 c3                	mov    ebx,eax
c00180d4:	83 ec 08             	sub    esp,0x8
c00180d7:	6a 00                	push   0x0
c00180d9:	53                   	push   ebx
c00180da:	e8 4b 44 ff ff       	call   c000c52a <VAS::VAS(bool)>
c00180df:	83 c4 10             	add    esp,0x10
c00180e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180e6:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00180ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180f0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00180fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018102:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0018108:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001810c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018112:	85 c0                	test   eax,eax
c0018114:	74 42                	je     c0018158 <Process::Process(char const*, Process*, char**)+0x114>
c0018116:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001811a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018120:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018126:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001812a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018130:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018134:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001813a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018140:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018144:	05 0c 01 00 00       	add    eax,0x10c
c0018149:	83 ec 08             	sub    esp,0x8
c001814c:	52                   	push   edx
c001814d:	50                   	push   eax
c001814e:	e8 ed 85 fe ff       	call   c0000740 <strcpy>
c0018153:	83 c4 10             	add    esp,0x10
c0018156:	eb 64                	jmp    c00181bc <Process::Process(char const*, Process*, char**)+0x178>
c0018158:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c0018160:	83 ec 0c             	sub    esp,0xc
c0018163:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018167:	e8 a3 18 ff ff       	call   c0009a0f <malloc>
c001816c:	83 c4 10             	add    esp,0x10
c001816f:	89 c3                	mov    ebx,eax
c0018171:	83 ec 08             	sub    esp,0x8
c0018174:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018178:	53                   	push   ebx
c0018179:	e8 be 2e ff ff       	call   c000b03c <VgaText::VgaText(char const*)>
c001817e:	83 c4 10             	add    esp,0x10
c0018181:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018185:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001818b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001818f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018195:	83 ec 0c             	sub    esp,0xc
c0018198:	50                   	push   eax
c0018199:	e8 5d 26 ff ff       	call   c000a7fb <addToTerminalCycle(VgaText*)>
c001819e:	83 c4 10             	add    esp,0x10
c00181a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181a5:	05 0c 01 00 00       	add    eax,0x10c
c00181aa:	83 ec 08             	sub    esp,0x8
c00181ad:	68 68 5f 02 c0       	push   0xc0025f68
c00181b2:	50                   	push   eax
c00181b3:	e8 88 85 fe ff       	call   c0000740 <strcpy>
c00181b8:	83 c4 10             	add    esp,0x10
c00181bb:	90                   	nop
c00181bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181c0:	83 c0 0c             	add    eax,0xc
c00181c3:	83 ec 08             	sub    esp,0x8
c00181c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00181ca:	50                   	push   eax
c00181cb:	e8 70 85 fe ff       	call   c0000740 <strcpy>
c00181d0:	83 c4 10             	add    esp,0x10
c00181d3:	83 ec 08             	sub    esp,0x8
c00181d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00181da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00181de:	e8 01 fe ff ff       	call   c0017fe4 <Process::addArgs(char**)>
c00181e3:	83 c4 10             	add    esp,0x10
c00181e6:	83 ec 08             	sub    esp,0x8
c00181e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00181ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00181f1:	e8 89 ed ff ff       	call   c0016f7f <Thr::loadProgramIntoMemory(Process*, char const*)>
c00181f6:	83 c4 10             	add    esp,0x10
c00181f9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00181fd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018201:	83 f0 01             	xor    eax,0x1
c0018204:	88 c2                	mov    dl,al
c0018206:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001820a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0018210:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018215:	83 ec 08             	sub    esp,0x8
c0018218:	50                   	push   eax
c0018219:	68 c0 5f 02 c0       	push   0xc0025fc0
c001821e:	e8 dc 4a ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0018223:	83 c4 10             	add    esp,0x10
c0018226:	90                   	nop
c0018227:	83 c4 14             	add    esp,0x14
c001822a:	5b                   	pop    ebx
c001822b:	5e                   	pop    esi
c001822c:	c3                   	ret    
c001822d:	90                   	nop
c001822e:	66 90                	xchg   ax,ax

c0018230 <Process::Process(bool, char const*, Process*, char**)>:
c0018230:	56                   	push   esi
c0018231:	53                   	push   ebx
c0018232:	83 ec 24             	sub    esp,0x24
c0018235:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018239:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001823d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018241:	05 0c 02 00 00       	add    eax,0x20c
c0018246:	bb 07 00 00 00       	mov    ebx,0x7
c001824b:	89 c6                	mov    esi,eax
c001824d:	8d 76 00             	lea    esi,[esi+0x0]
c0018250:	85 db                	test   ebx,ebx
c0018252:	78 14                	js     c0018268 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0018254:	83 ec 0c             	sub    esp,0xc
c0018257:	56                   	push   esi
c0018258:	e8 53 ad 00 00       	call   c0022fb0 <ThreadControlBlock::ThreadControlBlock()>
c001825d:	83 c4 10             	add    esp,0x10
c0018260:	83 c6 5f             	add    esi,0x5f
c0018263:	4b                   	dec    ebx
c0018264:	eb ea                	jmp    c0018250 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0018266:	66 90                	xchg   ax,ax
c0018268:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001826c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0018273:	83 ec 0c             	sub    esp,0xc
c0018276:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001827a:	e8 f9 c4 ff ff       	call   c0014778 <Krnl::newProcessEnv(Process*)>
c001827f:	83 c4 10             	add    esp,0x10
c0018282:	89 c2                	mov    edx,eax
c0018284:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018288:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001828e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018292:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001829b:	a1 10 79 02 c0       	mov    eax,ds:0xc0027910
c00182a0:	8d 50 01             	lea    edx,[eax+0x1]
c00182a3:	89 15 10 79 02 c0    	mov    DWORD PTR ds:0xc0027910,edx
c00182a9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00182ad:	89 02                	mov    DWORD PTR [edx],eax
c00182af:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00182b7:	83 ec 0c             	sub    esp,0xc
c00182ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00182be:	e8 4c 17 ff ff       	call   c0009a0f <malloc>
c00182c3:	83 c4 10             	add    esp,0x10
c00182c6:	89 c3                	mov    ebx,eax
c00182c8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00182cd:	83 ec 08             	sub    esp,0x8
c00182d0:	50                   	push   eax
c00182d1:	53                   	push   ebx
c00182d2:	e8 53 42 ff ff       	call   c000c52a <VAS::VAS(bool)>
c00182d7:	83 c4 10             	add    esp,0x10
c00182da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182de:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00182e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182e8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00182f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182f6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00182fa:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0018300:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018304:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001830a:	85 c0                	test   eax,eax
c001830c:	74 42                	je     c0018350 <Process::Process(bool, char const*, Process*, char**)+0x120>
c001830e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018312:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018318:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001831e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018322:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018328:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001832c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018332:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018338:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001833c:	05 0c 01 00 00       	add    eax,0x10c
c0018341:	83 ec 08             	sub    esp,0x8
c0018344:	52                   	push   edx
c0018345:	50                   	push   eax
c0018346:	e8 f5 83 fe ff       	call   c0000740 <strcpy>
c001834b:	83 c4 10             	add    esp,0x10
c001834e:	eb 64                	jmp    c00183b4 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0018350:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c0018358:	83 ec 0c             	sub    esp,0xc
c001835b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001835f:	e8 ab 16 ff ff       	call   c0009a0f <malloc>
c0018364:	83 c4 10             	add    esp,0x10
c0018367:	89 c3                	mov    ebx,eax
c0018369:	83 ec 08             	sub    esp,0x8
c001836c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018370:	53                   	push   ebx
c0018371:	e8 c6 2c ff ff       	call   c000b03c <VgaText::VgaText(char const*)>
c0018376:	83 c4 10             	add    esp,0x10
c0018379:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001837d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018383:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018387:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001838d:	83 ec 0c             	sub    esp,0xc
c0018390:	50                   	push   eax
c0018391:	e8 65 24 ff ff       	call   c000a7fb <addToTerminalCycle(VgaText*)>
c0018396:	83 c4 10             	add    esp,0x10
c0018399:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001839d:	05 0c 01 00 00       	add    eax,0x10c
c00183a2:	83 ec 08             	sub    esp,0x8
c00183a5:	68 68 5f 02 c0       	push   0xc0025f68
c00183aa:	50                   	push   eax
c00183ab:	e8 90 83 fe ff       	call   c0000740 <strcpy>
c00183b0:	83 c4 10             	add    esp,0x10
c00183b3:	90                   	nop
c00183b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183b8:	83 c0 0c             	add    eax,0xc
c00183bb:	83 ec 08             	sub    esp,0x8
c00183be:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00183c2:	50                   	push   eax
c00183c3:	e8 78 83 fe ff       	call   c0000740 <strcpy>
c00183c8:	83 c4 10             	add    esp,0x10
c00183cb:	83 ec 08             	sub    esp,0x8
c00183ce:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00183d2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00183d6:	e8 09 fc ff ff       	call   c0017fe4 <Process::addArgs(char**)>
c00183db:	83 c4 10             	add    esp,0x10
c00183de:	90                   	nop
c00183df:	83 c4 24             	add    esp,0x24
c00183e2:	5b                   	pop    ebx
c00183e3:	5e                   	pop    esi
c00183e4:	c3                   	ret    
c00183e5:	8d 76 00             	lea    esi,[esi+0x0]

c00183e8 <taskStartupFunction>:
c00183e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00183ed:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00183f0:	c3                   	ret    
c00183f1:	90                   	nop
c00183f2:	66 90                	xchg   ax,ax

c00183f4 <Semaphore::Semaphore(int)>:
c00183f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00183fc:	89 10                	mov    DWORD PTR [eax],edx
c00183fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018402:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018409:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001840d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018414:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018418:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001841f:	90                   	nop
c0018420:	c3                   	ret    
c0018421:	90                   	nop
c0018422:	66 90                	xchg   ax,ax

c0018424 <Mutex::Mutex()>:
c0018424:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018428:	6a 01                	push   0x1
c001842a:	50                   	push   eax
c001842b:	e8 c4 ff ff ff       	call   c00183f4 <Semaphore::Semaphore(int)>
c0018430:	83 c4 08             	add    esp,0x8
c0018433:	90                   	nop
c0018434:	c3                   	ret    
c0018435:	90                   	nop
c0018436:	66 90                	xchg   ax,ax

c0018438 <Process::createThread(void (*)(void*), void*, int)>:
c0018438:	57                   	push   edi
c0018439:	31 c9                	xor    ecx,ecx
c001843b:	56                   	push   esi
c001843c:	53                   	push   ebx
c001843d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018441:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0018448:	89 f2                	mov    edx,esi
c001844a:	66 90                	xchg   ax,ax
c001844c:	0f b7 c2             	movzx  eax,dx
c001844f:	83 e2 01             	and    edx,0x1
c0018452:	74 14                	je     c0018468 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0018454:	d1 f8                	sar    eax,1
c0018456:	41                   	inc    ecx
c0018457:	89 c2                	mov    edx,eax
c0018459:	83 f9 10             	cmp    ecx,0x10
c001845c:	75 ee                	jne    c001844c <Process::createThread(void (*)(void*), void*, int)+0x14>
c001845e:	31 db                	xor    ebx,ebx
c0018460:	89 d8                	mov    eax,ebx
c0018462:	5b                   	pop    ebx
c0018463:	5e                   	pop    esi
c0018464:	5f                   	pop    edi
c0018465:	c3                   	ret    
c0018466:	66 90                	xchg   ax,ax
c0018468:	b8 01 00 00 00       	mov    eax,0x1
c001846d:	d3 e0                	shl    eax,cl
c001846f:	09 c6                	or     esi,eax
c0018471:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018474:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001847b:	01 c0                	add    eax,eax
c001847d:	01 c8                	add    eax,ecx
c001847f:	8d 04 80             	lea    eax,[eax+eax*4]
c0018482:	01 d8                	add    eax,ebx
c0018484:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001848b:	75 0b                	jne    c0018498 <Process::createThread(void (*)(void*), void*, int)+0x60>
c001848d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0018497:	90                   	nop
c0018498:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001849e:	83 ec 08             	sub    esp,0x8
c00184a1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00184a4:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00184a7:	01 c0                	add    eax,eax
c00184a9:	01 c8                	add    eax,ecx
c00184ab:	8d 3c 80             	lea    edi,[eax+eax*4]
c00184ae:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00184b1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00184b7:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00184bd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00184c1:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00184c7:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00184cd:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00184d4:	89 ca                	mov    edx,ecx
c00184d6:	f7 da                	neg    edx
c00184d8:	c1 e2 15             	shl    edx,0x15
c00184db:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00184e1:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00184e7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00184eb:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00184f5:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00184fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00184ff:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018505:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001850f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018519:	53                   	push   ebx
c001851a:	68 24 94 02 c0       	push   0xc0029424
c001851f:	e8 2c a8 00 00       	call   c0022d50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018524:	83 c4 10             	add    esp,0x10
c0018527:	89 d8                	mov    eax,ebx
c0018529:	5b                   	pop    ebx
c001852a:	5e                   	pop    esi
c001852b:	5f                   	pop    edi
c001852c:	c3                   	ret    
c001852d:	90                   	nop
c001852e:	66 90                	xchg   ax,ax

c0018530 <Process::createUserThread()>:
c0018530:	83 ec 0c             	sub    esp,0xc
c0018533:	68 80 00 00 00       	push   0x80
c0018538:	6a 00                	push   0x0
c001853a:	68 d8 7e 01 c0       	push   0xc0017ed8
c001853f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018543:	e8 f0 fe ff ff       	call   c0018438 <Process::createThread(void (*)(void*), void*, int)>
c0018548:	83 c4 1c             	add    esp,0x1c
c001854b:	c3                   	ret    

c001854c <setupMultitasking(void (*)())>:
c001854c:	56                   	push   esi
c001854d:	53                   	push   ebx
c001854e:	51                   	push   ecx
c001854f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018553:	eb 13                	jmp    c0018568 <setupMultitasking(void (*)())+0x1c>
c0018555:	8d 76 00             	lea    esi,[esi+0x0]
c0018558:	83 ec 0c             	sub    esp,0xc
c001855b:	68 24 94 02 c0       	push   0xc0029424
c0018560:	e8 33 a7 00 00       	call   c0022c98 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018565:	83 c4 10             	add    esp,0x10
c0018568:	83 ec 0c             	sub    esp,0xc
c001856b:	68 24 94 02 c0       	push   0xc0029424
c0018570:	e8 ff a6 00 00       	call   c0022c74 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018575:	83 c4 10             	add    esp,0x10
c0018578:	84 c0                	test   al,al
c001857a:	74 dc                	je     c0018558 <setupMultitasking(void (*)())+0xc>
c001857c:	83 ec 0c             	sub    esp,0xc
c001857f:	68 1f 07 00 00       	push   0x71f
c0018584:	e8 86 14 ff ff       	call   c0009a0f <malloc>
c0018589:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018590:	89 c3                	mov    ebx,eax
c0018592:	6a 00                	push   0x0
c0018594:	68 6c 5f 02 c0       	push   0xc0025f6c
c0018599:	6a 01                	push   0x1
c001859b:	50                   	push   eax
c001859c:	e8 8f fc ff ff       	call   c0018230 <Process::Process(bool, char const*, Process*, char**)>
c00185a1:	83 c4 14             	add    esp,0x14
c00185a4:	89 1d 30 94 02 c0    	mov    DWORD PTR ds:0xc0029430,ebx
c00185aa:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c00185b0:	e8 54 25 ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c00185b5:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00185bd:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00185c7:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00185cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00185d0:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00185da:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00185e0:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00185e6:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00185f0:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00185fa:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018604:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001860a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018614:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001861a:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018624:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001862a:	58                   	pop    eax
c001862b:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018631:	5a                   	pop    edx
c0018632:	68 68 5f 02 c0       	push   0xc0025f68
c0018637:	50                   	push   eax
c0018638:	e8 03 81 fe ff       	call   c0000740 <strcpy>
c001863d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0018644:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018648:	83 c4 14             	add    esp,0x14
c001864b:	5b                   	pop    ebx
c001864c:	5e                   	pop    esi
c001864d:	e9 37 7c fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0018652:	66 90                	xchg   ax,ax

c0018654 <schedule()>:
c0018654:	a1 04 94 02 c0       	mov    eax,ds:0xc0029404
c0018659:	85 c0                	test   eax,eax
c001865b:	74 0b                	je     c0018668 <schedule()+0x14>
c001865d:	c7 05 00 94 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x1
c0018667:	c3                   	ret    
c0018668:	53                   	push   ebx
c0018669:	83 ec 14             	sub    esp,0x14
c001866c:	68 24 94 02 c0       	push   0xc0029424
c0018671:	e8 fe a5 00 00       	call   c0022c74 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018676:	83 c4 10             	add    esp,0x10
c0018679:	84 c0                	test   al,al
c001867b:	75 3b                	jne    c00186b8 <schedule()+0x64>
c001867d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018682:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018685:	4a                   	dec    edx
c0018686:	74 38                	je     c00186c0 <schedule()+0x6c>
c0018688:	83 ec 0c             	sub    esp,0xc
c001868b:	68 24 94 02 c0       	push   0xc0029424
c0018690:	e8 fb a5 00 00       	call   c0022c90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018695:	c7 04 24 24 94 02 c0 	mov    DWORD PTR [esp],0xc0029424
c001869c:	89 c3                	mov    ebx,eax
c001869e:	e8 f5 a5 00 00       	call   c0022c98 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00186a3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00186aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00186ad:	e8 7e f8 ff ff       	call   c0017f30 <switchToThread(ThreadControlBlock*)>
c00186b2:	83 c4 10             	add    esp,0x10
c00186b5:	8d 76 00             	lea    esi,[esi+0x0]
c00186b8:	83 c4 08             	add    esp,0x8
c00186bb:	5b                   	pop    ebx
c00186bc:	c3                   	ret    
c00186bd:	8d 76 00             	lea    esi,[esi+0x0]
c00186c0:	83 ec 08             	sub    esp,0x8
c00186c3:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00186ca:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00186d0:	68 24 94 02 c0       	push   0xc0029424
c00186d5:	e8 76 a6 00 00       	call   c0022d50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00186da:	83 c4 10             	add    esp,0x10
c00186dd:	eb a9                	jmp    c0018688 <schedule()+0x34>
c00186df:	90                   	nop

c00186e0 <Semaphore::tryAcquire()>:
c00186e0:	53                   	push   ebx
c00186e1:	83 ec 08             	sub    esp,0x8
c00186e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186e8:	fa                   	cli    
c00186e9:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c00186ee:	8d 50 01             	lea    edx,[eax+0x1]
c00186f1:	89 15 08 94 02 c0    	mov    DWORD PTR ds:0xc0029408,edx
c00186f7:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c00186fd:	8d 5a 01             	lea    ebx,[edx+0x1]
c0018700:	89 1d 04 94 02 c0    	mov    DWORD PTR ds:0xc0029404,ebx
c0018706:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0018709:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001870b:	7c 33                	jl     c0018740 <Semaphore::tryAcquire()+0x60>
c001870d:	89 15 04 94 02 c0    	mov    DWORD PTR ds:0xc0029404,edx
c0018713:	85 d2                	test   edx,edx
c0018715:	75 0d                	jne    c0018724 <Semaphore::tryAcquire()+0x44>
c0018717:	8b 15 00 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029400
c001871d:	85 d2                	test   edx,edx
c001871f:	75 6b                	jne    c001878c <Semaphore::tryAcquire()+0xac>
c0018721:	8d 76 00             	lea    esi,[esi+0x0]
c0018724:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0018729:	85 c0                	test   eax,eax
c001872b:	74 0b                	je     c0018738 <Semaphore::tryAcquire()+0x58>
c001872d:	8d 76 00             	lea    esi,[esi+0x0]
c0018730:	31 c0                	xor    eax,eax
c0018732:	83 c4 08             	add    esp,0x8
c0018735:	5b                   	pop    ebx
c0018736:	c3                   	ret    
c0018737:	90                   	nop
c0018738:	fb                   	sti    
c0018739:	83 c4 08             	add    esp,0x8
c001873c:	5b                   	pop    ebx
c001873d:	c3                   	ret    
c001873e:	66 90                	xchg   ax,ax
c0018740:	43                   	inc    ebx
c0018741:	89 15 04 94 02 c0    	mov    DWORD PTR ds:0xc0029404,edx
c0018747:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001874a:	85 d2                	test   edx,edx
c001874c:	75 22                	jne    c0018770 <Semaphore::tryAcquire()+0x90>
c001874e:	8b 0d 00 94 02 c0    	mov    ecx,DWORD PTR ds:0xc0029400
c0018754:	85 c9                	test   ecx,ecx
c0018756:	74 18                	je     c0018770 <Semaphore::tryAcquire()+0x90>
c0018758:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c0018762:	e8 ed fe ff ff       	call   c0018654 <schedule()>
c0018767:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c001876c:	48                   	dec    eax
c001876d:	8d 76 00             	lea    esi,[esi+0x0]
c0018770:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0018775:	85 c0                	test   eax,eax
c0018777:	75 0b                	jne    c0018784 <Semaphore::tryAcquire()+0xa4>
c0018779:	fb                   	sti    
c001877a:	b0 01                	mov    al,0x1
c001877c:	83 c4 08             	add    esp,0x8
c001877f:	5b                   	pop    ebx
c0018780:	c3                   	ret    
c0018781:	8d 76 00             	lea    esi,[esi+0x0]
c0018784:	b0 01                	mov    al,0x1
c0018786:	83 c4 08             	add    esp,0x8
c0018789:	5b                   	pop    ebx
c001878a:	c3                   	ret    
c001878b:	90                   	nop
c001878c:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c0018796:	e8 b9 fe ff ff       	call   c0018654 <schedule()>
c001879b:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c00187a0:	48                   	dec    eax
c00187a1:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c00187a6:	85 c0                	test   eax,eax
c00187a8:	75 86                	jne    c0018730 <Semaphore::tryAcquire()+0x50>
c00187aa:	eb 8c                	jmp    c0018738 <Semaphore::tryAcquire()+0x58>

c00187ac <Semaphore::assertLocked(char const*)>:
c00187ac:	83 ec 0c             	sub    esp,0xc
c00187af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00187b3:	fa                   	cli    
c00187b4:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c00187ba:	a1 04 94 02 c0       	mov    eax,ds:0xc0029404
c00187bf:	8d 48 01             	lea    ecx,[eax+0x1]
c00187c2:	89 0d 04 94 02 c0    	mov    DWORD PTR ds:0xc0029404,ecx
c00187c8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00187ca:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00187cd:	7c 29                	jl     c00187f8 <Semaphore::assertLocked(char const*)+0x4c>
c00187cf:	90                   	nop
c00187d0:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c00187d5:	85 c0                	test   eax,eax
c00187d7:	75 0b                	jne    c00187e4 <Semaphore::assertLocked(char const*)+0x38>
c00187d9:	a1 00 94 02 c0       	mov    eax,ds:0xc0029400
c00187de:	85 c0                	test   eax,eax
c00187e0:	75 2e                	jne    c0018810 <Semaphore::assertLocked(char const*)+0x64>
c00187e2:	66 90                	xchg   ax,ax
c00187e4:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c00187e9:	48                   	dec    eax
c00187ea:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c00187ef:	75 03                	jne    c00187f4 <Semaphore::assertLocked(char const*)+0x48>
c00187f1:	fb                   	sti    
c00187f2:	66 90                	xchg   ax,ax
c00187f4:	83 c4 0c             	add    esp,0xc
c00187f7:	c3                   	ret    
c00187f8:	83 ec 0c             	sub    esp,0xc
c00187fb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00187ff:	e8 eb c0 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0018804:	a1 04 94 02 c0       	mov    eax,ds:0xc0029404
c0018809:	83 c4 10             	add    esp,0x10
c001880c:	48                   	dec    eax
c001880d:	eb c1                	jmp    c00187d0 <Semaphore::assertLocked(char const*)+0x24>
c001880f:	90                   	nop
c0018810:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c001881a:	e8 35 fe ff ff       	call   c0018654 <schedule()>
c001881f:	eb c3                	jmp    c00187e4 <Semaphore::assertLocked(char const*)+0x38>
c0018821:	8d 76 00             	lea    esi,[esi+0x0]

c0018824 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018824:	83 ec 0c             	sub    esp,0xc
c0018827:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001882c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018830:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018833:	e8 1c fe ff ff       	call   c0018654 <schedule()>
c0018838:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c001883d:	48                   	dec    eax
c001883e:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0018843:	75 03                	jne    c0018848 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0018845:	fb                   	sti    
c0018846:	66 90                	xchg   ax,ax
c0018848:	83 c4 0c             	add    esp,0xc
c001884b:	c3                   	ret    

c001884c <blockTask(TaskState)>:
c001884c:	83 ec 0c             	sub    esp,0xc
c001884f:	fa                   	cli    
c0018850:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c0018856:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001885a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001885f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018862:	e8 ed fd ff ff       	call   c0018654 <schedule()>
c0018867:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c001886c:	48                   	dec    eax
c001886d:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0018872:	75 04                	jne    c0018878 <blockTask(TaskState)+0x2c>
c0018874:	fb                   	sti    
c0018875:	8d 76 00             	lea    esi,[esi+0x0]
c0018878:	83 c4 0c             	add    esp,0xc
c001887b:	c3                   	ret    

c001887c <waitTask(int, int*, int)>:
c001887c:	83 ec 18             	sub    esp,0x18
c001887f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018884:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018888:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001888b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001888f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018894:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018897:	6a 07                	push   0x7
c0018899:	e8 ae ff ff ff       	call   c001884c <blockTask(TaskState)>
c001889e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188a3:	83 c4 10             	add    esp,0x10
c00188a6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00188a9:	85 d2                	test   edx,edx
c00188ab:	74 0b                	je     c00188b8 <waitTask(int, int*, int)+0x3c>
c00188ad:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00188b0:	89 02                	mov    DWORD PTR [edx],eax
c00188b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188b7:	90                   	nop
c00188b8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00188bb:	83 c4 0c             	add    esp,0xc
c00188be:	c3                   	ret    
c00188bf:	90                   	nop

c00188c0 <milliTenthSleepUntil(unsigned int)>:
c00188c0:	83 ec 0c             	sub    esp,0xc
c00188c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188c7:	39 05 0c 85 02 c0    	cmp    DWORD PTR ds:0xc002850c,eax
c00188cd:	76 05                	jbe    c00188d4 <milliTenthSleepUntil(unsigned int)+0x14>
c00188cf:	90                   	nop
c00188d0:	83 c4 0c             	add    esp,0xc
c00188d3:	c3                   	ret    
c00188d4:	fa                   	cli    
c00188d5:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c00188db:	83 ec 08             	sub    esp,0x8
c00188de:	ff 05 04 94 02 c0    	inc    DWORD PTR ds:0xc0029404
c00188e4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00188ea:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00188ed:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00188f3:	68 18 94 02 c0       	push   0xc0029418
c00188f8:	e8 53 a4 00 00       	call   c0022d50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00188fd:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018904:	e8 43 ff ff ff       	call   c001884c <blockTask(TaskState)>
c0018909:	a1 04 94 02 c0       	mov    eax,ds:0xc0029404
c001890e:	83 c4 10             	add    esp,0x10
c0018911:	48                   	dec    eax
c0018912:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c0018917:	85 c0                	test   eax,eax
c0018919:	75 09                	jne    c0018924 <milliTenthSleepUntil(unsigned int)+0x64>
c001891b:	a1 00 94 02 c0       	mov    eax,ds:0xc0029400
c0018920:	85 c0                	test   eax,eax
c0018922:	75 14                	jne    c0018938 <milliTenthSleepUntil(unsigned int)+0x78>
c0018924:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0018929:	48                   	dec    eax
c001892a:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c001892f:	75 9f                	jne    c00188d0 <milliTenthSleepUntil(unsigned int)+0x10>
c0018931:	fb                   	sti    
c0018932:	83 c4 0c             	add    esp,0xc
c0018935:	c3                   	ret    
c0018936:	66 90                	xchg   ax,ax
c0018938:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c0018942:	e8 0d fd ff ff       	call   c0018654 <schedule()>
c0018947:	eb db                	jmp    c0018924 <milliTenthSleepUntil(unsigned int)+0x64>
c0018949:	8d 76 00             	lea    esi,[esi+0x0]

c001894c <milliTenthSleep(unsigned int)>:
c001894c:	a1 0c 85 02 c0       	mov    eax,ds:0xc002850c
c0018951:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018955:	e9 66 ff ff ff       	jmp    c00188c0 <milliTenthSleepUntil(unsigned int)>
c001895a:	66 90                	xchg   ax,ax

c001895c <sleep(unsigned int)>:
c001895c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018960:	8d 04 80             	lea    eax,[eax+eax*4]
c0018963:	8d 04 80             	lea    eax,[eax+eax*4]
c0018966:	8d 04 80             	lea    eax,[eax+eax*4]
c0018969:	8d 04 80             	lea    eax,[eax+eax*4]
c001896c:	c1 e0 04             	shl    eax,0x4
c001896f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018973:	eb d7                	jmp    c001894c <milliTenthSleep(unsigned int)>
c0018975:	90                   	nop
c0018976:	66 90                	xchg   ax,ax

c0018978 <Semaphore::acquire()>:
c0018978:	83 ec 0c             	sub    esp,0xc
c001897b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001897f:	fa                   	cli    
c0018980:	a1 04 94 02 c0       	mov    eax,ds:0xc0029404
c0018985:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c001898b:	8d 48 01             	lea    ecx,[eax+0x1]
c001898e:	89 0d 04 94 02 c0    	mov    DWORD PTR ds:0xc0029404,ecx
c0018994:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0018997:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0018999:	7d 2d                	jge    c00189c8 <Semaphore::acquire()+0x50>
c001899b:	41                   	inc    ecx
c001899c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001899f:	90                   	nop
c00189a0:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c00189a5:	85 c0                	test   eax,eax
c00189a7:	75 0b                	jne    c00189b4 <Semaphore::acquire()+0x3c>
c00189a9:	a1 00 94 02 c0       	mov    eax,ds:0xc0029400
c00189ae:	85 c0                	test   eax,eax
c00189b0:	75 62                	jne    c0018a14 <Semaphore::acquire()+0x9c>
c00189b2:	66 90                	xchg   ax,ax
c00189b4:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c00189b9:	48                   	dec    eax
c00189ba:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c00189bf:	75 03                	jne    c00189c4 <Semaphore::acquire()+0x4c>
c00189c1:	fb                   	sti    
c00189c2:	66 90                	xchg   ax,ax
c00189c4:	83 c4 0c             	add    esp,0xc
c00189c7:	c3                   	ret    
c00189c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00189cd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00189d4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00189d7:	85 c9                	test   ecx,ecx
c00189d9:	74 4d                	je     c0018a28 <Semaphore::acquire()+0xb0>
c00189db:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00189de:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00189e4:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00189e7:	90                   	nop
c00189e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00189ed:	83 ec 0c             	sub    esp,0xc
c00189f0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00189f3:	68 e8 5f 02 c0       	push   0xc0025fe8
c00189f8:	e8 02 43 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00189fd:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0018a04:	e8 43 fe ff ff       	call   c001884c <blockTask(TaskState)>
c0018a09:	a1 04 94 02 c0       	mov    eax,ds:0xc0029404
c0018a0e:	83 c4 10             	add    esp,0x10
c0018a11:	48                   	dec    eax
c0018a12:	eb 8c                	jmp    c00189a0 <Semaphore::acquire()+0x28>
c0018a14:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c0018a1e:	e8 31 fc ff ff       	call   c0018654 <schedule()>
c0018a23:	eb 8f                	jmp    c00189b4 <Semaphore::acquire()+0x3c>
c0018a25:	8d 76 00             	lea    esi,[esi+0x0]
c0018a28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a2d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018a30:	eb b6                	jmp    c00189e8 <Semaphore::acquire()+0x70>
c0018a32:	66 90                	xchg   ax,ax

c0018a34 <taskReturned>:
c0018a34:	83 ec 18             	sub    esp,0x18
c0018a37:	68 08 60 02 c0       	push   0xc0026008
c0018a3c:	e8 ae be ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0018a41:	83 c4 10             	add    esp,0x10
c0018a44:	83 ec 0c             	sub    esp,0xc
c0018a47:	6a 02                	push   0x2
c0018a49:	e8 fe fd ff ff       	call   c001884c <blockTask(TaskState)>
c0018a4e:	fa                   	cli    
c0018a4f:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c0018a55:	e8 fa fb ff ff       	call   c0018654 <schedule()>
c0018a5a:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0018a5f:	83 c4 10             	add    esp,0x10
c0018a62:	48                   	dec    eax
c0018a63:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0018a68:	85 c0                	test   eax,eax
c0018a6a:	75 d8                	jne    c0018a44 <taskReturned+0x10>
c0018a6c:	fb                   	sti    
c0018a6d:	eb d5                	jmp    c0018a44 <taskReturned+0x10>
c0018a6f:	90                   	nop

c0018a70 <Thr::processFromPID(int)>:
c0018a70:	57                   	push   edi
c0018a71:	56                   	push   esi
c0018a72:	53                   	push   ebx
c0018a73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018a77:	fa                   	cli    
c0018a78:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c0018a7e:	83 ec 0c             	sub    esp,0xc
c0018a81:	68 24 94 02 c0       	push   0xc0029424
c0018a86:	e8 05 a2 00 00       	call   c0022c90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018a8b:	83 c4 10             	add    esp,0x10
c0018a8e:	89 c7                	mov    edi,eax
c0018a90:	eb 16                	jmp    c0018aa8 <Thr::processFromPID(int)+0x38>
c0018a92:	66 90                	xchg   ax,ax
c0018a94:	83 ec 0c             	sub    esp,0xc
c0018a97:	68 24 94 02 c0       	push   0xc0029424
c0018a9c:	e8 ef a1 00 00       	call   c0022c90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018aa1:	83 c4 10             	add    esp,0x10
c0018aa4:	39 f8                	cmp    eax,edi
c0018aa6:	74 4c                	je     c0018af4 <Thr::processFromPID(int)+0x84>
c0018aa8:	83 ec 0c             	sub    esp,0xc
c0018aab:	68 24 94 02 c0       	push   0xc0029424
c0018ab0:	e8 db a1 00 00       	call   c0022c90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018ab5:	c7 04 24 24 94 02 c0 	mov    DWORD PTR [esp],0xc0029424
c0018abc:	89 c3                	mov    ebx,eax
c0018abe:	e8 d5 a1 00 00       	call   c0022c98 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018ac3:	58                   	pop    eax
c0018ac4:	5a                   	pop    edx
c0018ac5:	53                   	push   ebx
c0018ac6:	68 24 94 02 c0       	push   0xc0029424
c0018acb:	e8 80 a2 00 00       	call   c0022d50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018ad0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018ad3:	83 c4 10             	add    esp,0x10
c0018ad6:	39 30                	cmp    DWORD PTR [eax],esi
c0018ad8:	75 ba                	jne    c0018a94 <Thr::processFromPID(int)+0x24>
c0018ada:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0018adf:	48                   	dec    eax
c0018ae0:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0018ae5:	74 09                	je     c0018af0 <Thr::processFromPID(int)+0x80>
c0018ae7:	90                   	nop
c0018ae8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018aeb:	5b                   	pop    ebx
c0018aec:	5e                   	pop    esi
c0018aed:	5f                   	pop    edi
c0018aee:	c3                   	ret    
c0018aef:	90                   	nop
c0018af0:	fb                   	sti    
c0018af1:	eb f5                	jmp    c0018ae8 <Thr::processFromPID(int)+0x78>
c0018af3:	90                   	nop
c0018af4:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0018af9:	48                   	dec    eax
c0018afa:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0018aff:	75 07                	jne    c0018b08 <Thr::processFromPID(int)+0x98>
c0018b01:	fb                   	sti    
c0018b02:	5b                   	pop    ebx
c0018b03:	5e                   	pop    esi
c0018b04:	5f                   	pop    edi
c0018b05:	c3                   	ret    
c0018b06:	66 90                	xchg   ax,ax
c0018b08:	5b                   	pop    ebx
c0018b09:	31 c0                	xor    eax,eax
c0018b0b:	5e                   	pop    esi
c0018b0c:	5f                   	pop    edi
c0018b0d:	c3                   	ret    
c0018b0e:	66 90                	xchg   ax,ax

c0018b10 <unblockTask(ThreadControlBlock*)>:
c0018b10:	53                   	push   ebx
c0018b11:	83 ec 08             	sub    esp,0x8
c0018b14:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018b18:	fa                   	cli    
c0018b19:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c0018b1f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018b22:	85 c0                	test   eax,eax
c0018b24:	74 66                	je     c0018b8c <unblockTask(ThreadControlBlock*)+0x7c>
c0018b26:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018b29:	48                   	dec    eax
c0018b2a:	74 38                	je     c0018b64 <unblockTask(ThreadControlBlock*)+0x54>
c0018b2c:	83 ec 0c             	sub    esp,0xc
c0018b2f:	68 24 94 02 c0       	push   0xc0029424
c0018b34:	e8 57 a1 00 00       	call   c0022c90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b39:	83 c4 10             	add    esp,0x10
c0018b3c:	85 c0                	test   eax,eax
c0018b3e:	75 1c                	jne    c0018b5c <unblockTask(ThreadControlBlock*)+0x4c>
c0018b40:	eb 5e                	jmp    c0018ba0 <unblockTask(ThreadControlBlock*)+0x90>
c0018b42:	66 90                	xchg   ax,ax
c0018b44:	83 ec 08             	sub    esp,0x8
c0018b47:	50                   	push   eax
c0018b48:	68 24 94 02 c0       	push   0xc0029424
c0018b4d:	e8 ee a4 00 00       	call   c0023040 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018b52:	83 c4 10             	add    esp,0x10
c0018b55:	85 c0                	test   eax,eax
c0018b57:	74 47                	je     c0018ba0 <unblockTask(ThreadControlBlock*)+0x90>
c0018b59:	8d 76 00             	lea    esi,[esi+0x0]
c0018b5c:	39 c3                	cmp    ebx,eax
c0018b5e:	75 e4                	jne    c0018b44 <unblockTask(ThreadControlBlock*)+0x34>
c0018b60:	eb 12                	jmp    c0018b74 <unblockTask(ThreadControlBlock*)+0x64>
c0018b62:	66 90                	xchg   ax,ax
c0018b64:	83 ec 0c             	sub    esp,0xc
c0018b67:	68 8a 5f 02 c0       	push   0xc0025f8a
c0018b6c:	e8 8e 41 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0018b71:	83 c4 10             	add    esp,0x10
c0018b74:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0018b79:	48                   	dec    eax
c0018b7a:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0018b7f:	75 03                	jne    c0018b84 <unblockTask(ThreadControlBlock*)+0x74>
c0018b81:	fb                   	sti    
c0018b82:	66 90                	xchg   ax,ax
c0018b84:	83 c4 08             	add    esp,0x8
c0018b87:	5b                   	pop    ebx
c0018b88:	c3                   	ret    
c0018b89:	8d 76 00             	lea    esi,[esi+0x0]
c0018b8c:	83 ec 0c             	sub    esp,0xc
c0018b8f:	68 73 5f 02 c0       	push   0xc0025f73
c0018b94:	e8 66 41 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0018b99:	83 c4 10             	add    esp,0x10
c0018b9c:	eb d6                	jmp    c0018b74 <unblockTask(ThreadControlBlock*)+0x64>
c0018b9e:	66 90                	xchg   ax,ax
c0018ba0:	83 ec 08             	sub    esp,0x8
c0018ba3:	53                   	push   ebx
c0018ba4:	68 24 94 02 c0       	push   0xc0029424
c0018ba9:	e8 a2 a1 00 00       	call   c0022d50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018bae:	83 c4 10             	add    esp,0x10
c0018bb1:	eb c1                	jmp    c0018b74 <unblockTask(ThreadControlBlock*)+0x64>
c0018bb3:	90                   	nop

c0018bb4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018bb4:	55                   	push   ebp
c0018bb5:	57                   	push   edi
c0018bb6:	56                   	push   esi
c0018bb7:	53                   	push   ebx
c0018bb8:	83 ec 1c             	sub    esp,0x1c
c0018bbb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018bbf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018bc2:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0018bc8:	85 ff                	test   edi,edi
c0018bca:	7e 24                	jle    c0018bf0 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0018bcc:	31 f6                	xor    esi,esi
c0018bce:	66 90                	xchg   ax,ax
c0018bd0:	83 ec 0c             	sub    esp,0xc
c0018bd3:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0018bda:	46                   	inc    esi
c0018bdb:	e8 3f 0e ff ff       	call   c0009a1f <free>
c0018be0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018be3:	83 c4 10             	add    esp,0x10
c0018be6:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0018bec:	7f e2                	jg     c0018bd0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0018bee:	66 90                	xchg   ax,ax
c0018bf0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018bfa:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0018bff:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018c02:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0018c05:	d3 c0                	rol    eax,cl
c0018c07:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0018c0e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018c11:	89 f7                	mov    edi,esi
c0018c13:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0018c1b:	0f 85 73 01 00 00    	jne    c0018d94 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018c21:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0018c27:	85 ed                	test   ebp,ebp
c0018c29:	74 1d                	je     c0018c48 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0018c2b:	83 ec 0c             	sub    esp,0xc
c0018c2e:	55                   	push   ebp
c0018c2f:	e8 60 ba ff ff       	call   c0014694 <EnvVarContainer::~EnvVarContainer()>
c0018c34:	59                   	pop    ecx
c0018c35:	5e                   	pop    esi
c0018c36:	6a 0c                	push   0xc
c0018c38:	55                   	push   ebp
c0018c39:	e8 e0 3f ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0018c3e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018c41:	83 c4 10             	add    esp,0x10
c0018c44:	89 f7                	mov    edi,esi
c0018c46:	66 90                	xchg   ax,ax
c0018c48:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018c4e:	85 c0                	test   eax,eax
c0018c50:	0f 84 b2 00 00 00    	je     c0018d08 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018c56:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0018c59:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018c5d:	31 c9                	xor    ecx,ecx
c0018c5f:	eb 17                	jmp    c0018c78 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0018c61:	8d 76 00             	lea    esi,[esi+0x0]
c0018c64:	41                   	inc    ecx
c0018c65:	83 f9 10             	cmp    ecx,0x10
c0018c68:	0f 84 9a 00 00 00    	je     c0018d08 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018c6e:	66 90                	xchg   ax,ax
c0018c70:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018c76:	66 90                	xchg   ax,ax
c0018c78:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0018c7f:	d3 fa                	sar    edx,cl
c0018c81:	83 e2 01             	and    edx,0x1
c0018c84:	74 de                	je     c0018c64 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018c86:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0018c89:	01 d2                	add    edx,edx
c0018c8b:	01 ca                	add    edx,ecx
c0018c8d:	8d 14 92             	lea    edx,[edx+edx*4]
c0018c90:	01 d0                	add    eax,edx
c0018c92:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018c98:	83 fd 07             	cmp    ebp,0x7
c0018c9b:	75 c7                	jne    c0018c64 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018c9d:	05 40 02 00 00       	add    eax,0x240
c0018ca2:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0018ca5:	83 fd ff             	cmp    ebp,0xffffffff
c0018ca8:	0f 8c ee 00 00 00    	jl     c0018d9c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0018cae:	0f 84 ac 01 00 00    	je     c0018e60 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0018cb4:	85 ed                	test   ebp,ebp
c0018cb6:	0f 84 90 01 00 00    	je     c0018e4c <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0018cbc:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018cbe:	75 a4                	jne    c0018c64 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018cc0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018cc6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018cca:	01 d0                	add    eax,edx
c0018ccc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018cd0:	83 ec 0c             	sub    esp,0xc
c0018cd3:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0018cd9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018cdc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018ce2:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018ce9:	50                   	push   eax
c0018cea:	e8 21 fe ff ff       	call   c0018b10 <unblockTask(ThreadControlBlock*)>
c0018cef:	83 c4 10             	add    esp,0x10
c0018cf2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018cf5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018cf9:	89 f7                	mov    edi,esi
c0018cfb:	41                   	inc    ecx
c0018cfc:	83 f9 10             	cmp    ecx,0x10
c0018cff:	0f 85 6b ff ff ff    	jne    c0018c70 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0018d05:	8d 76 00             	lea    esi,[esi+0x0]
c0018d08:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0018d0e:	85 c0                	test   eax,eax
c0018d10:	74 62                	je     c0018d74 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018d12:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0018d18:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0018d1e:	74 54                	je     c0018d74 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018d20:	83 ec 0c             	sub    esp,0xc
c0018d23:	68 24 94 02 c0       	push   0xc0029424
c0018d28:	e8 63 9f 00 00       	call   c0022c90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018d2d:	c7 04 24 24 94 02 c0 	mov    DWORD PTR [esp],0xc0029424
c0018d34:	89 c7                	mov    edi,eax
c0018d36:	e8 39 9f 00 00       	call   c0022c74 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018d3b:	83 c4 10             	add    esp,0x10
c0018d3e:	84 c0                	test   al,al
c0018d40:	0f 84 ce 00 00 00    	je     c0018e14 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0018d46:	66 90                	xchg   ax,ax
c0018d48:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018d4b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018d51:	85 d2                	test   edx,edx
c0018d53:	74 0f                	je     c0018d64 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0018d55:	83 ec 0c             	sub    esp,0xc
c0018d58:	8b 02                	mov    eax,DWORD PTR [edx]
c0018d5a:	52                   	push   edx
c0018d5b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018d5e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018d61:	83 c4 10             	add    esp,0x10
c0018d64:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0018d6e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0018d71:	8d 76 00             	lea    esi,[esi+0x0]
c0018d74:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0018d7a:	85 db                	test   ebx,ebx
c0018d7c:	74 16                	je     c0018d94 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018d7e:	83 ec 0c             	sub    esp,0xc
c0018d81:	53                   	push   ebx
c0018d82:	e8 7d 31 ff ff       	call   c000bf04 <VAS::~VAS()>
c0018d87:	58                   	pop    eax
c0018d88:	5a                   	pop    edx
c0018d89:	6a 14                	push   0x14
c0018d8b:	53                   	push   ebx
c0018d8c:	e8 8d 3e ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0018d91:	83 c4 10             	add    esp,0x10
c0018d94:	83 c4 1c             	add    esp,0x1c
c0018d97:	5b                   	pop    ebx
c0018d98:	5e                   	pop    esi
c0018d99:	5f                   	pop    edi
c0018d9a:	5d                   	pop    ebp
c0018d9b:	c3                   	ret    
c0018d9c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018da0:	83 ec 0c             	sub    esp,0xc
c0018da3:	68 3c 60 02 c0       	push   0xc002603c
c0018da8:	e8 42 bb ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0018dad:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018db0:	83 c4 10             	add    esp,0x10
c0018db3:	89 f7                	mov    edi,esi
c0018db5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018db9:	e9 a6 fe ff ff       	jmp    c0018c64 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018dbe:	66 90                	xchg   ax,ax
c0018dc0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018dc6:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0018dcc:	75 1e                	jne    c0018dec <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018dce:	83 ec 0c             	sub    esp,0xc
c0018dd1:	68 a4 60 02 c0       	push   0xc00260a4
c0018dd6:	e8 24 3f ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0018ddb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018de2:	e8 65 fa ff ff       	call   c001884c <blockTask(TaskState)>
c0018de7:	83 c4 10             	add    esp,0x10
c0018dea:	66 90                	xchg   ax,ax
c0018dec:	83 ec 08             	sub    esp,0x8
c0018def:	56                   	push   esi
c0018df0:	68 24 94 02 c0       	push   0xc0029424
c0018df5:	e8 56 9f 00 00       	call   c0022d50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018dfa:	c7 04 24 24 94 02 c0 	mov    DWORD PTR [esp],0xc0029424
c0018e01:	e8 8a 9e 00 00       	call   c0022c90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018e06:	83 c4 10             	add    esp,0x10
c0018e09:	39 f8                	cmp    eax,edi
c0018e0b:	0f 84 37 ff ff ff    	je     c0018d48 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0018e11:	8d 76 00             	lea    esi,[esi+0x0]
c0018e14:	83 ec 0c             	sub    esp,0xc
c0018e17:	68 24 94 02 c0       	push   0xc0029424
c0018e1c:	e8 6f 9e 00 00       	call   c0022c90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018e21:	c7 04 24 24 94 02 c0 	mov    DWORD PTR [esp],0xc0029424
c0018e28:	89 c6                	mov    esi,eax
c0018e2a:	e8 69 9e 00 00       	call   c0022c98 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018e2f:	83 c4 10             	add    esp,0x10
c0018e32:	39 f3                	cmp    ebx,esi
c0018e34:	74 b6                	je     c0018dec <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018e36:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0018e39:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018e3c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0018e42:	75 a8                	jne    c0018dec <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018e44:	e9 77 ff ff ff       	jmp    c0018dc0 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0018e49:	8d 76 00             	lea    esi,[esi+0x0]
c0018e4c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018e50:	83 ec 0c             	sub    esp,0xc
c0018e53:	68 70 60 02 c0       	push   0xc0026070
c0018e58:	e9 4b ff ff ff       	jmp    c0018da8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e60:	8b 36                	mov    esi,DWORD PTR [esi]
c0018e62:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018e66:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0018e69:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018e6c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0018e72:	01 d7                	add    edi,edx
c0018e74:	89 f8                	mov    eax,edi
c0018e76:	e9 51 fe ff ff       	jmp    c0018ccc <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0018e7b:	90                   	nop

c0018e7c <cleanerTaskFunction(void*)>:
c0018e7c:	53                   	push   ebx
c0018e7d:	83 ec 08             	sub    esp,0x8
c0018e80:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0018e85:	48                   	dec    eax
c0018e86:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0018e8b:	75 03                	jne    c0018e90 <cleanerTaskFunction(void*)+0x14>
c0018e8d:	fb                   	sti    
c0018e8e:	66 90                	xchg   ax,ax
c0018e90:	fa                   	cli    
c0018e91:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0018e96:	80 3d ec 93 02 c0 00 	cmp    BYTE PTR ds:0xc00293ec,0x0
c0018e9d:	8d 50 01             	lea    edx,[eax+0x1]
c0018ea0:	89 15 08 94 02 c0    	mov    DWORD PTR ds:0xc0029408,edx
c0018ea6:	0f 84 ac 00 00 00    	je     c0018f58 <cleanerTaskFunction(void*)+0xdc>
c0018eac:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0018eb1:	85 c0                	test   eax,eax
c0018eb3:	75 03                	jne    c0018eb8 <cleanerTaskFunction(void*)+0x3c>
c0018eb5:	fb                   	sti    
c0018eb6:	66 90                	xchg   ax,ax
c0018eb8:	c6 05 ec 93 02 c0 00 	mov    BYTE PTR ds:0xc00293ec,0x0
c0018ebf:	fa                   	cli    
c0018ec0:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c0018ec6:	ff 05 04 94 02 c0    	inc    DWORD PTR ds:0xc0029404
c0018ecc:	fa                   	cli    
c0018ecd:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c0018ed3:	eb 2b                	jmp    c0018f00 <cleanerTaskFunction(void*)+0x84>
c0018ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ed8:	83 ec 0c             	sub    esp,0xc
c0018edb:	68 0c 94 02 c0       	push   0xc002940c
c0018ee0:	e8 ab 9d 00 00       	call   c0022c90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018ee5:	c7 04 24 0c 94 02 c0 	mov    DWORD PTR [esp],0xc002940c
c0018eec:	89 c3                	mov    ebx,eax
c0018eee:	e8 a5 9d 00 00       	call   c0022c98 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018ef3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018ef6:	e8 b9 fc ff ff       	call   c0018bb4 <cleanupTerminatedTask(ThreadControlBlock*)>
c0018efb:	83 c4 10             	add    esp,0x10
c0018efe:	66 90                	xchg   ax,ax
c0018f00:	83 ec 0c             	sub    esp,0xc
c0018f03:	68 0c 94 02 c0       	push   0xc002940c
c0018f08:	e8 67 9d 00 00       	call   c0022c74 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018f0d:	83 c4 10             	add    esp,0x10
c0018f10:	84 c0                	test   al,al
c0018f12:	74 c4                	je     c0018ed8 <cleanerTaskFunction(void*)+0x5c>
c0018f14:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0018f19:	48                   	dec    eax
c0018f1a:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0018f1f:	75 03                	jne    c0018f24 <cleanerTaskFunction(void*)+0xa8>
c0018f21:	fb                   	sti    
c0018f22:	66 90                	xchg   ax,ax
c0018f24:	a1 04 94 02 c0       	mov    eax,ds:0xc0029404
c0018f29:	48                   	dec    eax
c0018f2a:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c0018f2f:	0f 85 4b ff ff ff    	jne    c0018e80 <cleanerTaskFunction(void*)+0x4>
c0018f35:	a1 00 94 02 c0       	mov    eax,ds:0xc0029400
c0018f3a:	85 c0                	test   eax,eax
c0018f3c:	0f 84 3e ff ff ff    	je     c0018e80 <cleanerTaskFunction(void*)+0x4>
c0018f42:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c0018f4c:	e8 03 f7 ff ff       	call   c0018654 <schedule()>
c0018f51:	e9 2a ff ff ff       	jmp    c0018e80 <cleanerTaskFunction(void*)+0x4>
c0018f56:	66 90                	xchg   ax,ax
c0018f58:	83 ec 0c             	sub    esp,0xc
c0018f5b:	6a 02                	push   0x2
c0018f5d:	e8 c2 f8 ff ff       	call   c0018824 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018f62:	83 c4 10             	add    esp,0x10
c0018f65:	e9 4e ff ff ff       	jmp    c0018eb8 <cleanerTaskFunction(void*)+0x3c>
c0018f6a:	66 90                	xchg   ax,ax

c0018f6c <terminateTask(int)>:
c0018f6c:	83 ec 14             	sub    esp,0x14
c0018f6f:	fa                   	cli    
c0018f70:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c0018f76:	ff 05 04 94 02 c0    	inc    DWORD PTR ds:0xc0029404
c0018f7c:	fa                   	cli    
c0018f7d:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c0018f83:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018f87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f8c:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0018f8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f94:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018f97:	50                   	push   eax
c0018f98:	68 0c 94 02 c0       	push   0xc002940c
c0018f9d:	e8 ae 9d 00 00       	call   c0022d50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018fa2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018fa7:	83 c4 10             	add    esp,0x10
c0018faa:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018fb1:	a1 e8 93 02 c0       	mov    eax,ds:0xc00293e8
c0018fb6:	85 c0                	test   eax,eax
c0018fb8:	74 5e                	je     c0019018 <terminateTask(int)+0xac>
c0018fba:	83 ec 0c             	sub    esp,0xc
c0018fbd:	c6 05 ec 93 02 c0 01 	mov    BYTE PTR ds:0xc00293ec,0x1
c0018fc4:	50                   	push   eax
c0018fc5:	e8 46 fb ff ff       	call   c0018b10 <unblockTask(ThreadControlBlock*)>
c0018fca:	83 c4 10             	add    esp,0x10
c0018fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0018fd0:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0018fd5:	48                   	dec    eax
c0018fd6:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0018fdb:	75 03                	jne    c0018fe0 <terminateTask(int)+0x74>
c0018fdd:	fb                   	sti    
c0018fde:	66 90                	xchg   ax,ax
c0018fe0:	a1 04 94 02 c0       	mov    eax,ds:0xc0029404
c0018fe5:	48                   	dec    eax
c0018fe6:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c0018feb:	75 0b                	jne    c0018ff8 <terminateTask(int)+0x8c>
c0018fed:	83 3d 00 94 02 c0 00 	cmp    DWORD PTR ds:0xc0029400,0x0
c0018ff4:	75 36                	jne    c001902c <terminateTask(int)+0xc0>
c0018ff6:	66 90                	xchg   ax,ax
c0018ff8:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0018ffd:	48                   	dec    eax
c0018ffe:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0019003:	75 03                	jne    c0019008 <terminateTask(int)+0x9c>
c0019005:	fb                   	sti    
c0019006:	66 90                	xchg   ax,ax
c0019008:	fa                   	cli    
c0019009:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c001900f:	90                   	nop
c0019010:	e8 3f f6 ff ff       	call   c0018654 <schedule()>
c0019015:	eb e1                	jmp    c0018ff8 <terminateTask(int)+0x8c>
c0019017:	90                   	nop
c0019018:	83 ec 0c             	sub    esp,0xc
c001901b:	68 a1 5f 02 c0       	push   0xc0025fa1
c0019020:	e8 da 3c ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0019025:	83 c4 10             	add    esp,0x10
c0019028:	eb a6                	jmp    c0018fd0 <terminateTask(int)+0x64>
c001902a:	66 90                	xchg   ax,ax
c001902c:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c0019036:	eb d8                	jmp    c0019010 <terminateTask(int)+0xa4>

c0019038 <Thr::terminateFromIRQ(int)>:
c0019038:	83 ec 18             	sub    esp,0x18
c001903b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001903f:	e8 28 ff ff ff       	call   c0018f6c <terminateTask(int)>

c0019044 <Semaphore::release()>:
c0019044:	83 ec 0c             	sub    esp,0xc
c0019047:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001904b:	fa                   	cli    
c001904c:	a1 04 94 02 c0       	mov    eax,ds:0xc0029404
c0019051:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c0019057:	8d 48 01             	lea    ecx,[eax+0x1]
c001905a:	89 0d 04 94 02 c0    	mov    DWORD PTR ds:0xc0029404,ecx
c0019060:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0019063:	85 c9                	test   ecx,ecx
c0019065:	74 41                	je     c00190a8 <Semaphore::release()+0x64>
c0019067:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001906a:	83 ec 0c             	sub    esp,0xc
c001906d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019070:	51                   	push   ecx
c0019071:	e8 9a fa ff ff       	call   c0018b10 <unblockTask(ThreadControlBlock*)>
c0019076:	a1 04 94 02 c0       	mov    eax,ds:0xc0029404
c001907b:	83 c4 10             	add    esp,0x10
c001907e:	48                   	dec    eax
c001907f:	90                   	nop
c0019080:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c0019085:	85 c0                	test   eax,eax
c0019087:	75 0b                	jne    c0019094 <Semaphore::release()+0x50>
c0019089:	a1 00 94 02 c0       	mov    eax,ds:0xc0029400
c001908e:	85 c0                	test   eax,eax
c0019090:	75 1e                	jne    c00190b0 <Semaphore::release()+0x6c>
c0019092:	66 90                	xchg   ax,ax
c0019094:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0019099:	48                   	dec    eax
c001909a:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c001909f:	75 03                	jne    c00190a4 <Semaphore::release()+0x60>
c00190a1:	fb                   	sti    
c00190a2:	66 90                	xchg   ax,ax
c00190a4:	83 c4 0c             	add    esp,0xc
c00190a7:	c3                   	ret    
c00190a8:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00190ab:	eb d3                	jmp    c0019080 <Semaphore::release()+0x3c>
c00190ad:	8d 76 00             	lea    esi,[esi+0x0]
c00190b0:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c00190ba:	e8 95 f5 ff ff       	call   c0018654 <schedule()>
c00190bf:	eb d3                	jmp    c0019094 <Semaphore::release()+0x50>
c00190c1:	8d 76 00             	lea    esi,[esi+0x0]

c00190c4 <__static_initialization_and_destruction_0(int, int)>:
c00190c4:	83 ec 0c             	sub    esp,0xc
c00190c7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00190cc:	0f 85 8e 00 00 00    	jne    c0019160 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00190d2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00190da:	0f 85 80 00 00 00    	jne    c0019160 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00190e0:	83 ec 0c             	sub    esp,0xc
c00190e3:	68 24 94 02 c0       	push   0xc0029424
c00190e8:	e8 0f 9f 00 00       	call   c0022ffc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00190ed:	83 c4 10             	add    esp,0x10
c00190f0:	83 ec 04             	sub    esp,0x4
c00190f3:	68 44 71 02 c0       	push   0xc0027144
c00190f8:	68 24 94 02 c0       	push   0xc0029424
c00190fd:	68 ac 2f 02 c0       	push   0xc0022fac
c0019102:	e8 91 3a ff ff       	call   c000cb98 <__cxa_atexit>
c0019107:	83 c4 10             	add    esp,0x10
c001910a:	83 ec 0c             	sub    esp,0xc
c001910d:	68 18 94 02 c0       	push   0xc0029418
c0019112:	e8 e5 9e 00 00       	call   c0022ffc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019117:	83 c4 10             	add    esp,0x10
c001911a:	83 ec 04             	sub    esp,0x4
c001911d:	68 44 71 02 c0       	push   0xc0027144
c0019122:	68 18 94 02 c0       	push   0xc0029418
c0019127:	68 ac 2f 02 c0       	push   0xc0022fac
c001912c:	e8 67 3a ff ff       	call   c000cb98 <__cxa_atexit>
c0019131:	83 c4 10             	add    esp,0x10
c0019134:	83 ec 0c             	sub    esp,0xc
c0019137:	68 0c 94 02 c0       	push   0xc002940c
c001913c:	e8 bb 9e 00 00       	call   c0022ffc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019141:	83 c4 10             	add    esp,0x10
c0019144:	83 ec 04             	sub    esp,0x4
c0019147:	68 44 71 02 c0       	push   0xc0027144
c001914c:	68 0c 94 02 c0       	push   0xc002940c
c0019151:	68 ac 2f 02 c0       	push   0xc0022fac
c0019156:	e8 3d 3a ff ff       	call   c000cb98 <__cxa_atexit>
c001915b:	83 c4 10             	add    esp,0x10
c001915e:	66 90                	xchg   ax,ax
c0019160:	90                   	nop
c0019161:	83 c4 0c             	add    esp,0xc
c0019164:	c3                   	ret    
c0019165:	8d 76 00             	lea    esi,[esi+0x0]

c0019168 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0019168:	83 ec 0c             	sub    esp,0xc
c001916b:	83 ec 08             	sub    esp,0x8
c001916e:	68 ff ff 00 00       	push   0xffff
c0019173:	6a 01                	push   0x1
c0019175:	e8 4a ff ff ff       	call   c00190c4 <__static_initialization_and_destruction_0(int, int)>
c001917a:	83 c4 10             	add    esp,0x10
c001917d:	83 c4 0c             	add    esp,0xc
c0019180:	c3                   	ret    

c0019181 <Vm::inbv(unsigned short)>:
c0019181:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019185:	66 81 fa fe fe       	cmp    dx,0xfefe
c001918a:	75 06                	jne    c0019192 <Vm::inbv(unsigned short)+0x11>
c001918c:	a0 6c 94 02 c0       	mov    al,ds:0xc002946c
c0019191:	c3                   	ret    
c0019192:	ec                   	in     al,dx
c0019193:	c3                   	ret    

c0019194 <Vm::outbv(unsigned short, unsigned char)>:
c0019194:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019198:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001919c:	66 81 fa fe fe       	cmp    dx,0xfefe
c00191a1:	75 25                	jne    c00191c8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00191a3:	8b 0d 6c 94 02 c0    	mov    ecx,DWORD PTR ds:0xc002946c
c00191a9:	8d 51 01             	lea    edx,[ecx+0x1]
c00191ac:	88 81 80 94 02 c0    	mov    BYTE PTR [ecx-0x3ffd6b80],al
c00191b2:	89 15 6c 94 02 c0    	mov    DWORD PTR ds:0xc002946c,edx
c00191b8:	83 fa 20             	cmp    edx,0x20
c00191bb:	75 0c                	jne    c00191c9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00191bd:	c7 05 6c 94 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002946c,0x1f
c00191c7:	c3                   	ret    
c00191c8:	ee                   	out    dx,al
c00191c9:	c3                   	ret    

c00191ca <Vm::realToLinear(unsigned short, unsigned short)>:
c00191ca:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00191cf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00191d4:	c1 e0 04             	shl    eax,0x4
c00191d7:	01 d0                	add    eax,edx
c00191d9:	c3                   	ret    

c00191da <Vm::getSegment(unsigned int)>:
c00191da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00191de:	c1 e8 10             	shr    eax,0x10
c00191e1:	c3                   	ret    

c00191e2 <Vm::getOffset(unsigned int)>:
c00191e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00191e6:	c3                   	ret    

c00191e7 <Vm::mainloop2()>:
c00191e7:	83 ec 18             	sub    esp,0x18
c00191ea:	fa                   	cli    
c00191eb:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c00191f1:	6a 02                	push   0x2
c00191f3:	c6 05 65 94 02 c0 01 	mov    BYTE PTR ds:0xc0029465,0x1
c00191fa:	e8 25 f6 ff ff       	call   c0018824 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00191ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019204:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0019208:	52                   	push   edx
c0019209:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c001920d:	52                   	push   edx
c001920e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0019212:	52                   	push   edx
c0019213:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0019217:	50                   	push   eax
c0019218:	e8 12 70 fe ff       	call   c000022f <goToVM86>
c001921d:	83 c4 2c             	add    esp,0x2c
c0019220:	c3                   	ret    

c0019221 <Vm::mainVm8086Loop(void*)>:
c0019221:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0019226:	48                   	dec    eax
c0019227:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c001922c:	75 01                	jne    c001922f <Vm::mainVm8086Loop(void*)+0xe>
c001922e:	fb                   	sti    
c001922f:	eb b6                	jmp    c00191e7 <Vm::mainloop2()>

c0019231 <Vm::mainloop3(unsigned long)>:
c0019231:	83 ec 18             	sub    esp,0x18
c0019234:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019238:	fa                   	cli    
c0019239:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c001923f:	6a 02                	push   0x2
c0019241:	c6 05 64 94 02 c0 01 	mov    BYTE PTR ds:0xc0029464,0x1
c0019248:	a3 60 94 02 c0       	mov    ds:0xc0029460,eax
c001924d:	e8 d2 f5 ff ff       	call   c0018824 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019252:	83 c4 1c             	add    esp,0x1c
c0019255:	eb 90                	jmp    c00191e7 <Vm::mainloop2()>

c0019257 <Vm::initialise8086()>:
c0019257:	83 ec 0c             	sub    esp,0xc
c001925a:	68 80 00 00 00       	push   0x80
c001925f:	6a 00                	push   0x0
c0019261:	68 21 92 01 c0       	push   0xc0019221
c0019266:	ff 35 30 94 02 c0    	push   DWORD PTR ds:0xc0029430
c001926c:	e8 c7 f1 ff ff       	call   c0018438 <Process::createThread(void (*)(void*), void*, int)>
c0019271:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019278:	a3 68 94 02 c0       	mov    ds:0xc0029468,eax
c001927d:	68 00 01 00 00       	push   0x100
c0019282:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0019287:	6a 00                	push   0x0
c0019289:	6a 00                	push   0x0
c001928b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0019291:	e8 e0 30 ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019296:	83 c4 2c             	add    esp,0x2c
c0019299:	c3                   	ret    

c001929a <Vm::finish8086()>:
c001929a:	53                   	push   ebx
c001929b:	83 ec 08             	sub    esp,0x8
c001929e:	fa                   	cli    
c001929f:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c00192a5:	80 3d 64 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029464,0x0
c00192ac:	75 15                	jne    c00192c3 <Vm::finish8086()+0x29>
c00192ae:	e8 a1 f3 ff ff       	call   c0018654 <schedule()>
c00192b3:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c00192b8:	48                   	dec    eax
c00192b9:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c00192be:	75 de                	jne    c001929e <Vm::finish8086()+0x4>
c00192c0:	fb                   	sti    
c00192c1:	eb db                	jmp    c001929e <Vm::finish8086()+0x4>
c00192c3:	83 ec 0c             	sub    esp,0xc
c00192c6:	8b 1d 60 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029460
c00192cc:	ff 35 68 94 02 c0    	push   DWORD PTR ds:0xc0029468
c00192d2:	c6 05 64 94 02 c0 00 	mov    BYTE PTR ds:0xc0029464,0x0
c00192d9:	e8 32 f8 ff ff       	call   c0018b10 <unblockTask(ThreadControlBlock*)>
c00192de:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c00192e3:	83 c4 10             	add    esp,0x10
c00192e6:	8d 50 ff             	lea    edx,[eax-0x1]
c00192e9:	89 15 08 94 02 c0    	mov    DWORD PTR ds:0xc0029408,edx
c00192ef:	85 d2                	test   edx,edx
c00192f1:	75 01                	jne    c00192f4 <Vm::finish8086()+0x5a>
c00192f3:	fb                   	sti    
c00192f4:	89 d8                	mov    eax,ebx
c00192f6:	83 c4 08             	add    esp,0x8
c00192f9:	5b                   	pop    ebx
c00192fa:	c3                   	ret    

c00192fb <Vm::getOutput8086(unsigned char*)>:
c00192fb:	57                   	push   edi
c00192fc:	8b 0d 6c 94 02 c0    	mov    ecx,DWORD PTR ds:0xc002946c
c0019302:	56                   	push   esi
c0019303:	be 80 94 02 c0       	mov    esi,0xc0029480
c0019308:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001930c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001930e:	a1 6c 94 02 c0       	mov    eax,ds:0xc002946c
c0019313:	5e                   	pop    esi
c0019314:	c7 05 6c 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002946c,0x0
c001931e:	5f                   	pop    edi
c001931f:	c3                   	ret    

c0019320 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019320:	55                   	push   ebp
c0019321:	57                   	push   edi
c0019322:	56                   	push   esi
c0019323:	53                   	push   ebx
c0019324:	83 ec 2c             	sub    esp,0x2c
c0019327:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001932b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001932f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0019333:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0019337:	fa                   	cli    
c0019338:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c001933e:	0f b6 35 65 94 02 c0 	movzx  esi,BYTE PTR ds:0xc0029465
c0019345:	89 f0                	mov    eax,esi
c0019347:	84 c0                	test   al,al
c0019349:	75 1d                	jne    c0019368 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001934b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001934f:	e8 00 f3 ff ff       	call   c0018654 <schedule()>
c0019354:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0019359:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001935d:	48                   	dec    eax
c001935e:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0019363:	75 d2                	jne    c0019337 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019365:	fb                   	sti    
c0019366:	eb cf                	jmp    c0019337 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019368:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c001936d:	c7 05 6c 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002946c,0x0
c0019377:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c001937b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001937f:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0019383:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0019387:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001938b:	50                   	push   eax
c001938c:	6a 20                	push   0x20
c001938e:	6a 00                	push   0x0
c0019390:	68 80 94 02 c0       	push   0xc0029480
c0019395:	e8 ea 72 fe ff       	call   c0000684 <memset>
c001939a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00193a1:	e8 69 06 ff ff       	call   c0009a0f <malloc>
c00193a6:	83 c4 0c             	add    esp,0xc
c00193a9:	89 c3                	mov    ebx,eax
c00193ab:	ff 35 30 94 02 c0    	push   DWORD PTR ds:0xc0029430
c00193b1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00193b5:	50                   	push   eax
c00193b6:	e8 af 3e ff ff       	call   c000d26a <File::File(char const*, Process*)>
c00193bb:	83 c4 10             	add    esp,0x10
c00193be:	85 db                	test   ebx,ebx
c00193c0:	75 0a                	jne    c00193cc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00193c2:	83 ec 0c             	sub    esp,0xc
c00193c5:	68 cc 60 02 c0       	push   0xc00260cc
c00193ca:	eb 3e                	jmp    c001940a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00193cc:	50                   	push   eax
c00193cd:	8d 44 24 17          	lea    eax,[esp+0x17]
c00193d1:	50                   	push   eax
c00193d2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00193d6:	50                   	push   eax
c00193d7:	53                   	push   ebx
c00193d8:	e8 fb 41 ff ff       	call   c000d5d8 <File::stat(unsigned long long*, bool*)>
c00193dd:	83 c4 10             	add    esp,0x10
c00193e0:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00193e5:	74 0a                	je     c00193f1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00193e7:	83 ec 0c             	sub    esp,0xc
c00193ea:	68 e0 60 02 c0       	push   0xc00260e0
c00193ef:	eb 19                	jmp    c001940a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00193f1:	51                   	push   ecx
c00193f2:	51                   	push   ecx
c00193f3:	6a 01                	push   0x1
c00193f5:	53                   	push   ebx
c00193f6:	e8 31 3f ff ff       	call   c000d32c <File::open(FileOpenMode)>
c00193fb:	83 c4 10             	add    esp,0x10
c00193fe:	85 c0                	test   eax,eax
c0019400:	74 24                	je     c0019426 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0019402:	83 ec 0c             	sub    esp,0xc
c0019405:	68 f9 60 02 c0       	push   0xc00260f9
c001940a:	e8 e0 b4 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c001940f:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0019414:	83 c4 10             	add    esp,0x10
c0019417:	48                   	dec    eax
c0019418:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c001941d:	85 c0                	test   eax,eax
c001941f:	75 01                	jne    c0019422 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0019421:	fb                   	sti    
c0019422:	31 f6                	xor    esi,esi
c0019424:	eb 58                	jmp    c001947e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0019426:	0f b7 ed             	movzx  ebp,bp
c0019429:	50                   	push   eax
c001942a:	0f b7 ff             	movzx  edi,di
c001942d:	50                   	push   eax
c001942e:	55                   	push   ebp
c001942f:	57                   	push   edi
c0019430:	e8 95 fd ff ff       	call   c00191ca <Vm::realToLinear(unsigned short, unsigned short)>
c0019435:	5a                   	pop    edx
c0019436:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019438:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001943c:	51                   	push   ecx
c001943d:	50                   	push   eax
c001943e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019442:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019446:	53                   	push   ebx
c0019447:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001944a:	83 c4 14             	add    esp,0x14
c001944d:	53                   	push   ebx
c001944e:	e8 37 3f ff ff       	call   c000d38a <File::close()>
c0019453:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0019458:	83 c4 10             	add    esp,0x10
c001945b:	48                   	dec    eax
c001945c:	c6 05 65 94 02 c0 00 	mov    BYTE PTR ds:0xc0029465,0x0
c0019463:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0019468:	85 c0                	test   eax,eax
c001946a:	75 01                	jne    c001946d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001946c:	fb                   	sti    
c001946d:	83 ec 0c             	sub    esp,0xc
c0019470:	ff 35 68 94 02 c0    	push   DWORD PTR ds:0xc0029468
c0019476:	e8 95 f6 ff ff       	call   c0018b10 <unblockTask(ThreadControlBlock*)>
c001947b:	83 c4 10             	add    esp,0x10
c001947e:	83 c4 2c             	add    esp,0x2c
c0019481:	89 f0                	mov    eax,esi
c0019483:	5b                   	pop    ebx
c0019484:	5e                   	pop    esi
c0019485:	5f                   	pop    edi
c0019486:	5d                   	pop    ebp
c0019487:	c3                   	ret    

c0019488 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0019488:	57                   	push   edi
c0019489:	56                   	push   esi
c001948a:	53                   	push   ebx
c001948b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001948f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019493:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019497:	83 e8 06             	sub    eax,0x6
c001949a:	0f b7 c0             	movzx  eax,ax
c001949d:	50                   	push   eax
c001949e:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00194a3:	50                   	push   eax
c00194a4:	e8 21 fd ff ff       	call   c00191ca <Vm::realToLinear(unsigned short, unsigned short)>
c00194a9:	5a                   	pop    edx
c00194aa:	5e                   	pop    esi
c00194ab:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00194ae:	8d 56 fa             	lea    edx,[esi-0x6]
c00194b1:	81 e2 ff ff 00 00    	and    edx,0xffff
c00194b7:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00194ba:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00194bd:	83 c2 02             	add    edx,0x2
c00194c0:	66 89 10             	mov    WORD PTR [eax],dx
c00194c3:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00194c6:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00194ca:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00194cd:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00194d1:	89 d6                	mov    esi,edx
c00194d3:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00194d9:	66 81 e6 ff fd       	and    si,0xfdff
c00194de:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00194e2:	74 07                	je     c00194eb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00194e4:	89 d6                	mov    esi,edx
c00194e6:	66 81 ce 00 02       	or     si,0x200
c00194eb:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00194ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194f4:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00194f8:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019500:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019503:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001950b:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001950e:	5b                   	pop    ebx
c001950f:	5e                   	pop    esi
c0019510:	5f                   	pop    edi
c0019511:	c3                   	ret    

c0019512 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019512:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019517:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001951c:	c1 e0 04             	shl    eax,0x4
c001951f:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019522:	c3                   	ret    

c0019523 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019523:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019528:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001952d:	c1 e0 04             	shl    eax,0x4
c0019530:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019534:	c3                   	ret    

c0019535 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019535:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001953a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001953f:	c1 e0 04             	shl    eax,0x4
c0019542:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019545:	c3                   	ret    

c0019546 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019546:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001954b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019550:	c1 e0 04             	shl    eax,0x4
c0019553:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019557:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001955a:	c3                   	ret    

c001955b <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001955b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019560:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019565:	c1 e0 04             	shl    eax,0x4
c0019568:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001956c:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019570:	c3                   	ret    

c0019571 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0019571:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019576:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001957b:	c1 e0 04             	shl    eax,0x4
c001957e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019582:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0019585:	c3                   	ret    

c0019586 <Vm::faultHandler(regs*)>:
c0019586:	55                   	push   ebp
c0019587:	57                   	push   edi
c0019588:	56                   	push   esi
c0019589:	53                   	push   ebx
c001958a:	83 ec 1c             	sub    esp,0x1c
c001958d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019591:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019594:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0019598:	0f b7 f8             	movzx  edi,ax
c001959b:	52                   	push   edx
c001959c:	0f b7 c0             	movzx  eax,ax
c001959f:	50                   	push   eax
c00195a0:	e8 25 fc ff ff       	call   c00191ca <Vm::realToLinear(unsigned short, unsigned short)>
c00195a5:	5a                   	pop    edx
c00195a6:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00195a9:	59                   	pop    ecx
c00195aa:	89 c1                	mov    ecx,eax
c00195ac:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00195af:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00195b3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00195b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00195bc:	0f b7 c5             	movzx  eax,bp
c00195bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00195c7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00195cb:	e8 fa fb ff ff       	call   c00191ca <Vm::realToLinear(unsigned short, unsigned short)>
c00195d0:	5e                   	pop    esi
c00195d1:	be 06 00 00 00       	mov    esi,0x6
c00195d6:	5a                   	pop    edx
c00195d7:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00195dc:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00195e1:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00195e4:	80 fa 9d             	cmp    dl,0x9d
c00195e7:	0f 84 2c 02 00 00    	je     c0019819 <Vm::faultHandler(regs*)+0x293>
c00195ed:	0f 87 91 00 00 00    	ja     c0019684 <Vm::faultHandler(regs*)+0xfe>
c00195f3:	80 fa 66             	cmp    dl,0x66
c00195f6:	0f 84 98 01 00 00    	je     c0019794 <Vm::faultHandler(regs*)+0x20e>
c00195fc:	77 47                	ja     c0019645 <Vm::faultHandler(regs*)+0xbf>
c00195fe:	80 fa 36             	cmp    dl,0x36
c0019601:	0f 84 80 01 00 00    	je     c0019787 <Vm::faultHandler(regs*)+0x201>
c0019607:	77 1a                	ja     c0019623 <Vm::faultHandler(regs*)+0x9d>
c0019609:	80 fa 26             	cmp    dl,0x26
c001960c:	0f 84 4e 01 00 00    	je     c0019760 <Vm::faultHandler(regs*)+0x1da>
c0019612:	80 fa 2e             	cmp    dl,0x2e
c0019615:	0f 85 e2 05 00 00    	jne    c0019bfd <Vm::faultHandler(regs*)+0x677>
c001961b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001961e:	31 f6                	xor    esi,esi
c0019620:	41                   	inc    ecx
c0019621:	eb be                	jmp    c00195e1 <Vm::faultHandler(regs*)+0x5b>
c0019623:	80 fa 64             	cmp    dl,0x64
c0019626:	0f 84 41 01 00 00    	je     c001976d <Vm::faultHandler(regs*)+0x1e7>
c001962c:	0f 87 48 01 00 00    	ja     c001977a <Vm::faultHandler(regs*)+0x1f4>
c0019632:	80 fa 3e             	cmp    dl,0x3e
c0019635:	0f 85 c2 05 00 00    	jne    c0019bfd <Vm::faultHandler(regs*)+0x677>
c001963b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001963e:	be 01 00 00 00       	mov    esi,0x1
c0019643:	eb db                	jmp    c0019620 <Vm::faultHandler(regs*)+0x9a>
c0019645:	80 fa 6d             	cmp    dl,0x6d
c0019648:	0f 84 ec 02 00 00    	je     c001993a <Vm::faultHandler(regs*)+0x3b4>
c001964e:	77 17                	ja     c0019667 <Vm::faultHandler(regs*)+0xe1>
c0019650:	80 fa 67             	cmp    dl,0x67
c0019653:	0f 84 48 01 00 00    	je     c00197a1 <Vm::faultHandler(regs*)+0x21b>
c0019659:	80 fa 6c             	cmp    dl,0x6c
c001965c:	0f 84 69 02 00 00    	je     c00198cb <Vm::faultHandler(regs*)+0x345>
c0019662:	e9 96 05 00 00       	jmp    c0019bfd <Vm::faultHandler(regs*)+0x677>
c0019667:	80 fa 6f             	cmp    dl,0x6f
c001966a:	0f 84 f4 03 00 00    	je     c0019a64 <Vm::faultHandler(regs*)+0x4de>
c0019670:	0f 82 59 03 00 00    	jb     c00199cf <Vm::faultHandler(regs*)+0x449>
c0019676:	80 fa 9c             	cmp    dl,0x9c
c0019679:	0f 84 2f 01 00 00    	je     c00197ae <Vm::faultHandler(regs*)+0x228>
c001967f:	e9 79 05 00 00       	jmp    c0019bfd <Vm::faultHandler(regs*)+0x677>
c0019684:	80 fa ec             	cmp    dl,0xec
c0019687:	0f 84 14 05 00 00    	je     c0019ba1 <Vm::faultHandler(regs*)+0x61b>
c001968d:	77 7b                	ja     c001970a <Vm::faultHandler(regs*)+0x184>
c001968f:	80 fa e4             	cmp    dl,0xe4
c0019692:	0f 84 93 04 00 00    	je     c0019b2b <Vm::faultHandler(regs*)+0x5a5>
c0019698:	77 53                	ja     c00196ed <Vm::faultHandler(regs*)+0x167>
c001969a:	80 fa cd             	cmp    dl,0xcd
c001969d:	0f 84 d9 01 00 00    	je     c001987c <Vm::faultHandler(regs*)+0x2f6>
c00196a3:	80 fa cf             	cmp    dl,0xcf
c00196a6:	0f 85 51 05 00 00    	jne    c0019bfd <Vm::faultHandler(regs*)+0x677>
c00196ac:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00196af:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00196b2:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00196b6:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00196b9:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00196bd:	81 ca 00 02 02 00    	or     edx,0x20200
c00196c3:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00196c6:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00196ca:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00196d0:	66 c1 e8 09          	shr    ax,0x9
c00196d4:	83 e0 01             	and    eax,0x1
c00196d7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00196da:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00196dd:	83 c0 06             	add    eax,0x6
c00196e0:	25 ff ff 00 00       	and    eax,0xffff
c00196e5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00196e8:	e9 0c 05 00 00       	jmp    c0019bf9 <Vm::faultHandler(regs*)+0x673>
c00196ed:	80 fa e6             	cmp    dl,0xe6
c00196f0:	0f 84 7f 04 00 00    	je     c0019b75 <Vm::faultHandler(regs*)+0x5ef>
c00196f6:	0f 82 4b 04 00 00    	jb     c0019b47 <Vm::faultHandler(regs*)+0x5c1>
c00196fc:	80 fa e7             	cmp    dl,0xe7
c00196ff:	0f 84 87 04 00 00    	je     c0019b8c <Vm::faultHandler(regs*)+0x606>
c0019705:	e9 f3 04 00 00       	jmp    c0019bfd <Vm::faultHandler(regs*)+0x677>
c001970a:	80 fa ef             	cmp    dl,0xef
c001970d:	0f 84 d1 04 00 00    	je     c0019be4 <Vm::faultHandler(regs*)+0x65e>
c0019713:	77 28                	ja     c001973d <Vm::faultHandler(regs*)+0x1b7>
c0019715:	80 fa ed             	cmp    dl,0xed
c0019718:	0f 84 9f 04 00 00    	je     c0019bbd <Vm::faultHandler(regs*)+0x637>
c001971e:	80 fa ee             	cmp    dl,0xee
c0019721:	0f 85 d6 04 00 00    	jne    c0019bfd <Vm::faultHandler(regs*)+0x677>
c0019727:	50                   	push   eax
c0019728:	50                   	push   eax
c0019729:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001972d:	50                   	push   eax
c001972e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019732:	50                   	push   eax
c0019733:	e8 5c fa ff ff       	call   c0019194 <Vm::outbv(unsigned short, unsigned char)>
c0019738:	e9 9f 04 00 00       	jmp    c0019bdc <Vm::faultHandler(regs*)+0x656>
c001973d:	80 fa fa             	cmp    dl,0xfa
c0019740:	0f 84 69 01 00 00    	je     c00198af <Vm::faultHandler(regs*)+0x329>
c0019746:	80 fa fb             	cmp    dl,0xfb
c0019749:	0f 84 6e 01 00 00    	je     c00198bd <Vm::faultHandler(regs*)+0x337>
c001974f:	80 fa f3             	cmp    dl,0xf3
c0019752:	0f 85 a5 04 00 00    	jne    c0019bfd <Vm::faultHandler(regs*)+0x677>
c0019758:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001975b:	e9 c0 fe ff ff       	jmp    c0019620 <Vm::faultHandler(regs*)+0x9a>
c0019760:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019763:	be 02 00 00 00       	mov    esi,0x2
c0019768:	e9 b3 fe ff ff       	jmp    c0019620 <Vm::faultHandler(regs*)+0x9a>
c001976d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019770:	be 03 00 00 00       	mov    esi,0x3
c0019775:	e9 a6 fe ff ff       	jmp    c0019620 <Vm::faultHandler(regs*)+0x9a>
c001977a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001977d:	be 04 00 00 00       	mov    esi,0x4
c0019782:	e9 99 fe ff ff       	jmp    c0019620 <Vm::faultHandler(regs*)+0x9a>
c0019787:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001978a:	be 05 00 00 00       	mov    esi,0x5
c001978f:	e9 8c fe ff ff       	jmp    c0019620 <Vm::faultHandler(regs*)+0x9a>
c0019794:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019797:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001979c:	e9 7f fe ff ff       	jmp    c0019620 <Vm::faultHandler(regs*)+0x9a>
c00197a1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00197a4:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00197a9:	e9 72 fe ff ff       	jmp    c0019620 <Vm::faultHandler(regs*)+0x9a>
c00197ae:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00197b1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00197b5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00197ba:	74 30                	je     c00197ec <Vm::faultHandler(regs*)+0x266>
c00197bc:	83 e9 04             	sub    ecx,0x4
c00197bf:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00197c5:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00197cb:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00197ce:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00197d1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00197d7:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00197db:	0f 84 15 04 00 00    	je     c0019bf6 <Vm::faultHandler(regs*)+0x670>
c00197e1:	80 ce 02             	or     dh,0x2
c00197e4:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00197e7:	e9 0a 04 00 00       	jmp    c0019bf6 <Vm::faultHandler(regs*)+0x670>
c00197ec:	83 e9 02             	sub    ecx,0x2
c00197ef:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00197f5:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00197f8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00197fc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019802:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019806:	74 05                	je     c001980d <Vm::faultHandler(regs*)+0x287>
c0019808:	80 ce 02             	or     dh,0x2
c001980b:	eb 03                	jmp    c0019810 <Vm::faultHandler(regs*)+0x28a>
c001980d:	80 e6 fd             	and    dh,0xfd
c0019810:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019814:	e9 dd 03 00 00       	jmp    c0019bf6 <Vm::faultHandler(regs*)+0x670>
c0019819:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001981e:	74 2a                	je     c001984a <Vm::faultHandler(regs*)+0x2c4>
c0019820:	8b 10                	mov    edx,DWORD PTR [eax]
c0019822:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019828:	81 ca 00 02 02 00    	or     edx,0x20200
c001982e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019831:	8b 00                	mov    eax,DWORD PTR [eax]
c0019833:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019839:	c1 e8 09             	shr    eax,0x9
c001983c:	83 e0 01             	and    eax,0x1
c001983f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019842:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019845:	83 c0 04             	add    eax,0x4
c0019848:	eb 25                	jmp    c001986f <Vm::faultHandler(regs*)+0x2e9>
c001984a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001984d:	81 ca 00 02 02 00    	or     edx,0x20200
c0019853:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019856:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019859:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001985f:	66 c1 e8 09          	shr    ax,0x9
c0019863:	83 e0 01             	and    eax,0x1
c0019866:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019869:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001986c:	83 c0 02             	add    eax,0x2
c001986f:	25 ff ff 00 00       	and    eax,0xffff
c0019874:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019877:	e9 7a 03 00 00       	jmp    c0019bf6 <Vm::faultHandler(regs*)+0x670>
c001987c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019880:	3c ee                	cmp    al,0xee
c0019882:	75 10                	jne    c0019894 <Vm::faultHandler(regs*)+0x30e>
c0019884:	83 ec 0c             	sub    esp,0xc
c0019887:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001988a:	e8 a2 f9 ff ff       	call   c0019231 <Vm::mainloop3(unsigned long)>
c001988f:	e9 4b 03 00 00       	jmp    c0019bdf <Vm::faultHandler(regs*)+0x659>
c0019894:	83 ec 0c             	sub    esp,0xc
c0019897:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001989b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001989f:	51                   	push   ecx
c00198a0:	50                   	push   eax
c00198a1:	53                   	push   ebx
c00198a2:	e8 e1 fb ff ff       	call   c0019488 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00198a7:	83 c4 20             	add    esp,0x20
c00198aa:	e9 4a 03 00 00       	jmp    c0019bf9 <Vm::faultHandler(regs*)+0x673>
c00198af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00198b4:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00198b8:	e9 39 03 00 00       	jmp    c0019bf6 <Vm::faultHandler(regs*)+0x670>
c00198bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00198c2:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00198c6:	e9 2b 03 00 00       	jmp    c0019bf6 <Vm::faultHandler(regs*)+0x670>
c00198cb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00198ce:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00198d3:	74 2b                	je     c0019900 <Vm::faultHandler(regs*)+0x37a>
c00198d5:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00198dc:	76 22                	jbe    c0019900 <Vm::faultHandler(regs*)+0x37a>
c00198de:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00198e2:	50                   	push   eax
c00198e3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00198e7:	50                   	push   eax
c00198e8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00198ec:	50                   	push   eax
c00198ed:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00198f1:	50                   	push   eax
c00198f2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00198f6:	50                   	push   eax
c00198f7:	6a 6c                	push   0x6c
c00198f9:	6a 6c                	push   0x6c
c00198fb:	e9 b9 01 00 00       	jmp    c0019ab9 <Vm::faultHandler(regs*)+0x533>
c0019900:	83 ec 0c             	sub    esp,0xc
c0019903:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019907:	0f b7 f6             	movzx  esi,si
c001990a:	50                   	push   eax
c001990b:	e8 71 f8 ff ff       	call   c0019181 <Vm::inbv(unsigned short)>
c0019910:	83 c4 0c             	add    esp,0xc
c0019913:	0f b6 c0             	movzx  eax,al
c0019916:	50                   	push   eax
c0019917:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001991b:	50                   	push   eax
c001991c:	56                   	push   esi
c001991d:	e8 24 fc ff ff       	call   c0019546 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019922:	83 c4 10             	add    esp,0x10
c0019925:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019928:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001992c:	74 03                	je     c0019931 <Vm::faultHandler(regs*)+0x3ab>
c001992e:	48                   	dec    eax
c001992f:	eb 01                	jmp    c0019932 <Vm::faultHandler(regs*)+0x3ac>
c0019931:	40                   	inc    eax
c0019932:	0f b7 c0             	movzx  eax,ax
c0019935:	e9 8d 00 00 00       	jmp    c00199c7 <Vm::faultHandler(regs*)+0x441>
c001993a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001993d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019940:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019945:	74 29                	je     c0019970 <Vm::faultHandler(regs*)+0x3ea>
c0019947:	3d ff ff 00 00       	cmp    eax,0xffff
c001994c:	76 22                	jbe    c0019970 <Vm::faultHandler(regs*)+0x3ea>
c001994e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019952:	50                   	push   eax
c0019953:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019957:	50                   	push   eax
c0019958:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001995c:	50                   	push   eax
c001995d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019961:	50                   	push   eax
c0019962:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019966:	50                   	push   eax
c0019967:	6a 6d                	push   0x6d
c0019969:	6a 6d                	push   0x6d
c001996b:	e9 49 01 00 00       	jmp    c0019ab9 <Vm::faultHandler(regs*)+0x533>
c0019970:	0f b7 c8             	movzx  ecx,ax
c0019973:	0f b7 f6             	movzx  esi,si
c0019976:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019979:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001997e:	74 20                	je     c00199a0 <Vm::faultHandler(regs*)+0x41a>
c0019980:	ed                   	in     eax,dx
c0019981:	55                   	push   ebp
c0019982:	50                   	push   eax
c0019983:	51                   	push   ecx
c0019984:	56                   	push   esi
c0019985:	e8 e7 fb ff ff       	call   c0019571 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001998a:	83 c4 10             	add    esp,0x10
c001998d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019990:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019994:	74 05                	je     c001999b <Vm::faultHandler(regs*)+0x415>
c0019996:	83 e8 04             	sub    eax,0x4
c0019999:	eb 27                	jmp    c00199c2 <Vm::faultHandler(regs*)+0x43c>
c001999b:	83 c0 04             	add    eax,0x4
c001999e:	eb 22                	jmp    c00199c2 <Vm::faultHandler(regs*)+0x43c>
c00199a0:	66 ed                	in     ax,dx
c00199a2:	0f b7 c0             	movzx  eax,ax
c00199a5:	57                   	push   edi
c00199a6:	50                   	push   eax
c00199a7:	51                   	push   ecx
c00199a8:	56                   	push   esi
c00199a9:	e8 ad fb ff ff       	call   c001955b <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00199ae:	83 c4 10             	add    esp,0x10
c00199b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00199b4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00199b8:	74 05                	je     c00199bf <Vm::faultHandler(regs*)+0x439>
c00199ba:	83 e8 02             	sub    eax,0x2
c00199bd:	eb 03                	jmp    c00199c2 <Vm::faultHandler(regs*)+0x43c>
c00199bf:	83 c0 02             	add    eax,0x2
c00199c2:	25 ff ff 00 00       	and    eax,0xffff
c00199c7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00199ca:	e9 27 02 00 00       	jmp    c0019bf6 <Vm::faultHandler(regs*)+0x670>
c00199cf:	8d 46 ff             	lea    eax,[esi-0x1]
c00199d2:	3c 05                	cmp    al,0x5
c00199d4:	77 24                	ja     c00199fa <Vm::faultHandler(regs*)+0x474>
c00199d6:	0f b6 c0             	movzx  eax,al
c00199d9:	ff 24 85 6c 61 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9e94]
c00199e0:	0f b7 fd             	movzx  edi,bp
c00199e3:	eb 15                	jmp    c00199fa <Vm::faultHandler(regs*)+0x474>
c00199e5:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00199e9:	eb 0f                	jmp    c00199fa <Vm::faultHandler(regs*)+0x474>
c00199eb:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00199ef:	eb 09                	jmp    c00199fa <Vm::faultHandler(regs*)+0x474>
c00199f1:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00199f5:	eb 03                	jmp    c00199fa <Vm::faultHandler(regs*)+0x474>
c00199f7:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00199fa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00199fd:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019a02:	74 29                	je     c0019a2d <Vm::faultHandler(regs*)+0x4a7>
c0019a04:	3d ff ff 00 00       	cmp    eax,0xffff
c0019a09:	76 22                	jbe    c0019a2d <Vm::faultHandler(regs*)+0x4a7>
c0019a0b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019a0f:	50                   	push   eax
c0019a10:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019a14:	50                   	push   eax
c0019a15:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019a19:	50                   	push   eax
c0019a1a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019a1e:	50                   	push   eax
c0019a1f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019a23:	50                   	push   eax
c0019a24:	6a 6e                	push   0x6e
c0019a26:	6a 6e                	push   0x6e
c0019a28:	e9 8c 00 00 00       	jmp    c0019ab9 <Vm::faultHandler(regs*)+0x533>
c0019a2d:	0f b7 c0             	movzx  eax,ax
c0019a30:	52                   	push   edx
c0019a31:	52                   	push   edx
c0019a32:	50                   	push   eax
c0019a33:	57                   	push   edi
c0019a34:	e8 d9 fa ff ff       	call   c0019512 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019a39:	59                   	pop    ecx
c0019a3a:	0f b6 c0             	movzx  eax,al
c0019a3d:	5e                   	pop    esi
c0019a3e:	50                   	push   eax
c0019a3f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019a43:	50                   	push   eax
c0019a44:	e8 4b f7 ff ff       	call   c0019194 <Vm::outbv(unsigned short, unsigned char)>
c0019a49:	83 c4 10             	add    esp,0x10
c0019a4c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019a4f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019a53:	74 03                	je     c0019a58 <Vm::faultHandler(regs*)+0x4d2>
c0019a55:	48                   	dec    eax
c0019a56:	eb 01                	jmp    c0019a59 <Vm::faultHandler(regs*)+0x4d3>
c0019a58:	40                   	inc    eax
c0019a59:	0f b7 c0             	movzx  eax,ax
c0019a5c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019a5f:	e9 92 01 00 00       	jmp    c0019bf6 <Vm::faultHandler(regs*)+0x670>
c0019a64:	8d 46 ff             	lea    eax,[esi-0x1]
c0019a67:	3c 05                	cmp    al,0x5
c0019a69:	77 1f                	ja     c0019a8a <Vm::faultHandler(regs*)+0x504>
c0019a6b:	0f b6 c0             	movzx  eax,al
c0019a6e:	ff 24 85 84 61 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9e7c]
c0019a75:	89 ef                	mov    edi,ebp
c0019a77:	eb 11                	jmp    c0019a8a <Vm::faultHandler(regs*)+0x504>
c0019a79:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0019a7c:	eb 0c                	jmp    c0019a8a <Vm::faultHandler(regs*)+0x504>
c0019a7e:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0019a81:	eb 07                	jmp    c0019a8a <Vm::faultHandler(regs*)+0x504>
c0019a83:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0019a86:	eb 02                	jmp    c0019a8a <Vm::faultHandler(regs*)+0x504>
c0019a88:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0019a8a:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019a8d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019a92:	74 37                	je     c0019acb <Vm::faultHandler(regs*)+0x545>
c0019a94:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0019a9a:	76 2f                	jbe    c0019acb <Vm::faultHandler(regs*)+0x545>
c0019a9c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019aa0:	50                   	push   eax
c0019aa1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019aa5:	50                   	push   eax
c0019aa6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019aaa:	50                   	push   eax
c0019aab:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019aaf:	50                   	push   eax
c0019ab0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019ab4:	50                   	push   eax
c0019ab5:	6a 6f                	push   0x6f
c0019ab7:	6a 6f                	push   0x6f
c0019ab9:	68 12 61 02 c0       	push   0xc0026112
c0019abe:	e8 3c 32 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0019ac3:	83 c4 20             	add    esp,0x20
c0019ac6:	e9 86 01 00 00       	jmp    c0019c51 <Vm::faultHandler(regs*)+0x6cb>
c0019acb:	0f b7 d7             	movzx  edx,di
c0019ace:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0019ad1:	0f b7 c6             	movzx  eax,si
c0019ad4:	81 e1 00 04 00 00    	and    ecx,0x400
c0019ada:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0019add:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019ae2:	74 1d                	je     c0019b01 <Vm::faultHandler(regs*)+0x57b>
c0019ae4:	55                   	push   ebp
c0019ae5:	55                   	push   ebp
c0019ae6:	50                   	push   eax
c0019ae7:	52                   	push   edx
c0019ae8:	e8 48 fa ff ff       	call   c0019535 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019aed:	83 c4 10             	add    esp,0x10
c0019af0:	89 fa                	mov    edx,edi
c0019af2:	ef                   	out    dx,eax
c0019af3:	85 c9                	test   ecx,ecx
c0019af5:	74 05                	je     c0019afc <Vm::faultHandler(regs*)+0x576>
c0019af7:	83 ee 04             	sub    esi,0x4
c0019afa:	eb 21                	jmp    c0019b1d <Vm::faultHandler(regs*)+0x597>
c0019afc:	83 c6 04             	add    esi,0x4
c0019aff:	eb 1c                	jmp    c0019b1d <Vm::faultHandler(regs*)+0x597>
c0019b01:	55                   	push   ebp
c0019b02:	55                   	push   ebp
c0019b03:	50                   	push   eax
c0019b04:	52                   	push   edx
c0019b05:	e8 19 fa ff ff       	call   c0019523 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019b0a:	83 c4 10             	add    esp,0x10
c0019b0d:	89 fa                	mov    edx,edi
c0019b0f:	66 ef                	out    dx,ax
c0019b11:	85 c9                	test   ecx,ecx
c0019b13:	74 05                	je     c0019b1a <Vm::faultHandler(regs*)+0x594>
c0019b15:	83 ee 02             	sub    esi,0x2
c0019b18:	eb 03                	jmp    c0019b1d <Vm::faultHandler(regs*)+0x597>
c0019b1a:	83 c6 02             	add    esi,0x2
c0019b1d:	81 e6 ff ff 00 00    	and    esi,0xffff
c0019b23:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0019b26:	e9 cb 00 00 00       	jmp    c0019bf6 <Vm::faultHandler(regs*)+0x670>
c0019b2b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019b32:	83 ec 0c             	sub    esp,0xc
c0019b35:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019b39:	50                   	push   eax
c0019b3a:	e8 42 f6 ff ff       	call   c0019181 <Vm::inbv(unsigned short)>
c0019b3f:	0f b6 c0             	movzx  eax,al
c0019b42:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019b45:	eb 3f                	jmp    c0019b86 <Vm::faultHandler(regs*)+0x600>
c0019b47:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b4c:	74 07                	je     c0019b55 <Vm::faultHandler(regs*)+0x5cf>
c0019b4e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019b52:	ed                   	in     eax,dx
c0019b53:	eb 14                	jmp    c0019b69 <Vm::faultHandler(regs*)+0x5e3>
c0019b55:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0019b58:	66 31 f6             	xor    si,si
c0019b5b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0019b5e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019b62:	66 ed                	in     ax,dx
c0019b64:	0f b7 c0             	movzx  eax,ax
c0019b67:	09 f0                	or     eax,esi
c0019b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019b6c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019b70:	e9 84 00 00 00       	jmp    c0019bf9 <Vm::faultHandler(regs*)+0x673>
c0019b75:	52                   	push   edx
c0019b76:	52                   	push   edx
c0019b77:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019b7b:	50                   	push   eax
c0019b7c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019b80:	50                   	push   eax
c0019b81:	e8 0e f6 ff ff       	call   c0019194 <Vm::outbv(unsigned short, unsigned char)>
c0019b86:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019b8a:	eb 53                	jmp    c0019bdf <Vm::faultHandler(regs*)+0x659>
c0019b8c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019b8f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019b93:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b98:	74 03                	je     c0019b9d <Vm::faultHandler(regs*)+0x617>
c0019b9a:	ef                   	out    dx,eax
c0019b9b:	eb cf                	jmp    c0019b6c <Vm::faultHandler(regs*)+0x5e6>
c0019b9d:	66 ef                	out    dx,ax
c0019b9f:	eb cb                	jmp    c0019b6c <Vm::faultHandler(regs*)+0x5e6>
c0019ba1:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019ba8:	83 ec 0c             	sub    esp,0xc
c0019bab:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019baf:	50                   	push   eax
c0019bb0:	e8 cc f5 ff ff       	call   c0019181 <Vm::inbv(unsigned short)>
c0019bb5:	0f b6 c0             	movzx  eax,al
c0019bb8:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019bbb:	eb 1f                	jmp    c0019bdc <Vm::faultHandler(regs*)+0x656>
c0019bbd:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019bc0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019bc5:	74 03                	je     c0019bca <Vm::faultHandler(regs*)+0x644>
c0019bc7:	ed                   	in     eax,dx
c0019bc8:	eb 0d                	jmp    c0019bd7 <Vm::faultHandler(regs*)+0x651>
c0019bca:	66 ed                	in     ax,dx
c0019bcc:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019bcf:	0f b7 c0             	movzx  eax,ax
c0019bd2:	66 31 d2             	xor    dx,dx
c0019bd5:	09 d0                	or     eax,edx
c0019bd7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019bda:	eb 1a                	jmp    c0019bf6 <Vm::faultHandler(regs*)+0x670>
c0019bdc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019bdf:	83 c4 10             	add    esp,0x10
c0019be2:	eb 15                	jmp    c0019bf9 <Vm::faultHandler(regs*)+0x673>
c0019be4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019be7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019bea:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019bef:	74 03                	je     c0019bf4 <Vm::faultHandler(regs*)+0x66e>
c0019bf1:	ef                   	out    dx,eax
c0019bf2:	eb 02                	jmp    c0019bf6 <Vm::faultHandler(regs*)+0x670>
c0019bf4:	66 ef                	out    dx,ax
c0019bf6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019bf9:	b0 01                	mov    al,0x1
c0019bfb:	eb 56                	jmp    c0019c53 <Vm::faultHandler(regs*)+0x6cd>
c0019bfd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019c01:	50                   	push   eax
c0019c02:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019c06:	50                   	push   eax
c0019c07:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019c0b:	50                   	push   eax
c0019c0c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019c10:	50                   	push   eax
c0019c11:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019c15:	50                   	push   eax
c0019c16:	52                   	push   edx
c0019c17:	52                   	push   edx
c0019c18:	68 3f 61 02 c0       	push   0xc002613f
c0019c1d:	e8 dd 30 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0019c22:	83 c4 20             	add    esp,0x20
c0019c25:	83 ec 0c             	sub    esp,0xc
c0019c28:	6a 60                	push   0x60
c0019c2a:	e8 52 f5 ff ff       	call   c0019181 <Vm::inbv(unsigned short)>
c0019c2f:	83 c4 10             	add    esp,0x10
c0019c32:	3c 1c                	cmp    al,0x1c
c0019c34:	74 04                	je     c0019c3a <Vm::faultHandler(regs*)+0x6b4>
c0019c36:	3c 5a                	cmp    al,0x5a
c0019c38:	75 eb                	jne    c0019c25 <Vm::faultHandler(regs*)+0x69f>
c0019c3a:	3c 5a                	cmp    al,0x5a
c0019c3c:	74 04                	je     c0019c42 <Vm::faultHandler(regs*)+0x6bc>
c0019c3e:	3c 1c                	cmp    al,0x1c
c0019c40:	75 0f                	jne    c0019c51 <Vm::faultHandler(regs*)+0x6cb>
c0019c42:	83 ec 0c             	sub    esp,0xc
c0019c45:	6a 60                	push   0x60
c0019c47:	e8 35 f5 ff ff       	call   c0019181 <Vm::inbv(unsigned short)>
c0019c4c:	83 c4 10             	add    esp,0x10
c0019c4f:	eb e9                	jmp    c0019c3a <Vm::faultHandler(regs*)+0x6b4>
c0019c51:	31 c0                	xor    eax,eax
c0019c53:	83 c4 1c             	add    esp,0x1c
c0019c56:	5b                   	pop    ebx
c0019c57:	5e                   	pop    esi
c0019c58:	5f                   	pop    edi
c0019c59:	5d                   	pop    ebp
c0019c5a:	c3                   	ret    
c0019c5b:	90                   	nop

c0019c5c <Vm::fpuInternalTo32(unsigned long long)>:
c0019c5c:	57                   	push   edi
c0019c5d:	56                   	push   esi
c0019c5e:	53                   	push   ebx
c0019c5f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c67:	89 d6                	mov    esi,edx
c0019c69:	89 d7                	mov    edi,edx
c0019c6b:	89 c1                	mov    ecx,eax
c0019c6d:	c1 ef 14             	shr    edi,0x14
c0019c70:	89 d3                	mov    ebx,edx
c0019c72:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0019c78:	31 d2                	xor    edx,edx
c0019c7a:	89 f8                	mov    eax,edi
c0019c7c:	81 e6 00 00 00 80    	and    esi,0x80000000
c0019c82:	bf ff 00 00 00       	mov    edi,0xff
c0019c87:	05 80 fc ff ff       	add    eax,0xfffffc80
c0019c8c:	83 d2 ff             	adc    edx,0xffffffff
c0019c8f:	39 c7                	cmp    edi,eax
c0019c91:	bf 00 00 00 00       	mov    edi,0x0
c0019c96:	19 d7                	sbb    edi,edx
c0019c98:	72 16                	jb     c0019cb0 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0019c9a:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0019c9e:	c1 e0 17             	shl    eax,0x17
c0019ca1:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0019ca7:	09 f1                	or     ecx,esi
c0019ca9:	09 c1                	or     ecx,eax
c0019cab:	89 cf                	mov    edi,ecx
c0019cad:	eb 05                	jmp    c0019cb4 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0019caf:	90                   	nop
c0019cb0:	31 ff                	xor    edi,edi
c0019cb2:	66 90                	xchg   ax,ax
c0019cb4:	89 f8                	mov    eax,edi
c0019cb6:	5b                   	pop    ebx
c0019cb7:	5e                   	pop    esi
c0019cb8:	5f                   	pop    edi
c0019cb9:	c3                   	ret    

c0019cba <Vm::fpuInternalTo64(unsigned long long)>:
c0019cba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cbe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019cc2:	c3                   	ret    

c0019cc3 <Vm::fpu32ToInternal(unsigned int)>:
c0019cc3:	57                   	push   edi
c0019cc4:	31 ff                	xor    edi,edi
c0019cc6:	56                   	push   esi
c0019cc7:	53                   	push   ebx
c0019cc8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019ccc:	89 cb                	mov    ebx,ecx
c0019cce:	89 ce                	mov    esi,ecx
c0019cd0:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0019cd6:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0019cdc:	c1 e9 17             	shr    ecx,0x17
c0019cdf:	89 f0                	mov    eax,esi
c0019ce1:	0f b6 d1             	movzx  edx,cl
c0019ce4:	81 c2 80 03 00 00    	add    edx,0x380
c0019cea:	89 d1                	mov    ecx,edx
c0019cec:	89 fa                	mov    edx,edi
c0019cee:	c1 e1 14             	shl    ecx,0x14
c0019cf1:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0019cf5:	c1 e0 1d             	shl    eax,0x1d
c0019cf8:	89 d7                	mov    edi,edx
c0019cfa:	89 c6                	mov    esi,eax
c0019cfc:	89 ca                	mov    edx,ecx
c0019cfe:	89 f0                	mov    eax,esi
c0019d00:	09 fa                	or     edx,edi
c0019d02:	09 da                	or     edx,ebx
c0019d04:	5b                   	pop    ebx
c0019d05:	5e                   	pop    esi
c0019d06:	5f                   	pop    edi
c0019d07:	c3                   	ret    

c0019d08 <Vm::fpu64ToInternal(unsigned long long)>:
c0019d08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d10:	c3                   	ret    

c0019d11 <Vm::fpuFloatToLong(unsigned long long)>:
c0019d11:	57                   	push   edi
c0019d12:	31 c0                	xor    eax,eax
c0019d14:	56                   	push   esi
c0019d15:	31 d2                	xor    edx,edx
c0019d17:	53                   	push   ebx
c0019d18:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019d1c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019d20:	89 d9                	mov    ecx,ebx
c0019d22:	c1 e9 14             	shr    ecx,0x14
c0019d25:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0019d2b:	89 cf                	mov    edi,ecx
c0019d2d:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0019d33:	78 37                	js     c0019d6c <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019d35:	89 d9                	mov    ecx,ebx
c0019d37:	89 f0                	mov    eax,esi
c0019d39:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019d3f:	81 c9 00 00 10 00    	or     ecx,0x100000
c0019d45:	89 ca                	mov    edx,ecx
c0019d47:	b9 34 00 00 00       	mov    ecx,0x34
c0019d4c:	29 f9                	sub    ecx,edi
c0019d4e:	0f ad d0             	shrd   eax,edx,cl
c0019d51:	d3 fa                	sar    edx,cl
c0019d53:	f6 c1 20             	test   cl,0x20
c0019d56:	74 08                	je     c0019d60 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0019d58:	89 d0                	mov    eax,edx
c0019d5a:	c1 fa 1f             	sar    edx,0x1f
c0019d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d60:	85 db                	test   ebx,ebx
c0019d62:	79 08                	jns    c0019d6c <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019d64:	f7 d8                	neg    eax
c0019d66:	83 d2 00             	adc    edx,0x0
c0019d69:	f7 da                	neg    edx
c0019d6b:	90                   	nop
c0019d6c:	5b                   	pop    ebx
c0019d6d:	5e                   	pop    esi
c0019d6e:	5f                   	pop    edi
c0019d6f:	c3                   	ret    

c0019d70 <Vm::fpuULongToFloat(unsigned long long)>:
c0019d70:	57                   	push   edi
c0019d71:	31 c9                	xor    ecx,ecx
c0019d73:	56                   	push   esi
c0019d74:	53                   	push   ebx
c0019d75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019d79:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019d7d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d80:	0f ba e7 14          	bt     edi,0x14
c0019d84:	72 0a                	jb     c0019d90 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0019d86:	01 f6                	add    esi,esi
c0019d88:	11 ff                	adc    edi,edi
c0019d8a:	41                   	inc    ecx
c0019d8b:	eb f3                	jmp    c0019d80 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0019d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d90:	89 fa                	mov    edx,edi
c0019d92:	89 f0                	mov    eax,esi
c0019d94:	bb 33 04 00 00       	mov    ebx,0x433
c0019d99:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0019d9f:	29 cb                	sub    ebx,ecx
c0019da1:	89 d9                	mov    ecx,ebx
c0019da3:	5b                   	pop    ebx
c0019da4:	c1 e1 14             	shl    ecx,0x14
c0019da7:	5e                   	pop    esi
c0019da8:	09 ca                	or     edx,ecx
c0019daa:	5f                   	pop    edi
c0019dab:	c3                   	ret    

c0019dac <Vm::fpuLongToFloat(long long)>:
c0019dac:	56                   	push   esi
c0019dad:	31 c0                	xor    eax,eax
c0019daf:	53                   	push   ebx
c0019db0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019db4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019db8:	39 c8                	cmp    eax,ecx
c0019dba:	19 d8                	sbb    eax,ebx
c0019dbc:	7d 06                	jge    c0019dc4 <Vm::fpuLongToFloat(long long)+0x18>
c0019dbe:	31 f6                	xor    esi,esi
c0019dc0:	eb 0e                	jmp    c0019dd0 <Vm::fpuLongToFloat(long long)+0x24>
c0019dc2:	66 90                	xchg   ax,ax
c0019dc4:	f7 d9                	neg    ecx
c0019dc6:	be 01 00 00 00       	mov    esi,0x1
c0019dcb:	83 d3 00             	adc    ebx,0x0
c0019dce:	f7 db                	neg    ebx
c0019dd0:	31 c0                	xor    eax,eax
c0019dd2:	66 90                	xchg   ax,ax
c0019dd4:	0f ba e3 14          	bt     ebx,0x14
c0019dd8:	72 0a                	jb     c0019de4 <Vm::fpuLongToFloat(long long)+0x38>
c0019dda:	01 c9                	add    ecx,ecx
c0019ddc:	11 db                	adc    ebx,ebx
c0019dde:	40                   	inc    eax
c0019ddf:	eb f3                	jmp    c0019dd4 <Vm::fpuLongToFloat(long long)+0x28>
c0019de1:	8d 76 00             	lea    esi,[esi+0x0]
c0019de4:	ba 33 04 00 00       	mov    edx,0x433
c0019de9:	29 c2                	sub    edx,eax
c0019deb:	89 c8                	mov    eax,ecx
c0019ded:	c1 e2 14             	shl    edx,0x14
c0019df0:	89 d9                	mov    ecx,ebx
c0019df2:	89 f3                	mov    ebx,esi
c0019df4:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019dfa:	09 ca                	or     edx,ecx
c0019dfc:	84 db                	test   bl,bl
c0019dfe:	74 08                	je     c0019e08 <Vm::fpuLongToFloat(long long)+0x5c>
c0019e00:	81 ca 00 00 00 80    	or     edx,0x80000000
c0019e06:	66 90                	xchg   ax,ax
c0019e08:	5b                   	pop    ebx
c0019e09:	5e                   	pop    esi
c0019e0a:	c3                   	ret    

c0019e0b <Vm::fpuGet0()>:
c0019e0b:	31 c0                	xor    eax,eax
c0019e0d:	31 d2                	xor    edx,edx
c0019e0f:	c3                   	ret    

c0019e10 <Vm::fpuGet1()>:
c0019e10:	b8 01 00 00 00       	mov    eax,0x1
c0019e15:	31 d2                	xor    edx,edx
c0019e17:	c3                   	ret    

c0019e18 <Vm::fpuGetPi()>:
c0019e18:	b8 03 00 00 00       	mov    eax,0x3
c0019e1d:	31 d2                	xor    edx,edx
c0019e1f:	c3                   	ret    

c0019e20 <Vm::fpuGetLog2E()>:
c0019e20:	83 ec 18             	sub    esp,0x18
c0019e23:	68 9c 61 02 c0       	push   0xc002619c
c0019e28:	e8 c2 aa ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0019e2d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019e32:	31 d2                	xor    edx,edx
c0019e34:	83 c4 1c             	add    esp,0x1c
c0019e37:	c3                   	ret    

c0019e38 <Vm::fpuGetLogE2()>:
c0019e38:	83 ec 18             	sub    esp,0x18
c0019e3b:	68 a8 61 02 c0       	push   0xc00261a8
c0019e40:	e8 aa aa ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0019e45:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019e4a:	31 d2                	xor    edx,edx
c0019e4c:	83 c4 1c             	add    esp,0x1c
c0019e4f:	c3                   	ret    

c0019e50 <Vm::fpuGetLog210()>:
c0019e50:	83 ec 18             	sub    esp,0x18
c0019e53:	68 b4 61 02 c0       	push   0xc00261b4
c0019e58:	e8 92 aa ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0019e5d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019e62:	31 d2                	xor    edx,edx
c0019e64:	83 c4 1c             	add    esp,0x1c
c0019e67:	c3                   	ret    

c0019e68 <Vm::fpuGetLog102()>:
c0019e68:	83 ec 18             	sub    esp,0x18
c0019e6b:	68 c1 61 02 c0       	push   0xc00261c1
c0019e70:	e8 7a aa ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0019e75:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019e7a:	31 d2                	xor    edx,edx
c0019e7c:	83 c4 1c             	add    esp,0x1c
c0019e7f:	c3                   	ret    

c0019e80 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0019e80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e84:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019e88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019e8c:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0019e90:	0f 92 c0             	setb   al
c0019e93:	c3                   	ret    

c0019e94 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0019e94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e9c:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0019ea0:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0019ea4:	09 c2                	or     edx,eax
c0019ea6:	0f 94 c0             	sete   al
c0019ea9:	c3                   	ret    

c0019eaa <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0019eaa:	57                   	push   edi
c0019eab:	56                   	push   esi
c0019eac:	53                   	push   ebx
c0019ead:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019eb1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019eb5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019eb9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019ebd:	57                   	push   edi
c0019ebe:	56                   	push   esi
c0019ebf:	53                   	push   ebx
c0019ec0:	51                   	push   ecx
c0019ec1:	e8 ce ff ff ff       	call   c0019e94 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0019ec6:	83 c4 10             	add    esp,0x10
c0019ec9:	88 c2                	mov    dl,al
c0019ecb:	31 c0                	xor    eax,eax
c0019ecd:	84 d2                	test   dl,dl
c0019ecf:	75 0f                	jne    c0019ee0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0019ed1:	57                   	push   edi
c0019ed2:	56                   	push   esi
c0019ed3:	53                   	push   ebx
c0019ed4:	51                   	push   ecx
c0019ed5:	e8 a6 ff ff ff       	call   c0019e80 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0019eda:	83 c4 10             	add    esp,0x10
c0019edd:	8d 76 00             	lea    esi,[esi+0x0]
c0019ee0:	83 e0 01             	and    eax,0x1
c0019ee3:	5b                   	pop    ebx
c0019ee4:	88 c1                	mov    cl,al
c0019ee6:	83 e2 01             	and    edx,0x1
c0019ee9:	a0 a1 94 02 c0       	mov    al,ds:0xc00294a1
c0019eee:	c1 e2 06             	shl    edx,0x6
c0019ef1:	83 e0 ba             	and    eax,0xffffffba
c0019ef4:	5e                   	pop    esi
c0019ef5:	09 c8                	or     eax,ecx
c0019ef7:	5f                   	pop    edi
c0019ef8:	09 d0                	or     eax,edx
c0019efa:	a2 a1 94 02 c0       	mov    ds:0xc00294a1,al
c0019eff:	c3                   	ret    

c0019f00 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0019f00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019f08:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0019f0c:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0019f10:	c3                   	ret    

c0019f11 <Vm::fpuAbs(unsigned long long)>:
c0019f11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f15:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f19:	c3                   	ret    

c0019f1a <Vm::fpuChs(unsigned long long)>:
c0019f1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f22:	f7 d8                	neg    eax
c0019f24:	83 d2 00             	adc    edx,0x0
c0019f27:	f7 da                	neg    edx
c0019f29:	c3                   	ret    

c0019f2a <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0019f2a:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0019f2e:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0019f33:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0019f37:	eb c7                	jmp    c0019f00 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0019f39 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0019f39:	53                   	push   ebx
c0019f3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019f42:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f46:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019f4a:	0f af ca             	imul   ecx,edx
c0019f4d:	0f af d8             	imul   ebx,eax
c0019f50:	f7 e2                	mul    edx
c0019f52:	01 d9                	add    ecx,ebx
c0019f54:	5b                   	pop    ebx
c0019f55:	01 ca                	add    edx,ecx
c0019f57:	c3                   	ret    

c0019f58 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0019f58:	83 ec 0c             	sub    esp,0xc
c0019f5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f6b:	e8 34 87 00 00       	call   c00226a4 <__udivdi3>
c0019f70:	83 c4 1c             	add    esp,0x1c
c0019f73:	c3                   	ret    

c0019f74 <Vm::fpuSquare(unsigned long long)>:
c0019f74:	50                   	push   eax
c0019f75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f79:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019f7d:	52                   	push   edx
c0019f7e:	50                   	push   eax
c0019f7f:	52                   	push   edx
c0019f80:	50                   	push   eax
c0019f81:	e8 b3 ff ff ff       	call   c0019f39 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019f86:	83 c4 14             	add    esp,0x14
c0019f89:	c3                   	ret    

c0019f8a <Vm::fpuGetReg(int)>:
c0019f8a:	83 ec 0c             	sub    esp,0xc
c0019f8d:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019f92:	76 10                	jbe    c0019fa4 <Vm::fpuGetReg(int)+0x1a>
c0019f94:	83 ec 0c             	sub    esp,0xc
c0019f97:	68 ce 61 02 c0       	push   0xc00261ce
c0019f9c:	e8 4e a9 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0019fa1:	83 c4 10             	add    esp,0x10
c0019fa4:	a0 a1 94 02 c0       	mov    al,ds:0xc00294a1
c0019fa9:	b9 08 00 00 00       	mov    ecx,0x8
c0019fae:	c0 e8 03             	shr    al,0x3
c0019fb1:	83 e0 07             	and    eax,0x7
c0019fb4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019fb8:	99                   	cdq    
c0019fb9:	f7 f9                	idiv   ecx
c0019fbb:	8b 04 d5 a4 94 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd6b5c]
c0019fc2:	8b 14 d5 a8 94 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd6b58]
c0019fc9:	83 c4 0c             	add    esp,0xc
c0019fcc:	c3                   	ret    

c0019fcd <Vm::fpuSetReg(int, unsigned long long)>:
c0019fcd:	57                   	push   edi
c0019fce:	56                   	push   esi
c0019fcf:	52                   	push   edx
c0019fd0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019fd4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019fd8:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019fdd:	76 11                	jbe    c0019ff0 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c0019fdf:	83 ec 0c             	sub    esp,0xc
c0019fe2:	68 e1 61 02 c0       	push   0xc00261e1
c0019fe7:	e8 03 a9 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0019fec:	83 c4 10             	add    esp,0x10
c0019fef:	90                   	nop
c0019ff0:	a0 a1 94 02 c0       	mov    al,ds:0xc00294a1
c0019ff5:	b9 08 00 00 00       	mov    ecx,0x8
c0019ffa:	c0 e8 03             	shr    al,0x3
c0019ffd:	83 e0 07             	and    eax,0x7
c001a000:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a004:	99                   	cdq    
c001a005:	f7 f9                	idiv   ecx
c001a007:	89 34 d5 a4 94 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6b5c],esi
c001a00e:	89 3c d5 a8 94 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6b58],edi
c001a015:	58                   	pop    eax
c001a016:	5e                   	pop    esi
c001a017:	5f                   	pop    edi
c001a018:	c3                   	ret    

c001a019 <Vm::fpuPush(unsigned long long)>:
c001a019:	a0 a1 94 02 c0       	mov    al,ds:0xc00294a1
c001a01e:	c0 e8 03             	shr    al,0x3
c001a021:	83 e0 07             	and    eax,0x7
c001a024:	83 c0 07             	add    eax,0x7
c001a027:	88 c2                	mov    dl,al
c001a029:	83 e0 07             	and    eax,0x7
c001a02c:	83 e2 07             	and    edx,0x7
c001a02f:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001a036:	8a 15 a1 94 02 c0    	mov    dl,BYTE PTR ds:0xc00294a1
c001a03c:	83 e2 c7             	and    edx,0xffffffc7
c001a03f:	09 ca                	or     edx,ecx
c001a041:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a045:	88 15 a1 94 02 c0    	mov    BYTE PTR ds:0xc00294a1,dl
c001a04b:	89 0c c5 a8 94 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6b58],ecx
c001a052:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a056:	89 14 c5 a4 94 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6b5c],edx
c001a05d:	a1 e4 94 02 c0       	mov    eax,ds:0xc00294e4
c001a062:	83 f8 08             	cmp    eax,0x8
c001a065:	75 09                	jne    c001a070 <Vm::fpuPush(unsigned long long)+0x57>
c001a067:	80 0d a0 94 02 c0 40 	or     BYTE PTR ds:0xc00294a0,0x40
c001a06e:	c3                   	ret    
c001a06f:	90                   	nop
c001a070:	40                   	inc    eax
c001a071:	a3 e4 94 02 c0       	mov    ds:0xc00294e4,eax
c001a076:	c3                   	ret    

c001a077 <Vm::fpuPop()>:
c001a077:	8a 0d a1 94 02 c0    	mov    cl,BYTE PTR ds:0xc00294a1
c001a07d:	53                   	push   ebx
c001a07e:	c0 e9 03             	shr    cl,0x3
c001a081:	8a 1d a1 94 02 c0    	mov    bl,BYTE PTR ds:0xc00294a1
c001a087:	83 e1 07             	and    ecx,0x7
c001a08a:	83 e3 c7             	and    ebx,0xffffffc7
c001a08d:	8b 04 cd a4 94 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd6b5c]
c001a094:	8b 14 cd a8 94 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd6b58]
c001a09b:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001a0a2:	83 e1 38             	and    ecx,0x38
c001a0a5:	09 d9                	or     ecx,ebx
c001a0a7:	88 0d a1 94 02 c0    	mov    BYTE PTR ds:0xc00294a1,cl
c001a0ad:	8b 0d e4 94 02 c0    	mov    ecx,DWORD PTR ds:0xc00294e4
c001a0b3:	85 c9                	test   ecx,ecx
c001a0b5:	74 09                	je     c001a0c0 <Vm::fpuPop()+0x49>
c001a0b7:	49                   	dec    ecx
c001a0b8:	89 0d e4 94 02 c0    	mov    DWORD PTR ds:0xc00294e4,ecx
c001a0be:	eb 08                	jmp    c001a0c8 <Vm::fpuPop()+0x51>
c001a0c0:	80 0d a0 94 02 c0 40 	or     BYTE PTR ds:0xc00294a0,0x40
c001a0c7:	90                   	nop
c001a0c8:	5b                   	pop    ebx
c001a0c9:	c3                   	ret    

c001a0ca <Vm::x87Handler(regs*)>:
c001a0ca:	55                   	push   ebp
c001a0cb:	57                   	push   edi
c001a0cc:	56                   	push   esi
c001a0cd:	53                   	push   ebx
c001a0ce:	83 ec 1c             	sub    esp,0x1c
c001a0d1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a0d5:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001a0da:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001a0dd:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001a0e5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001a0e9:	50                   	push   eax
c001a0ea:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001a0ee:	50                   	push   eax
c001a0ef:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a0f3:	50                   	push   eax
c001a0f4:	53                   	push   ebx
c001a0f5:	e8 0e 9f ff ff       	call   c0014008 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001a0fa:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001a0fd:	83 c4 10             	add    esp,0x10
c001a100:	89 c6                	mov    esi,eax
c001a102:	80 fa d9             	cmp    dl,0xd9
c001a105:	0f 85 79 01 00 00    	jne    c001a284 <Vm::x87Handler(regs*)+0x1ba>
c001a10b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a10f:	8d 50 20             	lea    edx,[eax+0x20]
c001a112:	80 fa 0e             	cmp    dl,0xe
c001a115:	0f 87 a5 00 00 00    	ja     c001a1c0 <Vm::x87Handler(regs*)+0xf6>
c001a11b:	0f b6 d2             	movzx  edx,dl
c001a11e:	ff 24 95 f4 61 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9e0c]
c001a125:	8d 76 00             	lea    esi,[esi+0x0]
c001a128:	e8 de fc ff ff       	call   c0019e0b <Vm::fpuGet0()>
c001a12d:	eb 09                	jmp    c001a138 <Vm::x87Handler(regs*)+0x6e>
c001a12f:	90                   	nop
c001a130:	e8 db fc ff ff       	call   c0019e10 <Vm::fpuGet1()>
c001a135:	8d 76 00             	lea    esi,[esi+0x0]
c001a138:	57                   	push   edi
c001a139:	57                   	push   edi
c001a13a:	66 90                	xchg   ax,ax
c001a13c:	52                   	push   edx
c001a13d:	50                   	push   eax
c001a13e:	e8 d6 fe ff ff       	call   c001a019 <Vm::fpuPush(unsigned long long)>
c001a143:	90                   	nop
c001a144:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a148:	83 c4 10             	add    esp,0x10
c001a14b:	90                   	nop
c001a14c:	b0 01                	mov    al,0x1
c001a14e:	e9 89 0a 00 00       	jmp    c001abdc <Vm::x87Handler(regs*)+0xb12>
c001a153:	90                   	nop
c001a154:	83 ec 0c             	sub    esp,0xc
c001a157:	6a 00                	push   0x0
c001a159:	e8 2c fe ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a15e:	59                   	pop    ecx
c001a15f:	5e                   	pop    esi
c001a160:	52                   	push   edx
c001a161:	50                   	push   eax
c001a162:	e8 b3 fd ff ff       	call   c0019f1a <Vm::fpuChs(unsigned long long)>
c001a167:	eb 17                	jmp    c001a180 <Vm::x87Handler(regs*)+0xb6>
c001a169:	8d 76 00             	lea    esi,[esi+0x0]
c001a16c:	83 ec 0c             	sub    esp,0xc
c001a16f:	6a 00                	push   0x0
c001a171:	e8 14 fe ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a176:	5f                   	pop    edi
c001a177:	5d                   	pop    ebp
c001a178:	52                   	push   edx
c001a179:	50                   	push   eax
c001a17a:	e8 92 fd ff ff       	call   c0019f11 <Vm::fpuAbs(unsigned long long)>
c001a17f:	90                   	nop
c001a180:	83 c4 0c             	add    esp,0xc
c001a183:	90                   	nop
c001a184:	52                   	push   edx
c001a185:	50                   	push   eax
c001a186:	66 90                	xchg   ax,ax
c001a188:	6a 00                	push   0x0
c001a18a:	66 90                	xchg   ax,ax
c001a18c:	e8 3c fe ff ff       	call   c0019fcd <Vm::fpuSetReg(int, unsigned long long)>
c001a191:	eb b1                	jmp    c001a144 <Vm::x87Handler(regs*)+0x7a>
c001a193:	90                   	nop
c001a194:	e8 b7 fc ff ff       	call   c0019e50 <Vm::fpuGetLog210()>
c001a199:	eb 9d                	jmp    c001a138 <Vm::x87Handler(regs*)+0x6e>
c001a19b:	90                   	nop
c001a19c:	e8 7f fc ff ff       	call   c0019e20 <Vm::fpuGetLog2E()>
c001a1a1:	eb 95                	jmp    c001a138 <Vm::x87Handler(regs*)+0x6e>
c001a1a3:	90                   	nop
c001a1a4:	e8 6f fc ff ff       	call   c0019e18 <Vm::fpuGetPi()>
c001a1a9:	eb 8d                	jmp    c001a138 <Vm::x87Handler(regs*)+0x6e>
c001a1ab:	90                   	nop
c001a1ac:	e8 b7 fc ff ff       	call   c0019e68 <Vm::fpuGetLog102()>
c001a1b1:	eb 85                	jmp    c001a138 <Vm::x87Handler(regs*)+0x6e>
c001a1b3:	90                   	nop
c001a1b4:	e8 7f fc ff ff       	call   c0019e38 <Vm::fpuGetLogE2()>
c001a1b9:	e9 7a ff ff ff       	jmp    c001a138 <Vm::x87Handler(regs*)+0x6e>
c001a1be:	66 90                	xchg   ax,ax
c001a1c0:	8d 50 40             	lea    edx,[eax+0x40]
c001a1c3:	80 fa 07             	cmp    dl,0x7
c001a1c6:	77 18                	ja     c001a1e0 <Vm::x87Handler(regs*)+0x116>
c001a1c8:	83 ec 0c             	sub    esp,0xc
c001a1cb:	2d c0 00 00 00       	sub    eax,0xc0
c001a1d0:	50                   	push   eax
c001a1d1:	e8 b4 fd ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a1d6:	59                   	pop    ecx
c001a1d7:	5e                   	pop    esi
c001a1d8:	e9 5f ff ff ff       	jmp    c001a13c <Vm::x87Handler(regs*)+0x72>
c001a1dd:	8d 76 00             	lea    esi,[esi+0x0]
c001a1e0:	8d 50 38             	lea    edx,[eax+0x38]
c001a1e3:	80 fa 07             	cmp    dl,0x7
c001a1e6:	77 3c                	ja     c001a224 <Vm::x87Handler(regs*)+0x15a>
c001a1e8:	83 ec 0c             	sub    esp,0xc
c001a1eb:	2d c8 00 00 00       	sub    eax,0xc8
c001a1f0:	50                   	push   eax
c001a1f1:	e8 94 fd ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a1f6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a1fd:	89 c6                	mov    esi,eax
c001a1ff:	89 d7                	mov    edi,edx
c001a201:	e8 84 fd ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a206:	83 c4 0c             	add    esp,0xc
c001a209:	52                   	push   edx
c001a20a:	50                   	push   eax
c001a20b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a20f:	2d c8 00 00 00       	sub    eax,0xc8
c001a214:	50                   	push   eax
c001a215:	e8 b3 fd ff ff       	call   c0019fcd <Vm::fpuSetReg(int, unsigned long long)>
c001a21a:	83 c4 0c             	add    esp,0xc
c001a21d:	57                   	push   edi
c001a21e:	56                   	push   esi
c001a21f:	e9 64 ff ff ff       	jmp    c001a188 <Vm::x87Handler(regs*)+0xbe>
c001a224:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a228:	84 d2                	test   dl,dl
c001a22a:	75 10                	jne    c001a23c <Vm::x87Handler(regs*)+0x172>
c001a22c:	83 ec 0c             	sub    esp,0xc
c001a22f:	ff 36                	push   DWORD PTR [esi]
c001a231:	e8 8d fa ff ff       	call   c0019cc3 <Vm::fpu32ToInternal(unsigned int)>
c001a236:	e9 c9 00 00 00       	jmp    c001a304 <Vm::x87Handler(regs*)+0x23a>
c001a23b:	90                   	nop
c001a23c:	80 fa 03             	cmp    dl,0x3
c001a23f:	75 13                	jne    c001a254 <Vm::x87Handler(regs*)+0x18a>
c001a241:	e8 31 fe ff ff       	call   c001a077 <Vm::fpuPop()>
c001a246:	55                   	push   ebp
c001a247:	55                   	push   ebp
c001a248:	52                   	push   edx
c001a249:	50                   	push   eax
c001a24a:	e8 0d fa ff ff       	call   c0019c5c <Vm::fpuInternalTo32(unsigned long long)>
c001a24f:	e9 90 00 00 00       	jmp    c001a2e4 <Vm::x87Handler(regs*)+0x21a>
c001a254:	80 fa 05             	cmp    dl,0x5
c001a257:	75 0f                	jne    c001a268 <Vm::x87Handler(regs*)+0x19e>
c001a259:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a25c:	66 a3 a2 94 02 c0    	mov    ds:0xc00294a2,ax
c001a262:	e9 ed 00 00 00       	jmp    c001a354 <Vm::x87Handler(regs*)+0x28a>
c001a267:	90                   	nop
c001a268:	31 c0                	xor    eax,eax
c001a26a:	80 fa 07             	cmp    dl,0x7
c001a26d:	0f 85 69 09 00 00    	jne    c001abdc <Vm::x87Handler(regs*)+0xb12>
c001a273:	66 a1 a2 94 02 c0    	mov    ax,ds:0xc00294a2
c001a279:	66 89 06             	mov    WORD PTR [esi],ax
c001a27c:	e9 d3 00 00 00       	jmp    c001a354 <Vm::x87Handler(regs*)+0x28a>
c001a281:	8d 76 00             	lea    esi,[esi+0x0]
c001a284:	80 fa d8             	cmp    dl,0xd8
c001a287:	0f 84 d3 00 00 00    	je     c001a360 <Vm::x87Handler(regs*)+0x296>
c001a28d:	80 fa dc             	cmp    dl,0xdc
c001a290:	0f 84 2a 02 00 00    	je     c001a4c0 <Vm::x87Handler(regs*)+0x3f6>
c001a296:	80 fa de             	cmp    dl,0xde
c001a299:	0f 84 f1 02 00 00    	je     c001a590 <Vm::x87Handler(regs*)+0x4c6>
c001a29f:	80 fa dd             	cmp    dl,0xdd
c001a2a2:	0f 84 94 04 00 00    	je     c001a73c <Vm::x87Handler(regs*)+0x672>
c001a2a8:	80 fa da             	cmp    dl,0xda
c001a2ab:	0f 84 5f 05 00 00    	je     c001a810 <Vm::x87Handler(regs*)+0x746>
c001a2b1:	80 fa df             	cmp    dl,0xdf
c001a2b4:	0f 84 aa 05 00 00    	je     c001a864 <Vm::x87Handler(regs*)+0x79a>
c001a2ba:	31 c0                	xor    eax,eax
c001a2bc:	80 fa db             	cmp    dl,0xdb
c001a2bf:	0f 85 17 09 00 00    	jne    c001abdc <Vm::x87Handler(regs*)+0xb12>
c001a2c5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a2c9:	80 fa 03             	cmp    dl,0x3
c001a2cc:	0f 85 c2 06 00 00    	jne    c001a994 <Vm::x87Handler(regs*)+0x8ca>
c001a2d2:	e8 a0 fd ff ff       	call   c001a077 <Vm::fpuPop()>
c001a2d7:	55                   	push   ebp
c001a2d8:	55                   	push   ebp
c001a2d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a2dc:	52                   	push   edx
c001a2dd:	50                   	push   eax
c001a2de:	e8 2e fa ff ff       	call   c0019d11 <Vm::fpuFloatToLong(unsigned long long)>
c001a2e3:	90                   	nop
c001a2e4:	83 c4 10             	add    esp,0x10
c001a2e7:	89 06                	mov    DWORD PTR [esi],eax
c001a2e9:	eb 69                	jmp    c001a354 <Vm::x87Handler(regs*)+0x28a>
c001a2eb:	90                   	nop
c001a2ec:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a2f0:	84 d2                	test   dl,dl
c001a2f2:	0f 85 2c 06 00 00    	jne    c001a924 <Vm::x87Handler(regs*)+0x85a>
c001a2f8:	57                   	push   edi
c001a2f9:	57                   	push   edi
c001a2fa:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a2fd:	ff 36                	push   DWORD PTR [esi]
c001a2ff:	e8 04 fa ff ff       	call   c0019d08 <Vm::fpu64ToInternal(unsigned long long)>
c001a304:	5e                   	pop    esi
c001a305:	5f                   	pop    edi
c001a306:	52                   	push   edx
c001a307:	50                   	push   eax
c001a308:	e8 0c fd ff ff       	call   c001a019 <Vm::fpuPush(unsigned long long)>
c001a30d:	8d 76 00             	lea    esi,[esi+0x0]
c001a310:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a314:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a317:	e9 2c fe ff ff       	jmp    c001a148 <Vm::x87Handler(regs*)+0x7e>
c001a31c:	80 fa 03             	cmp    dl,0x3
c001a31f:	0f 85 2b 07 00 00    	jne    c001aa50 <Vm::x87Handler(regs*)+0x986>
c001a325:	57                   	push   edi
c001a326:	57                   	push   edi
c001a327:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a32a:	ff 36                	push   DWORD PTR [esi]
c001a32c:	e8 d7 f9 ff ff       	call   c0019d08 <Vm::fpu64ToInternal(unsigned long long)>
c001a331:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a338:	89 c6                	mov    esi,eax
c001a33a:	89 d7                	mov    edi,edx
c001a33c:	e8 49 fc ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a341:	57                   	push   edi
c001a342:	56                   	push   esi
c001a343:	52                   	push   edx
c001a344:	50                   	push   eax
c001a345:	e8 60 fb ff ff       	call   c0019eaa <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a34a:	83 c4 20             	add    esp,0x20
c001a34d:	e8 25 fd ff ff       	call   c001a077 <Vm::fpuPop()>
c001a352:	66 90                	xchg   ax,ax
c001a354:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a358:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a35b:	e9 ec fd ff ff       	jmp    c001a14c <Vm::x87Handler(regs*)+0x82>
c001a360:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a364:	8d 50 40             	lea    edx,[eax+0x40]
c001a367:	80 fa 07             	cmp    dl,0x7
c001a36a:	77 2c                	ja     c001a398 <Vm::x87Handler(regs*)+0x2ce>
c001a36c:	83 ec 0c             	sub    esp,0xc
c001a36f:	2d c0 00 00 00       	sub    eax,0xc0
c001a374:	50                   	push   eax
c001a375:	e8 10 fc ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a37a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a381:	89 c6                	mov    esi,eax
c001a383:	89 d7                	mov    edi,edx
c001a385:	e8 00 fc ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a38a:	57                   	push   edi
c001a38b:	56                   	push   esi
c001a38c:	52                   	push   edx
c001a38d:	50                   	push   eax
c001a38e:	e8 6d fb ff ff       	call   c0019f00 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a393:	eb 33                	jmp    c001a3c8 <Vm::x87Handler(regs*)+0x2fe>
c001a395:	8d 76 00             	lea    esi,[esi+0x0]
c001a398:	8d 50 38             	lea    edx,[eax+0x38]
c001a39b:	80 fa 07             	cmp    dl,0x7
c001a39e:	77 30                	ja     c001a3d0 <Vm::x87Handler(regs*)+0x306>
c001a3a0:	83 ec 0c             	sub    esp,0xc
c001a3a3:	2d c8 00 00 00       	sub    eax,0xc8
c001a3a8:	50                   	push   eax
c001a3a9:	e8 dc fb ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a3ae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a3b5:	89 c6                	mov    esi,eax
c001a3b7:	89 d7                	mov    edi,edx
c001a3b9:	e8 cc fb ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a3be:	57                   	push   edi
c001a3bf:	56                   	push   esi
c001a3c0:	52                   	push   edx
c001a3c1:	50                   	push   eax
c001a3c2:	e8 72 fb ff ff       	call   c0019f39 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a3c7:	90                   	nop
c001a3c8:	83 c4 1c             	add    esp,0x1c
c001a3cb:	e9 b4 fd ff ff       	jmp    c001a184 <Vm::x87Handler(regs*)+0xba>
c001a3d0:	8d 50 30             	lea    edx,[eax+0x30]
c001a3d3:	80 fa 07             	cmp    dl,0x7
c001a3d6:	77 10                	ja     c001a3e8 <Vm::x87Handler(regs*)+0x31e>
c001a3d8:	83 ec 0c             	sub    esp,0xc
c001a3db:	2d d0 00 00 00       	sub    eax,0xd0
c001a3e0:	e9 c3 03 00 00       	jmp    c001a7a8 <Vm::x87Handler(regs*)+0x6de>
c001a3e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a3e8:	8d 50 28             	lea    edx,[eax+0x28]
c001a3eb:	80 fa 07             	cmp    dl,0x7
c001a3ee:	77 10                	ja     c001a400 <Vm::x87Handler(regs*)+0x336>
c001a3f0:	83 ec 0c             	sub    esp,0xc
c001a3f3:	2d d8 00 00 00       	sub    eax,0xd8
c001a3f8:	e9 e7 03 00 00       	jmp    c001a7e4 <Vm::x87Handler(regs*)+0x71a>
c001a3fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a400:	8d 50 20             	lea    edx,[eax+0x20]
c001a403:	80 fa 07             	cmp    dl,0x7
c001a406:	77 1c                	ja     c001a424 <Vm::x87Handler(regs*)+0x35a>
c001a408:	83 ec 0c             	sub    esp,0xc
c001a40b:	2d e0 00 00 00       	sub    eax,0xe0
c001a410:	50                   	push   eax
c001a411:	e8 74 fb ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a416:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a41d:	89 c6                	mov    esi,eax
c001a41f:	89 d7                	mov    edi,edx
c001a421:	eb 25                	jmp    c001a448 <Vm::x87Handler(regs*)+0x37e>
c001a423:	90                   	nop
c001a424:	8d 50 18             	lea    edx,[eax+0x18]
c001a427:	80 fa 07             	cmp    dl,0x7
c001a42a:	77 30                	ja     c001a45c <Vm::x87Handler(regs*)+0x392>
c001a42c:	83 ec 0c             	sub    esp,0xc
c001a42f:	6a 00                	push   0x0
c001a431:	e8 54 fb ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a436:	89 c6                	mov    esi,eax
c001a438:	89 d7                	mov    edi,edx
c001a43a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a43e:	2d e8 00 00 00       	sub    eax,0xe8
c001a443:	89 04 24             	mov    DWORD PTR [esp],eax
c001a446:	66 90                	xchg   ax,ax
c001a448:	e8 3d fb ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a44d:	57                   	push   edi
c001a44e:	56                   	push   esi
c001a44f:	52                   	push   edx
c001a450:	50                   	push   eax
c001a451:	e8 d4 fa ff ff       	call   c0019f2a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a456:	e9 6d ff ff ff       	jmp    c001a3c8 <Vm::x87Handler(regs*)+0x2fe>
c001a45b:	90                   	nop
c001a45c:	8d 50 10             	lea    edx,[eax+0x10]
c001a45f:	80 fa 07             	cmp    dl,0x7
c001a462:	77 1c                	ja     c001a480 <Vm::x87Handler(regs*)+0x3b6>
c001a464:	83 ec 0c             	sub    esp,0xc
c001a467:	2d f0 00 00 00       	sub    eax,0xf0
c001a46c:	50                   	push   eax
c001a46d:	e8 18 fb ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a472:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a479:	89 c6                	mov    esi,eax
c001a47b:	89 d7                	mov    edi,edx
c001a47d:	eb 25                	jmp    c001a4a4 <Vm::x87Handler(regs*)+0x3da>
c001a47f:	90                   	nop
c001a480:	3c f7                	cmp    al,0xf7
c001a482:	0f 86 00 04 00 00    	jbe    c001a888 <Vm::x87Handler(regs*)+0x7be>
c001a488:	83 ec 0c             	sub    esp,0xc
c001a48b:	6a 00                	push   0x0
c001a48d:	e8 f8 fa ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a492:	89 c6                	mov    esi,eax
c001a494:	89 d7                	mov    edi,edx
c001a496:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a49a:	2d f8 00 00 00       	sub    eax,0xf8
c001a49f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4a2:	66 90                	xchg   ax,ax
c001a4a4:	e8 e1 fa ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a4a9:	57                   	push   edi
c001a4aa:	56                   	push   esi
c001a4ab:	52                   	push   edx
c001a4ac:	50                   	push   eax
c001a4ad:	e8 a6 fa ff ff       	call   c0019f58 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a4b2:	83 c4 1c             	add    esp,0x1c
c001a4b5:	52                   	push   edx
c001a4b6:	50                   	push   eax
c001a4b7:	6a 00                	push   0x0
c001a4b9:	e9 6a 02 00 00       	jmp    c001a728 <Vm::x87Handler(regs*)+0x65e>
c001a4be:	66 90                	xchg   ax,ax
c001a4c0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a4c4:	8d 50 40             	lea    edx,[eax+0x40]
c001a4c7:	80 fa 07             	cmp    dl,0x7
c001a4ca:	77 38                	ja     c001a504 <Vm::x87Handler(regs*)+0x43a>
c001a4cc:	83 ec 0c             	sub    esp,0xc
c001a4cf:	2d c0 00 00 00       	sub    eax,0xc0
c001a4d4:	50                   	push   eax
c001a4d5:	e8 b0 fa ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a4da:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a4e1:	89 c6                	mov    esi,eax
c001a4e3:	89 d7                	mov    edi,edx
c001a4e5:	e8 a0 fa ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a4ea:	57                   	push   edi
c001a4eb:	56                   	push   esi
c001a4ec:	52                   	push   edx
c001a4ed:	50                   	push   eax
c001a4ee:	e8 0d fa ff ff       	call   c0019f00 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a4f3:	83 c4 1c             	add    esp,0x1c
c001a4f6:	52                   	push   edx
c001a4f7:	50                   	push   eax
c001a4f8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a4fc:	2d c0 00 00 00       	sub    eax,0xc0
c001a501:	eb 41                	jmp    c001a544 <Vm::x87Handler(regs*)+0x47a>
c001a503:	90                   	nop
c001a504:	8d 50 38             	lea    edx,[eax+0x38]
c001a507:	80 fa 07             	cmp    dl,0x7
c001a50a:	77 40                	ja     c001a54c <Vm::x87Handler(regs*)+0x482>
c001a50c:	83 ec 0c             	sub    esp,0xc
c001a50f:	2d c8 00 00 00       	sub    eax,0xc8
c001a514:	50                   	push   eax
c001a515:	e8 70 fa ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a51a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a521:	89 c6                	mov    esi,eax
c001a523:	89 d7                	mov    edi,edx
c001a525:	e8 60 fa ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a52a:	57                   	push   edi
c001a52b:	56                   	push   esi
c001a52c:	52                   	push   edx
c001a52d:	50                   	push   eax
c001a52e:	e8 06 fa ff ff       	call   c0019f39 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a533:	83 c4 1c             	add    esp,0x1c
c001a536:	52                   	push   edx
c001a537:	50                   	push   eax
c001a538:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a53c:	2d c8 00 00 00       	sub    eax,0xc8
c001a541:	8d 76 00             	lea    esi,[esi+0x0]
c001a544:	50                   	push   eax
c001a545:	e9 42 fc ff ff       	jmp    c001a18c <Vm::x87Handler(regs*)+0xc2>
c001a54a:	66 90                	xchg   ax,ax
c001a54c:	83 c0 18             	add    eax,0x18
c001a54f:	3c 07                	cmp    al,0x7
c001a551:	0f 87 6d 04 00 00    	ja     c001a9c4 <Vm::x87Handler(regs*)+0x8fa>
c001a557:	83 ec 0c             	sub    esp,0xc
c001a55a:	6a 00                	push   0x0
c001a55c:	e8 29 fa ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a561:	89 c6                	mov    esi,eax
c001a563:	89 d7                	mov    edi,edx
c001a565:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a569:	2d e8 00 00 00       	sub    eax,0xe8
c001a56e:	89 04 24             	mov    DWORD PTR [esp],eax
c001a571:	e8 14 fa ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a576:	57                   	push   edi
c001a577:	56                   	push   esi
c001a578:	52                   	push   edx
c001a579:	50                   	push   eax
c001a57a:	e8 ab f9 ff ff       	call   c0019f2a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a57f:	83 c4 1c             	add    esp,0x1c
c001a582:	52                   	push   edx
c001a583:	50                   	push   eax
c001a584:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a588:	2d e8 00 00 00       	sub    eax,0xe8
c001a58d:	eb b5                	jmp    c001a544 <Vm::x87Handler(regs*)+0x47a>
c001a58f:	90                   	nop
c001a590:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a594:	8d 50 40             	lea    edx,[eax+0x40]
c001a597:	80 fa 07             	cmp    dl,0x7
c001a59a:	77 3c                	ja     c001a5d8 <Vm::x87Handler(regs*)+0x50e>
c001a59c:	83 ec 0c             	sub    esp,0xc
c001a59f:	2d c0 00 00 00       	sub    eax,0xc0
c001a5a4:	50                   	push   eax
c001a5a5:	e8 e0 f9 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a5aa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a5b1:	89 c6                	mov    esi,eax
c001a5b3:	89 d7                	mov    edi,edx
c001a5b5:	e8 d0 f9 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a5ba:	57                   	push   edi
c001a5bb:	56                   	push   esi
c001a5bc:	52                   	push   edx
c001a5bd:	50                   	push   eax
c001a5be:	e8 3d f9 ff ff       	call   c0019f00 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a5c3:	83 c4 1c             	add    esp,0x1c
c001a5c6:	52                   	push   edx
c001a5c7:	50                   	push   eax
c001a5c8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a5cc:	2d c0 00 00 00       	sub    eax,0xc0
c001a5d1:	e9 b2 01 00 00       	jmp    c001a788 <Vm::x87Handler(regs*)+0x6be>
c001a5d6:	66 90                	xchg   ax,ax
c001a5d8:	8d 50 20             	lea    edx,[eax+0x20]
c001a5db:	80 fa 07             	cmp    dl,0x7
c001a5de:	77 3c                	ja     c001a61c <Vm::x87Handler(regs*)+0x552>
c001a5e0:	83 ec 0c             	sub    esp,0xc
c001a5e3:	2d e0 00 00 00       	sub    eax,0xe0
c001a5e8:	50                   	push   eax
c001a5e9:	e8 9c f9 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a5ee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a5f5:	89 c6                	mov    esi,eax
c001a5f7:	89 d7                	mov    edi,edx
c001a5f9:	e8 8c f9 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a5fe:	57                   	push   edi
c001a5ff:	56                   	push   esi
c001a600:	52                   	push   edx
c001a601:	50                   	push   eax
c001a602:	e8 23 f9 ff ff       	call   c0019f2a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a607:	83 c4 1c             	add    esp,0x1c
c001a60a:	52                   	push   edx
c001a60b:	50                   	push   eax
c001a60c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a610:	2d e0 00 00 00       	sub    eax,0xe0
c001a615:	e9 6e 01 00 00       	jmp    c001a788 <Vm::x87Handler(regs*)+0x6be>
c001a61a:	66 90                	xchg   ax,ax
c001a61c:	8d 50 18             	lea    edx,[eax+0x18]
c001a61f:	80 fa 07             	cmp    dl,0x7
c001a622:	77 3c                	ja     c001a660 <Vm::x87Handler(regs*)+0x596>
c001a624:	83 ec 0c             	sub    esp,0xc
c001a627:	6a 00                	push   0x0
c001a629:	e8 5c f9 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a62e:	89 c6                	mov    esi,eax
c001a630:	89 d7                	mov    edi,edx
c001a632:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a636:	2d e8 00 00 00       	sub    eax,0xe8
c001a63b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a63e:	e8 47 f9 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a643:	57                   	push   edi
c001a644:	56                   	push   esi
c001a645:	52                   	push   edx
c001a646:	50                   	push   eax
c001a647:	e8 de f8 ff ff       	call   c0019f2a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a64c:	83 c4 1c             	add    esp,0x1c
c001a64f:	52                   	push   edx
c001a650:	50                   	push   eax
c001a651:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a655:	2d e8 00 00 00       	sub    eax,0xe8
c001a65a:	e9 29 01 00 00       	jmp    c001a788 <Vm::x87Handler(regs*)+0x6be>
c001a65f:	90                   	nop
c001a660:	8d 50 38             	lea    edx,[eax+0x38]
c001a663:	80 fa 07             	cmp    dl,0x7
c001a666:	77 3c                	ja     c001a6a4 <Vm::x87Handler(regs*)+0x5da>
c001a668:	83 ec 0c             	sub    esp,0xc
c001a66b:	2d c8 00 00 00       	sub    eax,0xc8
c001a670:	50                   	push   eax
c001a671:	e8 14 f9 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a676:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a67d:	89 c6                	mov    esi,eax
c001a67f:	89 d7                	mov    edi,edx
c001a681:	e8 04 f9 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a686:	57                   	push   edi
c001a687:	56                   	push   esi
c001a688:	52                   	push   edx
c001a689:	50                   	push   eax
c001a68a:	e8 aa f8 ff ff       	call   c0019f39 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a68f:	83 c4 1c             	add    esp,0x1c
c001a692:	52                   	push   edx
c001a693:	50                   	push   eax
c001a694:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a698:	2d c8 00 00 00       	sub    eax,0xc8
c001a69d:	e9 82 00 00 00       	jmp    c001a724 <Vm::x87Handler(regs*)+0x65a>
c001a6a2:	66 90                	xchg   ax,ax
c001a6a4:	3c f7                	cmp    al,0xf7
c001a6a6:	76 38                	jbe    c001a6e0 <Vm::x87Handler(regs*)+0x616>
c001a6a8:	83 ec 0c             	sub    esp,0xc
c001a6ab:	6a 00                	push   0x0
c001a6ad:	e8 d8 f8 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a6b2:	89 c6                	mov    esi,eax
c001a6b4:	89 d7                	mov    edi,edx
c001a6b6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a6ba:	2d f8 00 00 00       	sub    eax,0xf8
c001a6bf:	89 04 24             	mov    DWORD PTR [esp],eax
c001a6c2:	e8 c3 f8 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a6c7:	57                   	push   edi
c001a6c8:	56                   	push   esi
c001a6c9:	52                   	push   edx
c001a6ca:	50                   	push   eax
c001a6cb:	e8 88 f8 ff ff       	call   c0019f58 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a6d0:	83 c4 1c             	add    esp,0x1c
c001a6d3:	52                   	push   edx
c001a6d4:	50                   	push   eax
c001a6d5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a6d9:	2d f8 00 00 00       	sub    eax,0xf8
c001a6de:	eb 44                	jmp    c001a724 <Vm::x87Handler(regs*)+0x65a>
c001a6e0:	8d 50 10             	lea    edx,[eax+0x10]
c001a6e3:	80 fa 07             	cmp    dl,0x7
c001a6e6:	0f 87 6c 01 00 00    	ja     c001a858 <Vm::x87Handler(regs*)+0x78e>
c001a6ec:	83 ec 0c             	sub    esp,0xc
c001a6ef:	2d f0 00 00 00       	sub    eax,0xf0
c001a6f4:	50                   	push   eax
c001a6f5:	e8 90 f8 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a6fa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a701:	89 c6                	mov    esi,eax
c001a703:	89 d7                	mov    edi,edx
c001a705:	e8 80 f8 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a70a:	57                   	push   edi
c001a70b:	56                   	push   esi
c001a70c:	52                   	push   edx
c001a70d:	50                   	push   eax
c001a70e:	e8 45 f8 ff ff       	call   c0019f58 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a713:	83 c4 1c             	add    esp,0x1c
c001a716:	52                   	push   edx
c001a717:	50                   	push   eax
c001a718:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a71c:	2d f0 00 00 00       	sub    eax,0xf0
c001a721:	8d 76 00             	lea    esi,[esi+0x0]
c001a724:	50                   	push   eax
c001a725:	8d 76 00             	lea    esi,[esi+0x0]
c001a728:	e8 a0 f8 ff ff       	call   c0019fcd <Vm::fpuSetReg(int, unsigned long long)>
c001a72d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a731:	e8 41 f9 ff ff       	call   c001a077 <Vm::fpuPop()>
c001a736:	e9 0d fa ff ff       	jmp    c001a148 <Vm::x87Handler(regs*)+0x7e>
c001a73b:	90                   	nop
c001a73c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a740:	8d 50 30             	lea    edx,[eax+0x30]
c001a743:	80 fa 07             	cmp    dl,0x7
c001a746:	77 20                	ja     c001a768 <Vm::x87Handler(regs*)+0x69e>
c001a748:	83 ec 0c             	sub    esp,0xc
c001a74b:	6a 00                	push   0x0
c001a74d:	e8 38 f8 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a752:	83 c4 0c             	add    esp,0xc
c001a755:	52                   	push   edx
c001a756:	50                   	push   eax
c001a757:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a75b:	2d d0 00 00 00       	sub    eax,0xd0
c001a760:	e9 df fd ff ff       	jmp    c001a544 <Vm::x87Handler(regs*)+0x47a>
c001a765:	8d 76 00             	lea    esi,[esi+0x0]
c001a768:	8d 50 28             	lea    edx,[eax+0x28]
c001a76b:	80 fa 07             	cmp    dl,0x7
c001a76e:	77 28                	ja     c001a798 <Vm::x87Handler(regs*)+0x6ce>
c001a770:	83 ec 0c             	sub    esp,0xc
c001a773:	6a 00                	push   0x0
c001a775:	e8 10 f8 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a77a:	83 c4 0c             	add    esp,0xc
c001a77d:	52                   	push   edx
c001a77e:	50                   	push   eax
c001a77f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a783:	2d d8 00 00 00       	sub    eax,0xd8
c001a788:	50                   	push   eax
c001a789:	e8 3f f8 ff ff       	call   c0019fcd <Vm::fpuSetReg(int, unsigned long long)>
c001a78e:	e8 e4 f8 ff ff       	call   c001a077 <Vm::fpuPop()>
c001a793:	e9 ac f9 ff ff       	jmp    c001a144 <Vm::x87Handler(regs*)+0x7a>
c001a798:	8d 50 20             	lea    edx,[eax+0x20]
c001a79b:	80 fa 07             	cmp    dl,0x7
c001a79e:	77 30                	ja     c001a7d0 <Vm::x87Handler(regs*)+0x706>
c001a7a0:	83 ec 0c             	sub    esp,0xc
c001a7a3:	2d e0 00 00 00       	sub    eax,0xe0
c001a7a8:	50                   	push   eax
c001a7a9:	e8 dc f7 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a7ae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a7b5:	89 c6                	mov    esi,eax
c001a7b7:	89 d7                	mov    edi,edx
c001a7b9:	e8 cc f7 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a7be:	57                   	push   edi
c001a7bf:	56                   	push   esi
c001a7c0:	52                   	push   edx
c001a7c1:	50                   	push   eax
c001a7c2:	e8 e3 f6 ff ff       	call   c0019eaa <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a7c7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a7cb:	e9 78 02 00 00       	jmp    c001aa48 <Vm::x87Handler(regs*)+0x97e>
c001a7d0:	8d 50 18             	lea    edx,[eax+0x18]
c001a7d3:	80 fa 07             	cmp    dl,0x7
c001a7d6:	0f 87 10 fb ff ff    	ja     c001a2ec <Vm::x87Handler(regs*)+0x222>
c001a7dc:	83 ec 0c             	sub    esp,0xc
c001a7df:	2d e8 00 00 00       	sub    eax,0xe8
c001a7e4:	50                   	push   eax
c001a7e5:	e8 a0 f7 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a7ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a7f1:	89 c6                	mov    esi,eax
c001a7f3:	89 d7                	mov    edi,edx
c001a7f5:	e8 90 f7 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a7fa:	57                   	push   edi
c001a7fb:	56                   	push   esi
c001a7fc:	52                   	push   edx
c001a7fd:	50                   	push   eax
c001a7fe:	e8 a7 f6 ff ff       	call   c0019eaa <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a803:	83 c4 20             	add    esp,0x20
c001a806:	e8 6c f8 ff ff       	call   c001a077 <Vm::fpuPop()>
c001a80b:	eb 6f                	jmp    c001a87c <Vm::x87Handler(regs*)+0x7b2>
c001a80d:	8d 76 00             	lea    esi,[esi+0x0]
c001a810:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a814:	0f 85 22 01 00 00    	jne    c001a93c <Vm::x87Handler(regs*)+0x872>
c001a81a:	66 90                	xchg   ax,ax
c001a81c:	83 ec 0c             	sub    esp,0xc
c001a81f:	6a 01                	push   0x1
c001a821:	e8 64 f7 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a826:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a82d:	89 c6                	mov    esi,eax
c001a82f:	89 d7                	mov    edi,edx
c001a831:	e8 54 f7 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a836:	57                   	push   edi
c001a837:	56                   	push   esi
c001a838:	52                   	push   edx
c001a839:	50                   	push   eax
c001a83a:	e8 6b f6 ff ff       	call   c0019eaa <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a83f:	83 c4 20             	add    esp,0x20
c001a842:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a846:	e8 2c f8 ff ff       	call   c001a077 <Vm::fpuPop()>
c001a84b:	e8 27 f8 ff ff       	call   c001a077 <Vm::fpuPop()>
c001a850:	e9 f7 f8 ff ff       	jmp    c001a14c <Vm::x87Handler(regs*)+0x82>
c001a855:	8d 76 00             	lea    esi,[esi+0x0]
c001a858:	3c d9                	cmp    al,0xd9
c001a85a:	0f 85 e8 02 00 00    	jne    c001ab48 <Vm::x87Handler(regs*)+0xa7e>
c001a860:	eb ba                	jmp    c001a81c <Vm::x87Handler(regs*)+0x752>
c001a862:	66 90                	xchg   ax,ax
c001a864:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a868:	0f 85 2a 03 00 00    	jne    c001ab98 <Vm::x87Handler(regs*)+0xace>
c001a86e:	0f b7 05 a0 94 02 c0 	movzx  eax,WORD PTR ds:0xc00294a0
c001a875:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a879:	8d 76 00             	lea    esi,[esi+0x0]
c001a87c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a880:	e9 c7 f8 ff ff       	jmp    c001a14c <Vm::x87Handler(regs*)+0x82>
c001a885:	8d 76 00             	lea    esi,[esi+0x0]
c001a888:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a88c:	84 d2                	test   dl,dl
c001a88e:	75 10                	jne    c001a8a0 <Vm::x87Handler(regs*)+0x7d6>
c001a890:	83 ec 0c             	sub    esp,0xc
c001a893:	ff 36                	push   DWORD PTR [esi]
c001a895:	e8 29 f4 ff ff       	call   c0019cc3 <Vm::fpu32ToInternal(unsigned int)>
c001a89a:	e9 39 01 00 00       	jmp    c001a9d8 <Vm::x87Handler(regs*)+0x90e>
c001a89f:	90                   	nop
c001a8a0:	80 fa 01             	cmp    dl,0x1
c001a8a3:	75 0f                	jne    c001a8b4 <Vm::x87Handler(regs*)+0x7ea>
c001a8a5:	83 ec 0c             	sub    esp,0xc
c001a8a8:	ff 36                	push   DWORD PTR [esi]
c001a8aa:	e8 14 f4 ff ff       	call   c0019cc3 <Vm::fpu32ToInternal(unsigned int)>
c001a8af:	e9 b4 02 00 00       	jmp    c001ab68 <Vm::x87Handler(regs*)+0xa9e>
c001a8b4:	80 fa 04             	cmp    dl,0x4
c001a8b7:	75 0f                	jne    c001a8c8 <Vm::x87Handler(regs*)+0x7fe>
c001a8b9:	83 ec 0c             	sub    esp,0xc
c001a8bc:	ff 36                	push   DWORD PTR [esi]
c001a8be:	e8 00 f4 ff ff       	call   c0019cc3 <Vm::fpu32ToInternal(unsigned int)>
c001a8c3:	e9 9c 01 00 00       	jmp    c001aa64 <Vm::x87Handler(regs*)+0x99a>
c001a8c8:	80 fa 05             	cmp    dl,0x5
c001a8cb:	75 1b                	jne    c001a8e8 <Vm::x87Handler(regs*)+0x81e>
c001a8cd:	83 ec 0c             	sub    esp,0xc
c001a8d0:	6a 00                	push   0x0
c001a8d2:	e8 b3 f6 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a8d7:	89 c7                	mov    edi,eax
c001a8d9:	89 d5                	mov    ebp,edx
c001a8db:	58                   	pop    eax
c001a8dc:	ff 36                	push   DWORD PTR [esi]
c001a8de:	e8 e0 f3 ff ff       	call   c0019cc3 <Vm::fpu32ToInternal(unsigned int)>
c001a8e3:	e9 bc 01 00 00       	jmp    c001aaa4 <Vm::x87Handler(regs*)+0x9da>
c001a8e8:	80 fa 06             	cmp    dl,0x6
c001a8eb:	75 0f                	jne    c001a8fc <Vm::x87Handler(regs*)+0x832>
c001a8ed:	83 ec 0c             	sub    esp,0xc
c001a8f0:	ff 36                	push   DWORD PTR [esi]
c001a8f2:	e8 cc f3 ff ff       	call   c0019cc3 <Vm::fpu32ToInternal(unsigned int)>
c001a8f7:	e9 cc 01 00 00       	jmp    c001aac8 <Vm::x87Handler(regs*)+0x9fe>
c001a8fc:	31 c0                	xor    eax,eax
c001a8fe:	80 fa 07             	cmp    dl,0x7
c001a901:	0f 85 d5 02 00 00    	jne    c001abdc <Vm::x87Handler(regs*)+0xb12>
c001a907:	83 ec 0c             	sub    esp,0xc
c001a90a:	6a 00                	push   0x0
c001a90c:	e8 79 f6 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a911:	89 c7                	mov    edi,eax
c001a913:	89 d5                	mov    ebp,edx
c001a915:	58                   	pop    eax
c001a916:	ff 36                	push   DWORD PTR [esi]
c001a918:	e8 a6 f3 ff ff       	call   c0019cc3 <Vm::fpu32ToInternal(unsigned int)>
c001a91d:	e9 ee 01 00 00       	jmp    c001ab10 <Vm::x87Handler(regs*)+0xa46>
c001a922:	66 90                	xchg   ax,ax
c001a924:	80 fa 03             	cmp    dl,0x3
c001a927:	0f 85 f7 01 00 00    	jne    c001ab24 <Vm::x87Handler(regs*)+0xa5a>
c001a92d:	e8 45 f7 ff ff       	call   c001a077 <Vm::fpuPop()>
c001a932:	51                   	push   ecx
c001a933:	51                   	push   ecx
c001a934:	e9 03 02 00 00       	jmp    c001ab3c <Vm::x87Handler(regs*)+0xa72>
c001a939:	8d 76 00             	lea    esi,[esi+0x0]
c001a93c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a940:	80 fa 01             	cmp    dl,0x1
c001a943:	75 0b                	jne    c001a950 <Vm::x87Handler(regs*)+0x886>
c001a945:	57                   	push   edi
c001a946:	57                   	push   edi
c001a947:	8b 06                	mov    eax,DWORD PTR [esi]
c001a949:	e9 0e 02 00 00       	jmp    c001ab5c <Vm::x87Handler(regs*)+0xa92>
c001a94e:	66 90                	xchg   ax,ax
c001a950:	80 fa 04             	cmp    dl,0x4
c001a953:	75 13                	jne    c001a968 <Vm::x87Handler(regs*)+0x89e>
c001a955:	31 d2                	xor    edx,edx
c001a957:	51                   	push   ecx
c001a958:	51                   	push   ecx
c001a959:	8b 06                	mov    eax,DWORD PTR [esi]
c001a95b:	52                   	push   edx
c001a95c:	50                   	push   eax
c001a95d:	e8 4a f4 ff ff       	call   c0019dac <Vm::fpuLongToFloat(long long)>
c001a962:	e9 fd 00 00 00       	jmp    c001aa64 <Vm::x87Handler(regs*)+0x99a>
c001a967:	90                   	nop
c001a968:	31 c0                	xor    eax,eax
c001a96a:	80 fa 07             	cmp    dl,0x7
c001a96d:	0f 85 69 02 00 00    	jne    c001abdc <Vm::x87Handler(regs*)+0xb12>
c001a973:	83 ec 0c             	sub    esp,0xc
c001a976:	6a 00                	push   0x0
c001a978:	e8 0d f6 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a97d:	89 c7                	mov    edi,eax
c001a97f:	89 d5                	mov    ebp,edx
c001a981:	58                   	pop    eax
c001a982:	8b 06                	mov    eax,DWORD PTR [esi]
c001a984:	5a                   	pop    edx
c001a985:	31 d2                	xor    edx,edx
c001a987:	52                   	push   edx
c001a988:	50                   	push   eax
c001a989:	e8 1e f4 ff ff       	call   c0019dac <Vm::fpuLongToFloat(long long)>
c001a98e:	e9 7d 01 00 00       	jmp    c001ab10 <Vm::x87Handler(regs*)+0xa46>
c001a993:	90                   	nop
c001a994:	84 d2                	test   dl,dl
c001a996:	75 10                	jne    c001a9a8 <Vm::x87Handler(regs*)+0x8de>
c001a998:	31 d2                	xor    edx,edx
c001a99a:	55                   	push   ebp
c001a99b:	55                   	push   ebp
c001a99c:	8b 06                	mov    eax,DWORD PTR [esi]
c001a99e:	52                   	push   edx
c001a99f:	50                   	push   eax
c001a9a0:	e9 03 02 00 00       	jmp    c001aba8 <Vm::x87Handler(regs*)+0xade>
c001a9a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a9a8:	31 c0                	xor    eax,eax
c001a9aa:	80 fa 02             	cmp    dl,0x2
c001a9ad:	0f 85 29 02 00 00    	jne    c001abdc <Vm::x87Handler(regs*)+0xb12>
c001a9b3:	83 ec 0c             	sub    esp,0xc
c001a9b6:	6a 00                	push   0x0
c001a9b8:	e8 cd f5 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a9bd:	59                   	pop    ecx
c001a9be:	5f                   	pop    edi
c001a9bf:	e9 18 f9 ff ff       	jmp    c001a2dc <Vm::x87Handler(regs*)+0x212>
c001a9c4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a9c8:	84 d2                	test   dl,dl
c001a9ca:	75 2c                	jne    c001a9f8 <Vm::x87Handler(regs*)+0x92e>
c001a9cc:	50                   	push   eax
c001a9cd:	50                   	push   eax
c001a9ce:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a9d1:	ff 36                	push   DWORD PTR [esi]
c001a9d3:	e8 30 f3 ff ff       	call   c0019d08 <Vm::fpu64ToInternal(unsigned long long)>
c001a9d8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a9df:	89 c6                	mov    esi,eax
c001a9e1:	89 d7                	mov    edi,edx
c001a9e3:	e8 a2 f5 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001a9e8:	57                   	push   edi
c001a9e9:	56                   	push   esi
c001a9ea:	52                   	push   edx
c001a9eb:	50                   	push   eax
c001a9ec:	e8 0f f5 ff ff       	call   c0019f00 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a9f1:	e9 8e 01 00 00       	jmp    c001ab84 <Vm::x87Handler(regs*)+0xaba>
c001a9f6:	66 90                	xchg   ax,ax
c001a9f8:	80 fa 01             	cmp    dl,0x1
c001a9fb:	75 13                	jne    c001aa10 <Vm::x87Handler(regs*)+0x946>
c001a9fd:	50                   	push   eax
c001a9fe:	50                   	push   eax
c001a9ff:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aa02:	ff 36                	push   DWORD PTR [esi]
c001aa04:	e8 ff f2 ff ff       	call   c0019d08 <Vm::fpu64ToInternal(unsigned long long)>
c001aa09:	e9 5a 01 00 00       	jmp    c001ab68 <Vm::x87Handler(regs*)+0xa9e>
c001aa0e:	66 90                	xchg   ax,ax
c001aa10:	80 fa 02             	cmp    dl,0x2
c001aa13:	0f 85 03 f9 ff ff    	jne    c001a31c <Vm::x87Handler(regs*)+0x252>
c001aa19:	55                   	push   ebp
c001aa1a:	55                   	push   ebp
c001aa1b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aa1e:	ff 36                	push   DWORD PTR [esi]
c001aa20:	e8 e3 f2 ff ff       	call   c0019d08 <Vm::fpu64ToInternal(unsigned long long)>
c001aa25:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aa2c:	89 c6                	mov    esi,eax
c001aa2e:	89 d7                	mov    edi,edx
c001aa30:	e8 55 f5 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001aa35:	57                   	push   edi
c001aa36:	56                   	push   esi
c001aa37:	52                   	push   edx
c001aa38:	50                   	push   eax
c001aa39:	e8 6c f4 ff ff       	call   c0019eaa <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001aa3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001aa42:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001aa45:	8d 76 00             	lea    esi,[esi+0x0]
c001aa48:	83 c4 20             	add    esp,0x20
c001aa4b:	e9 fc f6 ff ff       	jmp    c001a14c <Vm::x87Handler(regs*)+0x82>
c001aa50:	80 fa 04             	cmp    dl,0x4
c001aa53:	75 2f                	jne    c001aa84 <Vm::x87Handler(regs*)+0x9ba>
c001aa55:	51                   	push   ecx
c001aa56:	51                   	push   ecx
c001aa57:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aa5a:	ff 36                	push   DWORD PTR [esi]
c001aa5c:	e8 a7 f2 ff ff       	call   c0019d08 <Vm::fpu64ToInternal(unsigned long long)>
c001aa61:	8d 76 00             	lea    esi,[esi+0x0]
c001aa64:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aa6b:	89 c6                	mov    esi,eax
c001aa6d:	89 d7                	mov    edi,edx
c001aa6f:	e8 16 f5 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001aa74:	57                   	push   edi
c001aa75:	56                   	push   esi
c001aa76:	52                   	push   edx
c001aa77:	50                   	push   eax
c001aa78:	e8 ad f4 ff ff       	call   c0019f2a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001aa7d:	e9 02 01 00 00       	jmp    c001ab84 <Vm::x87Handler(regs*)+0xaba>
c001aa82:	66 90                	xchg   ax,ax
c001aa84:	80 fa 05             	cmp    dl,0x5
c001aa87:	75 2b                	jne    c001aab4 <Vm::x87Handler(regs*)+0x9ea>
c001aa89:	83 ec 0c             	sub    esp,0xc
c001aa8c:	6a 00                	push   0x0
c001aa8e:	e8 f7 f4 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001aa93:	89 c7                	mov    edi,eax
c001aa95:	89 d5                	mov    ebp,edx
c001aa97:	58                   	pop    eax
c001aa98:	5a                   	pop    edx
c001aa99:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aa9c:	ff 36                	push   DWORD PTR [esi]
c001aa9e:	e8 65 f2 ff ff       	call   c0019d08 <Vm::fpu64ToInternal(unsigned long long)>
c001aaa3:	90                   	nop
c001aaa4:	83 c4 10             	add    esp,0x10
c001aaa7:	55                   	push   ebp
c001aaa8:	57                   	push   edi
c001aaa9:	52                   	push   edx
c001aaaa:	50                   	push   eax
c001aaab:	e8 7a f4 ff ff       	call   c0019f2a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001aab0:	eb 6a                	jmp    c001ab1c <Vm::x87Handler(regs*)+0xa52>
c001aab2:	66 90                	xchg   ax,ax
c001aab4:	80 fa 06             	cmp    dl,0x6
c001aab7:	75 2f                	jne    c001aae8 <Vm::x87Handler(regs*)+0xa1e>
c001aab9:	51                   	push   ecx
c001aaba:	51                   	push   ecx
c001aabb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aabe:	ff 36                	push   DWORD PTR [esi]
c001aac0:	e8 43 f2 ff ff       	call   c0019d08 <Vm::fpu64ToInternal(unsigned long long)>
c001aac5:	8d 76 00             	lea    esi,[esi+0x0]
c001aac8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aacf:	89 c6                	mov    esi,eax
c001aad1:	89 d7                	mov    edi,edx
c001aad3:	e8 b2 f4 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001aad8:	57                   	push   edi
c001aad9:	56                   	push   esi
c001aada:	52                   	push   edx
c001aadb:	50                   	push   eax
c001aadc:	e8 77 f4 ff ff       	call   c0019f58 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001aae1:	e9 9e 00 00 00       	jmp    c001ab84 <Vm::x87Handler(regs*)+0xaba>
c001aae6:	66 90                	xchg   ax,ax
c001aae8:	31 c0                	xor    eax,eax
c001aaea:	80 fa 07             	cmp    dl,0x7
c001aaed:	0f 85 e9 00 00 00    	jne    c001abdc <Vm::x87Handler(regs*)+0xb12>
c001aaf3:	83 ec 0c             	sub    esp,0xc
c001aaf6:	6a 00                	push   0x0
c001aaf8:	e8 8d f4 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001aafd:	89 c7                	mov    edi,eax
c001aaff:	89 d5                	mov    ebp,edx
c001ab01:	58                   	pop    eax
c001ab02:	5a                   	pop    edx
c001ab03:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ab06:	ff 36                	push   DWORD PTR [esi]
c001ab08:	e8 fb f1 ff ff       	call   c0019d08 <Vm::fpu64ToInternal(unsigned long long)>
c001ab0d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab10:	83 c4 10             	add    esp,0x10
c001ab13:	55                   	push   ebp
c001ab14:	57                   	push   edi
c001ab15:	52                   	push   edx
c001ab16:	50                   	push   eax
c001ab17:	e8 3c f4 ff ff       	call   c0019f58 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ab1c:	83 c4 0c             	add    esp,0xc
c001ab1f:	eb 67                	jmp    c001ab88 <Vm::x87Handler(regs*)+0xabe>
c001ab21:	8d 76 00             	lea    esi,[esi+0x0]
c001ab24:	31 c0                	xor    eax,eax
c001ab26:	80 fa 02             	cmp    dl,0x2
c001ab29:	0f 85 ad 00 00 00    	jne    c001abdc <Vm::x87Handler(regs*)+0xb12>
c001ab2f:	83 ec 0c             	sub    esp,0xc
c001ab32:	6a 00                	push   0x0
c001ab34:	e8 51 f4 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001ab39:	59                   	pop    ecx
c001ab3a:	5f                   	pop    edi
c001ab3b:	90                   	nop
c001ab3c:	52                   	push   edx
c001ab3d:	50                   	push   eax
c001ab3e:	e8 77 f1 ff ff       	call   c0019cba <Vm::fpuInternalTo64(unsigned long long)>
c001ab43:	e9 84 00 00 00       	jmp    c001abcc <Vm::x87Handler(regs*)+0xb02>
c001ab48:	31 c0                	xor    eax,eax
c001ab4a:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001ab4f:	0f 85 87 00 00 00    	jne    c001abdc <Vm::x87Handler(regs*)+0xb12>
c001ab55:	50                   	push   eax
c001ab56:	50                   	push   eax
c001ab57:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001ab5a:	66 90                	xchg   ax,ax
c001ab5c:	31 d2                	xor    edx,edx
c001ab5e:	52                   	push   edx
c001ab5f:	50                   	push   eax
c001ab60:	e8 47 f2 ff ff       	call   c0019dac <Vm::fpuLongToFloat(long long)>
c001ab65:	8d 76 00             	lea    esi,[esi+0x0]
c001ab68:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab6f:	89 c6                	mov    esi,eax
c001ab71:	89 d7                	mov    edi,edx
c001ab73:	e8 12 f4 ff ff       	call   c0019f8a <Vm::fpuGetReg(int)>
c001ab78:	57                   	push   edi
c001ab79:	56                   	push   esi
c001ab7a:	52                   	push   edx
c001ab7b:	50                   	push   eax
c001ab7c:	e8 b8 f3 ff ff       	call   c0019f39 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ab81:	8d 76 00             	lea    esi,[esi+0x0]
c001ab84:	83 c4 1c             	add    esp,0x1c
c001ab87:	90                   	nop
c001ab88:	52                   	push   edx
c001ab89:	50                   	push   eax
c001ab8a:	6a 00                	push   0x0
c001ab8c:	e8 3c f4 ff ff       	call   c0019fcd <Vm::fpuSetReg(int, unsigned long long)>
c001ab91:	e9 7a f7 ff ff       	jmp    c001a310 <Vm::x87Handler(regs*)+0x246>
c001ab96:	66 90                	xchg   ax,ax
c001ab98:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ab9c:	80 fa 05             	cmp    dl,0x5
c001ab9f:	75 13                	jne    c001abb4 <Vm::x87Handler(regs*)+0xaea>
c001aba1:	55                   	push   ebp
c001aba2:	55                   	push   ebp
c001aba3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aba6:	ff 36                	push   DWORD PTR [esi]
c001aba8:	e8 c3 f1 ff ff       	call   c0019d70 <Vm::fpuULongToFloat(unsigned long long)>
c001abad:	e9 52 f7 ff ff       	jmp    c001a304 <Vm::x87Handler(regs*)+0x23a>
c001abb2:	66 90                	xchg   ax,ax
c001abb4:	31 c0                	xor    eax,eax
c001abb6:	80 fa 07             	cmp    dl,0x7
c001abb9:	75 21                	jne    c001abdc <Vm::x87Handler(regs*)+0xb12>
c001abbb:	e8 b7 f4 ff ff       	call   c001a077 <Vm::fpuPop()>
c001abc0:	51                   	push   ecx
c001abc1:	51                   	push   ecx
c001abc2:	52                   	push   edx
c001abc3:	50                   	push   eax
c001abc4:	e8 48 f1 ff ff       	call   c0019d11 <Vm::fpuFloatToLong(unsigned long long)>
c001abc9:	8d 76 00             	lea    esi,[esi+0x0]
c001abcc:	83 c4 10             	add    esp,0x10
c001abcf:	89 06                	mov    DWORD PTR [esi],eax
c001abd1:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001abd4:	e9 7b f7 ff ff       	jmp    c001a354 <Vm::x87Handler(regs*)+0x28a>
c001abd9:	8d 76 00             	lea    esi,[esi+0x0]
c001abdc:	83 c4 1c             	add    esp,0x1c
c001abdf:	5b                   	pop    ebx
c001abe0:	5e                   	pop    esi
c001abe1:	5f                   	pop    edi
c001abe2:	5d                   	pop    ebp
c001abe3:	c3                   	ret    

c001abe4 <__static_initialization_and_destruction_0(int, int)>:
c001abe4:	83 ec 0c             	sub    esp,0xc
c001abe7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001abec:	75 1a                	jne    c001ac08 <__static_initialization_and_destruction_0(int, int)+0x24>
c001abee:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001abf6:	75 10                	jne    c001ac08 <__static_initialization_and_destruction_0(int, int)+0x24>
c001abf8:	83 ec 0c             	sub    esp,0xc
c001abfb:	68 a0 94 02 c0       	push   0xc00294a0
c001ac00:	e8 43 84 00 00       	call   c0023048 <Vm::_FPUState::_FPUState()>
c001ac05:	83 c4 10             	add    esp,0x10
c001ac08:	90                   	nop
c001ac09:	83 c4 0c             	add    esp,0xc
c001ac0c:	c3                   	ret    
c001ac0d:	8d 76 00             	lea    esi,[esi+0x0]

c001ac10 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001ac10:	83 ec 0c             	sub    esp,0xc
c001ac13:	83 ec 08             	sub    esp,0x8
c001ac16:	68 ff ff 00 00       	push   0xffff
c001ac1b:	6a 01                	push   0x1
c001ac1d:	e8 c2 ff ff ff       	call   c001abe4 <__static_initialization_and_destruction_0(int, int)>
c001ac22:	83 c4 10             	add    esp,0x10
c001ac25:	83 c4 0c             	add    esp,0xc
c001ac28:	c3                   	ret    
c001ac29:	66 90                	xchg   ax,ax
c001ac2b:	90                   	nop

c001ac2c <FAT::getName()>:
c001ac2c:	b8 30 62 02 c0       	mov    eax,0xc0026230
c001ac31:	c3                   	ret    
c001ac32:	66 90                	xchg   ax,ax

c001ac34 <FAT::tell(void*, unsigned long long*)>:
c001ac34:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ac39:	75 09                	jne    c001ac44 <FAT::tell(void*, unsigned long long*)+0x10>
c001ac3b:	b8 04 00 00 00       	mov    eax,0x4
c001ac40:	c3                   	ret    
c001ac41:	8d 76 00             	lea    esi,[esi+0x0]
c001ac44:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ac49:	75 09                	jne    c001ac54 <FAT::tell(void*, unsigned long long*)+0x20>
c001ac4b:	b8 04 00 00 00       	mov    eax,0x4
c001ac50:	c3                   	ret    
c001ac51:	8d 76 00             	lea    esi,[esi+0x0]
c001ac54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac58:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001ac5b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001ac5e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ac62:	89 01                	mov    DWORD PTR [ecx],eax
c001ac64:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ac67:	b8 00 00 00 00       	mov    eax,0x0
c001ac6c:	c3                   	ret    
c001ac6d:	90                   	nop
c001ac6e:	66 90                	xchg   ax,ax

c001ac70 <FAT::stat(void*, unsigned long long*)>:
c001ac70:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ac75:	75 09                	jne    c001ac80 <FAT::stat(void*, unsigned long long*)+0x10>
c001ac77:	b8 04 00 00 00       	mov    eax,0x4
c001ac7c:	c3                   	ret    
c001ac7d:	8d 76 00             	lea    esi,[esi+0x0]
c001ac80:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ac85:	75 09                	jne    c001ac90 <FAT::stat(void*, unsigned long long*)+0x20>
c001ac87:	b8 04 00 00 00       	mov    eax,0x4
c001ac8c:	c3                   	ret    
c001ac8d:	8d 76 00             	lea    esi,[esi+0x0]
c001ac90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac94:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001ac97:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ac9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ac9e:	89 01                	mov    DWORD PTR [ecx],eax
c001aca0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001aca3:	b8 00 00 00 00       	mov    eax,0x0
c001aca8:	c3                   	ret    
c001aca9:	90                   	nop
c001acaa:	66 90                	xchg   ax,ax

c001acac <FAT::~FAT()>:
c001acac:	83 ec 0c             	sub    esp,0xc
c001acaf:	ba 7c 62 02 c0       	mov    edx,0xc002627c
c001acb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acb8:	89 10                	mov    DWORD PTR [eax],edx
c001acba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acbe:	83 ec 0c             	sub    esp,0xc
c001acc1:	50                   	push   eax
c001acc2:	e8 73 23 ff ff       	call   c000d03a <Filesystem::~Filesystem()>
c001acc7:	83 c4 10             	add    esp,0x10
c001acca:	90                   	nop
c001accb:	83 c4 0c             	add    esp,0xc
c001acce:	c3                   	ret    
c001accf:	90                   	nop

c001acd0 <FAT::~FAT()>:
c001acd0:	83 ec 0c             	sub    esp,0xc
c001acd3:	83 ec 0c             	sub    esp,0xc
c001acd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acda:	e8 cd ff ff ff       	call   c001acac <FAT::~FAT()>
c001acdf:	83 c4 10             	add    esp,0x10
c001ace2:	83 ec 08             	sub    esp,0x8
c001ace5:	6a 08                	push   0x8
c001ace7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aceb:	e8 2e 1f ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c001acf0:	83 c4 10             	add    esp,0x10
c001acf3:	83 c4 0c             	add    esp,0xc
c001acf6:	c3                   	ret    
c001acf7:	90                   	nop

c001acf8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001acf8:	83 ec 1c             	sub    esp,0x1c
c001acfb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001ad02:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001ad07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ad0b:	8b 04 85 20 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ae0]
c001ad12:	83 f8 ff             	cmp    eax,0xffffffff
c001ad15:	75 35                	jne    c001ad4c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001ad17:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ad1b:	88 c2                	mov    dl,al
c001ad1d:	a1 00 95 02 c0       	mov    eax,ds:0xc0029500
c001ad22:	01 d0                	add    eax,edx
c001ad24:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ad28:	8b 15 00 95 02 c0    	mov    edx,DWORD PTR ds:0xc0029500
c001ad2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ad32:	89 14 85 20 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ae0],edx
c001ad39:	a1 00 95 02 c0       	mov    eax,ds:0xc0029500
c001ad3e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ad42:	89 14 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],edx
c001ad49:	eb 19                	jmp    c001ad64 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001ad4b:	90                   	nop
c001ad4c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ad50:	88 c2                	mov    dl,al
c001ad52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ad56:	8b 04 85 20 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ae0]
c001ad5d:	01 d0                	add    eax,edx
c001ad5f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ad63:	90                   	nop
c001ad64:	83 ec 04             	sub    esp,0x4
c001ad67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ad6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ad6f:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ad73:	50                   	push   eax
c001ad74:	e8 b9 be fe ff       	call   c0006c32 <f_getlabel>
c001ad79:	83 c4 10             	add    esp,0x10
c001ad7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad80:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ad85:	75 09                	jne    c001ad90 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001ad87:	b8 00 00 00 00       	mov    eax,0x0
c001ad8c:	eb 0a                	jmp    c001ad98 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001ad8e:	66 90                	xchg   ax,ax
c001ad90:	b8 01 00 00 00       	mov    eax,0x1
c001ad95:	8d 76 00             	lea    esi,[esi+0x0]
c001ad98:	83 c4 1c             	add    esp,0x1c
c001ad9b:	c3                   	ret    

c001ad9c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001ad9c:	57                   	push   edi
c001ad9d:	83 ec 58             	sub    esp,0x58
c001ada0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001ada8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001adac:	b9 0f 00 00 00       	mov    ecx,0xf
c001adb1:	b8 00 00 00 00       	mov    eax,0x0
c001adb6:	fc                   	cld    
c001adb7:	89 d7                	mov    edi,edx
c001adb9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001adbb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001adbf:	8b 04 85 20 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ae0]
c001adc6:	83 f8 ff             	cmp    eax,0xffffffff
c001adc9:	75 35                	jne    c001ae00 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001adcb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001adcf:	88 c2                	mov    dl,al
c001add1:	a1 00 95 02 c0       	mov    eax,ds:0xc0029500
c001add6:	01 d0                	add    eax,edx
c001add8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001addc:	8b 15 00 95 02 c0    	mov    edx,DWORD PTR ds:0xc0029500
c001ade2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ade6:	89 14 85 20 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ae0],edx
c001aded:	a1 00 95 02 c0       	mov    eax,ds:0xc0029500
c001adf2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001adf6:	89 14 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],edx
c001adfd:	eb 19                	jmp    c001ae18 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001adff:	90                   	nop
c001ae00:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae04:	88 c2                	mov    dl,al
c001ae06:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ae0a:	8b 04 85 20 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ae0]
c001ae11:	01 d0                	add    eax,edx
c001ae13:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ae17:	90                   	nop
c001ae18:	83 ec 08             	sub    esp,0x8
c001ae1b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001ae1f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae23:	50                   	push   eax
c001ae24:	e8 57 5a fe ff       	call   c0000880 <strcat>
c001ae29:	83 c4 10             	add    esp,0x10
c001ae2c:	83 ec 0c             	sub    esp,0xc
c001ae2f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae33:	50                   	push   eax
c001ae34:	e8 e7 bf fe ff       	call   c0006e20 <f_setlabel>
c001ae39:	83 c4 10             	add    esp,0x10
c001ae3c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ae40:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001ae45:	75 09                	jne    c001ae50 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001ae47:	b8 00 00 00 00       	mov    eax,0x0
c001ae4c:	eb 0a                	jmp    c001ae58 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001ae4e:	66 90                	xchg   ax,ax
c001ae50:	b8 01 00 00 00       	mov    eax,0x1
c001ae55:	8d 76 00             	lea    esi,[esi+0x0]
c001ae58:	83 c4 58             	add    esp,0x58
c001ae5b:	5f                   	pop    edi
c001ae5c:	c3                   	ret    
c001ae5d:	90                   	nop
c001ae5e:	66 90                	xchg   ax,ax

c001ae60 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001ae60:	83 ec 2c             	sub    esp,0x2c
c001ae63:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001ae6b:	83 ec 08             	sub    esp,0x8
c001ae6e:	68 54 62 02 c0       	push   0xc0026254
c001ae73:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ae77:	e8 50 59 fe ff       	call   c00007cc <strcmp>
c001ae7c:	83 c4 10             	add    esp,0x10
c001ae7f:	85 c0                	test   eax,eax
c001ae81:	0f 94 c0             	sete   al
c001ae84:	84 c0                	test   al,al
c001ae86:	74 10                	je     c001ae98 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001ae88:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ae90:	e9 b3 00 00 00       	jmp    c001af48 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001ae95:	8d 76 00             	lea    esi,[esi+0x0]
c001ae98:	83 ec 08             	sub    esp,0x8
c001ae9b:	68 46 62 02 c0       	push   0xc0026246
c001aea0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001aea4:	e8 23 59 fe ff       	call   c00007cc <strcmp>
c001aea9:	83 c4 10             	add    esp,0x10
c001aeac:	85 c0                	test   eax,eax
c001aeae:	0f 94 c0             	sete   al
c001aeb1:	84 c0                	test   al,al
c001aeb3:	74 0f                	je     c001aec4 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001aeb5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001aebd:	e9 86 00 00 00       	jmp    c001af48 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001aec2:	66 90                	xchg   ax,ax
c001aec4:	83 ec 08             	sub    esp,0x8
c001aec7:	68 4c 62 02 c0       	push   0xc002624c
c001aecc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001aed0:	e8 f7 58 fe ff       	call   c00007cc <strcmp>
c001aed5:	83 c4 10             	add    esp,0x10
c001aed8:	85 c0                	test   eax,eax
c001aeda:	0f 94 c0             	sete   al
c001aedd:	84 c0                	test   al,al
c001aedf:	74 0b                	je     c001aeec <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001aee1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001aee9:	eb 5d                	jmp    c001af48 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001aeeb:	90                   	nop
c001aeec:	83 ec 08             	sub    esp,0x8
c001aeef:	68 ac 37 02 c0       	push   0xc00237ac
c001aef4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001aef8:	e8 cf 58 fe ff       	call   c00007cc <strcmp>
c001aefd:	83 c4 10             	add    esp,0x10
c001af00:	85 c0                	test   eax,eax
c001af02:	0f 94 c0             	sete   al
c001af05:	84 c0                	test   al,al
c001af07:	74 0b                	je     c001af14 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001af09:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001af11:	eb 35                	jmp    c001af48 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001af13:	90                   	nop
c001af14:	83 ec 08             	sub    esp,0x8
c001af17:	68 52 62 02 c0       	push   0xc0026252
c001af1c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001af20:	e8 a7 58 fe ff       	call   c00007cc <strcmp>
c001af25:	83 c4 10             	add    esp,0x10
c001af28:	85 c0                	test   eax,eax
c001af2a:	0f 94 c0             	sete   al
c001af2d:	84 c0                	test   al,al
c001af2f:	74 0b                	je     c001af3c <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001af31:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001af39:	eb 0d                	jmp    c001af48 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001af3b:	90                   	nop
c001af3c:	b8 08 00 00 00       	mov    eax,0x8
c001af41:	e9 ea 00 00 00       	jmp    c001b030 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001af46:	66 90                	xchg   ax,ax
c001af48:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001af4f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001af54:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af58:	8b 04 85 20 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ae0]
c001af5f:	83 f8 ff             	cmp    eax,0xffffffff
c001af62:	75 34                	jne    c001af98 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001af64:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001af68:	88 c2                	mov    dl,al
c001af6a:	a1 00 95 02 c0       	mov    eax,ds:0xc0029500
c001af6f:	01 d0                	add    eax,edx
c001af71:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001af75:	8b 15 00 95 02 c0    	mov    edx,DWORD PTR ds:0xc0029500
c001af7b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af7f:	89 14 85 20 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ae0],edx
c001af86:	a1 00 95 02 c0       	mov    eax,ds:0xc0029500
c001af8b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001af8f:	89 14 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],edx
c001af96:	eb 18                	jmp    c001afb0 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001af98:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001af9c:	88 c2                	mov    dl,al
c001af9e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001afa2:	8b 04 85 20 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ae0]
c001afa9:	01 d0                	add    eax,edx
c001afab:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001afaf:	90                   	nop
c001afb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001afb4:	88 04 24             	mov    BYTE PTR [esp],al
c001afb7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001afbb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001afbf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001afc7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001afcc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001afd4:	83 ec 0c             	sub    esp,0xc
c001afd7:	68 00 20 00 00       	push   0x2000
c001afdc:	e8 2e ea fe ff       	call   c0009a0f <malloc>
c001afe1:	83 c4 10             	add    esp,0x10
c001afe4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001afe8:	68 00 20 00 00       	push   0x2000
c001afed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aff1:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aff5:	50                   	push   eax
c001aff6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001affa:	50                   	push   eax
c001affb:	e8 a1 c4 fe ff       	call   c00074a1 <f_mkfs>
c001b000:	83 c4 10             	add    esp,0x10
c001b003:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b007:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b00c:	75 0a                	jne    c001b018 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001b00e:	b8 00 00 00 00       	mov    eax,0x0
c001b013:	eb 1b                	jmp    c001b030 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b015:	8d 76 00             	lea    esi,[esi+0x0]
c001b018:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b01d:	75 09                	jne    c001b028 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b01f:	b8 09 00 00 00       	mov    eax,0x9
c001b024:	eb 0a                	jmp    c001b030 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b026:	66 90                	xchg   ax,ax
c001b028:	b8 01 00 00 00       	mov    eax,0x1
c001b02d:	8d 76 00             	lea    esi,[esi+0x0]
c001b030:	83 c4 2c             	add    esp,0x2c
c001b033:	c3                   	ret    

c001b034 <FAT::tryMount(LogicalDisk*, int)>:
c001b034:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001b03a:	a1 00 95 02 c0       	mov    eax,ds:0xc0029500
c001b03f:	83 f8 14             	cmp    eax,0x14
c001b042:	75 18                	jne    c001b05c <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b044:	83 ec 0c             	sub    esp,0xc
c001b047:	68 58 62 02 c0       	push   0xc0026258
c001b04c:	e8 9e 98 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c001b051:	83 c4 10             	add    esp,0x10
c001b054:	b0 00                	mov    al,0x0
c001b056:	e9 e9 01 00 00       	jmp    c001b244 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b05b:	90                   	nop
c001b05c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b063:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b069:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b06f:	3d 00 02 00 00       	cmp    eax,0x200
c001b074:	74 0a                	je     c001b080 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b076:	b0 00                	mov    al,0x0
c001b078:	e9 c7 01 00 00       	jmp    c001b244 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b07d:	8d 76 00             	lea    esi,[esi+0x0]
c001b080:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001b088:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b08f:	8b 04 85 20 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ae0]
c001b096:	83 f8 ff             	cmp    eax,0xffffffff
c001b099:	74 09                	je     c001b0a4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b09b:	b0 01                	mov    al,0x1
c001b09d:	e9 a2 01 00 00       	jmp    c001b244 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b0a2:	66 90                	xchg   ax,ax
c001b0a4:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001b0ae:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001b0b6:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001b0bd:	88 c2                	mov    dl,al
c001b0bf:	a1 00 95 02 c0       	mov    eax,ds:0xc0029500
c001b0c4:	01 d0                	add    eax,edx
c001b0c6:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001b0cd:	8b 15 00 95 02 c0    	mov    edx,DWORD PTR ds:0xc0029500
c001b0d3:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b0da:	89 14 85 20 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ae0],edx
c001b0e1:	a1 00 95 02 c0       	mov    eax,ds:0xc0029500
c001b0e6:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001b0ed:	89 14 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],edx
c001b0f4:	83 ec 0c             	sub    esp,0xc
c001b0f7:	68 54 02 00 00       	push   0x254
c001b0fc:	e8 0e e9 fe ff       	call   c0009a0f <malloc>
c001b101:	83 c4 10             	add    esp,0x10
c001b104:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001b10b:	83 ec 04             	sub    esp,0x4
c001b10e:	6a 00                	push   0x0
c001b110:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b117:	50                   	push   eax
c001b118:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b11f:	e8 05 9d fe ff       	call   c0004e29 <f_mount>
c001b124:	83 c4 10             	add    esp,0x10
c001b127:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b12e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001b136:	74 1c                	je     c001b154 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b138:	83 ec 0c             	sub    esp,0xc
c001b13b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b142:	e8 e8 e8 fe ff       	call   c0009a2f <rfree>
c001b147:	83 c4 10             	add    esp,0x10
c001b14a:	b0 00                	mov    al,0x0
c001b14c:	e9 f3 00 00 00       	jmp    c001b244 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b151:	8d 76 00             	lea    esi,[esi+0x0]
c001b154:	83 ec 04             	sub    esp,0x4
c001b157:	68 00 01 00 00       	push   0x100
c001b15c:	6a 00                	push   0x0
c001b15e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b165:	50                   	push   eax
c001b166:	e8 19 55 fe ff       	call   c0000684 <memset>
c001b16b:	83 c4 10             	add    esp,0x10
c001b16e:	83 ec 08             	sub    esp,0x8
c001b171:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b178:	50                   	push   eax
c001b179:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b180:	50                   	push   eax
c001b181:	e8 fa 56 fe ff       	call   c0000880 <strcat>
c001b186:	83 c4 10             	add    esp,0x10
c001b189:	83 ec 08             	sub    esp,0x8
c001b18c:	68 66 62 02 c0       	push   0xc0026266
c001b191:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b198:	50                   	push   eax
c001b199:	e8 e2 56 fe ff       	call   c0000880 <strcat>
c001b19e:	83 c4 10             	add    esp,0x10
c001b1a1:	83 ec 04             	sub    esp,0x4
c001b1a4:	6a 01                	push   0x1
c001b1a6:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001b1ad:	50                   	push   eax
c001b1ae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b1b2:	50                   	push   eax
c001b1b3:	e8 d3 9c fe ff       	call   c0004e8b <f_open>
c001b1b8:	83 c4 10             	add    esp,0x10
c001b1bb:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b1c2:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b1c9:	85 c0                	test   eax,eax
c001b1cb:	74 0b                	je     c001b1d8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b1cd:	78 31                	js     c001b200 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b1cf:	83 e8 04             	sub    eax,0x4
c001b1d2:	83 f8 01             	cmp    eax,0x1
c001b1d5:	77 29                	ja     c001b200 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b1d7:	90                   	nop
c001b1d8:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001b1e0:	83 ec 0c             	sub    esp,0xc
c001b1e3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b1e7:	50                   	push   eax
c001b1e8:	e8 f0 a7 fe ff       	call   c00059dd <f_close>
c001b1ed:	83 c4 10             	add    esp,0x10
c001b1f0:	90                   	nop
c001b1f1:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001b1f9:	74 41                	je     c001b23c <FAT::tryMount(LogicalDisk*, int)+0x208>
c001b1fb:	eb 33                	jmp    c001b230 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b1fd:	8d 76 00             	lea    esi,[esi+0x0]
c001b200:	83 ec 0c             	sub    esp,0xc
c001b203:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b20a:	e8 20 e8 fe ff       	call   c0009a2f <rfree>
c001b20f:	83 c4 10             	add    esp,0x10
c001b212:	83 ec 04             	sub    esp,0x4
c001b215:	6a 00                	push   0x0
c001b217:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b21e:	50                   	push   eax
c001b21f:	6a 00                	push   0x0
c001b221:	e8 03 9c fe ff       	call   c0004e29 <f_mount>
c001b226:	83 c4 10             	add    esp,0x10
c001b229:	b0 00                	mov    al,0x0
c001b22b:	eb 17                	jmp    c001b244 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b22d:	8d 76 00             	lea    esi,[esi+0x0]
c001b230:	a1 00 95 02 c0       	mov    eax,ds:0xc0029500
c001b235:	40                   	inc    eax
c001b236:	a3 00 95 02 c0       	mov    ds:0xc0029500,eax
c001b23b:	90                   	nop
c001b23c:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001b243:	90                   	nop
c001b244:	81 c4 6c 03 00 00    	add    esp,0x36c
c001b24a:	c3                   	ret    
c001b24b:	90                   	nop

c001b24c <FAT::allocateSwapfile(char const*, int)>:
c001b24c:	55                   	push   ebp
c001b24d:	57                   	push   edi
c001b24e:	56                   	push   esi
c001b24f:	53                   	push   ebx
c001b250:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b256:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b261:	83 ec 0c             	sub    esp,0xc
c001b264:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b26b:	e8 9f e7 fe ff       	call   c0009a0f <malloc>
c001b270:	83 c4 10             	add    esp,0x10
c001b273:	89 c7                	mov    edi,eax
c001b275:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c001b27a:	83 ec 04             	sub    esp,0x4
c001b27d:	50                   	push   eax
c001b27e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b285:	57                   	push   edi
c001b286:	e8 df 1f ff ff       	call   c000d26a <File::File(char const*, Process*)>
c001b28b:	83 c4 10             	add    esp,0x10
c001b28e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b295:	83 ec 04             	sub    esp,0x4
c001b298:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b29c:	50                   	push   eax
c001b29d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b2a1:	50                   	push   eax
c001b2a2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b2a9:	e8 2a 23 ff ff       	call   c000d5d8 <File::stat(unsigned long long*, bool*)>
c001b2ae:	83 c4 10             	add    esp,0x10
c001b2b1:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b2b8:	c1 e0 14             	shl    eax,0x14
c001b2bb:	89 c7                	mov    edi,eax
c001b2bd:	89 c5                	mov    ebp,eax
c001b2bf:	c1 fd 1f             	sar    ebp,0x1f
c001b2c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b2ca:	89 f9                	mov    ecx,edi
c001b2cc:	31 c1                	xor    ecx,eax
c001b2ce:	89 cb                	mov    ebx,ecx
c001b2d0:	89 e9                	mov    ecx,ebp
c001b2d2:	31 d1                	xor    ecx,edx
c001b2d4:	89 ce                	mov    esi,ecx
c001b2d6:	89 f0                	mov    eax,esi
c001b2d8:	09 d8                	or     eax,ebx
c001b2da:	0f 84 98 00 00 00    	je     c001b378 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001b2e0:	83 ec 0c             	sub    esp,0xc
c001b2e3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b2ea:	e8 b5 21 ff ff       	call   c000d4a4 <File::unlink()>
c001b2ef:	83 c4 10             	add    esp,0x10
c001b2f2:	83 ec 08             	sub    esp,0x8
c001b2f5:	6a 12                	push   0x12
c001b2f7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b2fe:	e8 29 20 ff ff       	call   c000d32c <File::open(FileOpenMode)>
c001b303:	83 c4 10             	add    esp,0x10
c001b306:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b30d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b313:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b31a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b321:	c1 e0 14             	shl    eax,0x14
c001b324:	99                   	cdq    
c001b325:	6a 01                	push   0x1
c001b327:	52                   	push   edx
c001b328:	50                   	push   eax
c001b329:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b330:	e8 58 bd fe ff       	call   c000708d <f_expand>
c001b335:	83 c4 10             	add    esp,0x10
c001b338:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b33f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b341:	83 c0 10             	add    eax,0x10
c001b344:	8b 00                	mov    eax,DWORD PTR [eax]
c001b346:	83 ec 0c             	sub    esp,0xc
c001b349:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b34d:	52                   	push   edx
c001b34e:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b352:	52                   	push   edx
c001b353:	6a 00                	push   0x0
c001b355:	68 00 04 00 00       	push   0x400
c001b35a:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b361:	ff d0                	call   eax
c001b363:	83 c4 20             	add    esp,0x20
c001b366:	83 ec 0c             	sub    esp,0xc
c001b369:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b370:	e8 15 20 ff ff       	call   c000d38a <File::close()>
c001b375:	83 c4 10             	add    esp,0x10
c001b378:	83 ec 08             	sub    esp,0x8
c001b37b:	6a 01                	push   0x1
c001b37d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b384:	e8 a3 1f ff ff       	call   c000d32c <File::open(FileOpenMode)>
c001b389:	83 c4 10             	add    esp,0x10
c001b38c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b393:	8b 00                	mov    eax,DWORD PTR [eax]
c001b395:	83 c0 0c             	add    eax,0xc
c001b398:	8b 00                	mov    eax,DWORD PTR [eax]
c001b39a:	83 ec 0c             	sub    esp,0xc
c001b39d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b3a1:	52                   	push   edx
c001b3a2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001b3a6:	52                   	push   edx
c001b3a7:	6a 00                	push   0x0
c001b3a9:	6a 04                	push   0x4
c001b3ab:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b3b2:	ff d0                	call   eax
c001b3b4:	83 c4 20             	add    esp,0x20
c001b3b7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b3be:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b3c4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b3cb:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001b3d2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001b3d5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b3d8:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001b3df:	83 ec 0c             	sub    esp,0xc
c001b3e2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b3e9:	e8 9c 1f ff ff       	call   c000d38a <File::close()>
c001b3ee:	83 c4 10             	add    esp,0x10
c001b3f1:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001b3f8:	ba 00 00 00 00       	mov    edx,0x0
c001b3fd:	81 c4 3c 04 00 00    	add    esp,0x43c
c001b403:	5b                   	pop    ebx
c001b404:	5e                   	pop    esi
c001b405:	5f                   	pop    edi
c001b406:	5d                   	pop    ebp
c001b407:	c3                   	ret    

c001b408 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001b408:	57                   	push   edi
c001b409:	56                   	push   esi
c001b40a:	53                   	push   ebx
c001b40b:	81 ec 50 02 00 00    	sub    esp,0x250
c001b411:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001b419:	74 0d                	je     c001b428 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001b41b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001b423:	75 0f                	jne    c001b434 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001b425:	8d 76 00             	lea    esi,[esi+0x0]
c001b428:	b8 04 00 00 00       	mov    eax,0x4
c001b42d:	e9 36 01 00 00       	jmp    c001b568 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b432:	66 90                	xchg   ax,ax
c001b434:	83 ec 08             	sub    esp,0x8
c001b437:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b43e:	50                   	push   eax
c001b43f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001b446:	e8 9c ab fe ff       	call   c0005fe7 <f_readdir>
c001b44b:	83 c4 10             	add    esp,0x10
c001b44e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001b455:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001b45c:	83 ec 0c             	sub    esp,0xc
c001b45f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b466:	83 c0 1a             	add    eax,0x1a
c001b469:	50                   	push   eax
c001b46a:	e8 31 52 fe ff       	call   c00006a0 <strlen>
c001b46f:	83 c4 10             	add    esp,0x10
c001b472:	ba 00 00 00 00       	mov    edx,0x0
c001b477:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b47b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b47f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001b486:	0f b6 c0             	movzx  eax,al
c001b489:	83 e0 10             	and    eax,0x10
c001b48c:	74 0a                	je     c001b498 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001b48e:	b8 02 00 00 00       	mov    eax,0x2
c001b493:	eb 0b                	jmp    c001b4a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001b495:	8d 76 00             	lea    esi,[esi+0x0]
c001b498:	b8 01 00 00 00       	mov    eax,0x1
c001b49d:	8d 76 00             	lea    esi,[esi+0x0]
c001b4a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b4a4:	83 ec 08             	sub    esp,0x8
c001b4a7:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b4ae:	83 c0 1a             	add    eax,0x1a
c001b4b1:	50                   	push   eax
c001b4b2:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b4b6:	83 c0 10             	add    eax,0x10
c001b4b9:	50                   	push   eax
c001b4ba:	e8 81 52 fe ff       	call   c0000740 <strcpy>
c001b4bf:	83 c4 10             	add    esp,0x10
c001b4c2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001b4c9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001b4d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c001b4d4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001b4db:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001b4e2:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001b4e9:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001b4f0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001b4f7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001b4fe:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001b505:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001b50c:	89 c6                	mov    esi,eax
c001b50e:	89 d7                	mov    edi,edx
c001b510:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b512:	89 c8                	mov    eax,ecx
c001b514:	89 fa                	mov    edx,edi
c001b516:	89 f3                	mov    ebx,esi
c001b518:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001b51f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001b526:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001b52d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001b534:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b53a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001b541:	84 c0                	test   al,al
c001b543:	75 07                	jne    c001b54c <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001b545:	b8 07 00 00 00       	mov    eax,0x7
c001b54a:	eb 1c                	jmp    c001b568 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b54c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001b553:	85 c0                	test   eax,eax
c001b555:	75 09                	jne    c001b560 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001b557:	b8 00 00 00 00       	mov    eax,0x0
c001b55c:	eb 0a                	jmp    c001b568 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b55e:	66 90                	xchg   ax,ax
c001b560:	b8 01 00 00 00       	mov    eax,0x1
c001b565:	8d 76 00             	lea    esi,[esi+0x0]
c001b568:	81 c4 50 02 00 00    	add    esp,0x250
c001b56e:	5b                   	pop    ebx
c001b56f:	5e                   	pop    esi
c001b570:	5f                   	pop    edi
c001b571:	c3                   	ret    
c001b572:	66 90                	xchg   ax,ax

c001b574 <FAT::read(void*, unsigned long, void*, int*)>:
c001b574:	83 ec 1c             	sub    esp,0x1c
c001b577:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b57c:	74 0a                	je     c001b588 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001b57e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b583:	75 0b                	jne    c001b590 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001b585:	8d 76 00             	lea    esi,[esi+0x0]
c001b588:	b8 04 00 00 00       	mov    eax,0x4
c001b58d:	eb 41                	jmp    c001b5d0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b58f:	90                   	nop
c001b590:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b594:	50                   	push   eax
c001b595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b599:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b59d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b5a1:	e8 21 9d fe ff       	call   c00052c7 <f_read>
c001b5a6:	83 c4 10             	add    esp,0x10
c001b5a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b5ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b5b1:	89 c2                	mov    edx,eax
c001b5b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b5b7:	89 10                	mov    DWORD PTR [eax],edx
c001b5b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b5bd:	85 c0                	test   eax,eax
c001b5bf:	75 07                	jne    c001b5c8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001b5c1:	b8 00 00 00 00       	mov    eax,0x0
c001b5c6:	eb 08                	jmp    c001b5d0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b5c8:	b8 01 00 00 00       	mov    eax,0x1
c001b5cd:	8d 76 00             	lea    esi,[esi+0x0]
c001b5d0:	83 c4 1c             	add    esp,0x1c
c001b5d3:	c3                   	ret    

c001b5d4 <FAT::write(void*, unsigned long, void*, int*)>:
c001b5d4:	83 ec 1c             	sub    esp,0x1c
c001b5d7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b5dc:	74 0a                	je     c001b5e8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001b5de:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b5e3:	75 0b                	jne    c001b5f0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001b5e5:	8d 76 00             	lea    esi,[esi+0x0]
c001b5e8:	b8 04 00 00 00       	mov    eax,0x4
c001b5ed:	eb 41                	jmp    c001b630 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b5ef:	90                   	nop
c001b5f0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b5f4:	50                   	push   eax
c001b5f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b5fd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b601:	e8 41 9f fe ff       	call   c0005547 <f_write>
c001b606:	83 c4 10             	add    esp,0x10
c001b609:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b60d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b611:	89 c2                	mov    edx,eax
c001b613:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b617:	89 10                	mov    DWORD PTR [eax],edx
c001b619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b61d:	85 c0                	test   eax,eax
c001b61f:	75 07                	jne    c001b628 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001b621:	b8 00 00 00 00       	mov    eax,0x0
c001b626:	eb 08                	jmp    c001b630 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b628:	b8 01 00 00 00       	mov    eax,0x1
c001b62d:	8d 76 00             	lea    esi,[esi+0x0]
c001b630:	83 c4 1c             	add    esp,0x1c
c001b633:	c3                   	ret    

c001b634 <FAT::close(void*)>:
c001b634:	83 ec 1c             	sub    esp,0x1c
c001b637:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b63c:	75 0a                	jne    c001b648 <FAT::close(void*)+0x14>
c001b63e:	b8 04 00 00 00       	mov    eax,0x4
c001b643:	eb 3f                	jmp    c001b684 <FAT::close(void*)+0x50>
c001b645:	8d 76 00             	lea    esi,[esi+0x0]
c001b648:	83 ec 0c             	sub    esp,0xc
c001b64b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b64f:	e8 89 a3 fe ff       	call   c00059dd <f_close>
c001b654:	83 c4 10             	add    esp,0x10
c001b657:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b65b:	83 ec 0c             	sub    esp,0xc
c001b65e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b662:	e8 b8 e3 fe ff       	call   c0009a1f <free>
c001b667:	83 c4 10             	add    esp,0x10
c001b66a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b66e:	85 c0                	test   eax,eax
c001b670:	75 0a                	jne    c001b67c <FAT::close(void*)+0x48>
c001b672:	b8 00 00 00 00       	mov    eax,0x0
c001b677:	eb 0b                	jmp    c001b684 <FAT::close(void*)+0x50>
c001b679:	8d 76 00             	lea    esi,[esi+0x0]
c001b67c:	b8 01 00 00 00       	mov    eax,0x1
c001b681:	8d 76 00             	lea    esi,[esi+0x0]
c001b684:	83 c4 1c             	add    esp,0x1c
c001b687:	c3                   	ret    

c001b688 <FAT::closeDir(void*)>:
c001b688:	83 ec 1c             	sub    esp,0x1c
c001b68b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b690:	75 0a                	jne    c001b69c <FAT::closeDir(void*)+0x14>
c001b692:	b8 04 00 00 00       	mov    eax,0x4
c001b697:	eb 3f                	jmp    c001b6d8 <FAT::closeDir(void*)+0x50>
c001b699:	8d 76 00             	lea    esi,[esi+0x0]
c001b69c:	83 ec 0c             	sub    esp,0xc
c001b69f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b6a3:	e8 1d a9 fe ff       	call   c0005fc5 <f_closedir>
c001b6a8:	83 c4 10             	add    esp,0x10
c001b6ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6af:	83 ec 0c             	sub    esp,0xc
c001b6b2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b6b6:	e8 64 e3 fe ff       	call   c0009a1f <free>
c001b6bb:	83 c4 10             	add    esp,0x10
c001b6be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6c2:	85 c0                	test   eax,eax
c001b6c4:	75 0a                	jne    c001b6d0 <FAT::closeDir(void*)+0x48>
c001b6c6:	b8 00 00 00 00       	mov    eax,0x0
c001b6cb:	eb 0b                	jmp    c001b6d8 <FAT::closeDir(void*)+0x50>
c001b6cd:	8d 76 00             	lea    esi,[esi+0x0]
c001b6d0:	b8 01 00 00 00       	mov    eax,0x1
c001b6d5:	8d 76 00             	lea    esi,[esi+0x0]
c001b6d8:	83 c4 1c             	add    esp,0x1c
c001b6db:	c3                   	ret    

c001b6dc <FAT::seek(void*, unsigned long long)>:
c001b6dc:	83 ec 2c             	sub    esp,0x2c
c001b6df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b6e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b6e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b6eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6ef:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b6f4:	75 0a                	jne    c001b700 <FAT::seek(void*, unsigned long long)+0x24>
c001b6f6:	b8 04 00 00 00       	mov    eax,0x4
c001b6fb:	eb 37                	jmp    c001b734 <FAT::seek(void*, unsigned long long)+0x58>
c001b6fd:	8d 76 00             	lea    esi,[esi+0x0]
c001b700:	83 ec 04             	sub    esp,0x4
c001b703:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b707:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b70b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b70f:	e8 f8 a2 fe ff       	call   c0005a0c <f_lseek>
c001b714:	83 c4 10             	add    esp,0x10
c001b717:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b71b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b71f:	85 c0                	test   eax,eax
c001b721:	75 09                	jne    c001b72c <FAT::seek(void*, unsigned long long)+0x50>
c001b723:	b8 00 00 00 00       	mov    eax,0x0
c001b728:	eb 0a                	jmp    c001b734 <FAT::seek(void*, unsigned long long)+0x58>
c001b72a:	66 90                	xchg   ax,ax
c001b72c:	b8 01 00 00 00       	mov    eax,0x1
c001b731:	8d 76 00             	lea    esi,[esi+0x0]
c001b734:	83 c4 2c             	add    esp,0x2c
c001b737:	c3                   	ret    

c001b738 <fatWrapperReadDisk>:
c001b738:	83 ec 1c             	sub    esp,0x1c
c001b73b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b73f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b747:	89 04 24             	mov    DWORD PTR [esp],eax
c001b74a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b74e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b752:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b757:	8b 04 85 a0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b60]
c001b75e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b762:	83 ec 0c             	sub    esp,0xc
c001b765:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b769:	52                   	push   edx
c001b76a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b76e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b772:	50                   	push   eax
c001b773:	e8 08 4d ff ff       	call   c0010480 <LogicalDisk::read(unsigned long long, int, void*)>
c001b778:	83 c4 20             	add    esp,0x20
c001b77b:	83 c4 1c             	add    esp,0x1c
c001b77e:	c3                   	ret    
c001b77f:	90                   	nop

c001b780 <fatWrapperWriteDisk>:
c001b780:	83 ec 1c             	sub    esp,0x1c
c001b783:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b787:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b78b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b78f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b792:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b796:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b79a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b79f:	8b 04 85 a0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b60]
c001b7a6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b7aa:	83 ec 0c             	sub    esp,0xc
c001b7ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b7b1:	52                   	push   edx
c001b7b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b7b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b7ba:	50                   	push   eax
c001b7bb:	e8 2c 4d ff ff       	call   c00104ec <LogicalDisk::write(unsigned long long, int, void*)>
c001b7c0:	83 c4 20             	add    esp,0x20
c001b7c3:	83 c4 1c             	add    esp,0x1c
c001b7c6:	c3                   	ret    
c001b7c7:	90                   	nop

c001b7c8 <fatWrapperIoctl>:
c001b7c8:	53                   	push   ebx
c001b7c9:	83 ec 28             	sub    esp,0x28
c001b7cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b7d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b7d4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b7d8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b7dc:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b7e1:	75 31                	jne    c001b814 <fatWrapperIoctl+0x4c>
c001b7e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b7e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b7eb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b7f0:	8b 04 85 a0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b60]
c001b7f7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b7fd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b803:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b807:	66 89 02             	mov    WORD PTR [edx],ax
c001b80a:	b8 00 00 00 00       	mov    eax,0x0
c001b80f:	e9 bc 00 00 00       	jmp    c001b8d0 <fatWrapperIoctl+0x108>
c001b814:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b819:	75 6d                	jne    c001b888 <fatWrapperIoctl+0xc0>
c001b81b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b81f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b823:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b828:	8b 04 85 a0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b60]
c001b82f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b835:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b83b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b841:	89 c8                	mov    eax,ecx
c001b843:	89 da                	mov    edx,ebx
c001b845:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b849:	c1 e0 0a             	shl    eax,0xa
c001b84c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b851:	8b 0c 8d a0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b60]
c001b858:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b85e:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b864:	89 cb                	mov    ebx,ecx
c001b866:	c1 fb 1f             	sar    ebx,0x1f
c001b869:	53                   	push   ebx
c001b86a:	51                   	push   ecx
c001b86b:	52                   	push   edx
c001b86c:	50                   	push   eax
c001b86d:	e8 32 6e 00 00       	call   c00226a4 <__udivdi3>
c001b872:	83 c4 10             	add    esp,0x10
c001b875:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b879:	89 01                	mov    DWORD PTR [ecx],eax
c001b87b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b87e:	b8 00 00 00 00       	mov    eax,0x0
c001b883:	eb 4b                	jmp    c001b8d0 <fatWrapperIoctl+0x108>
c001b885:	8d 76 00             	lea    esi,[esi+0x0]
c001b888:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b88d:	75 09                	jne    c001b898 <fatWrapperIoctl+0xd0>
c001b88f:	b8 00 00 00 00       	mov    eax,0x0
c001b894:	eb 3a                	jmp    c001b8d0 <fatWrapperIoctl+0x108>
c001b896:	66 90                	xchg   ax,ax
c001b898:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b89d:	75 19                	jne    c001b8b8 <fatWrapperIoctl+0xf0>
c001b89f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b8a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b8a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b8ab:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b8b1:	b8 00 00 00 00       	mov    eax,0x0
c001b8b6:	eb 18                	jmp    c001b8d0 <fatWrapperIoctl+0x108>
c001b8b8:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b8bd:	75 09                	jne    c001b8c8 <fatWrapperIoctl+0x100>
c001b8bf:	b8 00 00 00 00       	mov    eax,0x0
c001b8c4:	eb 0a                	jmp    c001b8d0 <fatWrapperIoctl+0x108>
c001b8c6:	66 90                	xchg   ax,ax
c001b8c8:	b8 04 00 00 00       	mov    eax,0x4
c001b8cd:	8d 76 00             	lea    esi,[esi+0x0]
c001b8d0:	83 c4 28             	add    esp,0x28
c001b8d3:	5b                   	pop    ebx
c001b8d4:	c3                   	ret    
c001b8d5:	90                   	nop
c001b8d6:	66 90                	xchg   ax,ax

c001b8d8 <FAT::FAT()>:
c001b8d8:	83 ec 1c             	sub    esp,0x1c
c001b8db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8df:	83 ec 0c             	sub    esp,0xc
c001b8e2:	50                   	push   eax
c001b8e3:	e8 2e 17 ff ff       	call   c000d016 <Filesystem::Filesystem()>
c001b8e8:	83 c4 10             	add    esp,0x10
c001b8eb:	ba 7c 62 02 c0       	mov    edx,0xc002627c
c001b8f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8f4:	89 10                	mov    DWORD PTR [eax],edx
c001b8f6:	c7 05 00 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029500,0x0
c001b900:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b908:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b90d:	7f 15                	jg     c001b924 <FAT::FAT()+0x4c>
c001b90f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b913:	c7 04 85 20 95 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6ae0],0xffffffff
c001b91e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b922:	eb e4                	jmp    c001b908 <FAT::FAT()+0x30>
c001b924:	90                   	nop
c001b925:	83 c4 1c             	add    esp,0x1c
c001b928:	c3                   	ret    
c001b929:	90                   	nop
c001b92a:	66 90                	xchg   ax,ax

c001b92c <FAT::fixFilepath(char*)>:
c001b92c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b930:	8a 00                	mov    al,BYTE PTR [eax]
c001b932:	3c 40                	cmp    al,0x40
c001b934:	7e 2e                	jle    c001b964 <FAT::fixFilepath(char*)+0x38>
c001b936:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b93a:	8a 00                	mov    al,BYTE PTR [eax]
c001b93c:	83 e8 41             	sub    eax,0x41
c001b93f:	88 c2                	mov    dl,al
c001b941:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b945:	88 10                	mov    BYTE PTR [eax],dl
c001b947:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b94b:	8a 00                	mov    al,BYTE PTR [eax]
c001b94d:	0f be c0             	movsx  eax,al
c001b950:	8b 04 85 20 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ae0]
c001b957:	83 c0 30             	add    eax,0x30
c001b95a:	88 c2                	mov    dl,al
c001b95c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b960:	88 10                	mov    BYTE PTR [eax],dl
c001b962:	66 90                	xchg   ax,ax
c001b964:	90                   	nop
c001b965:	c3                   	ret    
c001b966:	66 90                	xchg   ax,ax

c001b968 <FAT::open(char const*, void**, FileOpenMode)>:
c001b968:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b96e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b976:	74 0c                	je     c001b984 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b978:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b980:	75 0e                	jne    c001b990 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b982:	66 90                	xchg   ax,ax
c001b984:	b8 04 00 00 00       	mov    eax,0x4
c001b989:	e9 06 01 00 00       	jmp    c001ba94 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b98e:	66 90                	xchg   ax,ax
c001b990:	83 ec 08             	sub    esp,0x8
c001b993:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b99a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b99e:	50                   	push   eax
c001b99f:	e8 9c 4d fe ff       	call   c0000740 <strcpy>
c001b9a4:	83 c4 10             	add    esp,0x10
c001b9a7:	83 ec 08             	sub    esp,0x8
c001b9aa:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b9ae:	50                   	push   eax
c001b9af:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b9b6:	e8 71 ff ff ff       	call   c001b92c <FAT::fixFilepath(char*)>
c001b9bb:	83 c4 10             	add    esp,0x10
c001b9be:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b9c6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b9cd:	83 e0 01             	and    eax,0x1
c001b9d0:	74 0a                	je     c001b9dc <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001b9d2:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b9da:	66 90                	xchg   ax,ax
c001b9dc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b9e3:	83 e0 04             	and    eax,0x4
c001b9e6:	74 10                	je     c001b9f8 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001b9e8:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001b9f0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b9f8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b9ff:	83 e0 02             	and    eax,0x2
c001ba02:	74 08                	je     c001ba0c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001ba04:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001ba0c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ba13:	83 e0 08             	and    eax,0x8
c001ba16:	74 08                	je     c001ba20 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001ba18:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001ba20:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ba27:	83 e0 10             	and    eax,0x10
c001ba2a:	74 08                	je     c001ba34 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001ba2c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001ba34:	83 ec 0c             	sub    esp,0xc
c001ba37:	68 50 02 00 00       	push   0x250
c001ba3c:	e8 ce df fe ff       	call   c0009a0f <malloc>
c001ba41:	83 c4 10             	add    esp,0x10
c001ba44:	89 c2                	mov    edx,eax
c001ba46:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ba4d:	89 10                	mov    DWORD PTR [eax],edx
c001ba4f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001ba57:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ba5e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba60:	83 ec 04             	sub    esp,0x4
c001ba63:	52                   	push   edx
c001ba64:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ba68:	52                   	push   edx
c001ba69:	50                   	push   eax
c001ba6a:	e8 1c 94 fe ff       	call   c0004e8b <f_open>
c001ba6f:	83 c4 10             	add    esp,0x10
c001ba72:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001ba79:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001ba81:	74 09                	je     c001ba8c <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001ba83:	b8 01 00 00 00       	mov    eax,0x1
c001ba88:	eb 0a                	jmp    c001ba94 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001ba8a:	66 90                	xchg   ax,ax
c001ba8c:	b8 00 00 00 00       	mov    eax,0x0
c001ba91:	8d 76 00             	lea    esi,[esi+0x0]
c001ba94:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ba9a:	c3                   	ret    
c001ba9b:	90                   	nop

c001ba9c <FAT::openDir(char const*, void**)>:
c001ba9c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001baa2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001baaa:	74 0c                	je     c001bab8 <FAT::openDir(char const*, void**)+0x1c>
c001baac:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001bab4:	75 0e                	jne    c001bac4 <FAT::openDir(char const*, void**)+0x28>
c001bab6:	66 90                	xchg   ax,ax
c001bab8:	b8 04 00 00 00       	mov    eax,0x4
c001babd:	e9 82 00 00 00       	jmp    c001bb44 <FAT::openDir(char const*, void**)+0xa8>
c001bac2:	66 90                	xchg   ax,ax
c001bac4:	83 ec 08             	sub    esp,0x8
c001bac7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bace:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bad2:	50                   	push   eax
c001bad3:	e8 68 4c fe ff       	call   c0000740 <strcpy>
c001bad8:	83 c4 10             	add    esp,0x10
c001badb:	83 ec 08             	sub    esp,0x8
c001bade:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bae2:	50                   	push   eax
c001bae3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001baea:	e8 3d fe ff ff       	call   c001b92c <FAT::fixFilepath(char*)>
c001baef:	83 c4 10             	add    esp,0x10
c001baf2:	83 ec 0c             	sub    esp,0xc
c001baf5:	6a 4c                	push   0x4c
c001baf7:	e8 13 df fe ff       	call   c0009a0f <malloc>
c001bafc:	83 c4 10             	add    esp,0x10
c001baff:	89 c2                	mov    edx,eax
c001bb01:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bb08:	89 10                	mov    DWORD PTR [eax],edx
c001bb0a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bb11:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb13:	83 ec 08             	sub    esp,0x8
c001bb16:	8d 54 24 14          	lea    edx,[esp+0x14]
c001bb1a:	52                   	push   edx
c001bb1b:	50                   	push   eax
c001bb1c:	e8 a2 a3 fe ff       	call   c0005ec3 <f_opendir>
c001bb21:	83 c4 10             	add    esp,0x10
c001bb24:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bb2b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001bb33:	74 07                	je     c001bb3c <FAT::openDir(char const*, void**)+0xa0>
c001bb35:	b8 01 00 00 00       	mov    eax,0x1
c001bb3a:	eb 08                	jmp    c001bb44 <FAT::openDir(char const*, void**)+0xa8>
c001bb3c:	b8 00 00 00 00       	mov    eax,0x0
c001bb41:	8d 76 00             	lea    esi,[esi+0x0]
c001bb44:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bb4a:	c3                   	ret    
c001bb4b:	90                   	nop

c001bb4c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001bb4c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001bb52:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001bb5a:	75 0c                	jne    c001bb68 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001bb5c:	b8 04 00 00 00       	mov    eax,0x4
c001bb61:	e9 d2 00 00 00       	jmp    c001bc38 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bb66:	66 90                	xchg   ax,ax
c001bb68:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001bb70:	75 0a                	jne    c001bb7c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001bb72:	b8 04 00 00 00       	mov    eax,0x4
c001bb77:	e9 bc 00 00 00       	jmp    c001bc38 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bb7c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001bb84:	75 0a                	jne    c001bb90 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001bb86:	b8 04 00 00 00       	mov    eax,0x4
c001bb8b:	e9 a8 00 00 00       	jmp    c001bc38 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bb90:	83 ec 08             	sub    esp,0x8
c001bb93:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bb9a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bba1:	50                   	push   eax
c001bba2:	e8 99 4b fe ff       	call   c0000740 <strcpy>
c001bba7:	83 c4 10             	add    esp,0x10
c001bbaa:	83 ec 08             	sub    esp,0x8
c001bbad:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001bbb4:	50                   	push   eax
c001bbb5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bbbc:	e8 6b fd ff ff       	call   c001b92c <FAT::fixFilepath(char*)>
c001bbc1:	83 c4 10             	add    esp,0x10
c001bbc4:	83 ec 08             	sub    esp,0x8
c001bbc7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bbcb:	50                   	push   eax
c001bbcc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bbd3:	50                   	push   eax
c001bbd4:	e8 a9 a4 fe ff       	call   c0006082 <f_stat>
c001bbd9:	83 c4 10             	add    esp,0x10
c001bbdc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001bbe3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001bbea:	85 c0                	test   eax,eax
c001bbec:	74 0a                	je     c001bbf8 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001bbee:	83 f8 04             	cmp    eax,0x4
c001bbf1:	74 35                	je     c001bc28 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001bbf3:	eb 3b                	jmp    c001bc30 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001bbf5:	8d 76 00             	lea    esi,[esi+0x0]
c001bbf8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bbfc:	0f b6 c0             	movzx  eax,al
c001bbff:	83 e0 10             	and    eax,0x10
c001bc02:	0f 95 c2             	setne  dl
c001bc05:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001bc0c:	88 10                	mov    BYTE PTR [eax],dl
c001bc0e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bc11:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bc15:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001bc1c:	89 01                	mov    DWORD PTR [ecx],eax
c001bc1e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bc21:	b8 00 00 00 00       	mov    eax,0x0
c001bc26:	eb 10                	jmp    c001bc38 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bc28:	b8 02 00 00 00       	mov    eax,0x2
c001bc2d:	eb 09                	jmp    c001bc38 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bc2f:	90                   	nop
c001bc30:	b8 01 00 00 00       	mov    eax,0x1
c001bc35:	8d 76 00             	lea    esi,[esi+0x0]
c001bc38:	81 c4 2c 02 00 00    	add    esp,0x22c
c001bc3e:	c3                   	ret    
c001bc3f:	90                   	nop

c001bc40 <FAT::unlink(char const*)>:
c001bc40:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bc46:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bc4e:	75 08                	jne    c001bc58 <FAT::unlink(char const*)+0x18>
c001bc50:	b8 04 00 00 00       	mov    eax,0x4
c001bc55:	eb 61                	jmp    c001bcb8 <FAT::unlink(char const*)+0x78>
c001bc57:	90                   	nop
c001bc58:	83 ec 08             	sub    esp,0x8
c001bc5b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bc62:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bc66:	50                   	push   eax
c001bc67:	e8 d4 4a fe ff       	call   c0000740 <strcpy>
c001bc6c:	83 c4 10             	add    esp,0x10
c001bc6f:	83 ec 08             	sub    esp,0x8
c001bc72:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bc76:	50                   	push   eax
c001bc77:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bc7e:	e8 a9 fc ff ff       	call   c001b92c <FAT::fixFilepath(char*)>
c001bc83:	83 c4 10             	add    esp,0x10
c001bc86:	83 ec 0c             	sub    esp,0xc
c001bc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bc8d:	50                   	push   eax
c001bc8e:	e8 41 a7 fe ff       	call   c00063d4 <f_unlink>
c001bc93:	83 c4 10             	add    esp,0x10
c001bc96:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bc9d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001bca4:	85 c0                	test   eax,eax
c001bca6:	75 08                	jne    c001bcb0 <FAT::unlink(char const*)+0x70>
c001bca8:	b8 00 00 00 00       	mov    eax,0x0
c001bcad:	eb 09                	jmp    c001bcb8 <FAT::unlink(char const*)+0x78>
c001bcaf:	90                   	nop
c001bcb0:	b8 01 00 00 00       	mov    eax,0x1
c001bcb5:	8d 76 00             	lea    esi,[esi+0x0]
c001bcb8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bcbe:	c3                   	ret    
c001bcbf:	90                   	nop

c001bcc0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001bcc0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001bcc6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001bccd:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001bcd4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001bcd8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bcdc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001bce4:	75 0a                	jne    c001bcf0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001bce6:	b8 04 00 00 00       	mov    eax,0x4
c001bceb:	e9 30 01 00 00       	jmp    c001be20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001bcf0:	83 ec 08             	sub    esp,0x8
c001bcf3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001bcfa:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bcfe:	50                   	push   eax
c001bcff:	e8 3c 4a fe ff       	call   c0000740 <strcpy>
c001bd04:	83 c4 10             	add    esp,0x10
c001bd07:	83 ec 08             	sub    esp,0x8
c001bd0a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001bd0e:	50                   	push   eax
c001bd0f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001bd16:	e8 11 fc ff ff       	call   c001b92c <FAT::fixFilepath(char*)>
c001bd1b:	83 c4 10             	add    esp,0x10
c001bd1e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001bd26:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001bd2e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd33:	83 e0 01             	and    eax,0x1
c001bd36:	74 08                	je     c001bd40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001bd38:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001bd40:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd45:	83 e0 02             	and    eax,0x2
c001bd48:	74 0a                	je     c001bd54 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001bd4a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001bd52:	66 90                	xchg   ax,ax
c001bd54:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd59:	83 e0 04             	and    eax,0x4
c001bd5c:	74 0a                	je     c001bd68 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001bd5e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001bd66:	66 90                	xchg   ax,ax
c001bd68:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd6d:	83 e0 08             	and    eax,0x8
c001bd70:	74 0a                	je     c001bd7c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001bd72:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001bd7a:	66 90                	xchg   ax,ax
c001bd7c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bd81:	83 e0 01             	and    eax,0x1
c001bd84:	74 0a                	je     c001bd90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001bd86:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001bd8e:	66 90                	xchg   ax,ax
c001bd90:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bd95:	83 e0 02             	and    eax,0x2
c001bd98:	74 0a                	je     c001bda4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001bd9a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001bda2:	66 90                	xchg   ax,ax
c001bda4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bda9:	83 e0 04             	and    eax,0x4
c001bdac:	74 0a                	je     c001bdb8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001bdae:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001bdb6:	66 90                	xchg   ax,ax
c001bdb8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bdbd:	83 e0 08             	and    eax,0x8
c001bdc0:	74 0a                	je     c001bdcc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001bdc2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001bdca:	66 90                	xchg   ax,ax
c001bdcc:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001bdd3:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001bdda:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001bde2:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001bdea:	83 ec 04             	sub    esp,0x4
c001bded:	52                   	push   edx
c001bdee:	50                   	push   eax
c001bdef:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bdf3:	50                   	push   eax
c001bdf4:	e8 7d ac fe ff       	call   c0006a76 <f_chmod>
c001bdf9:	83 c4 10             	add    esp,0x10
c001bdfc:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001be03:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001be0a:	85 c0                	test   eax,eax
c001be0c:	75 0a                	jne    c001be18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001be0e:	b8 00 00 00 00       	mov    eax,0x0
c001be13:	eb 0b                	jmp    c001be20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001be15:	8d 76 00             	lea    esi,[esi+0x0]
c001be18:	b8 01 00 00 00       	mov    eax,0x1
c001be1d:	8d 76 00             	lea    esi,[esi+0x0]
c001be20:	81 c4 2c 01 00 00    	add    esp,0x12c
c001be26:	c3                   	ret    
c001be27:	90                   	nop

c001be28 <FAT::rename(char const*, char const*)>:
c001be28:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001be2e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001be36:	74 0c                	je     c001be44 <FAT::rename(char const*, char const*)+0x1c>
c001be38:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001be40:	75 0e                	jne    c001be50 <FAT::rename(char const*, char const*)+0x28>
c001be42:	66 90                	xchg   ax,ax
c001be44:	b8 04 00 00 00       	mov    eax,0x4
c001be49:	e9 9e 00 00 00       	jmp    c001beec <FAT::rename(char const*, char const*)+0xc4>
c001be4e:	66 90                	xchg   ax,ax
c001be50:	83 ec 08             	sub    esp,0x8
c001be53:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001be5a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001be61:	50                   	push   eax
c001be62:	e8 d9 48 fe ff       	call   c0000740 <strcpy>
c001be67:	83 c4 10             	add    esp,0x10
c001be6a:	83 ec 08             	sub    esp,0x8
c001be6d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001be74:	50                   	push   eax
c001be75:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001be7c:	e8 ab fa ff ff       	call   c001b92c <FAT::fixFilepath(char*)>
c001be81:	83 c4 10             	add    esp,0x10
c001be84:	83 ec 08             	sub    esp,0x8
c001be87:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001be8e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001be92:	50                   	push   eax
c001be93:	e8 a8 48 fe ff       	call   c0000740 <strcpy>
c001be98:	83 c4 10             	add    esp,0x10
c001be9b:	83 ec 08             	sub    esp,0x8
c001be9e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bea2:	50                   	push   eax
c001bea3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001beaa:	e8 7d fa ff ff       	call   c001b92c <FAT::fixFilepath(char*)>
c001beaf:	83 c4 10             	add    esp,0x10
c001beb2:	83 ec 08             	sub    esp,0x8
c001beb5:	8d 44 24 14          	lea    eax,[esp+0x14]
c001beb9:	50                   	push   eax
c001beba:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001bec1:	50                   	push   eax
c001bec2:	e8 bc a8 fe ff       	call   c0006783 <f_rename>
c001bec7:	83 c4 10             	add    esp,0x10
c001beca:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001bed1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001bed8:	85 c0                	test   eax,eax
c001beda:	75 08                	jne    c001bee4 <FAT::rename(char const*, char const*)+0xbc>
c001bedc:	b8 00 00 00 00       	mov    eax,0x0
c001bee1:	eb 09                	jmp    c001beec <FAT::rename(char const*, char const*)+0xc4>
c001bee3:	90                   	nop
c001bee4:	b8 01 00 00 00       	mov    eax,0x1
c001bee9:	8d 76 00             	lea    esi,[esi+0x0]
c001beec:	81 c4 1c 02 00 00    	add    esp,0x21c
c001bef2:	c3                   	ret    
c001bef3:	90                   	nop

c001bef4 <FAT::mkdir(char const*)>:
c001bef4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001befa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bf02:	75 08                	jne    c001bf0c <FAT::mkdir(char const*)+0x18>
c001bf04:	b8 04 00 00 00       	mov    eax,0x4
c001bf09:	eb 61                	jmp    c001bf6c <FAT::mkdir(char const*)+0x78>
c001bf0b:	90                   	nop
c001bf0c:	83 ec 08             	sub    esp,0x8
c001bf0f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bf16:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bf1a:	50                   	push   eax
c001bf1b:	e8 20 48 fe ff       	call   c0000740 <strcpy>
c001bf20:	83 c4 10             	add    esp,0x10
c001bf23:	83 ec 08             	sub    esp,0x8
c001bf26:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bf2a:	50                   	push   eax
c001bf2b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bf32:	e8 f5 f9 ff ff       	call   c001b92c <FAT::fixFilepath(char*)>
c001bf37:	83 c4 10             	add    esp,0x10
c001bf3a:	83 ec 0c             	sub    esp,0xc
c001bf3d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bf41:	50                   	push   eax
c001bf42:	e8 10 a6 fe ff       	call   c0006557 <f_mkdir>
c001bf47:	83 c4 10             	add    esp,0x10
c001bf4a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bf51:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001bf58:	85 c0                	test   eax,eax
c001bf5a:	75 08                	jne    c001bf64 <FAT::mkdir(char const*)+0x70>
c001bf5c:	b8 00 00 00 00       	mov    eax,0x0
c001bf61:	eb 09                	jmp    c001bf6c <FAT::mkdir(char const*)+0x78>
c001bf63:	90                   	nop
c001bf64:	b8 01 00 00 00       	mov    eax,0x1
c001bf69:	8d 76 00             	lea    esi,[esi+0x0]
c001bf6c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bf72:	c3                   	ret    
c001bf73:	90                   	nop

c001bf74 <FAT::exists(char const*)>:
c001bf74:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001bf7a:	83 ec 08             	sub    esp,0x8
c001bf7d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bf84:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bf88:	50                   	push   eax
c001bf89:	e8 b2 47 fe ff       	call   c0000740 <strcpy>
c001bf8e:	83 c4 10             	add    esp,0x10
c001bf91:	83 ec 08             	sub    esp,0x8
c001bf94:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bf98:	50                   	push   eax
c001bf99:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bfa0:	e8 87 f9 ff ff       	call   c001b92c <FAT::fixFilepath(char*)>
c001bfa5:	83 c4 10             	add    esp,0x10
c001bfa8:	83 ec 08             	sub    esp,0x8
c001bfab:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001bfb2:	50                   	push   eax
c001bfb3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bfb7:	50                   	push   eax
c001bfb8:	e8 c5 a0 fe ff       	call   c0006082 <f_stat>
c001bfbd:	83 c4 10             	add    esp,0x10
c001bfc0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001bfc7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001bfce:	85 c0                	test   eax,eax
c001bfd0:	75 06                	jne    c001bfd8 <FAT::exists(char const*)+0x64>
c001bfd2:	b0 01                	mov    al,0x1
c001bfd4:	eb 06                	jmp    c001bfdc <FAT::exists(char const*)+0x68>
c001bfd6:	66 90                	xchg   ax,ax
c001bfd8:	b0 00                	mov    al,0x0
c001bfda:	66 90                	xchg   ax,ax
c001bfdc:	81 c4 2c 02 00 00    	add    esp,0x22c
c001bfe2:	c3                   	ret    
c001bfe3:	90                   	nop

c001bfe4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001bfe4:	b8 08 00 00 00       	mov    eax,0x8
c001bfe9:	c3                   	ret    

c001bfea <ISO9660::seek(void*, unsigned long long)>:
c001bfea:	53                   	push   ebx
c001bfeb:	b8 04 00 00 00       	mov    eax,0x4
c001bff0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bff4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bff8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001bffc:	85 d2                	test   edx,edx
c001bffe:	74 17                	je     c001c017 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c000:	89 c8                	mov    eax,ecx
c001c002:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001c005:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001c008:	b8 01 00 00 00       	mov    eax,0x1
c001c00d:	73 08                	jae    c001c017 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c00f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001c012:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c015:	31 c0                	xor    eax,eax
c001c017:	5b                   	pop    ebx
c001c018:	c3                   	ret    
c001c019:	90                   	nop

c001c01a <ISO9660::tell(void*, unsigned long long*)>:
c001c01a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c01e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c022:	85 d2                	test   edx,edx
c001c024:	74 12                	je     c001c038 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c026:	85 c0                	test   eax,eax
c001c028:	74 0e                	je     c001c038 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c02a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c02d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001c030:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c033:	89 10                	mov    DWORD PTR [eax],edx
c001c035:	31 c0                	xor    eax,eax
c001c037:	c3                   	ret    
c001c038:	b8 04 00 00 00       	mov    eax,0x4
c001c03d:	c3                   	ret    

c001c03e <ISO9660::getName()>:
c001c03e:	b8 dc 62 02 c0       	mov    eax,0xc00262dc
c001c043:	c3                   	ret    

c001c044 <ISO9660::stat(void*, unsigned long long*)>:
c001c044:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c048:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c04c:	85 d2                	test   edx,edx
c001c04e:	74 12                	je     c001c062 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c050:	85 c0                	test   eax,eax
c001c052:	74 0e                	je     c001c062 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c054:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001c057:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001c05a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c05d:	89 10                	mov    DWORD PTR [eax],edx
c001c05f:	31 c0                	xor    eax,eax
c001c061:	c3                   	ret    
c001c062:	b8 04 00 00 00       	mov    eax,0x4
c001c067:	c3                   	ret    

c001c068 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c068:	b8 01 00 00 00       	mov    eax,0x1
c001c06d:	c3                   	ret    

c001c06e <ISO9660::unlink(char const*)>:
c001c06e:	b8 01 00 00 00       	mov    eax,0x1
c001c073:	c3                   	ret    

c001c074 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c074:	b8 01 00 00 00       	mov    eax,0x1
c001c079:	c3                   	ret    

c001c07a <ISO9660::rename(char const*, char const*)>:
c001c07a:	b8 01 00 00 00       	mov    eax,0x1
c001c07f:	c3                   	ret    

c001c080 <ISO9660::mkdir(char const*)>:
c001c080:	b8 01 00 00 00       	mov    eax,0x1
c001c085:	c3                   	ret    

c001c086 <ISO9660::close(void*)>:
c001c086:	83 ec 0c             	sub    esp,0xc
c001c089:	b8 04 00 00 00       	mov    eax,0x4
c001c08e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c092:	85 d2                	test   edx,edx
c001c094:	74 0e                	je     c001c0a4 <ISO9660::close(void*)+0x1e>
c001c096:	83 ec 0c             	sub    esp,0xc
c001c099:	52                   	push   edx
c001c09a:	e8 80 d9 fe ff       	call   c0009a1f <free>
c001c09f:	83 c4 10             	add    esp,0x10
c001c0a2:	31 c0                	xor    eax,eax
c001c0a4:	83 c4 0c             	add    esp,0xc
c001c0a7:	c3                   	ret    

c001c0a8 <ISO9660::closeDir(void*)>:
c001c0a8:	83 ec 0c             	sub    esp,0xc
c001c0ab:	b8 04 00 00 00       	mov    eax,0x4
c001c0b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c0b4:	85 d2                	test   edx,edx
c001c0b6:	74 0e                	je     c001c0c6 <ISO9660::closeDir(void*)+0x1e>
c001c0b8:	83 ec 0c             	sub    esp,0xc
c001c0bb:	52                   	push   edx
c001c0bc:	e8 5e d9 fe ff       	call   c0009a1f <free>
c001c0c1:	83 c4 10             	add    esp,0x10
c001c0c4:	31 c0                	xor    eax,eax
c001c0c6:	83 c4 0c             	add    esp,0xc
c001c0c9:	c3                   	ret    

c001c0ca <ISO9660::~ISO9660()>:
c001c0ca:	83 ec 0c             	sub    esp,0xc
c001c0cd:	ba 00 63 02 c0       	mov    edx,0xc0026300
c001c0d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0d6:	89 10                	mov    DWORD PTR [eax],edx
c001c0d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0dc:	83 ec 0c             	sub    esp,0xc
c001c0df:	50                   	push   eax
c001c0e0:	e8 55 0f ff ff       	call   c000d03a <Filesystem::~Filesystem()>
c001c0e5:	83 c4 10             	add    esp,0x10
c001c0e8:	90                   	nop
c001c0e9:	83 c4 0c             	add    esp,0xc
c001c0ec:	c3                   	ret    
c001c0ed:	90                   	nop

c001c0ee <ISO9660::~ISO9660()>:
c001c0ee:	83 ec 0c             	sub    esp,0xc
c001c0f1:	83 ec 0c             	sub    esp,0xc
c001c0f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0f8:	e8 cd ff ff ff       	call   c001c0ca <ISO9660::~ISO9660()>
c001c0fd:	83 c4 10             	add    esp,0x10
c001c100:	83 ec 08             	sub    esp,0x8
c001c103:	6a 08                	push   0x8
c001c105:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c109:	e8 10 0b ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c001c10e:	83 c4 10             	add    esp,0x10
c001c111:	83 c4 0c             	add    esp,0xc
c001c114:	c3                   	ret    

c001c115 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001c115:	55                   	push   ebp
c001c116:	31 c9                	xor    ecx,ecx
c001c118:	57                   	push   edi
c001c119:	56                   	push   esi
c001c11a:	53                   	push   ebx
c001c11b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c11f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c123:	89 eb                	mov    ebx,ebp
c001c125:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001c129:	39 ce                	cmp    esi,ecx
c001c12b:	7e 17                	jle    c001c144 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001c12d:	31 d2                	xor    edx,edx
c001c12f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001c133:	7d 13                	jge    c001c148 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001c135:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c139:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c13c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001c13f:	75 0d                	jne    c001c14e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001c141:	42                   	inc    edx
c001c142:	eb eb                	jmp    c001c12f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001c144:	31 c0                	xor    eax,eax
c001c146:	eb 0a                	jmp    c001c152 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c148:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001c14c:	eb 04                	jmp    c001c152 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c14e:	41                   	inc    ecx
c001c14f:	43                   	inc    ebx
c001c150:	eb d7                	jmp    c001c129 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001c152:	5b                   	pop    ebx
c001c153:	5e                   	pop    esi
c001c154:	5f                   	pop    edi
c001c155:	5d                   	pop    ebp
c001c156:	c3                   	ret    

c001c157 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001c157:	57                   	push   edi
c001c158:	56                   	push   esi
c001c159:	53                   	push   ebx
c001c15a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c15e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c162:	39 0d 00 96 02 c0    	cmp    DWORD PTR ds:0xc0029600,ecx
c001c168:	75 08                	jne    c001c172 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c001c16a:	38 05 14 79 02 c0    	cmp    BYTE PTR ds:0xc0027914,al
c001c170:	74 2b                	je     c001c19d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c001c172:	83 ec 0c             	sub    esp,0xc
c001c175:	a2 14 79 02 c0       	mov    ds:0xc0027914,al
c001c17a:	68 20 96 02 c0       	push   0xc0029620
c001c17f:	0f be c0             	movsx  eax,al
c001c182:	6a 01                	push   0x1
c001c184:	89 0d 00 96 02 c0    	mov    DWORD PTR ds:0xc0029600,ecx
c001c18a:	31 db                	xor    ebx,ebx
c001c18c:	53                   	push   ebx
c001c18d:	51                   	push   ecx
c001c18e:	ff 34 85 9c 83 02 c0 	push   DWORD PTR [eax*4-0x3ffd7c64]
c001c195:	e8 e6 42 ff ff       	call   c0010480 <LogicalDisk::read(unsigned long long, int, void*)>
c001c19a:	83 c4 20             	add    esp,0x20
c001c19d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c1a1:	be 20 96 02 c0       	mov    esi,0xc0029620
c001c1a6:	b9 00 08 00 00       	mov    ecx,0x800
c001c1ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c1ad:	5b                   	pop    ebx
c001c1ae:	5e                   	pop    esi
c001c1af:	5f                   	pop    edi
c001c1b0:	c3                   	ret    
c001c1b1:	90                   	nop

c001c1b2 <ISO9660::tryMount(LogicalDisk*, int)>:
c001c1b2:	81 ec 10 08 00 00    	sub    esp,0x810
c001c1b8:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001c1bf:	83 c0 41             	add    eax,0x41
c001c1c2:	0f be c0             	movsx  eax,al
c001c1c5:	50                   	push   eax
c001c1c6:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c1ca:	50                   	push   eax
c001c1cb:	6a 10                	push   0x10
c001c1cd:	e8 85 ff ff ff       	call   c001c157 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c1d2:	83 c4 10             	add    esp,0x10
c001c1d5:	31 c0                	xor    eax,eax
c001c1d7:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001c1dc:	75 1d                	jne    c001c1fb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001c1de:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001c1e3:	75 16                	jne    c001c1fb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001c1e5:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001c1ea:	75 0f                	jne    c001c1fb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001c1ec:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001c1f1:	75 08                	jne    c001c1fb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001c1f3:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001c1f8:	0f 94 c0             	sete   al
c001c1fb:	81 c4 0c 08 00 00    	add    esp,0x80c
c001c201:	c3                   	ret    

c001c202 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c202:	55                   	push   ebp
c001c203:	57                   	push   edi
c001c204:	56                   	push   esi
c001c205:	53                   	push   ebx
c001c206:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001c20c:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001c213:	85 ed                	test   ebp,ebp
c001c215:	0f 84 da 01 00 00    	je     c001c3f5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c21b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001c223:	0f 84 cc 01 00 00    	je     c001c3f5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c229:	b8 01 00 00 00       	mov    eax,0x1
c001c22e:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001c232:	0f 85 c2 01 00 00    	jne    c001c3fa <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c238:	31 d2                	xor    edx,edx
c001c23a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001c241:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c244:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001c247:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c24a:	89 04 24             	mov    DWORD PTR [esp],eax
c001c24d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c251:	01 c8                	add    eax,ecx
c001c253:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c256:	11 da                	adc    edx,ebx
c001c258:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001c25c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c260:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c264:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c268:	19 d7                	sbb    edi,edx
c001c26a:	72 11                	jb     c001c27d <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001c26c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c26f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001c273:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c277:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c27b:	eb 0c                	jmp    c001c289 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001c27d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001c281:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c285:	29 ce                	sub    esi,ecx
c001c287:	19 df                	sbb    edi,ebx
c001c289:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c28c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001c28f:	0f a4 c2 0b          	shld   edx,eax,0xb
c001c293:	c1 e0 0b             	shl    eax,0xb
c001c296:	01 c8                	add    eax,ecx
c001c298:	11 da                	adc    edx,ebx
c001c29a:	89 04 24             	mov    DWORD PTR [esp],eax
c001c29d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c2a1:	51                   	push   ecx
c001c2a2:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c2a6:	50                   	push   eax
c001c2a7:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001c2ab:	53                   	push   ebx
c001c2ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c2b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2b4:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c2b8:	50                   	push   eax
c001c2b9:	e8 99 fe ff ff       	call   c001c157 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c2be:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001c2c1:	b8 00 08 00 00       	mov    eax,0x800
c001c2c6:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001c2cc:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001c2d0:	29 d0                	sub    eax,edx
c001c2d2:	83 c4 10             	add    esp,0x10
c001c2d5:	89 f9                	mov    ecx,edi
c001c2d7:	39 c6                	cmp    esi,eax
c001c2d9:	83 d9 00             	sbb    ecx,0x0
c001c2dc:	7d 1b                	jge    c001c2f9 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001c2de:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c2e3:	75 12                	jne    c001c2f7 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001c2e5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c2ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c2f2:	e9 fa 00 00 00       	jmp    c001c3f1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001c2f7:	89 f0                	mov    eax,esi
c001c2f9:	01 d3                	add    ebx,edx
c001c2fb:	31 d2                	xor    edx,edx
c001c2fd:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c301:	39 c2                	cmp    edx,eax
c001c303:	7d 14                	jge    c001c319 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001c305:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001c30c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c310:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001c313:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001c316:	42                   	inc    edx
c001c317:	eb e8                	jmp    c001c301 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001c319:	89 c2                	mov    edx,eax
c001c31b:	85 c0                	test   eax,eax
c001c31d:	79 02                	jns    c001c321 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001c31f:	31 d2                	xor    edx,edx
c001c321:	01 c2                	add    edx,eax
c001c323:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001c326:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001c32d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001c331:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c335:	99                   	cdq    
c001c336:	01 c1                	add    ecx,eax
c001c338:	11 d3                	adc    ebx,edx
c001c33a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001c33e:	29 c6                	sub    esi,eax
c001c340:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001c344:	19 d7                	sbb    edi,edx
c001c346:	89 34 24             	mov    DWORD PTR [esp],esi
c001c349:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c34d:	b8 ff 07 00 00       	mov    eax,0x7ff
c001c352:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001c355:	b8 00 00 00 00       	mov    eax,0x0
c001c35a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001c35e:	7d 43                	jge    c001c3a3 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001c360:	52                   	push   edx
c001c361:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c365:	50                   	push   eax
c001c366:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c36a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c36e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c372:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c376:	50                   	push   eax
c001c377:	e8 db fd ff ff       	call   c001c157 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c37c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001c384:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001c389:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001c391:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001c399:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001c39e:	83 c4 10             	add    esp,0x10
c001c3a1:	eb aa                	jmp    c001c34d <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001c3a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3a7:	0b 04 24             	or     eax,DWORD PTR [esp]
c001c3aa:	74 2a                	je     c001c3d6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001c3ac:	50                   	push   eax
c001c3ad:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c3b1:	50                   	push   eax
c001c3b2:	8d 74 24 28          	lea    esi,[esp+0x28]
c001c3b6:	56                   	push   esi
c001c3b7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c3bb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c3bf:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001c3c3:	51                   	push   ecx
c001c3c4:	e8 8e fd ff ff       	call   c001c157 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c3c9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c3cd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c3d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c3d3:	83 c4 10             	add    esp,0x10
c001c3d6:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c3dd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c3e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c3e5:	89 18                	mov    DWORD PTR [eax],ebx
c001c3e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3eb:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c3ee:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c3f1:	31 c0                	xor    eax,eax
c001c3f3:	eb 05                	jmp    c001c3fa <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c3f5:	b8 04 00 00 00       	mov    eax,0x4
c001c3fa:	81 c4 2c 08 00 00    	add    esp,0x82c
c001c400:	5b                   	pop    ebx
c001c401:	5e                   	pop    esi
c001c402:	5f                   	pop    edi
c001c403:	5d                   	pop    ebp
c001c404:	c3                   	ret    
c001c405:	90                   	nop

c001c406 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001c406:	55                   	push   ebp
c001c407:	57                   	push   edi
c001c408:	56                   	push   esi
c001c409:	53                   	push   ebx
c001c40a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001c410:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001c417:	85 ed                	test   ebp,ebp
c001c419:	0f 84 51 02 00 00    	je     c001c670 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c41f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001c427:	0f 84 43 02 00 00    	je     c001c670 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c42d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c430:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001c433:	75 0a                	jne    c001c43f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001c435:	b8 07 00 00 00       	mov    eax,0x7
c001c43a:	e9 36 02 00 00       	jmp    c001c675 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c43f:	50                   	push   eax
c001c440:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c444:	50                   	push   eax
c001c445:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c44c:	53                   	push   ebx
c001c44d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c450:	c1 e0 0b             	shl    eax,0xb
c001c453:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001c456:	c1 e8 0b             	shr    eax,0xb
c001c459:	50                   	push   eax
c001c45a:	e8 f8 fc ff ff       	call   c001c157 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c45f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c462:	83 c4 10             	add    esp,0x10
c001c465:	89 c1                	mov    ecx,eax
c001c467:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001c46a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001c470:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001c473:	84 db                	test   bl,bl
c001c475:	0f 85 8b 00 00 00    	jne    c001c506 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001c47b:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001c481:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c484:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001c48a:	29 c6                	sub    esi,eax
c001c48c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c490:	89 f3                	mov    ebx,esi
c001c492:	89 f1                	mov    ecx,esi
c001c494:	c1 fb 1f             	sar    ebx,0x1f
c001c497:	01 f0                	add    eax,esi
c001c499:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c49c:	11 da                	adc    edx,ebx
c001c49e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c4a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c4a5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c4a8:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c4ab:	89 d8                	mov    eax,ebx
c001c4ad:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001c4b1:	ba 00 00 00 00       	mov    edx,0x0
c001c4b6:	19 f8                	sbb    eax,edi
c001c4b8:	b8 00 00 00 00       	mov    eax,0x0
c001c4bd:	73 08                	jae    c001c4c7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001c4bf:	89 f0                	mov    eax,esi
c001c4c1:	89 fa                	mov    edx,edi
c001c4c3:	29 c8                	sub    eax,ecx
c001c4c5:	19 da                	sbb    edx,ebx
c001c4c7:	89 d7                	mov    edi,edx
c001c4c9:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c4cc:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c4cf:	09 c7                	or     edi,eax
c001c4d1:	0f 84 5e ff ff ff    	je     c001c435 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001c4d7:	57                   	push   edi
c001c4d8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c4dc:	50                   	push   eax
c001c4dd:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c4e4:	53                   	push   ebx
c001c4e5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c4e8:	c1 e0 0b             	shl    eax,0xb
c001c4eb:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001c4ef:	c1 e8 0b             	shr    eax,0xb
c001c4f2:	50                   	push   eax
c001c4f3:	e8 5f fc ff ff       	call   c001c157 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c4f8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c4fb:	83 c4 10             	add    esp,0x10
c001c4fe:	25 ff 07 00 00       	and    eax,0x7ff
c001c503:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001c506:	31 ff                	xor    edi,edi
c001c508:	56                   	push   esi
c001c509:	6a 28                	push   0x28
c001c50b:	6a 00                	push   0x0
c001c50d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c511:	50                   	push   eax
c001c512:	e8 6d 41 fe ff       	call   c0000684 <memset>
c001c517:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c51a:	25 ff 07 00 00       	and    eax,0x7ff
c001c51f:	89 c6                	mov    esi,eax
c001c521:	83 c6 21             	add    esi,0x21
c001c524:	83 d7 00             	adc    edi,0x0
c001c527:	83 c4 10             	add    esp,0x10
c001c52a:	31 c9                	xor    ecx,ecx
c001c52c:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001c533:	83 f9 28             	cmp    ecx,0x28
c001c536:	88 04 24             	mov    BYTE PTR [esp],al
c001c539:	0f 94 c2             	sete   dl
c001c53c:	88 d0                	mov    al,dl
c001c53e:	ba ff 07 00 00       	mov    edx,0x7ff
c001c543:	39 f2                	cmp    edx,esi
c001c545:	ba 00 00 00 00       	mov    edx,0x0
c001c54a:	19 fa                	sbb    edx,edi
c001c54c:	0f 92 c2             	setb   dl
c001c54f:	09 c2                	or     edx,eax
c001c551:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001c555:	0f 94 c0             	sete   al
c001c558:	08 d0                	or     al,dl
c001c55a:	75 16                	jne    c001c572 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c55c:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001c560:	74 10                	je     c001c572 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c562:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c565:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001c569:	41                   	inc    ecx
c001c56a:	83 c6 01             	add    esi,0x1
c001c56d:	83 d7 00             	adc    edi,0x0
c001c570:	eb ba                	jmp    c001c52c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001c572:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001c579:	83 ec 0c             	sub    esp,0xc
c001c57c:	8d 74 24 24          	lea    esi,[esp+0x24]
c001c580:	56                   	push   esi
c001c581:	e8 1a 41 fe ff       	call   c00006a0 <strlen>
c001c586:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001c58d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c591:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001c599:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c59c:	5a                   	pop    edx
c001c59d:	25 ff 07 00 00       	and    eax,0x7ff
c001c5a2:	59                   	pop    ecx
c001c5a3:	01 f8                	add    eax,edi
c001c5a5:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001c5ab:	83 e0 02             	and    eax,0x2
c001c5ae:	3c 01                	cmp    al,0x1
c001c5b0:	19 c0                	sbb    eax,eax
c001c5b2:	83 c0 02             	add    eax,0x2
c001c5b5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c5b9:	56                   	push   esi
c001c5ba:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c5be:	50                   	push   eax
c001c5bf:	e8 7c 41 fe ff       	call   c0000740 <strcpy>
c001c5c4:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001c5c8:	83 c4 10             	add    esp,0x10
c001c5cb:	84 c0                	test   al,al
c001c5cd:	75 21                	jne    c001c5f0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001c5cf:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001c5d7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c5df:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c5e7:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001c5ee:	eb 28                	jmp    c001c618 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c5f0:	fe c8                	dec    al
c001c5f2:	75 24                	jne    c001c618 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c5f4:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001c5fc:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c604:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c60c:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001c613:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001c618:	8d 74 24 40          	lea    esi,[esp+0x40]
c001c61c:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001c623:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001c62a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c62c:	0f b6 f3             	movzx  esi,bl
c001c62f:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001c636:	31 db                	xor    ebx,ebx
c001c638:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c63e:	89 df                	mov    edi,ebx
c001c640:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001c643:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c646:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001c649:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001c64c:	39 c6                	cmp    esi,eax
c001c64e:	19 d7                	sbb    edi,edx
c001c650:	72 10                	jb     c001c662 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001c652:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001c659:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001c660:	eb 0a                	jmp    c001c66c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001c662:	29 f0                	sub    eax,esi
c001c664:	19 da                	sbb    edx,ebx
c001c666:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c669:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c66c:	31 c0                	xor    eax,eax
c001c66e:	eb 05                	jmp    c001c675 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c670:	b8 04 00 00 00       	mov    eax,0x4
c001c675:	81 c4 5c 09 00 00    	add    esp,0x95c
c001c67b:	5b                   	pop    ebx
c001c67c:	5e                   	pop    esi
c001c67d:	5f                   	pop    edi
c001c67e:	5d                   	pop    ebp
c001c67f:	c3                   	ret    

c001c680 <readRoot(unsigned int*, unsigned int*, char)>:
c001c680:	57                   	push   edi
c001c681:	56                   	push   esi
c001c682:	81 ec 38 08 00 00    	sub    esp,0x838
c001c688:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001c690:	50                   	push   eax
c001c691:	8d 44 24 38          	lea    eax,[esp+0x38]
c001c695:	50                   	push   eax
c001c696:	6a 10                	push   0x10
c001c698:	e8 ba fa ff ff       	call   c001c157 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c69d:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001c6a4:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001c6a8:	b9 22 00 00 00       	mov    ecx,0x22
c001c6ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c6af:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c6b6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c6ba:	89 10                	mov    DWORD PTR [eax],edx
c001c6bc:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001c6c3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c6c7:	89 10                	mov    DWORD PTR [eax],edx
c001c6c9:	81 c4 44 08 00 00    	add    esp,0x844
c001c6cf:	b0 01                	mov    al,0x1
c001c6d1:	5e                   	pop    esi
c001c6d2:	5f                   	pop    edi
c001c6d3:	c3                   	ret    

c001c6d4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001c6d4:	55                   	push   ebp
c001c6d5:	57                   	push   edi
c001c6d6:	56                   	push   esi
c001c6d7:	53                   	push   ebx
c001c6d8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c6de:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001c6e5:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001c6ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c6f0:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001c6f4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c6f8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c6fc:	75 03                	jne    c001c701 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c6fe:	83 c3 02             	add    ebx,0x2
c001c701:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001c704:	75 03                	jne    c001c709 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001c706:	43                   	inc    ebx
c001c707:	eb f8                	jmp    c001c701 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c709:	51                   	push   ecx
c001c70a:	68 00 01 00 00       	push   0x100
c001c70f:	6a 00                	push   0x0
c001c711:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c715:	50                   	push   eax
c001c716:	e8 69 3f fe ff       	call   c0000684 <memset>
c001c71b:	83 c4 10             	add    esp,0x10
c001c71e:	31 d2                	xor    edx,edx
c001c720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c723:	84 c0                	test   al,al
c001c725:	74 21                	je     c001c748 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001c727:	3c 2f                	cmp    al,0x2f
c001c729:	75 0b                	jne    c001c736 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001c72b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001c72f:	bd 01 00 00 00       	mov    ebp,0x1
c001c734:	eb 14                	jmp    c001c74a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001c736:	8d 48 9f             	lea    ecx,[eax-0x61]
c001c739:	80 f9 19             	cmp    cl,0x19
c001c73c:	77 03                	ja     c001c741 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c73e:	83 e8 20             	sub    eax,0x20
c001c741:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001c745:	42                   	inc    edx
c001c746:	eb d8                	jmp    c001c720 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001c748:	31 ed                	xor    ebp,ebp
c001c74a:	83 ec 0c             	sub    esp,0xc
c001c74d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c754:	e8 b6 d2 fe ff       	call   c0009a0f <malloc>
c001c759:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001c760:	89 c6                	mov    esi,eax
c001c762:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001c768:	c1 ef 0b             	shr    edi,0xb
c001c76b:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001c772:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001c776:	83 c4 10             	add    esp,0x10
c001c779:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c77e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c782:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001c789:	74 28                	je     c001c7b3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001c78b:	52                   	push   edx
c001c78c:	57                   	push   edi
c001c78d:	50                   	push   eax
c001c78e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c792:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c799:	e8 b9 f9 ff ff       	call   c001c157 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c79e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c7a2:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c7a9:	05 00 08 00 00       	add    eax,0x800
c001c7ae:	83 c4 10             	add    esp,0x10
c001c7b1:	eb cb                	jmp    c001c77e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001c7b3:	83 ec 0c             	sub    esp,0xc
c001c7b6:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c7ba:	57                   	push   edi
c001c7bb:	e8 e0 3e fe ff       	call   c00006a0 <strlen>
c001c7c0:	50                   	push   eax
c001c7c1:	57                   	push   edi
c001c7c2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c7c9:	56                   	push   esi
c001c7ca:	e8 46 f9 ff ff       	call   c001c115 <__memmem(unsigned char*, int, unsigned char*, int)>
c001c7cf:	83 c4 20             	add    esp,0x20
c001c7d2:	85 c0                	test   eax,eax
c001c7d4:	75 13                	jne    c001c7e9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001c7d6:	83 ec 0c             	sub    esp,0xc
c001c7d9:	56                   	push   esi
c001c7da:	e8 40 d2 fe ff       	call   c0009a1f <free>
c001c7df:	83 c4 10             	add    esp,0x10
c001c7e2:	31 c0                	xor    eax,eax
c001c7e4:	e9 b3 00 00 00       	jmp    c001c89c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c7e9:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c7ed:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c7f1:	c1 e7 08             	shl    edi,0x8
c001c7f4:	c1 e2 10             	shl    edx,0x10
c001c7f7:	09 d7                	or     edi,edx
c001c7f9:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c7fd:	09 d7                	or     edi,edx
c001c7ff:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c803:	c1 e2 18             	shl    edx,0x18
c001c806:	09 d7                	or     edi,edx
c001c808:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c80c:	89 d1                	mov    ecx,edx
c001c80e:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c812:	c1 e1 08             	shl    ecx,0x8
c001c815:	c1 e2 10             	shl    edx,0x10
c001c818:	09 ca                	or     edx,ecx
c001c81a:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c81e:	09 ca                	or     edx,ecx
c001c820:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c824:	c1 e1 18             	shl    ecx,0x18
c001c827:	09 ca                	or     edx,ecx
c001c829:	89 e9                	mov    ecx,ebp
c001c82b:	84 c9                	test   cl,cl
c001c82d:	74 3c                	je     c001c86b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001c82f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c833:	83 ec 0c             	sub    esp,0xc
c001c836:	56                   	push   esi
c001c837:	e8 e3 d1 fe ff       	call   c0009a1f <free>
c001c83c:	83 c4 0c             	add    esp,0xc
c001c83f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c846:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c84b:	50                   	push   eax
c001c84c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c853:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c85a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c85e:	52                   	push   edx
c001c85f:	57                   	push   edi
c001c860:	53                   	push   ebx
c001c861:	e8 6e fe ff ff       	call   c001c6d4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c866:	83 c4 20             	add    esp,0x20
c001c869:	eb 31                	jmp    c001c89c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c86b:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c86e:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c875:	d0 e8                	shr    al,1
c001c877:	89 3b                	mov    DWORD PTR [ebx],edi
c001c879:	83 e0 01             	and    eax,0x1
c001c87c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c883:	83 ec 0c             	sub    esp,0xc
c001c886:	89 13                	mov    DWORD PTR [ebx],edx
c001c888:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c88f:	89 03                	mov    DWORD PTR [ebx],eax
c001c891:	56                   	push   esi
c001c892:	e8 88 d1 fe ff       	call   c0009a1f <free>
c001c897:	83 c4 10             	add    esp,0x10
c001c89a:	b0 01                	mov    al,0x1
c001c89c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c8a2:	5b                   	pop    ebx
c001c8a3:	5e                   	pop    esi
c001c8a4:	5f                   	pop    edi
c001c8a5:	5d                   	pop    ebp
c001c8a6:	c3                   	ret    

c001c8a7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c8a7:	55                   	push   ebp
c001c8a8:	57                   	push   edi
c001c8a9:	56                   	push   esi
c001c8aa:	53                   	push   ebx
c001c8ab:	83 ec 20             	sub    esp,0x20
c001c8ae:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c8b2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c8b6:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c8ba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c8c2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c8ca:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c8cf:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c8d5:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c8db:	57                   	push   edi
c001c8dc:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c8e0:	50                   	push   eax
c001c8e1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c8e5:	50                   	push   eax
c001c8e6:	e8 95 fd ff ff       	call   c001c680 <readRoot(unsigned int*, unsigned int*, char)>
c001c8eb:	5a                   	pop    edx
c001c8ec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c8f0:	e8 ab 3d fe ff       	call   c00006a0 <strlen>
c001c8f5:	83 c4 10             	add    esp,0x10
c001c8f8:	83 f8 03             	cmp    eax,0x3
c001c8fb:	77 17                	ja     c001c914 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c8fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c901:	89 03                	mov    DWORD PTR [ebx],eax
c001c903:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c907:	89 06                	mov    DWORD PTR [esi],eax
c001c909:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c910:	b0 01                	mov    al,0x1
c001c912:	eb 19                	jmp    c001c92d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c914:	50                   	push   eax
c001c915:	55                   	push   ebp
c001c916:	57                   	push   edi
c001c917:	56                   	push   esi
c001c918:	53                   	push   ebx
c001c919:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c91d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c921:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c925:	e8 aa fd ff ff       	call   c001c6d4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c92a:	83 c4 20             	add    esp,0x20
c001c92d:	83 c4 1c             	add    esp,0x1c
c001c930:	5b                   	pop    ebx
c001c931:	5e                   	pop    esi
c001c932:	5f                   	pop    edi
c001c933:	5d                   	pop    ebp
c001c934:	c3                   	ret    
c001c935:	90                   	nop

c001c936 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c936:	57                   	push   edi
c001c937:	56                   	push   esi
c001c938:	53                   	push   ebx
c001c939:	83 ec 10             	sub    esp,0x10
c001c93c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c940:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c944:	85 ff                	test   edi,edi
c001c946:	0f 84 8b 00 00 00    	je     c001c9d7 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c94c:	85 f6                	test   esi,esi
c001c94e:	0f 84 83 00 00 00    	je     c001c9d7 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c954:	b8 03 00 00 00       	mov    eax,0x3
c001c959:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c95e:	75 7c                	jne    c001c9dc <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c960:	83 ec 0c             	sub    esp,0xc
c001c963:	6a 1c                	push   0x1c
c001c965:	e8 a5 d0 fe ff       	call   c0009a0f <malloc>
c001c96a:	89 07                	mov    DWORD PTR [edi],eax
c001c96c:	89 c3                	mov    ebx,eax
c001c96e:	58                   	pop    eax
c001c96f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c973:	50                   	push   eax
c001c974:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c977:	50                   	push   eax
c001c978:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c97c:	50                   	push   eax
c001c97d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c981:	50                   	push   eax
c001c982:	56                   	push   esi
c001c983:	e8 1f ff ff ff       	call   c001c8a7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c988:	83 c4 20             	add    esp,0x20
c001c98b:	84 c0                	test   al,al
c001c98d:	74 07                	je     c001c996 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c98f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c994:	74 0b                	je     c001c9a1 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c996:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c99a:	b8 01 00 00 00       	mov    eax,0x1
c001c99f:	eb 3b                	jmp    c001c9dc <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c9a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9a5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c9a9:	89 03                	mov    DWORD PTR [ebx],eax
c001c9ab:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c9b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9b6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c9bd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c9c4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c9c7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c9ce:	8a 06                	mov    al,BYTE PTR [esi]
c001c9d0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c9d3:	31 c0                	xor    eax,eax
c001c9d5:	eb 05                	jmp    c001c9dc <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c9d7:	b8 04 00 00 00       	mov    eax,0x4
c001c9dc:	83 c4 10             	add    esp,0x10
c001c9df:	5b                   	pop    ebx
c001c9e0:	5e                   	pop    esi
c001c9e1:	5f                   	pop    edi
c001c9e2:	c3                   	ret    
c001c9e3:	90                   	nop

c001c9e4 <ISO9660::exists(char const*)>:
c001c9e4:	83 ec 28             	sub    esp,0x28
c001c9e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c9eb:	8d 54 24 18          	lea    edx,[esp+0x18]
c001c9ef:	52                   	push   edx
c001c9f0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001c9f3:	52                   	push   edx
c001c9f4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c9f8:	52                   	push   edx
c001c9f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c9fd:	52                   	push   edx
c001c9fe:	50                   	push   eax
c001c9ff:	e8 a3 fe ff ff       	call   c001c8a7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ca04:	83 c4 3c             	add    esp,0x3c
c001ca07:	c3                   	ret    

c001ca08 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001ca08:	56                   	push   esi
c001ca09:	53                   	push   ebx
c001ca0a:	83 ec 14             	sub    esp,0x14
c001ca0d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ca11:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ca15:	85 db                	test   ebx,ebx
c001ca17:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ca1b:	0f 94 c2             	sete   dl
c001ca1e:	85 f6                	test   esi,esi
c001ca20:	0f 94 c0             	sete   al
c001ca23:	08 c2                	or     dl,al
c001ca25:	75 68                	jne    c001ca8f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001ca27:	85 c9                	test   ecx,ecx
c001ca29:	74 64                	je     c001ca8f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001ca2b:	83 ec 0c             	sub    esp,0xc
c001ca2e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ca31:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ca35:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001ca3b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ca42:	50                   	push   eax
c001ca43:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001ca46:	50                   	push   eax
c001ca47:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca4b:	50                   	push   eax
c001ca4c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca50:	50                   	push   eax
c001ca51:	51                   	push   ecx
c001ca52:	e8 50 fe ff ff       	call   c001c8a7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ca57:	83 c4 20             	add    esp,0x20
c001ca5a:	ba 01 00 00 00       	mov    edx,0x1
c001ca5f:	84 c0                	test   al,al
c001ca61:	74 31                	je     c001ca94 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ca63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca67:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ca6e:	89 03                	mov    DWORD PTR [ebx],eax
c001ca70:	ba 00 00 00 00       	mov    edx,0x0
c001ca75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca79:	85 c0                	test   eax,eax
c001ca7b:	0f 95 06             	setne  BYTE PTR [esi]
c001ca7e:	74 14                	je     c001ca94 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ca80:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001ca86:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ca8d:	eb 05                	jmp    c001ca94 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ca8f:	ba 04 00 00 00       	mov    edx,0x4
c001ca94:	83 c4 14             	add    esp,0x14
c001ca97:	89 d0                	mov    eax,edx
c001ca99:	5b                   	pop    ebx
c001ca9a:	5e                   	pop    esi
c001ca9b:	c3                   	ret    

c001ca9c <ISO9660::openDir(char const*, void**)>:
c001ca9c:	57                   	push   edi
c001ca9d:	56                   	push   esi
c001ca9e:	53                   	push   ebx
c001ca9f:	83 ec 10             	sub    esp,0x10
c001caa2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001caa6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001caaa:	85 ff                	test   edi,edi
c001caac:	74 7b                	je     c001cb29 <ISO9660::openDir(char const*, void**)+0x8d>
c001caae:	85 f6                	test   esi,esi
c001cab0:	74 77                	je     c001cb29 <ISO9660::openDir(char const*, void**)+0x8d>
c001cab2:	83 ec 0c             	sub    esp,0xc
c001cab5:	6a 1c                	push   0x1c
c001cab7:	e8 53 cf fe ff       	call   c0009a0f <malloc>
c001cabc:	89 07                	mov    DWORD PTR [edi],eax
c001cabe:	89 c3                	mov    ebx,eax
c001cac0:	58                   	pop    eax
c001cac1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cac5:	50                   	push   eax
c001cac6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001cac9:	50                   	push   eax
c001caca:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cace:	50                   	push   eax
c001cacf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cad3:	50                   	push   eax
c001cad4:	56                   	push   esi
c001cad5:	e8 cd fd ff ff       	call   c001c8a7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cada:	83 c4 20             	add    esp,0x20
c001cadd:	84 c0                	test   al,al
c001cadf:	74 07                	je     c001cae8 <ISO9660::openDir(char const*, void**)+0x4c>
c001cae1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cae6:	75 0b                	jne    c001caf3 <ISO9660::openDir(char const*, void**)+0x57>
c001cae8:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001caec:	b8 01 00 00 00       	mov    eax,0x1
c001caf1:	eb 3b                	jmp    c001cb2e <ISO9660::openDir(char const*, void**)+0x92>
c001caf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caf7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001cafb:	89 03                	mov    DWORD PTR [ebx],eax
c001cafd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001cb04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb08:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001cb0f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cb19:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cb20:	8a 06                	mov    al,BYTE PTR [esi]
c001cb22:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001cb25:	31 c0                	xor    eax,eax
c001cb27:	eb 05                	jmp    c001cb2e <ISO9660::openDir(char const*, void**)+0x92>
c001cb29:	b8 04 00 00 00       	mov    eax,0x4
c001cb2e:	83 c4 10             	add    esp,0x10
c001cb31:	5b                   	pop    ebx
c001cb32:	5e                   	pop    esi
c001cb33:	5f                   	pop    edi
c001cb34:	c3                   	ret    
c001cb35:	90                   	nop

c001cb36 <ISO9660::ISO9660()>:
c001cb36:	83 ec 0c             	sub    esp,0xc
c001cb39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb3d:	83 ec 0c             	sub    esp,0xc
c001cb40:	50                   	push   eax
c001cb41:	e8 d0 04 ff ff       	call   c000d016 <Filesystem::Filesystem()>
c001cb46:	83 c4 10             	add    esp,0x10
c001cb49:	ba 00 63 02 c0       	mov    edx,0xc0026300
c001cb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb52:	89 10                	mov    DWORD PTR [eax],edx
c001cb54:	90                   	nop
c001cb55:	83 c4 0c             	add    esp,0xc
c001cb58:	c3                   	ret    
c001cb59:	90                   	nop

c001cb5a <SoundCard::beginPlayback()>:
c001cb5a:	c7 44 24 04 60 63 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026360
c001cb62:	e9 88 7d ff ff       	jmp    c00148ef <Krnl::panic(char const*)>
c001cb67:	90                   	nop

c001cb68 <SoundCard::stopPlayback()>:
c001cb68:	c7 44 24 04 94 63 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026394
c001cb70:	e9 7a 7d ff ff       	jmp    c00148ef <Krnl::panic(char const*)>
c001cb75:	90                   	nop

c001cb76 <SoundCard::SoundCard(char const*)>:
c001cb76:	83 ec 1c             	sub    esp,0x1c
c001cb79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb7d:	83 ec 08             	sub    esp,0x8
c001cb80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb84:	50                   	push   eax
c001cb85:	e8 20 18 ff ff       	call   c000e3aa <Device::Device(char const*)>
c001cb8a:	83 c4 10             	add    esp,0x10
c001cb8d:	ba 2c 64 02 c0       	mov    edx,0xc002642c
c001cb92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb96:	89 10                	mov    DWORD PTR [eax],edx
c001cb98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb9c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cba3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cba7:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001cbb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbb5:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001cbbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbc3:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001cbcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbd1:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001cbdb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cbe3:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001cbe8:	7f 19                	jg     c001cc03 <SoundCard::SoundCard(char const*)+0x8d>
c001cbea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cbf2:	83 c2 54             	add    edx,0x54
c001cbf5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001cbfd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001cc01:	eb e0                	jmp    c001cbe3 <SoundCard::SoundCard(char const*)+0x6d>
c001cc03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc07:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cc0e:	90                   	nop
c001cc0f:	83 c4 1c             	add    esp,0x1c
c001cc12:	c3                   	ret    
c001cc13:	90                   	nop

c001cc14 <SoundCard::~SoundCard()>:
c001cc14:	83 ec 0c             	sub    esp,0xc
c001cc17:	ba 2c 64 02 c0       	mov    edx,0xc002642c
c001cc1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc20:	89 10                	mov    DWORD PTR [eax],edx
c001cc22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc26:	83 ec 0c             	sub    esp,0xc
c001cc29:	50                   	push   eax
c001cc2a:	e8 45 14 ff ff       	call   c000e074 <Device::~Device()>
c001cc2f:	83 c4 10             	add    esp,0x10
c001cc32:	90                   	nop
c001cc33:	83 c4 0c             	add    esp,0xc
c001cc36:	c3                   	ret    
c001cc37:	90                   	nop

c001cc38 <SoundCard::~SoundCard()>:
c001cc38:	83 ec 0c             	sub    esp,0xc
c001cc3b:	83 ec 0c             	sub    esp,0xc
c001cc3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc42:	e8 cd ff ff ff       	call   c001cc14 <SoundCard::~SoundCard()>
c001cc47:	83 c4 10             	add    esp,0x10
c001cc4a:	83 ec 08             	sub    esp,0x8
c001cc4d:	68 e8 01 00 00       	push   0x1e8
c001cc52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc56:	e8 c3 ff fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c001cc5b:	83 c4 10             	add    esp,0x10
c001cc5e:	83 c4 0c             	add    esp,0xc
c001cc61:	c3                   	ret    

c001cc62 <SoundCard::configureRates(int, int, int)>:
c001cc62:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cc66:	31 c0                	xor    eax,eax
c001cc68:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001cc6f:	75 20                	jne    c001cc91 <SoundCard::configureRates(int, int, int)+0x2f>
c001cc71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc75:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001cc7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc7f:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001cc85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc89:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001cc8f:	b0 01                	mov    al,0x1
c001cc91:	c3                   	ret    

c001cc92 <SoundCard::getSamples16(int, short*)>:
c001cc92:	55                   	push   ebp
c001cc93:	57                   	push   edi
c001cc94:	31 ff                	xor    edi,edi
c001cc96:	56                   	push   esi
c001cc97:	53                   	push   ebx
c001cc98:	31 db                	xor    ebx,ebx
c001cc9a:	83 ec 18             	sub    esp,0x18
c001cc9d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cca1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001cca5:	68 c7 63 02 c0       	push   0xc00263c7
c001ccaa:	e8 50 00 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001ccaf:	83 c4 0c             	add    esp,0xc
c001ccb2:	8d 04 36             	lea    eax,[esi+esi*1]
c001ccb5:	50                   	push   eax
c001ccb6:	6a 00                	push   0x0
c001ccb8:	55                   	push   ebp
c001ccb9:	e8 c6 39 fe ff       	call   c0000684 <memset>
c001ccbe:	83 c4 10             	add    esp,0x10
c001ccc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccc5:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001cccc:	85 c0                	test   eax,eax
c001ccce:	74 1b                	je     c001cceb <SoundCard::getSamples16(int, short*)+0x59>
c001ccd0:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ccd4:	75 15                	jne    c001cceb <SoundCard::getSamples16(int, short*)+0x59>
c001ccd6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ccda:	55                   	push   ebp
c001ccdb:	56                   	push   esi
c001ccdc:	50                   	push   eax
c001ccdd:	e8 5a 03 00 00       	call   c001d03c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001cce2:	83 c4 10             	add    esp,0x10
c001cce5:	39 c7                	cmp    edi,eax
c001cce7:	7d 02                	jge    c001cceb <SoundCard::getSamples16(int, short*)+0x59>
c001cce9:	89 c7                	mov    edi,eax
c001cceb:	43                   	inc    ebx
c001ccec:	83 fb 20             	cmp    ebx,0x20
c001ccef:	75 d0                	jne    c001ccc1 <SoundCard::getSamples16(int, short*)+0x2f>
c001ccf1:	83 c4 0c             	add    esp,0xc
c001ccf4:	89 f8                	mov    eax,edi
c001ccf6:	5b                   	pop    ebx
c001ccf7:	5e                   	pop    esi
c001ccf8:	5f                   	pop    edi
c001ccf9:	5d                   	pop    ebp
c001ccfa:	c3                   	ret    
c001ccfb:	90                   	nop

c001ccfc <SoundCard::getSamples32(int, int*)>:
c001ccfc:	55                   	push   ebp
c001ccfd:	57                   	push   edi
c001ccfe:	31 ff                	xor    edi,edi
c001cd00:	56                   	push   esi
c001cd01:	31 f6                	xor    esi,esi
c001cd03:	53                   	push   ebx
c001cd04:	83 ec 10             	sub    esp,0x10
c001cd07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cd0b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001cd0f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001cd13:	c1 e0 02             	shl    eax,0x2
c001cd16:	50                   	push   eax
c001cd17:	6a 00                	push   0x0
c001cd19:	55                   	push   ebp
c001cd1a:	e8 65 39 fe ff       	call   c0000684 <memset>
c001cd1f:	83 c4 10             	add    esp,0x10
c001cd22:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001cd29:	85 c0                	test   eax,eax
c001cd2b:	74 1b                	je     c001cd48 <SoundCard::getSamples32(int, int*)+0x4c>
c001cd2d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001cd31:	75 15                	jne    c001cd48 <SoundCard::getSamples32(int, int*)+0x4c>
c001cd33:	53                   	push   ebx
c001cd34:	55                   	push   ebp
c001cd35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd39:	50                   	push   eax
c001cd3a:	e8 f9 03 00 00       	call   c001d138 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001cd3f:	83 c4 10             	add    esp,0x10
c001cd42:	39 c6                	cmp    esi,eax
c001cd44:	7d 02                	jge    c001cd48 <SoundCard::getSamples32(int, int*)+0x4c>
c001cd46:	89 c6                	mov    esi,eax
c001cd48:	47                   	inc    edi
c001cd49:	83 ff 20             	cmp    edi,0x20
c001cd4c:	75 d4                	jne    c001cd22 <SoundCard::getSamples32(int, int*)+0x26>
c001cd4e:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001cd54:	85 f6                	test   esi,esi
c001cd56:	75 0f                	jne    c001cd67 <SoundCard::getSamples32(int, int*)+0x6b>
c001cd58:	84 c0                	test   al,al
c001cd5a:	74 1b                	je     c001cd77 <SoundCard::getSamples32(int, int*)+0x7b>
c001cd5c:	83 ec 0c             	sub    esp,0xc
c001cd5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd61:	53                   	push   ebx
c001cd62:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001cd65:	eb 0d                	jmp    c001cd74 <SoundCard::getSamples32(int, int*)+0x78>
c001cd67:	84 c0                	test   al,al
c001cd69:	75 0c                	jne    c001cd77 <SoundCard::getSamples32(int, int*)+0x7b>
c001cd6b:	83 ec 0c             	sub    esp,0xc
c001cd6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd70:	53                   	push   ebx
c001cd71:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001cd74:	83 c4 10             	add    esp,0x10
c001cd77:	83 c4 0c             	add    esp,0xc
c001cd7a:	89 f0                	mov    eax,esi
c001cd7c:	5b                   	pop    ebx
c001cd7d:	5e                   	pop    esi
c001cd7e:	5f                   	pop    edi
c001cd7f:	5d                   	pop    ebp
c001cd80:	c3                   	ret    
c001cd81:	90                   	nop

c001cd82 <SoundCard::addChannel(SoundPort*)>:
c001cd82:	56                   	push   esi
c001cd83:	53                   	push   ebx
c001cd84:	53                   	push   ebx
c001cd85:	31 db                	xor    ebx,ebx
c001cd87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cd8b:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001cd93:	74 27                	je     c001cdbc <SoundCard::addChannel(SoundPort*)+0x3a>
c001cd95:	43                   	inc    ebx
c001cd96:	83 fb 20             	cmp    ebx,0x20
c001cd99:	75 f0                	jne    c001cd8b <SoundCard::addChannel(SoundPort*)+0x9>
c001cd9b:	83 ec 0c             	sub    esp,0xc
c001cd9e:	83 cb ff             	or     ebx,0xffffffff
c001cda1:	68 ed 63 02 c0       	push   0xc00263ed
c001cda6:	e8 54 ff fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001cdab:	c7 04 24 e6 63 02 c0 	mov    DWORD PTR [esp],0xc00263e6
c001cdb2:	e8 38 7b ff ff       	call   c00148ef <Krnl::panic(char const*)>
c001cdb7:	83 c4 10             	add    esp,0x10
c001cdba:	eb 1b                	jmp    c001cdd7 <SoundCard::addChannel(SoundPort*)+0x55>
c001cdbc:	51                   	push   ecx
c001cdbd:	51                   	push   ecx
c001cdbe:	53                   	push   ebx
c001cdbf:	68 05 64 02 c0       	push   0xc0026405
c001cdc4:	e8 36 ff fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001cdc9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cdcd:	83 c4 10             	add    esp,0x10
c001cdd0:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001cdd7:	89 d8                	mov    eax,ebx
c001cdd9:	5a                   	pop    edx
c001cdda:	5b                   	pop    ebx
c001cddb:	5e                   	pop    esi
c001cddc:	c3                   	ret    
c001cddd:	90                   	nop

c001cdde <SoundCard::removeChannel(int)>:
c001cdde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cde2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cde6:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001cdf1:	c3                   	ret    
c001cdf2:	66 90                	xchg   ax,ax

c001cdf4 <SoundPort::SoundPort(int, int, int, int)>:
c001cdf4:	83 ec 0c             	sub    esp,0xc
c001cdf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdfb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ce02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce06:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ce0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce0e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce12:	89 10                	mov    DWORD PTR [eax],edx
c001ce14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce18:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ce1c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ce1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ce27:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ce2a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001ce2f:	75 13                	jne    c001ce44 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001ce31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce35:	8b 00                	mov    eax,DWORD PTR [eax]
c001ce37:	05 a0 0f 00 00       	add    eax,0xfa0
c001ce3c:	01 c0                	add    eax,eax
c001ce3e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ce42:	66 90                	xchg   ax,ax
c001ce44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce48:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ce4c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ce4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce53:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001ce5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce5e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ce61:	c1 e0 02             	shl    eax,0x2
c001ce64:	83 ec 0c             	sub    esp,0xc
c001ce67:	50                   	push   eax
c001ce68:	e8 a2 cb fe ff       	call   c0009a0f <malloc>
c001ce6d:	83 c4 10             	add    esp,0x10
c001ce70:	89 c2                	mov    edx,eax
c001ce72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce76:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ce79:	90                   	nop
c001ce7a:	83 c4 0c             	add    esp,0xc
c001ce7d:	c3                   	ret    
c001ce7e:	66 90                	xchg   ax,ax

c001ce80 <SoundPort::~SoundPort()>:
c001ce80:	83 ec 0c             	sub    esp,0xc
c001ce83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce87:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ce8a:	85 c0                	test   eax,eax
c001ce8c:	74 1e                	je     c001ceac <SoundPort::~SoundPort()+0x2c>
c001ce8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce92:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ce95:	83 ec 0c             	sub    esp,0xc
c001ce98:	50                   	push   eax
c001ce99:	e8 81 cb fe ff       	call   c0009a1f <free>
c001ce9e:	83 c4 10             	add    esp,0x10
c001cea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cea5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ceac:	90                   	nop
c001cead:	83 c4 0c             	add    esp,0xc
c001ceb0:	c3                   	ret    
c001ceb1:	90                   	nop
c001ceb2:	66 90                	xchg   ax,ax

c001ceb4 <SoundPort::unpause()>:
c001ceb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ceb8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001cebc:	c3                   	ret    
c001cebd:	90                   	nop
c001cebe:	66 90                	xchg   ax,ax

c001cec0 <SoundPort::pause()>:
c001cec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cec4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001cec8:	c3                   	ret    
c001cec9:	90                   	nop
c001ceca:	66 90                	xchg   ax,ax

c001cecc <SoundPort::getBufferUsed()>:
c001cecc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ced0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ced3:	c3                   	ret    

c001ced4 <SoundPort::getBufferSize()>:
c001ced4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ced8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cedb:	c3                   	ret    

c001cedc <SoundPort::buffer16(short*, int)>:
c001cedc:	55                   	push   ebp
c001cedd:	57                   	push   edi
c001cede:	56                   	push   esi
c001cedf:	53                   	push   ebx
c001cee0:	83 ec 1c             	sub    esp,0x1c
c001cee3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cee7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ceeb:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001ceee:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001cef1:	0f 84 85 00 00 00    	je     c001cf7c <SoundPort::buffer16(short*, int)+0xa0>
c001cef7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001cefb:	85 c9                	test   ecx,ecx
c001cefd:	7e 7d                	jle    c001cf7c <SoundPort::buffer16(short*, int)+0xa0>
c001ceff:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001cf03:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001cf06:	c1 e1 0f             	shl    ecx,0xf
c001cf09:	8d 70 01             	lea    esi,[eax+0x1]
c001cf0c:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001cf0f:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001cf12:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cf15:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cf18:	74 6e                	je     c001cf88 <SoundPort::buffer16(short*, int)+0xac>
c001cf1a:	31 f6                	xor    esi,esi
c001cf1c:	eb 22                	jmp    c001cf40 <SoundPort::buffer16(short*, int)+0x64>
c001cf1e:	66 90                	xchg   ax,ax
c001cf20:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001cf25:	8d 79 01             	lea    edi,[ecx+0x1]
c001cf28:	c1 e3 0f             	shl    ebx,0xf
c001cf2b:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001cf2e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001cf31:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001cf34:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cf37:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cf3a:	74 1c                	je     c001cf58 <SoundPort::buffer16(short*, int)+0x7c>
c001cf3c:	89 c6                	mov    esi,eax
c001cf3e:	66 90                	xchg   ax,ax
c001cf40:	8d 46 01             	lea    eax,[esi+0x1]
c001cf43:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001cf47:	75 d7                	jne    c001cf20 <SoundPort::buffer16(short*, int)+0x44>
c001cf49:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cf4d:	83 c4 1c             	add    esp,0x1c
c001cf50:	5b                   	pop    ebx
c001cf51:	5e                   	pop    esi
c001cf52:	5f                   	pop    edi
c001cf53:	5d                   	pop    ebp
c001cf54:	c3                   	ret    
c001cf55:	8d 76 00             	lea    esi,[esi+0x0]
c001cf58:	8d 46 02             	lea    eax,[esi+0x2]
c001cf5b:	90                   	nop
c001cf5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cf60:	83 ec 0c             	sub    esp,0xc
c001cf63:	68 58 64 02 c0       	push   0xc0026458
c001cf68:	e8 92 fd fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001cf6d:	83 c4 10             	add    esp,0x10
c001cf70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cf74:	83 c4 1c             	add    esp,0x1c
c001cf77:	5b                   	pop    ebx
c001cf78:	5e                   	pop    esi
c001cf79:	5f                   	pop    edi
c001cf7a:	5d                   	pop    ebp
c001cf7b:	c3                   	ret    
c001cf7c:	83 c4 1c             	add    esp,0x1c
c001cf7f:	31 c0                	xor    eax,eax
c001cf81:	5b                   	pop    ebx
c001cf82:	5e                   	pop    esi
c001cf83:	5f                   	pop    edi
c001cf84:	5d                   	pop    ebp
c001cf85:	c3                   	ret    
c001cf86:	66 90                	xchg   ax,ax
c001cf88:	b8 01 00 00 00       	mov    eax,0x1
c001cf8d:	eb cd                	jmp    c001cf5c <SoundPort::buffer16(short*, int)+0x80>
c001cf8f:	90                   	nop

c001cf90 <SoundPort::buffer32(int*, int)>:
c001cf90:	55                   	push   ebp
c001cf91:	57                   	push   edi
c001cf92:	56                   	push   esi
c001cf93:	53                   	push   ebx
c001cf94:	83 ec 1c             	sub    esp,0x1c
c001cf97:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cf9b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cf9f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cfa2:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cfa6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cfaa:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cfad:	74 79                	je     c001d028 <SoundPort::buffer32(int*, int)+0x98>
c001cfaf:	85 c0                	test   eax,eax
c001cfb1:	7e 75                	jle    c001d028 <SoundPort::buffer32(int*, int)+0x98>
c001cfb3:	8d 71 01             	lea    esi,[ecx+0x1]
c001cfb6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001cfb9:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001cfbc:	8b 37                	mov    esi,DWORD PTR [edi]
c001cfbe:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001cfc1:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cfc4:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cfc7:	74 6b                	je     c001d034 <SoundPort::buffer32(int*, int)+0xa4>
c001cfc9:	31 f6                	xor    esi,esi
c001cfcb:	eb 1f                	jmp    c001cfec <SoundPort::buffer32(int*, int)+0x5c>
c001cfcd:	8d 76 00             	lea    esi,[esi+0x0]
c001cfd0:	8d 69 01             	lea    ebp,[ecx+0x1]
c001cfd3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001cfd6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001cfd9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001cfdc:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001cfe0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cfe3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cfe6:	74 1c                	je     c001d004 <SoundPort::buffer32(int*, int)+0x74>
c001cfe8:	89 de                	mov    esi,ebx
c001cfea:	66 90                	xchg   ax,ax
c001cfec:	8d 5e 01             	lea    ebx,[esi+0x1]
c001cfef:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001cff3:	75 db                	jne    c001cfd0 <SoundPort::buffer32(int*, int)+0x40>
c001cff5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cff9:	83 c4 1c             	add    esp,0x1c
c001cffc:	5b                   	pop    ebx
c001cffd:	5e                   	pop    esi
c001cffe:	5f                   	pop    edi
c001cfff:	5d                   	pop    ebp
c001d000:	c3                   	ret    
c001d001:	8d 76 00             	lea    esi,[esi+0x0]
c001d004:	8d 46 02             	lea    eax,[esi+0x2]
c001d007:	90                   	nop
c001d008:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d00c:	83 ec 0c             	sub    esp,0xc
c001d00f:	68 73 64 02 c0       	push   0xc0026473
c001d014:	e8 e6 fc fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001d019:	83 c4 10             	add    esp,0x10
c001d01c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d020:	83 c4 1c             	add    esp,0x1c
c001d023:	5b                   	pop    ebx
c001d024:	5e                   	pop    esi
c001d025:	5f                   	pop    edi
c001d026:	5d                   	pop    ebp
c001d027:	c3                   	ret    
c001d028:	83 c4 1c             	add    esp,0x1c
c001d02b:	31 c0                	xor    eax,eax
c001d02d:	5b                   	pop    ebx
c001d02e:	5e                   	pop    esi
c001d02f:	5f                   	pop    edi
c001d030:	5d                   	pop    ebp
c001d031:	c3                   	ret    
c001d032:	66 90                	xchg   ax,ax
c001d034:	b8 01 00 00 00       	mov    eax,0x1
c001d039:	eb cd                	jmp    c001d008 <SoundPort::buffer32(int*, int)+0x78>
c001d03b:	90                   	nop

c001d03c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d03c:	57                   	push   edi
c001d03d:	56                   	push   esi
c001d03e:	53                   	push   ebx
c001d03f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d043:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d047:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d04d:	39 03                	cmp    DWORD PTR [ebx],eax
c001d04f:	74 13                	je     c001d064 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d051:	83 ec 0c             	sub    esp,0xc
c001d054:	68 c8 64 02 c0       	push   0xc00264c8
c001d059:	e8 91 78 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c001d05e:	83 c4 10             	add    esp,0x10
c001d061:	8d 76 00             	lea    esi,[esi+0x0]
c001d064:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d06a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d06d:	74 11                	je     c001d080 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d06f:	83 ec 0c             	sub    esp,0xc
c001d072:	68 8e 64 02 c0       	push   0xc002648e
c001d077:	e8 73 78 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c001d07c:	83 c4 10             	add    esp,0x10
c001d07f:	90                   	nop
c001d080:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d086:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d089:	74 11                	je     c001d09c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d08b:	83 ec 0c             	sub    esp,0xc
c001d08e:	68 8e 64 02 c0       	push   0xc002648e
c001d093:	e8 57 78 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c001d098:	83 c4 10             	add    esp,0x10
c001d09b:	90                   	nop
c001d09c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d09f:	89 c6                	mov    esi,eax
c001d0a1:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001d0a5:	7e 05                	jle    c001d0ac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d0a7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d0ab:	90                   	nop
c001d0ac:	85 f6                	test   esi,esi
c001d0ae:	7e 30                	jle    c001d0e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001d0b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d0b4:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d0b7:	31 c9                	xor    ecx,ecx
c001d0b9:	01 d7                	add    edi,edx
c001d0bb:	90                   	nop
c001d0bc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d0bf:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d0c2:	85 c0                	test   eax,eax
c001d0c4:	79 06                	jns    c001d0cc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001d0c6:	05 ff 7f 00 00       	add    eax,0x7fff
c001d0cb:	90                   	nop
c001d0cc:	c1 f8 0f             	sar    eax,0xf
c001d0cf:	83 c1 04             	add    ecx,0x4
c001d0d2:	66 01 02             	add    WORD PTR [edx],ax
c001d0d5:	83 c2 02             	add    edx,0x2
c001d0d8:	39 d7                	cmp    edi,edx
c001d0da:	75 e0                	jne    c001d0bc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001d0dc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d0df:	90                   	nop
c001d0e0:	56                   	push   esi
c001d0e1:	89 c2                	mov    edx,eax
c001d0e3:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001d0ea:	29 f2                	sub    edx,esi
c001d0ec:	52                   	push   edx
c001d0ed:	50                   	push   eax
c001d0ee:	68 e8 64 02 c0       	push   0xc00264e8
c001d0f3:	e8 07 fc fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001d0f8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d0fb:	50                   	push   eax
c001d0fc:	01 f8                	add    eax,edi
c001d0fe:	50                   	push   eax
c001d0ff:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d102:	29 f0                	sub    eax,esi
c001d104:	c1 e0 02             	shl    eax,0x2
c001d107:	50                   	push   eax
c001d108:	68 18 65 02 c0       	push   0xc0026518
c001d10d:	e8 ed fb fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001d112:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d115:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d118:	83 c4 1c             	add    esp,0x1c
c001d11b:	01 d7                	add    edi,edx
c001d11d:	29 f0                	sub    eax,esi
c001d11f:	c1 e0 02             	shl    eax,0x2
c001d122:	50                   	push   eax
c001d123:	57                   	push   edi
c001d124:	52                   	push   edx
c001d125:	e8 92 34 fe ff       	call   c00005bc <memmove>
c001d12a:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001d12d:	83 c4 10             	add    esp,0x10
c001d130:	89 f0                	mov    eax,esi
c001d132:	5b                   	pop    ebx
c001d133:	5e                   	pop    esi
c001d134:	5f                   	pop    edi
c001d135:	c3                   	ret    
c001d136:	66 90                	xchg   ax,ax

c001d138 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d138:	57                   	push   edi
c001d139:	56                   	push   esi
c001d13a:	53                   	push   ebx
c001d13b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d13f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d143:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d147:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001d14d:	39 06                	cmp    DWORD PTR [esi],eax
c001d14f:	74 13                	je     c001d164 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001d151:	83 ec 0c             	sub    esp,0xc
c001d154:	68 3c 65 02 c0       	push   0xc002653c
c001d159:	e8 91 77 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c001d15e:	83 c4 10             	add    esp,0x10
c001d161:	8d 76 00             	lea    esi,[esi+0x0]
c001d164:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001d16a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001d16d:	74 11                	je     c001d180 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001d16f:	83 ec 0c             	sub    esp,0xc
c001d172:	68 aa 64 02 c0       	push   0xc00264aa
c001d177:	e8 73 77 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c001d17c:	83 c4 10             	add    esp,0x10
c001d17f:	90                   	nop
c001d180:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001d186:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001d189:	74 11                	je     c001d19c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001d18b:	83 ec 0c             	sub    esp,0xc
c001d18e:	68 aa 64 02 c0       	push   0xc00264aa
c001d193:	e8 57 77 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c001d198:	83 c4 10             	add    esp,0x10
c001d19b:	90                   	nop
c001d19c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001d19f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001d1a3:	7e 07                	jle    c001d1ac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001d1a5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d1a9:	8d 76 00             	lea    esi,[esi+0x0]
c001d1ac:	85 ff                	test   edi,edi
c001d1ae:	7e 1c                	jle    c001d1cc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001d1b0:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d1b7:	31 c0                	xor    eax,eax
c001d1b9:	8d 76 00             	lea    esi,[esi+0x0]
c001d1bc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d1bf:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d1c2:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001d1c5:	83 c0 04             	add    eax,0x4
c001d1c8:	39 c1                	cmp    ecx,eax
c001d1ca:	75 f0                	jne    c001d1bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001d1cc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d1cf:	50                   	push   eax
c001d1d0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d1d3:	29 f8                	sub    eax,edi
c001d1d5:	c1 e0 02             	shl    eax,0x2
c001d1d8:	50                   	push   eax
c001d1d9:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d1dc:	50                   	push   eax
c001d1dd:	52                   	push   edx
c001d1de:	e8 d9 33 fe ff       	call   c00005bc <memmove>
c001d1e3:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001d1e6:	83 c4 10             	add    esp,0x10
c001d1e9:	89 f8                	mov    eax,edi
c001d1eb:	5b                   	pop    ebx
c001d1ec:	5e                   	pop    esi
c001d1ed:	5f                   	pop    edi
c001d1ee:	c3                   	ret    
c001d1ef:	90                   	nop

c001d1f0 <PCI::open(int, int, void*)>:
c001d1f0:	83 ec 18             	sub    esp,0x18
c001d1f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d1f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d1fb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d201:	8b 10                	mov    edx,DWORD PTR [eax]
c001d203:	50                   	push   eax
c001d204:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d207:	31 c0                	xor    eax,eax
c001d209:	83 c4 1c             	add    esp,0x1c
c001d20c:	c3                   	ret    
c001d20d:	90                   	nop

c001d20e <PCI::close(int, int, void*)>:
c001d20e:	31 c0                	xor    eax,eax
c001d210:	c3                   	ret    
c001d211:	90                   	nop

c001d212 <PCI::PCI()>:
c001d212:	83 ec 0c             	sub    esp,0xc
c001d215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d219:	83 ec 08             	sub    esp,0x8
c001d21c:	68 5b 65 02 c0       	push   0xc002655b
c001d221:	50                   	push   eax
c001d222:	e8 e5 07 ff ff       	call   c000da0c <Bus::Bus(char const*)>
c001d227:	83 c4 10             	add    esp,0x10
c001d22a:	ba 30 67 02 c0       	mov    edx,0xc0026730
c001d22f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d233:	89 10                	mov    DWORD PTR [eax],edx
c001d235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d239:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d247:	a3 20 9e 02 c0       	mov    ds:0xc0029e20,eax
c001d24c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d250:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d256:	0f b6 d0             	movzx  edx,al
c001d259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d25d:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d268:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d26e:	0f b6 d0             	movzx  edx,al
c001d271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d275:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d27e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d284:	8d 50 01             	lea    edx,[eax+0x1]
c001d287:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d28b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d291:	0f b6 d0             	movzx  edx,al
c001d294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d298:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d29c:	83 c9 c0             	or     ecx,0xffffffc0
c001d29f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d2a3:	90                   	nop
c001d2a4:	83 c4 0c             	add    esp,0xc
c001d2a7:	c3                   	ret    

c001d2a8 <PCI::readBAR8(unsigned int, int)>:
c001d2a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d2ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2b0:	f6 c2 01             	test   dl,0x1
c001d2b3:	74 07                	je     c001d2bc <PCI::readBAR8(unsigned int, int)+0x14>
c001d2b5:	83 e2 fc             	and    edx,0xfffffffc
c001d2b8:	01 c2                	add    edx,eax
c001d2ba:	ec                   	in     al,dx
c001d2bb:	c3                   	ret    
c001d2bc:	83 e2 f0             	and    edx,0xfffffff0
c001d2bf:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d2c2:	c3                   	ret    
c001d2c3:	90                   	nop

c001d2c4 <PCI::readBAR16(unsigned int, int)>:
c001d2c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d2c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2cc:	f6 c2 01             	test   dl,0x1
c001d2cf:	74 08                	je     c001d2d9 <PCI::readBAR16(unsigned int, int)+0x15>
c001d2d1:	83 e2 fc             	and    edx,0xfffffffc
c001d2d4:	01 c2                	add    edx,eax
c001d2d6:	66 ed                	in     ax,dx
c001d2d8:	c3                   	ret    
c001d2d9:	83 e2 f0             	and    edx,0xfffffff0
c001d2dc:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d2e0:	c3                   	ret    
c001d2e1:	90                   	nop

c001d2e2 <PCI::readBAR32(unsigned int, int)>:
c001d2e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d2e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2ea:	f6 c2 01             	test   dl,0x1
c001d2ed:	74 07                	je     c001d2f6 <PCI::readBAR32(unsigned int, int)+0x14>
c001d2ef:	83 e2 fc             	and    edx,0xfffffffc
c001d2f2:	01 c2                	add    edx,eax
c001d2f4:	ed                   	in     eax,dx
c001d2f5:	c3                   	ret    
c001d2f6:	83 e2 f0             	and    edx,0xfffffff0
c001d2f9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d2fc:	c3                   	ret    
c001d2fd:	90                   	nop

c001d2fe <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d2fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d302:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d306:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d30a:	f6 c2 01             	test   dl,0x1
c001d30d:	74 07                	je     c001d316 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d30f:	83 e2 fc             	and    edx,0xfffffffc
c001d312:	01 ca                	add    edx,ecx
c001d314:	ee                   	out    dx,al
c001d315:	c3                   	ret    
c001d316:	83 e2 f0             	and    edx,0xfffffff0
c001d319:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d31c:	c3                   	ret    
c001d31d:	90                   	nop

c001d31e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d31e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d322:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d326:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d32a:	f6 c2 01             	test   dl,0x1
c001d32d:	74 08                	je     c001d337 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d32f:	83 e2 fc             	and    edx,0xfffffffc
c001d332:	01 ca                	add    edx,ecx
c001d334:	66 ef                	out    dx,ax
c001d336:	c3                   	ret    
c001d337:	83 e2 f0             	and    edx,0xfffffff0
c001d33a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d33e:	c3                   	ret    
c001d33f:	90                   	nop

c001d340 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d340:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d344:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d348:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d34c:	f6 c2 01             	test   dl,0x1
c001d34f:	74 07                	je     c001d358 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d351:	83 e2 fc             	and    edx,0xfffffffc
c001d354:	01 ca                	add    edx,ecx
c001d356:	ef                   	out    dx,eax
c001d357:	c3                   	ret    
c001d358:	83 e2 f0             	and    edx,0xfffffff0
c001d35b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d35e:	c3                   	ret    
c001d35f:	90                   	nop

c001d360 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d360:	55                   	push   ebp
c001d361:	57                   	push   edi
c001d362:	56                   	push   esi
c001d363:	53                   	push   ebx
c001d364:	83 ec 0c             	sub    esp,0xc
c001d367:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d36b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d36f:	89 f0                	mov    eax,esi
c001d371:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d375:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d379:	3c 07                	cmp    al,0x7
c001d37b:	76 10                	jbe    c001d38d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d37d:	83 ec 0c             	sub    esp,0xc
c001d380:	68 63 65 02 c0       	push   0xc0026563
c001d385:	e8 65 75 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c001d38a:	83 c4 10             	add    esp,0x10
c001d38d:	80 fb 0f             	cmp    bl,0xf
c001d390:	76 10                	jbe    c001d3a2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001d392:	83 ec 0c             	sub    esp,0xc
c001d395:	68 93 65 02 c0       	push   0xc0026593
c001d39a:	e8 50 75 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c001d39f:	83 c4 10             	add    esp,0x10
c001d3a2:	8d 04 36             	lea    eax,[esi+esi*1]
c001d3a5:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d3aa:	83 c8 f0             	or     eax,0xfffffff0
c001d3ad:	ee                   	out    dx,al
c001d3ae:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d3b3:	89 e8                	mov    eax,ebp
c001d3b5:	ee                   	out    dx,al
c001d3b6:	83 c4 0c             	add    esp,0xc
c001d3b9:	89 d8                	mov    eax,ebx
c001d3bb:	66 81 e7 fc 00       	and    di,0xfc
c001d3c0:	5b                   	pop    ebx
c001d3c1:	c1 e0 08             	shl    eax,0x8
c001d3c4:	5e                   	pop    esi
c001d3c5:	09 f8                	or     eax,edi
c001d3c7:	5f                   	pop    edi
c001d3c8:	66 0d 00 c0          	or     ax,0xc000
c001d3cc:	5d                   	pop    ebp
c001d3cd:	c3                   	ret    

c001d3ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d3ce:	57                   	push   edi
c001d3cf:	56                   	push   esi
c001d3d0:	53                   	push   ebx
c001d3d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d3d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d3d9:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d3df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d3e3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d3e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d3eb:	83 ff 01             	cmp    edi,0x1
c001d3ee:	75 3e                	jne    c001d42e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001d3f0:	89 de                	mov    esi,ebx
c001d3f2:	0f b6 c0             	movzx  eax,al
c001d3f5:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d3fb:	c1 e0 10             	shl    eax,0x10
c001d3fe:	0f b6 c9             	movzx  ecx,cl
c001d401:	09 f0                	or     eax,esi
c001d403:	c1 e1 08             	shl    ecx,0x8
c001d406:	0f b6 d2             	movzx  edx,dl
c001d409:	09 c8                	or     eax,ecx
c001d40b:	c1 e2 0b             	shl    edx,0xb
c001d40e:	09 d0                	or     eax,edx
c001d410:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d415:	0d 00 00 00 80       	or     eax,0x80000000
c001d41a:	ef                   	out    dx,eax
c001d41b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d420:	ed                   	in     eax,dx
c001d421:	83 e3 02             	and    ebx,0x2
c001d424:	0f b6 cb             	movzx  ecx,bl
c001d427:	c1 e1 03             	shl    ecx,0x3
c001d42a:	d3 e8                	shr    eax,cl
c001d42c:	eb 43                	jmp    c001d471 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d42e:	83 ff 02             	cmp    edi,0x2
c001d431:	75 2c                	jne    c001d45f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001d433:	83 ec 0c             	sub    esp,0xc
c001d436:	0f b6 c9             	movzx  ecx,cl
c001d439:	0f b6 d2             	movzx  edx,dl
c001d43c:	0f b6 fb             	movzx  edi,bl
c001d43f:	0f b6 c0             	movzx  eax,al
c001d442:	57                   	push   edi
c001d443:	51                   	push   ecx
c001d444:	52                   	push   edx
c001d445:	50                   	push   eax
c001d446:	56                   	push   esi
c001d447:	e8 14 ff ff ff       	call   c001d360 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d44c:	89 c2                	mov    edx,eax
c001d44e:	ed                   	in     eax,dx
c001d44f:	83 e3 02             	and    ebx,0x2
c001d452:	83 c4 20             	add    esp,0x20
c001d455:	0f b6 cb             	movzx  ecx,bl
c001d458:	c1 e1 03             	shl    ecx,0x3
c001d45b:	d3 e8                	shr    eax,cl
c001d45d:	eb 12                	jmp    c001d471 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d45f:	83 ec 0c             	sub    esp,0xc
c001d462:	68 c3 65 02 c0       	push   0xc00265c3
c001d467:	e8 83 74 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c001d46c:	83 c4 10             	add    esp,0x10
c001d46f:	31 c0                	xor    eax,eax
c001d471:	5b                   	pop    ebx
c001d472:	5e                   	pop    esi
c001d473:	5f                   	pop    edi
c001d474:	c3                   	ret    
c001d475:	90                   	nop

c001d476 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d476:	83 ec 18             	sub    esp,0x18
c001d479:	6a 00                	push   0x0
c001d47b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d480:	50                   	push   eax
c001d481:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d486:	50                   	push   eax
c001d487:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d48c:	50                   	push   eax
c001d48d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d491:	e8 38 ff ff ff       	call   c001d3ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d496:	83 c4 2c             	add    esp,0x2c
c001d499:	c3                   	ret    

c001d49a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d49a:	83 ec 18             	sub    esp,0x18
c001d49d:	6a 0e                	push   0xe
c001d49f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d4a4:	50                   	push   eax
c001d4a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d4aa:	50                   	push   eax
c001d4ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d4b0:	50                   	push   eax
c001d4b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4b5:	e8 14 ff ff ff       	call   c001d3ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d4ba:	83 c4 2c             	add    esp,0x2c
c001d4bd:	0f b6 c0             	movzx  eax,al
c001d4c0:	c3                   	ret    
c001d4c1:	90                   	nop

c001d4c2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d4c2:	55                   	push   ebp
c001d4c3:	57                   	push   edi
c001d4c4:	56                   	push   esi
c001d4c5:	53                   	push   ebx
c001d4c6:	83 ec 18             	sub    esp,0x18
c001d4c9:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d4ce:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d4d3:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d4d8:	6a 0a                	push   0xa
c001d4da:	56                   	push   esi
c001d4db:	55                   	push   ebp
c001d4dc:	57                   	push   edi
c001d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d4e1:	e8 e8 fe ff ff       	call   c001d3ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d4e6:	83 c4 14             	add    esp,0x14
c001d4e9:	89 c3                	mov    ebx,eax
c001d4eb:	6a 0a                	push   0xa
c001d4ed:	0f b6 db             	movzx  ebx,bl
c001d4f0:	56                   	push   esi
c001d4f1:	55                   	push   ebp
c001d4f2:	57                   	push   edi
c001d4f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d4f7:	e8 d2 fe ff ff       	call   c001d3ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d4fc:	83 c4 2c             	add    esp,0x2c
c001d4ff:	25 00 ff 00 00       	and    eax,0xff00
c001d504:	09 d8                	or     eax,ebx
c001d506:	5b                   	pop    ebx
c001d507:	5e                   	pop    esi
c001d508:	5f                   	pop    edi
c001d509:	5d                   	pop    ebp
c001d50a:	c3                   	ret    
c001d50b:	90                   	nop

c001d50c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d50c:	83 ec 18             	sub    esp,0x18
c001d50f:	6a 08                	push   0x8
c001d511:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d516:	50                   	push   eax
c001d517:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d51c:	50                   	push   eax
c001d51d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d522:	50                   	push   eax
c001d523:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d527:	e8 a2 fe ff ff       	call   c001d3ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d52c:	83 c4 2c             	add    esp,0x2c
c001d52f:	0f b6 c4             	movzx  eax,ah
c001d532:	c3                   	ret    
c001d533:	90                   	nop

c001d534 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d534:	83 ec 18             	sub    esp,0x18
c001d537:	6a 08                	push   0x8
c001d539:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d53e:	50                   	push   eax
c001d53f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d544:	50                   	push   eax
c001d545:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d54a:	50                   	push   eax
c001d54b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d54f:	e8 7a fe ff ff       	call   c001d3ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d554:	83 c4 2c             	add    esp,0x2c
c001d557:	c3                   	ret    

c001d558 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d558:	83 ec 18             	sub    esp,0x18
c001d55b:	6a 3c                	push   0x3c
c001d55d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d562:	50                   	push   eax
c001d563:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d568:	50                   	push   eax
c001d569:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d56e:	50                   	push   eax
c001d56f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d573:	e8 56 fe ff ff       	call   c001d3ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d578:	83 c4 2c             	add    esp,0x2c
c001d57b:	c3                   	ret    

c001d57c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d57c:	83 ec 18             	sub    esp,0x18
c001d57f:	6a 18                	push   0x18
c001d581:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d586:	50                   	push   eax
c001d587:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d58c:	50                   	push   eax
c001d58d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d592:	50                   	push   eax
c001d593:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d597:	e8 32 fe ff ff       	call   c001d3ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d59c:	83 c4 2c             	add    esp,0x2c
c001d59f:	0f b6 c4             	movzx  eax,ah
c001d5a2:	c3                   	ret    
c001d5a3:	90                   	nop

c001d5a4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d5a4:	55                   	push   ebp
c001d5a5:	57                   	push   edi
c001d5a6:	56                   	push   esi
c001d5a7:	53                   	push   ebx
c001d5a8:	83 ec 28             	sub    esp,0x28
c001d5ab:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d5af:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d5b4:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d5b9:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d5be:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d5c5:	8d 43 12             	lea    eax,[ebx+0x12]
c001d5c8:	83 c3 10             	add    ebx,0x10
c001d5cb:	0f b6 c0             	movzx  eax,al
c001d5ce:	0f b6 db             	movzx  ebx,bl
c001d5d1:	50                   	push   eax
c001d5d2:	51                   	push   ecx
c001d5d3:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001d5d7:	57                   	push   edi
c001d5d8:	55                   	push   ebp
c001d5d9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d5dd:	e8 ec fd ff ff       	call   c001d3ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d5e2:	83 c4 14             	add    esp,0x14
c001d5e5:	89 c6                	mov    esi,eax
c001d5e7:	53                   	push   ebx
c001d5e8:	c1 e6 10             	shl    esi,0x10
c001d5eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d5ef:	51                   	push   ecx
c001d5f0:	57                   	push   edi
c001d5f1:	55                   	push   ebp
c001d5f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d5f6:	e8 d3 fd ff ff       	call   c001d3ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d5fb:	83 c4 3c             	add    esp,0x3c
c001d5fe:	0f b7 c0             	movzx  eax,ax
c001d601:	5b                   	pop    ebx
c001d602:	09 f0                	or     eax,esi
c001d604:	5e                   	pop    esi
c001d605:	5f                   	pop    edi
c001d606:	5d                   	pop    ebp
c001d607:	c3                   	ret    

c001d608 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d608:	55                   	push   ebp
c001d609:	57                   	push   edi
c001d60a:	56                   	push   esi
c001d60b:	53                   	push   ebx
c001d60c:	83 ec 0c             	sub    esp,0xc
c001d60f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d613:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d617:	89 f5                	mov    ebp,esi
c001d619:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001d61f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d623:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d627:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d62b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d62f:	83 f9 01             	cmp    ecx,0x1
c001d632:	75 5d                	jne    c001d691 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001d634:	0f b6 c8             	movzx  ecx,al
c001d637:	0f b6 d2             	movzx  edx,dl
c001d63a:	c1 e1 10             	shl    ecx,0x10
c001d63d:	c1 e2 0b             	shl    edx,0xb
c001d640:	89 f0                	mov    eax,esi
c001d642:	25 fc 00 00 00       	and    eax,0xfc
c001d647:	09 c1                	or     ecx,eax
c001d649:	89 e8                	mov    eax,ebp
c001d64b:	0f b6 c0             	movzx  eax,al
c001d64e:	c1 e0 08             	shl    eax,0x8
c001d651:	09 c1                	or     ecx,eax
c001d653:	09 d1                	or     ecx,edx
c001d655:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d65a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001d660:	89 c8                	mov    eax,ecx
c001d662:	ef                   	out    dx,eax
c001d663:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d668:	ed                   	in     eax,dx
c001d669:	0f b7 db             	movzx  ebx,bx
c001d66c:	83 e6 02             	and    esi,0x2
c001d66f:	74 0a                	je     c001d67b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001d671:	0f b7 d0             	movzx  edx,ax
c001d674:	c1 e3 10             	shl    ebx,0x10
c001d677:	09 d3                	or     ebx,edx
c001d679:	eb 05                	jmp    c001d680 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001d67b:	66 31 c0             	xor    ax,ax
c001d67e:	09 c3                	or     ebx,eax
c001d680:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d685:	89 c8                	mov    eax,ecx
c001d687:	ef                   	out    dx,eax
c001d688:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d68d:	89 d8                	mov    eax,ebx
c001d68f:	eb 41                	jmp    c001d6d2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d691:	83 f9 02             	cmp    ecx,0x2
c001d694:	75 45                	jne    c001d6db <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001d696:	83 ec 0c             	sub    esp,0xc
c001d699:	0f b6 d2             	movzx  edx,dl
c001d69c:	89 f1                	mov    ecx,esi
c001d69e:	0f b6 c0             	movzx  eax,al
c001d6a1:	0f b6 f1             	movzx  esi,cl
c001d6a4:	89 e9                	mov    ecx,ebp
c001d6a6:	56                   	push   esi
c001d6a7:	0f b6 c9             	movzx  ecx,cl
c001d6aa:	51                   	push   ecx
c001d6ab:	52                   	push   edx
c001d6ac:	50                   	push   eax
c001d6ad:	57                   	push   edi
c001d6ae:	e8 ad fc ff ff       	call   c001d360 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6b3:	89 c2                	mov    edx,eax
c001d6b5:	ed                   	in     eax,dx
c001d6b6:	83 c4 20             	add    esp,0x20
c001d6b9:	0f b7 db             	movzx  ebx,bx
c001d6bc:	f6 c2 02             	test   dl,0x2
c001d6bf:	74 0c                	je     c001d6cd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001d6c1:	0f b7 c8             	movzx  ecx,ax
c001d6c4:	89 d8                	mov    eax,ebx
c001d6c6:	c1 e0 10             	shl    eax,0x10
c001d6c9:	09 c8                	or     eax,ecx
c001d6cb:	eb 05                	jmp    c001d6d2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d6cd:	66 31 c0             	xor    ax,ax
c001d6d0:	09 d8                	or     eax,ebx
c001d6d2:	ef                   	out    dx,eax
c001d6d3:	83 c4 0c             	add    esp,0xc
c001d6d6:	5b                   	pop    ebx
c001d6d7:	5e                   	pop    esi
c001d6d8:	5f                   	pop    edi
c001d6d9:	5d                   	pop    ebp
c001d6da:	c3                   	ret    
c001d6db:	c7 44 24 20 c3 65 02 c0 	mov    DWORD PTR [esp+0x20],0xc00265c3
c001d6e3:	83 c4 0c             	add    esp,0xc
c001d6e6:	5b                   	pop    ebx
c001d6e7:	5e                   	pop    esi
c001d6e8:	5f                   	pop    edi
c001d6e9:	5d                   	pop    ebp
c001d6ea:	e9 00 72 ff ff       	jmp    c00148ef <Krnl::panic(char const*)>
c001d6ef:	90                   	nop

c001d6f0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001d6f0:	55                   	push   ebp
c001d6f1:	57                   	push   edi
c001d6f2:	56                   	push   esi
c001d6f3:	53                   	push   ebx
c001d6f4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001d6fa:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001d701:	75 0f                	jne    c001d712 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001d703:	80 3d 2c 9e 02 c0 00 	cmp    BYTE PTR ds:0xc0029e2c,0x0
c001d70a:	0f 85 fa 00 00 00    	jne    c001d80a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d710:	eb 2f                	jmp    c001d741 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001d712:	83 ec 0c             	sub    esp,0xc
c001d715:	68 c9 65 02 c0       	push   0xc00265c9
c001d71a:	e8 4a c3 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d71f:	83 c4 10             	add    esp,0x10
c001d722:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001d729:	75 d8                	jne    c001d703 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d72b:	e4 60                	in     al,0x60
c001d72d:	3c 1c                	cmp    al,0x1c
c001d72f:	74 04                	je     c001d735 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d731:	3c 5a                	cmp    al,0x5a
c001d733:	75 f6                	jne    c001d72b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001d735:	e4 60                	in     al,0x60
c001d737:	3c 5a                	cmp    al,0x5a
c001d739:	74 fa                	je     c001d735 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d73b:	3c 1c                	cmp    al,0x1c
c001d73d:	74 f6                	je     c001d735 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d73f:	eb c2                	jmp    c001d703 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d741:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001d748:	0f 85 86 00 00 00    	jne    c001d7d4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001d74e:	83 ec 0c             	sub    esp,0xc
c001d751:	68 14 01 00 00       	push   0x114
c001d756:	e8 b4 c2 fe ff       	call   c0009a0f <malloc>
c001d75b:	83 c4 0c             	add    esp,0xc
c001d75e:	89 c3                	mov    ebx,eax
c001d760:	ff 35 30 94 02 c0    	push   DWORD PTR ds:0xc0029430
c001d766:	68 e3 65 02 c0       	push   0xc00265e3
c001d76b:	50                   	push   eax
c001d76c:	e8 f9 fa fe ff       	call   c000d26a <File::File(char const*, Process*)>
c001d771:	5a                   	pop    edx
c001d772:	59                   	pop    ecx
c001d773:	6a 01                	push   0x1
c001d775:	53                   	push   ebx
c001d776:	e8 b1 fb fe ff       	call   c000d32c <File::open(FileOpenMode)>
c001d77b:	83 c4 0c             	add    esp,0xc
c001d77e:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001d782:	50                   	push   eax
c001d783:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d787:	50                   	push   eax
c001d788:	53                   	push   ebx
c001d789:	e8 4a fe fe ff       	call   c000d5d8 <File::stat(unsigned long long*, bool*)>
c001d78e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d792:	40                   	inc    eax
c001d793:	89 04 24             	mov    DWORD PTR [esp],eax
c001d796:	e8 74 c2 fe ff       	call   c0009a0f <malloc>
c001d79b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d79f:	a3 28 9e 02 c0       	mov    ds:0xc0029e28,eax
c001d7a4:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d7a8:	5e                   	pop    esi
c001d7a9:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d7ab:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d7af:	51                   	push   ecx
c001d7b0:	50                   	push   eax
c001d7b1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d7b5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d7b9:	53                   	push   ebx
c001d7ba:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d7bd:	83 c4 14             	add    esp,0x14
c001d7c0:	53                   	push   ebx
c001d7c1:	e8 c4 fb fe ff       	call   c000d38a <File::close()>
c001d7c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7ca:	83 c4 10             	add    esp,0x10
c001d7cd:	a3 24 9e 02 c0       	mov    ds:0xc0029e24,eax
c001d7d2:	eb 36                	jmp    c001d80a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d7d4:	83 ec 0c             	sub    esp,0xc
c001d7d7:	68 fc 65 02 c0       	push   0xc00265fc
c001d7dc:	e8 88 c2 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d7e1:	83 c4 10             	add    esp,0x10
c001d7e4:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001d7eb:	0f 85 5d ff ff ff    	jne    c001d74e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d7f1:	e4 60                	in     al,0x60
c001d7f3:	3c 1c                	cmp    al,0x1c
c001d7f5:	74 04                	je     c001d7fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d7f7:	3c 5a                	cmp    al,0x5a
c001d7f9:	75 f6                	jne    c001d7f1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001d7fb:	e4 60                	in     al,0x60
c001d7fd:	3c 5a                	cmp    al,0x5a
c001d7ff:	74 fa                	je     c001d7fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d801:	3c 1c                	cmp    al,0x1c
c001d803:	74 f6                	je     c001d7fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d805:	e9 44 ff ff ff       	jmp    c001d74e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d80a:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001d811:	75 0b                	jne    c001d81e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001d813:	31 f6                	xor    esi,esi
c001d815:	31 db                	xor    ebx,ebx
c001d817:	31 ed                	xor    ebp,ebp
c001d819:	e9 a3 01 00 00       	jmp    c001d9c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d81e:	83 ec 0c             	sub    esp,0xc
c001d821:	68 0e 66 02 c0       	push   0xc002660e
c001d826:	e8 3e c2 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d82b:	8b 15 00 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f00
c001d831:	83 c4 10             	add    esp,0x10
c001d834:	f6 c2 80             	test   dl,0x80
c001d837:	74 0c                	je     c001d845 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001d839:	0f ba e2 0b          	bt     edx,0xb
c001d83d:	72 1a                	jb     c001d859 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001d83f:	eb d2                	jmp    c001d813 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d841:	3c 5a                	cmp    al,0x5a
c001d843:	74 0c                	je     c001d851 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d845:	e4 60                	in     al,0x60
c001d847:	3c 1c                	cmp    al,0x1c
c001d849:	75 f6                	jne    c001d841 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001d84b:	eb 04                	jmp    c001d851 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d84d:	3c 1c                	cmp    al,0x1c
c001d84f:	75 e8                	jne    c001d839 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001d851:	e4 60                	in     al,0x60
c001d853:	3c 5a                	cmp    al,0x5a
c001d855:	74 fa                	je     c001d851 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d857:	eb f4                	jmp    c001d84d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001d859:	83 ec 0c             	sub    esp,0xc
c001d85c:	68 13 66 02 c0       	push   0xc0026613
c001d861:	e8 03 c2 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d866:	83 c4 10             	add    esp,0x10
c001d869:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001d870:	75 a1                	jne    c001d813 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d872:	e4 60                	in     al,0x60
c001d874:	3c 5a                	cmp    al,0x5a
c001d876:	74 04                	je     c001d87c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d878:	3c 1c                	cmp    al,0x1c
c001d87a:	75 f6                	jne    c001d872 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001d87c:	e4 60                	in     al,0x60
c001d87e:	3c 5a                	cmp    al,0x5a
c001d880:	74 fa                	je     c001d87c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d882:	3c 1c                	cmp    al,0x1c
c001d884:	74 f6                	je     c001d87c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d886:	eb 8b                	jmp    c001d813 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d888:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001d88f:	0f 85 3d 01 00 00    	jne    c001d9d2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001d895:	a1 28 9e 02 c0       	mov    eax,ds:0xc0029e28
c001d89a:	8d 7e 01             	lea    edi,[esi+0x1]
c001d89d:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001d8a0:	d4 40                	aam    0x40
c001d8a2:	d5 39                	aad    0x39
c001d8a4:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001d8ab:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d8af:	0f 85 53 01 00 00    	jne    c001da08 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001d8b5:	8b 15 28 9e 02 c0    	mov    edx,DWORD PTR ds:0xc0029e28
c001d8bb:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d8be:	d4 40                	aam    0x40
c001d8c0:	d5 39                	aad    0x39
c001d8c2:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d8c6:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001d8ca:	d4 40                	aam    0x40
c001d8cc:	d5 39                	aad    0x39
c001d8ce:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d8d2:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001d8d6:	d4 40                	aam    0x40
c001d8d8:	d5 39                	aad    0x39
c001d8da:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d8de:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001d8e2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001d8e6:	3c 56                	cmp    al,0x56
c001d8e8:	74 49                	je     c001d933 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001d8ea:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001d8ee:	d4 40                	aam    0x40
c001d8f0:	d5 39                	aad    0x39
c001d8f2:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d8f5:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001d8f9:	0f b6 c9             	movzx  ecx,cl
c001d8fc:	c1 e1 04             	shl    ecx,0x4
c001d8ff:	d4 40                	aam    0x40
c001d901:	d5 39                	aad    0x39
c001d903:	83 e8 30             	sub    eax,0x30
c001d906:	0f b6 c0             	movzx  eax,al
c001d909:	09 c1                	or     ecx,eax
c001d90b:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001d90f:	c1 e1 04             	shl    ecx,0x4
c001d912:	d4 40                	aam    0x40
c001d914:	d5 39                	aad    0x39
c001d916:	83 e8 30             	sub    eax,0x30
c001d919:	0f b6 c0             	movzx  eax,al
c001d91c:	09 c1                	or     ecx,eax
c001d91e:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001d922:	c1 e1 04             	shl    ecx,0x4
c001d925:	d4 40                	aam    0x40
c001d927:	d5 39                	aad    0x39
c001d929:	83 e8 30             	sub    eax,0x30
c001d92c:	0f b6 c0             	movzx  eax,al
c001d92f:	09 c8                	or     eax,ecx
c001d931:	89 c5                	mov    ebp,eax
c001d933:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001d937:	80 f9 44             	cmp    cl,0x44
c001d93a:	74 47                	je     c001d983 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001d93c:	88 c8                	mov    al,cl
c001d93e:	d4 40                	aam    0x40
c001d940:	d5 39                	aad    0x39
c001d942:	83 e8 30             	sub    eax,0x30
c001d945:	0f b6 f8             	movzx  edi,al
c001d948:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001d94c:	c1 e7 04             	shl    edi,0x4
c001d94f:	d4 40                	aam    0x40
c001d951:	d5 39                	aad    0x39
c001d953:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d956:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001d95a:	0f b6 db             	movzx  ebx,bl
c001d95d:	09 fb                	or     ebx,edi
c001d95f:	c1 e3 04             	shl    ebx,0x4
c001d962:	d4 40                	aam    0x40
c001d964:	d5 39                	aad    0x39
c001d966:	83 e8 30             	sub    eax,0x30
c001d969:	0f b6 f8             	movzx  edi,al
c001d96c:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001d970:	09 fb                	or     ebx,edi
c001d972:	89 df                	mov    edi,ebx
c001d974:	c1 e7 04             	shl    edi,0x4
c001d977:	d4 40                	aam    0x40
c001d979:	d5 39                	aad    0x39
c001d97b:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d97e:	0f b6 db             	movzx  ebx,bl
c001d981:	09 fb                	or     ebx,edi
c001d983:	a1 24 9e 02 c0       	mov    eax,ds:0xc0029e24
c001d988:	83 c6 10             	add    esi,0x10
c001d98b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d98f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001d993:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001d996:	3c 0a                	cmp    al,0xa
c001d998:	0f 85 a0 00 00 00    	jne    c001da3e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001d99e:	3c 0a                	cmp    al,0xa
c001d9a0:	0f 94 c0             	sete   al
c001d9a3:	0f b6 c0             	movzx  eax,al
c001d9a6:	01 c6                	add    esi,eax
c001d9a8:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001d9ad:	0f 84 a2 00 00 00    	je     c001da55 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001d9b3:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001d9bb:	0f 84 94 00 00 00    	je     c001da55 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001d9c1:	39 35 24 9e 02 c0    	cmp    DWORD PTR ds:0xc0029e24,esi
c001d9c7:	0f 8f bb fe ff ff    	jg     c001d888 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001d9cd:	e9 e8 00 00 00       	jmp    c001daba <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001d9d2:	83 ec 0c             	sub    esp,0xc
c001d9d5:	68 1a 66 02 c0       	push   0xc002661a
c001d9da:	e8 8a c0 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d9df:	83 c4 10             	add    esp,0x10
c001d9e2:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001d9e9:	0f 85 a6 fe ff ff    	jne    c001d895 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001d9ef:	e4 60                	in     al,0x60
c001d9f1:	3c 5a                	cmp    al,0x5a
c001d9f3:	74 04                	je     c001d9f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d9f5:	3c 1c                	cmp    al,0x1c
c001d9f7:	75 f6                	jne    c001d9ef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001d9f9:	e4 60                	in     al,0x60
c001d9fb:	3c 5a                	cmp    al,0x5a
c001d9fd:	74 fa                	je     c001d9f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d9ff:	3c 1c                	cmp    al,0x1c
c001da01:	74 f6                	je     c001d9f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001da03:	e9 8d fe ff ff       	jmp    c001d895 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001da08:	83 ec 0c             	sub    esp,0xc
c001da0b:	68 22 66 02 c0       	push   0xc0026622
c001da10:	e8 54 c0 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001da15:	83 c4 10             	add    esp,0x10
c001da18:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001da1f:	0f 85 90 fe ff ff    	jne    c001d8b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001da25:	e4 60                	in     al,0x60
c001da27:	3c 5a                	cmp    al,0x5a
c001da29:	74 04                	je     c001da2f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001da2b:	3c 1c                	cmp    al,0x1c
c001da2d:	75 f6                	jne    c001da25 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001da2f:	e4 60                	in     al,0x60
c001da31:	3c 5a                	cmp    al,0x5a
c001da33:	74 fa                	je     c001da2f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001da35:	3c 1c                	cmp    al,0x1c
c001da37:	74 f6                	je     c001da2f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001da39:	e9 77 fe ff ff       	jmp    c001d8b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001da3e:	47                   	inc    edi
c001da3f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001da43:	0f 84 55 ff ff ff    	je     c001d99e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001da49:	46                   	inc    esi
c001da4a:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001da4d:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001da50:	e9 3e ff ff ff       	jmp    c001d993 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001da55:	80 f9 44             	cmp    cl,0x44
c001da58:	74 0e                	je     c001da68 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001da5a:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001da62:	0f 85 59 ff ff ff    	jne    c001d9c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001da68:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001da6c:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001da70:	c1 e0 04             	shl    eax,0x4
c001da73:	83 ea 30             	sub    edx,0x30
c001da76:	09 d0                	or     eax,edx
c001da78:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001da7f:	0f 85 3c ff ff ff    	jne    c001d9c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001da85:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001da89:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001da8d:	c1 e2 04             	shl    edx,0x4
c001da90:	83 e8 30             	sub    eax,0x30
c001da93:	09 d0                	or     eax,edx
c001da95:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001da9c:	0f 85 1f ff ff ff    	jne    c001d9c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001daa2:	50                   	push   eax
c001daa3:	50                   	push   eax
c001daa4:	8d 44 24 28          	lea    eax,[esp+0x28]
c001daa8:	50                   	push   eax
c001daa9:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001dab0:	e8 8b 2c fe ff       	call   c0000740 <strcpy>
c001dab5:	83 c4 10             	add    esp,0x10
c001dab8:	eb 15                	jmp    c001dacf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001daba:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001dac1:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001dacc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001dacf:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001dad6:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dadc:	5b                   	pop    ebx
c001dadd:	5e                   	pop    esi
c001dade:	5f                   	pop    edi
c001dadf:	5d                   	pop    ebp
c001dae0:	c3                   	ret    
c001dae1:	90                   	nop

c001dae2 <PCI::checkBus(unsigned char)>:
c001dae2:	56                   	push   esi
c001dae3:	53                   	push   ebx
c001dae4:	31 db                	xor    ebx,ebx
c001dae6:	51                   	push   ecx
c001dae7:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001daec:	52                   	push   edx
c001daed:	53                   	push   ebx
c001daee:	43                   	inc    ebx
c001daef:	56                   	push   esi
c001daf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001daf4:	e8 bf 07 00 00       	call   c001e2b8 <PCI::checkDevice(unsigned char, unsigned char)>
c001daf9:	83 c4 10             	add    esp,0x10
c001dafc:	83 fb 20             	cmp    ebx,0x20
c001daff:	75 eb                	jne    c001daec <PCI::checkBus(unsigned char)+0xa>
c001db01:	58                   	pop    eax
c001db02:	5b                   	pop    ebx
c001db03:	5e                   	pop    esi
c001db04:	c3                   	ret    
c001db05:	90                   	nop

c001db06 <PCI::foundDevice(PCIDeviceInfo)>:
c001db06:	55                   	push   ebp
c001db07:	57                   	push   edi
c001db08:	56                   	push   esi
c001db09:	53                   	push   ebx
c001db0a:	83 ec 1c             	sub    esp,0x1c
c001db0d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db11:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001db17:	0f 84 20 04 00 00    	je     c001df3d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001db1d:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001db24:	75 37                	jne    c001db5d <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001db26:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001db2a:	66 81 f9 06 04       	cmp    cx,0x406
c001db2f:	75 5b                	jne    c001db8c <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001db31:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001db36:	50                   	push   eax
c001db37:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001db3c:	50                   	push   eax
c001db3d:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001db42:	50                   	push   eax
c001db43:	53                   	push   ebx
c001db44:	e8 33 fa ff ff       	call   c001d57c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001db49:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001db4d:	0f b6 c0             	movzx  eax,al
c001db50:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001db54:	83 c4 2c             	add    esp,0x2c
c001db57:	5b                   	pop    ebx
c001db58:	5e                   	pop    esi
c001db59:	5f                   	pop    edi
c001db5a:	5d                   	pop    ebp
c001db5b:	eb 85                	jmp    c001dae2 <PCI::checkBus(unsigned char)>
c001db5d:	83 ec 0c             	sub    esp,0xc
c001db60:	68 2b 66 02 c0       	push   0xc002662b
c001db65:	e8 ff be fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001db6a:	83 c4 10             	add    esp,0x10
c001db6d:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001db74:	75 b0                	jne    c001db26 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001db76:	e4 60                	in     al,0x60
c001db78:	3c 5a                	cmp    al,0x5a
c001db7a:	74 04                	je     c001db80 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001db7c:	3c 1c                	cmp    al,0x1c
c001db7e:	75 f6                	jne    c001db76 <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001db80:	e4 60                	in     al,0x60
c001db82:	3c 5a                	cmp    al,0x5a
c001db84:	74 fa                	je     c001db80 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001db86:	3c 1c                	cmp    al,0x1c
c001db88:	74 f6                	je     c001db80 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001db8a:	eb 9a                	jmp    c001db26 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001db8c:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001db92:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001db96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001db9a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001db9e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001dba2:	88 d0                	mov    al,dl
c001dba4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dba9:	74 3b                	je     c001dbe6 <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001dbab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dbaf:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001dbb2:	85 d2                	test   edx,edx
c001dbb4:	74 24                	je     c001dbda <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dbb6:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001dbbc:	31 ef                	xor    edi,ebp
c001dbbe:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001dbc4:	75 14                	jne    c001dbda <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dbc6:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001dbcc:	75 0c                	jne    c001dbda <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dbce:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001dbd4:	0f 84 63 03 00 00    	je     c001df3d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dbda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dbde:	8b 12                	mov    edx,DWORD PTR [edx]
c001dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dbe4:	eb be                	jmp    c001dba4 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001dbe6:	66 81 f9 01 06       	cmp    cx,0x601
c001dbeb:	0f 85 81 01 00 00    	jne    c001dd72 <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001dbf1:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001dbf8:	75 25                	jne    c001dc1f <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001dbfa:	83 ec 0c             	sub    esp,0xc
c001dbfd:	68 64 01 00 00       	push   0x164
c001dc02:	e8 08 be fe ff       	call   c0009a0f <malloc>
c001dc07:	89 04 24             	mov    DWORD PTR [esp],eax
c001dc0a:	89 c5                	mov    ebp,eax
c001dc0c:	e8 b7 12 00 00       	call   c001eec8 <SATABus::SATABus()>
c001dc11:	83 c4 10             	add    esp,0x10
c001dc14:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001dc1b:	74 4a                	je     c001dc67 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001dc1d:	eb 2f                	jmp    c001dc4e <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001dc1f:	83 ec 0c             	sub    esp,0xc
c001dc22:	68 3b 66 02 c0       	push   0xc002663b
c001dc27:	e8 3d be fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dc2c:	83 c4 10             	add    esp,0x10
c001dc2f:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001dc36:	75 c2                	jne    c001dbfa <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001dc38:	e4 60                	in     al,0x60
c001dc3a:	3c 1c                	cmp    al,0x1c
c001dc3c:	74 04                	je     c001dc42 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001dc3e:	3c 5a                	cmp    al,0x5a
c001dc40:	75 f6                	jne    c001dc38 <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001dc42:	e4 60                	in     al,0x60
c001dc44:	3c 5a                	cmp    al,0x5a
c001dc46:	74 fa                	je     c001dc42 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001dc48:	3c 1c                	cmp    al,0x1c
c001dc4a:	74 f6                	je     c001dc42 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001dc4c:	eb ac                	jmp    c001dbfa <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001dc4e:	83 ec 0c             	sub    esp,0xc
c001dc51:	68 41 66 02 c0       	push   0xc0026641
c001dc56:	e8 0e be fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dc5b:	83 c4 10             	add    esp,0x10
c001dc5e:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001dc65:	74 1b                	je     c001dc82 <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001dc67:	50                   	push   eax
c001dc68:	50                   	push   eax
c001dc69:	55                   	push   ebp
c001dc6a:	53                   	push   ebx
c001dc6b:	e8 36 05 ff ff       	call   c000e1a6 <Device::addChild(Device*)>
c001dc70:	83 c4 10             	add    esp,0x10
c001dc73:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001dc7a:	74 33                	je     c001dcaf <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001dc7c:	eb 18                	jmp    c001dc96 <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001dc7e:	3c 1c                	cmp    al,0x1c
c001dc80:	74 0c                	je     c001dc8e <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dc82:	e4 60                	in     al,0x60
c001dc84:	3c 5a                	cmp    al,0x5a
c001dc86:	75 f6                	jne    c001dc7e <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001dc88:	eb 04                	jmp    c001dc8e <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dc8a:	3c 1c                	cmp    al,0x1c
c001dc8c:	75 d9                	jne    c001dc67 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001dc8e:	e4 60                	in     al,0x60
c001dc90:	3c 5a                	cmp    al,0x5a
c001dc92:	74 fa                	je     c001dc8e <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dc94:	eb f4                	jmp    c001dc8a <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001dc96:	83 ec 0c             	sub    esp,0xc
c001dc99:	68 49 66 02 c0       	push   0xc0026649
c001dc9e:	e8 c6 bd fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dca3:	83 c4 10             	add    esp,0x10
c001dca6:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001dcad:	74 29                	je     c001dcd8 <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001dcaf:	83 ec 2c             	sub    esp,0x2c
c001dcb2:	b9 09 00 00 00       	mov    ecx,0x9
c001dcb7:	8d 74 24 60          	lea    esi,[esp+0x60]
c001dcbb:	fc                   	cld    
c001dcbc:	89 e7                	mov    edi,esp
c001dcbe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dcc0:	55                   	push   ebp
c001dcc1:	e8 f2 03 ff ff       	call   c000e0b8 <Device::preOpenPCI(PCIDeviceInfo)>
c001dcc6:	83 c4 30             	add    esp,0x30
c001dcc9:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001dcd0:	74 33                	je     c001dd05 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001dcd2:	eb 18                	jmp    c001dcec <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001dcd4:	3c 1c                	cmp    al,0x1c
c001dcd6:	74 0c                	je     c001dce4 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001dcd8:	e4 60                	in     al,0x60
c001dcda:	3c 5a                	cmp    al,0x5a
c001dcdc:	75 f6                	jne    c001dcd4 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001dcde:	eb 04                	jmp    c001dce4 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001dce0:	3c 1c                	cmp    al,0x1c
c001dce2:	75 cb                	jne    c001dcaf <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001dce4:	e4 60                	in     al,0x60
c001dce6:	3c 5a                	cmp    al,0x5a
c001dce8:	74 fa                	je     c001dce4 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001dcea:	eb f4                	jmp    c001dce0 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001dcec:	83 ec 0c             	sub    esp,0xc
c001dcef:	68 51 66 02 c0       	push   0xc0026651
c001dcf4:	e8 70 bd fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dcf9:	83 c4 10             	add    esp,0x10
c001dcfc:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001dd03:	74 23                	je     c001dd28 <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001dd05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dd08:	6a 00                	push   0x0
c001dd0a:	6a 00                	push   0x0
c001dd0c:	6a 00                	push   0x0
c001dd0e:	55                   	push   ebp
c001dd0f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dd12:	83 c4 10             	add    esp,0x10
c001dd15:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001dd1c:	0f 84 1b 02 00 00    	je     c001df3d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dd22:	eb 18                	jmp    c001dd3c <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001dd24:	3c 1c                	cmp    al,0x1c
c001dd26:	74 0c                	je     c001dd34 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001dd28:	e4 60                	in     al,0x60
c001dd2a:	3c 5a                	cmp    al,0x5a
c001dd2c:	75 f6                	jne    c001dd24 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001dd2e:	eb 04                	jmp    c001dd34 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001dd30:	3c 1c                	cmp    al,0x1c
c001dd32:	75 d1                	jne    c001dd05 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001dd34:	e4 60                	in     al,0x60
c001dd36:	3c 5a                	cmp    al,0x5a
c001dd38:	74 fa                	je     c001dd34 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001dd3a:	eb f4                	jmp    c001dd30 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001dd3c:	83 ec 0c             	sub    esp,0xc
c001dd3f:	68 59 66 02 c0       	push   0xc0026659
c001dd44:	e8 20 bd fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dd49:	83 c4 10             	add    esp,0x10
c001dd4c:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001dd53:	0f 85 e4 01 00 00    	jne    c001df3d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dd59:	e4 60                	in     al,0x60
c001dd5b:	3c 5a                	cmp    al,0x5a
c001dd5d:	74 04                	je     c001dd63 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001dd5f:	3c 1c                	cmp    al,0x1c
c001dd61:	75 f6                	jne    c001dd59 <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001dd63:	e4 60                	in     al,0x60
c001dd65:	3c 5a                	cmp    al,0x5a
c001dd67:	74 fa                	je     c001dd63 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001dd69:	3c 1c                	cmp    al,0x1c
c001dd6b:	74 f6                	je     c001dd63 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001dd6d:	e9 cb 01 00 00       	jmp    c001df3d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dd72:	66 81 f9 01 01       	cmp    cx,0x101
c001dd77:	0f 85 7a 01 00 00    	jne    c001def7 <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001dd7d:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001dd84:	75 25                	jne    c001ddab <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001dd86:	83 ec 0c             	sub    esp,0xc
c001dd89:	68 70 02 00 00       	push   0x270
c001dd8e:	e8 7c bc fe ff       	call   c0009a0f <malloc>
c001dd93:	89 04 24             	mov    DWORD PTR [esp],eax
c001dd96:	89 c5                	mov    ebp,eax
c001dd98:	e8 df 05 00 00       	call   c001e37c <IDE::IDE()>
c001dd9d:	83 c4 10             	add    esp,0x10
c001dda0:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001dda7:	74 4a                	je     c001ddf3 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001dda9:	eb 2f                	jmp    c001ddda <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001ddab:	83 ec 0c             	sub    esp,0xc
c001ddae:	68 61 66 02 c0       	push   0xc0026661
c001ddb3:	e8 b1 bc fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001ddb8:	83 c4 10             	add    esp,0x10
c001ddbb:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001ddc2:	75 c2                	jne    c001dd86 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001ddc4:	e4 60                	in     al,0x60
c001ddc6:	3c 5a                	cmp    al,0x5a
c001ddc8:	74 04                	je     c001ddce <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001ddca:	3c 1c                	cmp    al,0x1c
c001ddcc:	75 f6                	jne    c001ddc4 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001ddce:	e4 60                	in     al,0x60
c001ddd0:	3c 5a                	cmp    al,0x5a
c001ddd2:	74 fa                	je     c001ddce <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001ddd4:	3c 1c                	cmp    al,0x1c
c001ddd6:	74 f6                	je     c001ddce <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001ddd8:	eb ac                	jmp    c001dd86 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001ddda:	83 ec 0c             	sub    esp,0xc
c001dddd:	68 68 66 02 c0       	push   0xc0026668
c001dde2:	e8 82 bc fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dde7:	83 c4 10             	add    esp,0x10
c001ddea:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001ddf1:	74 1b                	je     c001de0e <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001ddf3:	57                   	push   edi
c001ddf4:	57                   	push   edi
c001ddf5:	55                   	push   ebp
c001ddf6:	53                   	push   ebx
c001ddf7:	e8 aa 03 ff ff       	call   c000e1a6 <Device::addChild(Device*)>
c001ddfc:	83 c4 10             	add    esp,0x10
c001ddff:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001de06:	74 33                	je     c001de3b <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001de08:	eb 18                	jmp    c001de22 <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001de0a:	3c 1c                	cmp    al,0x1c
c001de0c:	74 0c                	je     c001de1a <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001de0e:	e4 60                	in     al,0x60
c001de10:	3c 5a                	cmp    al,0x5a
c001de12:	75 f6                	jne    c001de0a <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001de14:	eb 04                	jmp    c001de1a <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001de16:	3c 1c                	cmp    al,0x1c
c001de18:	75 d9                	jne    c001ddf3 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001de1a:	e4 60                	in     al,0x60
c001de1c:	3c 5a                	cmp    al,0x5a
c001de1e:	74 fa                	je     c001de1a <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001de20:	eb f4                	jmp    c001de16 <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001de22:	83 ec 0c             	sub    esp,0xc
c001de25:	68 6f 66 02 c0       	push   0xc002666f
c001de2a:	e8 3a bc fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001de2f:	83 c4 10             	add    esp,0x10
c001de32:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001de39:	74 29                	je     c001de64 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001de3b:	83 ec 2c             	sub    esp,0x2c
c001de3e:	b9 09 00 00 00       	mov    ecx,0x9
c001de43:	8d 74 24 60          	lea    esi,[esp+0x60]
c001de47:	fc                   	cld    
c001de48:	89 e7                	mov    edi,esp
c001de4a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001de4c:	55                   	push   ebp
c001de4d:	e8 66 02 ff ff       	call   c000e0b8 <Device::preOpenPCI(PCIDeviceInfo)>
c001de52:	83 c4 30             	add    esp,0x30
c001de55:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001de5c:	74 33                	je     c001de91 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001de5e:	eb 18                	jmp    c001de78 <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001de60:	3c 1c                	cmp    al,0x1c
c001de62:	74 0c                	je     c001de70 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001de64:	e4 60                	in     al,0x60
c001de66:	3c 5a                	cmp    al,0x5a
c001de68:	75 f6                	jne    c001de60 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001de6a:	eb 04                	jmp    c001de70 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001de6c:	3c 1c                	cmp    al,0x1c
c001de6e:	75 cb                	jne    c001de3b <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001de70:	e4 60                	in     al,0x60
c001de72:	3c 5a                	cmp    al,0x5a
c001de74:	74 fa                	je     c001de70 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001de76:	eb f4                	jmp    c001de6c <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001de78:	83 ec 0c             	sub    esp,0xc
c001de7b:	68 76 66 02 c0       	push   0xc0026676
c001de80:	e8 e4 bb fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001de85:	83 c4 10             	add    esp,0x10
c001de88:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001de8f:	74 23                	je     c001deb4 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001de91:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001de94:	6a 00                	push   0x0
c001de96:	6a 00                	push   0x0
c001de98:	6a 00                	push   0x0
c001de9a:	55                   	push   ebp
c001de9b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001de9e:	83 c4 10             	add    esp,0x10
c001dea1:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001dea8:	0f 84 8f 00 00 00    	je     c001df3d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001deae:	eb 18                	jmp    c001dec8 <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001deb0:	3c 1c                	cmp    al,0x1c
c001deb2:	74 0c                	je     c001dec0 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001deb4:	e4 60                	in     al,0x60
c001deb6:	3c 5a                	cmp    al,0x5a
c001deb8:	75 f6                	jne    c001deb0 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001deba:	eb 04                	jmp    c001dec0 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001debc:	3c 1c                	cmp    al,0x1c
c001debe:	75 d1                	jne    c001de91 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001dec0:	e4 60                	in     al,0x60
c001dec2:	3c 5a                	cmp    al,0x5a
c001dec4:	74 fa                	je     c001dec0 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001dec6:	eb f4                	jmp    c001debc <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001dec8:	83 ec 0c             	sub    esp,0xc
c001decb:	68 7d 66 02 c0       	push   0xc002667d
c001ded0:	e8 94 bb fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001ded5:	83 c4 10             	add    esp,0x10
c001ded8:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001dedf:	75 5c                	jne    c001df3d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dee1:	e4 60                	in     al,0x60
c001dee3:	3c 5a                	cmp    al,0x5a
c001dee5:	74 04                	je     c001deeb <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001dee7:	3c 1c                	cmp    al,0x1c
c001dee9:	75 f6                	jne    c001dee1 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001deeb:	e4 60                	in     al,0x60
c001deed:	3c 5a                	cmp    al,0x5a
c001deef:	74 fa                	je     c001deeb <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001def1:	3c 1c                	cmp    al,0x1c
c001def3:	74 f6                	je     c001deeb <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001def5:	eb 46                	jmp    c001df3d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001def7:	83 ec 0c             	sub    esp,0xc
c001defa:	68 58 01 00 00       	push   0x158
c001deff:	e8 0b bb fe ff       	call   c0009a0f <malloc>
c001df04:	89 c5                	mov    ebp,eax
c001df06:	58                   	pop    eax
c001df07:	5a                   	pop    edx
c001df08:	68 84 66 02 c0       	push   0xc0026684
c001df0d:	55                   	push   ebp
c001df0e:	e8 9d 05 ff ff       	call   c000e4b0 <DriverlessDevice::DriverlessDevice(char const*)>
c001df13:	59                   	pop    ecx
c001df14:	5e                   	pop    esi
c001df15:	55                   	push   ebp
c001df16:	53                   	push   ebx
c001df17:	e8 8a 02 ff ff       	call   c000e1a6 <Device::addChild(Device*)>
c001df1c:	83 c4 10             	add    esp,0x10
c001df1f:	b9 09 00 00 00       	mov    ecx,0x9
c001df24:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001df28:	fc                   	cld    
c001df29:	89 fe                	mov    esi,edi
c001df2b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001df2d:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001df31:	83 c4 1c             	add    esp,0x1c
c001df34:	5b                   	pop    ebx
c001df35:	5e                   	pop    esi
c001df36:	5f                   	pop    edi
c001df37:	5d                   	pop    ebp
c001df38:	e9 7b 01 ff ff       	jmp    c000e0b8 <Device::preOpenPCI(PCIDeviceInfo)>
c001df3d:	83 c4 1c             	add    esp,0x1c
c001df40:	5b                   	pop    ebx
c001df41:	5e                   	pop    esi
c001df42:	5f                   	pop    edi
c001df43:	5d                   	pop    ebp
c001df44:	c3                   	ret    
c001df45:	90                   	nop

c001df46 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001df46:	55                   	push   ebp
c001df47:	57                   	push   edi
c001df48:	56                   	push   esi
c001df49:	53                   	push   ebx
c001df4a:	81 ec b4 00 00 00    	sub    esp,0xb4
c001df50:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001df57:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001df5e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001df62:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001df69:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001df6d:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001df74:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001df78:	68 9e 66 02 c0       	push   0xc002669e
c001df7d:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001df81:	53                   	push   ebx
c001df82:	e8 b9 27 fe ff       	call   c0000740 <strcpy>
c001df87:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001df8c:	b2 64                	mov    dl,0x64
c001df8e:	89 c8                	mov    eax,ecx
c001df90:	f6 f2                	div    dl
c001df92:	b2 0a                	mov    dl,0xa
c001df94:	83 c0 30             	add    eax,0x30
c001df97:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001df9b:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001df9f:	83 c4 10             	add    esp,0x10
c001dfa2:	89 c8                	mov    eax,ecx
c001dfa4:	f6 f2                	div    dl
c001dfa6:	89 c1                	mov    ecx,eax
c001dfa8:	0f b6 c0             	movzx  eax,al
c001dfab:	88 e9                	mov    cl,ch
c001dfad:	f6 f2                	div    dl
c001dfaf:	88 e0                	mov    al,ah
c001dfb1:	83 c0 30             	add    eax,0x30
c001dfb4:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001dfb8:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001dfbc:	8d 41 30             	lea    eax,[ecx+0x30]
c001dfbf:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001dfc3:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001dfc7:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001dfcc:	f6 f2                	div    dl
c001dfce:	89 c1                	mov    ecx,eax
c001dfd0:	0f b6 c0             	movzx  eax,al
c001dfd3:	88 e9                	mov    cl,ch
c001dfd5:	f6 f2                	div    dl
c001dfd7:	88 e0                	mov    al,ah
c001dfd9:	83 c0 30             	add    eax,0x30
c001dfdc:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001dfe0:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001dfe4:	8d 41 30             	lea    eax,[ecx+0x30]
c001dfe7:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001dfeb:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001dfef:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001dff4:	f6 f2                	div    dl
c001dff6:	89 c1                	mov    ecx,eax
c001dff8:	0f b6 c0             	movzx  eax,al
c001dffb:	88 e9                	mov    cl,ch
c001dffd:	f6 f2                	div    dl
c001dfff:	88 e0                	mov    al,ah
c001e001:	83 c0 30             	add    eax,0x30
c001e004:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001e00b:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001e00f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e013:	8d 41 30             	lea    eax,[ecx+0x30]
c001e016:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001e01a:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001e01e:	74 29                	je     c001e049 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e020:	83 ec 0c             	sub    esp,0xc
c001e023:	53                   	push   ebx
c001e024:	e8 40 ba fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001e029:	83 c4 10             	add    esp,0x10
c001e02c:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001e033:	75 14                	jne    c001e049 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e035:	e4 60                	in     al,0x60
c001e037:	3c 1c                	cmp    al,0x1c
c001e039:	74 04                	je     c001e03f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e03b:	3c 5a                	cmp    al,0x5a
c001e03d:	75 f6                	jne    c001e035 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001e03f:	e4 60                	in     al,0x60
c001e041:	3c 5a                	cmp    al,0x5a
c001e043:	74 fa                	je     c001e03f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e045:	3c 1c                	cmp    al,0x1c
c001e047:	74 f6                	je     c001e03f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e049:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001e04e:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001e053:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e058:	83 ec 0c             	sub    esp,0xc
c001e05b:	6a 0c                	push   0xc
c001e05d:	56                   	push   esi
c001e05e:	53                   	push   ebx
c001e05f:	57                   	push   edi
c001e060:	55                   	push   ebp
c001e061:	e8 68 f3 ff ff       	call   c001d3ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e066:	83 c4 20             	add    esp,0x20
c001e069:	56                   	push   esi
c001e06a:	53                   	push   ebx
c001e06b:	57                   	push   edi
c001e06c:	55                   	push   ebp
c001e06d:	e8 50 f4 ff ff       	call   c001d4c2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e072:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001e077:	56                   	push   esi
c001e078:	53                   	push   ebx
c001e079:	57                   	push   edi
c001e07a:	55                   	push   ebp
c001e07b:	e8 d8 f4 ff ff       	call   c001d558 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e080:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001e084:	83 c4 14             	add    esp,0x14
c001e087:	6a 3c                	push   0x3c
c001e089:	56                   	push   esi
c001e08a:	53                   	push   ebx
c001e08b:	57                   	push   edi
c001e08c:	55                   	push   ebp
c001e08d:	e8 3c f3 ff ff       	call   c001d3ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e092:	0f b6 c4             	movzx  eax,ah
c001e095:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e099:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e09d:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001e0a4:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c001e0a9:	83 c4 20             	add    esp,0x20
c001e0ac:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e0b2:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001e0b9:	0f 84 38 01 00 00    	je     c001e1f7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e0bf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e0c7:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c001e0cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e0d0:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e0d6:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001e0dc:	0f 8e 15 01 00 00    	jle    c001e1f7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e0e2:	50                   	push   eax
c001e0e3:	50                   	push   eax
c001e0e4:	68 b9 66 02 c0       	push   0xc00266b9
c001e0e9:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e0ed:	50                   	push   eax
c001e0ee:	e8 4d 26 fe ff       	call   c0000740 <strcpy>
c001e0f3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001e0f7:	b9 0a 00 00 00       	mov    ecx,0xa
c001e0fc:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e100:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e104:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e108:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001e10c:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001e110:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001e114:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001e118:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001e11c:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001e120:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e124:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001e128:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001e12c:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001e130:	83 c4 10             	add    esp,0x10
c001e133:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e137:	99                   	cdq    
c001e138:	f7 f9                	idiv   ecx
c001e13a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e13e:	99                   	cdq    
c001e13f:	f7 f9                	idiv   ecx
c001e141:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001e145:	83 c2 30             	add    edx,0x30
c001e148:	83 c0 30             	add    eax,0x30
c001e14b:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001e14f:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001e153:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001e15a:	74 2d                	je     c001e189 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e15c:	83 ec 0c             	sub    esp,0xc
c001e15f:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e163:	50                   	push   eax
c001e164:	e8 00 b9 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001e169:	83 c4 10             	add    esp,0x10
c001e16c:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001e173:	75 14                	jne    c001e189 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e175:	e4 60                	in     al,0x60
c001e177:	3c 5a                	cmp    al,0x5a
c001e179:	74 04                	je     c001e17f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e17b:	3c 1c                	cmp    al,0x1c
c001e17d:	75 f6                	jne    c001e175 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001e17f:	e4 60                	in     al,0x60
c001e181:	3c 5a                	cmp    al,0x5a
c001e183:	74 fa                	je     c001e17f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e185:	3c 1c                	cmp    al,0x1c
c001e187:	74 f6                	je     c001e17f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e189:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e18d:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c001e192:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e198:	8d 04 d0             	lea    eax,[eax+edx*8]
c001e19b:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001e1a2:	39 d3                	cmp    ebx,edx
c001e1a4:	75 48                	jne    c001e1ee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e1a6:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001e1ad:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001e1b1:	75 3b                	jne    c001e1ee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e1b3:	83 ec 0c             	sub    esp,0xc
c001e1b6:	68 e8 66 02 c0       	push   0xc00266e8
c001e1bb:	e8 3f eb fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001e1c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e1c4:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c001e1c9:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e1cf:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001e1d7:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001e1db:	50                   	push   eax
c001e1dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e1e0:	53                   	push   ebx
c001e1e1:	68 0d 67 02 c0       	push   0xc002670d
c001e1e6:	e8 14 eb fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001e1eb:	83 c4 20             	add    esp,0x20
c001e1ee:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e1f2:	e9 d0 fe ff ff       	jmp    c001e0c7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001e1f7:	31 d2                	xor    edx,edx
c001e1f9:	83 ec 0c             	sub    esp,0xc
c001e1fc:	56                   	push   esi
c001e1fd:	53                   	push   ebx
c001e1fe:	57                   	push   edi
c001e1ff:	52                   	push   edx
c001e200:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e204:	55                   	push   ebp
c001e205:	e8 9a f3 ff ff       	call   c001d5a4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e20a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e20e:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001e215:	42                   	inc    edx
c001e216:	83 c4 20             	add    esp,0x20
c001e219:	83 fa 06             	cmp    edx,0x6
c001e21c:	75 db                	jne    c001e1f9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001e21e:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001e223:	83 ec 0c             	sub    esp,0xc
c001e226:	86 e0                	xchg   al,ah
c001e228:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001e230:	6a 02                	push   0x2
c001e232:	56                   	push   esi
c001e233:	53                   	push   ebx
c001e234:	57                   	push   edi
c001e235:	55                   	push   ebp
c001e236:	e8 93 f1 ff ff       	call   c001d3ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e23b:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001e243:	83 c4 20             	add    esp,0x20
c001e246:	56                   	push   esi
c001e247:	53                   	push   ebx
c001e248:	57                   	push   edi
c001e249:	55                   	push   ebp
c001e24a:	e8 bd f2 ff ff       	call   c001d50c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e24f:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001e256:	56                   	push   esi
c001e257:	53                   	push   ebx
c001e258:	57                   	push   edi
c001e259:	55                   	push   ebp
c001e25a:	e8 17 f2 ff ff       	call   c001d476 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e25f:	b9 09 00 00 00       	mov    ecx,0x9
c001e264:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001e26c:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001e270:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001e277:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e27b:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001e282:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e286:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001e28d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e291:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001e298:	83 ec 0c             	sub    esp,0xc
c001e29b:	fc                   	cld    
c001e29c:	89 e7                	mov    edi,esp
c001e29e:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001e2a5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e2a7:	55                   	push   ebp
c001e2a8:	e8 59 f8 ff ff       	call   c001db06 <PCI::foundDevice(PCIDeviceInfo)>
c001e2ad:	81 c4 dc 00 00 00    	add    esp,0xdc
c001e2b3:	5b                   	pop    ebx
c001e2b4:	5e                   	pop    esi
c001e2b5:	5f                   	pop    edi
c001e2b6:	5d                   	pop    ebp
c001e2b7:	c3                   	ret    

c001e2b8 <PCI::checkDevice(unsigned char, unsigned char)>:
c001e2b8:	55                   	push   ebp
c001e2b9:	57                   	push   edi
c001e2ba:	56                   	push   esi
c001e2bb:	53                   	push   ebx
c001e2bc:	83 ec 0c             	sub    esp,0xc
c001e2bf:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e2c3:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e2c8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e2cd:	6a 00                	push   0x0
c001e2cf:	56                   	push   esi
c001e2d0:	57                   	push   edi
c001e2d1:	55                   	push   ebp
c001e2d2:	e8 9f f1 ff ff       	call   c001d476 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e2d7:	6a 00                	push   0x0
c001e2d9:	56                   	push   esi
c001e2da:	57                   	push   edi
c001e2db:	55                   	push   ebp
c001e2dc:	e8 65 fc ff ff       	call   c001df46 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e2e1:	83 c4 20             	add    esp,0x20
c001e2e4:	6a 00                	push   0x0
c001e2e6:	56                   	push   esi
c001e2e7:	57                   	push   edi
c001e2e8:	55                   	push   ebp
c001e2e9:	e8 ac f1 ff ff       	call   c001d49a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e2ee:	83 c4 10             	add    esp,0x10
c001e2f1:	84 c0                	test   al,al
c001e2f3:	79 27                	jns    c001e31c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e2f5:	bb 01 00 00 00       	mov    ebx,0x1
c001e2fa:	53                   	push   ebx
c001e2fb:	56                   	push   esi
c001e2fc:	57                   	push   edi
c001e2fd:	55                   	push   ebp
c001e2fe:	e8 73 f1 ff ff       	call   c001d476 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e303:	83 c4 10             	add    esp,0x10
c001e306:	66 40                	inc    ax
c001e308:	74 0c                	je     c001e316 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001e30a:	53                   	push   ebx
c001e30b:	56                   	push   esi
c001e30c:	57                   	push   edi
c001e30d:	55                   	push   ebp
c001e30e:	e8 33 fc ff ff       	call   c001df46 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e313:	83 c4 10             	add    esp,0x10
c001e316:	43                   	inc    ebx
c001e317:	83 fb 08             	cmp    ebx,0x8
c001e31a:	75 de                	jne    c001e2fa <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e31c:	83 c4 0c             	add    esp,0xc
c001e31f:	5b                   	pop    ebx
c001e320:	5e                   	pop    esi
c001e321:	5f                   	pop    edi
c001e322:	5d                   	pop    ebp
c001e323:	c3                   	ret    

c001e324 <PCI::detect()>:
c001e324:	56                   	push   esi
c001e325:	53                   	push   ebx
c001e326:	53                   	push   ebx
c001e327:	31 db                	xor    ebx,ebx
c001e329:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e32d:	6a 00                	push   0x0
c001e32f:	6a 00                	push   0x0
c001e331:	6a 00                	push   0x0
c001e333:	56                   	push   esi
c001e334:	e8 61 f1 ff ff       	call   c001d49a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e339:	83 c4 10             	add    esp,0x10
c001e33c:	a8 80                	test   al,0x80
c001e33e:	75 21                	jne    c001e361 <PCI::detect()+0x3d>
c001e340:	51                   	push   ecx
c001e341:	51                   	push   ecx
c001e342:	6a 00                	push   0x0
c001e344:	56                   	push   esi
c001e345:	e8 98 f7 ff ff       	call   c001dae2 <PCI::checkBus(unsigned char)>
c001e34a:	83 c4 10             	add    esp,0x10
c001e34d:	eb 24                	jmp    c001e373 <PCI::detect()+0x4f>
c001e34f:	52                   	push   edx
c001e350:	52                   	push   edx
c001e351:	53                   	push   ebx
c001e352:	43                   	inc    ebx
c001e353:	56                   	push   esi
c001e354:	e8 89 f7 ff ff       	call   c001dae2 <PCI::checkBus(unsigned char)>
c001e359:	83 c4 10             	add    esp,0x10
c001e35c:	83 fb 08             	cmp    ebx,0x8
c001e35f:	74 12                	je     c001e373 <PCI::detect()+0x4f>
c001e361:	53                   	push   ebx
c001e362:	6a 00                	push   0x0
c001e364:	6a 00                	push   0x0
c001e366:	56                   	push   esi
c001e367:	e8 0a f1 ff ff       	call   c001d476 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e36c:	83 c4 10             	add    esp,0x10
c001e36f:	66 40                	inc    ax
c001e371:	74 dc                	je     c001e34f <PCI::detect()+0x2b>
c001e373:	58                   	pop    eax
c001e374:	5b                   	pop    ebx
c001e375:	5e                   	pop    esi
c001e376:	c3                   	ret    
c001e377:	90                   	nop

c001e378 <IDE::close(int, int, void*)>:
c001e378:	83 c8 ff             	or     eax,0xffffffff
c001e37b:	c3                   	ret    

c001e37c <IDE::IDE()>:
c001e37c:	83 ec 0c             	sub    esp,0xc
c001e37f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e383:	83 ec 08             	sub    esp,0x8
c001e386:	68 54 67 02 c0       	push   0xc0026754
c001e38b:	50                   	push   eax
c001e38c:	e8 c3 01 ff ff       	call   c000e554 <HardDiskController::HardDiskController(char const*)>
c001e391:	83 c4 10             	add    esp,0x10
c001e394:	ba e4 67 02 c0       	mov    edx,0xc00267e4
c001e399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e39d:	89 10                	mov    DWORD PTR [eax],edx
c001e39f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3a3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e3aa:	90                   	nop
c001e3ab:	83 c4 0c             	add    esp,0xc
c001e3ae:	c3                   	ret    
c001e3af:	90                   	nop

c001e3b0 <IDE::prepareInterrupt(unsigned char)>:
c001e3b0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e3b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e3b9:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e3c1:	c3                   	ret    

c001e3c2 <selectDrive(unsigned char, unsigned char)>:
c001e3c2:	c3                   	ret    
c001e3c3:	90                   	nop

c001e3c4 <IDE::getBase(unsigned char)>:
c001e3c4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e3c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3cd:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e3d5:	c3                   	ret    

c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e3d6:	55                   	push   ebp
c001e3d7:	57                   	push   edi
c001e3d8:	56                   	push   esi
c001e3d9:	53                   	push   ebx
c001e3da:	83 ec 1c             	sub    esp,0x1c
c001e3dd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e3e1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e3e5:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e3e8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e3ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e3f0:	80 f9 03             	cmp    cl,0x3
c001e3f3:	77 51                	ja     c001e446 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001e3f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e3f9:	0f b6 f2             	movzx  esi,dl
c001e3fc:	0f b6 db             	movzx  ebx,bl
c001e3ff:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e402:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001e406:	83 ca 80             	or     edx,0xffffff80
c001e409:	0f b6 d2             	movzx  edx,dl
c001e40c:	52                   	push   edx
c001e40d:	6a 0c                	push   0xc
c001e40f:	56                   	push   esi
c001e410:	57                   	push   edi
c001e411:	e8 c0 ff ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e416:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001e41b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e41f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e423:	ee                   	out    dx,al
c001e424:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001e429:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001e42d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001e431:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e435:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e43d:	83 c4 2c             	add    esp,0x2c
c001e440:	5b                   	pop    ebx
c001e441:	5e                   	pop    esi
c001e442:	5f                   	pop    edi
c001e443:	5d                   	pop    ebp
c001e444:	eb 90                	jmp    c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e446:	80 fb 07             	cmp    bl,0x7
c001e449:	77 12                	ja     c001e45d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001e44b:	0f b6 d2             	movzx  edx,dl
c001e44e:	0f b6 db             	movzx  ebx,bl
c001e451:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001e459:	89 da                	mov    edx,ebx
c001e45b:	eb 2f                	jmp    c001e48c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e45d:	80 fb 0d             	cmp    bl,0xd
c001e460:	77 13                	ja     c001e475 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001e462:	0f b6 d2             	movzx  edx,dl
c001e465:	0f b6 db             	movzx  ebx,bl
c001e468:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001e46f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e473:	eb 17                	jmp    c001e48c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e475:	80 fb 15             	cmp    bl,0x15
c001e478:	77 13                	ja     c001e48d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e47a:	0f b6 d2             	movzx  edx,dl
c001e47d:	0f b6 db             	movzx  ebx,bl
c001e480:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001e488:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e48c:	ee                   	out    dx,al
c001e48d:	83 c4 1c             	add    esp,0x1c
c001e490:	5b                   	pop    ebx
c001e491:	5e                   	pop    esi
c001e492:	5f                   	pop    edi
c001e493:	5d                   	pop    ebp
c001e494:	c3                   	ret    
c001e495:	90                   	nop

c001e496 <IDE::read(unsigned char, unsigned char)>:
c001e496:	55                   	push   ebp
c001e497:	57                   	push   edi
c001e498:	56                   	push   esi
c001e499:	53                   	push   ebx
c001e49a:	83 ec 1c             	sub    esp,0x1c
c001e49d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e4a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e4a5:	8d 43 f8             	lea    eax,[ebx-0x8]
c001e4a8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e4ac:	3c 03                	cmp    al,0x3
c001e4ae:	77 43                	ja     c001e4f3 <IDE::read(unsigned char, unsigned char)+0x5d>
c001e4b0:	0f b6 f2             	movzx  esi,dl
c001e4b3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e4b6:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001e4ba:	83 c8 80             	or     eax,0xffffff80
c001e4bd:	0f b6 c0             	movzx  eax,al
c001e4c0:	50                   	push   eax
c001e4c1:	6a 0c                	push   0xc
c001e4c3:	56                   	push   esi
c001e4c4:	57                   	push   edi
c001e4c5:	e8 0c ff ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e4ca:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001e4cf:	0f b6 c3             	movzx  eax,bl
c001e4d2:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001e4d6:	ec                   	in     al,dx
c001e4d7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e4db:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001e4e0:	52                   	push   edx
c001e4e1:	6a 0c                	push   0xc
c001e4e3:	56                   	push   esi
c001e4e4:	57                   	push   edi
c001e4e5:	e8 ec fe ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e4ea:	83 c4 20             	add    esp,0x20
c001e4ed:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e4f1:	eb 49                	jmp    c001e53c <IDE::read(unsigned char, unsigned char)+0xa6>
c001e4f3:	80 fb 07             	cmp    bl,0x7
c001e4f6:	77 12                	ja     c001e50a <IDE::read(unsigned char, unsigned char)+0x74>
c001e4f8:	0f b6 d2             	movzx  edx,dl
c001e4fb:	0f b6 c3             	movzx  eax,bl
c001e4fe:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001e506:	89 c2                	mov    edx,eax
c001e508:	eb 31                	jmp    c001e53b <IDE::read(unsigned char, unsigned char)+0xa5>
c001e50a:	80 fb 0d             	cmp    bl,0xd
c001e50d:	77 13                	ja     c001e522 <IDE::read(unsigned char, unsigned char)+0x8c>
c001e50f:	0f b6 d2             	movzx  edx,dl
c001e512:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001e519:	0f b6 d3             	movzx  edx,bl
c001e51c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e520:	eb 19                	jmp    c001e53b <IDE::read(unsigned char, unsigned char)+0xa5>
c001e522:	31 c0                	xor    eax,eax
c001e524:	80 fb 15             	cmp    bl,0x15
c001e527:	77 13                	ja     c001e53c <IDE::read(unsigned char, unsigned char)+0xa6>
c001e529:	0f b6 d2             	movzx  edx,dl
c001e52c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001e534:	0f b6 d3             	movzx  edx,bl
c001e537:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e53b:	ec                   	in     al,dx
c001e53c:	83 c4 1c             	add    esp,0x1c
c001e53f:	5b                   	pop    ebx
c001e540:	5e                   	pop    esi
c001e541:	5f                   	pop    edi
c001e542:	5d                   	pop    ebp
c001e543:	c3                   	ret    

c001e544 <IDE::waitInterrupt(unsigned char)>:
c001e544:	55                   	push   ebp
c001e545:	57                   	push   edi
c001e546:	56                   	push   esi
c001e547:	53                   	push   ebx
c001e548:	31 db                	xor    ebx,ebx
c001e54a:	83 ec 0c             	sub    esp,0xc
c001e54d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e551:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e556:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e55e:	89 e8                	mov    eax,ebp
c001e560:	84 c0                	test   al,al
c001e562:	75 30                	jne    c001e594 <IDE::waitInterrupt(unsigned char)+0x50>
c001e564:	50                   	push   eax
c001e565:	6a 0c                	push   0xc
c001e567:	56                   	push   esi
c001e568:	57                   	push   edi
c001e569:	e8 28 ff ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001e56e:	83 c4 10             	add    esp,0x10
c001e571:	a8 01                	test   al,0x1
c001e573:	75 27                	jne    c001e59c <IDE::waitInterrupt(unsigned char)+0x58>
c001e575:	f6 c3 04             	test   bl,0x4
c001e578:	75 12                	jne    c001e58c <IDE::waitInterrupt(unsigned char)+0x48>
c001e57a:	83 fb 32             	cmp    ebx,0x32
c001e57d:	7e 0d                	jle    c001e58c <IDE::waitInterrupt(unsigned char)+0x48>
c001e57f:	83 ec 0c             	sub    esp,0xc
c001e582:	6a 64                	push   0x64
c001e584:	e8 c3 a3 ff ff       	call   c001894c <milliTenthSleep(unsigned int)>
c001e589:	83 c4 10             	add    esp,0x10
c001e58c:	83 fb 3c             	cmp    ebx,0x3c
c001e58f:	74 0b                	je     c001e59c <IDE::waitInterrupt(unsigned char)+0x58>
c001e591:	43                   	inc    ebx
c001e592:	eb c2                	jmp    c001e556 <IDE::waitInterrupt(unsigned char)+0x12>
c001e594:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e59c:	83 c4 0c             	add    esp,0xc
c001e59f:	89 e8                	mov    eax,ebp
c001e5a1:	5b                   	pop    ebx
c001e5a2:	5e                   	pop    esi
c001e5a3:	5f                   	pop    edi
c001e5a4:	5d                   	pop    ebp
c001e5a5:	c3                   	ret    

c001e5a6 <ideChannel0IRQHandler(regs*, void*)>:
c001e5a6:	83 ec 10             	sub    esp,0x10
c001e5a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e5ad:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e5b4:	6a 07                	push   0x7
c001e5b6:	6a 00                	push   0x0
c001e5b8:	50                   	push   eax
c001e5b9:	e8 d8 fe ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001e5be:	83 c4 1c             	add    esp,0x1c
c001e5c1:	c3                   	ret    

c001e5c2 <ideChannel1IRQHandler(regs*, void*)>:
c001e5c2:	83 ec 10             	sub    esp,0x10
c001e5c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e5c9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e5d0:	6a 07                	push   0x7
c001e5d2:	6a 01                	push   0x1
c001e5d4:	50                   	push   eax
c001e5d5:	e8 bc fe ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001e5da:	83 c4 1c             	add    esp,0x1c
c001e5dd:	c3                   	ret    

c001e5de <IDE::enableIRQs(unsigned char, bool)>:
c001e5de:	57                   	push   edi
c001e5df:	56                   	push   esi
c001e5e0:	be 04 00 00 00       	mov    esi,0x4
c001e5e5:	53                   	push   ebx
c001e5e6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e5eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e5ef:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e5f4:	0f 94 c0             	sete   al
c001e5f7:	d1 e0                	shl    eax,1
c001e5f9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001e600:	0f b6 c0             	movzx  eax,al
c001e603:	50                   	push   eax
c001e604:	6a 0c                	push   0xc
c001e606:	57                   	push   edi
c001e607:	53                   	push   ebx
c001e608:	e8 c9 fd ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e60d:	83 c4 10             	add    esp,0x10
c001e610:	50                   	push   eax
c001e611:	6a 0c                	push   0xc
c001e613:	57                   	push   edi
c001e614:	53                   	push   ebx
c001e615:	e8 7c fe ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001e61a:	83 c4 10             	add    esp,0x10
c001e61d:	4e                   	dec    esi
c001e61e:	75 f0                	jne    c001e610 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001e620:	5b                   	pop    ebx
c001e621:	5e                   	pop    esi
c001e622:	5f                   	pop    edi
c001e623:	c3                   	ret    

c001e624 <IDE::open(int, int, void*)>:
c001e624:	55                   	push   ebp
c001e625:	57                   	push   edi
c001e626:	56                   	push   esi
c001e627:	53                   	push   ebx
c001e628:	83 ec 1c             	sub    esp,0x1c
c001e62b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e62f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e638:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e641:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e648:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e64f:	0f 85 b0 02 00 00    	jne    c001e905 <IDE::open(int, int, void*)+0x2e1>
c001e655:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e65b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001e65f:	83 e0 7f             	and    eax,0x7f
c001e662:	3c 05                	cmp    al,0x5
c001e664:	74 04                	je     c001e66a <IDE::open(int, int, void*)+0x46>
c001e666:	3c 0f                	cmp    al,0xf
c001e668:	75 32                	jne    c001e69c <IDE::open(int, int, void*)+0x78>
c001e66a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e670:	83 e0 fc             	and    eax,0xfffffffc
c001e673:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e67a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e680:	83 e0 fc             	and    eax,0xfffffffc
c001e683:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e68a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e690:	83 e0 fc             	and    eax,0xfffffffc
c001e693:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e69a:	eb 14                	jmp    c001e6b0 <IDE::open(int, int, void*)+0x8c>
c001e69c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e6a6:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e6b0:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e6b7:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001e6be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e6c2:	89 c6                	mov    esi,eax
c001e6c4:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e6c9:	c1 e6 10             	shl    esi,0x10
c001e6cc:	89 e8                	mov    eax,ebp
c001e6ce:	89 fa                	mov    edx,edi
c001e6d0:	c1 e0 0b             	shl    eax,0xb
c001e6d3:	09 f0                	or     eax,esi
c001e6d5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001e6dc:	c1 e6 08             	shl    esi,0x8
c001e6df:	09 c6                	or     esi,eax
c001e6e1:	89 f0                	mov    eax,esi
c001e6e3:	0d 08 00 00 80       	or     eax,0x80000008
c001e6e8:	ef                   	out    dx,eax
c001e6e9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001e6ee:	89 ca                	mov    edx,ecx
c001e6f0:	ed                   	in     eax,dx
c001e6f1:	c1 e8 10             	shr    eax,0x10
c001e6f4:	3d ff ff 00 00       	cmp    eax,0xffff
c001e6f9:	0f 84 f5 00 00 00    	je     c001e7f4 <IDE::open(int, int, void*)+0x1d0>
c001e6ff:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001e705:	89 fa                	mov    edx,edi
c001e707:	89 f0                	mov    eax,esi
c001e709:	ef                   	out    dx,eax
c001e70a:	b0 fe                	mov    al,0xfe
c001e70c:	89 ca                	mov    edx,ecx
c001e70e:	ee                   	out    dx,al
c001e70f:	89 f0                	mov    eax,esi
c001e711:	89 fa                	mov    edx,edi
c001e713:	ef                   	out    dx,eax
c001e714:	89 ca                	mov    edx,ecx
c001e716:	ed                   	in     eax,dx
c001e717:	3c fe                	cmp    al,0xfe
c001e719:	0f 85 a9 00 00 00    	jne    c001e7c8 <IDE::open(int, int, void*)+0x1a4>
c001e71f:	8b 15 e8 7e 02 c0    	mov    edx,DWORD PTR ds:0xc0027ee8
c001e725:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001e72c:	74 33                	je     c001e761 <IDE::open(int, int, void*)+0x13d>
c001e72e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001e734:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001e738:	40                   	inc    eax
c001e739:	83 ec 0c             	sub    esp,0xc
c001e73c:	0f b6 c0             	movzx  eax,al
c001e73f:	50                   	push   eax
c001e740:	55                   	push   ebp
c001e741:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e745:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001e74b:	51                   	push   ecx
c001e74c:	e8 8b 39 ff ff       	call   c00120dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001e751:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001e756:	83 c4 1c             	add    esp,0x1c
c001e759:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e75f:	eb 0a                	jmp    c001e76b <IDE::open(int, int, void*)+0x147>
c001e761:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001e76b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e772:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e779:	c1 e1 10             	shl    ecx,0x10
c001e77c:	c1 e0 08             	shl    eax,0x8
c001e77f:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e784:	09 c1                	or     ecx,eax
c001e786:	89 fa                	mov    edx,edi
c001e788:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e78f:	c1 e0 0b             	shl    eax,0xb
c001e792:	09 c1                	or     ecx,eax
c001e794:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e79a:	89 c8                	mov    eax,ecx
c001e79c:	ef                   	out    dx,eax
c001e79d:	be fc 0c 00 00       	mov    esi,0xcfc
c001e7a2:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001e7a8:	89 f2                	mov    edx,esi
c001e7aa:	ee                   	out    dx,al
c001e7ab:	89 c8                	mov    eax,ecx
c001e7ad:	89 fa                	mov    edx,edi
c001e7af:	ef                   	out    dx,eax
c001e7b0:	89 f2                	mov    edx,esi
c001e7b2:	ed                   	in     eax,dx
c001e7b3:	0f b6 c0             	movzx  eax,al
c001e7b6:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001e7bc:	74 46                	je     c001e804 <IDE::open(int, int, void*)+0x1e0>
c001e7be:	83 ec 0c             	sub    esp,0xc
c001e7c1:	68 6c 67 02 c0       	push   0xc002676c
c001e7c6:	eb 34                	jmp    c001e7fc <IDE::open(int, int, void*)+0x1d8>
c001e7c8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001e7d1:	75 17                	jne    c001e7ea <IDE::open(int, int, void*)+0x1c6>
c001e7d3:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001e7d8:	74 07                	je     c001e7e1 <IDE::open(int, int, void*)+0x1bd>
c001e7da:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001e7df:	75 09                	jne    c001e7ea <IDE::open(int, int, void*)+0x1c6>
c001e7e1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e7e8:	eb 1a                	jmp    c001e804 <IDE::open(int, int, void*)+0x1e0>
c001e7ea:	83 ec 0c             	sub    esp,0xc
c001e7ed:	68 74 67 02 c0       	push   0xc0026774
c001e7f2:	eb 08                	jmp    c001e7fc <IDE::open(int, int, void*)+0x1d8>
c001e7f4:	83 ec 0c             	sub    esp,0xc
c001e7f7:	68 a5 67 02 c0       	push   0xc00267a5
c001e7fc:	e8 ee 60 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c001e801:	83 c4 10             	add    esp,0x10
c001e804:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001e80b:	79 1a                	jns    c001e827 <IDE::open(int, int, void*)+0x203>
c001e80d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001e813:	83 e0 fc             	and    eax,0xfffffffc
c001e816:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001e81d:	83 c0 08             	add    eax,0x8
c001e820:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001e827:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001e82d:	89 c2                	mov    edx,eax
c001e82f:	83 e2 0f             	and    edx,0xf
c001e832:	66 83 fa 08          	cmp    dx,0x8
c001e836:	75 0a                	jne    c001e842 <IDE::open(int, int, void*)+0x21e>
c001e838:	83 e8 02             	sub    eax,0x2
c001e83b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e842:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001e848:	89 c2                	mov    edx,eax
c001e84a:	83 e2 0f             	and    edx,0xf
c001e84d:	66 83 fa 08          	cmp    dx,0x8
c001e851:	75 0a                	jne    c001e85d <IDE::open(int, int, void*)+0x239>
c001e853:	83 e8 02             	sub    eax,0x2
c001e856:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e85d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001e864:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001e86b:	89 d0                	mov    eax,edx
c001e86d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e870:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e874:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001e878:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e87b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e880:	0f b6 c9             	movzx  ecx,cl
c001e883:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001e88a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e88d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e891:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001e895:	8d 50 02             	lea    edx,[eax+0x2]
c001e898:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e89d:	0f b6 d2             	movzx  edx,dl
c001e8a0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001e8a6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e8a9:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e8ad:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001e8b1:	8d 48 03             	lea    ecx,[eax+0x3]
c001e8b4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e8b9:	0f b6 c9             	movzx  ecx,cl
c001e8bc:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001e8c2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e8c5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e8c9:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001e8cd:	8d 50 04             	lea    edx,[eax+0x4]
c001e8d0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001e8d6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e8db:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001e8e2:	66 85 f6             	test   si,si
c001e8e5:	74 5b                	je     c001e942 <IDE::open(int, int, void*)+0x31e>
c001e8e7:	0f b6 d2             	movzx  edx,dl
c001e8ea:	83 c0 05             	add    eax,0x5
c001e8ed:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e8f0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e8f4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001e8f8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001e8fe:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e903:	eb 3d                	jmp    c001e942 <IDE::open(int, int, void*)+0x31e>
c001e905:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001e90b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e912:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e919:	66 05 06 02          	add    ax,0x206
c001e91d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e924:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001e92b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e932:	66 05 06 02          	add    ax,0x206
c001e936:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e93d:	e9 e5 fe ff ff       	jmp    c001e827 <IDE::open(int, int, void*)+0x203>
c001e942:	50                   	push   eax
c001e943:	50                   	push   eax
c001e944:	6a 00                	push   0x0
c001e946:	53                   	push   ebx
c001e947:	e8 64 fa ff ff       	call   c001e3b0 <IDE::prepareInterrupt(unsigned char)>
c001e94c:	5a                   	pop    edx
c001e94d:	59                   	pop    ecx
c001e94e:	6a 01                	push   0x1
c001e950:	53                   	push   ebx
c001e951:	e8 5a fa ff ff       	call   c001e3b0 <IDE::prepareInterrupt(unsigned char)>
c001e956:	83 c4 0c             	add    esp,0xc
c001e959:	6a 00                	push   0x0
c001e95b:	6a 00                	push   0x0
c001e95d:	53                   	push   ebx
c001e95e:	e8 7b fc ff ff       	call   c001e5de <IDE::enableIRQs(unsigned char, bool)>
c001e963:	83 c4 0c             	add    esp,0xc
c001e966:	6a 00                	push   0x0
c001e968:	6a 01                	push   0x1
c001e96a:	53                   	push   ebx
c001e96b:	e8 6e fc ff ff       	call   c001e5de <IDE::enableIRQs(unsigned char, bool)>
c001e970:	83 c4 10             	add    esp,0x10
c001e973:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001e97a:	74 34                	je     c001e9b0 <IDE::open(int, int, void*)+0x38c>
c001e97c:	83 ec 0c             	sub    esp,0xc
c001e97f:	53                   	push   ebx
c001e980:	6a 01                	push   0x1
c001e982:	68 a6 e5 01 c0       	push   0xc001e5a6
c001e987:	6a 0e                	push   0xe
c001e989:	53                   	push   ebx
c001e98a:	e8 8f f7 fe ff       	call   c000e11e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e98f:	83 c4 14             	add    esp,0x14
c001e992:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e998:	53                   	push   ebx
c001e999:	6a 01                	push   0x1
c001e99b:	68 c2 e5 01 c0       	push   0xc001e5c2
c001e9a0:	6a 0f                	push   0xf
c001e9a2:	53                   	push   ebx
c001e9a3:	e8 76 f7 fe ff       	call   c000e11e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e9a8:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001e9ae:	eb 38                	jmp    c001e9e8 <IDE::open(int, int, void*)+0x3c4>
c001e9b0:	83 ec 0c             	sub    esp,0xc
c001e9b3:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001e9bd:	53                   	push   ebx
c001e9be:	6a 00                	push   0x0
c001e9c0:	68 a6 e5 01 c0       	push   0xc001e5a6
c001e9c5:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001e9cb:	53                   	push   ebx
c001e9cc:	e8 4d f7 fe ff       	call   c000e11e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e9d1:	83 c4 14             	add    esp,0x14
c001e9d4:	53                   	push   ebx
c001e9d5:	6a 00                	push   0x0
c001e9d7:	68 c2 e5 01 c0       	push   0xc001e5c2
c001e9dc:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001e9e2:	53                   	push   ebx
c001e9e3:	e8 36 f7 fe ff       	call   c000e11e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e9e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e9ea:	83 c4 20             	add    esp,0x20
c001e9ed:	83 ec 0c             	sub    esp,0xc
c001e9f0:	53                   	push   ebx
c001e9f1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001e9f4:	83 c4 0c             	add    esp,0xc
c001e9f7:	6a 07                	push   0x7
c001e9f9:	6a 00                	push   0x0
c001e9fb:	53                   	push   ebx
c001e9fc:	e8 95 fa ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001ea01:	83 c4 0c             	add    esp,0xc
c001ea04:	6a 07                	push   0x7
c001ea06:	6a 01                	push   0x1
c001ea08:	53                   	push   ebx
c001ea09:	e8 88 fa ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001ea0e:	83 c4 0c             	add    esp,0xc
c001ea11:	6a 01                	push   0x1
c001ea13:	6a 00                	push   0x0
c001ea15:	53                   	push   ebx
c001ea16:	e8 c3 fb ff ff       	call   c001e5de <IDE::enableIRQs(unsigned char, bool)>
c001ea1b:	83 c4 0c             	add    esp,0xc
c001ea1e:	6a 01                	push   0x1
c001ea20:	6a 01                	push   0x1
c001ea22:	53                   	push   ebx
c001ea23:	e8 b6 fb ff ff       	call   c001e5de <IDE::enableIRQs(unsigned char, bool)>
c001ea28:	83 c4 2c             	add    esp,0x2c
c001ea2b:	31 c0                	xor    eax,eax
c001ea2d:	5b                   	pop    ebx
c001ea2e:	5e                   	pop    esi
c001ea2f:	5f                   	pop    edi
c001ea30:	5d                   	pop    ebp
c001ea31:	c3                   	ret    

c001ea32 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001ea32:	55                   	push   ebp
c001ea33:	57                   	push   edi
c001ea34:	56                   	push   esi
c001ea35:	53                   	push   ebx
c001ea36:	83 ec 1c             	sub    esp,0x1c
c001ea39:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ea3d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ea41:	8d 50 f8             	lea    edx,[eax-0x8]
c001ea44:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ea48:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ea4c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ea50:	80 fa 03             	cmp    dl,0x3
c001ea53:	77 5d                	ja     c001eab2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001ea55:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ea59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ea5d:	0f b6 db             	movzx  ebx,bl
c001ea60:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ea63:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001ea67:	83 ca 80             	or     edx,0xffffff80
c001ea6a:	0f b6 d2             	movzx  edx,dl
c001ea6d:	52                   	push   edx
c001ea6e:	6a 0c                	push   0xc
c001ea70:	53                   	push   ebx
c001ea71:	56                   	push   esi
c001ea72:	e8 5f f9 ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea77:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ea7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ea80:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ea84:	0f b6 c0             	movzx  eax,al
c001ea87:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001ea8b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ea8d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ea92:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ea96:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ea9a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ea9e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001eaa6:	83 c4 2c             	add    esp,0x2c
c001eaa9:	5b                   	pop    ebx
c001eaaa:	5e                   	pop    esi
c001eaab:	5f                   	pop    edi
c001eaac:	5d                   	pop    ebp
c001eaad:	e9 24 f9 ff ff       	jmp    c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eab2:	3c 07                	cmp    al,0x7
c001eab4:	77 10                	ja     c001eac6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001eab6:	0f b6 db             	movzx  ebx,bl
c001eab9:	0f b6 d0             	movzx  edx,al
c001eabc:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001eac4:	eb 2d                	jmp    c001eaf3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001eac6:	3c 0d                	cmp    al,0xd
c001eac8:	77 13                	ja     c001eadd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001eaca:	0f b6 db             	movzx  ebx,bl
c001eacd:	0f b6 c0             	movzx  eax,al
c001ead0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001ead7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001eadb:	eb 16                	jmp    c001eaf3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001eadd:	3c 15                	cmp    al,0x15
c001eadf:	77 14                	ja     c001eaf5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001eae1:	0f b6 db             	movzx  ebx,bl
c001eae4:	0f b6 c0             	movzx  eax,al
c001eae7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001eaef:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001eaf3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001eaf5:	83 c4 1c             	add    esp,0x1c
c001eaf8:	5b                   	pop    ebx
c001eaf9:	5e                   	pop    esi
c001eafa:	5f                   	pop    edi
c001eafb:	5d                   	pop    ebp
c001eafc:	c3                   	ret    
c001eafd:	90                   	nop

c001eafe <IDE::detect()>:
c001eafe:	55                   	push   ebp
c001eaff:	57                   	push   edi
c001eb00:	56                   	push   esi
c001eb01:	53                   	push   ebx
c001eb02:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001eb08:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001eb0f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001eb16:	0f 85 97 02 00 00    	jne    c001edb3 <IDE::detect()+0x2b5>
c001eb1c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001eb23:	31 f6                	xor    esi,esi
c001eb25:	31 ed                	xor    ebp,ebp
c001eb27:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001eb2f:	89 e8                	mov    eax,ebp
c001eb31:	c1 e0 06             	shl    eax,0x6
c001eb34:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001eb3c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001eb40:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001eb44:	c1 e0 04             	shl    eax,0x4
c001eb47:	83 c8 a0             	or     eax,0xffffffa0
c001eb4a:	0f b6 c0             	movzx  eax,al
c001eb4d:	50                   	push   eax
c001eb4e:	6a 06                	push   0x6
c001eb50:	56                   	push   esi
c001eb51:	53                   	push   ebx
c001eb52:	e8 7f f8 ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb57:	83 c4 0c             	add    esp,0xc
c001eb5a:	6a 0c                	push   0xc
c001eb5c:	56                   	push   esi
c001eb5d:	53                   	push   ebx
c001eb5e:	e8 33 f9 ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001eb63:	83 c4 0c             	add    esp,0xc
c001eb66:	6a 0c                	push   0xc
c001eb68:	56                   	push   esi
c001eb69:	53                   	push   ebx
c001eb6a:	e8 27 f9 ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001eb6f:	83 c4 0c             	add    esp,0xc
c001eb72:	6a 0c                	push   0xc
c001eb74:	56                   	push   esi
c001eb75:	53                   	push   ebx
c001eb76:	e8 1b f9 ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001eb7b:	83 c4 0c             	add    esp,0xc
c001eb7e:	6a 0c                	push   0xc
c001eb80:	56                   	push   esi
c001eb81:	53                   	push   ebx
c001eb82:	e8 0f f9 ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001eb87:	68 ec 00 00 00       	push   0xec
c001eb8c:	6a 07                	push   0x7
c001eb8e:	56                   	push   esi
c001eb8f:	53                   	push   ebx
c001eb90:	e8 41 f8 ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb95:	83 c4 1c             	add    esp,0x1c
c001eb98:	6a 0c                	push   0xc
c001eb9a:	56                   	push   esi
c001eb9b:	53                   	push   ebx
c001eb9c:	e8 f5 f8 ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001eba1:	83 c4 0c             	add    esp,0xc
c001eba4:	6a 0c                	push   0xc
c001eba6:	56                   	push   esi
c001eba7:	53                   	push   ebx
c001eba8:	e8 e9 f8 ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001ebad:	83 c4 0c             	add    esp,0xc
c001ebb0:	6a 0c                	push   0xc
c001ebb2:	56                   	push   esi
c001ebb3:	53                   	push   ebx
c001ebb4:	e8 dd f8 ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001ebb9:	83 c4 0c             	add    esp,0xc
c001ebbc:	6a 0c                	push   0xc
c001ebbe:	56                   	push   esi
c001ebbf:	53                   	push   ebx
c001ebc0:	e8 d1 f8 ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001ebc5:	83 c4 0c             	add    esp,0xc
c001ebc8:	6a 0c                	push   0xc
c001ebca:	56                   	push   esi
c001ebcb:	53                   	push   ebx
c001ebcc:	e8 c5 f8 ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001ebd1:	83 c4 10             	add    esp,0x10
c001ebd4:	84 c0                	test   al,al
c001ebd6:	0f 84 5f 01 00 00    	je     c001ed3b <IDE::detect()+0x23d>
c001ebdc:	31 ff                	xor    edi,edi
c001ebde:	50                   	push   eax
c001ebdf:	6a 0c                	push   0xc
c001ebe1:	56                   	push   esi
c001ebe2:	53                   	push   ebx
c001ebe3:	e8 ae f8 ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001ebe8:	83 c4 10             	add    esp,0x10
c001ebeb:	a8 01                	test   al,0x1
c001ebed:	0f 85 69 01 00 00    	jne    c001ed5c <IDE::detect()+0x25e>
c001ebf3:	84 c0                	test   al,al
c001ebf5:	78 04                	js     c001ebfb <IDE::detect()+0xfd>
c001ebf7:	a8 08                	test   al,0x8
c001ebf9:	75 23                	jne    c001ec1e <IDE::detect()+0x120>
c001ebfb:	47                   	inc    edi
c001ebfc:	81 ff 17 01 00 00    	cmp    edi,0x117
c001ec02:	7e da                	jle    c001ebde <IDE::detect()+0xe0>
c001ec04:	83 ec 0c             	sub    esp,0xc
c001ec07:	6a 32                	push   0x32
c001ec09:	e8 3e 9d ff ff       	call   c001894c <milliTenthSleep(unsigned int)>
c001ec0e:	83 c4 10             	add    esp,0x10
c001ec11:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001ec17:	75 c5                	jne    c001ebde <IDE::detect()+0xe0>
c001ec19:	e9 3e 01 00 00       	jmp    c001ed5c <IDE::detect()+0x25e>
c001ec1e:	31 c9                	xor    ecx,ecx
c001ec20:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ec24:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ec28:	83 ec 0c             	sub    esp,0xc
c001ec2b:	68 80 00 00 00       	push   0x80
c001ec30:	57                   	push   edi
c001ec31:	6a 00                	push   0x0
c001ec33:	56                   	push   esi
c001ec34:	53                   	push   ebx
c001ec35:	e8 f8 fd ff ff       	call   c001ea32 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ec3a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001ec3f:	89 e8                	mov    eax,ebp
c001ec41:	89 d1                	mov    ecx,edx
c001ec43:	c1 e0 06             	shl    eax,0x6
c001ec46:	01 d8                	add    eax,ebx
c001ec48:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001ec4f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001ec56:	89 f2                	mov    edx,esi
c001ec58:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001ec5e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001ec62:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001ec68:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ec6c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001ec73:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001ec7b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001ec82:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001ec8a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001ec90:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001ec97:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001ec9d:	8d 54 24 58          	lea    edx,[esp+0x58]
c001eca1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001eca5:	83 c4 20             	add    esp,0x20
c001eca8:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001ecab:	83 c0 02             	add    eax,0x2
c001ecae:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001ecb4:	83 c7 02             	add    edi,0x2
c001ecb7:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001ecba:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001ecc0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001ecc4:	75 e2                	jne    c001eca8 <IDE::detect()+0x1aa>
c001ecc6:	89 e8                	mov    eax,ebp
c001ecc8:	c1 e0 06             	shl    eax,0x6
c001eccb:	01 d8                	add    eax,ebx
c001eccd:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001ecd3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001ecda:	66 c1 ea 09          	shr    dx,0x9
c001ecde:	83 e2 01             	and    edx,0x1
c001ece1:	84 c9                	test   cl,cl
c001ece3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001ece9:	75 22                	jne    c001ed0d <IDE::detect()+0x20f>
c001eceb:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001ecf2:	74 46                	je     c001ed3a <IDE::detect()+0x23c>
c001ecf4:	83 ec 0c             	sub    esp,0xc
c001ecf7:	68 7c 01 00 00       	push   0x17c
c001ecfc:	e8 0e ad fe ff       	call   c0009a0f <malloc>
c001ed01:	89 c7                	mov    edi,eax
c001ed03:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed06:	e8 97 07 00 00       	call   c001f4a2 <ATA::ATA()>
c001ed0b:	eb 17                	jmp    c001ed24 <IDE::detect()+0x226>
c001ed0d:	83 ec 0c             	sub    esp,0xc
c001ed10:	68 80 01 00 00       	push   0x180
c001ed15:	e8 f5 ac fe ff       	call   c0009a0f <malloc>
c001ed1a:	89 c7                	mov    edi,eax
c001ed1c:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed1f:	e8 06 0e 00 00       	call   c001fb2a <ATAPI::ATAPI()>
c001ed24:	5a                   	pop    edx
c001ed25:	59                   	pop    ecx
c001ed26:	57                   	push   edi
c001ed27:	53                   	push   ebx
c001ed28:	e8 79 f4 fe ff       	call   c000e1a6 <Device::addChild(Device*)>
c001ed2d:	8b 07                	mov    eax,DWORD PTR [edi]
c001ed2f:	53                   	push   ebx
c001ed30:	55                   	push   ebp
c001ed31:	6a 00                	push   0x0
c001ed33:	57                   	push   edi
c001ed34:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ed37:	83 c4 20             	add    esp,0x20
c001ed3a:	45                   	inc    ebp
c001ed3b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001ed40:	74 0d                	je     c001ed4f <IDE::detect()+0x251>
c001ed42:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001ed4a:	e9 e0 fd ff ff       	jmp    c001eb2f <IDE::detect()+0x31>
c001ed4f:	4e                   	dec    esi
c001ed50:	74 61                	je     c001edb3 <IDE::detect()+0x2b5>
c001ed52:	be 01 00 00 00       	mov    esi,0x1
c001ed57:	e9 cb fd ff ff       	jmp    c001eb27 <IDE::detect()+0x29>
c001ed5c:	50                   	push   eax
c001ed5d:	6a 04                	push   0x4
c001ed5f:	56                   	push   esi
c001ed60:	53                   	push   ebx
c001ed61:	e8 30 f7 ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001ed66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ed6a:	83 c4 0c             	add    esp,0xc
c001ed6d:	6a 05                	push   0x5
c001ed6f:	56                   	push   esi
c001ed70:	53                   	push   ebx
c001ed71:	e8 20 f7 ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001ed76:	83 c4 10             	add    esp,0x10
c001ed79:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001ed7d:	80 fa 14             	cmp    dl,0x14
c001ed80:	75 04                	jne    c001ed86 <IDE::detect()+0x288>
c001ed82:	3c eb                	cmp    al,0xeb
c001ed84:	eb 07                	jmp    c001ed8d <IDE::detect()+0x28f>
c001ed86:	3c 96                	cmp    al,0x96
c001ed88:	75 b1                	jne    c001ed3b <IDE::detect()+0x23d>
c001ed8a:	80 fa 69             	cmp    dl,0x69
c001ed8d:	75 ac                	jne    c001ed3b <IDE::detect()+0x23d>
c001ed8f:	68 a1 00 00 00       	push   0xa1
c001ed94:	6a 07                	push   0x7
c001ed96:	56                   	push   esi
c001ed97:	53                   	push   ebx
c001ed98:	e8 39 f6 ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed9d:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001eda4:	e8 a3 9b ff ff       	call   c001894c <milliTenthSleep(unsigned int)>
c001eda9:	83 c4 10             	add    esp,0x10
c001edac:	b1 01                	mov    cl,0x1
c001edae:	e9 6d fe ff ff       	jmp    c001ec20 <IDE::detect()+0x122>
c001edb3:	81 c4 1c 02 00 00    	add    esp,0x21c
c001edb9:	5b                   	pop    ebx
c001edba:	5e                   	pop    esi
c001edbb:	5f                   	pop    edi
c001edbc:	5d                   	pop    ebp
c001edbd:	c3                   	ret    

c001edbe <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001edbe:	55                   	push   ebp
c001edbf:	57                   	push   edi
c001edc0:	56                   	push   esi
c001edc1:	53                   	push   ebx
c001edc2:	83 ec 1c             	sub    esp,0x1c
c001edc5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001edc9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001edcd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001edd1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001edd5:	88 c3                	mov    bl,al
c001edd7:	84 c0                	test   al,al
c001edd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eddd:	0f 84 81 00 00 00    	je     c001ee64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ede3:	83 ec 0c             	sub    esp,0xc
c001ede6:	68 cf 67 02 c0       	push   0xc00267cf
c001edeb:	e8 0f df fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001edf0:	83 c4 10             	add    esp,0x10
c001edf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001edf7:	3c 01                	cmp    al,0x1
c001edf9:	74 63                	je     c001ee5e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001edfb:	3c 02                	cmp    al,0x2
c001edfd:	75 53                	jne    c001ee52 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001edff:	d1 e6                	shl    esi,1
c001ee01:	09 ee                	or     esi,ebp
c001ee03:	50                   	push   eax
c001ee04:	89 f0                	mov    eax,esi
c001ee06:	6a 01                	push   0x1
c001ee08:	0f b6 f0             	movzx  esi,al
c001ee0b:	c1 e6 06             	shl    esi,0x6
c001ee0e:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001ee16:	50                   	push   eax
c001ee17:	57                   	push   edi
c001ee18:	e8 79 f6 ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001ee1d:	83 c4 10             	add    esp,0x10
c001ee20:	a8 01                	test   al,0x1
c001ee22:	74 02                	je     c001ee26 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001ee24:	b3 07                	mov    bl,0x7
c001ee26:	a8 02                	test   al,0x2
c001ee28:	74 02                	je     c001ee2c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001ee2a:	b3 03                	mov    bl,0x3
c001ee2c:	a8 04                	test   al,0x4
c001ee2e:	74 02                	je     c001ee32 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001ee30:	b3 14                	mov    bl,0x14
c001ee32:	a8 08                	test   al,0x8
c001ee34:	74 02                	je     c001ee38 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001ee36:	b3 03                	mov    bl,0x3
c001ee38:	a8 10                	test   al,0x10
c001ee3a:	74 02                	je     c001ee3e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001ee3c:	b3 15                	mov    bl,0x15
c001ee3e:	a8 20                	test   al,0x20
c001ee40:	74 02                	je     c001ee44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001ee42:	b3 03                	mov    bl,0x3
c001ee44:	a8 40                	test   al,0x40
c001ee46:	74 02                	je     c001ee4a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001ee48:	b3 16                	mov    bl,0x16
c001ee4a:	84 c0                	test   al,al
c001ee4c:	79 16                	jns    c001ee64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ee4e:	b3 0d                	mov    bl,0xd
c001ee50:	eb 12                	jmp    c001ee64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ee52:	3c 03                	cmp    al,0x3
c001ee54:	74 0c                	je     c001ee62 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001ee56:	3c 04                	cmp    al,0x4
c001ee58:	75 0a                	jne    c001ee64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ee5a:	b3 08                	mov    bl,0x8
c001ee5c:	eb 06                	jmp    c001ee64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ee5e:	b3 13                	mov    bl,0x13
c001ee60:	eb 02                	jmp    c001ee64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ee62:	b3 17                	mov    bl,0x17
c001ee64:	83 c4 1c             	add    esp,0x1c
c001ee67:	88 d8                	mov    al,bl
c001ee69:	5b                   	pop    ebx
c001ee6a:	5e                   	pop    esi
c001ee6b:	5f                   	pop    edi
c001ee6c:	5d                   	pop    ebp
c001ee6d:	c3                   	ret    

c001ee6e <IDE::polling(unsigned char, unsigned int)>:
c001ee6e:	57                   	push   edi
c001ee6f:	56                   	push   esi
c001ee70:	53                   	push   ebx
c001ee71:	bb 04 00 00 00       	mov    ebx,0x4
c001ee76:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001ee7a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ee7f:	52                   	push   edx
c001ee80:	6a 0c                	push   0xc
c001ee82:	56                   	push   esi
c001ee83:	57                   	push   edi
c001ee84:	e8 0d f6 ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001ee89:	83 c4 10             	add    esp,0x10
c001ee8c:	4b                   	dec    ebx
c001ee8d:	75 f0                	jne    c001ee7f <IDE::polling(unsigned char, unsigned int)+0x11>
c001ee8f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ee94:	50                   	push   eax
c001ee95:	6a 0c                	push   0xc
c001ee97:	56                   	push   esi
c001ee98:	57                   	push   edi
c001ee99:	e8 f8 f5 ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001ee9e:	83 c4 10             	add    esp,0x10
c001eea1:	a8 01                	test   al,0x1
c001eea3:	75 17                	jne    c001eebc <IDE::polling(unsigned char, unsigned int)+0x4e>
c001eea5:	a8 20                	test   al,0x20
c001eea7:	75 0f                	jne    c001eeb8 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001eea9:	4b                   	dec    ebx
c001eeaa:	74 10                	je     c001eebc <IDE::polling(unsigned char, unsigned int)+0x4e>
c001eeac:	84 c0                	test   al,al
c001eeae:	78 e4                	js     c001ee94 <IDE::polling(unsigned char, unsigned int)+0x26>
c001eeb0:	a8 08                	test   al,0x8
c001eeb2:	74 e0                	je     c001ee94 <IDE::polling(unsigned char, unsigned int)+0x26>
c001eeb4:	31 c0                	xor    eax,eax
c001eeb6:	eb 06                	jmp    c001eebe <IDE::polling(unsigned char, unsigned int)+0x50>
c001eeb8:	b0 01                	mov    al,0x1
c001eeba:	eb 02                	jmp    c001eebe <IDE::polling(unsigned char, unsigned int)+0x50>
c001eebc:	b0 02                	mov    al,0x2
c001eebe:	5b                   	pop    ebx
c001eebf:	5e                   	pop    esi
c001eec0:	5f                   	pop    edi
c001eec1:	c3                   	ret    

c001eec2 <SATABus::close(int, int, void*)>:
c001eec2:	31 c0                	xor    eax,eax
c001eec4:	c3                   	ret    
c001eec5:	90                   	nop

c001eec6 <SATABus::detect()>:
c001eec6:	c3                   	ret    
c001eec7:	90                   	nop

c001eec8 <SATABus::SATABus()>:
c001eec8:	83 ec 0c             	sub    esp,0xc
c001eecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eecf:	83 ec 08             	sub    esp,0x8
c001eed2:	68 08 68 02 c0       	push   0xc0026808
c001eed7:	50                   	push   eax
c001eed8:	e8 77 f6 fe ff       	call   c000e554 <HardDiskController::HardDiskController(char const*)>
c001eedd:	83 c4 10             	add    esp,0x10
c001eee0:	ba 38 69 02 c0       	mov    edx,0xc0026938
c001eee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee9:	89 10                	mov    DWORD PTR [eax],edx
c001eeeb:	83 ec 0c             	sub    esp,0xc
c001eeee:	6a 50                	push   0x50
c001eef0:	e8 bc b2 fe ff       	call   c000a1b1 <Phys::allocateContiguousPages(int)>
c001eef5:	83 c4 10             	add    esp,0x10
c001eef8:	89 c2                	mov    edx,eax
c001eefa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eefe:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ef04:	83 ec 0c             	sub    esp,0xc
c001ef07:	6a 50                	push   0x50
c001ef09:	e8 cb ca fe ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c001ef0e:	83 c4 10             	add    esp,0x10
c001ef11:	89 c2                	mov    edx,eax
c001ef13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef17:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ef1d:	a1 10 80 02 c0       	mov    eax,ds:0xc0028010
c001ef22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef26:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001ef2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef30:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ef36:	83 ec 0c             	sub    esp,0xc
c001ef39:	6a 03                	push   0x3
c001ef3b:	6a 50                	push   0x50
c001ef3d:	51                   	push   ecx
c001ef3e:	52                   	push   edx
c001ef3f:	50                   	push   eax
c001ef40:	e8 31 d4 fe ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ef45:	83 c4 20             	add    esp,0x20
c001ef48:	90                   	nop
c001ef49:	83 c4 0c             	add    esp,0xc
c001ef4c:	c3                   	ret    
c001ef4d:	90                   	nop

c001ef4e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001ef4e:	55                   	push   ebp
c001ef4f:	57                   	push   edi
c001ef50:	56                   	push   esi
c001ef51:	53                   	push   ebx
c001ef52:	83 ec 3c             	sub    esp,0x3c
c001ef55:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001ef59:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001ef60:	74 2d                	je     c001ef8f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x41>
c001ef62:	83 ec 0c             	sub    esp,0xc
c001ef65:	68 2c 68 02 c0       	push   0xc002682c
c001ef6a:	e8 fa aa fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001ef6f:	83 c4 10             	add    esp,0x10
c001ef72:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001ef79:	75 14                	jne    c001ef8f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x41>
c001ef7b:	e4 60                	in     al,0x60
c001ef7d:	3c 1c                	cmp    al,0x1c
c001ef7f:	74 04                	je     c001ef85 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x37>
c001ef81:	3c 5a                	cmp    al,0x5a
c001ef83:	75 f6                	jne    c001ef7b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2d>
c001ef85:	e4 60                	in     al,0x60
c001ef87:	3c 5a                	cmp    al,0x5a
c001ef89:	74 fa                	je     c001ef85 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x37>
c001ef8b:	3c 1c                	cmp    al,0x1c
c001ef8d:	74 f6                	je     c001ef85 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x37>
c001ef8f:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c001ef92:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001ef95:	09 c6                	or     esi,eax
c001ef97:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ef9b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001efa1:	8b 38                	mov    edi,DWORD PTR [eax]
c001efa3:	c1 ef 08             	shr    edi,0x8
c001efa6:	83 e7 0f             	and    edi,0xf
c001efa9:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001efb0:	75 04                	jne    c001efb6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x68>
c001efb2:	31 db                	xor    ebx,ebx
c001efb4:	eb 6f                	jmp    c001f025 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xd7>
c001efb6:	83 ec 0c             	sub    esp,0xc
c001efb9:	68 43 68 02 c0       	push   0xc0026843
c001efbe:	e8 a6 aa fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001efc3:	83 c4 10             	add    esp,0x10
c001efc6:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001efcd:	75 e3                	jne    c001efb2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x64>
c001efcf:	e4 60                	in     al,0x60
c001efd1:	3c 1c                	cmp    al,0x1c
c001efd3:	74 04                	je     c001efd9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x8b>
c001efd5:	3c 5a                	cmp    al,0x5a
c001efd7:	75 f6                	jne    c001efcf <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x81>
c001efd9:	e4 60                	in     al,0x60
c001efdb:	3c 5a                	cmp    al,0x5a
c001efdd:	74 fa                	je     c001efd9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x8b>
c001efdf:	3c 1c                	cmp    al,0x1c
c001efe1:	74 f6                	je     c001efd9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x8b>
c001efe3:	eb cd                	jmp    c001efb2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x64>
c001efe5:	50                   	push   eax
c001efe6:	50                   	push   eax
c001efe7:	68 5a 68 02 c0       	push   0xc002685a
c001efec:	8d 6c 24 1a          	lea    ebp,[esp+0x1a]
c001eff0:	55                   	push   ebp
c001eff1:	e8 4a 17 fe ff       	call   c0000740 <strcpy>
c001eff6:	83 c4 10             	add    esp,0x10
c001eff9:	89 d8                	mov    eax,ebx
c001effb:	b9 0a 00 00 00       	mov    ecx,0xa
c001f000:	99                   	cdq    
c001f001:	f7 f9                	idiv   ecx
c001f003:	83 c0 30             	add    eax,0x30
c001f006:	83 c2 30             	add    edx,0x30
c001f009:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001f00d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001f011:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001f018:	75 11                	jne    c001f02b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xdd>
c001f01a:	f7 c6 01 00 00 00    	test   esi,0x1
c001f020:	74 34                	je     c001f056 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x108>
c001f022:	d1 ee                	shr    esi,1
c001f024:	43                   	inc    ebx
c001f025:	39 fb                	cmp    ebx,edi
c001f027:	75 bc                	jne    c001efe5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x97>
c001f029:	eb 63                	jmp    c001f08e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x140>
c001f02b:	83 ec 0c             	sub    esp,0xc
c001f02e:	55                   	push   ebp
c001f02f:	e8 35 aa fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f034:	83 c4 10             	add    esp,0x10
c001f037:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001f03e:	75 da                	jne    c001f01a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xcc>
c001f040:	e4 60                	in     al,0x60
c001f042:	3c 1c                	cmp    al,0x1c
c001f044:	74 04                	je     c001f04a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xfc>
c001f046:	3c 5a                	cmp    al,0x5a
c001f048:	75 f6                	jne    c001f040 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xf2>
c001f04a:	e4 60                	in     al,0x60
c001f04c:	3c 5a                	cmp    al,0x5a
c001f04e:	74 fa                	je     c001f04a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xfc>
c001f050:	3c 1c                	cmp    al,0x1c
c001f052:	74 f6                	je     c001f04a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xfc>
c001f054:	eb c4                	jmp    c001f01a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xcc>
c001f056:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001f05d:	74 78                	je     c001f0d7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x189>
c001f05f:	83 ec 0c             	sub    esp,0xc
c001f062:	68 74 68 02 c0       	push   0xc0026874
c001f067:	e8 fd a9 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f06c:	83 c4 10             	add    esp,0x10
c001f06f:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001f076:	75 5f                	jne    c001f0d7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x189>
c001f078:	e4 60                	in     al,0x60
c001f07a:	3c 5a                	cmp    al,0x5a
c001f07c:	74 04                	je     c001f082 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x134>
c001f07e:	3c 1c                	cmp    al,0x1c
c001f080:	75 f6                	jne    c001f078 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x12a>
c001f082:	e4 60                	in     al,0x60
c001f084:	3c 5a                	cmp    al,0x5a
c001f086:	74 fa                	je     c001f082 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x134>
c001f088:	3c 1c                	cmp    al,0x1c
c001f08a:	74 f6                	je     c001f082 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x134>
c001f08c:	eb 49                	jmp    c001f0d7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x189>
c001f08e:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001f095:	74 2d                	je     c001f0c4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x176>
c001f097:	83 ec 0c             	sub    esp,0xc
c001f09a:	68 8b 68 02 c0       	push   0xc002688b
c001f09f:	e8 c5 a9 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f0a4:	83 c4 10             	add    esp,0x10
c001f0a7:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001f0ae:	75 14                	jne    c001f0c4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x176>
c001f0b0:	e4 60                	in     al,0x60
c001f0b2:	3c 5a                	cmp    al,0x5a
c001f0b4:	74 04                	je     c001f0ba <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x16c>
c001f0b6:	3c 1c                	cmp    al,0x1c
c001f0b8:	75 f6                	jne    c001f0b0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x162>
c001f0ba:	e4 60                	in     al,0x60
c001f0bc:	3c 5a                	cmp    al,0x5a
c001f0be:	74 fa                	je     c001f0ba <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x16c>
c001f0c0:	3c 1c                	cmp    al,0x1c
c001f0c2:	74 f6                	je     c001f0ba <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x16c>
c001f0c4:	83 ec 0c             	sub    esp,0xc
c001f0c7:	83 cb ff             	or     ebx,0xffffffff
c001f0ca:	68 a2 68 02 c0       	push   0xc00268a2
c001f0cf:	e8 1b 58 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c001f0d4:	83 c4 10             	add    esp,0x10
c001f0d7:	83 c4 3c             	add    esp,0x3c
c001f0da:	89 d8                	mov    eax,ebx
c001f0dc:	5b                   	pop    ebx
c001f0dd:	5e                   	pop    esi
c001f0de:	5f                   	pop    edi
c001f0df:	5d                   	pop    ebp
c001f0e0:	c3                   	ret    
c001f0e1:	90                   	nop

c001f0e2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f0e2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f0e6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f0e9:	89 c2                	mov    edx,eax
c001f0eb:	c1 ea 08             	shr    edx,0x8
c001f0ee:	83 e2 0f             	and    edx,0xf
c001f0f1:	fe ca                	dec    dl
c001f0f3:	75 31                	jne    c001f126 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f0f5:	83 e0 0f             	and    eax,0xf
c001f0f8:	3c 03                	cmp    al,0x3
c001f0fa:	75 2a                	jne    c001f126 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f0fc:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f0ff:	b8 02 00 00 00       	mov    eax,0x2
c001f104:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f10a:	74 1c                	je     c001f128 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f10c:	b8 04 00 00 00       	mov    eax,0x4
c001f111:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f117:	74 0f                	je     c001f128 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f119:	31 c0                	xor    eax,eax
c001f11b:	83 fa 03             	cmp    edx,0x3
c001f11e:	0f 94 c0             	sete   al
c001f121:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f125:	c3                   	ret    
c001f126:	31 c0                	xor    eax,eax
c001f128:	c3                   	ret    
c001f129:	90                   	nop

c001f12a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f12a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f12e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f131:	0f ba e2 0f          	bt     edx,0xf
c001f135:	72 f7                	jb     c001f12e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f137:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f13a:	83 ca 10             	or     edx,0x10
c001f13d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f143:	83 ca 01             	or     edx,0x1
c001f146:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f149:	c3                   	ret    

c001f14a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f14a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f14e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f151:	83 e2 fe             	and    edx,0xfffffffe
c001f154:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f157:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f15a:	83 e2 ef             	and    edx,0xffffffef
c001f15d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f160:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f163:	0f ba e2 0e          	bt     edx,0xe
c001f167:	72 f7                	jb     c001f160 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f169:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f16c:	0f ba e2 0f          	bt     edx,0xf
c001f170:	72 ee                	jb     c001f160 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f172:	c3                   	ret    
c001f173:	90                   	nop

c001f174 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f174:	55                   	push   ebp
c001f175:	57                   	push   edi
c001f176:	56                   	push   esi
c001f177:	53                   	push   ebx
c001f178:	83 ec 1c             	sub    esp,0x1c
c001f17b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f17f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f183:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f187:	53                   	push   ebx
c001f188:	89 fd                	mov    ebp,edi
c001f18a:	56                   	push   esi
c001f18b:	c1 e5 0a             	shl    ebp,0xa
c001f18e:	e8 b7 ff ff ff       	call   c001f14a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f193:	83 ec 0c             	sub    esp,0xc
c001f196:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f19c:	01 e8                	add    eax,ebp
c001f19e:	89 03                	mov    DWORD PTR [ebx],eax
c001f1a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f1a2:	68 00 04 00 00       	push   0x400
c001f1a7:	6a 00                	push   0x0
c001f1a9:	50                   	push   eax
c001f1aa:	e8 d5 14 fe ff       	call   c0000684 <memset>
c001f1af:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f1b5:	89 fa                	mov    edx,edi
c001f1b7:	01 e8                	add    eax,ebp
c001f1b9:	c1 e7 0d             	shl    edi,0xd
c001f1bc:	89 03                	mov    DWORD PTR [ebx],eax
c001f1be:	c1 e2 08             	shl    edx,0x8
c001f1c1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f1c8:	81 c2 00 80 00 00    	add    edx,0x8000
c001f1ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f1d2:	89 d0                	mov    eax,edx
c001f1d4:	83 c4 1c             	add    esp,0x1c
c001f1d7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f1dd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f1e0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f1e3:	68 00 01 00 00       	push   0x100
c001f1e8:	6a 00                	push   0x0
c001f1ea:	50                   	push   eax
c001f1eb:	e8 94 14 fe ff       	call   c0000684 <memset>
c001f1f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f1f4:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f1fa:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001f200:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f204:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f207:	83 c4 10             	add    esp,0x10
c001f20a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f211:	31 ff                	xor    edi,edi
c001f213:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f219:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f21f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f223:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f229:	83 c5 20             	add    ebp,0x20
c001f22c:	01 f8                	add    eax,edi
c001f22e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f231:	52                   	push   edx
c001f232:	68 00 01 00 00       	push   0x100
c001f237:	6a 00                	push   0x0
c001f239:	50                   	push   eax
c001f23a:	e8 45 14 fe ff       	call   c0000684 <memset>
c001f23f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f243:	83 c4 10             	add    esp,0x10
c001f246:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f24c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f253:	01 f8                	add    eax,edi
c001f255:	81 c7 00 01 00 00    	add    edi,0x100
c001f25b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f25e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f264:	75 b3                	jne    c001f219 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001f266:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001f26a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001f26e:	83 c4 1c             	add    esp,0x1c
c001f271:	5b                   	pop    ebx
c001f272:	5e                   	pop    esi
c001f273:	5f                   	pop    edi
c001f274:	5d                   	pop    ebp
c001f275:	e9 b0 fe ff ff       	jmp    c001f12a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001f27a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f27a:	55                   	push   ebp
c001f27b:	57                   	push   edi
c001f27c:	56                   	push   esi
c001f27d:	53                   	push   ebx
c001f27e:	83 ec 0c             	sub    esp,0xc
c001f281:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f285:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001f28c:	74 2d                	je     c001f2bb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f28e:	83 ec 0c             	sub    esp,0xc
c001f291:	68 c7 68 02 c0       	push   0xc00268c7
c001f296:	e8 ce a7 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f29b:	83 c4 10             	add    esp,0x10
c001f29e:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001f2a5:	75 14                	jne    c001f2bb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f2a7:	e4 60                	in     al,0x60
c001f2a9:	3c 1c                	cmp    al,0x1c
c001f2ab:	74 04                	je     c001f2b1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f2ad:	3c 5a                	cmp    al,0x5a
c001f2af:	75 f6                	jne    c001f2a7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001f2b1:	e4 60                	in     al,0x60
c001f2b3:	3c 5a                	cmp    al,0x5a
c001f2b5:	74 fa                	je     c001f2b1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f2b7:	3c 1c                	cmp    al,0x1c
c001f2b9:	74 f6                	je     c001f2b1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f2bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f2bf:	31 db                	xor    ebx,ebx
c001f2c1:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001f2c4:	f7 c5 01 00 00 00    	test   ebp,0x1
c001f2ca:	0f 84 78 01 00 00    	je     c001f448 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f2d0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f2d4:	89 d8                	mov    eax,ebx
c001f2d6:	c1 e0 07             	shl    eax,0x7
c001f2d9:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001f2e0:	50                   	push   eax
c001f2e1:	50                   	push   eax
c001f2e2:	57                   	push   edi
c001f2e3:	56                   	push   esi
c001f2e4:	e8 f9 fd ff ff       	call   c001f0e2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f2e9:	83 c4 10             	add    esp,0x10
c001f2ec:	83 f8 01             	cmp    eax,0x1
c001f2ef:	0f 85 19 01 00 00    	jne    c001f40e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001f2f5:	50                   	push   eax
c001f2f6:	53                   	push   ebx
c001f2f7:	57                   	push   edi
c001f2f8:	56                   	push   esi
c001f2f9:	e8 76 fe ff ff       	call   c001f174 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f2fe:	83 c4 10             	add    esp,0x10
c001f301:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001f308:	74 2d                	je     c001f337 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f30a:	83 ec 0c             	sub    esp,0xc
c001f30d:	68 dc 68 02 c0       	push   0xc00268dc
c001f312:	e8 52 a7 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f317:	83 c4 10             	add    esp,0x10
c001f31a:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001f321:	75 14                	jne    c001f337 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f323:	e4 60                	in     al,0x60
c001f325:	3c 1c                	cmp    al,0x1c
c001f327:	74 04                	je     c001f32d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f329:	3c 5a                	cmp    al,0x5a
c001f32b:	75 f6                	jne    c001f323 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001f32d:	e4 60                	in     al,0x60
c001f32f:	3c 5a                	cmp    al,0x5a
c001f331:	74 fa                	je     c001f32d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f333:	3c 1c                	cmp    al,0x1c
c001f335:	74 f6                	je     c001f32d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f337:	83 ec 0c             	sub    esp,0xc
c001f33a:	68 7c 01 00 00       	push   0x17c
c001f33f:	e8 cb a6 fe ff       	call   c0009a0f <malloc>
c001f344:	89 04 24             	mov    DWORD PTR [esp],eax
c001f347:	89 c7                	mov    edi,eax
c001f349:	e8 8e 0f 00 00       	call   c00202dc <SATA::SATA()>
c001f34e:	83 c4 10             	add    esp,0x10
c001f351:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001f358:	74 2d                	je     c001f387 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f35a:	83 ec 0c             	sub    esp,0xc
c001f35d:	68 f1 68 02 c0       	push   0xc00268f1
c001f362:	e8 02 a7 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f367:	83 c4 10             	add    esp,0x10
c001f36a:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001f371:	75 14                	jne    c001f387 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f373:	e4 60                	in     al,0x60
c001f375:	3c 5a                	cmp    al,0x5a
c001f377:	74 04                	je     c001f37d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f379:	3c 1c                	cmp    al,0x1c
c001f37b:	75 f6                	jne    c001f373 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001f37d:	e4 60                	in     al,0x60
c001f37f:	3c 5a                	cmp    al,0x5a
c001f381:	74 fa                	je     c001f37d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f383:	3c 1c                	cmp    al,0x1c
c001f385:	74 f6                	je     c001f37d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f387:	50                   	push   eax
c001f388:	50                   	push   eax
c001f389:	57                   	push   edi
c001f38a:	56                   	push   esi
c001f38b:	e8 16 ee fe ff       	call   c000e1a6 <Device::addChild(Device*)>
c001f390:	83 c4 10             	add    esp,0x10
c001f393:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001f39a:	74 2d                	je     c001f3c9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f39c:	83 ec 0c             	sub    esp,0xc
c001f39f:	68 06 69 02 c0       	push   0xc0026906
c001f3a4:	e8 c0 a6 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f3a9:	83 c4 10             	add    esp,0x10
c001f3ac:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001f3b3:	75 14                	jne    c001f3c9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f3b5:	e4 60                	in     al,0x60
c001f3b7:	3c 1c                	cmp    al,0x1c
c001f3b9:	74 04                	je     c001f3bf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f3bb:	3c 5a                	cmp    al,0x5a
c001f3bd:	75 f6                	jne    c001f3b5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001f3bf:	e4 60                	in     al,0x60
c001f3c1:	3c 5a                	cmp    al,0x5a
c001f3c3:	74 fa                	je     c001f3bf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f3c5:	3c 1c                	cmp    al,0x1c
c001f3c7:	74 f6                	je     c001f3bf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f3c9:	8b 07                	mov    eax,DWORD PTR [edi]
c001f3cb:	56                   	push   esi
c001f3cc:	6a 00                	push   0x0
c001f3ce:	53                   	push   ebx
c001f3cf:	57                   	push   edi
c001f3d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f3d3:	83 c4 10             	add    esp,0x10
c001f3d6:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c001f3dd:	74 69                	je     c001f448 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f3df:	83 ec 0c             	sub    esp,0xc
c001f3e2:	68 1b 69 02 c0       	push   0xc002691b
c001f3e7:	e8 7d a6 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f3ec:	83 c4 10             	add    esp,0x10
c001f3ef:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c001f3f6:	75 50                	jne    c001f448 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f3f8:	e4 60                	in     al,0x60
c001f3fa:	3c 1c                	cmp    al,0x1c
c001f3fc:	74 04                	je     c001f402 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f3fe:	3c 5a                	cmp    al,0x5a
c001f400:	75 f6                	jne    c001f3f8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001f402:	e4 60                	in     al,0x60
c001f404:	3c 5a                	cmp    al,0x5a
c001f406:	74 fa                	je     c001f402 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f408:	3c 1c                	cmp    al,0x1c
c001f40a:	74 f6                	je     c001f402 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f40c:	eb 3a                	jmp    c001f448 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f40e:	83 f8 04             	cmp    eax,0x4
c001f411:	75 35                	jne    c001f448 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f413:	50                   	push   eax
c001f414:	53                   	push   ebx
c001f415:	57                   	push   edi
c001f416:	56                   	push   esi
c001f417:	e8 58 fd ff ff       	call   c001f174 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f41c:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f423:	e8 e7 a5 fe ff       	call   c0009a0f <malloc>
c001f428:	89 04 24             	mov    DWORD PTR [esp],eax
c001f42b:	89 c7                	mov    edi,eax
c001f42d:	e8 20 17 00 00       	call   c0020b52 <SATAPI::SATAPI()>
c001f432:	5a                   	pop    edx
c001f433:	59                   	pop    ecx
c001f434:	57                   	push   edi
c001f435:	56                   	push   esi
c001f436:	e8 6b ed fe ff       	call   c000e1a6 <Device::addChild(Device*)>
c001f43b:	8b 07                	mov    eax,DWORD PTR [edi]
c001f43d:	56                   	push   esi
c001f43e:	6a 00                	push   0x0
c001f440:	53                   	push   ebx
c001f441:	57                   	push   edi
c001f442:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f445:	83 c4 20             	add    esp,0x20
c001f448:	d1 ed                	shr    ebp,1
c001f44a:	43                   	inc    ebx
c001f44b:	83 fb 20             	cmp    ebx,0x20
c001f44e:	0f 85 70 fe ff ff    	jne    c001f2c4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001f454:	83 c4 0c             	add    esp,0xc
c001f457:	5b                   	pop    ebx
c001f458:	5e                   	pop    esi
c001f459:	5f                   	pop    edi
c001f45a:	5d                   	pop    ebp
c001f45b:	c3                   	ret    

c001f45c <SATABus::open(int, int, void*)>:
c001f45c:	83 ec 14             	sub    esp,0x14
c001f45f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f463:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001f469:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001f46f:	52                   	push   edx
c001f470:	50                   	push   eax
c001f471:	e8 04 fe ff ff       	call   c001f27a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f476:	31 c0                	xor    eax,eax
c001f478:	83 c4 1c             	add    esp,0x1c
c001f47b:	c3                   	ret    

c001f47c <ATA::close(int, int, void*)>:
c001f47c:	83 ec 0c             	sub    esp,0xc
c001f47f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f483:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f489:	85 c0                	test   eax,eax
c001f48b:	74 0c                	je     c001f499 <ATA::close(int, int, void*)+0x1d>
c001f48d:	83 ec 0c             	sub    esp,0xc
c001f490:	8b 10                	mov    edx,DWORD PTR [eax]
c001f492:	50                   	push   eax
c001f493:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f496:	83 c4 10             	add    esp,0x10
c001f499:	31 c0                	xor    eax,eax
c001f49b:	83 c4 0c             	add    esp,0xc
c001f49e:	c3                   	ret    
c001f49f:	90                   	nop

c001f4a0 <ATA::powerSaving(PowerSavingLevel)>:
c001f4a0:	c3                   	ret    
c001f4a1:	90                   	nop

c001f4a2 <ATA::ATA()>:
c001f4a2:	83 ec 0c             	sub    esp,0xc
c001f4a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4a9:	83 ec 04             	sub    esp,0x4
c001f4ac:	68 00 02 00 00       	push   0x200
c001f4b1:	68 7b 6a 02 c0       	push   0xc0026a7b
c001f4b6:	50                   	push   eax
c001f4b7:	e8 22 f1 fe ff       	call   c000e5de <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f4bc:	83 c4 10             	add    esp,0x10
c001f4bf:	ba b0 69 02 c0       	mov    edx,0xc00269b0
c001f4c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c8:	89 10                	mov    DWORD PTR [eax],edx
c001f4ca:	90                   	nop
c001f4cb:	83 c4 0c             	add    esp,0xc
c001f4ce:	c3                   	ret    
c001f4cf:	90                   	nop

c001f4d0 <ATA::flush(bool)>:
c001f4d0:	53                   	push   ebx
c001f4d1:	83 ec 08             	sub    esp,0x8
c001f4d4:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001f4d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f4dd:	19 c0                	sbb    eax,eax
c001f4df:	83 e0 fd             	and    eax,0xfffffffd
c001f4e2:	05 ea 00 00 00       	add    eax,0xea
c001f4e7:	50                   	push   eax
c001f4e8:	6a 07                	push   0x7
c001f4ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f4f1:	50                   	push   eax
c001f4f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f4f8:	e8 d9 ee ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4fd:	83 c4 0c             	add    esp,0xc
c001f500:	6a 00                	push   0x0
c001f502:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f509:	50                   	push   eax
c001f50a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f510:	e8 59 f9 ff ff       	call   c001ee6e <IDE::polling(unsigned char, unsigned int)>
c001f515:	83 c4 18             	add    esp,0x18
c001f518:	5b                   	pop    ebx
c001f519:	c3                   	ret    

c001f51a <ATA::readyForCommand()>:
c001f51a:	56                   	push   esi
c001f51b:	53                   	push   ebx
c001f51c:	53                   	push   ebx
c001f51d:	31 db                	xor    ebx,ebx
c001f51f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f523:	51                   	push   ecx
c001f524:	6a 0c                	push   0xc
c001f526:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f52d:	50                   	push   eax
c001f52e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f534:	e8 5d ef ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001f539:	83 c4 10             	add    esp,0x10
c001f53c:	a8 88                	test   al,0x88
c001f53e:	74 1f                	je     c001f55f <ATA::readyForCommand()+0x45>
c001f540:	43                   	inc    ebx
c001f541:	83 fb 63             	cmp    ebx,0x63
c001f544:	7e dd                	jle    c001f523 <ATA::readyForCommand()+0x9>
c001f546:	83 ec 0c             	sub    esp,0xc
c001f549:	6a 0a                	push   0xa
c001f54b:	e8 fc 93 ff ff       	call   c001894c <milliTenthSleep(unsigned int)>
c001f550:	83 c4 10             	add    esp,0x10
c001f553:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f559:	75 c8                	jne    c001f523 <ATA::readyForCommand()+0x9>
c001f55b:	31 c0                	xor    eax,eax
c001f55d:	eb 02                	jmp    c001f561 <ATA::readyForCommand()+0x47>
c001f55f:	b0 01                	mov    al,0x1
c001f561:	5a                   	pop    edx
c001f562:	5b                   	pop    ebx
c001f563:	5e                   	pop    esi
c001f564:	c3                   	ret    
c001f565:	90                   	nop

c001f566 <ATA::access(unsigned long long, int, void*, bool)>:
c001f566:	55                   	push   ebp
c001f567:	57                   	push   edi
c001f568:	56                   	push   esi
c001f569:	53                   	push   ebx
c001f56a:	83 ec 38             	sub    esp,0x38
c001f56d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001f571:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001f575:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f579:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f57d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f581:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f585:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001f589:	68 5c 69 02 c0       	push   0xc002695c
c001f58e:	e8 6c d7 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f593:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f599:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f59d:	83 c4 10             	add    esp,0x10
c001f5a0:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f5a6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5aa:	c1 e0 06             	shl    eax,0x6
c001f5ad:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f5b5:	74 5d                	je     c001f614 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001f5b7:	89 fa                	mov    edx,edi
c001f5b9:	89 f0                	mov    eax,esi
c001f5bb:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001f5bf:	c1 ea 1c             	shr    edx,0x1c
c001f5c2:	89 d1                	mov    ecx,edx
c001f5c4:	09 c1                	or     ecx,eax
c001f5c6:	74 25                	je     c001f5ed <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001f5c8:	31 ed                	xor    ebp,ebp
c001f5ca:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f5d1:	89 fa                	mov    edx,edi
c001f5d3:	89 f0                	mov    eax,esi
c001f5d5:	0f ad d0             	shrd   eax,edx,cl
c001f5d8:	d3 ea                	shr    edx,cl
c001f5da:	f6 c1 20             	test   cl,0x20
c001f5dd:	74 02                	je     c001f5e1 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001f5df:	89 d0                	mov    eax,edx
c001f5e1:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f5e5:	45                   	inc    ebp
c001f5e6:	83 fd 06             	cmp    ebp,0x6
c001f5e9:	75 df                	jne    c001f5ca <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001f5eb:	eb 76                	jmp    c001f663 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001f5ed:	89 f0                	mov    eax,esi
c001f5ef:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f5f4:	89 fa                	mov    edx,edi
c001f5f6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f5fd:	0f ac d0 10          	shrd   eax,edx,0x10
c001f601:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f606:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f60a:	c1 ee 18             	shr    esi,0x18
c001f60d:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f612:	eb 56                	jmp    c001f66a <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f614:	6a 00                	push   0x0
c001f616:	6a 3f                	push   0x3f
c001f618:	57                   	push   edi
c001f619:	56                   	push   esi
c001f61a:	e8 85 31 00 00       	call   c00227a4 <__umoddi3>
c001f61f:	83 c4 10             	add    esp,0x10
c001f622:	40                   	inc    eax
c001f623:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f627:	6a 00                	push   0x0
c001f629:	68 f0 03 00 00       	push   0x3f0
c001f62e:	57                   	push   edi
c001f62f:	56                   	push   esi
c001f630:	e8 6f 30 00 00       	call   c00226a4 <__udivdi3>
c001f635:	83 c4 10             	add    esp,0x10
c001f638:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f63d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f644:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f649:	6a 00                	push   0x0
c001f64b:	6a 3f                	push   0x3f
c001f64d:	57                   	push   edi
c001f64e:	56                   	push   esi
c001f64f:	e8 50 30 00 00       	call   c00226a4 <__udivdi3>
c001f654:	83 c4 10             	add    esp,0x10
c001f657:	89 c6                	mov    esi,eax
c001f659:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f65e:	83 e6 0f             	and    esi,0xf
c001f661:	eb 07                	jmp    c001f66a <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f663:	31 f6                	xor    esi,esi
c001f665:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001f66a:	bf 01 00 00 00       	mov    edi,0x1
c001f66f:	50                   	push   eax
c001f670:	6a 00                	push   0x0
c001f672:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f679:	50                   	push   eax
c001f67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f67e:	e8 5b ef ff ff       	call   c001e5de <IDE::enableIRQs(unsigned char, bool)>
c001f683:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f686:	e8 8f fe ff ff       	call   c001f51a <ATA::readyForCommand()>
c001f68b:	83 c4 10             	add    esp,0x10
c001f68e:	84 c0                	test   al,al
c001f690:	0f 84 bc 02 00 00    	je     c001f952 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f696:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f69c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f6a2:	c1 e0 04             	shl    eax,0x4
c001f6a5:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001f6ac:	09 c6                	or     esi,eax
c001f6ae:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f6b3:	75 05                	jne    c001f6ba <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001f6b5:	83 ce a0             	or     esi,0xffffffa0
c001f6b8:	eb 03                	jmp    c001f6bd <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001f6ba:	83 ce e0             	or     esi,0xffffffe0
c001f6bd:	89 f0                	mov    eax,esi
c001f6bf:	0f b6 f0             	movzx  esi,al
c001f6c2:	56                   	push   esi
c001f6c3:	6a 06                	push   0x6
c001f6c5:	51                   	push   ecx
c001f6c6:	52                   	push   edx
c001f6c7:	e8 0a ed ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6cc:	83 c4 10             	add    esp,0x10
c001f6cf:	6a 00                	push   0x0
c001f6d1:	6a 01                	push   0x1
c001f6d3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f6da:	50                   	push   eax
c001f6db:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f6e1:	e8 f0 ec ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6e6:	83 c4 10             	add    esp,0x10
c001f6e9:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f6ee:	75 6e                	jne    c001f75e <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001f6f0:	6a 00                	push   0x0
c001f6f2:	6a 08                	push   0x8
c001f6f4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f6fb:	50                   	push   eax
c001f6fc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f702:	e8 cf ec ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f707:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f70c:	50                   	push   eax
c001f70d:	6a 09                	push   0x9
c001f70f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f716:	50                   	push   eax
c001f717:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f71d:	e8 b4 ec ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f722:	83 c4 20             	add    esp,0x20
c001f725:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f72a:	50                   	push   eax
c001f72b:	6a 0a                	push   0xa
c001f72d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f734:	50                   	push   eax
c001f735:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f73b:	e8 96 ec ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f740:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f745:	50                   	push   eax
c001f746:	6a 0b                	push   0xb
c001f748:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f74f:	50                   	push   eax
c001f750:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f756:	e8 7b ec ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f75b:	83 c4 20             	add    esp,0x20
c001f75e:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001f763:	50                   	push   eax
c001f764:	6a 02                	push   0x2
c001f766:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f76d:	50                   	push   eax
c001f76e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f774:	e8 5d ec ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f779:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001f77e:	50                   	push   eax
c001f77f:	6a 03                	push   0x3
c001f781:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f788:	50                   	push   eax
c001f789:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f78f:	e8 42 ec ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f794:	83 c4 20             	add    esp,0x20
c001f797:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001f79c:	50                   	push   eax
c001f79d:	6a 04                	push   0x4
c001f79f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7a6:	50                   	push   eax
c001f7a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7ad:	e8 24 ec ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7b2:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f7b7:	50                   	push   eax
c001f7b8:	6a 05                	push   0x5
c001f7ba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7c1:	50                   	push   eax
c001f7c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7c8:	e8 09 ec ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7cd:	83 c4 20             	add    esp,0x20
c001f7d0:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f7d5:	0f 94 c0             	sete   al
c001f7d8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f7dd:	74 09                	je     c001f7e8 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001f7df:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001f7e6:	eb 07                	jmp    c001f7ef <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001f7e8:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001f7ef:	0f b6 c0             	movzx  eax,al
c001f7f2:	50                   	push   eax
c001f7f3:	6a 07                	push   0x7
c001f7f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7fc:	50                   	push   eax
c001f7fd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f803:	e8 ce eb ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f808:	c7 04 24 69 69 02 c0 	mov    DWORD PTR [esp],0xc0026969
c001f80f:	e8 eb d4 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f814:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001f818:	83 c4 10             	add    esp,0x10
c001f81b:	85 f6                	test   esi,esi
c001f81d:	0f 84 f7 00 00 00    	je     c001f91a <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001f823:	83 ec 0c             	sub    esp,0xc
c001f826:	68 6c 69 02 c0       	push   0xc002696c
c001f82b:	e8 cf d4 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f830:	83 c4 0c             	add    esp,0xc
c001f833:	6a 01                	push   0x1
c001f835:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f83c:	50                   	push   eax
c001f83d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f843:	e8 26 f6 ff ff       	call   c001ee6e <IDE::polling(unsigned char, unsigned int)>
c001f848:	c7 04 24 6f 69 02 c0 	mov    DWORD PTR [esp],0xc002696f
c001f84f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f853:	e8 a7 d4 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f858:	83 c4 10             	add    esp,0x10
c001f85b:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001f85f:	84 c0                	test   al,al
c001f861:	74 2b                	je     c001f88e <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001f863:	0f b6 f8             	movzx  edi,al
c001f866:	57                   	push   edi
c001f867:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001f86e:	50                   	push   eax
c001f86f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f876:	50                   	push   eax
c001f877:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f87d:	e8 3c f5 ff ff       	call   c001edbe <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f882:	c7 04 24 72 69 02 c0 	mov    DWORD PTR [esp],0xc0026972
c001f889:	e9 bc 00 00 00       	jmp    c001f94a <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001f88e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f893:	74 50                	je     c001f8e5 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001f895:	83 ec 0c             	sub    esp,0xc
c001f898:	31 ed                	xor    ebp,ebp
c001f89a:	68 7d 69 02 c0       	push   0xc002697d
c001f89f:	e8 5b d4 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f8a4:	83 c4 10             	add    esp,0x10
c001f8a7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f8ab:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001f8af:	50                   	push   eax
c001f8b0:	50                   	push   eax
c001f8b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f8b8:	50                   	push   eax
c001f8b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f8bf:	e8 00 eb ff ff       	call   c001e3c4 <IDE::getBase(unsigned char)>
c001f8c4:	89 c2                	mov    edx,eax
c001f8c6:	89 f8                	mov    eax,edi
c001f8c8:	66 ef                	out    dx,ax
c001f8ca:	45                   	inc    ebp
c001f8cb:	83 c4 10             	add    esp,0x10
c001f8ce:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001f8d4:	75 d1                	jne    c001f8a7 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001f8d6:	83 ec 0c             	sub    esp,0xc
c001f8d9:	68 80 69 02 c0       	push   0xc0026980
c001f8de:	e8 1c d4 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f8e3:	eb 24                	jmp    c001f909 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001f8e5:	51                   	push   ecx
c001f8e6:	51                   	push   ecx
c001f8e7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f8ee:	50                   	push   eax
c001f8ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f8f5:	e8 ca ea ff ff       	call   c001e3c4 <IDE::getBase(unsigned char)>
c001f8fa:	b9 00 01 00 00       	mov    ecx,0x100
c001f8ff:	89 c2                	mov    edx,eax
c001f901:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001f905:	fc                   	cld    
c001f906:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001f909:	83 c4 10             	add    esp,0x10
c001f90c:	4e                   	dec    esi
c001f90d:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001f915:	e9 01 ff ff ff       	jmp    c001f81b <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001f91a:	31 ff                	xor    edi,edi
c001f91c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f921:	74 2f                	je     c001f952 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f923:	83 ec 0c             	sub    esp,0xc
c001f926:	68 83 69 02 c0       	push   0xc0026983
c001f92b:	e8 cf d3 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f930:	58                   	pop    eax
c001f931:	31 c0                	xor    eax,eax
c001f933:	5a                   	pop    edx
c001f934:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001f939:	0f 94 c0             	sete   al
c001f93c:	50                   	push   eax
c001f93d:	53                   	push   ebx
c001f93e:	e8 8d fb ff ff       	call   c001f4d0 <ATA::flush(bool)>
c001f943:	c7 04 24 86 69 02 c0 	mov    DWORD PTR [esp],0xc0026986
c001f94a:	e8 b0 d3 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f94f:	83 c4 10             	add    esp,0x10
c001f952:	83 c4 2c             	add    esp,0x2c
c001f955:	89 f8                	mov    eax,edi
c001f957:	5b                   	pop    ebx
c001f958:	5e                   	pop    esi
c001f959:	5f                   	pop    edi
c001f95a:	5d                   	pop    ebp
c001f95b:	c3                   	ret    

c001f95c <ATA::read(unsigned long long, int, void*)>:
c001f95c:	57                   	push   edi
c001f95d:	b8 04 00 00 00       	mov    eax,0x4
c001f962:	56                   	push   esi
c001f963:	53                   	push   ebx
c001f964:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f968:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f96c:	8d 7a ff             	lea    edi,[edx-0x1]
c001f96f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f973:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f977:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f97d:	77 25                	ja     c001f9a4 <ATA::read(unsigned long long, int, void*)+0x48>
c001f97f:	b8 06 00 00 00       	mov    eax,0x6
c001f984:	85 f6                	test   esi,esi
c001f986:	74 1c                	je     c001f9a4 <ATA::read(unsigned long long, int, void*)+0x48>
c001f988:	50                   	push   eax
c001f989:	50                   	push   eax
c001f98a:	6a 00                	push   0x0
c001f98c:	56                   	push   esi
c001f98d:	52                   	push   edx
c001f98e:	53                   	push   ebx
c001f98f:	51                   	push   ecx
c001f990:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f994:	e8 cd fb ff ff       	call   c001f566 <ATA::access(unsigned long long, int, void*, bool)>
c001f999:	83 c4 20             	add    esp,0x20
c001f99c:	85 c0                	test   eax,eax
c001f99e:	0f 95 c0             	setne  al
c001f9a1:	0f b6 c0             	movzx  eax,al
c001f9a4:	5b                   	pop    ebx
c001f9a5:	5e                   	pop    esi
c001f9a6:	5f                   	pop    edi
c001f9a7:	c3                   	ret    

c001f9a8 <ATA::write(unsigned long long, int, void*)>:
c001f9a8:	55                   	push   ebp
c001f9a9:	57                   	push   edi
c001f9aa:	56                   	push   esi
c001f9ab:	53                   	push   ebx
c001f9ac:	83 ec 18             	sub    esp,0x18
c001f9af:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f9b3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f9b7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001f9bb:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001f9bf:	68 89 69 02 c0       	push   0xc0026989
c001f9c4:	e8 36 d3 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f9c9:	8d 53 ff             	lea    edx,[ebx-0x1]
c001f9cc:	83 c4 10             	add    esp,0x10
c001f9cf:	b8 04 00 00 00       	mov    eax,0x4
c001f9d4:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001f9da:	77 25                	ja     c001fa01 <ATA::write(unsigned long long, int, void*)+0x59>
c001f9dc:	b8 06 00 00 00       	mov    eax,0x6
c001f9e1:	85 f6                	test   esi,esi
c001f9e3:	74 1c                	je     c001fa01 <ATA::write(unsigned long long, int, void*)+0x59>
c001f9e5:	50                   	push   eax
c001f9e6:	50                   	push   eax
c001f9e7:	6a 01                	push   0x1
c001f9e9:	56                   	push   esi
c001f9ea:	53                   	push   ebx
c001f9eb:	55                   	push   ebp
c001f9ec:	57                   	push   edi
c001f9ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f9f1:	e8 70 fb ff ff       	call   c001f566 <ATA::access(unsigned long long, int, void*, bool)>
c001f9f6:	83 c4 20             	add    esp,0x20
c001f9f9:	85 c0                	test   eax,eax
c001f9fb:	0f 95 c0             	setne  al
c001f9fe:	0f b6 c0             	movzx  eax,al
c001fa01:	83 c4 0c             	add    esp,0xc
c001fa04:	5b                   	pop    ebx
c001fa05:	5e                   	pop    esi
c001fa06:	5f                   	pop    edi
c001fa07:	5d                   	pop    ebp
c001fa08:	c3                   	ret    
c001fa09:	90                   	nop

c001fa0a <ATA::detectCHS()>:
c001fa0a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa0e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001fa14:	c1 e0 06             	shl    eax,0x6
c001fa17:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001fa1d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001fa27:	c7 44 24 04 95 69 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026995
c001fa2f:	e9 bb 4e ff ff       	jmp    c00148ef <Krnl::panic(char const*)>

c001fa34 <ATA::open(int, int, void*)>:
c001fa34:	53                   	push   ebx
c001fa35:	83 ec 08             	sub    esp,0x8
c001fa38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fa3c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fa40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fa44:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fa4a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fa50:	c1 e0 06             	shl    eax,0x6
c001fa53:	01 d0                	add    eax,edx
c001fa55:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001fa5c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001fa62:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001fa69:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001fa73:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001fa79:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001fa80:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001fa87:	75 0c                	jne    c001fa95 <ATA::open(int, int, void*)+0x61>
c001fa89:	83 ec 0c             	sub    esp,0xc
c001fa8c:	53                   	push   ebx
c001fa8d:	e8 78 ff ff ff       	call   c001fa0a <ATA::detectCHS()>
c001fa92:	83 c4 10             	add    esp,0x10
c001fa95:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fa9b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001faa1:	c1 e0 06             	shl    eax,0x6
c001faa4:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001faab:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fab5:	d1 e8                	shr    eax,1
c001fab7:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fabd:	6a 04                	push   0x4
c001fabf:	6a 0c                	push   0xc
c001fac1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fac8:	50                   	push   eax
c001fac9:	52                   	push   edx
c001faca:	e8 07 e9 ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001facf:	90                   	nop
c001fad0:	90                   	nop
c001fad1:	6a 00                	push   0x0
c001fad3:	6a 0c                	push   0xc
c001fad5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fadc:	50                   	push   eax
c001fadd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fae3:	e8 ee e8 ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fae8:	83 c4 14             	add    esp,0x14
c001faeb:	53                   	push   ebx
c001faec:	e8 55 eb fe ff       	call   c000e646 <PhysicalDisk::startCache()>
c001faf1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001faf4:	e8 8d 0b ff ff       	call   c0010686 <createPartitionsForDisk(PhysicalDisk*)>
c001faf9:	31 c0                	xor    eax,eax
c001fafb:	83 c4 18             	add    esp,0x18
c001fafe:	5b                   	pop    ebx
c001faff:	c3                   	ret    

c001fb00 <ATAPI::write(unsigned long long, int, void*)>:
c001fb00:	b8 03 00 00 00       	mov    eax,0x3
c001fb05:	c3                   	ret    

c001fb06 <ATAPI::close(int, int, void*)>:
c001fb06:	83 ec 0c             	sub    esp,0xc
c001fb09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb0d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fb13:	85 c0                	test   eax,eax
c001fb15:	74 0c                	je     c001fb23 <ATAPI::close(int, int, void*)+0x1d>
c001fb17:	83 ec 0c             	sub    esp,0xc
c001fb1a:	8b 10                	mov    edx,DWORD PTR [eax]
c001fb1c:	50                   	push   eax
c001fb1d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fb20:	83 c4 10             	add    esp,0x10
c001fb23:	31 c0                	xor    eax,eax
c001fb25:	83 c4 0c             	add    esp,0xc
c001fb28:	c3                   	ret    
c001fb29:	90                   	nop

c001fb2a <ATAPI::ATAPI()>:
c001fb2a:	83 ec 0c             	sub    esp,0xc
c001fb2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb31:	83 ec 04             	sub    esp,0x4
c001fb34:	68 00 08 00 00       	push   0x800
c001fb39:	68 55 6c 02 c0       	push   0xc0026c55
c001fb3e:	50                   	push   eax
c001fb3f:	e8 9a ea fe ff       	call   c000e5de <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fb44:	83 c4 10             	add    esp,0x10
c001fb47:	ba e8 69 02 c0       	mov    edx,0xc00269e8
c001fb4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb50:	89 10                	mov    DWORD PTR [eax],edx
c001fb52:	90                   	nop
c001fb53:	83 c4 0c             	add    esp,0xc
c001fb56:	c3                   	ret    
c001fb57:	90                   	nop

c001fb58 <ATAPI::readyForCommand()>:
c001fb58:	56                   	push   esi
c001fb59:	53                   	push   ebx
c001fb5a:	53                   	push   ebx
c001fb5b:	31 db                	xor    ebx,ebx
c001fb5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fb61:	51                   	push   ecx
c001fb62:	6a 0c                	push   0xc
c001fb64:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fb6b:	50                   	push   eax
c001fb6c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fb72:	e8 1f e9 ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001fb77:	83 c4 10             	add    esp,0x10
c001fb7a:	a8 88                	test   al,0x88
c001fb7c:	74 25                	je     c001fba3 <ATAPI::readyForCommand()+0x4b>
c001fb7e:	43                   	inc    ebx
c001fb7f:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001fb85:	7e da                	jle    c001fb61 <ATAPI::readyForCommand()+0x9>
c001fb87:	83 ec 0c             	sub    esp,0xc
c001fb8a:	68 5e 01 00 00       	push   0x15e
c001fb8f:	e8 b8 8d ff ff       	call   c001894c <milliTenthSleep(unsigned int)>
c001fb94:	83 c4 10             	add    esp,0x10
c001fb97:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001fb9d:	75 c2                	jne    c001fb61 <ATAPI::readyForCommand()+0x9>
c001fb9f:	31 c0                	xor    eax,eax
c001fba1:	eb 02                	jmp    c001fba5 <ATAPI::readyForCommand()+0x4d>
c001fba3:	b0 01                	mov    al,0x1
c001fba5:	5a                   	pop    edx
c001fba6:	5b                   	pop    ebx
c001fba7:	5e                   	pop    esi
c001fba8:	c3                   	ret    
c001fba9:	90                   	nop

c001fbaa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001fbaa:	55                   	push   ebp
c001fbab:	57                   	push   edi
c001fbac:	56                   	push   esi
c001fbad:	53                   	push   ebx
c001fbae:	83 ec 20             	sub    esp,0x20
c001fbb1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001fbb5:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001fbb9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001fbbd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fbc1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001fbc5:	6a 01                	push   0x1
c001fbc7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fbce:	50                   	push   eax
c001fbcf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fbd5:	e8 04 ea ff ff       	call   c001e5de <IDE::enableIRQs(unsigned char, bool)>
c001fbda:	5e                   	pop    esi
c001fbdb:	58                   	pop    eax
c001fbdc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fbe3:	50                   	push   eax
c001fbe4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fbea:	e8 c1 e7 ff ff       	call   c001e3b0 <IDE::prepareInterrupt(unsigned char)>
c001fbef:	89 3c 24             	mov    DWORD PTR [esp],edi
c001fbf2:	e8 61 ff ff ff       	call   c001fb58 <ATAPI::readyForCommand()>
c001fbf7:	83 c4 10             	add    esp,0x10
c001fbfa:	84 c0                	test   al,al
c001fbfc:	75 0a                	jne    c001fc08 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001fbfe:	bb 01 00 00 00       	mov    ebx,0x1
c001fc03:	e9 57 02 00 00       	jmp    c001fe5f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fc08:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001fc0e:	c1 e0 04             	shl    eax,0x4
c001fc11:	0f b6 c0             	movzx  eax,al
c001fc14:	50                   	push   eax
c001fc15:	6a 06                	push   0x6
c001fc17:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc1e:	50                   	push   eax
c001fc1f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc25:	e8 ac e7 ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc2a:	6a 00                	push   0x0
c001fc2c:	6a 01                	push   0x1
c001fc2e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc35:	50                   	push   eax
c001fc36:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc3c:	e8 95 e7 ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc41:	83 c4 20             	add    esp,0x20
c001fc44:	0f b6 c3             	movzx  eax,bl
c001fc47:	0f b6 df             	movzx  ebx,bh
c001fc4a:	50                   	push   eax
c001fc4b:	6a 04                	push   0x4
c001fc4d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc54:	50                   	push   eax
c001fc55:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc5b:	e8 76 e7 ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc60:	53                   	push   ebx
c001fc61:	6a 05                	push   0x5
c001fc63:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc6a:	50                   	push   eax
c001fc6b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc71:	e8 60 e7 ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc76:	83 c4 20             	add    esp,0x20
c001fc79:	68 a0 00 00 00       	push   0xa0
c001fc7e:	6a 07                	push   0x7
c001fc80:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc87:	50                   	push   eax
c001fc88:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc8e:	e8 43 e7 ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc93:	83 c4 0c             	add    esp,0xc
c001fc96:	6a 01                	push   0x1
c001fc98:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc9f:	50                   	push   eax
c001fca0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fca6:	e8 c3 f1 ff ff       	call   c001ee6e <IDE::polling(unsigned char, unsigned int)>
c001fcab:	83 c4 10             	add    esp,0x10
c001fcae:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001fcb4:	84 c0                	test   al,al
c001fcb6:	74 23                	je     c001fcdb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001fcb8:	0f b6 d8             	movzx  ebx,al
c001fcbb:	0f b6 d2             	movzx  edx,dl
c001fcbe:	53                   	push   ebx
c001fcbf:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001fcc6:	50                   	push   eax
c001fcc7:	52                   	push   edx
c001fcc8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fcce:	e8 eb f0 ff ff       	call   c001edbe <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fcd3:	83 c4 10             	add    esp,0x10
c001fcd6:	e9 84 01 00 00       	jmp    c001fe5f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fcdb:	0f b6 d2             	movzx  edx,dl
c001fcde:	53                   	push   ebx
c001fcdf:	53                   	push   ebx
c001fce0:	52                   	push   edx
c001fce1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fce7:	e8 d8 e6 ff ff       	call   c001e3c4 <IDE::getBase(unsigned char)>
c001fcec:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fcf0:	b9 06 00 00 00       	mov    ecx,0x6
c001fcf5:	89 c2                	mov    edx,eax
c001fcf7:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001fcfa:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001fcfe:	83 c4 10             	add    esp,0x10
c001fd01:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fd07:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fd0e:	85 db                	test   ebx,ebx
c001fd10:	0f 84 ec 00 00 00    	je     c001fe02 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001fd16:	51                   	push   ecx
c001fd17:	51                   	push   ecx
c001fd18:	52                   	push   edx
c001fd19:	50                   	push   eax
c001fd1a:	e8 25 e8 ff ff       	call   c001e544 <IDE::waitInterrupt(unsigned char)>
c001fd1f:	83 c4 10             	add    esp,0x10
c001fd22:	84 c0                	test   al,al
c001fd24:	0f 84 d4 fe ff ff    	je     c001fbfe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fd2a:	56                   	push   esi
c001fd2b:	56                   	push   esi
c001fd2c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd33:	50                   	push   eax
c001fd34:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd3a:	e8 71 e6 ff ff       	call   c001e3b0 <IDE::prepareInterrupt(unsigned char)>
c001fd3f:	83 c4 0c             	add    esp,0xc
c001fd42:	6a 04                	push   0x4
c001fd44:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd4b:	50                   	push   eax
c001fd4c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd52:	e8 3f e7 ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001fd57:	83 c4 0c             	add    esp,0xc
c001fd5a:	89 c6                	mov    esi,eax
c001fd5c:	6a 05                	push   0x5
c001fd5e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd65:	50                   	push   eax
c001fd66:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd6c:	e8 25 e7 ff ff       	call   c001e496 <IDE::read(unsigned char, unsigned char)>
c001fd71:	89 f1                	mov    ecx,esi
c001fd73:	0f b6 c0             	movzx  eax,al
c001fd76:	0f b6 f1             	movzx  esi,cl
c001fd79:	c1 e0 08             	shl    eax,0x8
c001fd7c:	09 c6                	or     esi,eax
c001fd7e:	d1 fe                	sar    esi,1
c001fd80:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001fd84:	83 c4 10             	add    esp,0x10
c001fd87:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001fd8c:	74 41                	je     c001fdcf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001fd8e:	31 c9                	xor    ecx,ecx
c001fd90:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fd96:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fd9d:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001fda1:	75 0a                	jne    c001fdad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001fda3:	01 c9                	add    ecx,ecx
c001fda5:	01 cd                	add    ebp,ecx
c001fda7:	4b                   	dec    ebx
c001fda8:	e9 54 ff ff ff       	jmp    c001fd01 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001fdad:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001fdb2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001fdb6:	51                   	push   ecx
c001fdb7:	51                   	push   ecx
c001fdb8:	52                   	push   edx
c001fdb9:	50                   	push   eax
c001fdba:	e8 05 e6 ff ff       	call   c001e3c4 <IDE::getBase(unsigned char)>
c001fdbf:	89 c2                	mov    edx,eax
c001fdc1:	89 f0                	mov    eax,esi
c001fdc3:	66 ef                	out    dx,ax
c001fdc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001fdc9:	83 c4 10             	add    esp,0x10
c001fdcc:	41                   	inc    ecx
c001fdcd:	eb c1                	jmp    c001fd90 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001fdcf:	31 f6                	xor    esi,esi
c001fdd1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fdd7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fdde:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001fde2:	75 06                	jne    c001fdea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001fde4:	01 f6                	add    esi,esi
c001fde6:	01 f5                	add    ebp,esi
c001fde8:	eb bd                	jmp    c001fda7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001fdea:	51                   	push   ecx
c001fdeb:	51                   	push   ecx
c001fdec:	52                   	push   edx
c001fded:	50                   	push   eax
c001fdee:	e8 d1 e5 ff ff       	call   c001e3c4 <IDE::getBase(unsigned char)>
c001fdf3:	89 c2                	mov    edx,eax
c001fdf5:	66 ed                	in     ax,dx
c001fdf7:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001fdfc:	83 c4 10             	add    esp,0x10
c001fdff:	46                   	inc    esi
c001fe00:	eb cf                	jmp    c001fdd1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001fe02:	51                   	push   ecx
c001fe03:	51                   	push   ecx
c001fe04:	52                   	push   edx
c001fe05:	50                   	push   eax
c001fe06:	e8 39 e7 ff ff       	call   c001e544 <IDE::waitInterrupt(unsigned char)>
c001fe0b:	83 c4 10             	add    esp,0x10
c001fe0e:	84 c0                	test   al,al
c001fe10:	0f 84 e8 fd ff ff    	je     c001fbfe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fe16:	bb a0 86 01 00       	mov    ebx,0x186a0
c001fe1b:	52                   	push   edx
c001fe1c:	52                   	push   edx
c001fe1d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe24:	50                   	push   eax
c001fe25:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe2b:	e8 80 e5 ff ff       	call   c001e3b0 <IDE::prepareInterrupt(unsigned char)>
c001fe30:	83 c4 10             	add    esp,0x10
c001fe33:	50                   	push   eax
c001fe34:	50                   	push   eax
c001fe35:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe3c:	50                   	push   eax
c001fe3d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe43:	e8 7c e5 ff ff       	call   c001e3c4 <IDE::getBase(unsigned char)>
c001fe48:	8d 50 07             	lea    edx,[eax+0x7]
c001fe4b:	ec                   	in     al,dx
c001fe4c:	83 c4 10             	add    esp,0x10
c001fe4f:	a8 88                	test   al,0x88
c001fe51:	74 0a                	je     c001fe5d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001fe53:	4b                   	dec    ebx
c001fe54:	75 dd                	jne    c001fe33 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001fe56:	bb 02 00 00 00       	mov    ebx,0x2
c001fe5b:	eb 02                	jmp    c001fe5f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fe5d:	31 db                	xor    ebx,ebx
c001fe5f:	83 c4 1c             	add    esp,0x1c
c001fe62:	89 d8                	mov    eax,ebx
c001fe64:	5b                   	pop    ebx
c001fe65:	5e                   	pop    esi
c001fe66:	5f                   	pop    edi
c001fe67:	5d                   	pop    ebp
c001fe68:	c3                   	ret    
c001fe69:	90                   	nop

c001fe6a <ATAPI::diskRemoved()>:
c001fe6a:	83 ec 18             	sub    esp,0x18
c001fe6d:	68 61 6c 02 c0       	push   0xc0026c61
c001fe72:	e8 88 ce fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001fe77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe7b:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001fe82:	83 c4 1c             	add    esp,0x1c
c001fe85:	c3                   	ret    

c001fe86 <ATAPI::eject()>:
c001fe86:	57                   	push   edi
c001fe87:	b9 03 00 00 00       	mov    ecx,0x3
c001fe8c:	53                   	push   ebx
c001fe8d:	83 ec 14             	sub    esp,0x14
c001fe90:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001fe94:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fe98:	fc                   	cld    
c001fe99:	31 c0                	xor    eax,eax
c001fe9b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fe9d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001fea2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001fea7:	50                   	push   eax
c001fea8:	50                   	push   eax
c001fea9:	6a 00                	push   0x0
c001feab:	6a 00                	push   0x0
c001fead:	6a 00                	push   0x0
c001feaf:	6a 02                	push   0x2
c001feb1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001feb5:	50                   	push   eax
c001feb6:	53                   	push   ebx
c001feb7:	e8 ee fc ff ff       	call   c001fbaa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001febc:	83 c4 14             	add    esp,0x14
c001febf:	53                   	push   ebx
c001fec0:	e8 a5 ff ff ff       	call   c001fe6a <ATAPI::diskRemoved()>
c001fec5:	83 c4 24             	add    esp,0x24
c001fec8:	31 c0                	xor    eax,eax
c001feca:	5b                   	pop    ebx
c001fecb:	5f                   	pop    edi
c001fecc:	c3                   	ret    
c001fecd:	90                   	nop

c001fece <ATAPI::diskInserted()>:
c001fece:	53                   	push   ebx
c001fecf:	83 ec 14             	sub    esp,0x14
c001fed2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001fed6:	68 95 6c 02 c0       	push   0xc0026c95
c001fedb:	e8 1f ce fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001fee0:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001fee7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001feea:	e8 57 e7 fe ff       	call   c000e646 <PhysicalDisk::startCache()>
c001feef:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001fef3:	83 c4 18             	add    esp,0x18
c001fef6:	5b                   	pop    ebx
c001fef7:	e9 8a 07 ff ff       	jmp    c0010686 <createPartitionsForDisk(PhysicalDisk*)>

c001fefc <ATAPI::detectMedia()>:
c001fefc:	56                   	push   esi
c001fefd:	53                   	push   ebx
c001fefe:	83 ec 28             	sub    esp,0x28
c001ff01:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ff05:	6a 0c                	push   0xc
c001ff07:	6a 00                	push   0x0
c001ff09:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ff0d:	56                   	push   esi
c001ff0e:	e8 71 07 fe ff       	call   c0000684 <memset>
c001ff13:	58                   	pop    eax
c001ff14:	5a                   	pop    edx
c001ff15:	6a 00                	push   0x0
c001ff17:	6a 00                	push   0x0
c001ff19:	6a 00                	push   0x0
c001ff1b:	6a 00                	push   0x0
c001ff1d:	56                   	push   esi
c001ff1e:	53                   	push   ebx
c001ff1f:	e8 86 fc ff ff       	call   c001fbaa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ff24:	83 c4 1c             	add    esp,0x1c
c001ff27:	6a 0c                	push   0xc
c001ff29:	6a 00                	push   0x0
c001ff2b:	56                   	push   esi
c001ff2c:	e8 53 07 fe ff       	call   c0000684 <memset>
c001ff31:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001ff36:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001ff3b:	59                   	pop    ecx
c001ff3c:	58                   	pop    eax
c001ff3d:	6a 01                	push   0x1
c001ff3f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001ff43:	50                   	push   eax
c001ff44:	6a 00                	push   0x0
c001ff46:	6a 12                	push   0x12
c001ff48:	56                   	push   esi
c001ff49:	53                   	push   ebx
c001ff4a:	e8 5b fc ff ff       	call   c001fbaa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ff4f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001ff53:	83 c4 20             	add    esp,0x20
c001ff56:	83 e0 7f             	and    eax,0x7f
c001ff59:	3c 70                	cmp    al,0x70
c001ff5b:	74 15                	je     c001ff72 <ATAPI::detectMedia()+0x76>
c001ff5d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ff64:	75 0c                	jne    c001ff72 <ATAPI::detectMedia()+0x76>
c001ff66:	83 ec 0c             	sub    esp,0xc
c001ff69:	53                   	push   ebx
c001ff6a:	e8 5f ff ff ff       	call   c001fece <ATAPI::diskInserted()>
c001ff6f:	83 c4 10             	add    esp,0x10
c001ff72:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ff76:	83 e0 0f             	and    eax,0xf
c001ff79:	3c 02                	cmp    al,0x2
c001ff7b:	75 1b                	jne    c001ff98 <ATAPI::detectMedia()+0x9c>
c001ff7d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001ff82:	75 2d                	jne    c001ffb1 <ATAPI::detectMedia()+0xb5>
c001ff84:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ff8b:	74 24                	je     c001ffb1 <ATAPI::detectMedia()+0xb5>
c001ff8d:	83 ec 0c             	sub    esp,0xc
c001ff90:	53                   	push   ebx
c001ff91:	e8 d4 fe ff ff       	call   c001fe6a <ATAPI::diskRemoved()>
c001ff96:	eb 16                	jmp    c001ffae <ATAPI::detectMedia()+0xb2>
c001ff98:	84 c0                	test   al,al
c001ff9a:	75 15                	jne    c001ffb1 <ATAPI::detectMedia()+0xb5>
c001ff9c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ffa3:	75 0c                	jne    c001ffb1 <ATAPI::detectMedia()+0xb5>
c001ffa5:	83 ec 0c             	sub    esp,0xc
c001ffa8:	53                   	push   ebx
c001ffa9:	e8 20 ff ff ff       	call   c001fece <ATAPI::diskInserted()>
c001ffae:	83 c4 10             	add    esp,0x10
c001ffb1:	83 c4 24             	add    esp,0x24
c001ffb4:	5b                   	pop    ebx
c001ffb5:	5e                   	pop    esi
c001ffb6:	c3                   	ret    
c001ffb7:	90                   	nop

c001ffb8 <ATAPI::open(int, int, void*)>:
c001ffb8:	53                   	push   ebx
c001ffb9:	83 ec 08             	sub    esp,0x8
c001ffbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ffc0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ffc4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ffc8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ffce:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ffd4:	c1 e0 06             	shl    eax,0x6
c001ffd7:	01 d0                	add    eax,edx
c001ffd9:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001ffe0:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001ffe6:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001ffed:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001fff7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001fffd:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020004:	6a 04                	push   0x4
c0020006:	6a 0c                	push   0xc
c0020008:	51                   	push   ecx
c0020009:	52                   	push   edx
c002000a:	e8 c7 e3 ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002000f:	90                   	nop
c0020010:	90                   	nop
c0020011:	6a 00                	push   0x0
c0020013:	6a 0c                	push   0xc
c0020015:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002001c:	50                   	push   eax
c002001d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020023:	e8 ae e3 ff ff       	call   c001e3d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020028:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002002f:	83 c4 14             	add    esp,0x14
c0020032:	53                   	push   ebx
c0020033:	e8 c4 fe ff ff       	call   c001fefc <ATAPI::detectMedia()>
c0020038:	31 c0                	xor    eax,eax
c002003a:	83 c4 18             	add    esp,0x18
c002003d:	5b                   	pop    ebx
c002003e:	c3                   	ret    
c002003f:	90                   	nop

c0020040 <ATAPI::read(unsigned long long, int, void*)>:
c0020040:	55                   	push   ebp
c0020041:	57                   	push   edi
c0020042:	56                   	push   esi
c0020043:	53                   	push   ebx
c0020044:	83 ec 1c             	sub    esp,0x1c
c0020047:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002004b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002004f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020053:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002005a:	74 41                	je     c002009d <ATAPI::read(unsigned long long, int, void*)+0x5d>
c002005c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020060:	b9 03 00 00 00       	mov    ecx,0x3
c0020065:	fc                   	cld    
c0020066:	31 c0                	xor    eax,eax
c0020068:	86 fb                	xchg   bl,bh
c002006a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002006c:	c1 c3 10             	rol    ebx,0x10
c002006f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020074:	89 e8                	mov    eax,ebp
c0020076:	86 fb                	xchg   bl,bh
c0020078:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002007c:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0020080:	50                   	push   eax
c0020081:	50                   	push   eax
c0020082:	55                   	push   ebp
c0020083:	c1 e5 0b             	shl    ebp,0xb
c0020086:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002008a:	6a 00                	push   0x0
c002008c:	55                   	push   ebp
c002008d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020091:	50                   	push   eax
c0020092:	56                   	push   esi
c0020093:	e8 12 fb ff ff       	call   c001fbaa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020098:	83 c4 20             	add    esp,0x20
c002009b:	eb 1a                	jmp    c00200b7 <ATAPI::read(unsigned long long, int, void*)+0x77>
c002009d:	83 ec 0c             	sub    esp,0xc
c00200a0:	56                   	push   esi
c00200a1:	e8 56 fe ff ff       	call   c001fefc <ATAPI::detectMedia()>
c00200a6:	83 c4 10             	add    esp,0x10
c00200a9:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00200b0:	75 aa                	jne    c002005c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00200b2:	b8 02 00 00 00       	mov    eax,0x2
c00200b7:	83 c4 1c             	add    esp,0x1c
c00200ba:	5b                   	pop    ebx
c00200bb:	5e                   	pop    esi
c00200bc:	5f                   	pop    edi
c00200bd:	5d                   	pop    ebp
c00200be:	c3                   	ret    
c00200bf:	90                   	nop

c00200c0 <SATA::close(int, int, void*)>:
c00200c0:	83 ec 0c             	sub    esp,0xc
c00200c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00200cd:	85 c0                	test   eax,eax
c00200cf:	74 0c                	je     c00200dd <SATA::close(int, int, void*)+0x1d>
c00200d1:	83 ec 0c             	sub    esp,0xc
c00200d4:	8b 10                	mov    edx,DWORD PTR [eax]
c00200d6:	50                   	push   eax
c00200d7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00200da:	83 c4 10             	add    esp,0x10
c00200dd:	31 c0                	xor    eax,eax
c00200df:	83 c4 0c             	add    esp,0xc
c00200e2:	c3                   	ret    
c00200e3:	90                   	nop

c00200e4 <SATA::powerSaving(PowerSavingLevel)>:
c00200e4:	c3                   	ret    
c00200e5:	90                   	nop

c00200e6 <SATA::open(int, int, void*)>:
c00200e6:	56                   	push   esi
c00200e7:	53                   	push   ebx
c00200e8:	51                   	push   ecx
c00200e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00200ed:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c00200f4:	74 2d                	je     c0020123 <SATA::open(int, int, void*)+0x3d>
c00200f6:	83 ec 0c             	sub    esp,0xc
c00200f9:	68 18 6a 02 c0       	push   0xc0026a18
c00200fe:	e8 66 99 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020103:	83 c4 10             	add    esp,0x10
c0020106:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c002010d:	75 14                	jne    c0020123 <SATA::open(int, int, void*)+0x3d>
c002010f:	e4 60                	in     al,0x60
c0020111:	3c 5a                	cmp    al,0x5a
c0020113:	74 04                	je     c0020119 <SATA::open(int, int, void*)+0x33>
c0020115:	3c 1c                	cmp    al,0x1c
c0020117:	75 f6                	jne    c002010f <SATA::open(int, int, void*)+0x29>
c0020119:	e4 60                	in     al,0x60
c002011b:	3c 5a                	cmp    al,0x5a
c002011d:	74 fa                	je     c0020119 <SATA::open(int, int, void*)+0x33>
c002011f:	3c 1c                	cmp    al,0x1c
c0020121:	74 f6                	je     c0020119 <SATA::open(int, int, void*)+0x33>
c0020123:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020127:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020131:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020137:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020141:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020145:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002014f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020155:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002015c:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c0020163:	74 2d                	je     c0020192 <SATA::open(int, int, void*)+0xac>
c0020165:	83 ec 0c             	sub    esp,0xc
c0020168:	68 25 6a 02 c0       	push   0xc0026a25
c002016d:	e8 f7 98 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020172:	83 c4 10             	add    esp,0x10
c0020175:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c002017c:	75 14                	jne    c0020192 <SATA::open(int, int, void*)+0xac>
c002017e:	e4 60                	in     al,0x60
c0020180:	3c 1c                	cmp    al,0x1c
c0020182:	74 04                	je     c0020188 <SATA::open(int, int, void*)+0xa2>
c0020184:	3c 5a                	cmp    al,0x5a
c0020186:	75 f6                	jne    c002017e <SATA::open(int, int, void*)+0x98>
c0020188:	e4 60                	in     al,0x60
c002018a:	3c 5a                	cmp    al,0x5a
c002018c:	74 fa                	je     c0020188 <SATA::open(int, int, void*)+0xa2>
c002018e:	3c 1c                	cmp    al,0x1c
c0020190:	74 f6                	je     c0020188 <SATA::open(int, int, void*)+0xa2>
c0020192:	e8 2f 9f fe ff       	call   c000a0c6 <Phys::allocatePage()>
c0020197:	89 c6                	mov    esi,eax
c0020199:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002019f:	81 c6 00 10 00 00    	add    esi,0x1000
c00201a5:	e8 1c 9f fe ff       	call   c000a0c6 <Phys::allocatePage()>
c00201aa:	39 c6                	cmp    esi,eax
c00201ac:	74 10                	je     c00201be <SATA::open(int, int, void*)+0xd8>
c00201ae:	83 ec 0c             	sub    esp,0xc
c00201b1:	68 32 6a 02 c0       	push   0xc0026a32
c00201b6:	e8 34 47 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c00201bb:	83 c4 10             	add    esp,0x10
c00201be:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c00201c5:	74 2d                	je     c00201f4 <SATA::open(int, int, void*)+0x10e>
c00201c7:	83 ec 0c             	sub    esp,0xc
c00201ca:	68 46 6a 02 c0       	push   0xc0026a46
c00201cf:	e8 95 98 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00201d4:	83 c4 10             	add    esp,0x10
c00201d7:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c00201de:	75 14                	jne    c00201f4 <SATA::open(int, int, void*)+0x10e>
c00201e0:	e4 60                	in     al,0x60
c00201e2:	3c 1c                	cmp    al,0x1c
c00201e4:	74 04                	je     c00201ea <SATA::open(int, int, void*)+0x104>
c00201e6:	3c 5a                	cmp    al,0x5a
c00201e8:	75 f6                	jne    c00201e0 <SATA::open(int, int, void*)+0xfa>
c00201ea:	e4 60                	in     al,0x60
c00201ec:	3c 5a                	cmp    al,0x5a
c00201ee:	74 fa                	je     c00201ea <SATA::open(int, int, void*)+0x104>
c00201f0:	3c 1c                	cmp    al,0x1c
c00201f2:	74 f6                	je     c00201ea <SATA::open(int, int, void*)+0x104>
c00201f4:	83 ec 0c             	sub    esp,0xc
c00201f7:	6a 02                	push   0x2
c00201f9:	e8 db b7 fe ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c00201fe:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020204:	6a 03                	push   0x3
c0020206:	50                   	push   eax
c0020207:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002020d:	ff 35 10 80 02 c0    	push   DWORD PTR ds:0xc0028010
c0020213:	e8 68 be fe ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020218:	83 c4 20             	add    esp,0x20
c002021b:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c0020222:	74 2d                	je     c0020251 <SATA::open(int, int, void*)+0x16b>
c0020224:	83 ec 0c             	sub    esp,0xc
c0020227:	68 53 6a 02 c0       	push   0xc0026a53
c002022c:	e8 38 98 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020231:	83 c4 10             	add    esp,0x10
c0020234:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c002023b:	75 14                	jne    c0020251 <SATA::open(int, int, void*)+0x16b>
c002023d:	e4 60                	in     al,0x60
c002023f:	3c 1c                	cmp    al,0x1c
c0020241:	74 04                	je     c0020247 <SATA::open(int, int, void*)+0x161>
c0020243:	3c 5a                	cmp    al,0x5a
c0020245:	75 f6                	jne    c002023d <SATA::open(int, int, void*)+0x157>
c0020247:	e4 60                	in     al,0x60
c0020249:	3c 5a                	cmp    al,0x5a
c002024b:	74 fa                	je     c0020247 <SATA::open(int, int, void*)+0x161>
c002024d:	3c 1c                	cmp    al,0x1c
c002024f:	74 f6                	je     c0020247 <SATA::open(int, int, void*)+0x161>
c0020251:	83 ec 0c             	sub    esp,0xc
c0020254:	53                   	push   ebx
c0020255:	e8 ec e3 fe ff       	call   c000e646 <PhysicalDisk::startCache()>
c002025a:	83 c4 10             	add    esp,0x10
c002025d:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c0020264:	74 2d                	je     c0020293 <SATA::open(int, int, void*)+0x1ad>
c0020266:	83 ec 0c             	sub    esp,0xc
c0020269:	68 60 6a 02 c0       	push   0xc0026a60
c002026e:	e8 f6 97 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020273:	83 c4 10             	add    esp,0x10
c0020276:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c002027d:	75 14                	jne    c0020293 <SATA::open(int, int, void*)+0x1ad>
c002027f:	e4 60                	in     al,0x60
c0020281:	3c 1c                	cmp    al,0x1c
c0020283:	74 04                	je     c0020289 <SATA::open(int, int, void*)+0x1a3>
c0020285:	3c 5a                	cmp    al,0x5a
c0020287:	75 f6                	jne    c002027f <SATA::open(int, int, void*)+0x199>
c0020289:	e4 60                	in     al,0x60
c002028b:	3c 5a                	cmp    al,0x5a
c002028d:	74 fa                	je     c0020289 <SATA::open(int, int, void*)+0x1a3>
c002028f:	3c 1c                	cmp    al,0x1c
c0020291:	74 f6                	je     c0020289 <SATA::open(int, int, void*)+0x1a3>
c0020293:	83 ec 0c             	sub    esp,0xc
c0020296:	53                   	push   ebx
c0020297:	e8 ea 03 ff ff       	call   c0010686 <createPartitionsForDisk(PhysicalDisk*)>
c002029c:	83 c4 10             	add    esp,0x10
c002029f:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c00202a6:	74 2d                	je     c00202d5 <SATA::open(int, int, void*)+0x1ef>
c00202a8:	83 ec 0c             	sub    esp,0xc
c00202ab:	68 6d 6a 02 c0       	push   0xc0026a6d
c00202b0:	e8 b4 97 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00202b5:	83 c4 10             	add    esp,0x10
c00202b8:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c00202bf:	75 14                	jne    c00202d5 <SATA::open(int, int, void*)+0x1ef>
c00202c1:	e4 60                	in     al,0x60
c00202c3:	3c 1c                	cmp    al,0x1c
c00202c5:	74 04                	je     c00202cb <SATA::open(int, int, void*)+0x1e5>
c00202c7:	3c 5a                	cmp    al,0x5a
c00202c9:	75 f6                	jne    c00202c1 <SATA::open(int, int, void*)+0x1db>
c00202cb:	e4 60                	in     al,0x60
c00202cd:	3c 5a                	cmp    al,0x5a
c00202cf:	74 fa                	je     c00202cb <SATA::open(int, int, void*)+0x1e5>
c00202d1:	3c 1c                	cmp    al,0x1c
c00202d3:	74 f6                	je     c00202cb <SATA::open(int, int, void*)+0x1e5>
c00202d5:	5a                   	pop    edx
c00202d6:	31 c0                	xor    eax,eax
c00202d8:	5b                   	pop    ebx
c00202d9:	5e                   	pop    esi
c00202da:	c3                   	ret    
c00202db:	90                   	nop

c00202dc <SATA::SATA()>:
c00202dc:	83 ec 0c             	sub    esp,0xc
c00202df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202e3:	83 ec 04             	sub    esp,0x4
c00202e6:	68 00 02 00 00       	push   0x200
c00202eb:	68 7a 6a 02 c0       	push   0xc0026a7a
c00202f0:	50                   	push   eax
c00202f1:	e8 e8 e2 fe ff       	call   c000e5de <PhysicalDisk::PhysicalDisk(char const*, int)>
c00202f6:	83 c4 10             	add    esp,0x10
c00202f9:	ba 24 6c 02 c0       	mov    edx,0xc0026c24
c00202fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020302:	89 10                	mov    DWORD PTR [eax],edx
c0020304:	90                   	nop
c0020305:	83 c4 0c             	add    esp,0xc
c0020308:	c3                   	ret    
c0020309:	90                   	nop

c002030a <SATA::access(unsigned long long, int, void*, bool)>:
c002030a:	55                   	push   ebp
c002030b:	57                   	push   edi
c002030c:	56                   	push   esi
c002030d:	53                   	push   ebx
c002030e:	83 ec 2c             	sub    esp,0x2c
c0020311:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020315:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020319:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002031d:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c0020324:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020328:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002032c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020330:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020334:	75 19                	jne    c002034f <SATA::access(unsigned long long, int, void*, bool)+0x45>
c0020336:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002033b:	7e 41                	jle    c002037e <SATA::access(unsigned long long, int, void*, bool)+0x74>
c002033d:	83 ec 0c             	sub    esp,0xc
c0020340:	68 99 6a 02 c0       	push   0xc0026a99
c0020345:	e8 a5 45 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c002034a:	83 c4 10             	add    esp,0x10
c002034d:	eb 2f                	jmp    c002037e <SATA::access(unsigned long long, int, void*, bool)+0x74>
c002034f:	83 ec 0c             	sub    esp,0xc
c0020352:	68 8a 6a 02 c0       	push   0xc0026a8a
c0020357:	e8 0d 97 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002035c:	83 c4 10             	add    esp,0x10
c002035f:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c0020366:	75 ce                	jne    c0020336 <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020368:	e4 60                	in     al,0x60
c002036a:	3c 1c                	cmp    al,0x1c
c002036c:	74 04                	je     c0020372 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c002036e:	3c 5a                	cmp    al,0x5a
c0020370:	75 f6                	jne    c0020368 <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c0020372:	e4 60                	in     al,0x60
c0020374:	3c 5a                	cmp    al,0x5a
c0020376:	74 fa                	je     c0020372 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020378:	3c 1c                	cmp    al,0x1c
c002037a:	74 f6                	je     c0020372 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c002037c:	eb b8                	jmp    c0020336 <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c002037e:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c0020385:	75 29                	jne    c00203b0 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c0020387:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002038d:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c0020393:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020399:	8d 75 02             	lea    esi,[ebp+0x2]
c002039c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00203a0:	c1 e6 07             	shl    esi,0x7
c00203a3:	01 c6                	add    esi,eax
c00203a5:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c00203ac:	74 4a                	je     c00203f8 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c00203ae:	eb 2f                	jmp    c00203df <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c00203b0:	83 ec 0c             	sub    esp,0xc
c00203b3:	68 d2 6a 02 c0       	push   0xc0026ad2
c00203b8:	e8 ac 96 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00203bd:	83 c4 10             	add    esp,0x10
c00203c0:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c00203c7:	75 be                	jne    c0020387 <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c00203c9:	e4 60                	in     al,0x60
c00203cb:	3c 1c                	cmp    al,0x1c
c00203cd:	74 04                	je     c00203d3 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c00203cf:	3c 5a                	cmp    al,0x5a
c00203d1:	75 f6                	jne    c00203c9 <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c00203d3:	e4 60                	in     al,0x60
c00203d5:	3c 5a                	cmp    al,0x5a
c00203d7:	74 fa                	je     c00203d3 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c00203d9:	3c 1c                	cmp    al,0x1c
c00203db:	74 f6                	je     c00203d3 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c00203dd:	eb a8                	jmp    c0020387 <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c00203df:	83 ec 0c             	sub    esp,0xc
c00203e2:	68 e1 6a 02 c0       	push   0xc0026ae1
c00203e7:	e8 7d 96 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00203ec:	83 c4 10             	add    esp,0x10
c00203ef:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c00203f6:	74 3d                	je     c0020435 <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c00203f8:	89 e8                	mov    eax,ebp
c00203fa:	c1 e0 07             	shl    eax,0x7
c00203fd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020401:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002040b:	52                   	push   edx
c002040c:	52                   	push   edx
c002040d:	56                   	push   esi
c002040e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020414:	e8 35 eb ff ff       	call   c001ef4e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020419:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002041d:	83 c4 10             	add    esp,0x10
c0020420:	b8 01 00 00 00       	mov    eax,0x1
c0020425:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002042a:	75 1d                	jne    c0020449 <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c002042c:	e9 c8 04 00 00       	jmp    c00208f9 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020431:	3c 5a                	cmp    al,0x5a
c0020433:	74 0c                	je     c0020441 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020435:	e4 60                	in     al,0x60
c0020437:	3c 1c                	cmp    al,0x1c
c0020439:	75 f6                	jne    c0020431 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c002043b:	eb 04                	jmp    c0020441 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c002043d:	3c 1c                	cmp    al,0x1c
c002043f:	75 b7                	jne    c00203f8 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020441:	e4 60                	in     al,0x60
c0020443:	3c 5a                	cmp    al,0x5a
c0020445:	74 fa                	je     c0020441 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020447:	eb f4                	jmp    c002043d <SATA::access(unsigned long long, int, void*, bool)+0x133>
c0020449:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c0020450:	74 3a                	je     c002048c <SATA::access(unsigned long long, int, void*, bool)+0x182>
c0020452:	83 ec 0c             	sub    esp,0xc
c0020455:	68 f0 6a 02 c0       	push   0xc0026af0
c002045a:	e8 0a 96 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002045f:	83 c4 10             	add    esp,0x10
c0020462:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c0020469:	74 0d                	je     c0020478 <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c002046b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020470:	74 34                	je     c00204a6 <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c0020472:	eb 1f                	jmp    c0020493 <SATA::access(unsigned long long, int, void*, bool)+0x189>
c0020474:	3c 1c                	cmp    al,0x1c
c0020476:	74 0c                	je     c0020484 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020478:	e4 60                	in     al,0x60
c002047a:	3c 5a                	cmp    al,0x5a
c002047c:	75 f6                	jne    c0020474 <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c002047e:	eb 04                	jmp    c0020484 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020480:	3c 1c                	cmp    al,0x1c
c0020482:	75 e7                	jne    c002046b <SATA::access(unsigned long long, int, void*, bool)+0x161>
c0020484:	e4 60                	in     al,0x60
c0020486:	3c 5a                	cmp    al,0x5a
c0020488:	74 fa                	je     c0020484 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c002048a:	eb f4                	jmp    c0020480 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c002048c:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020491:	74 1c                	je     c00204af <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020493:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0020497:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002049d:	c1 e1 09             	shl    ecx,0x9
c00204a0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00204a4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00204a6:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c00204ad:	75 55                	jne    c0020504 <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c00204af:	8d 45 02             	lea    eax,[ebp+0x2]
c00204b2:	c1 e0 07             	shl    eax,0x7
c00204b5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00204b9:	8b 38                	mov    edi,DWORD PTR [eax]
c00204bb:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00204c1:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c00204c7:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c00204cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204d1:	c1 e0 05             	shl    eax,0x5
c00204d4:	01 c7                	add    edi,eax
c00204d6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00204da:	83 e0 01             	and    eax,0x1
c00204dd:	c1 e0 06             	shl    eax,0x6
c00204e0:	88 c2                	mov    dl,al
c00204e2:	8a 07                	mov    al,BYTE PTR [edi]
c00204e4:	83 e0 bf             	and    eax,0xffffffbf
c00204e7:	09 d0                	or     eax,edx
c00204e9:	88 07                	mov    BYTE PTR [edi],al
c00204eb:	8b 07                	mov    eax,DWORD PTR [edi]
c00204ed:	25 e0 ff 00 00       	and    eax,0xffe0
c00204f2:	0d 05 00 01 00       	or     eax,0x10005
c00204f7:	89 07                	mov    DWORD PTR [edi],eax
c00204f9:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c0020500:	74 4d                	je     c002054f <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020502:	eb 32                	jmp    c0020536 <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c0020504:	83 ec 0c             	sub    esp,0xc
c0020507:	68 ff 6a 02 c0       	push   0xc0026aff
c002050c:	e8 58 95 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020511:	83 c4 10             	add    esp,0x10
c0020514:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c002051b:	75 92                	jne    c00204af <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c002051d:	e4 60                	in     al,0x60
c002051f:	3c 1c                	cmp    al,0x1c
c0020521:	74 04                	je     c0020527 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020523:	3c 5a                	cmp    al,0x5a
c0020525:	75 f6                	jne    c002051d <SATA::access(unsigned long long, int, void*, bool)+0x213>
c0020527:	e4 60                	in     al,0x60
c0020529:	3c 5a                	cmp    al,0x5a
c002052b:	74 fa                	je     c0020527 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c002052d:	3c 1c                	cmp    al,0x1c
c002052f:	74 f6                	je     c0020527 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020531:	e9 79 ff ff ff       	jmp    c00204af <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020536:	83 ec 0c             	sub    esp,0xc
c0020539:	68 0e 6b 02 c0       	push   0xc0026b0e
c002053e:	e8 26 95 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020543:	83 c4 10             	add    esp,0x10
c0020546:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c002054d:	74 3b                	je     c002058a <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002054f:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020555:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c002055b:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c0020561:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c0020564:	50                   	push   eax
c0020565:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c0020569:	83 c0 08             	add    eax,0x8
c002056c:	c1 e0 04             	shl    eax,0x4
c002056f:	50                   	push   eax
c0020570:	6a 00                	push   0x0
c0020572:	56                   	push   esi
c0020573:	e8 0c 01 fe ff       	call   c0000684 <memset>
c0020578:	83 c4 10             	add    esp,0x10
c002057b:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c0020582:	74 33                	je     c00205b7 <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020584:	eb 18                	jmp    c002059e <SATA::access(unsigned long long, int, void*, bool)+0x294>
c0020586:	3c 1c                	cmp    al,0x1c
c0020588:	74 0c                	je     c0020596 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c002058a:	e4 60                	in     al,0x60
c002058c:	3c 5a                	cmp    al,0x5a
c002058e:	75 f6                	jne    c0020586 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020590:	eb 04                	jmp    c0020596 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020592:	3c 1c                	cmp    al,0x1c
c0020594:	75 b9                	jne    c002054f <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020596:	e4 60                	in     al,0x60
c0020598:	3c 5a                	cmp    al,0x5a
c002059a:	74 fa                	je     c0020596 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c002059c:	eb f4                	jmp    c0020592 <SATA::access(unsigned long long, int, void*, bool)+0x288>
c002059e:	83 ec 0c             	sub    esp,0xc
c00205a1:	68 1d 6b 02 c0       	push   0xc0026b1d
c00205a6:	e8 be 94 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00205ab:	83 c4 10             	add    esp,0x10
c00205ae:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c00205b5:	74 48                	je     c00205ff <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c00205b7:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00205bd:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c00205c3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00205c7:	c1 e0 09             	shl    eax,0x9
c00205ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00205ce:	48                   	dec    eax
c00205cf:	25 ff ff 3f 00       	and    eax,0x3fffff
c00205d4:	89 c2                	mov    edx,eax
c00205d6:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c00205dc:	25 00 00 c0 ff       	and    eax,0xffc00000
c00205e1:	09 d0                	or     eax,edx
c00205e3:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c00205e9:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c00205f0:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c00205f7:	74 33                	je     c002062c <SATA::access(unsigned long long, int, void*, bool)+0x322>
c00205f9:	eb 18                	jmp    c0020613 <SATA::access(unsigned long long, int, void*, bool)+0x309>
c00205fb:	3c 1c                	cmp    al,0x1c
c00205fd:	74 0c                	je     c002060b <SATA::access(unsigned long long, int, void*, bool)+0x301>
c00205ff:	e4 60                	in     al,0x60
c0020601:	3c 5a                	cmp    al,0x5a
c0020603:	75 f6                	jne    c00205fb <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c0020605:	eb 04                	jmp    c002060b <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020607:	3c 1c                	cmp    al,0x1c
c0020609:	75 ac                	jne    c00205b7 <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c002060b:	e4 60                	in     al,0x60
c002060d:	3c 5a                	cmp    al,0x5a
c002060f:	74 fa                	je     c002060b <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020611:	eb f4                	jmp    c0020607 <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c0020613:	83 ec 0c             	sub    esp,0xc
c0020616:	68 2c 6b 02 c0       	push   0xc0026b2c
c002061b:	e8 49 94 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020620:	83 c4 10             	add    esp,0x10
c0020623:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c002062a:	74 63                	je     c002068f <SATA::access(unsigned long long, int, void*, bool)+0x385>
c002062c:	66 8b 06             	mov    ax,WORD PTR [esi]
c002062f:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020633:	66 25 00 7f          	and    ax,0x7f00
c0020637:	66 0d 27 80          	or     ax,0x8027
c002063b:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0020640:	66 89 06             	mov    WORD PTR [esi],ax
c0020643:	19 c0                	sbb    eax,eax
c0020645:	83 e0 f0             	and    eax,0xfffffff0
c0020648:	83 c0 35             	add    eax,0x35
c002064b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002064e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020652:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0020656:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002065a:	c1 e8 10             	shr    eax,0x10
c002065d:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020660:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020664:	c1 e8 18             	shr    eax,0x18
c0020667:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c002066e:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020671:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020675:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020678:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002067c:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002067f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020683:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020687:	74 33                	je     c00206bc <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020689:	eb 18                	jmp    c00206a3 <SATA::access(unsigned long long, int, void*, bool)+0x399>
c002068b:	3c 1c                	cmp    al,0x1c
c002068d:	74 0c                	je     c002069b <SATA::access(unsigned long long, int, void*, bool)+0x391>
c002068f:	e4 60                	in     al,0x60
c0020691:	3c 5a                	cmp    al,0x5a
c0020693:	75 f6                	jne    c002068b <SATA::access(unsigned long long, int, void*, bool)+0x381>
c0020695:	eb 04                	jmp    c002069b <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020697:	3c 1c                	cmp    al,0x1c
c0020699:	75 91                	jne    c002062c <SATA::access(unsigned long long, int, void*, bool)+0x322>
c002069b:	e4 60                	in     al,0x60
c002069d:	3c 5a                	cmp    al,0x5a
c002069f:	74 fa                	je     c002069b <SATA::access(unsigned long long, int, void*, bool)+0x391>
c00206a1:	eb f4                	jmp    c0020697 <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c00206a3:	83 ec 0c             	sub    esp,0xc
c00206a6:	68 3b 6b 02 c0       	push   0xc0026b3b
c00206ab:	e8 b9 93 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00206b0:	83 c4 10             	add    esp,0x10
c00206b3:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c00206ba:	74 11                	je     c00206cd <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c00206bc:	89 e8                	mov    eax,ebp
c00206be:	31 f6                	xor    esi,esi
c00206c0:	c1 e0 07             	shl    eax,0x7
c00206c3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00206c7:	eb 21                	jmp    c00206ea <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c00206c9:	3c 1c                	cmp    al,0x1c
c00206cb:	74 0c                	je     c00206d9 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c00206cd:	e4 60                	in     al,0x60
c00206cf:	3c 5a                	cmp    al,0x5a
c00206d1:	75 f6                	jne    c00206c9 <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c00206d3:	eb 04                	jmp    c00206d9 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c00206d5:	3c 1c                	cmp    al,0x1c
c00206d7:	75 e3                	jne    c00206bc <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c00206d9:	e4 60                	in     al,0x60
c00206db:	3c 5a                	cmp    al,0x5a
c00206dd:	74 fa                	je     c00206d9 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c00206df:	eb f4                	jmp    c00206d5 <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c00206e1:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c00206e7:	74 0c                	je     c00206f5 <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c00206e9:	46                   	inc    esi
c00206ea:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c00206f0:	80 e2 88             	and    dl,0x88
c00206f3:	75 ec                	jne    c00206e1 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c00206f5:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c00206fc:	74 3d                	je     c002073b <SATA::access(unsigned long long, int, void*, bool)+0x431>
c00206fe:	83 ec 0c             	sub    esp,0xc
c0020701:	68 4a 6b 02 c0       	push   0xc0026b4a
c0020706:	e8 5e 93 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002070b:	8b 15 00 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f00
c0020711:	83 c4 10             	add    esp,0x10
c0020714:	f6 c2 80             	test   dl,0x80
c0020717:	74 0e                	je     c0020727 <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c0020719:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c002071f:	75 2f                	jne    c0020750 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c0020721:	eb 20                	jmp    c0020743 <SATA::access(unsigned long long, int, void*, bool)+0x439>
c0020723:	3c 1c                	cmp    al,0x1c
c0020725:	74 0c                	je     c0020733 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020727:	e4 60                	in     al,0x60
c0020729:	3c 5a                	cmp    al,0x5a
c002072b:	75 f6                	jne    c0020723 <SATA::access(unsigned long long, int, void*, bool)+0x419>
c002072d:	eb 04                	jmp    c0020733 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c002072f:	3c 1c                	cmp    al,0x1c
c0020731:	75 e6                	jne    c0020719 <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c0020733:	e4 60                	in     al,0x60
c0020735:	3c 5a                	cmp    al,0x5a
c0020737:	74 fa                	je     c0020733 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020739:	eb f4                	jmp    c002072f <SATA::access(unsigned long long, int, void*, bool)+0x425>
c002073b:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020741:	75 13                	jne    c0020756 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020743:	83 ec 0c             	sub    esp,0xc
c0020746:	68 5a 6b 02 c0       	push   0xc0026b5a
c002074b:	e9 d2 00 00 00       	jmp    c0020822 <SATA::access(unsigned long long, int, void*, bool)+0x518>
c0020750:	0f ba e2 0b          	bt     edx,0xb
c0020754:	72 25                	jb     c002077b <SATA::access(unsigned long long, int, void*, bool)+0x471>
c0020756:	be 01 00 00 00       	mov    esi,0x1
c002075b:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002075f:	89 e8                	mov    eax,ebp
c0020761:	d3 e6                	shl    esi,cl
c0020763:	c1 e0 07             	shl    eax,0x7
c0020766:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002076a:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c0020771:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0020777:	74 4a                	je     c00207c3 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020779:	eb 2f                	jmp    c00207aa <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c002077b:	83 ec 0c             	sub    esp,0xc
c002077e:	68 68 6b 02 c0       	push   0xc0026b68
c0020783:	e8 e1 92 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020788:	83 c4 10             	add    esp,0x10
c002078b:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c0020792:	75 c2                	jne    c0020756 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020794:	e4 60                	in     al,0x60
c0020796:	3c 5a                	cmp    al,0x5a
c0020798:	74 04                	je     c002079e <SATA::access(unsigned long long, int, void*, bool)+0x494>
c002079a:	3c 1c                	cmp    al,0x1c
c002079c:	75 f6                	jne    c0020794 <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c002079e:	e4 60                	in     al,0x60
c00207a0:	3c 5a                	cmp    al,0x5a
c00207a2:	74 fa                	je     c002079e <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00207a4:	3c 1c                	cmp    al,0x1c
c00207a6:	74 f6                	je     c002079e <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00207a8:	eb ac                	jmp    c0020756 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00207aa:	83 ec 0c             	sub    esp,0xc
c00207ad:	68 78 6b 02 c0       	push   0xc0026b78
c00207b2:	e8 b2 92 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00207b7:	83 c4 10             	add    esp,0x10
c00207ba:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c00207c1:	74 0f                	je     c00207d2 <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c00207c3:	89 e8                	mov    eax,ebp
c00207c5:	c1 e0 07             	shl    eax,0x7
c00207c8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00207cc:	eb 24                	jmp    c00207f2 <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c00207ce:	3c 1c                	cmp    al,0x1c
c00207d0:	74 0c                	je     c00207de <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c00207d2:	e4 60                	in     al,0x60
c00207d4:	3c 5a                	cmp    al,0x5a
c00207d6:	75 f6                	jne    c00207ce <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c00207d8:	eb 04                	jmp    c00207de <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c00207da:	3c 1c                	cmp    al,0x1c
c00207dc:	75 e5                	jne    c00207c3 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c00207de:	e4 60                	in     al,0x60
c00207e0:	3c 5a                	cmp    al,0x5a
c00207e2:	74 fa                	je     c00207de <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c00207e4:	eb f4                	jmp    c00207da <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c00207e6:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c00207ec:	0f ba e2 1e          	bt     edx,0x1e
c00207f0:	72 28                	jb     c002081a <SATA::access(unsigned long long, int, void*, bool)+0x510>
c00207f2:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c00207f8:	85 d6                	test   esi,edx
c00207fa:	75 ea                	jne    c00207e6 <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c00207fc:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c0020803:	75 2f                	jne    c0020834 <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c0020805:	89 e8                	mov    eax,ebp
c0020807:	c1 e0 07             	shl    eax,0x7
c002080a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002080e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020814:	0f ba e0 1e          	bt     eax,0x1e
c0020818:	73 49                	jae    c0020863 <SATA::access(unsigned long long, int, void*, bool)+0x559>
c002081a:	83 ec 0c             	sub    esp,0xc
c002081d:	68 88 6b 02 c0       	push   0xc0026b88
c0020822:	e8 c8 40 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0020827:	83 c4 10             	add    esp,0x10
c002082a:	b8 01 00 00 00       	mov    eax,0x1
c002082f:	e9 c5 00 00 00       	jmp    c00208f9 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020834:	83 ec 0c             	sub    esp,0xc
c0020837:	68 99 6b 02 c0       	push   0xc0026b99
c002083c:	e8 28 92 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020841:	83 c4 10             	add    esp,0x10
c0020844:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c002084b:	75 b8                	jne    c0020805 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c002084d:	e4 60                	in     al,0x60
c002084f:	3c 5a                	cmp    al,0x5a
c0020851:	74 04                	je     c0020857 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020853:	3c 1c                	cmp    al,0x1c
c0020855:	75 f6                	jne    c002084d <SATA::access(unsigned long long, int, void*, bool)+0x543>
c0020857:	e4 60                	in     al,0x60
c0020859:	3c 5a                	cmp    al,0x5a
c002085b:	74 fa                	je     c0020857 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c002085d:	3c 1c                	cmp    al,0x1c
c002085f:	74 f6                	je     c0020857 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020861:	eb a2                	jmp    c0020805 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0020863:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c002086a:	74 3a                	je     c00208a6 <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c002086c:	83 ec 0c             	sub    esp,0xc
c002086f:	68 a9 6b 02 c0       	push   0xc0026ba9
c0020874:	e8 f0 91 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020879:	83 c4 10             	add    esp,0x10
c002087c:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c0020883:	74 0d                	je     c0020892 <SATA::access(unsigned long long, int, void*, bool)+0x588>
c0020885:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002088a:	75 31                	jne    c00208bd <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c002088c:	eb 1f                	jmp    c00208ad <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c002088e:	3c 1c                	cmp    al,0x1c
c0020890:	74 0c                	je     c002089e <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020892:	e4 60                	in     al,0x60
c0020894:	3c 5a                	cmp    al,0x5a
c0020896:	75 f6                	jne    c002088e <SATA::access(unsigned long long, int, void*, bool)+0x584>
c0020898:	eb 04                	jmp    c002089e <SATA::access(unsigned long long, int, void*, bool)+0x594>
c002089a:	3c 1c                	cmp    al,0x1c
c002089c:	75 e7                	jne    c0020885 <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c002089e:	e4 60                	in     al,0x60
c00208a0:	3c 5a                	cmp    al,0x5a
c00208a2:	74 fa                	je     c002089e <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00208a4:	eb f4                	jmp    c002089a <SATA::access(unsigned long long, int, void*, bool)+0x590>
c00208a6:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00208ab:	75 19                	jne    c00208c6 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c00208ad:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00208b3:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00208b7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00208bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00208bd:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c00208c4:	75 04                	jne    c00208ca <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c00208c6:	31 c0                	xor    eax,eax
c00208c8:	eb 2f                	jmp    c00208f9 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c00208ca:	83 ec 0c             	sub    esp,0xc
c00208cd:	68 b9 6b 02 c0       	push   0xc0026bb9
c00208d2:	e8 92 91 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00208d7:	83 c4 10             	add    esp,0x10
c00208da:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c00208e1:	75 e3                	jne    c00208c6 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c00208e3:	e4 60                	in     al,0x60
c00208e5:	3c 1c                	cmp    al,0x1c
c00208e7:	74 04                	je     c00208ed <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c00208e9:	3c 5a                	cmp    al,0x5a
c00208eb:	75 f6                	jne    c00208e3 <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c00208ed:	e4 60                	in     al,0x60
c00208ef:	3c 5a                	cmp    al,0x5a
c00208f1:	74 fa                	je     c00208ed <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c00208f3:	3c 1c                	cmp    al,0x1c
c00208f5:	74 f6                	je     c00208ed <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c00208f7:	eb cd                	jmp    c00208c6 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c00208f9:	83 c4 2c             	add    esp,0x2c
c00208fc:	5b                   	pop    ebx
c00208fd:	5e                   	pop    esi
c00208fe:	5f                   	pop    edi
c00208ff:	5d                   	pop    ebp
c0020900:	c3                   	ret    
c0020901:	90                   	nop

c0020902 <SATA::read(unsigned long long, int, void*)>:
c0020902:	55                   	push   ebp
c0020903:	57                   	push   edi
c0020904:	56                   	push   esi
c0020905:	53                   	push   ebx
c0020906:	83 ec 0c             	sub    esp,0xc
c0020909:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002090d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020911:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020915:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020919:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c0020920:	74 2d                	je     c002094f <SATA::read(unsigned long long, int, void*)+0x4d>
c0020922:	83 ec 0c             	sub    esp,0xc
c0020925:	68 c9 6b 02 c0       	push   0xc0026bc9
c002092a:	e8 3a 91 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002092f:	83 c4 10             	add    esp,0x10
c0020932:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c0020939:	75 14                	jne    c002094f <SATA::read(unsigned long long, int, void*)+0x4d>
c002093b:	e4 60                	in     al,0x60
c002093d:	3c 1c                	cmp    al,0x1c
c002093f:	74 04                	je     c0020945 <SATA::read(unsigned long long, int, void*)+0x43>
c0020941:	3c 5a                	cmp    al,0x5a
c0020943:	75 f6                	jne    c002093b <SATA::read(unsigned long long, int, void*)+0x39>
c0020945:	e4 60                	in     al,0x60
c0020947:	3c 5a                	cmp    al,0x5a
c0020949:	74 fa                	je     c0020945 <SATA::read(unsigned long long, int, void*)+0x43>
c002094b:	3c 1c                	cmp    al,0x1c
c002094d:	74 f6                	je     c0020945 <SATA::read(unsigned long long, int, void*)+0x43>
c002094f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0020952:	b8 04 00 00 00       	mov    eax,0x4
c0020957:	81 fa fe 00 00 00    	cmp    edx,0xfe
c002095d:	0f 87 96 00 00 00    	ja     c00209f9 <SATA::read(unsigned long long, int, void*)+0xf7>
c0020963:	b8 06 00 00 00       	mov    eax,0x6
c0020968:	85 ed                	test   ebp,ebp
c002096a:	0f 84 89 00 00 00    	je     c00209f9 <SATA::read(unsigned long long, int, void*)+0xf7>
c0020970:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c0020977:	74 2d                	je     c00209a6 <SATA::read(unsigned long long, int, void*)+0xa4>
c0020979:	83 ec 0c             	sub    esp,0xc
c002097c:	68 d6 6b 02 c0       	push   0xc0026bd6
c0020981:	e8 e3 90 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020986:	83 c4 10             	add    esp,0x10
c0020989:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c0020990:	75 14                	jne    c00209a6 <SATA::read(unsigned long long, int, void*)+0xa4>
c0020992:	e4 60                	in     al,0x60
c0020994:	3c 5a                	cmp    al,0x5a
c0020996:	74 04                	je     c002099c <SATA::read(unsigned long long, int, void*)+0x9a>
c0020998:	3c 1c                	cmp    al,0x1c
c002099a:	75 f6                	jne    c0020992 <SATA::read(unsigned long long, int, void*)+0x90>
c002099c:	e4 60                	in     al,0x60
c002099e:	3c 5a                	cmp    al,0x5a
c00209a0:	74 fa                	je     c002099c <SATA::read(unsigned long long, int, void*)+0x9a>
c00209a2:	3c 1c                	cmp    al,0x1c
c00209a4:	74 f6                	je     c002099c <SATA::read(unsigned long long, int, void*)+0x9a>
c00209a6:	50                   	push   eax
c00209a7:	50                   	push   eax
c00209a8:	6a 00                	push   0x0
c00209aa:	55                   	push   ebp
c00209ab:	53                   	push   ebx
c00209ac:	57                   	push   edi
c00209ad:	56                   	push   esi
c00209ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00209b2:	e8 53 f9 ff ff       	call   c002030a <SATA::access(unsigned long long, int, void*, bool)>
c00209b7:	83 c4 20             	add    esp,0x20
c00209ba:	89 c3                	mov    ebx,eax
c00209bc:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c00209c3:	74 2d                	je     c00209f2 <SATA::read(unsigned long long, int, void*)+0xf0>
c00209c5:	83 ec 0c             	sub    esp,0xc
c00209c8:	68 e3 6b 02 c0       	push   0xc0026be3
c00209cd:	e8 97 90 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00209d2:	83 c4 10             	add    esp,0x10
c00209d5:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c00209dc:	75 14                	jne    c00209f2 <SATA::read(unsigned long long, int, void*)+0xf0>
c00209de:	e4 60                	in     al,0x60
c00209e0:	3c 5a                	cmp    al,0x5a
c00209e2:	74 04                	je     c00209e8 <SATA::read(unsigned long long, int, void*)+0xe6>
c00209e4:	3c 1c                	cmp    al,0x1c
c00209e6:	75 f6                	jne    c00209de <SATA::read(unsigned long long, int, void*)+0xdc>
c00209e8:	e4 60                	in     al,0x60
c00209ea:	3c 5a                	cmp    al,0x5a
c00209ec:	74 fa                	je     c00209e8 <SATA::read(unsigned long long, int, void*)+0xe6>
c00209ee:	3c 1c                	cmp    al,0x1c
c00209f0:	74 f6                	je     c00209e8 <SATA::read(unsigned long long, int, void*)+0xe6>
c00209f2:	31 c0                	xor    eax,eax
c00209f4:	85 db                	test   ebx,ebx
c00209f6:	0f 95 c0             	setne  al
c00209f9:	83 c4 0c             	add    esp,0xc
c00209fc:	5b                   	pop    ebx
c00209fd:	5e                   	pop    esi
c00209fe:	5f                   	pop    edi
c00209ff:	5d                   	pop    ebp
c0020a00:	c3                   	ret    
c0020a01:	90                   	nop

c0020a02 <SATA::write(unsigned long long, int, void*)>:
c0020a02:	55                   	push   ebp
c0020a03:	57                   	push   edi
c0020a04:	56                   	push   esi
c0020a05:	53                   	push   ebx
c0020a06:	83 ec 1c             	sub    esp,0x1c
c0020a09:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020a0d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020a11:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020a15:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020a19:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c0020a20:	74 2d                	je     c0020a4f <SATA::write(unsigned long long, int, void*)+0x4d>
c0020a22:	83 ec 0c             	sub    esp,0xc
c0020a25:	68 f0 6b 02 c0       	push   0xc0026bf0
c0020a2a:	e8 3a 90 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020a2f:	83 c4 10             	add    esp,0x10
c0020a32:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c0020a39:	75 14                	jne    c0020a4f <SATA::write(unsigned long long, int, void*)+0x4d>
c0020a3b:	e4 60                	in     al,0x60
c0020a3d:	3c 1c                	cmp    al,0x1c
c0020a3f:	74 04                	je     c0020a45 <SATA::write(unsigned long long, int, void*)+0x43>
c0020a41:	3c 5a                	cmp    al,0x5a
c0020a43:	75 f6                	jne    c0020a3b <SATA::write(unsigned long long, int, void*)+0x39>
c0020a45:	e4 60                	in     al,0x60
c0020a47:	3c 5a                	cmp    al,0x5a
c0020a49:	74 fa                	je     c0020a45 <SATA::write(unsigned long long, int, void*)+0x43>
c0020a4b:	3c 1c                	cmp    al,0x1c
c0020a4d:	74 f6                	je     c0020a45 <SATA::write(unsigned long long, int, void*)+0x43>
c0020a4f:	8d 55 ff             	lea    edx,[ebp-0x1]
c0020a52:	b8 04 00 00 00       	mov    eax,0x4
c0020a57:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020a5d:	0f 87 bd 00 00 00    	ja     c0020b20 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020a63:	b8 06 00 00 00       	mov    eax,0x6
c0020a68:	85 db                	test   ebx,ebx
c0020a6a:	0f 84 b0 00 00 00    	je     c0020b20 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020a70:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c0020a77:	74 2d                	je     c0020aa6 <SATA::write(unsigned long long, int, void*)+0xa4>
c0020a79:	83 ec 0c             	sub    esp,0xc
c0020a7c:	68 fe 6b 02 c0       	push   0xc0026bfe
c0020a81:	e8 e3 8f fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020a86:	83 c4 10             	add    esp,0x10
c0020a89:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c0020a90:	75 14                	jne    c0020aa6 <SATA::write(unsigned long long, int, void*)+0xa4>
c0020a92:	e4 60                	in     al,0x60
c0020a94:	3c 1c                	cmp    al,0x1c
c0020a96:	74 04                	je     c0020a9c <SATA::write(unsigned long long, int, void*)+0x9a>
c0020a98:	3c 5a                	cmp    al,0x5a
c0020a9a:	75 f6                	jne    c0020a92 <SATA::write(unsigned long long, int, void*)+0x90>
c0020a9c:	e4 60                	in     al,0x60
c0020a9e:	3c 5a                	cmp    al,0x5a
c0020aa0:	74 fa                	je     c0020a9c <SATA::write(unsigned long long, int, void*)+0x9a>
c0020aa2:	3c 1c                	cmp    al,0x1c
c0020aa4:	74 f6                	je     c0020a9c <SATA::write(unsigned long long, int, void*)+0x9a>
c0020aa6:	c1 e5 09             	shl    ebp,0x9
c0020aa9:	01 dd                	add    ebp,ebx
c0020aab:	89 f0                	mov    eax,esi
c0020aad:	89 fa                	mov    edx,edi
c0020aaf:	83 c0 01             	add    eax,0x1
c0020ab2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020ab6:	83 d2 00             	adc    edx,0x0
c0020ab9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020abd:	50                   	push   eax
c0020abe:	50                   	push   eax
c0020abf:	6a 01                	push   0x1
c0020ac1:	53                   	push   ebx
c0020ac2:	81 c3 00 02 00 00    	add    ebx,0x200
c0020ac8:	6a 01                	push   0x1
c0020aca:	57                   	push   edi
c0020acb:	56                   	push   esi
c0020acc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020ad0:	e8 35 f8 ff ff       	call   c002030a <SATA::access(unsigned long long, int, void*, bool)>
c0020ad5:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0020ad9:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0020add:	83 c4 20             	add    esp,0x20
c0020ae0:	39 dd                	cmp    ebp,ebx
c0020ae2:	75 c7                	jne    c0020aab <SATA::write(unsigned long long, int, void*)+0xa9>
c0020ae4:	f6 05 01 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f01,0x8
c0020aeb:	75 04                	jne    c0020af1 <SATA::write(unsigned long long, int, void*)+0xef>
c0020aed:	31 c0                	xor    eax,eax
c0020aef:	eb 2f                	jmp    c0020b20 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020af1:	83 ec 0c             	sub    esp,0xc
c0020af4:	68 0c 6c 02 c0       	push   0xc0026c0c
c0020af9:	e8 6b 8f fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020afe:	83 c4 10             	add    esp,0x10
c0020b01:	f6 05 00 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f00,0x80
c0020b08:	75 e3                	jne    c0020aed <SATA::write(unsigned long long, int, void*)+0xeb>
c0020b0a:	e4 60                	in     al,0x60
c0020b0c:	3c 5a                	cmp    al,0x5a
c0020b0e:	74 04                	je     c0020b14 <SATA::write(unsigned long long, int, void*)+0x112>
c0020b10:	3c 1c                	cmp    al,0x1c
c0020b12:	75 f6                	jne    c0020b0a <SATA::write(unsigned long long, int, void*)+0x108>
c0020b14:	e4 60                	in     al,0x60
c0020b16:	3c 5a                	cmp    al,0x5a
c0020b18:	74 fa                	je     c0020b14 <SATA::write(unsigned long long, int, void*)+0x112>
c0020b1a:	3c 1c                	cmp    al,0x1c
c0020b1c:	74 f6                	je     c0020b14 <SATA::write(unsigned long long, int, void*)+0x112>
c0020b1e:	eb cd                	jmp    c0020aed <SATA::write(unsigned long long, int, void*)+0xeb>
c0020b20:	83 c4 1c             	add    esp,0x1c
c0020b23:	5b                   	pop    ebx
c0020b24:	5e                   	pop    esi
c0020b25:	5f                   	pop    edi
c0020b26:	5d                   	pop    ebp
c0020b27:	c3                   	ret    

c0020b28 <SATAPI::write(unsigned long long, int, void*)>:
c0020b28:	b8 03 00 00 00       	mov    eax,0x3
c0020b2d:	c3                   	ret    

c0020b2e <SATAPI::close(int, int, void*)>:
c0020b2e:	83 ec 0c             	sub    esp,0xc
c0020b31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b35:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020b3b:	85 c0                	test   eax,eax
c0020b3d:	74 0c                	je     c0020b4b <SATAPI::close(int, int, void*)+0x1d>
c0020b3f:	83 ec 0c             	sub    esp,0xc
c0020b42:	8b 10                	mov    edx,DWORD PTR [eax]
c0020b44:	50                   	push   eax
c0020b45:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020b48:	83 c4 10             	add    esp,0x10
c0020b4b:	31 c0                	xor    eax,eax
c0020b4d:	83 c4 0c             	add    esp,0xc
c0020b50:	c3                   	ret    
c0020b51:	90                   	nop

c0020b52 <SATAPI::SATAPI()>:
c0020b52:	83 ec 0c             	sub    esp,0xc
c0020b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b59:	83 ec 04             	sub    esp,0x4
c0020b5c:	68 00 08 00 00       	push   0x800
c0020b61:	68 54 6c 02 c0       	push   0xc0026c54
c0020b66:	50                   	push   eax
c0020b67:	e8 72 da fe ff       	call   c000e5de <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020b6c:	83 c4 10             	add    esp,0x10
c0020b6f:	ba d0 6d 02 c0       	mov    edx,0xc0026dd0
c0020b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b78:	89 10                	mov    DWORD PTR [eax],edx
c0020b7a:	90                   	nop
c0020b7b:	83 c4 0c             	add    esp,0xc
c0020b7e:	c3                   	ret    
c0020b7f:	90                   	nop

c0020b80 <SATAPI::diskRemoved()>:
c0020b80:	53                   	push   ebx
c0020b81:	83 ec 14             	sub    esp,0x14
c0020b84:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020b88:	68 60 6c 02 c0       	push   0xc0026c60
c0020b8d:	e8 6d c1 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020b92:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0020b99:	c7 04 24 77 6c 02 c0 	mov    DWORD PTR [esp],0xc0026c77
c0020ba0:	e8 5a c1 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020ba5:	58                   	pop    eax
c0020ba6:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0020bac:	e8 55 f8 fe ff       	call   c0010406 <LogicalDisk::unmount()>
c0020bb1:	c7 44 24 20 86 6c 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026c86
c0020bb9:	83 c4 18             	add    esp,0x18
c0020bbc:	5b                   	pop    ebx
c0020bbd:	e9 3d c1 fe ff       	jmp    c000ccff <Dbg::kprintf(char const*, ...)>

c0020bc2 <SATAPI::diskInserted()>:
c0020bc2:	83 ec 18             	sub    esp,0x18
c0020bc5:	68 94 6c 02 c0       	push   0xc0026c94
c0020bca:	e8 30 c1 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020bcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020bd3:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020bda:	83 c4 1c             	add    esp,0x1c
c0020bdd:	c3                   	ret    

c0020bde <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020bde:	55                   	push   ebp
c0020bdf:	57                   	push   edi
c0020be0:	56                   	push   esi
c0020be1:	53                   	push   ebx
c0020be2:	83 ec 38             	sub    esp,0x38
c0020be5:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0020be9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0020bed:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0020bf1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020bf5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0020bf9:	68 ac 6c 02 c0       	push   0xc0026cac
c0020bfe:	e8 fc c0 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020c03:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020c09:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020c0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020c13:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020c19:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020c1d:	c1 e0 07             	shl    eax,0x7
c0020c20:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0020c24:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020c28:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020c32:	5a                   	pop    edx
c0020c33:	59                   	pop    ecx
c0020c34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020c38:	8d 58 02             	lea    ebx,[eax+0x2]
c0020c3b:	c1 e3 07             	shl    ebx,0x7
c0020c3e:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0020c42:	53                   	push   ebx
c0020c43:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020c49:	e8 00 e3 ff ff       	call   c001ef4e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020c4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020c52:	83 c4 10             	add    esp,0x10
c0020c55:	b8 01 00 00 00       	mov    eax,0x1
c0020c5a:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020c5f:	0f 84 04 02 00 00    	je     c0020e69 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28b>
c0020c65:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020c6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020c6d:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020c73:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020c79:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020c7d:	c1 e1 05             	shl    ecx,0x5
c0020c80:	01 c8                	add    eax,ecx
c0020c82:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020c84:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020c8a:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020c90:	89 08                	mov    DWORD PTR [eax],ecx
c0020c92:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020c98:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020c9e:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020ca4:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020ca7:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020caa:	50                   	push   eax
c0020cab:	68 90 00 00 00       	push   0x90
c0020cb0:	6a 00                	push   0x0
c0020cb2:	53                   	push   ebx
c0020cb3:	e8 cc f9 fd ff       	call   c0000684 <memset>
c0020cb8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020cbc:	b9 0c 00 00 00       	mov    ecx,0xc
c0020cc1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020cc3:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020cc9:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020ccd:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020cd3:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020cd7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020cdb:	48                   	dec    eax
c0020cdc:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020ce1:	89 c1                	mov    ecx,eax
c0020ce3:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020ce9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020cee:	09 c8                	or     eax,ecx
c0020cf0:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020cf6:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020cf9:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0020d00:	66 25 00 7f          	and    ax,0x7f00
c0020d04:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020d08:	66 0d 27 80          	or     ax,0x8027
c0020d0c:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0020d10:	66 89 03             	mov    WORD PTR [ebx],ax
c0020d13:	89 d0                	mov    eax,edx
c0020d15:	c1 ea 18             	shr    edx,0x18
c0020d18:	c1 e8 10             	shr    eax,0x10
c0020d1b:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0020d1e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020d21:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020d25:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020d28:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020d2c:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020d2f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020d33:	83 c4 10             	add    esp,0x10
c0020d36:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020d3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020d3e:	31 c0                	xor    eax,eax
c0020d40:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0020d46:	80 e1 88             	and    cl,0x88
c0020d49:	74 0a                	je     c0020d55 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c0020d4b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020d50:	74 0a                	je     c0020d5c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c0020d52:	40                   	inc    eax
c0020d53:	eb eb                	jmp    c0020d40 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c0020d55:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020d5a:	75 0f                	jne    c0020d6b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18d>
c0020d5c:	83 ec 0c             	sub    esp,0xc
c0020d5f:	68 5a 6b 02 c0       	push   0xc0026b5a
c0020d64:	e8 86 3b ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0020d69:	eb 48                	jmp    c0020db3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d5>
c0020d6b:	be 01 00 00 00       	mov    esi,0x1
c0020d70:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020d74:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020d78:	d3 e6                	shl    esi,cl
c0020d7a:	c1 e7 07             	shl    edi,0x7
c0020d7d:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0020d83:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c0020d88:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0020d8c:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0020d92:	85 c6                	test   esi,eax
c0020d94:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0020d9a:	0f 84 96 00 00 00    	je     c0020e36 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x258>
c0020da0:	0f ba e0 1e          	bt     eax,0x1e
c0020da4:	73 1a                	jae    c0020dc0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e2>
c0020da6:	83 ec 0c             	sub    esp,0xc
c0020da9:	68 c6 6c 02 c0       	push   0xc0026cc6
c0020dae:	e8 4c bf fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020db3:	83 c4 10             	add    esp,0x10
c0020db6:	b8 01 00 00 00       	mov    eax,0x1
c0020dbb:	e9 a9 00 00 00       	jmp    c0020e69 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28b>
c0020dc0:	83 fb 0d             	cmp    ebx,0xd
c0020dc3:	77 12                	ja     c0020dd7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0020dc5:	83 ec 0c             	sub    esp,0xc
c0020dc8:	68 c8 00 00 00       	push   0xc8
c0020dcd:	e8 7a 7b ff ff       	call   c001894c <milliTenthSleep(unsigned int)>
c0020dd2:	83 c4 10             	add    esp,0x10
c0020dd5:	eb 2a                	jmp    c0020e01 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x223>
c0020dd7:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c0020ddd:	83 f8 0d             	cmp    eax,0xd
c0020de0:	77 0a                	ja     c0020dec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20e>
c0020de2:	83 ec 0c             	sub    esp,0xc
c0020de5:	68 58 02 00 00       	push   0x258
c0020dea:	eb 28                	jmp    c0020e14 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c0020dec:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c0020df2:	83 f8 0d             	cmp    eax,0xd
c0020df5:	77 0a                	ja     c0020e01 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x223>
c0020df7:	83 ec 0c             	sub    esp,0xc
c0020dfa:	68 dc 05 00 00       	push   0x5dc
c0020dff:	eb 13                	jmp    c0020e14 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c0020e01:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c0020e07:	83 f8 0d             	cmp    eax,0xd
c0020e0a:	77 10                	ja     c0020e1c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23e>
c0020e0c:	83 ec 0c             	sub    esp,0xc
c0020e0f:	68 c4 09 00 00       	push   0x9c4
c0020e14:	e8 33 7b ff ff       	call   c001894c <milliTenthSleep(unsigned int)>
c0020e19:	83 c4 10             	add    esp,0x10
c0020e1c:	43                   	inc    ebx
c0020e1d:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c0020e23:	0f 85 63 ff ff ff    	jne    c0020d8c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ae>
c0020e29:	83 ec 0c             	sub    esp,0xc
c0020e2c:	68 d9 6c 02 c0       	push   0xc0026cd9
c0020e31:	e9 78 ff ff ff       	jmp    c0020dae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d0>
c0020e36:	0f ba e0 1e          	bt     eax,0x1e
c0020e3a:	73 0d                	jae    c0020e49 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26b>
c0020e3c:	83 ec 0c             	sub    esp,0xc
c0020e3f:	68 ed 6c 02 c0       	push   0xc0026ced
c0020e44:	e9 65 ff ff ff       	jmp    c0020dae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d0>
c0020e49:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0020e4e:	74 17                	je     c0020e67 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x289>
c0020e50:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020e55:	74 10                	je     c0020e67 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x289>
c0020e57:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020e5d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020e61:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020e65:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020e67:	31 c0                	xor    eax,eax
c0020e69:	83 c4 2c             	add    esp,0x2c
c0020e6c:	5b                   	pop    ebx
c0020e6d:	5e                   	pop    esi
c0020e6e:	5f                   	pop    edi
c0020e6f:	5d                   	pop    ebp
c0020e70:	c3                   	ret    
c0020e71:	90                   	nop

c0020e72 <SATAPI::eject()>:
c0020e72:	57                   	push   edi
c0020e73:	b9 03 00 00 00       	mov    ecx,0x3
c0020e78:	53                   	push   ebx
c0020e79:	83 ec 14             	sub    esp,0x14
c0020e7c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020e80:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020e84:	fc                   	cld    
c0020e85:	31 c0                	xor    eax,eax
c0020e87:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020e89:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020e8e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020e93:	50                   	push   eax
c0020e94:	6a 00                	push   0x0
c0020e96:	6a 00                	push   0x0
c0020e98:	6a 00                	push   0x0
c0020e9a:	6a 00                	push   0x0
c0020e9c:	6a 02                	push   0x2
c0020e9e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020ea2:	50                   	push   eax
c0020ea3:	53                   	push   ebx
c0020ea4:	e8 35 fd ff ff       	call   c0020bde <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020ea9:	83 c4 20             	add    esp,0x20
c0020eac:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020eb3:	74 0c                	je     c0020ec1 <SATAPI::eject()+0x4f>
c0020eb5:	83 ec 0c             	sub    esp,0xc
c0020eb8:	53                   	push   ebx
c0020eb9:	e8 c2 fc ff ff       	call   c0020b80 <SATAPI::diskRemoved()>
c0020ebe:	83 c4 10             	add    esp,0x10
c0020ec1:	83 c4 14             	add    esp,0x14
c0020ec4:	31 c0                	xor    eax,eax
c0020ec6:	5b                   	pop    ebx
c0020ec7:	5f                   	pop    edi
c0020ec8:	c3                   	ret    
c0020ec9:	90                   	nop

c0020eca <SATAPI::detectMedia()>:
c0020eca:	56                   	push   esi
c0020ecb:	53                   	push   ebx
c0020ecc:	83 ec 30             	sub    esp,0x30
c0020ecf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0020ed3:	68 02 6d 02 c0       	push   0xc0026d02
c0020ed8:	e8 22 be fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020edd:	83 c4 0c             	add    esp,0xc
c0020ee0:	6a 0c                	push   0xc
c0020ee2:	6a 00                	push   0x0
c0020ee4:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020ee8:	56                   	push   esi
c0020ee9:	e8 96 f7 fd ff       	call   c0000684 <memset>
c0020eee:	83 c4 0c             	add    esp,0xc
c0020ef1:	6a 00                	push   0x0
c0020ef3:	6a 00                	push   0x0
c0020ef5:	6a 00                	push   0x0
c0020ef7:	6a 00                	push   0x0
c0020ef9:	6a 00                	push   0x0
c0020efb:	56                   	push   esi
c0020efc:	53                   	push   ebx
c0020efd:	e8 dc fc ff ff       	call   c0020bde <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020f02:	83 c4 20             	add    esp,0x20
c0020f05:	48                   	dec    eax
c0020f06:	75 27                	jne    c0020f2f <SATAPI::detectMedia()+0x65>
c0020f08:	83 ec 0c             	sub    esp,0xc
c0020f0b:	68 16 6d 02 c0       	push   0xc0026d16
c0020f10:	e8 ea bd fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020f15:	83 c4 10             	add    esp,0x10
c0020f18:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020f1f:	74 0e                	je     c0020f2f <SATAPI::detectMedia()+0x65>
c0020f21:	83 ec 0c             	sub    esp,0xc
c0020f24:	53                   	push   ebx
c0020f25:	e8 56 fc ff ff       	call   c0020b80 <SATAPI::diskRemoved()>
c0020f2a:	e9 d1 00 00 00       	jmp    c0021000 <SATAPI::detectMedia()+0x136>
c0020f2f:	50                   	push   eax
c0020f30:	6a 0c                	push   0xc
c0020f32:	6a 00                	push   0x0
c0020f34:	56                   	push   esi
c0020f35:	e8 4a f7 fd ff       	call   c0000684 <memset>
c0020f3a:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020f3f:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020f44:	83 c4 0c             	add    esp,0xc
c0020f47:	6a 01                	push   0x1
c0020f49:	8d 44 24 16          	lea    eax,[esp+0x16]
c0020f4d:	50                   	push   eax
c0020f4e:	6a 00                	push   0x0
c0020f50:	6a 00                	push   0x0
c0020f52:	6a 12                	push   0x12
c0020f54:	56                   	push   esi
c0020f55:	53                   	push   ebx
c0020f56:	e8 83 fc ff ff       	call   c0020bde <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020f5b:	83 c4 20             	add    esp,0x20
c0020f5e:	48                   	dec    eax
c0020f5f:	75 19                	jne    c0020f7a <SATAPI::detectMedia()+0xb0>
c0020f61:	83 ec 0c             	sub    esp,0xc
c0020f64:	68 20 6d 02 c0       	push   0xc0026d20
c0020f69:	e8 91 bd fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020f6e:	83 c4 10             	add    esp,0x10
c0020f71:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020f78:	75 a7                	jne    c0020f21 <SATAPI::detectMedia()+0x57>
c0020f7a:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0020f7e:	83 e0 7f             	and    eax,0x7f
c0020f81:	3c 70                	cmp    al,0x70
c0020f83:	74 25                	je     c0020faa <SATAPI::detectMedia()+0xe0>
c0020f85:	83 ec 0c             	sub    esp,0xc
c0020f88:	68 2a 6d 02 c0       	push   0xc0026d2a
c0020f8d:	e8 6d bd fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020f92:	83 c4 10             	add    esp,0x10
c0020f95:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020f9c:	75 0c                	jne    c0020faa <SATAPI::detectMedia()+0xe0>
c0020f9e:	83 ec 0c             	sub    esp,0xc
c0020fa1:	53                   	push   ebx
c0020fa2:	e8 1b fc ff ff       	call   c0020bc2 <SATAPI::diskInserted()>
c0020fa7:	83 c4 10             	add    esp,0x10
c0020faa:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020fae:	83 e0 0f             	and    eax,0xf
c0020fb1:	3c 02                	cmp    al,0x2
c0020fb3:	75 25                	jne    c0020fda <SATAPI::detectMedia()+0x110>
c0020fb5:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020fba:	75 47                	jne    c0021003 <SATAPI::detectMedia()+0x139>
c0020fbc:	83 ec 0c             	sub    esp,0xc
c0020fbf:	68 33 6d 02 c0       	push   0xc0026d33
c0020fc4:	e8 36 bd fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020fc9:	83 c4 10             	add    esp,0x10
c0020fcc:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020fd3:	74 2e                	je     c0021003 <SATAPI::detectMedia()+0x139>
c0020fd5:	e9 47 ff ff ff       	jmp    c0020f21 <SATAPI::detectMedia()+0x57>
c0020fda:	84 c0                	test   al,al
c0020fdc:	75 25                	jne    c0021003 <SATAPI::detectMedia()+0x139>
c0020fde:	83 ec 0c             	sub    esp,0xc
c0020fe1:	68 3c 6d 02 c0       	push   0xc0026d3c
c0020fe6:	e8 14 bd fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020feb:	83 c4 10             	add    esp,0x10
c0020fee:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020ff5:	75 0c                	jne    c0021003 <SATAPI::detectMedia()+0x139>
c0020ff7:	83 ec 0c             	sub    esp,0xc
c0020ffa:	53                   	push   ebx
c0020ffb:	e8 c2 fb ff ff       	call   c0020bc2 <SATAPI::diskInserted()>
c0021000:	83 c4 10             	add    esp,0x10
c0021003:	83 c4 24             	add    esp,0x24
c0021006:	5b                   	pop    ebx
c0021007:	5e                   	pop    esi
c0021008:	c3                   	ret    
c0021009:	90                   	nop

c002100a <SATAPI::open(int, int, void*)>:
c002100a:	56                   	push   esi
c002100b:	53                   	push   ebx
c002100c:	51                   	push   ecx
c002100d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021011:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021015:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002101f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0021025:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002102f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021033:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002103d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0021043:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002104a:	e8 77 90 fe ff       	call   c000a0c6 <Phys::allocatePage()>
c002104f:	89 c6                	mov    esi,eax
c0021051:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0021057:	81 c6 00 10 00 00    	add    esi,0x1000
c002105d:	e8 64 90 fe ff       	call   c000a0c6 <Phys::allocatePage()>
c0021062:	39 c6                	cmp    esi,eax
c0021064:	74 10                	je     c0021076 <SATAPI::open(int, int, void*)+0x6c>
c0021066:	83 ec 0c             	sub    esp,0xc
c0021069:	68 46 6d 02 c0       	push   0xc0026d46
c002106e:	e8 7c 38 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0021073:	83 c4 10             	add    esp,0x10
c0021076:	83 ec 0c             	sub    esp,0xc
c0021079:	6a 02                	push   0x2
c002107b:	e8 59 a9 fe ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c0021080:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0021086:	6a 03                	push   0x3
c0021088:	50                   	push   eax
c0021089:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002108f:	ff 35 10 80 02 c0    	push   DWORD PTR ds:0xc0028010
c0021095:	e8 e6 af fe ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c002109a:	83 c4 14             	add    esp,0x14
c002109d:	68 74 01 00 00       	push   0x174
c00210a2:	e8 68 89 fe ff       	call   c0009a0f <malloc>
c00210a7:	83 c4 0c             	add    esp,0xc
c00210aa:	89 c6                	mov    esi,eax
c00210ac:	6a 00                	push   0x0
c00210ae:	68 ff ff ff 7f       	push   0x7fffffff
c00210b3:	6a 00                	push   0x0
c00210b5:	6a 00                	push   0x0
c00210b7:	53                   	push   ebx
c00210b8:	68 5c 6d 02 c0       	push   0xc0026d5c
c00210bd:	50                   	push   eax
c00210be:	e8 8f f1 fe ff       	call   c0010252 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00210c3:	83 c4 14             	add    esp,0x14
c00210c6:	56                   	push   esi
c00210c7:	e8 3c f2 fe ff       	call   c0010308 <LogicalDisk::assignDriveLetter()>
c00210cc:	58                   	pop    eax
c00210cd:	5a                   	pop    edx
c00210ce:	56                   	push   esi
c00210cf:	53                   	push   ebx
c00210d0:	e8 d1 d0 fe ff       	call   c000e1a6 <Device::addChild(Device*)>
c00210d5:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c00210db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00210de:	e8 63 d5 fe ff       	call   c000e646 <PhysicalDisk::startCache()>
c00210e3:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00210ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00210ed:	e8 d8 fd ff ff       	call   c0020eca <SATAPI::detectMedia()>
c00210f2:	83 c4 14             	add    esp,0x14
c00210f5:	31 c0                	xor    eax,eax
c00210f7:	5b                   	pop    ebx
c00210f8:	5e                   	pop    esi
c00210f9:	c3                   	ret    

c00210fa <SATAPI::read(unsigned long long, int, void*)>:
c00210fa:	55                   	push   ebp
c00210fb:	57                   	push   edi
c00210fc:	56                   	push   esi
c00210fd:	53                   	push   ebx
c00210fe:	83 ec 28             	sub    esp,0x28
c0021101:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0021105:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0021109:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002110d:	68 6a 6d 02 c0       	push   0xc0026d6a
c0021112:	e8 e8 bb fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0021117:	83 c4 10             	add    esp,0x10
c002111a:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0021121:	75 2c                	jne    c002114f <SATAPI::read(unsigned long long, int, void*)+0x55>
c0021123:	83 ec 0c             	sub    esp,0xc
c0021126:	55                   	push   ebp
c0021127:	e8 9e fd ff ff       	call   c0020eca <SATAPI::detectMedia()>
c002112c:	83 c4 10             	add    esp,0x10
c002112f:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0021136:	75 17                	jne    c002114f <SATAPI::read(unsigned long long, int, void*)+0x55>
c0021138:	83 ec 0c             	sub    esp,0xc
c002113b:	68 7b 6d 02 c0       	push   0xc0026d7b
c0021140:	e8 ba bb fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0021145:	83 c4 10             	add    esp,0x10
c0021148:	b8 02 00 00 00       	mov    eax,0x2
c002114d:	eb 70                	jmp    c00211bf <SATAPI::read(unsigned long long, int, void*)+0xc5>
c002114f:	83 ec 0c             	sub    esp,0xc
c0021152:	68 8c 6d 02 c0       	push   0xc0026d8c
c0021157:	e8 a3 bb fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c002115c:	83 c4 10             	add    esp,0x10
c002115f:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0021164:	7e 10                	jle    c0021176 <SATAPI::read(unsigned long long, int, void*)+0x7c>
c0021166:	83 ec 0c             	sub    esp,0xc
c0021169:	68 9d 6d 02 c0       	push   0xc0026d9d
c002116e:	e8 7c 37 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0021173:	83 c4 10             	add    esp,0x10
c0021176:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002117a:	b9 03 00 00 00       	mov    ecx,0x3
c002117f:	fc                   	cld    
c0021180:	31 c0                	xor    eax,eax
c0021182:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021184:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0021189:	89 d8                	mov    eax,ebx
c002118b:	86 e0                	xchg   al,ah
c002118d:	c1 c0 10             	rol    eax,0x10
c0021190:	86 e0                	xchg   al,ah
c0021192:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0021196:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002119a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002119e:	50                   	push   eax
c002119f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00211a3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00211a7:	56                   	push   esi
c00211a8:	53                   	push   ebx
c00211a9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00211ad:	c1 e0 0b             	shl    eax,0xb
c00211b0:	50                   	push   eax
c00211b1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00211b5:	50                   	push   eax
c00211b6:	55                   	push   ebp
c00211b7:	e8 22 fa ff ff       	call   c0020bde <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00211bc:	83 c4 20             	add    esp,0x20
c00211bf:	83 c4 1c             	add    esp,0x1c
c00211c2:	5b                   	pop    ebx
c00211c3:	5e                   	pop    esi
c00211c4:	5f                   	pop    edi
c00211c5:	5d                   	pop    ebp
c00211c6:	c3                   	ret    
c00211c7:	90                   	nop

c00211c8 <AVX::open(int, int, void*)>:
c00211c8:	83 ec 0c             	sub    esp,0xc
c00211cb:	e8 38 11 00 00       	call   c0022308 <avxInit>
c00211d0:	b8 00 00 00 00       	mov    eax,0x0
c00211d5:	83 c4 0c             	add    esp,0xc
c00211d8:	c3                   	ret    
c00211d9:	90                   	nop
c00211da:	66 90                	xchg   ax,ax

c00211dc <AVX::close(int, int, void*)>:
c00211dc:	83 ec 0c             	sub    esp,0xc
c00211df:	e8 25 11 00 00       	call   c0022309 <avxClose>
c00211e4:	b8 00 00 00 00       	mov    eax,0x0
c00211e9:	83 c4 0c             	add    esp,0xc
c00211ec:	c3                   	ret    
c00211ed:	90                   	nop
c00211ee:	66 90                	xchg   ax,ax

c00211f0 <AVX::available()>:
c00211f0:	83 ec 0c             	sub    esp,0xc
c00211f3:	e8 08 11 00 00       	call   c0022300 <avxDetect>
c00211f8:	85 c0                	test   eax,eax
c00211fa:	0f 95 c0             	setne  al
c00211fd:	83 c4 0c             	add    esp,0xc
c0021200:	c3                   	ret    
c0021201:	90                   	nop
c0021202:	66 90                	xchg   ax,ax

c0021204 <AVX::save(void*)>:
c0021204:	83 ec 0c             	sub    esp,0xc
c0021207:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002120b:	83 ec 0c             	sub    esp,0xc
c002120e:	50                   	push   eax
c002120f:	e8 f2 10 00 00       	call   c0022306 <avxSave>
c0021214:	83 c4 10             	add    esp,0x10
c0021217:	90                   	nop
c0021218:	83 c4 0c             	add    esp,0xc
c002121b:	c3                   	ret    

c002121c <AVX::load(void*)>:
c002121c:	83 ec 0c             	sub    esp,0xc
c002121f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021223:	83 ec 0c             	sub    esp,0xc
c0021226:	50                   	push   eax
c0021227:	e8 db 10 00 00       	call   c0022307 <avxLoad>
c002122c:	83 c4 10             	add    esp,0x10
c002122f:	90                   	nop
c0021230:	83 c4 0c             	add    esp,0xc
c0021233:	c3                   	ret    

c0021234 <AVX::AVX()>:
c0021234:	83 ec 0c             	sub    esp,0xc
c0021237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002123b:	83 ec 08             	sub    esp,0x8
c002123e:	68 00 6e 02 c0       	push   0xc0026e00
c0021243:	50                   	push   eax
c0021244:	e8 73 d4 fe ff       	call   c000e6bc <FPU::FPU(char const*)>
c0021249:	83 c4 10             	add    esp,0x10
c002124c:	ba 10 6e 02 c0       	mov    edx,0xc0026e10
c0021251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021255:	89 10                	mov    DWORD PTR [eax],edx
c0021257:	90                   	nop
c0021258:	83 c4 0c             	add    esp,0xc
c002125b:	c3                   	ret    

c002125c <MMX::available()>:
c002125c:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c0021261:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021267:	83 e0 20             	and    eax,0x20
c002126a:	84 c0                	test   al,al
c002126c:	0f 95 c0             	setne  al
c002126f:	c3                   	ret    

c0021270 <MMX::open(int, int, void*)>:
c0021270:	83 ec 0c             	sub    esp,0xc
c0021273:	e8 1a 11 00 00       	call   c0022392 <x87Init>
c0021278:	b8 00 00 00 00       	mov    eax,0x0
c002127d:	83 c4 0c             	add    esp,0xc
c0021280:	c3                   	ret    
c0021281:	90                   	nop
c0021282:	66 90                	xchg   ax,ax

c0021284 <MMX::close(int, int, void*)>:
c0021284:	83 ec 0c             	sub    esp,0xc
c0021287:	e8 20 11 00 00       	call   c00223ac <x87Close>
c002128c:	b8 00 00 00 00       	mov    eax,0x0
c0021291:	83 c4 0c             	add    esp,0xc
c0021294:	c3                   	ret    
c0021295:	90                   	nop
c0021296:	66 90                	xchg   ax,ax

c0021298 <MMX::save(void*)>:
c0021298:	83 ec 0c             	sub    esp,0xc
c002129b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002129f:	83 ec 0c             	sub    esp,0xc
c00212a2:	50                   	push   eax
c00212a3:	e8 d9 10 00 00       	call   c0022381 <x87Save>
c00212a8:	83 c4 10             	add    esp,0x10
c00212ab:	90                   	nop
c00212ac:	83 c4 0c             	add    esp,0xc
c00212af:	c3                   	ret    

c00212b0 <MMX::load(void*)>:
c00212b0:	83 ec 0c             	sub    esp,0xc
c00212b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00212b7:	83 ec 0c             	sub    esp,0xc
c00212ba:	50                   	push   eax
c00212bb:	e8 ca 10 00 00       	call   c002238a <x87Load>
c00212c0:	83 c4 10             	add    esp,0x10
c00212c3:	90                   	nop
c00212c4:	83 c4 0c             	add    esp,0xc
c00212c7:	c3                   	ret    

c00212c8 <MMX::MMX()>:
c00212c8:	83 ec 0c             	sub    esp,0xc
c00212cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212cf:	83 ec 08             	sub    esp,0x8
c00212d2:	68 40 6e 02 c0       	push   0xc0026e40
c00212d7:	50                   	push   eax
c00212d8:	e8 df d3 fe ff       	call   c000e6bc <FPU::FPU(char const*)>
c00212dd:	83 c4 10             	add    esp,0x10
c00212e0:	ba 50 6e 02 c0       	mov    edx,0xc0026e50
c00212e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212e9:	89 10                	mov    DWORD PTR [eax],edx
c00212eb:	90                   	nop
c00212ec:	83 c4 0c             	add    esp,0xc
c00212ef:	c3                   	ret    

c00212f0 <SSE::open(int, int, void*)>:
c00212f0:	83 ec 0c             	sub    esp,0xc
c00212f3:	e8 4c 10 00 00       	call   c0022344 <sseInit>
c00212f8:	b8 00 00 00 00       	mov    eax,0x0
c00212fd:	83 c4 0c             	add    esp,0xc
c0021300:	c3                   	ret    
c0021301:	90                   	nop
c0021302:	66 90                	xchg   ax,ax

c0021304 <SSE::close(int, int, void*)>:
c0021304:	83 ec 0c             	sub    esp,0xc
c0021307:	e8 48 10 00 00       	call   c0022354 <sseClose>
c002130c:	b8 00 00 00 00       	mov    eax,0x0
c0021311:	83 c4 0c             	add    esp,0xc
c0021314:	c3                   	ret    
c0021315:	90                   	nop
c0021316:	66 90                	xchg   ax,ax

c0021318 <SSE::available()>:
c0021318:	83 ec 1c             	sub    esp,0x1c
c002131b:	e8 00 10 00 00       	call   c0022320 <absolutelyNoChanceInHell>
c0021320:	85 c0                	test   eax,eax
c0021322:	0f 95 c0             	setne  al
c0021325:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021329:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002132d:	83 c4 1c             	add    esp,0x1c
c0021330:	c3                   	ret    
c0021331:	90                   	nop
c0021332:	66 90                	xchg   ax,ax

c0021334 <SSE::save(void*)>:
c0021334:	83 ec 0c             	sub    esp,0xc
c0021337:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002133b:	83 ec 0c             	sub    esp,0xc
c002133e:	50                   	push   eax
c002133f:	e8 f4 0f 00 00       	call   c0022338 <sseSave>
c0021344:	83 c4 10             	add    esp,0x10
c0021347:	90                   	nop
c0021348:	83 c4 0c             	add    esp,0xc
c002134b:	c3                   	ret    

c002134c <SSE::load(void*)>:
c002134c:	83 ec 0c             	sub    esp,0xc
c002134f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021353:	83 ec 0c             	sub    esp,0xc
c0021356:	50                   	push   eax
c0021357:	e8 e2 0f 00 00       	call   c002233e <sseLoad>
c002135c:	83 c4 10             	add    esp,0x10
c002135f:	90                   	nop
c0021360:	83 c4 0c             	add    esp,0xc
c0021363:	c3                   	ret    

c0021364 <SSE::SSE()>:
c0021364:	83 ec 0c             	sub    esp,0xc
c0021367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002136b:	83 ec 08             	sub    esp,0x8
c002136e:	68 80 6e 02 c0       	push   0xc0026e80
c0021373:	50                   	push   eax
c0021374:	e8 43 d3 fe ff       	call   c000e6bc <FPU::FPU(char const*)>
c0021379:	83 c4 10             	add    esp,0x10
c002137c:	ba 90 6e 02 c0       	mov    edx,0xc0026e90
c0021381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021385:	89 10                	mov    DWORD PTR [eax],edx
c0021387:	90                   	nop
c0021388:	83 c4 0c             	add    esp,0xc
c002138b:	c3                   	ret    

c002138c <x87::open(int, int, void*)>:
c002138c:	83 ec 0c             	sub    esp,0xc
c002138f:	e8 fe 0f 00 00       	call   c0022392 <x87Init>
c0021394:	b8 00 00 00 00       	mov    eax,0x0
c0021399:	83 c4 0c             	add    esp,0xc
c002139c:	c3                   	ret    
c002139d:	90                   	nop
c002139e:	66 90                	xchg   ax,ax

c00213a0 <x87::close(int, int, void*)>:
c00213a0:	83 ec 0c             	sub    esp,0xc
c00213a3:	e8 04 10 00 00       	call   c00223ac <x87Close>
c00213a8:	b8 00 00 00 00       	mov    eax,0x0
c00213ad:	83 c4 0c             	add    esp,0xc
c00213b0:	c3                   	ret    
c00213b1:	90                   	nop
c00213b2:	66 90                	xchg   ax,ax

c00213b4 <x87::available()>:
c00213b4:	83 ec 0c             	sub    esp,0xc
c00213b7:	e8 aa 0f 00 00       	call   c0022366 <x87Detect>
c00213bc:	85 c0                	test   eax,eax
c00213be:	0f 95 c0             	setne  al
c00213c1:	83 c4 0c             	add    esp,0xc
c00213c4:	c3                   	ret    
c00213c5:	90                   	nop
c00213c6:	66 90                	xchg   ax,ax

c00213c8 <x87::save(void*)>:
c00213c8:	83 ec 0c             	sub    esp,0xc
c00213cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00213cf:	83 ec 0c             	sub    esp,0xc
c00213d2:	50                   	push   eax
c00213d3:	e8 a9 0f 00 00       	call   c0022381 <x87Save>
c00213d8:	83 c4 10             	add    esp,0x10
c00213db:	90                   	nop
c00213dc:	83 c4 0c             	add    esp,0xc
c00213df:	c3                   	ret    

c00213e0 <x87::load(void*)>:
c00213e0:	83 ec 0c             	sub    esp,0xc
c00213e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00213e7:	83 ec 0c             	sub    esp,0xc
c00213ea:	50                   	push   eax
c00213eb:	e8 9a 0f 00 00       	call   c002238a <x87Load>
c00213f0:	83 c4 10             	add    esp,0x10
c00213f3:	90                   	nop
c00213f4:	83 c4 0c             	add    esp,0xc
c00213f7:	c3                   	ret    

c00213f8 <x87::x87()>:
c00213f8:	83 ec 0c             	sub    esp,0xc
c00213fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213ff:	83 ec 08             	sub    esp,0x8
c0021402:	68 c0 6e 02 c0       	push   0xc0026ec0
c0021407:	50                   	push   eax
c0021408:	e8 af d2 fe ff       	call   c000e6bc <FPU::FPU(char const*)>
c002140d:	83 c4 10             	add    esp,0x10
c0021410:	ba d0 6e 02 c0       	mov    edx,0xc0026ed0
c0021415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021419:	89 10                	mov    DWORD PTR [eax],edx
c002141b:	90                   	nop
c002141c:	83 c4 0c             	add    esp,0xc
c002141f:	c3                   	ret    

c0021420 <APIC::disable()>:
c0021420:	90                   	nop
c0021421:	c3                   	ret    

c0021422 <APIC::close(int, int, void*)>:
c0021422:	55                   	push   ebp
c0021423:	89 e5                	mov    ebp,esp
c0021425:	83 ec 08             	sub    esp,0x8
c0021428:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002142b:	8b 00                	mov    eax,DWORD PTR [eax]
c002142d:	83 c0 3c             	add    eax,0x3c
c0021430:	8b 00                	mov    eax,DWORD PTR [eax]
c0021432:	83 ec 0c             	sub    esp,0xc
c0021435:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021438:	ff d0                	call   eax
c002143a:	83 c4 10             	add    esp,0x10
c002143d:	b8 00 00 00 00       	mov    eax,0x0
c0021442:	c9                   	leave  
c0021443:	c3                   	ret    

c0021444 <IOAPIC::close(int, int, void*)>:
c0021444:	b8 00 00 00 00       	mov    eax,0x0
c0021449:	c3                   	ret    

c002144a <APIC::io_wait()>:
c002144a:	eb 00                	jmp    c002144c <APIC::io_wait()+0x2>
c002144c:	eb 00                	jmp    c002144e <APIC::io_wait()+0x4>
c002144e:	90                   	nop
c002144f:	c3                   	ret    

c0021450 <APIC::getBase()>:
c0021450:	55                   	push   ebp
c0021451:	89 e5                	mov    ebp,esp
c0021453:	83 ec 18             	sub    esp,0x18
c0021456:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c002145b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021461:	83 e0 08             	and    eax,0x8
c0021464:	84 c0                	test   al,al
c0021466:	75 07                	jne    c002146f <APIC::getBase()+0x1f>
c0021468:	b8 00 00 00 00       	mov    eax,0x0
c002146d:	eb 21                	jmp    c0021490 <APIC::getBase()+0x40>
c002146f:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c0021474:	83 ec 08             	sub    esp,0x8
c0021477:	6a 1b                	push   0x1b
c0021479:	50                   	push   eax
c002147a:	e8 ab 7a fe ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c002147f:	83 c4 10             	add    esp,0x10
c0021482:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021485:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0021488:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002148b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0021490:	c9                   	leave  
c0021491:	c3                   	ret    

c0021492 <APIC::eoi(unsigned char)>:
c0021492:	55                   	push   ebp
c0021493:	89 e5                	mov    ebp,esp
c0021495:	83 ec 28             	sub    esp,0x28
c0021498:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002149b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002149e:	83 ec 0c             	sub    esp,0xc
c00214a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00214a4:	e8 a7 ff ff ff       	call   c0021450 <APIC::getBase()>
c00214a9:	83 c4 10             	add    esp,0x10
c00214ac:	05 b0 00 00 00       	add    eax,0xb0
c00214b1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00214b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00214b7:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00214bd:	90                   	nop
c00214be:	c9                   	leave  
c00214bf:	c3                   	ret    

c00214c0 <APIC::open(int, int, void*)>:
c00214c0:	55                   	push   ebp
c00214c1:	89 e5                	mov    ebp,esp
c00214c3:	57                   	push   edi
c00214c4:	56                   	push   esi
c00214c5:	53                   	push   ebx
c00214c6:	83 ec 2c             	sub    esp,0x2c
c00214c9:	83 ec 0c             	sub    esp,0xc
c00214cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00214cf:	e8 7c ff ff ff       	call   c0021450 <APIC::getBase()>
c00214d4:	83 c4 10             	add    esp,0x10
c00214d7:	89 c2                	mov    edx,eax
c00214d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214dc:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00214e2:	0f b6 f8             	movzx  edi,al
c00214e5:	89 d0                	mov    eax,edx
c00214e7:	ba 00 00 00 00       	mov    edx,0x0
c00214ec:	89 c1                	mov    ecx,eax
c00214ee:	80 e5 ff             	and    ch,0xff
c00214f1:	89 cb                	mov    ebx,ecx
c00214f3:	0f b6 f2             	movzx  esi,dl
c00214f6:	89 d8                	mov    eax,ebx
c00214f8:	89 f2                	mov    edx,esi
c00214fa:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00214fd:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021500:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021504:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021508:	83 e0 00             	and    eax,0x0
c002150b:	09 d0                	or     eax,edx
c002150d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021514:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002151a:	8d 50 01             	lea    edx,[eax+0x1]
c002151d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021520:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021526:	0f b6 d0             	movzx  edx,al
c0021529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002152c:	83 c2 08             	add    edx,0x8
c002152f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021533:	0f b6 c9             	movzx  ecx,cl
c0021536:	81 c9 00 00 01 00    	or     ecx,0x10000
c002153c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021540:	83 ec 0c             	sub    esp,0xc
c0021543:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021546:	e8 05 ff ff ff       	call   c0021450 <APIC::getBase()>
c002154b:	83 c4 10             	add    esp,0x10
c002154e:	05 f0 00 00 00       	add    eax,0xf0
c0021553:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0021556:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021559:	8b 00                	mov    eax,DWORD PTR [eax]
c002155b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002155e:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0021565:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002156c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002156f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021572:	89 10                	mov    DWORD PTR [eax],edx
c0021574:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002157b:	a1 50 87 02 c0       	mov    eax,ds:0xc0028750
c0021580:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0021583:	7d 7c                	jge    c0021601 <APIC::open(int, int, void*)+0x141>
c0021585:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021588:	8b 04 85 60 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd78a0]
c002158f:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0021592:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021595:	8b 04 85 60 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd78a0]
c002159c:	c1 e8 08             	shr    eax,0x8
c002159f:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00215a3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00215a6:	8b 04 85 60 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd78a0]
c00215ad:	c1 e8 18             	shr    eax,0x18
c00215b0:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00215b3:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00215b7:	75 40                	jne    c00215f9 <APIC::open(int, int, void*)+0x139>
c00215b9:	83 ec 0c             	sub    esp,0xc
c00215bc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00215bf:	e8 8c fe ff ff       	call   c0021450 <APIC::getBase()>
c00215c4:	83 c4 10             	add    esp,0x10
c00215c7:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00215cb:	75 07                	jne    c00215d4 <APIC::open(int, int, void*)+0x114>
c00215cd:	ba 60 03 00 00       	mov    edx,0x360
c00215d2:	eb 05                	jmp    c00215d9 <APIC::open(int, int, void*)+0x119>
c00215d4:	ba 50 03 00 00       	mov    edx,0x350
c00215d9:	01 d0                	add    eax,edx
c00215db:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00215de:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00215e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00215e3:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00215e6:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00215ed:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00215f1:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00215f4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00215f7:	89 10                	mov    DWORD PTR [eax],edx
c00215f9:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00215fc:	e9 7a ff ff ff       	jmp    c002157b <APIC::open(int, int, void*)+0xbb>
c0021601:	b8 00 00 00 00       	mov    eax,0x0
c0021606:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021609:	5b                   	pop    ebx
c002160a:	5e                   	pop    esi
c002160b:	5f                   	pop    edi
c002160c:	5d                   	pop    ebp
c002160d:	c3                   	ret    

c002160e <IOAPIC::IOAPIC()>:
c002160e:	83 ec 0c             	sub    esp,0xc
c0021611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021615:	83 ec 08             	sub    esp,0x8
c0021618:	68 00 6f 02 c0       	push   0xc0026f00
c002161d:	50                   	push   eax
c002161e:	e8 87 cd fe ff       	call   c000e3aa <Device::Device(char const*)>
c0021623:	83 c4 10             	add    esp,0x10
c0021626:	ba 28 70 02 c0       	mov    edx,0xc0027028
c002162b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002162f:	89 10                	mov    DWORD PTR [eax],edx
c0021631:	90                   	nop
c0021632:	83 c4 0c             	add    esp,0xc
c0021635:	c3                   	ret    

c0021636 <APIC::APIC()>:
c0021636:	53                   	push   ebx
c0021637:	83 ec 18             	sub    esp,0x18
c002163a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002163e:	83 ec 08             	sub    esp,0x8
c0021641:	68 08 6f 02 c0       	push   0xc0026f08
c0021646:	50                   	push   eax
c0021647:	e8 d6 d4 fe ff       	call   c000eb22 <InterruptController::InterruptController(char const*)>
c002164c:	83 c4 10             	add    esp,0x10
c002164f:	ba e0 6f 02 c0       	mov    edx,0xc0026fe0
c0021654:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021658:	89 10                	mov    DWORD PTR [eax],edx
c002165a:	a0 80 9e 02 c0       	mov    al,ds:0xc0029e80
c002165f:	83 f0 01             	xor    eax,0x1
c0021662:	84 c0                	test   al,al
c0021664:	0f 84 a1 00 00 00    	je     c002170b <APIC::APIC()+0xd5>
c002166a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002166f:	a0 00 88 02 c0       	mov    al,ds:0xc0028800
c0021674:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0021678:	0f 83 86 00 00 00    	jae    c0021704 <APIC::APIC()+0xce>
c002167e:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0021686:	83 ec 0c             	sub    esp,0xc
c0021689:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002168d:	e8 7d 83 fe ff       	call   c0009a0f <malloc>
c0021692:	83 c4 10             	add    esp,0x10
c0021695:	89 c3                	mov    ebx,eax
c0021697:	83 ec 0c             	sub    esp,0xc
c002169a:	53                   	push   ebx
c002169b:	e8 6e ff ff ff       	call   c002160e <IOAPIC::IOAPIC()>
c00216a0:	83 c4 10             	add    esp,0x10
c00216a3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00216a7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00216ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00216b0:	89 14 85 60 9e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd61a0],edx
c00216b7:	a1 40 9e 02 c0       	mov    eax,ds:0xc0029e40
c00216bc:	40                   	inc    eax
c00216bd:	a3 40 9e 02 c0       	mov    ds:0xc0029e40,eax
c00216c2:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c00216c7:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00216cd:	83 ec 08             	sub    esp,0x8
c00216d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00216d4:	50                   	push   eax
c00216d5:	e8 cc ca fe ff       	call   c000e1a6 <Device::addChild(Device*)>
c00216da:	83 c4 10             	add    esp,0x10
c00216dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00216e3:	83 c0 08             	add    eax,0x8
c00216e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00216e8:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00216ed:	6a 00                	push   0x0
c00216ef:	6a 00                	push   0x0
c00216f1:	52                   	push   edx
c00216f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216f6:	ff d0                	call   eax
c00216f8:	83 c4 10             	add    esp,0x10
c00216fb:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00216ff:	e9 6b ff ff ff       	jmp    c002166f <APIC::APIC()+0x39>
c0021704:	c6 05 80 9e 02 c0 01 	mov    BYTE PTR ds:0xc0029e80,0x1
c002170b:	90                   	nop
c002170c:	83 c4 18             	add    esp,0x18
c002170f:	5b                   	pop    ebx
c0021710:	c3                   	ret    
c0021711:	90                   	nop

c0021712 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0021712:	55                   	push   ebp
c0021713:	89 e5                	mov    ebp,esp
c0021715:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021718:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002171e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021721:	72 1d                	jb     c0021740 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021723:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021726:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002172c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002172f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0021735:	01 d0                	add    eax,edx
c0021737:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002173a:	73 04                	jae    c0021740 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002173c:	b0 01                	mov    al,0x1
c002173e:	eb 02                	jmp    c0021742 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0021740:	b0 00                	mov    al,0x0
c0021742:	5d                   	pop    ebp
c0021743:	c3                   	ret    

c0021744 <IOAPIC::read(int)>:
c0021744:	55                   	push   ebp
c0021745:	89 e5                	mov    ebp,esp
c0021747:	83 ec 10             	sub    esp,0x10
c002174a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002174d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021753:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021756:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021759:	0f b6 d0             	movzx  edx,al
c002175c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002175f:	89 10                	mov    DWORD PTR [eax],edx
c0021761:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021764:	83 c0 10             	add    eax,0x10
c0021767:	8b 00                	mov    eax,DWORD PTR [eax]
c0021769:	c9                   	leave  
c002176a:	c3                   	ret    
c002176b:	90                   	nop

c002176c <IOAPIC::open(int, int, void*)>:
c002176c:	55                   	push   ebp
c002176d:	89 e5                	mov    ebp,esp
c002176f:	57                   	push   edi
c0021770:	56                   	push   esi
c0021771:	53                   	push   ebx
c0021772:	83 ec 0c             	sub    esp,0xc
c0021775:	83 ec 0c             	sub    esp,0xc
c0021778:	68 33 6f 02 c0       	push   0xc0026f33
c002177d:	e8 7d b5 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0021782:	83 c4 10             	add    esp,0x10
c0021785:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021788:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002178b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021791:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021794:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002179a:	8b 14 85 40 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd77c0]
c00217a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217a4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00217aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217ad:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00217b3:	8b 14 85 c0 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7740]
c00217ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217bd:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00217c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217c6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00217cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217cf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00217d5:	0f b6 f8             	movzx  edi,al
c00217d8:	89 d0                	mov    eax,edx
c00217da:	ba 00 00 00 00       	mov    edx,0x0
c00217df:	89 c1                	mov    ecx,eax
c00217e1:	80 e5 ff             	and    ch,0xff
c00217e4:	89 cb                	mov    ebx,ecx
c00217e6:	0f b6 f2             	movzx  esi,dl
c00217e9:	89 d8                	mov    eax,ebx
c00217eb:	89 f2                	mov    edx,esi
c00217ed:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00217f0:	8d 5f 08             	lea    ebx,[edi+0x8]
c00217f3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00217f7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00217fb:	83 e0 00             	and    eax,0x0
c00217fe:	09 d0                	or     eax,edx
c0021800:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021804:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021807:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002180d:	8d 50 01             	lea    edx,[eax+0x1]
c0021810:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021813:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021819:	0f b6 d0             	movzx  edx,al
c002181c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002181f:	83 c2 08             	add    edx,0x8
c0021822:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021826:	0f b6 c9             	movzx  ecx,cl
c0021829:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002182f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021833:	83 ec 08             	sub    esp,0x8
c0021836:	6a 01                	push   0x1
c0021838:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002183b:	e8 04 ff ff ff       	call   c0021744 <IOAPIC::read(int)>
c0021840:	83 c4 10             	add    esp,0x10
c0021843:	c1 f8 10             	sar    eax,0x10
c0021846:	0f b6 c0             	movzx  eax,al
c0021849:	8d 50 01             	lea    edx,[eax+0x1]
c002184c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002184f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0021855:	b8 00 00 00 00       	mov    eax,0x0
c002185a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002185d:	5b                   	pop    ebx
c002185e:	5e                   	pop    esi
c002185f:	5f                   	pop    edi
c0021860:	5d                   	pop    ebp
c0021861:	c3                   	ret    

c0021862 <IOAPIC::write(int, int)>:
c0021862:	55                   	push   ebp
c0021863:	89 e5                	mov    ebp,esp
c0021865:	83 ec 10             	sub    esp,0x10
c0021868:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002186b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021871:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021874:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021877:	0f b6 d0             	movzx  edx,al
c002187a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002187d:	89 10                	mov    DWORD PTR [eax],edx
c002187f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021882:	8d 50 10             	lea    edx,[eax+0x10]
c0021885:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021888:	89 02                	mov    DWORD PTR [edx],eax
c002188a:	90                   	nop
c002188b:	c9                   	leave  
c002188c:	c3                   	ret    
c002188d:	90                   	nop

c002188e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002188e:	55                   	push   ebp
c002188f:	89 e5                	mov    ebp,esp
c0021891:	53                   	push   ebx
c0021892:	83 ec 2c             	sub    esp,0x2c
c0021895:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021898:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002189b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002189e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00218a1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00218a4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00218a7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00218aa:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00218ad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00218b0:	88 d8                	mov    al,bl
c00218b2:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00218b5:	88 c8                	mov    al,cl
c00218b7:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00218ba:	88 d0                	mov    al,dl
c00218bc:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00218bf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00218c3:	83 c0 08             	add    eax,0x8
c00218c6:	01 c0                	add    eax,eax
c00218c8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00218cb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00218cf:	83 c0 08             	add    eax,0x8
c00218d2:	01 c0                	add    eax,eax
c00218d4:	40                   	inc    eax
c00218d5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00218d8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00218db:	50                   	push   eax
c00218dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00218df:	e8 60 fe ff ff       	call   c0021744 <IOAPIC::read(int)>
c00218e4:	83 c4 08             	add    esp,0x8
c00218e7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00218ea:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00218f1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00218f4:	c1 e0 18             	shl    eax,0x18
c00218f7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00218fa:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00218fd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0021900:	52                   	push   edx
c0021901:	50                   	push   eax
c0021902:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021905:	e8 58 ff ff ff       	call   c0021862 <IOAPIC::write(int, int)>
c002190a:	83 c4 0c             	add    esp,0xc
c002190d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021910:	50                   	push   eax
c0021911:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021914:	e8 2b fe ff ff       	call   c0021744 <IOAPIC::read(int)>
c0021919:	83 c4 08             	add    esp,0x8
c002191c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002191f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0021926:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002192d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0021934:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0021938:	74 09                	je     c0021943 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002193a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0021941:	eb 07                	jmp    c002194a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0021943:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002194a:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002194e:	74 09                	je     c0021959 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0021950:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0021957:	eb 07                	jmp    c0021960 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0021959:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0021960:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0021967:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002196b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002196e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0021971:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021974:	52                   	push   edx
c0021975:	50                   	push   eax
c0021976:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021979:	e8 e4 fe ff ff       	call   c0021862 <IOAPIC::write(int, int)>
c002197e:	83 c4 0c             	add    esp,0xc
c0021981:	90                   	nop
c0021982:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0021985:	c9                   	leave  
c0021986:	c3                   	ret    
c0021987:	90                   	nop

c0021988 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0021988:	55                   	push   ebp
c0021989:	89 e5                	mov    ebp,esp
c002198b:	57                   	push   edi
c002198c:	56                   	push   esi
c002198d:	53                   	push   ebx
c002198e:	83 ec 2c             	sub    esp,0x2c
c0021991:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021994:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021997:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002199b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002199f:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00219a3:	74 5a                	je     c00219ff <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00219a5:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00219a9:	7f 44                	jg     c00219ef <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00219ab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00219ae:	05 e0 75 02 c0       	add    eax,0xc00275e0
c00219b3:	8a 00                	mov    al,BYTE PTR [eax]
c00219b5:	0f b6 c0             	movzx  eax,al
c00219b8:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00219bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00219be:	66 8b 84 00 e0 87 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd7820]
c00219c6:	0f b7 c0             	movzx  eax,ax
c00219c9:	83 e0 02             	and    eax,0x2
c00219cc:	85 c0                	test   eax,eax
c00219ce:	74 04                	je     c00219d4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00219d0:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00219d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00219d7:	66 8b 84 00 e0 87 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd7820]
c00219df:	0f b7 c0             	movzx  eax,ax
c00219e2:	83 e0 08             	and    eax,0x8
c00219e5:	85 c0                	test   eax,eax
c00219e7:	74 16                	je     c00219ff <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00219e9:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00219ed:	eb 10                	jmp    c00219ff <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00219ef:	83 ec 0c             	sub    esp,0xc
c00219f2:	68 44 6f 02 c0       	push   0xc0026f44
c00219f7:	e8 f3 2e ff ff       	call   c00148ef <Krnl::panic(char const*)>
c00219fc:	83 c4 10             	add    esp,0x10
c00219ff:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0021a03:	a1 40 9e 02 c0       	mov    eax,ds:0xc0029e40
c0021a08:	83 ec 08             	sub    esp,0x8
c0021a0b:	50                   	push   eax
c0021a0c:	68 7c 6f 02 c0       	push   0xc0026f7c
c0021a11:	e8 e9 b2 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0021a16:	83 c4 10             	add    esp,0x10
c0021a19:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0021a20:	a1 40 9e 02 c0       	mov    eax,ds:0xc0029e40
c0021a25:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0021a28:	7d 67                	jge    c0021a91 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0021a2a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021a2d:	8b 04 85 60 9e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd61a0]
c0021a34:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021a37:	83 ec 08             	sub    esp,0x8
c0021a3a:	52                   	push   edx
c0021a3b:	50                   	push   eax
c0021a3c:	e8 d1 fc ff ff       	call   c0021712 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0021a41:	83 c4 10             	add    esp,0x10
c0021a44:	84 c0                	test   al,al
c0021a46:	74 44                	je     c0021a8c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0021a48:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021a4b:	8b 1c 85 60 9e 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd61a0]
c0021a52:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0021a56:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021a59:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0021a5d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a60:	83 c0 20             	add    eax,0x20
c0021a63:	0f b6 f0             	movzx  esi,al
c0021a66:	b8 00 00 00 00       	mov    eax,0x0
c0021a6b:	99                   	cdq    
c0021a6c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0021a6f:	0f b6 c9             	movzx  ecx,cl
c0021a72:	83 ec 04             	sub    esp,0x4
c0021a75:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0021a78:	57                   	push   edi
c0021a79:	56                   	push   esi
c0021a7a:	52                   	push   edx
c0021a7b:	50                   	push   eax
c0021a7c:	51                   	push   ecx
c0021a7d:	53                   	push   ebx
c0021a7e:	e8 0b fe ff ff       	call   c002188e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0021a83:	83 c4 20             	add    esp,0x20
c0021a86:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0021a8a:	eb 05                	jmp    c0021a91 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0021a8c:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0021a8f:	eb 8f                	jmp    c0021a20 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0021a91:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0021a94:	83 f0 01             	xor    eax,0x1
c0021a97:	84 c0                	test   al,al
c0021a99:	74 10                	je     c0021aab <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0021a9b:	83 ec 0c             	sub    esp,0xc
c0021a9e:	68 93 6f 02 c0       	push   0xc0026f93
c0021aa3:	e8 47 2e ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0021aa8:	83 c4 10             	add    esp,0x10
c0021aab:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0021aaf:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0021ab6:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0021aba:	7f 65                	jg     c0021b21 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0021abc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021abf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021ac2:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021ac9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021acc:	01 ca                	add    edx,ecx
c0021ace:	83 c2 54             	add    edx,0x54
c0021ad1:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0021ad5:	85 c0                	test   eax,eax
c0021ad7:	75 43                	jne    c0021b1c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0021ad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021adc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021adf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021ae6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021ae9:	01 ca                	add    edx,ecx
c0021aeb:	8d 4a 54             	lea    ecx,[edx+0x54]
c0021aee:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021af1:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021af5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021af8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021afb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021b02:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021b05:	01 ca                	add    edx,ecx
c0021b07:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0021b0d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021b10:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021b14:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021b17:	83 e8 20             	sub    eax,0x20
c0021b1a:	eb 1a                	jmp    c0021b36 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0021b1c:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0021b1f:	eb 95                	jmp    c0021ab6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0021b21:	83 ec 0c             	sub    esp,0xc
c0021b24:	68 a0 6f 02 c0       	push   0xc0026fa0
c0021b29:	e8 c1 2d ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0021b2e:	83 c4 10             	add    esp,0x10
c0021b31:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021b36:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021b39:	5b                   	pop    ebx
c0021b3a:	5e                   	pop    esi
c0021b3b:	5f                   	pop    edi
c0021b3c:	5d                   	pop    ebp
c0021b3d:	c3                   	ret    

c0021b3e <PIC::disable()>:
c0021b3e:	55                   	push   ebp
c0021b3f:	89 e5                	mov    ebp,esp
c0021b41:	83 ec 10             	sub    esp,0x10
c0021b44:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0021b4a:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0021b4e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021b51:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021b55:	ee                   	out    dx,al
c0021b56:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0021b5c:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0021b60:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021b63:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0021b67:	ee                   	out    dx,al
c0021b68:	90                   	nop
c0021b69:	c9                   	leave  
c0021b6a:	c3                   	ret    
c0021b6b:	90                   	nop

c0021b6c <PIC::close(int, int, void*)>:
c0021b6c:	55                   	push   ebp
c0021b6d:	89 e5                	mov    ebp,esp
c0021b6f:	83 ec 08             	sub    esp,0x8
c0021b72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b75:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b77:	83 c0 3c             	add    eax,0x3c
c0021b7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b7c:	83 ec 0c             	sub    esp,0xc
c0021b7f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021b82:	ff d0                	call   eax
c0021b84:	83 c4 10             	add    esp,0x10
c0021b87:	b8 00 00 00 00       	mov    eax,0x0
c0021b8c:	c9                   	leave  
c0021b8d:	c3                   	ret    

c0021b8e <PIC::PIC()>:
c0021b8e:	83 ec 0c             	sub    esp,0xc
c0021b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b95:	83 ec 08             	sub    esp,0x8
c0021b98:	68 4c 70 02 c0       	push   0xc002704c
c0021b9d:	50                   	push   eax
c0021b9e:	e8 7f cf fe ff       	call   c000eb22 <InterruptController::InterruptController(char const*)>
c0021ba3:	83 c4 10             	add    esp,0x10
c0021ba6:	ba 78 70 02 c0       	mov    edx,0xc0027078
c0021bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021baf:	89 10                	mov    DWORD PTR [eax],edx
c0021bb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bb5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021bbb:	0f b6 d0             	movzx  edx,al
c0021bbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bc2:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0021bc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bcd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021bd3:	0f b6 d0             	movzx  edx,al
c0021bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bda:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021bdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021be3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021be9:	8d 50 01             	lea    edx,[eax+0x1]
c0021bec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021bf0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021bf6:	0f b6 d0             	movzx  edx,al
c0021bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bfd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021c01:	83 e1 3f             	and    ecx,0x3f
c0021c04:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c0c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021c12:	0f b6 d0             	movzx  edx,al
c0021c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c19:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0021c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c24:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021c2a:	0f b6 d0             	movzx  edx,al
c0021c2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c31:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c3a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021c40:	8d 50 01             	lea    edx,[eax+0x1]
c0021c43:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021c47:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021c4d:	0f b6 d0             	movzx  edx,al
c0021c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c54:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021c58:	83 e1 3f             	and    ecx,0x3f
c0021c5b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021c5f:	90                   	nop
c0021c60:	83 c4 0c             	add    esp,0xc
c0021c63:	c3                   	ret    

c0021c64 <PIC::ioWait()>:
c0021c64:	eb 00                	jmp    c0021c66 <PIC::ioWait()+0x2>
c0021c66:	eb 00                	jmp    c0021c68 <PIC::ioWait()+0x4>
c0021c68:	90                   	nop
c0021c69:	c3                   	ret    

c0021c6a <PIC::getIRQReg(int)>:
c0021c6a:	55                   	push   ebp
c0021c6b:	89 e5                	mov    ebp,esp
c0021c6d:	83 ec 10             	sub    esp,0x10
c0021c70:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021c73:	0f b6 c0             	movzx  eax,al
c0021c76:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021c7c:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0021c7f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021c82:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021c86:	ee                   	out    dx,al
c0021c87:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021c8a:	0f b6 c0             	movzx  eax,al
c0021c8d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021c93:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0021c96:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021c99:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021c9d:	ee                   	out    dx,al
c0021c9e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0021ca4:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0021ca8:	89 c2                	mov    edx,eax
c0021caa:	ec                   	in     al,dx
c0021cab:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0021cae:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021cb1:	0f b6 c0             	movzx  eax,al
c0021cb4:	c1 e0 08             	shl    eax,0x8
c0021cb7:	89 c1                	mov    ecx,eax
c0021cb9:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0021cbf:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0021cc3:	89 c2                	mov    edx,eax
c0021cc5:	ec                   	in     al,dx
c0021cc6:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0021cc9:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021ccc:	0f b6 c0             	movzx  eax,al
c0021ccf:	09 c8                	or     eax,ecx
c0021cd1:	c9                   	leave  
c0021cd2:	c3                   	ret    
c0021cd3:	90                   	nop

c0021cd4 <PIC::eoi(unsigned char)>:
c0021cd4:	55                   	push   ebp
c0021cd5:	89 e5                	mov    ebp,esp
c0021cd7:	83 ec 14             	sub    esp,0x14
c0021cda:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021cdd:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0021ce0:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021ce4:	75 1e                	jne    c0021d04 <PIC::eoi(unsigned char)+0x30>
c0021ce6:	6a 0b                	push   0xb
c0021ce8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021ceb:	e8 7a ff ff ff       	call   c0021c6a <PIC::getIRQReg(int)>
c0021cf0:	83 c4 08             	add    esp,0x8
c0021cf3:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0021cf7:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0021cfb:	25 80 00 00 00       	and    eax,0x80
c0021d00:	85 c0                	test   eax,eax
c0021d02:	74 5f                	je     c0021d63 <PIC::eoi(unsigned char)+0x8f>
c0021d04:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0021d08:	75 2d                	jne    c0021d37 <PIC::eoi(unsigned char)+0x63>
c0021d0a:	6a 0b                	push   0xb
c0021d0c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d0f:	e8 56 ff ff ff       	call   c0021c6a <PIC::getIRQReg(int)>
c0021d14:	83 c4 08             	add    esp,0x8
c0021d17:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0021d1b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021d1e:	66 85 c0             	test   ax,ax
c0021d21:	78 14                	js     c0021d37 <PIC::eoi(unsigned char)+0x63>
c0021d23:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0021d29:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0021d2d:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021d30:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021d34:	ee                   	out    dx,al
c0021d35:	eb 2d                	jmp    c0021d64 <PIC::eoi(unsigned char)+0x90>
c0021d37:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021d3b:	76 12                	jbe    c0021d4f <PIC::eoi(unsigned char)+0x7b>
c0021d3d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021d43:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0021d47:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021d4a:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021d4e:	ee                   	out    dx,al
c0021d4f:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021d55:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0021d59:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021d5c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021d60:	ee                   	out    dx,al
c0021d61:	eb 01                	jmp    c0021d64 <PIC::eoi(unsigned char)+0x90>
c0021d63:	90                   	nop
c0021d64:	c9                   	leave  
c0021d65:	c3                   	ret    

c0021d66 <PIC::remap()>:
c0021d66:	55                   	push   ebp
c0021d67:	89 e5                	mov    ebp,esp
c0021d69:	83 ec 48             	sub    esp,0x48
c0021d6c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0021d73:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0021d7a:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0021d80:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0021d83:	89 c2                	mov    edx,eax
c0021d85:	ec                   	in     al,dx
c0021d86:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0021d89:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0021d8c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0021d8f:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0021d95:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0021d98:	89 c2                	mov    edx,eax
c0021d9a:	ec                   	in     al,dx
c0021d9b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0021d9e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0021da1:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0021da4:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0021daa:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0021dae:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0021db1:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0021db4:	ee                   	out    dx,al
c0021db5:	83 ec 0c             	sub    esp,0xc
c0021db8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021dbb:	e8 a4 fe ff ff       	call   c0021c64 <PIC::ioWait()>
c0021dc0:	83 c4 10             	add    esp,0x10
c0021dc3:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0021dc9:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0021dcd:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0021dd0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021dd3:	ee                   	out    dx,al
c0021dd4:	83 ec 0c             	sub    esp,0xc
c0021dd7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021dda:	e8 85 fe ff ff       	call   c0021c64 <PIC::ioWait()>
c0021ddf:	83 c4 10             	add    esp,0x10
c0021de2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021de5:	0f b6 c0             	movzx  eax,al
c0021de8:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0021dee:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0021df1:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0021df4:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0021df7:	ee                   	out    dx,al
c0021df8:	83 ec 0c             	sub    esp,0xc
c0021dfb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021dfe:	e8 61 fe ff ff       	call   c0021c64 <PIC::ioWait()>
c0021e03:	83 c4 10             	add    esp,0x10
c0021e06:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021e09:	0f b6 c0             	movzx  eax,al
c0021e0c:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0021e12:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0021e15:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0021e18:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0021e1b:	ee                   	out    dx,al
c0021e1c:	83 ec 0c             	sub    esp,0xc
c0021e1f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e22:	e8 3d fe ff ff       	call   c0021c64 <PIC::ioWait()>
c0021e27:	83 c4 10             	add    esp,0x10
c0021e2a:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0021e30:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0021e34:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0021e37:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0021e3a:	ee                   	out    dx,al
c0021e3b:	83 ec 0c             	sub    esp,0xc
c0021e3e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e41:	e8 1e fe ff ff       	call   c0021c64 <PIC::ioWait()>
c0021e46:	83 c4 10             	add    esp,0x10
c0021e49:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0021e4f:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0021e53:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0021e56:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021e59:	ee                   	out    dx,al
c0021e5a:	83 ec 0c             	sub    esp,0xc
c0021e5d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e60:	e8 ff fd ff ff       	call   c0021c64 <PIC::ioWait()>
c0021e65:	83 c4 10             	add    esp,0x10
c0021e68:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0021e6e:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0021e72:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0021e75:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0021e78:	ee                   	out    dx,al
c0021e79:	83 ec 0c             	sub    esp,0xc
c0021e7c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e7f:	e8 e0 fd ff ff       	call   c0021c64 <PIC::ioWait()>
c0021e84:	83 c4 10             	add    esp,0x10
c0021e87:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0021e8d:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0021e91:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0021e94:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0021e97:	ee                   	out    dx,al
c0021e98:	83 ec 0c             	sub    esp,0xc
c0021e9b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e9e:	e8 c1 fd ff ff       	call   c0021c64 <PIC::ioWait()>
c0021ea3:	83 c4 10             	add    esp,0x10
c0021ea6:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0021eaa:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0021eb0:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0021eb3:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0021eb6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0021eb9:	ee                   	out    dx,al
c0021eba:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0021ebe:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0021ec4:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0021ec7:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0021eca:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0021ecd:	ee                   	out    dx,al
c0021ece:	90                   	nop
c0021ecf:	c9                   	leave  
c0021ed0:	c3                   	ret    
c0021ed1:	90                   	nop

c0021ed2 <PIC::open(int, int, void*)>:
c0021ed2:	55                   	push   ebp
c0021ed3:	89 e5                	mov    ebp,esp
c0021ed5:	83 ec 18             	sub    esp,0x18
c0021ed8:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0021ede:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0021ee2:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021ee5:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021ee9:	ee                   	out    dx,al
c0021eea:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0021ef0:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0021ef4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021ef7:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021efb:	ee                   	out    dx,al
c0021efc:	83 ec 0c             	sub    esp,0xc
c0021eff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f02:	e8 5f fe ff ff       	call   c0021d66 <PIC::remap()>
c0021f07:	83 c4 10             	add    esp,0x10
c0021f0a:	b8 00 00 00 00       	mov    eax,0x0
c0021f0f:	c9                   	leave  
c0021f10:	c3                   	ret    
c0021f11:	66 90                	xchg   ax,ax
c0021f13:	90                   	nop

c0021f14 <APICTimer::close(int, int, void*)>:
c0021f14:	b8 00 00 00 00       	mov    eax,0x0
c0021f19:	c3                   	ret    
c0021f1a:	66 90                	xchg   ax,ax

c0021f1c <apicTimerHandler(regs*, void*)>:
c0021f1c:	83 ec 0c             	sub    esp,0xc
c0021f1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021f23:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021f25:	b8 10 27 00 00       	mov    eax,0x2710
c0021f2a:	ba 00 00 00 00       	mov    edx,0x0
c0021f2f:	f7 f1                	div    ecx
c0021f31:	83 ec 0c             	sub    esp,0xc
c0021f34:	50                   	push   eax
c0021f35:	e8 f7 ea fe ff       	call   c0010a31 <timerHandler(unsigned int)>
c0021f3a:	83 c4 10             	add    esp,0x10
c0021f3d:	90                   	nop
c0021f3e:	83 c4 0c             	add    esp,0xc
c0021f41:	c3                   	ret    
c0021f42:	66 90                	xchg   ax,ax

c0021f44 <APICTimer::write(int)>:
c0021f44:	83 ec 1c             	sub    esp,0x1c
c0021f47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f4b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021f4f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021f55:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c0021f5a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021f60:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0021f66:	83 ec 0c             	sub    esp,0xc
c0021f69:	50                   	push   eax
c0021f6a:	e8 e1 f4 ff ff       	call   c0021450 <APIC::getBase()>
c0021f6f:	83 c4 10             	add    esp,0x10
c0021f72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021f76:	a1 0c 85 02 c0       	mov    eax,ds:0xc002850c
c0021f7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f83:	05 e0 03 00 00       	add    eax,0x3e0
c0021f88:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0021f8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f92:	05 80 03 00 00       	add    eax,0x380
c0021f97:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0021f9d:	fb                   	sti    
c0021f9e:	66 90                	xchg   ax,ax
c0021fa0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fa4:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c0021faa:	a1 0c 85 02 c0       	mov    eax,ds:0xc002850c
c0021faf:	39 c2                	cmp    edx,eax
c0021fb1:	76 05                	jbe    c0021fb8 <APICTimer::write(int)+0x74>
c0021fb3:	eb eb                	jmp    c0021fa0 <APICTimer::write(int)+0x5c>
c0021fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0021fb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021fbc:	05 20 03 00 00       	add    eax,0x320
c0021fc1:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0021fc7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021fcb:	05 90 03 00 00       	add    eax,0x390
c0021fd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fd2:	f7 d0                	not    eax
c0021fd4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021fd8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021fdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fe0:	ba 00 00 00 00       	mov    edx,0x0
c0021fe5:	f7 f1                	div    ecx
c0021fe7:	89 04 24             	mov    DWORD PTR [esp],eax
c0021fea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fee:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021ff4:	0d 00 00 02 00       	or     eax,0x20000
c0021ff9:	89 c2                	mov    edx,eax
c0021ffb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021fff:	05 20 03 00 00       	add    eax,0x320
c0022004:	89 10                	mov    DWORD PTR [eax],edx
c0022006:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002200a:	05 e0 03 00 00       	add    eax,0x3e0
c002200f:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022015:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022019:	05 80 03 00 00       	add    eax,0x380
c002201e:	89 c2                	mov    edx,eax
c0022020:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022023:	89 02                	mov    DWORD PTR [edx],eax
c0022025:	90                   	nop
c0022026:	83 c4 1c             	add    esp,0x1c
c0022029:	c3                   	ret    
c002202a:	66 90                	xchg   ax,ax

c002202c <APICTimer::open(int, int, void*)>:
c002202c:	57                   	push   edi
c002202d:	56                   	push   esi
c002202e:	53                   	push   ebx
c002202f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022033:	8b 00                	mov    eax,DWORD PTR [eax]
c0022035:	83 c0 24             	add    eax,0x24
c0022038:	8b 00                	mov    eax,DWORD PTR [eax]
c002203a:	83 ec 08             	sub    esp,0x8
c002203d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022041:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022045:	ff d0                	call   eax
c0022047:	83 c4 10             	add    esp,0x10
c002204a:	a1 e8 7e 02 c0       	mov    eax,ds:0xc0027ee8
c002204f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022055:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002205b:	83 ec 0c             	sub    esp,0xc
c002205e:	50                   	push   eax
c002205f:	e8 ec f3 ff ff       	call   c0021450 <APIC::getBase()>
c0022064:	83 c4 10             	add    esp,0x10
c0022067:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002206d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022071:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022077:	0f b6 f8             	movzx  edi,al
c002207a:	89 d0                	mov    eax,edx
c002207c:	ba 00 00 00 00       	mov    edx,0x0
c0022081:	89 c1                	mov    ecx,eax
c0022083:	80 e5 ff             	and    ch,0xff
c0022086:	89 cb                	mov    ebx,ecx
c0022088:	0f b6 f2             	movzx  esi,dl
c002208b:	89 d8                	mov    eax,ebx
c002208d:	89 f2                	mov    edx,esi
c002208f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022093:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022096:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002209a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002209e:	83 e0 00             	and    eax,0x0
c00220a1:	09 d0                	or     eax,edx
c00220a3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00220a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220ab:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00220b1:	8d 50 01             	lea    edx,[eax+0x1]
c00220b4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00220b8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00220be:	0f b6 d0             	movzx  edx,al
c00220c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220c5:	83 c2 08             	add    edx,0x8
c00220c8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00220cc:	0f b6 c9             	movzx  ecx,cl
c00220cf:	81 c9 00 00 01 00    	or     ecx,0x10000
c00220d5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00220d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220dd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00220e1:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00220e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00220ef:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00220f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00220f9:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00220ff:	83 ec 0c             	sub    esp,0xc
c0022102:	51                   	push   ecx
c0022103:	6a 01                	push   0x1
c0022105:	68 1c 1f 02 c0       	push   0xc0021f1c
c002210a:	52                   	push   edx
c002210b:	50                   	push   eax
c002210c:	e8 0d c0 fe ff       	call   c000e11e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022111:	83 c4 20             	add    esp,0x20
c0022114:	89 c2                	mov    edx,eax
c0022116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002211a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022120:	b8 00 00 00 00       	mov    eax,0x0
c0022125:	5b                   	pop    ebx
c0022126:	5e                   	pop    esi
c0022127:	5f                   	pop    edi
c0022128:	c3                   	ret    
c0022129:	90                   	nop
c002212a:	66 90                	xchg   ax,ax

c002212c <APICTimer::APICTimer()>:
c002212c:	83 ec 0c             	sub    esp,0xc
c002212f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022133:	83 ec 08             	sub    esp,0x8
c0022136:	68 b8 70 02 c0       	push   0xc00270b8
c002213b:	50                   	push   eax
c002213c:	e8 5f e8 fe ff       	call   c00109a0 <Timer::Timer(char const*)>
c0022141:	83 c4 10             	add    esp,0x10
c0022144:	ba cc 70 02 c0       	mov    edx,0xc00270cc
c0022149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002214d:	89 10                	mov    DWORD PTR [eax],edx
c002214f:	90                   	nop
c0022150:	83 c4 0c             	add    esp,0xc
c0022153:	c3                   	ret    

c0022154 <PIT::write(int)>:
c0022154:	83 ec 10             	sub    esp,0x10
c0022157:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002215b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002215f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022165:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022169:	a3 84 9e 02 c0       	mov    ds:0xc0029e84,eax
c002216e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0022173:	99                   	cdq    
c0022174:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0022178:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002217c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0022183:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0022188:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002218c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0022191:	ee                   	out    dx,al
c0022192:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022196:	0f b6 c0             	movzx  eax,al
c0022199:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00221a0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00221a4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00221a8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00221ad:	ee                   	out    dx,al
c00221ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00221b2:	c1 f8 08             	sar    eax,0x8
c00221b5:	0f b6 c0             	movzx  eax,al
c00221b8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00221bf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00221c3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00221c7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00221cc:	ee                   	out    dx,al
c00221cd:	90                   	nop
c00221ce:	83 c4 10             	add    esp,0x10
c00221d1:	c3                   	ret    
c00221d2:	66 90                	xchg   ax,ax

c00221d4 <pitHandler(regs*, void*)>:
c00221d4:	83 ec 0c             	sub    esp,0xc
c00221d7:	8b 0d 84 9e 02 c0    	mov    ecx,DWORD PTR ds:0xc0029e84
c00221dd:	b8 10 27 00 00       	mov    eax,0x2710
c00221e2:	99                   	cdq    
c00221e3:	f7 f9                	idiv   ecx
c00221e5:	83 ec 0c             	sub    esp,0xc
c00221e8:	50                   	push   eax
c00221e9:	e8 43 e8 fe ff       	call   c0010a31 <timerHandler(unsigned int)>
c00221ee:	83 c4 10             	add    esp,0x10
c00221f1:	90                   	nop
c00221f2:	83 c4 0c             	add    esp,0xc
c00221f5:	c3                   	ret    
c00221f6:	66 90                	xchg   ax,ax

c00221f8 <PIT::open(int, int, void*)>:
c00221f8:	83 ec 0c             	sub    esp,0xc
c00221fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0022201:	83 c0 24             	add    eax,0x24
c0022204:	8b 00                	mov    eax,DWORD PTR [eax]
c0022206:	83 ec 08             	sub    esp,0x8
c0022209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002220d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022211:	ff d0                	call   eax
c0022213:	83 c4 10             	add    esp,0x10
c0022216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002221a:	83 ec 0c             	sub    esp,0xc
c002221d:	6a 00                	push   0x0
c002221f:	6a 01                	push   0x1
c0022221:	68 d4 21 02 c0       	push   0xc00221d4
c0022226:	6a 00                	push   0x0
c0022228:	50                   	push   eax
c0022229:	e8 f0 be fe ff       	call   c000e11e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002222e:	83 c4 20             	add    esp,0x20
c0022231:	89 c2                	mov    edx,eax
c0022233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022237:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002223d:	b8 00 00 00 00       	mov    eax,0x0
c0022242:	83 c4 0c             	add    esp,0xc
c0022245:	c3                   	ret    
c0022246:	66 90                	xchg   ax,ax

c0022248 <PIT::close(int, int, void*)>:
c0022248:	83 ec 0c             	sub    esp,0xc
c002224b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002224f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0022259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002225d:	6a 01                	push   0x1
c002225f:	68 d4 21 02 c0       	push   0xc00221d4
c0022264:	6a 00                	push   0x0
c0022266:	50                   	push   eax
c0022267:	e8 fc be fe ff       	call   c000e168 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002226c:	83 c4 10             	add    esp,0x10
c002226f:	b8 00 00 00 00       	mov    eax,0x0
c0022274:	83 c4 0c             	add    esp,0xc
c0022277:	c3                   	ret    

c0022278 <PIT::PIT()>:
c0022278:	83 ec 0c             	sub    esp,0xc
c002227b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002227f:	83 ec 08             	sub    esp,0x8
c0022282:	68 f4 70 02 c0       	push   0xc00270f4
c0022287:	50                   	push   eax
c0022288:	e8 13 e7 fe ff       	call   c00109a0 <Timer::Timer(char const*)>
c002228d:	83 c4 10             	add    esp,0x10
c0022290:	ba 1c 71 02 c0       	mov    edx,0xc002711c
c0022295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022299:	89 10                	mov    DWORD PTR [eax],edx
c002229b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002229f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00222a5:	0f b6 d0             	movzx  edx,al
c00222a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222ac:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00222b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222b7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00222bd:	0f b6 d0             	movzx  edx,al
c00222c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222c4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00222c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222cd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00222d3:	8d 50 01             	lea    edx,[eax+0x1]
c00222d6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00222da:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00222e0:	0f b6 d0             	movzx  edx,al
c00222e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222e7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00222eb:	83 e1 3f             	and    ecx,0x3f
c00222ee:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00222f2:	90                   	nop
c00222f3:	83 c4 0c             	add    esp,0xc
c00222f6:	c3                   	ret    
c00222f7:	66 90                	xchg   ax,ax
c00222f9:	66 90                	xchg   ax,ax
c00222fb:	66 90                	xchg   ax,ax
c00222fd:	66 90                	xchg   ax,ax
c00222ff:	90                   	nop

c0022300 <avxDetect>:
c0022300:	b8 00 00 00 00       	mov    eax,0x0
c0022305:	c3                   	ret    

c0022306 <avxSave>:
c0022306:	c3                   	ret    

c0022307 <avxLoad>:
c0022307:	c3                   	ret    

c0022308 <avxInit>:
c0022308:	c3                   	ret    

c0022309 <avxClose>:
c0022309:	c3                   	ret    

c002230a <wouldSheSayYes>:
c002230a:	c3                   	ret    
c002230b:	49                   	dec    ecx
c002230c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0022310:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0022314:	75 20                	jne    c0022336 <sseDetect.noSSE+0x1>
c0022316:	4e                   	dec    esi
c0022317:	79 61                	jns    c002237a <x87Detect+0x14>
c0022319:	68 2e 2e 2e 00       	push   0x2e2e2e
c002231e:	66 90                	xchg   ax,ax

c0022320 <absolutelyNoChanceInHell>:
c0022320:	b8 01 00 00 00       	mov    eax,0x1
c0022325:	0f a2                	cpuid  
c0022327:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002232d:	74 06                	je     c0022335 <sseDetect.noSSE>
c002232f:	b8 01 00 00 00       	mov    eax,0x1
c0022334:	c3                   	ret    

c0022335 <sseDetect.noSSE>:
c0022335:	31 c0                	xor    eax,eax
c0022337:	c3                   	ret    

c0022338 <sseSave>:
c0022338:	0f ae 44 24 04       	fxsave [esp+0x4]
c002233d:	c3                   	ret    

c002233e <sseLoad>:
c002233e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0022343:	c3                   	ret    

c0022344 <sseInit>:
c0022344:	e8 49 00 00 00       	call   c0022392 <x87Init>
c0022349:	0f 20 e0             	mov    eax,cr4
c002234c:	66 0d 00 06          	or     ax,0x600
c0022350:	0f 22 e0             	mov    cr4,eax
c0022353:	c3                   	ret    

c0022354 <sseClose>:
c0022354:	c3                   	ret    
c0022355:	66 90                	xchg   ax,ax
c0022357:	66 90                	xchg   ax,ax
c0022359:	66 90                	xchg   ax,ax
c002235b:	66 90                	xchg   ax,ax
c002235d:	66 90                	xchg   ax,ax
c002235f:	90                   	nop

c0022360 <value_37F>:
c0022360:	7f 03                	jg     c0022365 <value_37A+0x1>

c0022362 <value_37E>:
c0022362:	7e 03                	jle    c0022367 <x87Detect+0x1>

c0022364 <value_37A>:
c0022364:	7a 03                	jp     c0022369 <x87Detect+0x3>

c0022366 <x87Detect>:
c0022366:	b8 01 00 00 00       	mov    eax,0x1
c002236b:	0f a2                	cpuid  
c002236d:	f7 c2 01 00 00 00    	test   edx,0x1
c0022373:	74 06                	je     c002237b <x87Detect.nox87>
c0022375:	b8 01 00 00 00       	mov    eax,0x1
c002237a:	c3                   	ret    

c002237b <x87Detect.nox87>:
c002237b:	b8 00 00 00 00       	mov    eax,0x0
c0022380:	c3                   	ret    

c0022381 <x87Save>:
c0022381:	55                   	push   ebp
c0022382:	89 e5                	mov    ebp,esp
c0022384:	9b dd 75 08          	fsave  [ebp+0x8]
c0022388:	c9                   	leave  
c0022389:	c3                   	ret    

c002238a <x87Load>:
c002238a:	55                   	push   ebp
c002238b:	89 e5                	mov    ebp,esp
c002238d:	dd 65 08             	frstor [ebp+0x8]
c0022390:	c9                   	leave  
c0022391:	c3                   	ret    

c0022392 <x87Init>:
c0022392:	9b db e3             	finit  
c0022395:	0f 20 c0             	mov    eax,cr0
c0022398:	66 25 fb ff          	and    ax,0xfffb
c002239c:	66 0d 22 00          	or     ax,0x22
c00223a0:	0f 22 c0             	mov    cr0,eax
c00223a3:	0f 06                	clts   
c00223a5:	d9 2d 64 23 02 c0    	fldcw  WORD PTR ds:0xc0022364
c00223ab:	c3                   	ret    

c00223ac <x87Close>:
c00223ac:	c3                   	ret    
c00223ad:	66 90                	xchg   ax,ax
c00223af:	90                   	nop

c00223b0 <__do_global_ctors_aux>:
c00223b0:	a1 4c 35 02 c0       	mov    eax,ds:0xc002354c
c00223b5:	83 f8 ff             	cmp    eax,0xffffffff
c00223b8:	74 1a                	je     c00223d4 <__do_global_ctors_aux+0x24>
c00223ba:	55                   	push   ebp
c00223bb:	89 e5                	mov    ebp,esp
c00223bd:	53                   	push   ebx
c00223be:	52                   	push   edx
c00223bf:	bb 4c 35 02 c0       	mov    ebx,0xc002354c
c00223c4:	ff d0                	call   eax
c00223c6:	83 eb 04             	sub    ebx,0x4
c00223c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00223cb:	83 f8 ff             	cmp    eax,0xffffffff
c00223ce:	75 f4                	jne    c00223c4 <__do_global_ctors_aux+0x14>
c00223d0:	58                   	pop    eax
c00223d1:	5b                   	pop    ebx
c00223d2:	5d                   	pop    ebp
c00223d3:	c3                   	ret    
c00223d4:	c3                   	ret    
c00223d5:	66 90                	xchg   ax,ax
c00223d7:	90                   	nop

c00223d8 <__divdi3>:
c00223d8:	55                   	push   ebp
c00223d9:	57                   	push   edi
c00223da:	56                   	push   esi
c00223db:	53                   	push   ebx
c00223dc:	83 ec 1c             	sub    esp,0x1c
c00223df:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00223e3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00223e7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00223ea:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00223ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00223f2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00223f6:	85 db                	test   ebx,ebx
c00223f8:	0f 88 8e 00 00 00    	js     c002248c <__divdi3+0xb4>
c00223fe:	89 dd                	mov    ebp,ebx
c0022400:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022408:	89 d3                	mov    ebx,edx
c002240a:	85 d2                	test   edx,edx
c002240c:	79 0d                	jns    c002241b <__divdi3+0x43>
c002240e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0022412:	f7 d8                	neg    eax
c0022414:	83 d2 00             	adc    edx,0x0
c0022417:	f7 da                	neg    edx
c0022419:	89 d3                	mov    ebx,edx
c002241b:	89 c7                	mov    edi,eax
c002241d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022420:	85 db                	test   ebx,ebx
c0022422:	75 48                	jne    c002246c <__divdi3+0x94>
c0022424:	39 ef                	cmp    edi,ebp
c0022426:	76 24                	jbe    c002244c <__divdi3+0x74>
c0022428:	89 ea                	mov    edx,ebp
c002242a:	f7 f7                	div    edi
c002242c:	89 c1                	mov    ecx,eax
c002242e:	31 f6                	xor    esi,esi
c0022430:	89 c8                	mov    eax,ecx
c0022432:	89 f2                	mov    edx,esi
c0022434:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022438:	85 c9                	test   ecx,ecx
c002243a:	74 07                	je     c0022443 <__divdi3+0x6b>
c002243c:	f7 d8                	neg    eax
c002243e:	83 d2 00             	adc    edx,0x0
c0022441:	f7 da                	neg    edx
c0022443:	83 c4 1c             	add    esp,0x1c
c0022446:	5b                   	pop    ebx
c0022447:	5e                   	pop    esi
c0022448:	5f                   	pop    edi
c0022449:	5d                   	pop    ebp
c002244a:	c3                   	ret    
c002244b:	90                   	nop
c002244c:	85 ff                	test   edi,edi
c002244e:	75 0b                	jne    c002245b <__divdi3+0x83>
c0022450:	b8 01 00 00 00       	mov    eax,0x1
c0022455:	31 d2                	xor    edx,edx
c0022457:	f7 f3                	div    ebx
c0022459:	89 c7                	mov    edi,eax
c002245b:	31 d2                	xor    edx,edx
c002245d:	89 e8                	mov    eax,ebp
c002245f:	f7 f7                	div    edi
c0022461:	89 c6                	mov    esi,eax
c0022463:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022466:	f7 f7                	div    edi
c0022468:	89 c1                	mov    ecx,eax
c002246a:	eb c4                	jmp    c0022430 <__divdi3+0x58>
c002246c:	39 eb                	cmp    ebx,ebp
c002246e:	77 3c                	ja     c00224ac <__divdi3+0xd4>
c0022470:	0f bd f3             	bsr    esi,ebx
c0022473:	83 f6 1f             	xor    esi,0x1f
c0022476:	75 40                	jne    c00224b8 <__divdi3+0xe0>
c0022478:	39 eb                	cmp    ebx,ebp
c002247a:	72 09                	jb     c0022485 <__divdi3+0xad>
c002247c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002247f:	0f 87 97 00 00 00    	ja     c002251c <__divdi3+0x144>
c0022485:	b9 01 00 00 00       	mov    ecx,0x1
c002248a:	eb a4                	jmp    c0022430 <__divdi3+0x58>
c002248c:	f7 d9                	neg    ecx
c002248e:	83 d3 00             	adc    ebx,0x0
c0022491:	f7 db                	neg    ebx
c0022493:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022496:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002249a:	89 dd                	mov    ebp,ebx
c002249c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00224a4:	e9 5f ff ff ff       	jmp    c0022408 <__divdi3+0x30>
c00224a9:	8d 76 00             	lea    esi,[esi+0x0]
c00224ac:	31 f6                	xor    esi,esi
c00224ae:	31 c9                	xor    ecx,ecx
c00224b0:	e9 7b ff ff ff       	jmp    c0022430 <__divdi3+0x58>
c00224b5:	8d 76 00             	lea    esi,[esi+0x0]
c00224b8:	b8 20 00 00 00       	mov    eax,0x20
c00224bd:	29 f0                	sub    eax,esi
c00224bf:	89 f1                	mov    ecx,esi
c00224c1:	d3 e3                	shl    ebx,cl
c00224c3:	89 fa                	mov    edx,edi
c00224c5:	88 c1                	mov    cl,al
c00224c7:	d3 ea                	shr    edx,cl
c00224c9:	09 da                	or     edx,ebx
c00224cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00224cf:	89 f1                	mov    ecx,esi
c00224d1:	d3 e7                	shl    edi,cl
c00224d3:	89 eb                	mov    ebx,ebp
c00224d5:	88 c1                	mov    cl,al
c00224d7:	d3 eb                	shr    ebx,cl
c00224d9:	89 f1                	mov    ecx,esi
c00224db:	d3 e5                	shl    ebp,cl
c00224dd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00224e0:	88 c1                	mov    cl,al
c00224e2:	d3 ea                	shr    edx,cl
c00224e4:	09 d5                	or     ebp,edx
c00224e6:	89 e8                	mov    eax,ebp
c00224e8:	89 da                	mov    edx,ebx
c00224ea:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00224ee:	89 d3                	mov    ebx,edx
c00224f0:	89 c5                	mov    ebp,eax
c00224f2:	f7 e7                	mul    edi
c00224f4:	39 d3                	cmp    ebx,edx
c00224f6:	72 18                	jb     c0022510 <__divdi3+0x138>
c00224f8:	74 0a                	je     c0022504 <__divdi3+0x12c>
c00224fa:	89 e9                	mov    ecx,ebp
c00224fc:	31 f6                	xor    esi,esi
c00224fe:	e9 2d ff ff ff       	jmp    c0022430 <__divdi3+0x58>
c0022503:	90                   	nop
c0022504:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022507:	89 f1                	mov    ecx,esi
c0022509:	d3 e7                	shl    edi,cl
c002250b:	39 c7                	cmp    edi,eax
c002250d:	73 eb                	jae    c00224fa <__divdi3+0x122>
c002250f:	90                   	nop
c0022510:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0022513:	31 f6                	xor    esi,esi
c0022515:	e9 16 ff ff ff       	jmp    c0022430 <__divdi3+0x58>
c002251a:	66 90                	xchg   ax,ax
c002251c:	31 c9                	xor    ecx,ecx
c002251e:	e9 0d ff ff ff       	jmp    c0022430 <__divdi3+0x58>
c0022523:	90                   	nop

c0022524 <__moddi3>:
c0022524:	55                   	push   ebp
c0022525:	57                   	push   edi
c0022526:	56                   	push   esi
c0022527:	53                   	push   ebx
c0022528:	83 ec 2c             	sub    esp,0x2c
c002252b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002252f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0022533:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022537:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002253b:	85 db                	test   ebx,ebx
c002253d:	0f 88 85 00 00 00    	js     c00225c8 <__moddi3+0xa4>
c0022543:	89 de                	mov    esi,ebx
c0022545:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002254d:	89 d7                	mov    edi,edx
c002254f:	85 d2                	test   edx,edx
c0022551:	79 09                	jns    c002255c <__moddi3+0x38>
c0022553:	f7 d8                	neg    eax
c0022555:	83 d2 00             	adc    edx,0x0
c0022558:	f7 da                	neg    edx
c002255a:	89 d7                	mov    edi,edx
c002255c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022560:	89 cd                	mov    ebp,ecx
c0022562:	85 ff                	test   edi,edi
c0022564:	75 52                	jne    c00225b8 <__moddi3+0x94>
c0022566:	89 c3                	mov    ebx,eax
c0022568:	39 f0                	cmp    eax,esi
c002256a:	76 24                	jbe    c0022590 <__moddi3+0x6c>
c002256c:	89 c8                	mov    eax,ecx
c002256e:	89 f2                	mov    edx,esi
c0022570:	f7 f3                	div    ebx
c0022572:	89 d6                	mov    esi,edx
c0022574:	89 f0                	mov    eax,esi
c0022576:	31 d2                	xor    edx,edx
c0022578:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002257c:	85 c9                	test   ecx,ecx
c002257e:	74 07                	je     c0022587 <__moddi3+0x63>
c0022580:	f7 d8                	neg    eax
c0022582:	83 d2 00             	adc    edx,0x0
c0022585:	f7 da                	neg    edx
c0022587:	83 c4 2c             	add    esp,0x2c
c002258a:	5b                   	pop    ebx
c002258b:	5e                   	pop    esi
c002258c:	5f                   	pop    edi
c002258d:	5d                   	pop    ebp
c002258e:	c3                   	ret    
c002258f:	90                   	nop
c0022590:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022594:	85 db                	test   ebx,ebx
c0022596:	75 0d                	jne    c00225a5 <__moddi3+0x81>
c0022598:	b8 01 00 00 00       	mov    eax,0x1
c002259d:	31 d2                	xor    edx,edx
c002259f:	f7 f7                	div    edi
c00225a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00225a5:	89 f0                	mov    eax,esi
c00225a7:	31 d2                	xor    edx,edx
c00225a9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00225ad:	f7 f7                	div    edi
c00225af:	89 e8                	mov    eax,ebp
c00225b1:	f7 f7                	div    edi
c00225b3:	89 d6                	mov    esi,edx
c00225b5:	eb bd                	jmp    c0022574 <__moddi3+0x50>
c00225b7:	90                   	nop
c00225b8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00225bc:	39 f7                	cmp    edi,esi
c00225be:	76 20                	jbe    c00225e0 <__moddi3+0xbc>
c00225c0:	89 c8                	mov    eax,ecx
c00225c2:	89 f2                	mov    edx,esi
c00225c4:	eb b2                	jmp    c0022578 <__moddi3+0x54>
c00225c6:	66 90                	xchg   ax,ax
c00225c8:	f7 d9                	neg    ecx
c00225ca:	83 d3 00             	adc    ebx,0x0
c00225cd:	f7 db                	neg    ebx
c00225cf:	89 de                	mov    esi,ebx
c00225d1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00225d9:	e9 6f ff ff ff       	jmp    c002254d <__moddi3+0x29>
c00225de:	66 90                	xchg   ax,ax
c00225e0:	0f bd c7             	bsr    eax,edi
c00225e3:	83 f0 1f             	xor    eax,0x1f
c00225e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00225ea:	75 24                	jne    c0022610 <__moddi3+0xec>
c00225ec:	39 f7                	cmp    edi,esi
c00225ee:	72 06                	jb     c00225f6 <__moddi3+0xd2>
c00225f0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00225f4:	77 0c                	ja     c0022602 <__moddi3+0xde>
c00225f6:	89 e9                	mov    ecx,ebp
c00225f8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00225fc:	19 fe                	sbb    esi,edi
c00225fe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022602:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022606:	89 f2                	mov    edx,esi
c0022608:	e9 6b ff ff ff       	jmp    c0022578 <__moddi3+0x54>
c002260d:	8d 76 00             	lea    esi,[esi+0x0]
c0022610:	b8 20 00 00 00       	mov    eax,0x20
c0022615:	89 c2                	mov    edx,eax
c0022617:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002261b:	29 da                	sub    edx,ebx
c002261d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022621:	88 d9                	mov    cl,bl
c0022623:	d3 e7                	shl    edi,cl
c0022625:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022629:	88 d1                	mov    cl,dl
c002262b:	d3 e8                	shr    eax,cl
c002262d:	09 c7                	or     edi,eax
c002262f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022633:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022637:	89 d8                	mov    eax,ebx
c0022639:	88 d9                	mov    cl,bl
c002263b:	d3 e7                	shl    edi,cl
c002263d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022641:	89 f3                	mov    ebx,esi
c0022643:	88 d1                	mov    cl,dl
c0022645:	d3 eb                	shr    ebx,cl
c0022647:	89 c7                	mov    edi,eax
c0022649:	88 c1                	mov    cl,al
c002264b:	d3 e6                	shl    esi,cl
c002264d:	89 e8                	mov    eax,ebp
c002264f:	88 d1                	mov    cl,dl
c0022651:	d3 e8                	shr    eax,cl
c0022653:	09 f0                	or     eax,esi
c0022655:	89 f9                	mov    ecx,edi
c0022657:	d3 e5                	shl    ebp,cl
c0022659:	89 da                	mov    edx,ebx
c002265b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002265f:	89 d3                	mov    ebx,edx
c0022661:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022665:	89 c6                	mov    esi,eax
c0022667:	89 d1                	mov    ecx,edx
c0022669:	39 d3                	cmp    ebx,edx
c002266b:	72 27                	jb     c0022694 <__moddi3+0x170>
c002266d:	74 21                	je     c0022690 <__moddi3+0x16c>
c002266f:	29 f5                	sub    ebp,esi
c0022671:	19 cb                	sbb    ebx,ecx
c0022673:	89 de                	mov    esi,ebx
c0022675:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0022679:	d3 e6                	shl    esi,cl
c002267b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002267f:	89 f9                	mov    ecx,edi
c0022681:	d3 ed                	shr    ebp,cl
c0022683:	09 ee                	or     esi,ebp
c0022685:	89 f0                	mov    eax,esi
c0022687:	d3 eb                	shr    ebx,cl
c0022689:	89 da                	mov    edx,ebx
c002268b:	e9 e8 fe ff ff       	jmp    c0022578 <__moddi3+0x54>
c0022690:	39 c5                	cmp    ebp,eax
c0022692:	73 db                	jae    c002266f <__moddi3+0x14b>
c0022694:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022698:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002269c:	89 d1                	mov    ecx,edx
c002269e:	89 c6                	mov    esi,eax
c00226a0:	eb cd                	jmp    c002266f <__moddi3+0x14b>
c00226a2:	66 90                	xchg   ax,ax

c00226a4 <__udivdi3>:
c00226a4:	55                   	push   ebp
c00226a5:	57                   	push   edi
c00226a6:	56                   	push   esi
c00226a7:	53                   	push   ebx
c00226a8:	83 ec 1c             	sub    esp,0x1c
c00226ab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00226af:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00226b3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00226b7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00226bb:	85 d2                	test   edx,edx
c00226bd:	75 41                	jne    c0022700 <__udivdi3+0x5c>
c00226bf:	39 f7                	cmp    edi,esi
c00226c1:	76 15                	jbe    c00226d8 <__udivdi3+0x34>
c00226c3:	89 e8                	mov    eax,ebp
c00226c5:	89 f2                	mov    edx,esi
c00226c7:	f7 f7                	div    edi
c00226c9:	31 db                	xor    ebx,ebx
c00226cb:	89 da                	mov    edx,ebx
c00226cd:	83 c4 1c             	add    esp,0x1c
c00226d0:	5b                   	pop    ebx
c00226d1:	5e                   	pop    esi
c00226d2:	5f                   	pop    edi
c00226d3:	5d                   	pop    ebp
c00226d4:	c3                   	ret    
c00226d5:	8d 76 00             	lea    esi,[esi+0x0]
c00226d8:	89 f9                	mov    ecx,edi
c00226da:	85 ff                	test   edi,edi
c00226dc:	75 0b                	jne    c00226e9 <__udivdi3+0x45>
c00226de:	b8 01 00 00 00       	mov    eax,0x1
c00226e3:	31 d2                	xor    edx,edx
c00226e5:	f7 f7                	div    edi
c00226e7:	89 c1                	mov    ecx,eax
c00226e9:	31 d2                	xor    edx,edx
c00226eb:	89 f0                	mov    eax,esi
c00226ed:	f7 f1                	div    ecx
c00226ef:	89 c3                	mov    ebx,eax
c00226f1:	89 e8                	mov    eax,ebp
c00226f3:	f7 f1                	div    ecx
c00226f5:	89 da                	mov    edx,ebx
c00226f7:	83 c4 1c             	add    esp,0x1c
c00226fa:	5b                   	pop    ebx
c00226fb:	5e                   	pop    esi
c00226fc:	5f                   	pop    edi
c00226fd:	5d                   	pop    ebp
c00226fe:	c3                   	ret    
c00226ff:	90                   	nop
c0022700:	39 f2                	cmp    edx,esi
c0022702:	77 1c                	ja     c0022720 <__udivdi3+0x7c>
c0022704:	0f bd da             	bsr    ebx,edx
c0022707:	83 f3 1f             	xor    ebx,0x1f
c002270a:	75 24                	jne    c0022730 <__udivdi3+0x8c>
c002270c:	39 f2                	cmp    edx,esi
c002270e:	72 08                	jb     c0022718 <__udivdi3+0x74>
c0022710:	39 ef                	cmp    edi,ebp
c0022712:	0f 87 84 00 00 00    	ja     c002279c <__udivdi3+0xf8>
c0022718:	b8 01 00 00 00       	mov    eax,0x1
c002271d:	eb ac                	jmp    c00226cb <__udivdi3+0x27>
c002271f:	90                   	nop
c0022720:	31 db                	xor    ebx,ebx
c0022722:	31 c0                	xor    eax,eax
c0022724:	89 da                	mov    edx,ebx
c0022726:	83 c4 1c             	add    esp,0x1c
c0022729:	5b                   	pop    ebx
c002272a:	5e                   	pop    esi
c002272b:	5f                   	pop    edi
c002272c:	5d                   	pop    ebp
c002272d:	c3                   	ret    
c002272e:	66 90                	xchg   ax,ax
c0022730:	b8 20 00 00 00       	mov    eax,0x20
c0022735:	29 d8                	sub    eax,ebx
c0022737:	88 d9                	mov    cl,bl
c0022739:	d3 e2                	shl    edx,cl
c002273b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002273f:	89 fa                	mov    edx,edi
c0022741:	88 c1                	mov    cl,al
c0022743:	d3 ea                	shr    edx,cl
c0022745:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022749:	09 d1                	or     ecx,edx
c002274b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002274f:	88 d9                	mov    cl,bl
c0022751:	d3 e7                	shl    edi,cl
c0022753:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022757:	89 f7                	mov    edi,esi
c0022759:	88 c1                	mov    cl,al
c002275b:	d3 ef                	shr    edi,cl
c002275d:	88 d9                	mov    cl,bl
c002275f:	d3 e6                	shl    esi,cl
c0022761:	89 ea                	mov    edx,ebp
c0022763:	88 c1                	mov    cl,al
c0022765:	d3 ea                	shr    edx,cl
c0022767:	09 d6                	or     esi,edx
c0022769:	89 f0                	mov    eax,esi
c002276b:	89 fa                	mov    edx,edi
c002276d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022771:	89 d7                	mov    edi,edx
c0022773:	89 c6                	mov    esi,eax
c0022775:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022779:	39 d7                	cmp    edi,edx
c002277b:	72 13                	jb     c0022790 <__udivdi3+0xec>
c002277d:	74 09                	je     c0022788 <__udivdi3+0xe4>
c002277f:	89 f0                	mov    eax,esi
c0022781:	31 db                	xor    ebx,ebx
c0022783:	e9 43 ff ff ff       	jmp    c00226cb <__udivdi3+0x27>
c0022788:	88 d9                	mov    cl,bl
c002278a:	d3 e5                	shl    ebp,cl
c002278c:	39 c5                	cmp    ebp,eax
c002278e:	73 ef                	jae    c002277f <__udivdi3+0xdb>
c0022790:	8d 46 ff             	lea    eax,[esi-0x1]
c0022793:	31 db                	xor    ebx,ebx
c0022795:	e9 31 ff ff ff       	jmp    c00226cb <__udivdi3+0x27>
c002279a:	66 90                	xchg   ax,ax
c002279c:	31 c0                	xor    eax,eax
c002279e:	e9 28 ff ff ff       	jmp    c00226cb <__udivdi3+0x27>
c00227a3:	90                   	nop

c00227a4 <__umoddi3>:
c00227a4:	55                   	push   ebp
c00227a5:	57                   	push   edi
c00227a6:	56                   	push   esi
c00227a7:	53                   	push   ebx
c00227a8:	83 ec 1c             	sub    esp,0x1c
c00227ab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00227af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00227b3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00227b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00227bb:	89 da                	mov    edx,ebx
c00227bd:	85 c0                	test   eax,eax
c00227bf:	75 37                	jne    c00227f8 <__umoddi3+0x54>
c00227c1:	39 df                	cmp    edi,ebx
c00227c3:	76 13                	jbe    c00227d8 <__umoddi3+0x34>
c00227c5:	89 f0                	mov    eax,esi
c00227c7:	f7 f7                	div    edi
c00227c9:	89 d0                	mov    eax,edx
c00227cb:	31 d2                	xor    edx,edx
c00227cd:	83 c4 1c             	add    esp,0x1c
c00227d0:	5b                   	pop    ebx
c00227d1:	5e                   	pop    esi
c00227d2:	5f                   	pop    edi
c00227d3:	5d                   	pop    ebp
c00227d4:	c3                   	ret    
c00227d5:	8d 76 00             	lea    esi,[esi+0x0]
c00227d8:	89 fd                	mov    ebp,edi
c00227da:	85 ff                	test   edi,edi
c00227dc:	75 0b                	jne    c00227e9 <__umoddi3+0x45>
c00227de:	b8 01 00 00 00       	mov    eax,0x1
c00227e3:	31 d2                	xor    edx,edx
c00227e5:	f7 f7                	div    edi
c00227e7:	89 c5                	mov    ebp,eax
c00227e9:	89 d8                	mov    eax,ebx
c00227eb:	31 d2                	xor    edx,edx
c00227ed:	f7 f5                	div    ebp
c00227ef:	89 f0                	mov    eax,esi
c00227f1:	f7 f5                	div    ebp
c00227f3:	89 d0                	mov    eax,edx
c00227f5:	eb d4                	jmp    c00227cb <__umoddi3+0x27>
c00227f7:	90                   	nop
c00227f8:	89 f1                	mov    ecx,esi
c00227fa:	39 d8                	cmp    eax,ebx
c00227fc:	76 0a                	jbe    c0022808 <__umoddi3+0x64>
c00227fe:	89 f0                	mov    eax,esi
c0022800:	83 c4 1c             	add    esp,0x1c
c0022803:	5b                   	pop    ebx
c0022804:	5e                   	pop    esi
c0022805:	5f                   	pop    edi
c0022806:	5d                   	pop    ebp
c0022807:	c3                   	ret    
c0022808:	0f bd e8             	bsr    ebp,eax
c002280b:	83 f5 1f             	xor    ebp,0x1f
c002280e:	75 1c                	jne    c002282c <__umoddi3+0x88>
c0022810:	39 d8                	cmp    eax,ebx
c0022812:	72 04                	jb     c0022818 <__umoddi3+0x74>
c0022814:	39 f7                	cmp    edi,esi
c0022816:	77 08                	ja     c0022820 <__umoddi3+0x7c>
c0022818:	89 da                	mov    edx,ebx
c002281a:	29 fe                	sub    esi,edi
c002281c:	19 c2                	sbb    edx,eax
c002281e:	89 f1                	mov    ecx,esi
c0022820:	89 c8                	mov    eax,ecx
c0022822:	83 c4 1c             	add    esp,0x1c
c0022825:	5b                   	pop    ebx
c0022826:	5e                   	pop    esi
c0022827:	5f                   	pop    edi
c0022828:	5d                   	pop    ebp
c0022829:	c3                   	ret    
c002282a:	66 90                	xchg   ax,ax
c002282c:	ba 20 00 00 00       	mov    edx,0x20
c0022831:	29 ea                	sub    edx,ebp
c0022833:	89 e9                	mov    ecx,ebp
c0022835:	d3 e0                	shl    eax,cl
c0022837:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002283b:	89 f8                	mov    eax,edi
c002283d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022841:	88 d1                	mov    cl,dl
c0022843:	d3 e8                	shr    eax,cl
c0022845:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022849:	09 c1                	or     ecx,eax
c002284b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002284f:	89 e9                	mov    ecx,ebp
c0022851:	d3 e7                	shl    edi,cl
c0022853:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022857:	89 d8                	mov    eax,ebx
c0022859:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002285d:	88 d1                	mov    cl,dl
c002285f:	d3 e8                	shr    eax,cl
c0022861:	89 c7                	mov    edi,eax
c0022863:	89 e9                	mov    ecx,ebp
c0022865:	d3 e3                	shl    ebx,cl
c0022867:	89 f0                	mov    eax,esi
c0022869:	88 d1                	mov    cl,dl
c002286b:	d3 e8                	shr    eax,cl
c002286d:	09 d8                	or     eax,ebx
c002286f:	89 e9                	mov    ecx,ebp
c0022871:	d3 e6                	shl    esi,cl
c0022873:	89 f3                	mov    ebx,esi
c0022875:	89 fa                	mov    edx,edi
c0022877:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002287b:	89 d1                	mov    ecx,edx
c002287d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022881:	89 c6                	mov    esi,eax
c0022883:	89 d7                	mov    edi,edx
c0022885:	39 d1                	cmp    ecx,edx
c0022887:	72 27                	jb     c00228b0 <__umoddi3+0x10c>
c0022889:	74 21                	je     c00228ac <__umoddi3+0x108>
c002288b:	89 ca                	mov    edx,ecx
c002288d:	29 f3                	sub    ebx,esi
c002288f:	19 fa                	sbb    edx,edi
c0022891:	89 d0                	mov    eax,edx
c0022893:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0022897:	d3 e0                	shl    eax,cl
c0022899:	89 e9                	mov    ecx,ebp
c002289b:	d3 eb                	shr    ebx,cl
c002289d:	09 d8                	or     eax,ebx
c002289f:	d3 ea                	shr    edx,cl
c00228a1:	83 c4 1c             	add    esp,0x1c
c00228a4:	5b                   	pop    ebx
c00228a5:	5e                   	pop    esi
c00228a6:	5f                   	pop    edi
c00228a7:	5d                   	pop    ebp
c00228a8:	c3                   	ret    
c00228a9:	8d 76 00             	lea    esi,[esi+0x0]
c00228ac:	39 c3                	cmp    ebx,eax
c00228ae:	73 db                	jae    c002288b <__umoddi3+0xe7>
c00228b0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00228b4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00228b8:	89 d7                	mov    edi,edx
c00228ba:	89 c6                	mov    esi,eax
c00228bc:	eb cd                	jmp    c002288b <__umoddi3+0xe7>

Disassembly of section .init:

c00228be <_init>:
c00228be:	55                   	push   ebp
c00228bf:	89 e5                	mov    ebp,esp
c00228c1:	e8 52 d8 fd ff       	call   c0000118 <frame_dummy>
c00228c6:	e8 e5 fa ff ff       	call   c00223b0 <__do_global_ctors_aux>
c00228cb:	5d                   	pop    ebp
c00228cc:	c3                   	ret    

Disassembly of section .fini:

c00228cd <_fini>:
c00228cd:	55                   	push   ebp
c00228ce:	89 e5                	mov    ebp,esp
c00228d0:	e8 d3 d7 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00228d5:	5d                   	pop    ebp
c00228d6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00228d8 <Computer::~Computer()>:
c00228d8:	83 ec 0c             	sub    esp,0xc
c00228db:	ba f4 3e 02 c0       	mov    edx,0xc0023ef4
c00228e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e4:	89 10                	mov    DWORD PTR [eax],edx
c00228e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228ea:	83 ec 0c             	sub    esp,0xc
c00228ed:	50                   	push   eax
c00228ee:	e8 81 b7 fe ff       	call   c000e074 <Device::~Device()>
c00228f3:	83 c4 10             	add    esp,0x10
c00228f6:	90                   	nop
c00228f7:	83 c4 0c             	add    esp,0xc
c00228fa:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00228fc <Computer::~Computer()>:
c00228fc:	83 ec 0c             	sub    esp,0xc
c00228ff:	83 ec 0c             	sub    esp,0xc
c0022902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022906:	e8 cd ff ff ff       	call   c00228d8 <Computer::~Computer()>
c002290b:	83 c4 10             	add    esp,0x10
c002290e:	83 ec 08             	sub    esp,0x8
c0022911:	68 ec 01 00 00       	push   0x1ec
c0022916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002291a:	e8 ff a2 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c002291f:	83 c4 10             	add    esp,0x10
c0022922:	83 c4 0c             	add    esp,0xc
c0022925:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0022926 <idleCommon()>:
c0022926:	83 ec 0c             	sub    esp,0xc
c0022929:	fa                   	cli    
c002292a:	ff 05 08 94 02 c0    	inc    DWORD PTR ds:0xc0029408
c0022930:	e8 1f 5d ff ff       	call   c0018654 <schedule()>
c0022935:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c002293a:	48                   	dec    eax
c002293b:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0022940:	75 01                	jne    c0022943 <idleCommon()+0x1d>
c0022942:	fb                   	sti    
c0022943:	83 c4 0c             	add    esp,0xc
c0022946:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0022948 <LinkedList<UnixFile>::~LinkedList()>:
c0022948:	90                   	nop
c0022949:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002294a <LinkedList<UnixFile>::LinkedList()>:
c002294a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002294e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022954:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022958:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002295f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022963:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002296a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002296e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022974:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022978:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002297f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022983:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002298a:	90                   	nop
c002298b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002298c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002298c:	83 ec 0c             	sub    esp,0xc
c002298f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022994:	75 10                	jne    c00229a6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022996:	83 ec 0c             	sub    esp,0xc
c0022999:	68 c0 42 02 c0       	push   0xc00242c0
c002299e:	e8 4c 1f ff ff       	call   c00148ef <Krnl::panic(char const*)>
c00229a3:	83 c4 10             	add    esp,0x10
c00229a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00229ac:	85 c0                	test   eax,eax
c00229ae:	74 34                	je     c00229e4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00229b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00229b7:	85 c0                	test   eax,eax
c00229b9:	74 29                	je     c00229e4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00229bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00229c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00229c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00229c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00229d1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00229d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00229db:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00229e2:	eb 65                	jmp    c0022a49 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00229e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00229ea:	85 c0                	test   eax,eax
c00229ec:	75 4b                	jne    c0022a39 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00229ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00229f5:	85 c0                	test   eax,eax
c00229f7:	75 40                	jne    c0022a39 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00229f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022a01:	89 10                	mov    DWORD PTR [eax],edx
c0022a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a07:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022a0b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a15:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a20:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a23:	85 c0                	test   eax,eax
c0022a25:	74 22                	je     c0022a49 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022a27:	83 ec 0c             	sub    esp,0xc
c0022a2a:	68 e2 42 02 c0       	push   0xc00242e2
c0022a2f:	e8 bb 1e ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0022a34:	83 c4 10             	add    esp,0x10
c0022a37:	eb 10                	jmp    c0022a49 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022a39:	83 ec 0c             	sub    esp,0xc
c0022a3c:	68 ec 42 02 c0       	push   0xc00242ec
c0022a41:	e8 a9 1e ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0022a46:	83 c4 10             	add    esp,0x10
c0022a49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a4d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a50:	8d 50 01             	lea    edx,[eax+0x1]
c0022a53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a57:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022a5a:	90                   	nop
c0022a5b:	83 c4 0c             	add    esp,0xc
c0022a5e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022a60 <LinkedList<UnixFile>::getFirstElement()>:
c0022a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a64:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a66:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0022a68 <LinkedList<UnixFile>::removeFirst()>:
c0022a68:	83 ec 0c             	sub    esp,0xc
c0022a6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a71:	85 c0                	test   eax,eax
c0022a73:	75 12                	jne    c0022a87 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022a75:	83 ec 0c             	sub    esp,0xc
c0022a78:	68 f8 42 02 c0       	push   0xc00242f8
c0022a7d:	e8 6d 1e ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0022a82:	83 c4 10             	add    esp,0x10
c0022a85:	eb 7e                	jmp    c0022b05 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0022a87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a8e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a91:	85 c0                	test   eax,eax
c0022a93:	74 10                	je     c0022aa5 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0022a95:	83 ec 0c             	sub    esp,0xc
c0022a98:	68 43 43 02 c0       	push   0xc0024343
c0022a9d:	e8 4d 1e ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0022aa2:	83 c4 10             	add    esp,0x10
c0022aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aa9:	8b 00                	mov    eax,DWORD PTR [eax]
c0022aab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022aae:	85 c0                	test   eax,eax
c0022ab0:	75 33                	jne    c0022ae5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ab6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022abc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ac0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022ac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022acb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022ace:	83 f8 01             	cmp    eax,0x1
c0022ad1:	74 21                	je     c0022af4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022ad3:	83 ec 0c             	sub    esp,0xc
c0022ad6:	68 1c 43 02 c0       	push   0xc002431c
c0022adb:	e8 0f 1e ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0022ae0:	83 c4 10             	add    esp,0x10
c0022ae3:	eb 0f                	jmp    c0022af4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ae9:	8b 00                	mov    eax,DWORD PTR [eax]
c0022aeb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0022aee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022af2:	89 10                	mov    DWORD PTR [eax],edx
c0022af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022af8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022afb:	8d 50 ff             	lea    edx,[eax-0x1]
c0022afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022b05:	83 c4 0c             	add    esp,0xc
c0022b08:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0022b0a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0022b0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022b0e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b11:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0022b12 <DriverlessDevice::~DriverlessDevice()>:
c0022b12:	ba 1c 4b 02 c0       	mov    edx,0xc0024b1c
c0022b17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b1b:	89 10                	mov    DWORD PTR [eax],edx
c0022b1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b21:	50                   	push   eax
c0022b22:	e8 4d b5 fe ff       	call   c000e074 <Device::~Device()>
c0022b27:	83 c4 04             	add    esp,0x4
c0022b2a:	90                   	nop
c0022b2b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0022b2c <DriverlessDevice::~DriverlessDevice()>:
c0022b2c:	83 ec 0c             	sub    esp,0xc
c0022b2f:	83 ec 0c             	sub    esp,0xc
c0022b32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b36:	e8 d7 ff ff ff       	call   c0022b12 <DriverlessDevice::~DriverlessDevice()>
c0022b3b:	83 c4 10             	add    esp,0x10
c0022b3e:	83 ec 08             	sub    esp,0x8
c0022b41:	68 58 01 00 00       	push   0x158
c0022b46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b4a:	e8 cf a0 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0022b4f:	83 c4 10             	add    esp,0x10
c0022b52:	83 c4 0c             	add    esp,0xc
c0022b55:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0022b56 <LinkedList<Device>::addElement(Device*)>:
c0022b56:	83 ec 0c             	sub    esp,0xc
c0022b59:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022b5e:	75 10                	jne    c0022b70 <LinkedList<Device>::addElement(Device*)+0x1a>
c0022b60:	83 ec 0c             	sub    esp,0xc
c0022b63:	68 c0 42 02 c0       	push   0xc00242c0
c0022b68:	e8 82 1d ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0022b6d:	83 c4 10             	add    esp,0x10
c0022b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b74:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b76:	85 c0                	test   eax,eax
c0022b78:	74 3a                	je     c0022bb4 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b81:	85 c0                	test   eax,eax
c0022b83:	74 2f                	je     c0022bb4 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b8c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b90:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0022b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b9a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b9e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022ba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ba5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ba8:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022bb2:	eb 68                	jmp    c0022c1c <LinkedList<Device>::addElement(Device*)+0xc6>
c0022bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0022bba:	85 c0                	test   eax,eax
c0022bbc:	75 4e                	jne    c0022c0c <LinkedList<Device>::addElement(Device*)+0xb6>
c0022bbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022bc5:	85 c0                	test   eax,eax
c0022bc7:	75 43                	jne    c0022c0c <LinkedList<Device>::addElement(Device*)+0xb6>
c0022bc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bcd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022bd1:	89 10                	mov    DWORD PTR [eax],edx
c0022bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bd7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022bdb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022be2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022be5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022bef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bf3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022bf6:	85 c0                	test   eax,eax
c0022bf8:	74 22                	je     c0022c1c <LinkedList<Device>::addElement(Device*)+0xc6>
c0022bfa:	83 ec 0c             	sub    esp,0xc
c0022bfd:	68 e2 42 02 c0       	push   0xc00242e2
c0022c02:	e8 e8 1c ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0022c07:	83 c4 10             	add    esp,0x10
c0022c0a:	eb 10                	jmp    c0022c1c <LinkedList<Device>::addElement(Device*)+0xc6>
c0022c0c:	83 ec 0c             	sub    esp,0xc
c0022c0f:	68 ec 42 02 c0       	push   0xc00242ec
c0022c14:	e8 d6 1c ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0022c19:	83 c4 10             	add    esp,0x10
c0022c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c20:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c23:	8d 50 01             	lea    edx,[eax+0x1]
c0022c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c2a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022c2d:	90                   	nop
c0022c2e:	83 c4 0c             	add    esp,0xc
c0022c31:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0022c32 <LinkedList<Device>::LinkedList()>:
c0022c32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c36:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022c3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c40:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022c47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c4b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022c52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c56:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022c5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c60:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022c67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c6b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022c72:	90                   	nop
c0022c73:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0022c74 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0022c74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c78:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c7a:	85 c0                	test   eax,eax
c0022c7c:	75 0e                	jne    c0022c8c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022c7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c85:	85 c0                	test   eax,eax
c0022c87:	75 03                	jne    c0022c8c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022c89:	b0 01                	mov    al,0x1
c0022c8b:	c3                   	ret    
c0022c8c:	b0 00                	mov    al,0x0
c0022c8e:	90                   	nop
c0022c8f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0022c90 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0022c90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c94:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c96:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0022c98 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0022c98:	83 ec 0c             	sub    esp,0xc
c0022c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ca1:	85 c0                	test   eax,eax
c0022ca3:	75 17                	jne    c0022cbc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0022ca5:	83 ec 0c             	sub    esp,0xc
c0022ca8:	68 f8 42 02 c0       	push   0xc00242f8
c0022cad:	e8 3d 1c ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0022cb2:	83 c4 10             	add    esp,0x10
c0022cb5:	e9 92 00 00 00       	jmp    c0022d4c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c0022cba:	66 90                	xchg   ax,ax
c0022cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022cc3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022cc6:	85 c0                	test   eax,eax
c0022cc8:	0f 95 c0             	setne  al
c0022ccb:	84 c0                	test   al,al
c0022ccd:	74 11                	je     c0022ce0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c0022ccf:	83 ec 0c             	sub    esp,0xc
c0022cd2:	68 43 43 02 c0       	push   0xc0024343
c0022cd7:	e8 13 1c ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0022cdc:	83 c4 10             	add    esp,0x10
c0022cdf:	90                   	nop
c0022ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ce4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ce6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022ce9:	85 c0                	test   eax,eax
c0022ceb:	0f 94 c0             	sete   al
c0022cee:	84 c0                	test   al,al
c0022cf0:	74 36                	je     c0022d28 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0022cf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cf6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022cfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d00:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d0b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d0e:	83 f8 01             	cmp    eax,0x1
c0022d11:	74 25                	je     c0022d38 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022d13:	83 ec 0c             	sub    esp,0xc
c0022d16:	68 1c 43 02 c0       	push   0xc002431c
c0022d1b:	e8 cf 1b ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0022d20:	83 c4 10             	add    esp,0x10
c0022d23:	eb 13                	jmp    c0022d38 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022d25:	8d 76 00             	lea    esi,[esi+0x0]
c0022d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d2e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0022d31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d35:	89 10                	mov    DWORD PTR [eax],edx
c0022d37:	90                   	nop
c0022d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d3f:	8d 50 ff             	lea    edx,[eax-0x1]
c0022d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d46:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022d49:	8d 76 00             	lea    esi,[esi+0x0]
c0022d4c:	83 c4 0c             	add    esp,0xc
c0022d4f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0022d50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0022d50:	83 ec 0c             	sub    esp,0xc
c0022d53:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022d58:	75 12                	jne    c0022d6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0022d5a:	83 ec 0c             	sub    esp,0xc
c0022d5d:	68 c0 42 02 c0       	push   0xc00242c0
c0022d62:	e8 88 1b ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0022d67:	83 c4 10             	add    esp,0x10
c0022d6a:	66 90                	xchg   ax,ax
c0022d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d70:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d72:	85 c0                	test   eax,eax
c0022d74:	74 36                	je     c0022dac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d7d:	85 c0                	test   eax,eax
c0022d7f:	74 2b                	je     c0022dac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022d81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d8c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0022d8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022da1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022da8:	eb 6a                	jmp    c0022e14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022daa:	66 90                	xchg   ax,ax
c0022dac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022db0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022db2:	85 c0                	test   eax,eax
c0022db4:	75 4e                	jne    c0022e04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022dbd:	85 c0                	test   eax,eax
c0022dbf:	75 43                	jne    c0022e04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022dc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022dc9:	89 10                	mov    DWORD PTR [eax],edx
c0022dcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dcf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022dd3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ddd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022de8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022deb:	85 c0                	test   eax,eax
c0022ded:	74 25                	je     c0022e14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022def:	83 ec 0c             	sub    esp,0xc
c0022df2:	68 e2 42 02 c0       	push   0xc00242e2
c0022df7:	e8 f3 1a ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0022dfc:	83 c4 10             	add    esp,0x10
c0022dff:	eb 13                	jmp    c0022e14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022e01:	8d 76 00             	lea    esi,[esi+0x0]
c0022e04:	83 ec 0c             	sub    esp,0xc
c0022e07:	68 ec 42 02 c0       	push   0xc00242ec
c0022e0c:	e8 de 1a ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0022e11:	83 c4 10             	add    esp,0x10
c0022e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022e1b:	8d 50 01             	lea    edx,[eax+0x1]
c0022e1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e22:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022e25:	90                   	nop
c0022e26:	83 c4 0c             	add    esp,0xc
c0022e29:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0022e2c <ACPI::~ACPI()>:
c0022e2c:	83 ec 0c             	sub    esp,0xc
c0022e2f:	ba 4c 55 02 c0       	mov    edx,0xc002554c
c0022e34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e38:	89 10                	mov    DWORD PTR [eax],edx
c0022e3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e3e:	83 ec 0c             	sub    esp,0xc
c0022e41:	50                   	push   eax
c0022e42:	e8 2d b2 fe ff       	call   c000e074 <Device::~Device()>
c0022e47:	83 c4 10             	add    esp,0x10
c0022e4a:	90                   	nop
c0022e4b:	83 c4 0c             	add    esp,0xc
c0022e4e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0022e50 <ACPI::~ACPI()>:
c0022e50:	83 ec 0c             	sub    esp,0xc
c0022e53:	83 ec 0c             	sub    esp,0xc
c0022e56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e5a:	e8 cd ff ff ff       	call   c0022e2c <ACPI::~ACPI()>
c0022e5f:	83 c4 10             	add    esp,0x10
c0022e62:	83 ec 08             	sub    esp,0x8
c0022e65:	68 64 12 00 00       	push   0x1264
c0022e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e6e:	e8 ab 9d fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0022e73:	83 c4 10             	add    esp,0x10
c0022e76:	83 c4 0c             	add    esp,0xc
c0022e79:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0022e7c <LinkedList<Device>::~LinkedList()>:
c0022e7c:	90                   	nop
c0022e7d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0022e80 <LinkedList<Device>::isEmpty()>:
c0022e80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e84:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e86:	85 c0                	test   eax,eax
c0022e88:	75 0e                	jne    c0022e98 <LinkedList<Device>::isEmpty()+0x18>
c0022e8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022e91:	85 c0                	test   eax,eax
c0022e93:	75 03                	jne    c0022e98 <LinkedList<Device>::isEmpty()+0x18>
c0022e95:	b0 01                	mov    al,0x1
c0022e97:	c3                   	ret    
c0022e98:	b0 00                	mov    al,0x0
c0022e9a:	90                   	nop
c0022e9b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0022e9c <LinkedList<Device>::getFirstElement()>:
c0022e9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ea0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ea2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0022ea4 <LinkedList<Device>::removeFirst()>:
c0022ea4:	83 ec 0c             	sub    esp,0xc
c0022ea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eab:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ead:	85 c0                	test   eax,eax
c0022eaf:	75 17                	jne    c0022ec8 <LinkedList<Device>::removeFirst()+0x24>
c0022eb1:	83 ec 0c             	sub    esp,0xc
c0022eb4:	68 f8 42 02 c0       	push   0xc00242f8
c0022eb9:	e8 31 1a ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0022ebe:	83 c4 10             	add    esp,0x10
c0022ec1:	e9 92 00 00 00       	jmp    c0022f58 <LinkedList<Device>::removeFirst()+0xb4>
c0022ec6:	66 90                	xchg   ax,ax
c0022ec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ecc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ecf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022ed5:	85 c0                	test   eax,eax
c0022ed7:	74 13                	je     c0022eec <LinkedList<Device>::removeFirst()+0x48>
c0022ed9:	83 ec 0c             	sub    esp,0xc
c0022edc:	68 43 43 02 c0       	push   0xc0024343
c0022ee1:	e8 09 1a ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0022ee6:	83 c4 10             	add    esp,0x10
c0022ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0022eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ef0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ef2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022ef8:	85 c0                	test   eax,eax
c0022efa:	75 34                	jne    c0022f30 <LinkedList<Device>::removeFirst()+0x8c>
c0022efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f0a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022f11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f15:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022f18:	83 f8 01             	cmp    eax,0x1
c0022f1b:	74 27                	je     c0022f44 <LinkedList<Device>::removeFirst()+0xa0>
c0022f1d:	83 ec 0c             	sub    esp,0xc
c0022f20:	68 1c 43 02 c0       	push   0xc002431c
c0022f25:	e8 c5 19 ff ff       	call   c00148ef <Krnl::panic(char const*)>
c0022f2a:	83 c4 10             	add    esp,0x10
c0022f2d:	eb 15                	jmp    c0022f44 <LinkedList<Device>::removeFirst()+0xa0>
c0022f2f:	90                   	nop
c0022f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f34:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f36:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0022f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f40:	89 10                	mov    DWORD PTR [eax],edx
c0022f42:	66 90                	xchg   ax,ax
c0022f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022f4b:	8d 50 ff             	lea    edx,[eax-0x1]
c0022f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022f55:	8d 76 00             	lea    esi,[esi+0x0]
c0022f58:	83 c4 0c             	add    esp,0xc
c0022f5b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0022f5c <CPU::~CPU()>:
c0022f5c:	83 ec 0c             	sub    esp,0xc
c0022f5f:	ba 28 59 02 c0       	mov    edx,0xc0025928
c0022f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f68:	89 10                	mov    DWORD PTR [eax],edx
c0022f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f6e:	83 ec 0c             	sub    esp,0xc
c0022f71:	50                   	push   eax
c0022f72:	e8 fd b0 fe ff       	call   c000e074 <Device::~Device()>
c0022f77:	83 c4 10             	add    esp,0x10
c0022f7a:	90                   	nop
c0022f7b:	83 c4 0c             	add    esp,0xc
c0022f7e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0022f80 <CPU::~CPU()>:
c0022f80:	83 ec 0c             	sub    esp,0xc
c0022f83:	83 ec 0c             	sub    esp,0xc
c0022f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f8a:	e8 cd ff ff ff       	call   c0022f5c <CPU::~CPU()>
c0022f8f:	83 c4 10             	add    esp,0x10
c0022f92:	83 ec 08             	sub    esp,0x8
c0022f95:	68 98 11 00 00       	push   0x1198
c0022f9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f9e:	e8 7b 9c fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0022fa3:	83 c4 10             	add    esp,0x10
c0022fa6:	83 c4 0c             	add    esp,0xc
c0022fa9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0022fac <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0022fac:	90                   	nop
c0022fad:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0022fb0 <ThreadControlBlock::ThreadControlBlock()>:
c0022fb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fb4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022fbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fbf:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0022fc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fca:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0022fd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fd5:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0022fdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fe0:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0022fe7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022feb:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0022fef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ff3:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0022ff7:	90                   	nop
c0022ff8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0022ffc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0022ffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023000:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023006:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002300a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023011:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023015:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002301c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023020:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023026:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002302a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023031:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023035:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002303c:	90                   	nop
c002303d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0023040 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0023040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023044:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023047:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0023048 <Vm::_FPUState::_FPUState()>:
c0023048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002304c:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0023053:	90                   	nop
c0023054:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0023056 <PCI::~PCI()>:
c0023056:	83 ec 0c             	sub    esp,0xc
c0023059:	ba 30 67 02 c0       	mov    edx,0xc0026730
c002305e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023062:	89 10                	mov    DWORD PTR [eax],edx
c0023064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023068:	83 ec 0c             	sub    esp,0xc
c002306b:	50                   	push   eax
c002306c:	e8 d3 a9 fe ff       	call   c000da44 <Bus::~Bus()>
c0023071:	83 c4 10             	add    esp,0x10
c0023074:	90                   	nop
c0023075:	83 c4 0c             	add    esp,0xc
c0023078:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002307a <PCI::~PCI()>:
c002307a:	83 ec 0c             	sub    esp,0xc
c002307d:	83 ec 0c             	sub    esp,0xc
c0023080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023084:	e8 cd ff ff ff       	call   c0023056 <PCI::~PCI()>
c0023089:	83 c4 10             	add    esp,0x10
c002308c:	83 ec 08             	sub    esp,0x8
c002308f:	68 5c 01 00 00       	push   0x15c
c0023094:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023098:	e8 81 9b fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c002309d:	83 c4 10             	add    esp,0x10
c00230a0:	83 c4 0c             	add    esp,0xc
c00230a3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00230a4 <IDE::~IDE()>:
c00230a4:	83 ec 0c             	sub    esp,0xc
c00230a7:	ba e4 67 02 c0       	mov    edx,0xc00267e4
c00230ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230b0:	89 10                	mov    DWORD PTR [eax],edx
c00230b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230b6:	83 ec 0c             	sub    esp,0xc
c00230b9:	50                   	push   eax
c00230ba:	e8 cd b4 fe ff       	call   c000e58c <HardDiskController::~HardDiskController()>
c00230bf:	83 c4 10             	add    esp,0x10
c00230c2:	90                   	nop
c00230c3:	83 c4 0c             	add    esp,0xc
c00230c6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00230c8 <IDE::~IDE()>:
c00230c8:	83 ec 0c             	sub    esp,0xc
c00230cb:	83 ec 0c             	sub    esp,0xc
c00230ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230d2:	e8 cd ff ff ff       	call   c00230a4 <IDE::~IDE()>
c00230d7:	83 c4 10             	add    esp,0x10
c00230da:	83 ec 08             	sub    esp,0x8
c00230dd:	68 70 02 00 00       	push   0x270
c00230e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230e6:	e8 33 9b fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00230eb:	83 c4 10             	add    esp,0x10
c00230ee:	83 c4 0c             	add    esp,0xc
c00230f1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00230f2 <SATABus::~SATABus()>:
c00230f2:	83 ec 0c             	sub    esp,0xc
c00230f5:	ba 38 69 02 c0       	mov    edx,0xc0026938
c00230fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230fe:	89 10                	mov    DWORD PTR [eax],edx
c0023100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023104:	83 ec 0c             	sub    esp,0xc
c0023107:	50                   	push   eax
c0023108:	e8 7f b4 fe ff       	call   c000e58c <HardDiskController::~HardDiskController()>
c002310d:	83 c4 10             	add    esp,0x10
c0023110:	90                   	nop
c0023111:	83 c4 0c             	add    esp,0xc
c0023114:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0023116 <SATABus::~SATABus()>:
c0023116:	83 ec 0c             	sub    esp,0xc
c0023119:	83 ec 0c             	sub    esp,0xc
c002311c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023120:	e8 cd ff ff ff       	call   c00230f2 <SATABus::~SATABus()>
c0023125:	83 c4 10             	add    esp,0x10
c0023128:	83 ec 08             	sub    esp,0x8
c002312b:	68 64 01 00 00       	push   0x164
c0023130:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023134:	e8 e5 9a fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0023139:	83 c4 10             	add    esp,0x10
c002313c:	83 c4 0c             	add    esp,0xc
c002313f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0023140 <ATA::~ATA()>:
c0023140:	83 ec 0c             	sub    esp,0xc
c0023143:	ba b0 69 02 c0       	mov    edx,0xc00269b0
c0023148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002314c:	89 10                	mov    DWORD PTR [eax],edx
c002314e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023152:	83 ec 0c             	sub    esp,0xc
c0023155:	50                   	push   eax
c0023156:	e8 13 b5 fe ff       	call   c000e66e <PhysicalDisk::~PhysicalDisk()>
c002315b:	83 c4 10             	add    esp,0x10
c002315e:	90                   	nop
c002315f:	83 c4 0c             	add    esp,0xc
c0023162:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0023164 <ATA::~ATA()>:
c0023164:	83 ec 0c             	sub    esp,0xc
c0023167:	83 ec 0c             	sub    esp,0xc
c002316a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002316e:	e8 cd ff ff ff       	call   c0023140 <ATA::~ATA()>
c0023173:	83 c4 10             	add    esp,0x10
c0023176:	83 ec 08             	sub    esp,0x8
c0023179:	68 7c 01 00 00       	push   0x17c
c002317e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023182:	e8 97 9a fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0023187:	83 c4 10             	add    esp,0x10
c002318a:	83 c4 0c             	add    esp,0xc
c002318d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002318e <ATAPI::~ATAPI()>:
c002318e:	83 ec 0c             	sub    esp,0xc
c0023191:	ba e8 69 02 c0       	mov    edx,0xc00269e8
c0023196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002319a:	89 10                	mov    DWORD PTR [eax],edx
c002319c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231a0:	83 ec 0c             	sub    esp,0xc
c00231a3:	50                   	push   eax
c00231a4:	e8 c5 b4 fe ff       	call   c000e66e <PhysicalDisk::~PhysicalDisk()>
c00231a9:	83 c4 10             	add    esp,0x10
c00231ac:	90                   	nop
c00231ad:	83 c4 0c             	add    esp,0xc
c00231b0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00231b2 <ATAPI::~ATAPI()>:
c00231b2:	83 ec 0c             	sub    esp,0xc
c00231b5:	83 ec 0c             	sub    esp,0xc
c00231b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231bc:	e8 cd ff ff ff       	call   c002318e <ATAPI::~ATAPI()>
c00231c1:	83 c4 10             	add    esp,0x10
c00231c4:	83 ec 08             	sub    esp,0x8
c00231c7:	68 80 01 00 00       	push   0x180
c00231cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231d0:	e8 49 9a fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00231d5:	83 c4 10             	add    esp,0x10
c00231d8:	83 c4 0c             	add    esp,0xc
c00231db:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00231dc <SATA::~SATA()>:
c00231dc:	83 ec 0c             	sub    esp,0xc
c00231df:	ba 24 6c 02 c0       	mov    edx,0xc0026c24
c00231e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231e8:	89 10                	mov    DWORD PTR [eax],edx
c00231ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231ee:	83 ec 0c             	sub    esp,0xc
c00231f1:	50                   	push   eax
c00231f2:	e8 77 b4 fe ff       	call   c000e66e <PhysicalDisk::~PhysicalDisk()>
c00231f7:	83 c4 10             	add    esp,0x10
c00231fa:	90                   	nop
c00231fb:	83 c4 0c             	add    esp,0xc
c00231fe:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0023200 <SATA::~SATA()>:
c0023200:	83 ec 0c             	sub    esp,0xc
c0023203:	83 ec 0c             	sub    esp,0xc
c0023206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002320a:	e8 cd ff ff ff       	call   c00231dc <SATA::~SATA()>
c002320f:	83 c4 10             	add    esp,0x10
c0023212:	83 ec 08             	sub    esp,0x8
c0023215:	68 7c 01 00 00       	push   0x17c
c002321a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002321e:	e8 fb 99 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0023223:	83 c4 10             	add    esp,0x10
c0023226:	83 c4 0c             	add    esp,0xc
c0023229:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002322a <SATAPI::~SATAPI()>:
c002322a:	83 ec 0c             	sub    esp,0xc
c002322d:	ba d0 6d 02 c0       	mov    edx,0xc0026dd0
c0023232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023236:	89 10                	mov    DWORD PTR [eax],edx
c0023238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002323c:	83 ec 0c             	sub    esp,0xc
c002323f:	50                   	push   eax
c0023240:	e8 29 b4 fe ff       	call   c000e66e <PhysicalDisk::~PhysicalDisk()>
c0023245:	83 c4 10             	add    esp,0x10
c0023248:	90                   	nop
c0023249:	83 c4 0c             	add    esp,0xc
c002324c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002324e <SATAPI::~SATAPI()>:
c002324e:	83 ec 0c             	sub    esp,0xc
c0023251:	83 ec 0c             	sub    esp,0xc
c0023254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023258:	e8 cd ff ff ff       	call   c002322a <SATAPI::~SATAPI()>
c002325d:	83 c4 10             	add    esp,0x10
c0023260:	83 ec 08             	sub    esp,0x8
c0023263:	68 84 01 00 00       	push   0x184
c0023268:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002326c:	e8 ad 99 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0023271:	83 c4 10             	add    esp,0x10
c0023274:	83 c4 0c             	add    esp,0xc
c0023277:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0023278 <AVX::~AVX()>:
c0023278:	83 ec 0c             	sub    esp,0xc
c002327b:	ba 10 6e 02 c0       	mov    edx,0xc0026e10
c0023280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023284:	89 10                	mov    DWORD PTR [eax],edx
c0023286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002328a:	83 ec 0c             	sub    esp,0xc
c002328d:	50                   	push   eax
c002328e:	e8 61 b4 fe ff       	call   c000e6f4 <FPU::~FPU()>
c0023293:	83 c4 10             	add    esp,0x10
c0023296:	90                   	nop
c0023297:	83 c4 0c             	add    esp,0xc
c002329a:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c002329c <AVX::~AVX()>:
c002329c:	83 ec 0c             	sub    esp,0xc
c002329f:	83 ec 0c             	sub    esp,0xc
c00232a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232a6:	e8 cd ff ff ff       	call   c0023278 <AVX::~AVX()>
c00232ab:	83 c4 10             	add    esp,0x10
c00232ae:	83 ec 08             	sub    esp,0x8
c00232b1:	68 58 01 00 00       	push   0x158
c00232b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232ba:	e8 5f 99 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00232bf:	83 c4 10             	add    esp,0x10
c00232c2:	83 c4 0c             	add    esp,0xc
c00232c5:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00232c8 <MMX::~MMX()>:
c00232c8:	83 ec 0c             	sub    esp,0xc
c00232cb:	ba 50 6e 02 c0       	mov    edx,0xc0026e50
c00232d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232d4:	89 10                	mov    DWORD PTR [eax],edx
c00232d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232da:	83 ec 0c             	sub    esp,0xc
c00232dd:	50                   	push   eax
c00232de:	e8 11 b4 fe ff       	call   c000e6f4 <FPU::~FPU()>
c00232e3:	83 c4 10             	add    esp,0x10
c00232e6:	90                   	nop
c00232e7:	83 c4 0c             	add    esp,0xc
c00232ea:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00232ec <MMX::~MMX()>:
c00232ec:	83 ec 0c             	sub    esp,0xc
c00232ef:	83 ec 0c             	sub    esp,0xc
c00232f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232f6:	e8 cd ff ff ff       	call   c00232c8 <MMX::~MMX()>
c00232fb:	83 c4 10             	add    esp,0x10
c00232fe:	83 ec 08             	sub    esp,0x8
c0023301:	68 58 01 00 00       	push   0x158
c0023306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002330a:	e8 0f 99 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c002330f:	83 c4 10             	add    esp,0x10
c0023312:	83 c4 0c             	add    esp,0xc
c0023315:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0023318 <SSE::~SSE()>:
c0023318:	83 ec 0c             	sub    esp,0xc
c002331b:	ba 90 6e 02 c0       	mov    edx,0xc0026e90
c0023320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023324:	89 10                	mov    DWORD PTR [eax],edx
c0023326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002332a:	83 ec 0c             	sub    esp,0xc
c002332d:	50                   	push   eax
c002332e:	e8 c1 b3 fe ff       	call   c000e6f4 <FPU::~FPU()>
c0023333:	83 c4 10             	add    esp,0x10
c0023336:	90                   	nop
c0023337:	83 c4 0c             	add    esp,0xc
c002333a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002333c <SSE::~SSE()>:
c002333c:	83 ec 0c             	sub    esp,0xc
c002333f:	83 ec 0c             	sub    esp,0xc
c0023342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023346:	e8 cd ff ff ff       	call   c0023318 <SSE::~SSE()>
c002334b:	83 c4 10             	add    esp,0x10
c002334e:	83 ec 08             	sub    esp,0x8
c0023351:	68 58 01 00 00       	push   0x158
c0023356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002335a:	e8 bf 98 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c002335f:	83 c4 10             	add    esp,0x10
c0023362:	83 c4 0c             	add    esp,0xc
c0023365:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0023368 <x87::~x87()>:
c0023368:	83 ec 0c             	sub    esp,0xc
c002336b:	ba d0 6e 02 c0       	mov    edx,0xc0026ed0
c0023370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023374:	89 10                	mov    DWORD PTR [eax],edx
c0023376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002337a:	83 ec 0c             	sub    esp,0xc
c002337d:	50                   	push   eax
c002337e:	e8 71 b3 fe ff       	call   c000e6f4 <FPU::~FPU()>
c0023383:	83 c4 10             	add    esp,0x10
c0023386:	90                   	nop
c0023387:	83 c4 0c             	add    esp,0xc
c002338a:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002338c <x87::~x87()>:
c002338c:	83 ec 0c             	sub    esp,0xc
c002338f:	83 ec 0c             	sub    esp,0xc
c0023392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023396:	e8 cd ff ff ff       	call   c0023368 <x87::~x87()>
c002339b:	83 c4 10             	add    esp,0x10
c002339e:	83 ec 08             	sub    esp,0x8
c00233a1:	68 58 01 00 00       	push   0x158
c00233a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233aa:	e8 6f 98 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00233af:	83 c4 10             	add    esp,0x10
c00233b2:	83 c4 0c             	add    esp,0xc
c00233b5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00233b6 <IOAPIC::~IOAPIC()>:
c00233b6:	83 ec 0c             	sub    esp,0xc
c00233b9:	ba 28 70 02 c0       	mov    edx,0xc0027028
c00233be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233c2:	89 10                	mov    DWORD PTR [eax],edx
c00233c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233c8:	83 ec 0c             	sub    esp,0xc
c00233cb:	50                   	push   eax
c00233cc:	e8 a3 ac fe ff       	call   c000e074 <Device::~Device()>
c00233d1:	83 c4 10             	add    esp,0x10
c00233d4:	90                   	nop
c00233d5:	83 c4 0c             	add    esp,0xc
c00233d8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00233da <IOAPIC::~IOAPIC()>:
c00233da:	83 ec 0c             	sub    esp,0xc
c00233dd:	83 ec 0c             	sub    esp,0xc
c00233e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233e4:	e8 cd ff ff ff       	call   c00233b6 <IOAPIC::~IOAPIC()>
c00233e9:	83 c4 10             	add    esp,0x10
c00233ec:	83 ec 08             	sub    esp,0x8
c00233ef:	68 68 01 00 00       	push   0x168
c00233f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233f8:	e8 21 98 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00233fd:	83 c4 10             	add    esp,0x10
c0023400:	83 c4 0c             	add    esp,0xc
c0023403:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0023404 <APIC::~APIC()>:
c0023404:	83 ec 0c             	sub    esp,0xc
c0023407:	ba e0 6f 02 c0       	mov    edx,0xc0026fe0
c002340c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023410:	89 10                	mov    DWORD PTR [eax],edx
c0023412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023416:	83 ec 0c             	sub    esp,0xc
c0023419:	50                   	push   eax
c002341a:	e8 a9 b7 fe ff       	call   c000ebc8 <InterruptController::~InterruptController()>
c002341f:	83 c4 10             	add    esp,0x10
c0023422:	90                   	nop
c0023423:	83 c4 0c             	add    esp,0xc
c0023426:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0023428 <APIC::~APIC()>:
c0023428:	83 ec 0c             	sub    esp,0xc
c002342b:	83 ec 0c             	sub    esp,0xc
c002342e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023432:	e8 cd ff ff ff       	call   c0023404 <APIC::~APIC()>
c0023437:	83 c4 10             	add    esp,0x10
c002343a:	83 ec 08             	sub    esp,0x8
c002343d:	68 58 21 00 00       	push   0x2158
c0023442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023446:	e8 d3 97 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c002344b:	83 c4 10             	add    esp,0x10
c002344e:	83 c4 0c             	add    esp,0xc
c0023451:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0023452 <PIC::~PIC()>:
c0023452:	83 ec 0c             	sub    esp,0xc
c0023455:	ba 78 70 02 c0       	mov    edx,0xc0027078
c002345a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002345e:	89 10                	mov    DWORD PTR [eax],edx
c0023460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023464:	83 ec 0c             	sub    esp,0xc
c0023467:	50                   	push   eax
c0023468:	e8 5b b7 fe ff       	call   c000ebc8 <InterruptController::~InterruptController()>
c002346d:	83 c4 10             	add    esp,0x10
c0023470:	90                   	nop
c0023471:	83 c4 0c             	add    esp,0xc
c0023474:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0023476 <PIC::~PIC()>:
c0023476:	83 ec 0c             	sub    esp,0xc
c0023479:	83 ec 0c             	sub    esp,0xc
c002347c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023480:	e8 cd ff ff ff       	call   c0023452 <PIC::~PIC()>
c0023485:	83 c4 10             	add    esp,0x10
c0023488:	83 ec 08             	sub    esp,0x8
c002348b:	68 58 21 00 00       	push   0x2158
c0023490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023494:	e8 85 97 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0023499:	83 c4 10             	add    esp,0x10
c002349c:	83 c4 0c             	add    esp,0xc
c002349f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00234a0 <APICTimer::~APICTimer()>:
c00234a0:	83 ec 0c             	sub    esp,0xc
c00234a3:	ba cc 70 02 c0       	mov    edx,0xc00270cc
c00234a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234ac:	89 10                	mov    DWORD PTR [eax],edx
c00234ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234b2:	83 ec 0c             	sub    esp,0xc
c00234b5:	50                   	push   eax
c00234b6:	e8 1d d5 fe ff       	call   c00109d8 <Timer::~Timer()>
c00234bb:	83 c4 10             	add    esp,0x10
c00234be:	90                   	nop
c00234bf:	83 c4 0c             	add    esp,0xc
c00234c2:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00234c4 <APICTimer::~APICTimer()>:
c00234c4:	83 ec 0c             	sub    esp,0xc
c00234c7:	83 ec 0c             	sub    esp,0xc
c00234ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234ce:	e8 cd ff ff ff       	call   c00234a0 <APICTimer::~APICTimer()>
c00234d3:	83 c4 10             	add    esp,0x10
c00234d6:	83 ec 08             	sub    esp,0x8
c00234d9:	68 60 01 00 00       	push   0x160
c00234de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234e2:	e8 37 97 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00234e7:	83 c4 10             	add    esp,0x10
c00234ea:	83 c4 0c             	add    esp,0xc
c00234ed:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00234f0 <PIT::~PIT()>:
c00234f0:	83 ec 0c             	sub    esp,0xc
c00234f3:	ba 1c 71 02 c0       	mov    edx,0xc002711c
c00234f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234fc:	89 10                	mov    DWORD PTR [eax],edx
c00234fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023502:	83 ec 0c             	sub    esp,0xc
c0023505:	50                   	push   eax
c0023506:	e8 cd d4 fe ff       	call   c00109d8 <Timer::~Timer()>
c002350b:	83 c4 10             	add    esp,0x10
c002350e:	90                   	nop
c002350f:	83 c4 0c             	add    esp,0xc
c0023512:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0023514 <PIT::~PIT()>:
c0023514:	83 ec 0c             	sub    esp,0xc
c0023517:	83 ec 0c             	sub    esp,0xc
c002351a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002351e:	e8 cd ff ff ff       	call   c00234f0 <PIT::~PIT()>
c0023523:	83 c4 10             	add    esp,0x10
c0023526:	83 ec 08             	sub    esp,0x8
c0023529:	68 5c 01 00 00       	push   0x15c
c002352e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023532:	e8 e7 96 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0023537:	83 c4 10             	add    esp,0x10
c002353a:	83 c4 0c             	add    esp,0xc
c002353d:	c3                   	ret    
